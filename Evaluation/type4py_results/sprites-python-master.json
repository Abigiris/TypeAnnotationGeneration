{
    "sprites-python-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 55,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sprites-python-master/src/channel.py": {
        "Base.to": {
            "name": "to",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.deposit": {
            "name": "deposit",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "amount": [],
                "token": []
            }
        },
        "Channel.get_deposit": {
            "name": "get_deposit",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "who": [],
                "side": []
            }
        },
        "Channel.get_status": {
            "name": "get_status",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.get_deadline": {
            "name": "get_deadline",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.get_withdrawn": {
            "name": "get_withdrawn",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "Channel.withdraw": {
            "name": "withdraw",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "who": [],
                "side": []
            }
        },
        "Channel.trigger": {
            "name": "trigger",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "who": [],
                "side": []
            }
        },
        "Channel.finalize": {
            "name": "finalize",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "who": [],
                "side": []
            }
        },
        "Channel.get_state": {
            "name": "get_state",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "who": []
            }
        },
        "Channel.conditional_payment": {
            "name": "conditional_payment",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "recipient": [],
                "amount": [],
                "preimage": []
            }
        },
        "Channel.update": {
            "name": "update",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "who": [],
                "args": [],
                "check": []
            }
        },
        "Channel.submit_preimage": {
            "name": "submit_preimage",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "who": [],
                "preimage": []
            }
        },
        "Payment.channel_state_update_arguments": {
            "name": "channel_state_update_arguments",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelState.state_data": {
            "name": "state_data",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelState.to_other": {
            "name": "to_other",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelState.state_update_arguments": {
            "name": "state_update_arguments",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelState.channel_state_update_arguments": {
            "name": "channel_state_update_arguments",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelState.message_hash": {
            "name": "message_hash",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelState.sign": {
            "name": "sign",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "private_key": []
            }
        },
        "ChannelState.make_payment": {
            "name": "make_payment",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "recipient": [],
                "expiry": [],
                "preimage": []
            }
        },
        "ChannelState.conditional_payment": {
            "name": "conditional_payment",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "recipient": [],
                "amount": [],
                "expiry": [],
                "preimage": []
            }
        },
        "ChannelState.complete_payment": {
            "name": "complete_payment",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelState._check_credit": {
            "name": "_check_credit",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "ChannelState._check_deposit": {
            "name": "_check_deposit",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "ChannelState._check_withdrawal": {
            "name": "_check_withdrawal",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "ChannelState._check_round_number": {
            "name": "_check_round_number",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "ChannelState._validate_open": {
            "name": "_validate_open",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "ChannelState._validate_complete": {
            "name": "_validate_complete",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "ChannelState._validate_cancel": {
            "name": "_validate_cancel",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "ChannelState._check_unchanged": {
            "name": "_check_unchanged",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": [],
                "attributes": []
            }
        },
        "ChannelState._validate_update": {
            "name": "_validate_update",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "ChannelState.validate": {
            "name": "validate",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": [],
                "command": []
            }
        },
        "SignedState.to_unsigned": {
            "name": "to_unsigned",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedState.recover_address": {
            "name": "recover_address",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedState.verify_signature": {
            "name": "verify_signature",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "Player.receive_payment": {
            "name": "receive_payment",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "payment": []
            }
        },
        "Player.make_payment": {
            "name": "make_payment",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "amount": []
            }
        }
    },
    "sprites-python-master/src/cli.py": {
        "cli": {
            "name": "cli",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sprites-python-master/src/code_gen.py": {
        "make_function": {
            "name": "make_function",
            "location": 15,
            "return": [
                "Optional[str]",
                "mypy.nodes.ClassDef",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Type[T]",
                    "T",
                    "int"
                ],
                "args": []
            }
        },
        "make_init": {
            "name": "make_init",
            "location": 50,
            "return": [
                "Type[Any]",
                "Optional[Any]",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "wrap_module": {
            "name": "wrap_module",
            "location": 69,
            "return": [
                "bool",
                "List[List[str]]",
                "str",
                "dict",
                "Iterable[Any]"
            ],
            "arguments": {
                "class_defs": [
                    "str",
                    "type",
                    "Protocol"
                ]
            }
        },
        "make_python_contract": {
            "name": "make_python_contract",
            "location": 73,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "contract_name": [
                    "str"
                ],
                "abi": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        }
    },
    "sprites-python-master/src/exceptions.py": {},
    "sprites-python-master/src/util.py": {
        "to_bytes": {
            "name": "to_bytes",
            "location": 23,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "primitive": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "pad": {
            "name": "pad",
            "location": 40,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "pack": {
            "name": "pack",
            "location": 54,
            "return": [
                "int",
                "BinaryIO",
                "bytes"
            ],
            "arguments": {
                "args": []
            }
        },
        "generate_preimage": {
            "name": "generate_preimage",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "hash_and_sign": {
            "name": "hash_and_sign",
            "location": 62,
            "return": [
                "str",
                "raiden.utils.Any"
            ],
            "arguments": {
                "msg_bytes": [
                    "bytes",
                    "dict",
                    "List[bytes]"
                ],
                "private_key": [
                    "bytes",
                    "dict",
                    "List[bytes]"
                ]
            }
        },
        "hash_message": {
            "name": "hash_message",
            "location": 66,
            "return": [
                "dict",
                "str",
                "List[str]",
                "List[dict]",
                "T",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "msg_bytes": [
                    "int",
                    "float",
                    "bytes",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 70,
            "return": [
                "\"Position\"",
                "int",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "hash_to_sign": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "bool",
                    "int"
                ],
                "private_key": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "check_status": {
            "name": "check_status",
            "location": 74,
            "return": [
                "Optional[str]",
                "int",
                "bytearray"
            ],
            "arguments": {
                "fun": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable[[], None]"
                ]
            }
        },
        "check_tx": {
            "name": "check_tx",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "bool",
                    "Tuple[float, float]",
                    "raiden.utils.Address"
                ],
                "tx_hash": [
                    "bool",
                    "Tuple[float, float]",
                    "raiden.utils.Address"
                ]
            }
        },
        "tx_args": {
            "name": "tx_args",
            "location": 94,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Optional[Dict]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "int"
                ],
                "sender": [
                    "str",
                    "int"
                ],
                "gas": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_default_account": {
            "name": "_default_account",
            "location": 99,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bool"
                ]
            }
        },
        "fund_eth": {
            "name": "fund_eth",
            "location": 104,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "web3": [
                    "bytes",
                    "type",
                    "dict",
                    "str",
                    "Optional['Block']",
                    "int",
                    "bool"
                ],
                "to": [
                    "bytes",
                    "type",
                    "dict",
                    "str",
                    "Optional['Block']",
                    "int",
                    "bool"
                ],
                "amount": [
                    "int",
                    "bool"
                ]
            }
        },
        "fund_token": {
            "name": "fund_token",
            "location": 109,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "web3": [
                    "dict",
                    "int",
                    "Iterable[dict]",
                    "str",
                    "bool"
                ],
                "token": [
                    "dict",
                    "int",
                    "Iterable[dict]",
                    "str",
                    "bool"
                ],
                "sender": [
                    "bool",
                    "Sequence[str]"
                ],
                "to": [
                    "dict",
                    "int",
                    "Iterable[dict]",
                    "str",
                    "bool"
                ],
                "amount": [
                    "dict",
                    "int",
                    "Iterable[dict]",
                    "str",
                    "bool"
                ]
            }
        },
        "mint": {
            "name": "mint",
            "location": 114,
            "return": [
                "int",
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool",
                    "List[str]"
                ],
                "token": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool",
                    "List[str]"
                ],
                "recipient": [
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "fund_account": {
            "name": "fund_account",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "raiden.utils.Address",
                    "raiden.utils.Callable",
                    "Callable",
                    "web3.contracContract",
                    "raiden.messages.RevealSecret"
                ],
                "guy": [
                    "raiden.utils.Address",
                    "raiden.messages.RevealSecret",
                    "Tuple[float, float]",
                    "bool",
                    "raiden.utils.Callable",
                    "str",
                    "int"
                ],
                "account": [
                    "raiden.utils.Address",
                    "raiden.messages.RevealSecret",
                    "Tuple[float, float]",
                    "bool",
                    "raiden.utils.Callable",
                    "str",
                    "int"
                ]
            }
        },
        "load_contract": {
            "name": "load_contract",
            "location": 125,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 132,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "web3": [
                    "bytes",
                    "float",
                    "bool"
                ],
                "deployer": [
                    "List[Type]",
                    "Callable",
                    "float",
                    "Optional[Callable[..., None]]",
                    "tuple"
                ],
                "fname": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "cls": [
                    "bool",
                    "Optional[str]",
                    "Tuple[int, int, int]",
                    "int",
                    "float"
                ],
                "args": []
            }
        },
        "noop_tx": {
            "name": "noop_tx",
            "location": 151,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "web3": [
                    "List[str]",
                    "logging.LogRecord",
                    "AbstractSet[str]"
                ]
            }
        },
        "wait_blocks": {
            "name": "wait_blocks",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "int",
                    "bool",
                    "str"
                ],
                "num_blocks": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "check_status.wrapper": {
            "name": "wrapper",
            "location": 76,
            "return": [
                "trezor.utils.Writer",
                "str",
                "dict",
                "utils.Node",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Collection[T]",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "sprites-python-master/src/__init__.py": {},
    "sprites-python-master/src/__version__.py": {},
    "sprites-python-master/src/contracts/contractPay.py": {
        "PaymentChannel.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PaymentChannel.credits": {
            "name": "credits",
            "location": 5,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "PaymentChannel.deposit": {
            "name": "deposit",
            "location": 8,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentChannel.deposits": {
            "name": "deposits",
            "location": 11,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "PaymentChannel.finalize": {
            "name": "finalize",
            "location": 14,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentChannel.players": {
            "name": "players",
            "location": 17,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "PaymentChannel.sha3int": {
            "name": "sha3int",
            "location": 20,
            "return": [
                "str",
                "tuple",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "str"
                ]
            }
        },
        "PaymentChannel.status": {
            "name": "status",
            "location": 23,
            "return": [
                "bool",
                "IO[str]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentChannel.trigger": {
            "name": "trigger",
            "location": 26,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentChannel.update": {
            "name": "update",
            "location": 29,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "int",
                    "Callable",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "r": [
                    "int",
                    "Callable",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "_credits": [
                    "int",
                    "Callable",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "_withdrawals": [
                    "int",
                    "Callable",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "PaymentChannel.verifySignature": {
            "name": "verifySignature",
            "location": 32,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "pub": [
                    "bool",
                    "int"
                ],
                "h": [
                    "bool",
                    "int"
                ],
                "v": [
                    "bool",
                    "int"
                ],
                "r": [
                    "bool",
                    "int"
                ],
                "s": [
                    "bool",
                    "int"
                ]
            }
        },
        "PaymentChannel.withdraw": {
            "name": "withdraw",
            "location": 35,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentChannel.withdrawals": {
            "name": "withdrawals",
            "location": 38,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "PaymentChannel.withdrawn": {
            "name": "withdrawn",
            "location": 41,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "sprites-python-master/src/contracts/contractSprite.py": {
        "PreimageManager.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PreimageManager.revealedBefore": {
            "name": "revealedBefore",
            "location": 5,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "Optional[str]"
                ],
                "T": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "Optional[str]"
                ]
            }
        },
        "PreimageManager.submitPreimage": {
            "name": "submitPreimage",
            "location": 8,
            "return": [
                "List[int]",
                "Tuple[str]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Optional[str]",
                    "list",
                    "float"
                ]
            }
        },
        "SpriteChannel.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SpriteChannel.amount": {
            "name": "amount",
            "location": 16,
            "return": [
                "bool",
                "Type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpriteChannel.credits": {
            "name": "credits",
            "location": 19,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "SpriteChannel.deposit": {
            "name": "deposit",
            "location": 22,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpriteChannel.deposits": {
            "name": "deposits",
            "location": 25,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "SpriteChannel.expiry": {
            "name": "expiry",
            "location": 28,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpriteChannel.finalize": {
            "name": "finalize",
            "location": 31,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpriteChannel.hash": {
            "name": "hash",
            "location": 34,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpriteChannel.players": {
            "name": "players",
            "location": 37,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "SpriteChannel.sha3int": {
            "name": "sha3int",
            "location": 40,
            "return": [
                "str",
                "tuple",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "str"
                ]
            }
        },
        "SpriteChannel.status": {
            "name": "status",
            "location": 43,
            "return": [
                "bool",
                "IO[str]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpriteChannel.trigger": {
            "name": "trigger",
            "location": 46,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpriteChannel.update": {
            "name": "update",
            "location": 49,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "int",
                    "float",
                    "Dict[str, str]",
                    "bytes"
                ],
                "r": [
                    "int",
                    "float",
                    "Dict[str, str]",
                    "bytes"
                ],
                "_credits": [
                    "int",
                    "float",
                    "Dict[str, str]",
                    "bytes"
                ],
                "_withdrawals": [
                    "int",
                    "float",
                    "Dict[str, str]",
                    "bytes"
                ],
                "_hash": [
                    "int",
                    "float",
                    "Dict[str, str]",
                    "bytes"
                ],
                "_expiry": [
                    "int",
                    "float",
                    "Dict[str, str]",
                    "bytes"
                ],
                "_amount": [
                    "int",
                    "float",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "SpriteChannel.verifySignature": {
            "name": "verifySignature",
            "location": 54,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "pub": [
                    "bool",
                    "int"
                ],
                "h": [
                    "bool",
                    "int"
                ],
                "v": [
                    "bool",
                    "int"
                ],
                "r": [
                    "bool",
                    "int"
                ],
                "s": [
                    "bool",
                    "int"
                ]
            }
        },
        "SpriteChannel.withdraw": {
            "name": "withdraw",
            "location": 57,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpriteChannel.withdrawals": {
            "name": "withdrawals",
            "location": 60,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "SpriteChannel.withdrawn": {
            "name": "withdrawn",
            "location": 63,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "sprites-python-master/src/contracts/dappsys.py": {
        "DSAuth.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSAuth.authority": {
            "name": "authority",
            "location": 5,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSAuth.owner": {
            "name": "owner",
            "location": 8,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSAuth.setAuthority": {
            "name": "setAuthority",
            "location": 11,
            "return": [
                "Sequence['cirq.Qid']",
                "list",
                "Optional[Iterable[str]]",
                "Awaitable[T]"
            ],
            "arguments": {
                "self": [],
                "authority_": [
                    "int",
                    "str"
                ]
            }
        },
        "DSAuth.setOwner": {
            "name": "setOwner",
            "location": 14,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "owner_": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DSAuthEvents.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSAuthority.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSAuthority.canCall": {
            "name": "canCall",
            "location": 27,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "list",
                    "int"
                ],
                "dst": [
                    "str",
                    "list",
                    "int"
                ],
                "sig": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "DSExec.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSGuard.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSGuard.ANY": {
            "name": "ANY",
            "location": 40,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSGuard.authority": {
            "name": "authority",
            "location": 43,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSGuard.canCall": {
            "name": "canCall",
            "location": 46,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "src_": [
                    "str",
                    "list",
                    "int"
                ],
                "dst_": [
                    "str",
                    "list",
                    "int"
                ],
                "sig": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "DSGuard.forbid": {
            "name": "forbid",
            "location": 49,
            "return": [
                "Sequence['cirq.Qid']",
                "List['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "dst": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "sig": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DSGuard.owner": {
            "name": "owner",
            "location": 52,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSGuard.permit": {
            "name": "permit",
            "location": 55,
            "return": [
                "Sequence['cirq.Qid']",
                "List['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "dst": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "sig": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DSGuard.setAuthority": {
            "name": "setAuthority",
            "location": 58,
            "return": [
                "Sequence['cirq.Qid']",
                "list",
                "Optional[Iterable[str]]",
                "Awaitable[T]"
            ],
            "arguments": {
                "self": [],
                "authority_": [
                    "int",
                    "str"
                ]
            }
        },
        "DSGuard.setOwner": {
            "name": "setOwner",
            "location": 61,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "owner_": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DSGuardEvents.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSGuardFactory.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSGuardFactory.isGuard": {
            "name": "isGuard",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [
                    "Callable",
                    "Callable[[], object]",
                    "bytes",
                    "Callable[[str], str]",
                    "int"
                ]
            }
        },
        "DSGuardFactory.newGuard": {
            "name": "newGuard",
            "location": 77,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSMath.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSMultiVault.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSMultiVault.authority": {
            "name": "authority",
            "location": 90,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSMultiVault.burn": {
            "name": "burn",
            "location": 93,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "dict"
                ],
                "guy": [
                    "int",
                    "str",
                    "dict"
                ],
                "wad": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "DSMultiVault.mint": {
            "name": "mint",
            "location": 96,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "dict"
                ],
                "guy": [
                    "int",
                    "str",
                    "dict"
                ],
                "wad": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "DSMultiVault.owner": {
            "name": "owner",
            "location": 99,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSMultiVault.pull": {
            "name": "pull",
            "location": 102,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "T",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "src": [
                    "T",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "wad": [
                    "T",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "DSMultiVault.push": {
            "name": "push",
            "location": 105,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "dict"
                ],
                "dst": [
                    "int",
                    "str",
                    "dict"
                ],
                "wad": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "DSMultiVault.setAuthority": {
            "name": "setAuthority",
            "location": 108,
            "return": [
                "Sequence['cirq.Qid']",
                "list",
                "Optional[Iterable[str]]",
                "Awaitable[T]"
            ],
            "arguments": {
                "self": [],
                "authority_": [
                    "int",
                    "str"
                ]
            }
        },
        "DSMultiVault.setOwner": {
            "name": "setOwner",
            "location": 111,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "owner_": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DSNote.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSRoles.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSRoles.authority": {
            "name": "authority",
            "location": 124,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSRoles.canCall": {
            "name": "canCall",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "caller": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "KT"
                ],
                "code": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "KT"
                ],
                "sig": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "KT"
                ]
            }
        },
        "DSRoles.getCapabilityRoles": {
            "name": "getCapabilityRoles",
            "location": 130,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ],
                "sig": [
                    "str",
                    "int"
                ]
            }
        },
        "DSRoles.getUserRoles": {
            "name": "getUserRoles",
            "location": 133,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "DSRoles.hasUserRole": {
            "name": "hasUserRole",
            "location": 136,
            "return": [
                "Type",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "int",
                    "Dict[int, dict]",
                    "bool"
                ],
                "role": [
                    "int",
                    "Dict[int, dict]",
                    "bool"
                ]
            }
        },
        "DSRoles.isCapabilityPublic": {
            "name": "isCapabilityPublic",
            "location": 139,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "List[str]"
                ],
                "sig": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "DSRoles.isUserRoot": {
            "name": "isUserRoot",
            "location": 142,
            "return": [
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "DSRoles.owner": {
            "name": "owner",
            "location": 145,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSRoles.setAuthority": {
            "name": "setAuthority",
            "location": 148,
            "return": [
                "Sequence['cirq.Qid']",
                "list",
                "Optional[Iterable[str]]",
                "Awaitable[T]"
            ],
            "arguments": {
                "self": [],
                "authority_": [
                    "int",
                    "str"
                ]
            }
        },
        "DSRoles.setOwner": {
            "name": "setOwner",
            "location": 151,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "owner_": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DSRoles.setPublicCapability": {
            "name": "setPublicCapability",
            "location": 154,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "sig": [
                    "str"
                ],
                "enabled": [
                    "str"
                ]
            }
        },
        "DSRoles.setRoleCapability": {
            "name": "setRoleCapability",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "code": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "sig": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "enabled": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "DSRoles.setRootUser": {
            "name": "setRootUser",
            "location": 160,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "str",
                    "bool",
                    "Type[T]"
                ],
                "enabled": [
                    "str",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "DSRoles.setUserRole": {
            "name": "setUserRole",
            "location": 163,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "who": [
                    "int"
                ],
                "role": [
                    "int"
                ],
                "enabled": [
                    "int"
                ]
            }
        },
        "DSStop.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSStop.authority": {
            "name": "authority",
            "location": 171,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSStop.owner": {
            "name": "owner",
            "location": 174,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSStop.setAuthority": {
            "name": "setAuthority",
            "location": 177,
            "return": [
                "Sequence['cirq.Qid']",
                "list",
                "Optional[Iterable[str]]",
                "Awaitable[T]"
            ],
            "arguments": {
                "self": [],
                "authority_": [
                    "int",
                    "str"
                ]
            }
        },
        "DSStop.setOwner": {
            "name": "setOwner",
            "location": 180,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "owner_": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DSStop.start": {
            "name": "start",
            "location": 183,
            "return": [
                "Sequence['cirq.Qid']",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSStop.stop": {
            "name": "stop",
            "location": 186,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSStop.stopped": {
            "name": "stopped",
            "location": 189,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSThing.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSThing.authority": {
            "name": "authority",
            "location": 197,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSThing.owner": {
            "name": "owner",
            "location": 200,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSThing.setAuthority": {
            "name": "setAuthority",
            "location": 203,
            "return": [
                "Sequence['cirq.Qid']",
                "list",
                "Optional[Iterable[str]]",
                "Awaitable[T]"
            ],
            "arguments": {
                "self": [],
                "authority_": [
                    "int",
                    "str"
                ]
            }
        },
        "DSThing.setOwner": {
            "name": "setOwner",
            "location": 206,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "owner_": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DSToken.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSToken.allowance": {
            "name": "allowance",
            "location": 214,
            "return": [
                "Sequence['cirq.Qid']",
                "List['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "guy": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DSToken.approve": {
            "name": "approve",
            "location": 217,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "guy": [
                    "float",
                    "str"
                ],
                "wad": [
                    "float",
                    "str"
                ]
            }
        },
        "DSToken.authority": {
            "name": "authority",
            "location": 220,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSToken.balanceOf": {
            "name": "balanceOf",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "src": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "int",
                    "Type"
                ]
            }
        },
        "DSToken.burn": {
            "name": "burn",
            "location": 226,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "guy": [
                    "float",
                    "str"
                ],
                "wad": [
                    "float",
                    "str"
                ]
            }
        },
        "DSToken.mint": {
            "name": "mint",
            "location": 229,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "guy": [
                    "float",
                    "str"
                ],
                "wad": [
                    "float",
                    "str"
                ]
            }
        },
        "DSToken.move": {
            "name": "move",
            "location": 232,
            "return": [
                "Sequence['cirq.Qid']",
                "List['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "dst": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "wad": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DSToken.name": {
            "name": "name",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DSToken.owner": {
            "name": "owner",
            "location": 238,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSToken.pull": {
            "name": "pull",
            "location": 241,
            "return": [
                "bool",
                "dict",
                "BaseException",
                "str"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ],
                "wad": [
                    "str"
                ]
            }
        },
        "DSToken.push": {
            "name": "push",
            "location": 244,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "float",
                    "str"
                ],
                "wad": [
                    "float",
                    "str"
                ]
            }
        },
        "DSToken.setAuthority": {
            "name": "setAuthority",
            "location": 247,
            "return": [
                "Sequence['cirq.Qid']",
                "list",
                "Optional[Iterable[str]]",
                "Awaitable[T]"
            ],
            "arguments": {
                "self": [],
                "authority_": [
                    "int",
                    "str"
                ]
            }
        },
        "DSToken.setName": {
            "name": "setName",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "name_": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DSToken.setOwner": {
            "name": "setOwner",
            "location": 253,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "owner_": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DSToken.start": {
            "name": "start",
            "location": 256,
            "return": [
                "Sequence['cirq.Qid']",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSToken.stop": {
            "name": "stop",
            "location": 259,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSToken.stopped": {
            "name": "stopped",
            "location": 262,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSToken.symbol": {
            "name": "symbol",
            "location": 265,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSToken.totalSupply": {
            "name": "totalSupply",
            "location": 268,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSToken.transfer": {
            "name": "transfer",
            "location": 271,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "float",
                    "str"
                ],
                "wad": [
                    "float",
                    "str"
                ]
            }
        },
        "DSToken.transferFrom": {
            "name": "transferFrom",
            "location": 274,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Callable[..., Awaitable]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "dst": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "wad": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DSTokenBase.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSTokenBase.allowance": {
            "name": "allowance",
            "location": 282,
            "return": [
                "Sequence['cirq.Qid']",
                "List['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "guy": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DSTokenBase.approve": {
            "name": "approve",
            "location": 285,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "guy": [
                    "float",
                    "str"
                ],
                "wad": [
                    "float",
                    "str"
                ]
            }
        },
        "DSTokenBase.balanceOf": {
            "name": "balanceOf",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "src": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "int",
                    "Type"
                ]
            }
        },
        "DSTokenBase.totalSupply": {
            "name": "totalSupply",
            "location": 291,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSTokenBase.transfer": {
            "name": "transfer",
            "location": 294,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "float",
                    "str"
                ],
                "wad": [
                    "float",
                    "str"
                ]
            }
        },
        "DSTokenBase.transferFrom": {
            "name": "transferFrom",
            "location": 297,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Callable[..., Awaitable]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "dst": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "wad": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DSVault.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DSVault.authority": {
            "name": "authority",
            "location": 305,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSVault.burn": {
            "name": "burn",
            "location": 308,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "dict"
                ],
                "guy": [
                    "int",
                    "str",
                    "dict"
                ],
                "wad": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "DSVault.mint": {
            "name": "mint",
            "location": 311,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "dict"
                ],
                "guy": [
                    "int",
                    "str",
                    "dict"
                ],
                "wad": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "DSVault.owner": {
            "name": "owner",
            "location": 314,
            "return": [
                "Iterable[str]",
                "int",
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSVault.pull": {
            "name": "pull",
            "location": 317,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "T",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "src": [
                    "T",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "wad": [
                    "T",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "DSVault.push": {
            "name": "push",
            "location": 320,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "str",
                    "dict"
                ],
                "dst": [
                    "int",
                    "str",
                    "dict"
                ],
                "wad": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "DSVault.setAuthority": {
            "name": "setAuthority",
            "location": 323,
            "return": [
                "Sequence['cirq.Qid']",
                "list",
                "Optional[Iterable[str]]",
                "Awaitable[T]"
            ],
            "arguments": {
                "self": [],
                "authority_": [
                    "int",
                    "str"
                ]
            }
        },
        "DSVault.setOwner": {
            "name": "setOwner",
            "location": 326,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "owner_": [
                    "float",
                    "Optional[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DSVault.swap": {
            "name": "swap",
            "location": 329,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "token_": [
                    "List[int]",
                    "List[list]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "DSVault.token": {
            "name": "token",
            "location": 332,
            "return": [
                "str",
                "Callable[..., Awaitable]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ERC20.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ERC20.allowance": {
            "name": "allowance",
            "location": 340,
            "return": [
                "Sequence['cirq.Qid']",
                "List['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "guy": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "ERC20.approve": {
            "name": "approve",
            "location": 343,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "guy": [
                    "float",
                    "str"
                ],
                "wad": [
                    "float",
                    "str"
                ]
            }
        },
        "ERC20.balanceOf": {
            "name": "balanceOf",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "guy": [
                    "int",
                    "float"
                ]
            }
        },
        "ERC20.totalSupply": {
            "name": "totalSupply",
            "location": 349,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ERC20.transfer": {
            "name": "transfer",
            "location": 352,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "float",
                    "str"
                ],
                "wad": [
                    "float",
                    "str"
                ]
            }
        },
        "ERC20.transferFrom": {
            "name": "transferFrom",
            "location": 355,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "Callable[..., Awaitable]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "dst": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "wad": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "ERC20Events.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "sprites-python-master/src/contracts/Foo.py": {
        "Foo.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Foo.bar": {
            "name": "bar",
            "location": 5,
            "return": [
                "bool",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Callable[[None], bool]",
                    "int"
                ]
            }
        }
    },
    "sprites-python-master/src/contracts/MyThrow.py": {
        "MyThrow.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MyThrow.bar": {
            "name": "bar",
            "location": 5,
            "return": [
                "bool",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Callable[[None], bool]",
                    "int"
                ]
            }
        },
        "MyThrow.maybe_throw": {
            "name": "maybe_throw",
            "location": 8,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": []
            }
        }
    },
    "sprites-python-master/src/contracts/PisaChannel.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Application.transition": {
            "name": "transition",
            "location": 5,
            "return": [
                "int",
                "bool",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "creditsA": [
                    "List[int]",
                    "int",
                    "Collection[int]",
                    "float"
                ],
                "creditsB": [
                    "List[int]",
                    "int",
                    "Collection[int]",
                    "float"
                ],
                "signers": [
                    "List[int]",
                    "int",
                    "Collection[int]",
                    "float"
                ],
                "cmds": [
                    "List[int]",
                    "int",
                    "Collection[int]",
                    "float"
                ],
                "inputs": [
                    "List[int]",
                    "int",
                    "Collection[int]",
                    "float"
                ]
            }
        },
        "StateChannel.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StateChannel.app": {
            "name": "app",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateChannel.bestRound": {
            "name": "bestRound",
            "location": 18,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateChannel.cmds": {
            "name": "cmds",
            "location": 21,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "StateChannel.deadline": {
            "name": "deadline",
            "location": 24,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateChannel.disputeLength": {
            "name": "disputeLength",
            "location": 27,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateChannel.getDispute": {
            "name": "getDispute",
            "location": 30,
            "return": [
                "bool",
                "int",
                "List[str]",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "StateChannel.hstate": {
            "name": "hstate",
            "location": 33,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateChannel.input": {
            "name": "input",
            "location": 36,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "_cmd": [
                    "str",
                    "float",
                    "int"
                ],
                "_input": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "StateChannel.inputs": {
            "name": "inputs",
            "location": 39,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "StateChannel.latestClaim": {
            "name": "latestClaim",
            "location": 42,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateChannel.players": {
            "name": "players",
            "location": 45,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "StateChannel.resolve": {
            "name": "resolve",
            "location": 48,
            "return": [
                "int",
                "bool",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "_creditsA": [
                    "bool",
                    "int",
                    "float"
                ],
                "_creditsB": [
                    "bool",
                    "int",
                    "float"
                ],
                "_r": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "StateChannel.setstate": {
            "name": "setstate",
            "location": 51,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sigs": [
                    "float",
                    "Union[int, float]",
                    "Callable"
                ],
                "_i": [
                    "float",
                    "Union[int, float]",
                    "Callable"
                ],
                "_hstate": [
                    "float",
                    "Union[int, float]",
                    "Callable"
                ]
            }
        },
        "StateChannel.signers": {
            "name": "signers",
            "location": 54,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str"
                ]
            }
        },
        "StateChannel.status": {
            "name": "status",
            "location": 57,
            "return": [
                "bool",
                "IO[str]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateChannel.t_start": {
            "name": "t_start",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateChannel.triggerdispute": {
            "name": "triggerdispute",
            "location": 63,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "float",
                    "str"
                ]
            }
        },
        "StateChannel.verifySignature": {
            "name": "verifySignature",
            "location": 66,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "pub": [
                    "bool",
                    "int"
                ],
                "h": [
                    "bool",
                    "int"
                ],
                "v": [
                    "bool",
                    "int"
                ],
                "r": [
                    "bool",
                    "int"
                ],
                "s": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "sprites-python-master/src/contracts/PreimageManager.py": {
        "PreimageManager.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PreimageManager.revealedBefore": {
            "name": "revealedBefore",
            "location": 5,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "Optional[str]"
                ],
                "T": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "Optional[str]"
                ]
            }
        },
        "PreimageManager.submitPreimage": {
            "name": "submitPreimage",
            "location": 8,
            "return": [
                "List[int]",
                "Tuple[str]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Optional[str]",
                    "list",
                    "float"
                ]
            }
        }
    },
    "sprites-python-master/src/contracts/SpritesRegistry.py": {
        "PreimageManager.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PreimageManager.revealedBefore": {
            "name": "revealedBefore",
            "location": 5,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "Optional[str]"
                ],
                "T": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "Optional[str]"
                ]
            }
        },
        "PreimageManager.submitPreimage": {
            "name": "submitPreimage",
            "location": 8,
            "return": [
                "List[int]",
                "Tuple[str]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Optional[str]",
                    "list",
                    "float"
                ]
            }
        },
        "SpritesRegistry.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SpritesRegistry.channels": {
            "name": "channels",
            "location": 16,
            "return": [
                "Sequence['cirq.Qid']",
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "float",
                    "Callable[..., None]",
                    "int"
                ]
            }
        },
        "SpritesRegistry.createChannel": {
            "name": "createChannel",
            "location": 19,
            "return": [
                "Type",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ],
                "tokenAddress": [
                    "int"
                ]
            }
        },
        "SpritesRegistry.deposit": {
            "name": "deposit",
            "location": 22,
            "return": [
                "bool",
                "Sequence['cirq.Qid']",
                "Type",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ],
                "amount": [
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "SpritesRegistry.finalize": {
            "name": "finalize",
            "location": 25,
            "return": [
                "bool",
                "Sequence['cirq.Qid']",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "int",
                    "str"
                ]
            }
        },
        "SpritesRegistry.getDeadline": {
            "name": "getDeadline",
            "location": 28,
            "return": [
                "str",
                "Dict[str, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "SpritesRegistry.getDeposit": {
            "name": "getDeposit",
            "location": 31,
            "return": [
                "str",
                "Dict[str, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "SpritesRegistry.getState": {
            "name": "getState",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "SpritesRegistry.getStatus": {
            "name": "getStatus",
            "location": 37,
            "return": [
                "int",
                "Exception",
                "Dict[str, str]",
                "Dict[str, Union[str, Set]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "int",
                    "bytes",
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "SpritesRegistry.getWithdrawn": {
            "name": "getWithdrawn",
            "location": 40,
            "return": [
                "str",
                "Dict[str, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "SpritesRegistry.isSignatureOkay": {
            "name": "isSignatureOkay",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "pub": [
                    "Optional[int]",
                    "bool",
                    "Optional[float]",
                    "Set[str]",
                    "str"
                ],
                "messageHash": [
                    "Optional[int]",
                    "bool",
                    "Optional[float]",
                    "Set[str]",
                    "str"
                ],
                "sig": [
                    "Optional[int]",
                    "bool",
                    "Optional[float]",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "SpritesRegistry.recoverAddress": {
            "name": "recoverAddress",
            "location": 46,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "messageHash": [
                    "bool",
                    "Callable"
                ],
                "sig": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "SpritesRegistry.sha3int": {
            "name": "sha3int",
            "location": 49,
            "return": [
                "str",
                "tuple",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "str"
                ]
            }
        },
        "SpritesRegistry.trigger": {
            "name": "trigger",
            "location": 52,
            "return": [
                "bool",
                "Sequence['cirq.Qid']",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "int",
                    "str"
                ]
            }
        },
        "SpritesRegistry.update": {
            "name": "update",
            "location": 55,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[int]]"
                ],
                "sig": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[int]]"
                ],
                "credits": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[int]]"
                ],
                "withdrawals": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[int]]"
                ],
                "round": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[int]]"
                ],
                "preimageHash": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[int]]"
                ],
                "recipient": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[int]]"
                ],
                "amount": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[int]]"
                ],
                "expiry": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[int]]"
                ]
            }
        },
        "SpritesRegistry.verifyUpdate": {
            "name": "verifyUpdate",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "int",
                    "Optional[int]",
                    "float",
                    "tuple"
                ],
                "sig": [
                    "int",
                    "Optional[int]",
                    "float",
                    "tuple"
                ],
                "credits": [
                    "int",
                    "Optional[int]",
                    "float",
                    "tuple"
                ],
                "withdrawals": [
                    "int",
                    "Optional[int]",
                    "float",
                    "tuple"
                ],
                "round": [
                    "int",
                    "Optional[int]",
                    "float",
                    "tuple"
                ],
                "preimageHash": [
                    "int",
                    "Optional[int]",
                    "float",
                    "tuple"
                ],
                "recipient": [
                    "int",
                    "Optional[int]",
                    "float",
                    "tuple"
                ],
                "amount": [
                    "int",
                    "Optional[int]",
                    "float",
                    "tuple"
                ],
                "expiry": [
                    "int",
                    "Optional[int]",
                    "float",
                    "tuple"
                ]
            }
        },
        "SpritesRegistry.withdraw": {
            "name": "withdraw",
            "location": 103,
            "return": [
                "bool",
                "Sequence['cirq.Qid']",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "channelID": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "sprites-python-master/src/contracts/Test.py": {
        "Test.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Test.get": {
            "name": "get",
            "location": 5,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.getArrays": {
            "name": "getArrays",
            "location": 8,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.getStruct": {
            "name": "getStruct",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.incr": {
            "name": "incr",
            "location": 14,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sprites-python-master/src/contracts/__init__.py": {},
    "sprites-python-master/src/tests/conftest.py": {
        "web3": {
            "name": "web3",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "mock_address": {
            "name": "mock_address",
            "location": 73,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "List[str]",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "guy": {
            "name": "guy",
            "location": 78,
            "return": [
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "tx_args": {
            "name": "tx_args",
            "location": 83,
            "return": [
                "dict",
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "guy": [
                    "bool",
                    "float",
                    "ops.Channel"
                ]
            }
        },
        "_get_account": {
            "name": "_get_account",
            "location": 87,
            "return": [
                "str",
                "dict",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "guy": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "alice": {
            "name": "alice",
            "location": 95,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Tuple[str, Dict[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "int"
                ],
                "guy": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "bob": {
            "name": "bob",
            "location": 100,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Tuple[str, Dict[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "int"
                ],
                "guy": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "charlie": {
            "name": "charlie",
            "location": 105,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Tuple[str, Dict[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "int"
                ],
                "guy": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "deployer": {
            "name": "deployer",
            "location": 110,
            "return": [
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "registry": {
            "name": "registry",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "List[str]"
                ],
                "deployer": [
                    "List[str]"
                ],
                "preimage_manager": [
                    "List[str]"
                ]
            }
        },
        "preimage_manager": {
            "name": "preimage_manager",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Callable",
                    "str"
                ],
                "deployer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "token": {
            "name": "token",
            "location": 134,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "allennlp.common.util.JsonDict",
                    "List[str]",
                    "bool",
                    "float"
                ],
                "deployer": [
                    "int",
                    "allennlp.common.util.JsonDict",
                    "List[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "other_token": {
            "name": "other_token",
            "location": 143,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "dict",
                    "float"
                ],
                "deployer": [
                    "dict",
                    "float"
                ]
            }
        },
        "mock_channel": {
            "name": "mock_channel",
            "location": 148,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "mock_address": [
                    "web3.Web3",
                    "int",
                    "float",
                    "Dict[str, int]"
                ],
                "registry": [
                    "web3.Web3",
                    "int",
                    "float",
                    "Dict[str, int]"
                ],
                "preimage_manager": [
                    "str",
                    "int"
                ],
                "acting_party": [
                    "web3.Web3",
                    "int",
                    "float",
                    "Dict[str, int]"
                ],
                "other_party": [
                    "web3.Web3",
                    "int",
                    "float",
                    "Dict[str, int]"
                ]
            }
        },
        "channel": {
            "name": "channel",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "web3.contracContract",
                    "Optional[bool]"
                ],
                "token": [
                    "contracts.dappsys.DSToken",
                    "contracts.SpritesRegistry.SpritesRegistry",
                    "bool"
                ],
                "registry": [
                    "contracts.dappsys.DSToken",
                    "contracts.SpritesRegistry.SpritesRegistry",
                    "bool"
                ],
                "preimage_manager": [
                    "contracts.PreimageManager.PreimageManager",
                    "int"
                ],
                "acting_party": [
                    "contracts.dappsys.DSToken",
                    "contracts.SpritesRegistry.SpritesRegistry",
                    "bool"
                ],
                "other_party": [
                    "contracts.dappsys.DSToken",
                    "contracts.SpritesRegistry.SpritesRegistry",
                    "bool"
                ]
            }
        },
        "other_channel": {
            "name": "other_channel",
            "location": 191,
            "return": [
                "int",
                "str",
                "Dict[int, dict]",
                "pika.channel.Channel"
            ],
            "arguments": {
                "web3": [
                    "str"
                ],
                "other_token": [
                    "Optional[int]",
                    "Optional[float]",
                    "Dict[str, Any]"
                ],
                "registry": [
                    "Optional[int]",
                    "Optional[float]",
                    "Dict[str, Any]"
                ],
                "preimage_manager": [
                    "contracts.PreimageManager.PreimageManager",
                    "int"
                ],
                "acting_party": [
                    "Optional[int]",
                    "Optional[float]",
                    "Dict[str, Any]"
                ],
                "other_party": [
                    "Optional[int]",
                    "Optional[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "acting_party_name": {
            "name": "acting_party_name",
            "location": 218,
            "return": [
                "int",
                "str",
                "T"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "acting_party": {
            "name": "acting_party",
            "location": 223,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "acting_party_name": [
                    "str",
                    "type",
                    "List[Dict[str, Any]]"
                ],
                "alice": [
                    "str",
                    "type",
                    "List[Dict[str, Any]]"
                ],
                "bob": [
                    "str",
                    "type",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "other_party_name": {
            "name": "other_party_name",
            "location": 228,
            "return": [
                "List[str]",
                "str",
                "Iterable[str]",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "acting_party_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "other_party": {
            "name": "other_party",
            "location": 233,
            "return": [
                "str",
                "bool",
                "Optional[Callable]",
                "List[str]"
            ],
            "arguments": {
                "other_party_name": [
                    "str"
                ],
                "alice": [
                    "str"
                ],
                "bob": [
                    "str"
                ]
            }
        },
        "third_party": {
            "name": "third_party",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "charlie": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "preimage": {
            "name": "preimage",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "round": {
            "name": "round",
            "location": 248,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "new_round": {
            "name": "new_round",
            "location": 253,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "amount": {
            "name": "amount",
            "location": 258,
            "return": [
                "Tuple[bytes]",
                "ops.Channel",
                "str",
                "int",
                "float",
                "bytes"
            ],
            "arguments": {}
        },
        "new_amount": {
            "name": "new_amount",
            "location": 263,
            "return": [
                "List[int]",
                "int",
                "str",
                "Optional[bytearray]",
                "List[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "payment": {
            "name": "payment",
            "location": 268,
            "return": [
                "List[int]",
                "List[dict]",
                "float"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "new_payment": {
            "name": "new_payment",
            "location": 273,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "new_amount": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "deposits": {
            "name": "deposits",
            "location": 278,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "new_deposits": {
            "name": "new_deposits",
            "location": 283,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "deposits": [
                    "int",
                    "Callable[[], None]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "credits": {
            "name": "credits",
            "location": 288,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "new_credits": {
            "name": "new_credits",
            "location": 293,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "credits": [
                    "int",
                    "Callable[[], None]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "withdrawals": {
            "name": "withdrawals",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "new_withdrawals": {
            "name": "new_withdrawals",
            "location": 303,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "withdrawals": [
                    "int",
                    "Callable[[], None]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "new_state": {
            "name": "new_state",
            "location": 308,
            "return": [
                "int",
                "set",
                "list",
                "str"
            ],
            "arguments": {
                "new_deposits": [
                    "Optional[Tuple]",
                    "Optional[Dict]",
                    "dict",
                    "str"
                ],
                "new_credits": [
                    "Optional[Tuple]",
                    "Optional[Dict]",
                    "dict",
                    "str"
                ],
                "new_withdrawals": [
                    "Optional[Tuple]",
                    "Optional[Dict]",
                    "dict",
                    "str"
                ],
                "new_round": [
                    "Optional[Tuple]",
                    "Optional[Dict]",
                    "dict",
                    "str"
                ],
                "new_payment": [
                    "Optional[Tuple]",
                    "Optional[Dict]",
                    "dict",
                    "str"
                ]
            }
        },
        "last_state": {
            "name": "last_state",
            "location": 319,
            "return": [],
            "arguments": {
                "deposits": [
                    "bool",
                    "dict"
                ],
                "credits": [
                    "bool",
                    "dict"
                ],
                "withdrawals": [
                    "bool",
                    "dict"
                ],
                "round": [
                    "bool",
                    "dict"
                ],
                "payment": [
                    "bool",
                    "dict"
                ]
            }
        },
        "deposit_amount": {
            "name": "deposit_amount",
            "location": 330,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "acting_party_name": [
                    "str"
                ]
            }
        },
        "send_amount": {
            "name": "send_amount",
            "location": 335,
            "return": [
                "float",
                "str",
                "T",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {}
        },
        "test_send_tokens": {
            "name": "test_send_tokens",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "web3.Web3",
                    "web3.contracContract"
                ],
                "token": [
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "acting_party": [
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "guy": [
                    "web3.Web3",
                    "web3.contracContract"
                ]
            }
        },
        "with_tokens": {
            "name": "with_tokens",
            "location": 347,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "web3": [
                    "int"
                ],
                "token": [
                    "int"
                ],
                "acting_party": [
                    "int"
                ],
                "guy": [
                    "int"
                ]
            }
        },
        "with_other_tokens": {
            "name": "with_other_tokens",
            "location": 355,
            "return": [
                "int",
                "str",
                "Hashable",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "other_token": [
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "other_party": [
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "guy": [
                    "Optional[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "channel_with_deposit": {
            "name": "channel_with_deposit",
            "location": 367,
            "return": [
                "str"
            ],
            "arguments": {
                "channel": [
                    "int",
                    "str"
                ],
                "acting_party": [
                    "int",
                    "str"
                ],
                "deposit_amount": [
                    "int",
                    "str"
                ],
                "with_tokens": [
                    "bool",
                    "AbstractSet[int]",
                    "List[\"libkol.Item\"]",
                    "AbstractSet[str]"
                ]
            }
        },
        "other_channel_with_deposit": {
            "name": "other_channel_with_deposit",
            "location": 373,
            "return": [
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "other_channel": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "other_party": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "deposit_amount": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "with_other_tokens": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "sprites-python-master/src/tests/Foo.py": {
        "Foo.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Foo.bar": {
            "name": "bar",
            "location": 5,
            "return": [
                "bool",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "Callable[[None], bool]",
                    "int"
                ]
            }
        }
    },
    "sprites-python-master/src/tests/test_code_gen.py": {
        "abi": {
            "name": "abi",
            "location": 12,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "manually_converted": {
            "name": "manually_converted",
            "location": 19,
            "return": [
                "Callable[[Any], bool]",
                "Callable",
                "bool"
            ],
            "arguments": {}
        },
        "test_code_gen": {
            "name": "test_code_gen",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "manually_converted": [
                    "str",
                    "Optional[str]"
                ],
                "abi": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "sprites-python-master/src/tests/test_linked_payments.py": {
        "channels": {
            "name": "channels",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "alice": [
                    "Dict[str, Any]",
                    "List[List[int]]",
                    "bool",
                    "int"
                ],
                "bob": [
                    "Dict[str, Any]",
                    "List[List[int]]",
                    "bool",
                    "int"
                ],
                "charlie": [
                    "Dict[str, Any]",
                    "List[List[int]]",
                    "bool",
                    "int"
                ],
                "token": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "BinaryIO",
                    "float"
                ],
                "deposit_amount": [
                    "Dict[str, Any]",
                    "List[List[int]]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_linked_payment": {
            "name": "test_linked_payment",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "alice": [
                    "bool"
                ],
                "bob": [
                    "bool"
                ],
                "charlie": [
                    "bool"
                ],
                "channels": [
                    "bool"
                ],
                "amount": [
                    "bool"
                ]
            }
        }
    },
    "sprites-python-master/src/tests/test_multi_channel_contract.py": {
        "test_channel_can_create_channel": {
            "name": "test_channel_can_create_channel",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "str",
                    "backup.util.GlobalInfo",
                    "List[Tuple[str, str]]"
                ],
                "registry": [
                    "str",
                    "backup.util.GlobalInfo",
                    "List[Tuple[str, str]]"
                ],
                "token": [
                    "str",
                    "bool"
                ],
                "acting_party": [
                    "List[int]",
                    "Union[str, float]",
                    "int"
                ],
                "other_party": [
                    "List[int]",
                    "Union[str, float]",
                    "int"
                ],
                "channel": [
                    "str",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ]
            }
        },
        "test_channel_initial_state": {
            "name": "test_channel_initial_state",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [
                    "Iterable[Iterable[Any]]"
                ],
                "acting_party": [
                    "Iterable[Iterable[Any]]"
                ]
            }
        },
        "test_deposit_can_deposit": {
            "name": "test_deposit_can_deposit",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "acting_party": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "with_tokens": [
                    "List[List[int]]",
                    "int",
                    "str",
                    "backup.util.GlobalInfo"
                ],
                "deposit_amount": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_deposit_cannot_deposit_other_token": {
            "name": "test_deposit_cannot_deposit_other_token",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [
                    "int"
                ],
                "acting_party": [
                    "int"
                ],
                "deposit_amount": [
                    "bool",
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "bytes"
                ],
                "other_token": [
                    "bool",
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "bytes"
                ]
            }
        },
        "test_deposit_unauthorized_party_cannot_deposit": {
            "name": "test_deposit_unauthorized_party_cannot_deposit",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [],
                "third_party": [
                    "str"
                ],
                "deposit_amount": [
                    "str"
                ]
            }
        },
        "test_deposit_can_make_additional_deposit": {
            "name": "test_deposit_can_make_additional_deposit",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [
                    "Callable",
                    "str"
                ],
                "acting_party": [
                    "Callable",
                    "str"
                ],
                "deposit_amount": []
            }
        },
        "test_withdraw_cannot_withdraw_without_trigger": {
            "name": "test_withdraw_cannot_withdraw_without_trigger",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "token": [
                    "int",
                    "str"
                ],
                "channel": [
                    "Callable",
                    "str",
                    "bytes",
                    "bool"
                ],
                "acting_party": []
            }
        },
        "test_withdraw_can_withdraw": {
            "name": "test_withdraw_can_withdraw",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "token": [],
                "channel": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "int",
                    "str"
                ],
                "acting_party": [
                    "str",
                    "int",
                    "Tuple[str]"
                ]
            }
        },
        "triggered_mock_channel": {
            "name": "triggered_mock_channel",
            "location": 90,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "mock_channel": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "acting_party": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "finalized_channel": {
            "name": "finalized_channel",
            "location": 96,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "pika.channel.Channel"
                ],
                "channel_with_deposit": [
                    "Callable",
                    "str"
                ],
                "acting_party": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_withdraw_unauthorized_party_cannot_withdraw": {
            "name": "test_withdraw_unauthorized_party_cannot_withdraw",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "channel": [
                    "Callable",
                    "str",
                    "Callable[[int], Tuple]"
                ],
                "acting_party": [],
                "third_party": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "test_withdraw_cannot_withdraw_from_opponent": {
            "name": "test_withdraw_cannot_withdraw_from_opponent",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "acting_party": [],
                "other_party": []
            }
        },
        "signed_state_inflight_payment": {
            "name": "signed_state_inflight_payment",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "channel_with_deposit": [
                    "Dict[str, int]",
                    "list"
                ],
                "acting_party": [
                    "Dict[str, int]",
                    "list"
                ],
                "other_party": [
                    "Dict[str, int]",
                    "list"
                ],
                "preimage": [
                    "Dict[str, int]",
                    "list"
                ],
                "send_amount": [
                    "Dict[str, int]",
                    "list"
                ]
            }
        },
        "test_channel_update_succeeds": {
            "name": "test_channel_update_succeeds",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "acting_party": [
                    "List[List[int]]",
                    "Dict[type, Any]"
                ],
                "other_party": [
                    "dict"
                ],
                "signed_state_inflight_payment": []
            }
        },
        "test_update_channel_state_with_credits": {
            "name": "test_update_channel_state_with_credits",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update_channel_state_with_withdrawals": {
            "name": "test_update_channel_state_with_withdrawals",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_payment_contract_refuses_overpayment": {
            "name": "test_payment_contract_refuses_overpayment",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "channel_with_deposit": [
                    "int"
                ],
                "acting_party": [
                    "int"
                ],
                "other_party": [
                    "Callable"
                ],
                "deposit_amount": [
                    "int"
                ],
                "preimage": [
                    "int"
                ]
            }
        },
        "test_transfer_full_payment_through_channel": {
            "name": "test_transfer_full_payment_through_channel",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "acting_party": [
                    "str"
                ]
            }
        },
        "test_trigger_trigger_sets_pending": {
            "name": "test_trigger_trigger_sets_pending",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "mock_channel": [],
                "acting_party": []
            }
        },
        "test_trigger_trigger_sets_deadline": {
            "name": "test_trigger_trigger_sets_deadline",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [],
                "mock_channel": [],
                "acting_party": [
                    "str"
                ]
            }
        },
        "test_trigger_trigger_twice_fails": {
            "name": "test_trigger_trigger_twice_fails",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [],
                "acting_party": []
            }
        },
        "test_trigger_unauthorized_party_cannot_trigger": {
            "name": "test_trigger_unauthorized_party_cannot_trigger",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "mock_channel": [],
                "third_party": []
            }
        },
        "test_finalize_finalize_requires_pending_status": {
            "name": "test_finalize_finalize_requires_pending_status",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "mock_channel": [],
                "acting_party": []
            }
        },
        "test_finalize_finalize_fails_before_deadline": {
            "name": "test_finalize_finalize_fails_before_deadline",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "triggered_mock_channel": [
                    "str"
                ],
                "acting_party": [
                    "str"
                ]
            }
        },
        "test_finalize_finalize_succeeds_after_deadline": {
            "name": "test_finalize_finalize_succeeds_after_deadline",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "str",
                    "int"
                ],
                "mock_channel": [],
                "acting_party": []
            }
        },
        "test_finalize_dispute_payment_completes_on_chain": {
            "name": "test_finalize_dispute_payment_completes_on_chain",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "Callable"
                ],
                "acting_party": [
                    "Callable"
                ],
                "other_party": [
                    "Sequence[Any]",
                    "float",
                    "tuple",
                    "Iterable[Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "channel": [
                    "Sequence[Any]",
                    "float",
                    "tuple",
                    "Iterable[Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "signed_state_inflight_payment": [
                    "Iterable[Any]",
                    "Sequence[Any]"
                ],
                "deposit_amount": [
                    "str",
                    "List[int]",
                    "int"
                ],
                "send_amount": [
                    "str",
                    "List[int]",
                    "int"
                ],
                "preimage": []
            }
        },
        "test_finalize_dispute_payment_cancels_off_chain": {
            "name": "test_finalize_dispute_payment_cancels_off_chain",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "Callable"
                ],
                "acting_party": [
                    "Callable"
                ],
                "other_party": [
                    "Sequence[Any]",
                    "float",
                    "tuple",
                    "Iterable[Any]",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "channel": [
                    "Sequence[Any]",
                    "tuple",
                    "float",
                    "Iterable[Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "signed_state_inflight_payment": [
                    "Iterable[Any]",
                    "Sequence[Any]"
                ],
                "deposit_amount": [
                    "str",
                    "List[int]",
                    "int"
                ],
                "send_amount": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "preimage": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_finalize_unauthorized_party_cannot_finalize": {
            "name": "test_finalize_unauthorized_party_cannot_finalize",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "mock_channel": [
                    "str"
                ],
                "other_party": [
                    "str"
                ]
            }
        }
    },
    "sprites-python-master/src/tests/test_off_chain_messages.py": {
        "test_overpayment_fails": {
            "name": "test_overpayment_fails",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "amount": [
                    "str",
                    "Callable[..., None]"
                ],
                "last_state": [
                    "Optional[dict]"
                ],
                "new_state": [
                    "Optional[dict]"
                ]
            }
        },
        "test_valid_open_payment_passes": {
            "name": "test_valid_open_payment_passes",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "Optional[dict]",
                    "str"
                ],
                "new_state": [
                    "Optional[dict]",
                    "str"
                ]
            }
        },
        "test_valid_withdrawal_passes": {
            "name": "test_valid_withdrawal_passes",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "int",
                    "Optional[dict]"
                ],
                "new_state": [
                    "int",
                    "Optional[dict]"
                ]
            }
        },
        "test_overwithdraw_fails": {
            "name": "test_overwithdraw_fails",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "int",
                    "Optional[dict]",
                    "Set[str]"
                ],
                "new_state": [
                    "int",
                    "Optional[dict]",
                    "Set[str]"
                ]
            }
        },
        "test_changing_other_credits_fails": {
            "name": "test_changing_other_credits_fails",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "Optional[dict]",
                    "Optional[\"PaymentState\"]",
                    "int"
                ],
                "new_state": [
                    "Optional[dict]",
                    "Optional[\"PaymentState\"]",
                    "int"
                ]
            }
        },
        "test_changing_other_withdrawals_fails": {
            "name": "test_changing_other_withdrawals_fails",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "Optional[dict]",
                    "Optional[\"PaymentState\"]",
                    "int"
                ],
                "new_state": [
                    "Optional[dict]",
                    "Optional[\"PaymentState\"]",
                    "int"
                ]
            }
        },
        "test_inflating_credits_fails": {
            "name": "test_inflating_credits_fails",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "int",
                    "Optional[dict]",
                    "Set[str]"
                ],
                "new_state": [
                    "int",
                    "Optional[dict]",
                    "Set[str]"
                ]
            }
        },
        "test_changing_other_withdrawal_fails": {
            "name": "test_changing_other_withdrawal_fails",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "Optional[dict]",
                    "Optional[\"PaymentState\"]",
                    "int"
                ],
                "new_state": [
                    "Optional[dict]",
                    "Optional[\"PaymentState\"]",
                    "int"
                ]
            }
        },
        "test_complete_payment_valid": {
            "name": "test_complete_payment_valid",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "int",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Optional[dict]",
                    "str"
                ],
                "new_state": [
                    "int",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Optional[dict]",
                    "str"
                ]
            }
        },
        "test_complete_payment": {
            "name": "test_complete_payment",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "Callable",
                    "Optional[dict]"
                ],
                "new_state": [
                    "Callable",
                    "Optional[dict]"
                ]
            }
        },
        "test_cancel_payment_valid": {
            "name": "test_cancel_payment_valid",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "int",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Optional[dict]",
                    "str"
                ],
                "new_state": [
                    "int",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Optional[dict]",
                    "str"
                ]
            }
        },
        "test_cancel_payment": {
            "name": "test_cancel_payment",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "Callable",
                    "Optional[dict]"
                ],
                "new_state": [
                    "Callable",
                    "Optional[dict]"
                ]
            }
        }
    },
    "sprites-python-master/src/tests/test_preimage_manager.py": {
        "test_preimage_manager": {
            "name": "test_preimage_manager",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [],
                "channel": [],
                "preimage_manager": [],
                "acting_party": [],
                "preimage": []
            }
        }
    },
    "sprites-python-master/src/tests/test_signature.py": {
        "message": {
            "name": "message",
            "location": 14,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "msg_hash": {
            "name": "msg_hash",
            "location": 19,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Tuple[str]"
            ],
            "arguments": {
                "message": [
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[str]"
                ]
            }
        },
        "signature": {
            "name": "signature",
            "location": 24,
            "return": [
                "int",
                "str",
                "bytearray",
                "Collection",
                "List[str]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool"
                ],
                "alice": [
                    "str",
                    "bool"
                ]
            }
        },
        "vrs": {
            "name": "vrs",
            "location": 29,
            "return": [
                "str",
                "List[str]",
                "set",
                "Dict[str, Set[str]]",
                "float",
                "list"
            ],
            "arguments": {
                "signature": [
                    "int",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "test_ecrecover_simple_message_success": {
            "name": "test_ecrecover_simple_message_success",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "alice": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "msg_hash": [
                    "str"
                ],
                "signature": [
                    "str"
                ],
                "vrs": [
                    "str"
                ]
            }
        },
        "test_ecrecover_contract_success": {
            "name": "test_ecrecover_contract_success",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "registry": [
                    "contracts.SpritesRegistry.SpritesRegistry",
                    "str"
                ],
                "alice": [],
                "message": [
                    "bool",
                    "backup.util.GlobalInfo"
                ],
                "msg_hash": [
                    "contracts.SpritesRegistry.SpritesRegistry",
                    "str"
                ],
                "vrs": [
                    "contracts.SpritesRegistry.SpritesRegistry",
                    "str"
                ]
            }
        },
        "test_ecrecover_contract_wrong_hash_fails": {
            "name": "test_ecrecover_contract_wrong_hash_fails",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "bool"
                ],
                "registry": [],
                "alice": [
                    "str"
                ],
                "vrs": [],
                "deployer": [],
                "tx_args": []
            }
        },
        "signed_state": {
            "name": "signed_state",
            "location": 59,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "last_state": [
                    "Counter",
                    "int",
                    "Sequence",
                    "List[int]",
                    "Tuple[int]"
                ],
                "acting_party": [
                    "Counter",
                    "int",
                    "Sequence",
                    "List[int]",
                    "Tuple[int]"
                ]
            }
        },
        "test_recover_address_from_channel_state": {
            "name": "test_recover_address_from_channel_state",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "last_state": [
                    "bool",
                    "str",
                    "int"
                ],
                "signed_state": [],
                "acting_party": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "modified_state": {
            "name": "modified_state",
            "location": 69,
            "return": [
                "dict",
                "float"
            ],
            "arguments": {
                "signed_state": [],
                "new_state": []
            }
        },
        "test_verify_signature_of_bad_channel_state_fails": {
            "name": "test_verify_signature_of_bad_channel_state_fails",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "acting_party": [
                    "int",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "modified_state": [
                    "int",
                    "Optional[bool]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "sprites-python-master/src/tests/test_token_swap.py": {
        "channel_weth": {
            "name": "channel_weth",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "channel_with_deposit": [
                    "bool",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "channel_oax": {
            "name": "channel_oax",
            "location": 12,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "other_channel_with_deposit": [
                    "int",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_token_swap_dispute": {
            "name": "test_token_swap_dispute",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "web3": [
                    "Callable",
                    "str"
                ],
                "acting_party": [
                    "int"
                ],
                "other_party": [
                    "int",
                    "Tuple[int, int]"
                ],
                "channel_weth": [
                    "int"
                ],
                "channel_oax": [
                    "int",
                    "Tuple[int, int]"
                ],
                "preimage": [
                    "int"
                ],
                "token": [
                    "str",
                    "Exception",
                    "Type[Any]"
                ],
                "other_token": [
                    "str",
                    "Exception",
                    "Type[Any]"
                ]
            }
        }
    },
    "sprites-python-master/src/tests/__init__.py": {}
}
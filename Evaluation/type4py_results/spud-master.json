{
    "spud-master/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        }
    },
    "spud-master/manage.py": {},
    "spud-master/setup.py": {
        "fullsplit": {
            "name": "fullsplit",
            "location": 28,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bytes",
                    "int"
                ],
                "result": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "VerifyVersionCommand.initialize_options": {
            "name": "initialize_options",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyVersionCommand.finalize_options": {
            "name": "finalize_options",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spud-master/conf/settings.py": {},
    "spud-master/conf/wsgi.py": {},
    "spud-master/spud/context_processors.py": {
        "common": {
            "name": "common",
            "location": 23,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "spud-master/spud/defaults.py": {},
    "spud-master/spud/exceptions.py": {},
    "spud-master/spud/exif.py": {
        "ffprobe": {
            "name": "ffprobe",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "Optional[Callable]",
                    "bool"
                ]
            }
        },
        "ExifTool.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executable": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ExifTool.__enter__": {
            "name": "__enter__",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExifTool.__exit__": {
            "name": "__exit__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "ExifTool.execute": {
            "name": "execute",
            "location": 40,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExifTool.get_metadata": {
            "name": "get_metadata",
            "location": 51,
            "return": [
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spud-master/spud/managers.py": {
        "_decode_int": {
            "name": "_decode_int",
            "location": 31,
            "return": [
                "bool",
                "raiden.utils.BlockNumber",
                "Callable",
                "Tuple[str, int]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "zerver.models.Realm"
                ],
                "string": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_decode_boolean": {
            "name": "_decode_boolean",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "title": [
                    "str",
                    "zerver.models.Realm"
                ],
                "string": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "_decode_object": {
            "name": "_decode_object",
            "location": 51,
            "return": [
                "Optional[Any]",
                "bool",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "Tuple[str]"
                ],
                "model": [
                    "str"
                ],
                "pk": [
                    "dict",
                    "str",
                    "Optional[dict]",
                    "T",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_decode_object_by_name": {
            "name": "_decode_object_by_name",
            "location": 60,
            "return": [
                "Type[Any]",
                "Type"
            ],
            "arguments": {
                "title": [
                    "List[str]",
                    "List[Tuple[Any, str]]",
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "model": [
                    "str",
                    "type",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "_decode_datetime": {
            "name": "_decode_datetime",
            "location": 71,
            "return": [
                "bool",
                "Optional[float]",
                "str",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "Union[T, Sequence[T]]",
                    "Optional[Union[int, float]]",
                    "float",
                    "Optional[datetime.timedelta]"
                ]
            }
        },
        "_get_anything": {
            "name": "_get_anything",
            "location": 82,
            "return": [
                "int",
                "Optional[str]",
                "str",
                "float",
                "Optional[Dict]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ],
                "key": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Union[str, List[str]]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "_get_string": {
            "name": "_get_string",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "params": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "_get_int": {
            "name": "_get_int",
            "location": 103,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, str]]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "List[str]",
                    "Sequence[Union[str, int]]",
                    "list",
                    "Optional[Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "_get_boolean": {
            "name": "_get_boolean",
            "location": 112,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, str]]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "List[str]",
                    "Sequence[Union[str, int]]",
                    "list",
                    "Optional[Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "_get_object": {
            "name": "_get_object",
            "location": 121,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr",
                "Sequence[str]",
                "dict"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "model": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "_get_list": {
            "name": "_get_list",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "_get_object_array": {
            "name": "_get_object_array",
            "location": 139,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "key": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Mapping[str, Any]"
                ],
                "model": [
                    "str",
                    "zerver.models.Realm",
                    "utils.mssql_counters.Section",
                    "int"
                ]
            }
        },
        "_get_object_by_name": {
            "name": "_get_object_by_name",
            "location": 149,
            "return": [
                "str",
                "Dict[str, Any]",
                "models.Name"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Type['Declared']",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Type['Declared']",
                    "Optional[str]"
                ],
                "model": [
                    "str",
                    "Type['Declared']",
                    "Optional[str]"
                ]
            }
        },
        "_get_datetime": {
            "name": "_get_datetime",
            "location": 153,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "HierarchyManager.get_by_name": {
            "name": "get_by_name",
            "location": 159,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "HierarchyManager.get_q_queryset": {
            "name": "get_q_queryset",
            "location": 198,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "list"
                ],
                "q": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "HierarchyManager.get_name_queryset": {
            "name": "get_name_queryset",
            "location": 203,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "zerver.models.Realm"
                ],
                "name": [
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "HierarchyManager.get_parent_queryset": {
            "name": "get_parent_queryset",
            "location": 207,
            "return": [
                "bool",
                "int",
                "Optional[app.models.User]",
                "Dict[str, Dict]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "models.user.User",
                    "Optional[T]"
                ],
                "parent": [
                    "Optional[str]",
                    "List[\"InlineContent\"]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "HierarchyManager.get_search_queryset": {
            "name": "get_search_queryset",
            "location": 213,
            "return": [
                "List[List[int]]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool",
                    "models.characters.character_base.Character",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "List[str]",
                    "tracim.models.auth.User"
                ],
                "queryset": [
                    "zerver.models.UserProfile",
                    "zerver.models.Recipient",
                    "int",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ],
                "params": [
                    "users.models.JustfixUser",
                    "models.Course",
                    "core.models.User",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution",
                    "int"
                ]
            }
        },
        "AlbumManager.get_q_queryset": {
            "name": "get_q_queryset",
            "location": 250,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "zerver.models.Realm"
                ],
                "q": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "AlbumManager.get_search_queryset": {
            "name": "get_search_queryset",
            "location": 256,
            "return": [
                "List[List[int]]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "list",
                    "str"
                ],
                "queryset": [
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName"
                ],
                "params": [
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "abilian.core.models.subjects.User"
                ]
            }
        },
        "CategoryManager.get_q_queryset": {
            "name": "get_q_queryset",
            "location": 276,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "zerver.models.Realm"
                ],
                "q": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "PlaceManager.get_q_queryset": {
            "name": "get_q_queryset",
            "location": 285,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "int",
                    "hackathon.utils.utils.DataMessage"
                ],
                "q": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "PersonManager.get_name_queryset": {
            "name": "get_name_queryset",
            "location": 299,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "PersonManager.get_parent_queryset": {
            "name": "get_parent_queryset",
            "location": 309,
            "return": [
                "str",
                "bool",
                "Dict[str, Dict]",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "str",
                    "bool"
                ],
                "parent": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "VT",
                    "Iterator[T]",
                    "Optional[\"Period\"]"
                ]
            }
        },
        "PersonManager.get_search_queryset": {
            "name": "get_search_queryset",
            "location": 315,
            "return": [
                "List[List[int]]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool",
                    "models.characters.character_base.Character",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "List[str]",
                    "tracim.models.auth.User"
                ],
                "queryset": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "server.models.User"
                ],
                "params": [
                    "users.models.JustfixUser"
                ],
                "action": [
                    "str",
                    "bool",
                    "models.characters.character_base.Character",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "List[str]",
                    "tracim.models.auth.User"
                ]
            }
        },
        "PhotoManager.get_by_name": {
            "name": "get_by_name",
            "location": 364,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PhotoManager.get_search_queryset": {
            "name": "get_search_queryset",
            "location": 382,
            "return": [
                "List[List[int]]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "tracim.models.auth.User",
                    "zerver.models.UserProfile",
                    "flask_appbuilder.security.sqla.models.User",
                    "models.User",
                    "asgard.models.agenAgent",
                    "bool",
                    "users.models.JustfixUser"
                ],
                "queryset": [
                    "models.characters.character_base.Character",
                    "models.User",
                    "Callable[[], str]",
                    "str"
                ],
                "params": [
                    "str",
                    "zerver.models.UserProfile",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "action": [
                    "int",
                    "Dict[str, object]",
                    "Tuple[type]",
                    "zerver.models.UserProfile",
                    "Dict[str, str]",
                    "list"
                ]
            }
        },
        "FeedbackManager.get_search_queryset": {
            "name": "get_search_queryset",
            "location": 566,
            "return": [
                "List[List[int]]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool",
                    "models.characters.character_base.Character",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "List[str]",
                    "tracim.models.auth.User"
                ],
                "queryset": [
                    "zerver.models.Recipient",
                    "Optional[Dict[str, str]]",
                    "zerver.models.UserProfile",
                    "raiden.utils.Address",
                    "server.models.User",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "params": [
                    "zerver.models.UserProfile",
                    "models.User",
                    "models.UserAuth",
                    "asgard.models.app.AppStats",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Optional[core.models.User]"
                ]
            }
        }
    },
    "spud-master/spud/media.py": {
        "_round": {
            "name": "_round",
            "location": 31,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Iterable[List[T]]",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "base": [
                    "int",
                    "float",
                    "Iterable[List[T]]",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "get_media": {
            "name": "get_media",
            "location": 368,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "fp": [
                    "str",
                    "datetime.datetime",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "media.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "media.get_fp": {
            "name": "get_fp",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "media.get_path": {
            "name": "get_path",
            "location": 49,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "media.__del__": {
            "name": "__del__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "media.get_size": {
            "name": "get_size",
            "location": 72,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "media.get_new_size": {
            "name": "get_new_size",
            "location": 77,
            "return": [
                "str",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Callable[[int], str]"
                ]
            }
        },
        "media.get_exif": {
            "name": "get_exif",
            "location": 98,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "media.get_datetime": {
            "name": "get_datetime",
            "location": 104,
            "return": [
                "datetime.datetime",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "media.get_sha256_hash": {
            "name": "get_sha256_hash",
            "location": 128,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "media.get_num_bytes": {
            "name": "get_num_bytes",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "media.create_thumbnail": {
            "name": "create_thumbnail",
            "location": 139,
            "return": [
                "str",
                "Optional[str]",
                "os.PathLike"
            ],
            "arguments": {
                "self": [],
                "dst_path": [
                    "int",
                    "str",
                    "tuple"
                ],
                "max_size": [
                    "int",
                    "str",
                    "tuple"
                ]
            }
        },
        "media._create_thumbnail": {
            "name": "_create_thumbnail",
            "location": 144,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "dst_path": [
                    "str"
                ],
                "max_size": [
                    "int",
                    "str"
                ],
                "image": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "media.rotate": {
            "name": "rotate",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "media.is_video": {
            "name": "is_video",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "media.get_normalized_exif": {
            "name": "get_normalized_exif",
            "location": 162,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "media_jpeg.rotate": {
            "name": "rotate",
            "location": 247,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "str",
                    "bytes",
                    "float",
                    "List[str]",
                    "Optional[\"Address\"]"
                ]
            }
        },
        "media_video._get_ffprobe_vs": {
            "name": "_get_ffprobe_vs",
            "location": 268,
            "return": [
                "List[str]",
                "bool",
                "Iterable[str]",
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "media_video.create_thumbnail": {
            "name": "create_thumbnail",
            "location": 280,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "dst_path": [
                    "int",
                    "bool",
                    "float"
                ],
                "max_size": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "media_video.create_video": {
            "name": "create_video",
            "location": 296,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "dst_path": [
                    "str",
                    "Optional[str]"
                ],
                "size": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "format": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "media_video.get_size": {
            "name": "get_size",
            "location": 326,
            "return": [
                "str",
                "Sequence[str]",
                "Tuple[int]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "media_video.is_video": {
            "name": "is_video",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "media_raw.create_thumbnail": {
            "name": "create_thumbnail",
            "location": 338,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "dst_path": [
                    "int",
                    "bool",
                    "float"
                ],
                "max_size": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "media_raw.get_size": {
            "name": "get_size",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spud-master/spud/models.py": {
        "sex_to_string": {
            "name": "sex_to_string",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "sex": [
                    "str",
                    "datetime.datetime",
                    "models.data_frames.data_frame.DataFrame",
                    "List['cirq.Qid']",
                    "bool",
                    "int"
                ]
            }
        },
        "action_to_string": {
            "name": "action_to_string",
            "location": 64,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "action": [
                    "str",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "_swap_extension": {
            "name": "_swap_extension",
            "location": 75,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "new_extension": [
                    "str",
                    "bool",
                    "List[str]",
                    "float",
                    "Sequence[str]"
                ]
            }
        },
        "BaseModel.error_list": {
            "name": "error_list",
            "location": 87,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Type",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.check_delete": {
            "name": "check_delete",
            "location": 92,
            "return": [
                "Set[cmk.utils.type_defs.HostName]",
                "bool",
                "cmk.utils.type_defs.HostName",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HierarchyModel.get_descendants": {
            "name": "get_descendants",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "include_self": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "HierarchyModel.get_ascendants": {
            "name": "get_ascendants",
            "location": 121,
            "return": [
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "include_self": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "HierarchyModel.list_ascendants": {
            "name": "list_ascendants",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HierarchyModel._ascendants_glue": {
            "name": "_ascendants_glue",
            "location": 138,
            "return": [
                "int",
                "str",
                "Tuple[int]",
                "bytes",
                "Sequence[T]",
                "Sequence[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Callable"
                ],
                "position": [
                    "int",
                    "Type",
                    "Callable"
                ],
                "seen": [
                    "int",
                    "List[str]",
                    "str",
                    "Awaitable"
                ],
                "cache": [
                    "int",
                    "Callable"
                ],
                "parent_attributes": [
                    "bool",
                    "dict"
                ]
            }
        },
        "HierarchyModel._fix_ascendants": {
            "name": "_fix_ascendants",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_attributes": [
                    "type",
                    "Union[str, int]",
                    "Optional[Awaitable[None]]"
                ],
                "glue_class": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "\"Scope\"",
                    "dict",
                    "int"
                ],
                "cache": [
                    "bool",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "Optional[Tuple[Any, Any, Any]]"
                ],
                "do_descendants": [
                    "List[str]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "AbstractSet[\"TemplateObjectVariable\"]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "AbstractSet[\"TemplateActionTypeVariable\"]"
                ]
            }
        },
        "album.__str__": {
            "name": "__str__",
            "location": 245,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "album.fix_ascendants": {
            "name": "fix_ascendants",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "str",
                    "bool",
                    "int"
                ],
                "do_descendants": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "album.save": {
            "name": "save",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "album.check_delete": {
            "name": "check_delete",
            "location": 256,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "album.get_cover_photo": {
            "name": "get_cover_photo",
            "location": 264,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "category.__str__": {
            "name": "__str__",
            "location": 296,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "category.fix_ascendants": {
            "name": "fix_ascendants",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "str",
                    "bool",
                    "int"
                ],
                "do_descendants": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "category.save": {
            "name": "save",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "category.check_delete": {
            "name": "check_delete",
            "location": 307,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "category.get_cover_photo": {
            "name": "get_cover_photo",
            "location": 315,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "place.__str__": {
            "name": "__str__",
            "location": 355,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "place.fix_ascendants": {
            "name": "fix_ascendants",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "str",
                    "bool",
                    "int"
                ],
                "do_descendants": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "place.save": {
            "name": "save",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "place.check_delete": {
            "name": "check_delete",
            "location": 366,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "place.get_cover_photo": {
            "name": "get_cover_photo",
            "location": 378,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.__str__": {
            "name": "__str__",
            "location": 430,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.check_delete": {
            "name": "check_delete",
            "location": 440,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.fix_ascendants": {
            "name": "fix_ascendants",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "str",
                    "bool",
                    "int"
                ],
                "do_descendants": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "person.save": {
            "name": "save",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "person._queryset": {
            "name": "_queryset",
            "location": 462,
            "return": [
                "int",
                "models.Question",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.spouses": {
            "name": "spouses",
            "location": 471,
            "return": [
                "bool",
                "str",
                "dict",
                "Optional[cmk.utils.type_defs.HostAddress]"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.grandparents": {
            "name": "grandparents",
            "location": 479,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.uncles_aunts": {
            "name": "uncles_aunts",
            "location": 487,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.parents": {
            "name": "parents",
            "location": 494,
            "return": [
                "bool",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.siblings": {
            "name": "siblings",
            "location": 504,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.cousins": {
            "name": "cousins",
            "location": 509,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.children": {
            "name": "children",
            "location": 516,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.nephews_nieces": {
            "name": "nephews_nieces",
            "location": 519,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.grandchildren": {
            "name": "grandchildren",
            "location": 526,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "person.get_cover_photo": {
            "name": "get_cover_photo",
            "location": 531,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "feedback.save": {
            "name": "save",
            "location": 577,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "feedback.fix_ascendants": {
            "name": "fix_ascendants",
            "location": 586,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "str",
                    "bool",
                    "int"
                ],
                "do_descendants": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "photo.__str__": {
            "name": "__str__",
            "location": 644,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.timezone": {
            "name": "timezone",
            "location": 651,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.fix_rating": {
            "name": "fix_rating",
            "location": 654,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.build_photo_dir": {
            "name": "build_photo_dir",
            "location": 673,
            "return": [
                "Callable",
                "dict",
                "models.Slice",
                "Optional[str]",
                "IO"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "datetime.date",
                    "int"
                ],
                "utc_datetime": [
                    "str",
                    "int",
                    "float"
                ],
                "utc_offset": [
                    "datetime.date",
                    "datetime.datetime",
                    "str",
                    "List[str]",
                    "float",
                    "Optional[datetime.datetime]",
                    "Optional[str]"
                ]
            }
        },
        "photo.get_orig": {
            "name": "get_orig",
            "location": 682,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.get_thumb": {
            "name": "get_thumb",
            "location": 685,
            "return": [
                "str",
                "bytes",
                "IO",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "size_key": [
                    "str",
                    "bool",
                    "int"
                ],
                "mime_type": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "photo.get_thumbs": {
            "name": "get_thumbs",
            "location": 691,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.get_video": {
            "name": "get_video",
            "location": 694,
            "return": [
                "str",
                "bytes",
                "IO",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "size_key": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "mime_type": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "photo.get_videos": {
            "name": "get_videos",
            "location": 700,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.check_files": {
            "name": "check_files",
            "location": 703,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.check_delete": {
            "name": "check_delete",
            "location": 712,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.delete": {
            "name": "delete",
            "location": 716,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.rotate_orig": {
            "name": "rotate_orig",
            "location": 723,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "photo.rotate_all": {
            "name": "rotate_all",
            "location": 730,
            "return": [
                "int",
                "Union[tuple, list]",
                "app.models.move.Coordinate"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float",
                    "Union[float, int]",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
                ]
            }
        },
        "photo.generate_thumbnails": {
            "name": "generate_thumbnails",
            "location": 737,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "overwrite": [
                    "str"
                ]
            }
        },
        "photo.generate_videos": {
            "name": "generate_videos",
            "location": 775,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "overwrite": [
                    "str"
                ]
            }
        },
        "photo.update_size": {
            "name": "update_size",
            "location": 815,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo.move": {
            "name": "move",
            "location": 821,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_name": [
                    "str",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "photo_file.get_path": {
            "name": "get_path",
            "location": 865,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo_file.get_url": {
            "name": "get_url",
            "location": 872,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo_file.delete": {
            "name": "delete",
            "location": 879,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "photo_file.rotate": {
            "name": "rotate",
            "location": 886,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float",
                    "int"
                ]
            }
        },
        "photo_file.move": {
            "name": "move",
            "location": 893,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_photo_dir": [
                    "str"
                ],
                "new_photo_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "photo_file.update_size": {
            "name": "update_size",
            "location": 928,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "photo_file.check_all_files": {
            "name": "check_all_files",
            "location": 940,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[str]",
                    "str",
                    "dict",
                    "Optional[str]",
                    "Iterable",
                    "Set[str]"
                ]
            }
        },
        "photo_file.check_file": {
            "name": "check_file",
            "location": 948,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "photo_file.get_conflicts": {
            "name": "get_conflicts",
            "location": 980,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "type",
                    "Dict[str, Any]"
                ],
                "new_dir": [
                    "str",
                    "bool",
                    "Optional[Sequence[str]]",
                    "List[str]"
                ],
                "new_name": [
                    "str",
                    "List[str]",
                    "MutableSequence[str]"
                ],
                "size_key": [
                    "str",
                    "bool",
                    "Optional[Sequence[str]]",
                    "List[str]"
                ],
                "sha256_hash": [
                    "str",
                    "bool",
                    "Optional[Sequence[str]]",
                    "List[str]"
                ]
            }
        },
        "photo_file.get_conflicting_names": {
            "name": "get_conflicting_names",
            "location": 990,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "datetime.timedelta"
            ],
            "arguments": {
                "cls": [
                    "List[Tuple[str, str]]",
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "bool"
                ],
                "new_dir": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "new_name": [
                    "str",
                    "Optional[str]",
                    "List[tensorboard.models.Run]"
                ]
            }
        },
        "photo_file.check_filename_free": {
            "name": "check_filename_free",
            "location": 999,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "new_dir": [
                    "str",
                    "Dict[str, Union[str, float]]",
                    "Callable"
                ],
                "new_name": [
                    "str",
                    "Dict[str, Union[str, float]]",
                    "Callable"
                ]
            }
        },
        "photo_file.get_new_name": {
            "name": "get_new_name",
            "location": 1006,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "Container",
                    "django.http.HttpResponse"
                ],
                "new_dir": [
                    "str",
                    "Optional[str]",
                    "django.http.HttpResponse"
                ],
                "new_name": [
                    "str",
                    "topicdb.core.models.basename.BaseName"
                ]
            }
        },
        "photo_file.build_dir": {
            "name": "build_dir",
            "location": 1023,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Dict[str, List[annofabapi.models.TaskHistory]]",
                    "List[medtagger.database.models.LabelElement]"
                ],
                "is_video": [
                    "bytes",
                    "int",
                    "Union[bytes, str, None]",
                    "List[str]"
                ],
                "size_key": [
                    "str",
                    "Union[bytes, str, None]",
                    "int",
                    "bool",
                    "bytes"
                ],
                "photo_dir": [
                    "str",
                    "Iterable"
                ]
            }
        },
        "photo_relation.__str__": {
            "name": "__str__",
            "location": 1084,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "\"User\"",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spud-master/spud/populate_photo_file.py": {
        "populate": {
            "name": "populate",
            "location": 10,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "photo_file": [
                    "bytes",
                    "str",
                    "BinaryIO",
                    "Dict[Tuple[int, ...], int]"
                ],
                "p": [
                    "str",
                    "FrozenSet[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "spud-master/spud/serializers.py": {
        "BinaryField.to_internal_value": {
            "name": "to_internal_value",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "BinaryField.to_representation": {
            "name": "to_representation",
            "location": 41,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "ListSerializer.set_request": {
            "name": "set_request",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "ModelSerializer.set_request": {
            "name": "set_request",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "PhotoFileListSerializer.to_representation": {
            "name": "to_representation",
            "location": 80,
            "return": [
                "bool",
                "zerver.models.Realm",
                "Tuple[int, Dict[str, Any]]",
                "List[pydantic.fields.ModelField]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "PhotoTitleField.get_attribute": {
            "name": "get_attribute",
            "location": 90,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "int",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]",
                    "Tuple[int]"
                ]
            }
        },
        "AlbumSerializer.set_request": {
            "name": "set_request",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpResponse",
                    "rest_framework.response.Response",
                    "Dict[str, Any]",
                    "django.http.JsonResponse"
                ]
            }
        },
        "PlaceSerializer.set_request": {
            "name": "set_request",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpResponse",
                    "rest_framework.response.Response",
                    "Dict[str, Any]",
                    "django.http.JsonResponse"
                ]
            }
        },
        "PersonTitleField.get_attribute": {
            "name": "get_attribute",
            "location": 258,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "PersonTitleField.to_representation": {
            "name": "to_representation",
            "location": 261,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "PersonSerializer.set_request": {
            "name": "set_request",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpResponse",
                    "rest_framework.response.Response",
                    "Dict[str, Any]",
                    "django.http.JsonResponse"
                ]
            }
        },
        "PersonListSerializer.get_value": {
            "name": "get_value",
            "location": 386,
            "return": [
                "str",
                "models.Name",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "PersonListSerializer.to_internal_value": {
            "name": "to_internal_value",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Set[str]",
                    "bool",
                    "Iterable[bytes]",
                    "Optional[dict]",
                    "tuple",
                    "dict"
                ]
            }
        },
        "PersonListSerializer.to_representation": {
            "name": "to_representation",
            "location": 394,
            "return": [
                "bool",
                "zerver.models.Realm",
                "Tuple[int, Dict[str, Any]]",
                "List[pydantic.fields.ModelField]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Sequence",
                    "float",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PersonPkListSerializer.get_value": {
            "name": "get_value",
            "location": 406,
            "return": [
                "str",
                "models.Name",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "PersonPkListSerializer.to_internal_value": {
            "name": "to_internal_value",
            "location": 411,
            "return": [
                "bool",
                "List[str]",
                "str",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "T",
                    "bytes",
                    "Iterable[T]",
                    "Iterable"
                ]
            }
        },
        "PersonPkListSerializer.to_representation": {
            "name": "to_representation",
            "location": 433,
            "return": [
                "bool",
                "zerver.models.Realm",
                "Tuple[int, Dict[str, Any]]",
                "List[pydantic.fields.ModelField]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Sequence",
                    "float",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PhotoListSerializer.to_representation": {
            "name": "to_representation",
            "location": 513,
            "return": [
                "bool",
                "zerver.models.Realm",
                "Tuple[int, Dict[str, Any]]",
                "List[pydantic.fields.ModelField]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "CreatePhotoSerializer.validate": {
            "name": "validate",
            "location": 570,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "bool",
                    "str"
                ]
            }
        },
        "CreatePhotoSerializer.create": {
            "name": "create",
            "location": 626,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_attrs": [
                    "dict",
                    "videoarchiver.tvasahi.models.Episode"
                ]
            }
        },
        "CreatePhotoSerializer._pop_m2m_attrs": {
            "name": "_pop_m2m_attrs",
            "location": 672,
            "return": [
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "validated_attrs": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Type['Frame']"
                ]
            }
        },
        "CreatePhotoSerializer._process_m2m": {
            "name": "_process_m2m",
            "location": 680,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [],
                "m2m_attrs": [
                    "Mapping[Any, Any]",
                    "bool"
                ]
            }
        },
        "PhotoSerializer.update": {
            "name": "update",
            "location": 793,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Dict[str, Any]",
                    "float",
                    "salon.models.Stylist",
                    "raiden.utils.Dict",
                    "lms.lmsdb.models.User"
                ],
                "validated_attrs": [
                    "str"
                ]
            }
        },
        "PhotoSerializer._pop_m2m_attrs": {
            "name": "_pop_m2m_attrs",
            "location": 806,
            "return": [
                "bool",
                "esm.models.service_type.ServiceType",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_attrs": [
                    "Optional[guillotina.db.interfaces.ITransaction]",
                    "bool",
                    "tonga.models.structs.positioning.BasePositioning",
                    "Optional[int]"
                ]
            }
        },
        "PhotoSerializer._process_m2m": {
            "name": "_process_m2m",
            "location": 821,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int"
                ],
                "m2m_attrs": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "PhotoSerializer.set_request": {
            "name": "set_request",
            "location": 929,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpResponse",
                    "rest_framework.response.Response",
                    "Dict[str, Any]",
                    "django.http.JsonResponse"
                ]
            }
        }
    },
    "spud-master/spud/settings.py": {},
    "spud-master/spud/upload.py": {},
    "spud-master/spud/urls.py": {},
    "spud-master/spud/views.py": {
        "_decode_int": {
            "name": "_decode_int",
            "location": 33,
            "return": [
                "bool",
                "Callable",
                "Tuple[str, int]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "zerver.models.Realm"
                ],
                "string": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_get_anything": {
            "name": "_get_anything",
            "location": 42,
            "return": [
                "int",
                "Optional[str]",
                "str",
                "float",
                "Optional[Dict]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ],
                "key": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Union[str, List[str]]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "_get_int": {
            "name": "_get_int",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "List[str]",
                    "Sequence[Union[str, int]]",
                    "list",
                    "Optional[Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "_get_session": {
            "name": "_get_session",
            "location": 93,
            "return": [
                "str",
                "int",
                "dict",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ]
            }
        },
        "photo_orig_redirect": {
            "name": "photo_orig_redirect",
            "location": 361,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Response",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "str",
                    "bytes"
                ],
                "object_id": [
                    "str",
                    "zerver.models.UserProfile",
                    "int",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "photo_thumb_redirect": {
            "name": "photo_thumb_redirect",
            "location": 367,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Response",
                "dict"
            ],
            "arguments": {
                "request": [
                    "Optional[str]",
                    "django.http.HttpRequest",
                    "list",
                    "str"
                ],
                "object_id": [
                    "str",
                    "int",
                    "accounts.models.Account",
                    "zerver.models.UserProfile",
                    "transfer.models.ShopID"
                ],
                "size_key": [
                    "bytes",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "_assert_type": {
            "name": "_assert_type",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "obj_type": [
                    "str",
                    "Tuple[Type]"
                ]
            }
        },
        "ModelViewSet.get_serializer": {
            "name": "get_serializer",
            "location": 66,
            "return": [
                "List[Tuple[str, str, str]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionDetail.get": {
            "name": "get",
            "location": 125,
            "return": [
                "int",
                "bytes",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "int"
                ]
            }
        },
        "Login.post": {
            "name": "post",
            "location": 133,
            "return": [
                "dict",
                "int",
                "List[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "Logout.post": {
            "name": "post",
            "location": 159,
            "return": [
                "dict",
                "int",
                "List[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "AlbumViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 172,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlbumViewSet.destroy": {
            "name": "destroy",
            "location": 179,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "flask.Response",
                "Dict[str, Dict[str, Any]]",
                "lunch_buddies.models.poll_responses.PollResponse",
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "CategoryViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 195,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoryViewSet.destroy": {
            "name": "destroy",
            "location": 202,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "flask.Response",
                "Dict[str, Dict[str, Any]]",
                "lunch_buddies.models.poll_responses.PollResponse",
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "PlaceViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 218,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlaceViewSet.destroy": {
            "name": "destroy",
            "location": 225,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "flask.Response",
                "Dict[str, Dict[str, Any]]",
                "lunch_buddies.models.poll_responses.PollResponse",
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "PersonViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 240,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersonViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 247,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersonViewSet.destroy": {
            "name": "destroy",
            "location": 254,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "flask.Response",
                "Dict[str, Dict[str, Any]]",
                "lunch_buddies.models.poll_responses.PollResponse",
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "FeedbackViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 270,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhotoViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 284,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhotoViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 291,
            "return": [
                "str",
                "Tuple[str, List[str], List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhotoViewSet.get_serializer_context": {
            "name": "get_serializer_context",
            "location": 300,
            "return": [
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhotoViewSet.destroy": {
            "name": "destroy",
            "location": 310,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "flask.Response",
                "Dict[str, Dict[str, Any]]",
                "lunch_buddies.models.poll_responses.PollResponse",
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "PhotoViewSet.bulk_update": {
            "name": "bulk_update",
            "location": 318,
            "return": [
                "int",
                "Mapping[str, Any]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "models.WalletRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "PhotoViewSet.patch": {
            "name": "patch",
            "location": 341,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "spud-master/spud/wsgi.py": {},
    "spud-master/spud/__init__.py": {},
    "spud-master/spud/management/__init__.py": {},
    "spud-master/spud/management/commands/check_all_files.py": {
        "Command.handle": {
            "name": "handle",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spud-master/spud/management/commands/process_actions.py": {
        "Command.handle": {
            "name": "handle",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spud-master/spud/management/commands/__init__.py": {},
    "spud-master/spud/migrations/0001_squashed_0015_auto_20170608_1709.py": {},
    "spud-master/spud/migrations/0002_auto_20180330_1742.py": {},
    "spud-master/spud/migrations/0003_auto_20180402_1041.py": {},
    "spud-master/spud/migrations/0004_auto_20190324_1831.py": {},
    "spud-master/spud/migrations/0005_auto_20190321_1722.py": {
        "populate_photo_files": {
            "name": "populate_photo_files",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "schema_editor": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "spud-master/spud/migrations/0006_auto_20190321_1722.py": {
        "populate_photo_files": {
            "name": "populate_photo_files",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "schema_editor": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "spud-master/spud/migrations/0007_auto_20190321_1722.py": {
        "populate_photo_files": {
            "name": "populate_photo_files",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "schema_editor": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "spud-master/spud/migrations/0008_auto_20190321_1722.py": {
        "populate_photo_files": {
            "name": "populate_photo_files",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "schema_editor": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "spud-master/spud/migrations/0009_auto_20190406_2001.py": {},
    "spud-master/spud/migrations/__init__.py": {},
    "spud-master/spud/tests/conftest.py": {
        "data_files": {
            "name": "data_files",
            "location": 10,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "users": {
            "name": "users",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "albums": {
            "name": "albums",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "categorys": {
            "name": "categorys",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "persons": {
            "name": "persons",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "places": {
            "name": "places",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "photo": {
            "name": "photo",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "photos": {
            "name": "photos",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "relations": {
            "name": "relations",
            "location": 192,
            "return": [],
            "arguments": {
                "photos": []
            }
        },
        "feedbacks": {
            "name": "feedbacks",
            "location": 212,
            "return": [],
            "arguments": {
                "photos": []
            }
        }
    },
    "spud-master/spud/tests/settings.py": {
        "InvalidString.__mod__": {
            "name": "__mod__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "spud-master/spud/tests/__init__.py": {},
    "spud-master/spud/tests/a_unit/utils.py": {
        "MyQ.__eq__": {
            "name": "__eq__",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "spud-master/spud/tests/a_unit/__init__.py": {},
    "spud-master/spud/tests/a_unit/albums/test_models.py": {
        "test_fix_ascendants_new": {
            "name": "test_fix_ascendants_new",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "albums": []
            }
        },
        "test_fix_ascendants_replace": {
            "name": "test_fix_ascendants_replace",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "albums": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/albums/test_search.py": {
        "test_search_all": {
            "name": "test_search_all",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_q": {
            "name": "test_search_q",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_children": {
            "name": "test_search_children",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "albums": [
                    "str",
                    "float"
                ]
            }
        },
        "test_search_ascendants": {
            "name": "test_search_ascendants",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "albums": []
            }
        },
        "test_search_descendants": {
            "name": "test_search_descendants",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "albums": []
            }
        },
        "test_search_root_only": {
            "name": "test_search_root_only",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_needs_revision": {
            "name": "test_search_needs_revision",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_by_name_parent": {
            "name": "test_get_by_name_parent",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "albums": []
            }
        },
        "test_get_by_name_parent_failure": {
            "name": "test_get_by_name_parent_failure",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "albums": [
                    "str",
                    "Type"
                ]
            }
        },
        "test_get_by_name_child_success": {
            "name": "test_get_by_name_child_success",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "albums": [
                    "str"
                ]
            }
        },
        "test_get_by_name_child_failure": {
            "name": "test_get_by_name_child_failure",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "albums": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/albums/test_serializer.py": {
        "test_serializer_encode": {
            "name": "test_serializer_encode",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "albums": [
                    "core.models.Grouping"
                ]
            }
        },
        "test_serializer_decode": {
            "name": "test_serializer_decode",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "albums": [
                    "datetime.date.time"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/albums/__init__.py": {},
    "spud-master/spud/tests/a_unit/categorys/test_models.py": {
        "test_fix_ascendants_new": {
            "name": "test_fix_ascendants_new",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": []
            }
        },
        "test_fix_ascendants_replace": {
            "name": "test_fix_ascendants_replace",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/categorys/test_search.py": {
        "test_search_all": {
            "name": "test_search_all",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_q": {
            "name": "test_search_q",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_children": {
            "name": "test_search_children",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": [
                    "str",
                    "float"
                ]
            }
        },
        "test_search_ascendants": {
            "name": "test_search_ascendants",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": []
            }
        },
        "test_search_descendants": {
            "name": "test_search_descendants",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": []
            }
        },
        "test_search_root_only": {
            "name": "test_search_root_only",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_by_name_parent": {
            "name": "test_get_by_name_parent",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": []
            }
        },
        "test_get_by_name_parent_failure": {
            "name": "test_get_by_name_parent_failure",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": [
                    "str",
                    "Type"
                ]
            }
        },
        "test_get_by_name_child_success": {
            "name": "test_get_by_name_child_success",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": [
                    "str"
                ]
            }
        },
        "test_get_by_name_child_failure": {
            "name": "test_get_by_name_child_failure",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/categorys/test_serializer.py": {
        "test_serializer_encode": {
            "name": "test_serializer_encode",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": [
                    "core.models.Grouping"
                ]
            }
        },
        "test_serializer_decode": {
            "name": "test_serializer_decode",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "categorys": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/categorys/__init__.py": {},
    "spud-master/spud/tests/a_unit/feedbacks/test_models.py": {
        "test_fix_ascendants_new": {
            "name": "test_fix_ascendants_new",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "feedbacks": []
            }
        },
        "test_fix_ascendants_replace": {
            "name": "test_fix_ascendants_replace",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "feedbacks": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/feedbacks/test_search.py": {
        "test_search_all": {
            "name": "test_search_all",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_q": {
            "name": "test_search_q",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_children": {
            "name": "test_search_children",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "feedbacks": [
                    "str",
                    "float"
                ]
            }
        },
        "test_search_ascendants": {
            "name": "test_search_ascendants",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "feedbacks": []
            }
        },
        "test_search_descendants": {
            "name": "test_search_descendants",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "feedbacks": []
            }
        },
        "test_search_root_only": {
            "name": "test_search_root_only",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "spud-master/spud/tests/a_unit/feedbacks/test_serializer.py": {
        "test_serializer_encode": {
            "name": "test_serializer_encode",
            "location": 9,
            "return": [],
            "arguments": {
                "feedbacks": [],
                "photos": [],
                "photo": []
            }
        },
        "test_serializer_decode": {
            "name": "test_serializer_decode",
            "location": 80,
            "return": [],
            "arguments": {
                "feedbacks": [],
                "photo": []
            }
        }
    },
    "spud-master/spud/tests/a_unit/feedbacks/__init__.py": {},
    "spud-master/spud/tests/a_unit/persons/test_models.py": {
        "test_fix_ascendants_new": {
            "name": "test_fix_ascendants_new",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "persons": []
            }
        },
        "test_fix_ascendants_replace": {
            "name": "test_fix_ascendants_replace",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "persons": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/persons/test_search.py": {
        "test_search_all": {
            "name": "test_search_all",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_q": {
            "name": "test_search_q",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_children": {
            "name": "test_search_children",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "persons": []
            }
        },
        "test_search_ascendants": {
            "name": "test_search_ascendants",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "persons": []
            }
        },
        "test_search_descendants": {
            "name": "test_search_descendants",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "persons": []
            }
        },
        "test_search_root_only": {
            "name": "test_search_root_only",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_by_name_parent": {
            "name": "test_get_by_name_parent",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "persons": []
            }
        },
        "test_get_by_name_parent_failure": {
            "name": "test_get_by_name_parent_failure",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "persons": [
                    "str",
                    "Type"
                ]
            }
        },
        "test_get_by_name_child_success": {
            "name": "test_get_by_name_child_success",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "persons": [
                    "str"
                ]
            }
        },
        "test_get_by_name_child_failure": {
            "name": "test_get_by_name_child_failure",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "persons": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/persons/test_serializer.py": {
        "test_serializer_encode": {
            "name": "test_serializer_encode",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "persons": [
                    "lms.lmsdb.models.User",
                    "django.db.models.QuerySet",
                    "bool"
                ]
            }
        },
        "test_serializer_decode": {
            "name": "test_serializer_decode",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "persons": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/persons/__init__.py": {},
    "spud-master/spud/tests/a_unit/photos/test_models.py": {},
    "spud-master/spud/tests/a_unit/photos/test_search.py": {
        "test_search_all": {
            "name": "test_search_all",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_q": {
            "name": "test_search_q",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_related": {
            "name": "test_search_related",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "photos": []
            }
        },
        "test_get_by_name_parent": {
            "name": "test_get_by_name_parent",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "photos": []
            }
        },
        "test_get_by_name_parent_failure": {
            "name": "test_get_by_name_parent_failure",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "photos": [
                    "str",
                    "Type"
                ]
            }
        },
        "test_get_by_name_child_success": {
            "name": "test_get_by_name_child_success",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "photos": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/photos/test_serializer.py": {
        "test_serializer_encode": {
            "name": "test_serializer_encode",
            "location": 12,
            "return": [],
            "arguments": {
                "photos": []
            }
        },
        "test_serializer_decode": {
            "name": "test_serializer_decode",
            "location": 65,
            "return": [],
            "arguments": {
                "photos": []
            }
        }
    },
    "spud-master/spud/tests/a_unit/photos/__init__.py": {},
    "spud-master/spud/tests/a_unit/places/test_models.py": {
        "test_fix_ascendants_new": {
            "name": "test_fix_ascendants_new",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "places": []
            }
        },
        "test_fix_ascendants_replace": {
            "name": "test_fix_ascendants_replace",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "places": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/places/test_search.py": {
        "test_search_all": {
            "name": "test_search_all",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_q": {
            "name": "test_search_q",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_children": {
            "name": "test_search_children",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "places": [
                    "str",
                    "float"
                ]
            }
        },
        "test_search_ascendants": {
            "name": "test_search_ascendants",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "places": []
            }
        },
        "test_search_descendants": {
            "name": "test_search_descendants",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "places": []
            }
        },
        "test_search_root_only": {
            "name": "test_search_root_only",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_by_name_parent": {
            "name": "test_get_by_name_parent",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "places": []
            }
        },
        "test_get_by_name_parent_failure": {
            "name": "test_get_by_name_parent_failure",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "places": [
                    "str",
                    "Type"
                ]
            }
        },
        "test_get_by_name_child_success": {
            "name": "test_get_by_name_child_success",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "places": [
                    "str"
                ]
            }
        },
        "test_get_by_name_child_failure": {
            "name": "test_get_by_name_child_failure",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "places": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/places/test_serializer.py": {
        "test_serializer_encode": {
            "name": "test_serializer_encode",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "places": [
                    "core.models.Grouping",
                    "zerver.models.Message"
                ]
            }
        },
        "test_serializer_decode": {
            "name": "test_serializer_decode",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "places": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "spud-master/spud/tests/a_unit/places/__init__.py": {},
    "spud-master/spud/tests/b_integration/conftest.py": {
        "pytest_bdd_apply_tag": {
            "name": "pytest_bdd_apply_tag",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "Optional[str]",
                    "Iterable[Dict]"
                ],
                "function": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 67,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "live_server": [
                    "bool",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "step_no_login": {
            "name": "step_no_login",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "int",
                    "bool"
                ]
            }
        },
        "step_login": {
            "name": "step_login",
            "location": 81,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[str]",
                    "Iterable[Hashable]"
                ],
                "users": [
                    "str",
                    "bool"
                ],
                "username": [
                    "str",
                    "List[str]"
                ],
                "password": [
                    "str",
                    "List[str]"
                ],
                "settings": [
                    "str",
                    "bool"
                ]
            }
        },
        "step_logout": {
            "name": "step_logout",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "step_request_session": {
            "name": "step_request_session",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "step_test_permissions": {
            "name": "step_test_permissions",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Set[str]",
                    "bool",
                    "Tuple[int, str, int]"
                ],
                "permissions": [
                    "list",
                    "Iterable[bytes]",
                    "List[List[str]]",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "step_test_no_user": {
            "name": "step_test_no_user",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool"
                ]
            }
        },
        "step_test_username": {
            "name": "step_test_username",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "session": [],
                "username": [
                    "str"
                ]
            }
        },
        "step_test_first_name": {
            "name": "step_test_first_name",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool"
                ],
                "first_name": [
                    "str",
                    "Dict[str, str]",
                    "requests.Session"
                ]
            }
        },
        "step_test_last_name": {
            "name": "step_test_last_name",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Type[T]",
                    "bool"
                ],
                "last_name": [
                    "str"
                ]
            }
        },
        "step_status_error": {
            "name": "step_status_error",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "dict",
                    "str",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "bytes"
                ],
                "error": [
                    "str",
                    "Optional[bool]",
                    "Callable"
                ]
            }
        },
        "step_status_200": {
            "name": "step_status_200",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "step_status_201": {
            "name": "step_status_201",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "step_status_204": {
            "name": "step_status_204",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "live_server": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Session.headers": {
            "name": "headers",
            "location": 24,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.process_response": {
            "name": "process_response",
            "location": 30,
            "return": [
                "dict",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Session.get": {
            "name": "get",
            "location": 40,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Session.delete": {
            "name": "delete",
            "location": 45,
            "return": [
                "int",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, str]",
                    "requests.Session"
                ]
            }
        },
        "Session.post": {
            "name": "post",
            "location": 50,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Dict[int, dict]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict"
                ]
            }
        },
        "Session.put": {
            "name": "put",
            "location": 55,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Session.patch": {
            "name": "patch",
            "location": 60,
            "return": [
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "str",
                "Tuple[str, int, Dict[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "spud-master/spud/tests/b_integration/test_albums.py": {
        "step_create_album": {
            "name": "step_create_album",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "step_update_album": {
            "name": "step_update_album",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "list",
                    "tuple"
                ],
                "albums": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "step_patch_album": {
            "name": "step_patch_album",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict"
                ],
                "albums": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Sequence[object]"
                ]
            }
        },
        "step_get_album": {
            "name": "step_get_album",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "albums": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "step_delete_album": {
            "name": "step_delete_album",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "Set[str]"
                ],
                "albums": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "step_list_albums": {
            "name": "step_list_albums",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "albums": [
                    "bool"
                ]
            }
        },
        "step_test_album_description": {
            "name": "step_test_album_description",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "excars.models.user.User"
                ],
                "description": [
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "step_test_album_valid": {
            "name": "step_test_album_valid",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_test_album_not_exist": {
            "name": "step_test_album_not_exist",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_test_r_valid_album": {
            "name": "step_test_r_valid_album",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "jfinances.models.TransactionModel",
                    "Optional[str]"
                ],
                "name": [
                    "str"
                ],
                "fields": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "step_test_r_album_description": {
            "name": "step_test_r_album_description",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "description": [
                    "services.user.transfer.models.User",
                    "str",
                    "flask_appbuilder.security.sqla.models.User"
                ]
            }
        },
        "step_test_r_n_results": {
            "name": "step_test_r_n_results",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "session": [],
                "number": [
                    "str"
                ],
                "fields": [
                    "str",
                    "bool",
                    "Iterable[Type[fonduer.candidates.models.Candidate]]",
                    "Dict[str, bool]"
                ]
            }
        }
    },
    "spud-master/spud/tests/b_integration/test_categorys.py": {
        "step_create_category": {
            "name": "step_create_category",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "step_update_category": {
            "name": "step_update_category",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "list",
                    "tuple"
                ],
                "categorys": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "step_patch_category": {
            "name": "step_patch_category",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict"
                ],
                "categorys": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Sequence[object]"
                ]
            }
        },
        "step_get_category": {
            "name": "step_get_category",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "categorys": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "step_delete_category": {
            "name": "step_delete_category",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "Set[str]"
                ],
                "categorys": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "step_list_categorys": {
            "name": "step_list_categorys",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "categorys": [
                    "bool"
                ]
            }
        },
        "step_test_category_description": {
            "name": "step_test_category_description",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "excars.models.user.User"
                ],
                "description": [
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "step_test_category_valid": {
            "name": "step_test_category_valid",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_test_category_not_exist": {
            "name": "step_test_category_not_exist",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_test_r_valid_category": {
            "name": "step_test_r_valid_category",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "jfinances.models.TransactionModel"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "step_test_r_category_description": {
            "name": "step_test_r_category_description",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "description": [
                    "services.user.transfer.models.User",
                    "str",
                    "flask_appbuilder.security.sqla.models.User"
                ]
            }
        },
        "step_test_r_n_results": {
            "name": "step_test_r_n_results",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "session": [],
                "number": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/b_integration/test_feedbacks.py": {
        "step_create_feedback": {
            "name": "step_create_feedback",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[dict]"
                ],
                "photo": [
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "step_update_feedback": {
            "name": "step_update_feedback",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Callable[[Dict], bool]]"
                ],
                "feedbacks": [
                    "bool",
                    "Iterable[Type[fonduer.candidates.models.Candidate]]",
                    "List[str]",
                    "grouper.models.base.session.Session",
                    "Optional[str]"
                ],
                "photos": [
                    "str",
                    "bool"
                ],
                "photo_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "step_patch_feedback": {
            "name": "step_patch_feedback",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Callable[[Dict], bool]]",
                    "accounts.models.Account"
                ],
                "photos": [
                    "List[Tuple[str, str]]",
                    "str",
                    "Dict[str, Dict]"
                ],
                "feedbacks": [
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "photo_name": [
                    "List[Tuple[str, str]]",
                    "str",
                    "Dict[str, Dict]"
                ]
            }
        },
        "step_get_feedback": {
            "name": "step_get_feedback",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "photos": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "feedbacks": [
                    "bool",
                    "List[str]",
                    "grouper.models.base.session.Session",
                    "Optional[int]",
                    "Iterable[Type[fonduer.candidates.models.Candidate]]"
                ],
                "photo_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "step_delete_feedback": {
            "name": "step_delete_feedback",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Optional[str]",
                    "List[str]",
                    "Optional[bool]"
                ],
                "photos": [
                    "str",
                    "bool"
                ],
                "feedbacks": [
                    "str",
                    "bool",
                    "Iterable[Type[fonduer.candidates.models.Candidate]]"
                ],
                "photo_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "step_list_feedbacks": {
            "name": "step_list_feedbacks",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "feedbacks": [
                    "bool"
                ]
            }
        },
        "step_test_feedback_comment": {
            "name": "step_test_feedback_comment",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "photos": [
                    "str"
                ],
                "photo_name": [
                    "str"
                ],
                "comment": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "step_test_feedback_valid": {
            "name": "step_test_feedback_valid",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "photos": [
                    "str"
                ],
                "photo_name": [
                    "str"
                ]
            }
        },
        "step_test_feedback_not_exist": {
            "name": "step_test_feedback_not_exist",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "photos": [
                    "str"
                ],
                "photo_name": [
                    "str"
                ]
            }
        },
        "step_test_r_valid_feedback": {
            "name": "step_test_r_valid_feedback",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ]
            }
        },
        "step_test_r_feedback_comment": {
            "name": "step_test_r_feedback_comment",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool"
                ],
                "comment": [
                    "str",
                    "Dict[str, str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "step_test_r_n_results": {
            "name": "step_test_r_n_results",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "session": [],
                "number": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/b_integration/test_persons.py": {
        "step_create_person": {
            "name": "step_create_person",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "step_update_person": {
            "name": "step_update_person",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "list",
                    "tuple"
                ],
                "persons": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "step_patch_person": {
            "name": "step_patch_person",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict"
                ],
                "persons": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "django.db.models.Model"
                ]
            }
        },
        "step_get_person": {
            "name": "step_get_person",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "persons": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "step_delete_person": {
            "name": "step_delete_person",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "Set[str]"
                ],
                "persons": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_list_persons": {
            "name": "step_list_persons",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "persons": [
                    "bool"
                ]
            }
        },
        "step_test_person_notes": {
            "name": "step_test_person_notes",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "paradigm.models.Plain",
                    "zerver.models.Realm",
                    "int"
                ],
                "notes": [
                    "str",
                    "bool"
                ]
            }
        },
        "step_test_person_valid": {
            "name": "step_test_person_valid",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "zerver.models.Realm",
                    "List[str]"
                ]
            }
        },
        "step_test_person_not_exist": {
            "name": "step_test_person_not_exist",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "step_test_r_valid_person": {
            "name": "step_test_r_valid_person",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "jfinances.models.TransactionModel",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "fields": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "step_test_r_person_notes": {
            "name": "step_test_r_person_notes",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool"
                ],
                "notes": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_test_r_n_results": {
            "name": "step_test_r_n_results",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "session": [],
                "number": [
                    "str"
                ],
                "fields": [
                    "str",
                    "bool",
                    "Iterable[Type[fonduer.candidates.models.Candidate]]",
                    "Dict[str, bool]"
                ]
            }
        }
    },
    "spud-master/spud/tests/b_integration/test_photos.py": {
        "step_create_photo": {
            "name": "step_create_photo",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "int"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[object]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "data_files": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_update_photo": {
            "name": "step_update_photo",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "list",
                    "tuple"
                ],
                "photos": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[object]",
                    "Optional[int]"
                ]
            }
        },
        "step_patch_photo": {
            "name": "step_patch_photo",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict"
                ],
                "photos": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Sequence[object]"
                ]
            }
        },
        "step_get_photo": {
            "name": "step_get_photo",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "photos": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "step_delete_photo": {
            "name": "step_delete_photo",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "Set[str]"
                ],
                "photos": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "step_list_photos": {
            "name": "step_list_photos",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "photos": [
                    "bool"
                ]
            }
        },
        "step_test_photo_description": {
            "name": "step_test_photo_description",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "excars.models.user.User"
                ],
                "description": [
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "step_test_photo_valid": {
            "name": "step_test_photo_valid",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_test_photo_not_exist": {
            "name": "step_test_photo_not_exist",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_test_r_valid_photo": {
            "name": "step_test_r_valid_photo",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "jfinances.models.TransactionModel"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "step_test_r_photo_description": {
            "name": "step_test_r_photo_description",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "description": [
                    "services.user.transfer.models.User",
                    "str",
                    "flask_appbuilder.security.sqla.models.User"
                ]
            }
        },
        "step_test_r_n_results": {
            "name": "step_test_r_n_results",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "session": [],
                "number": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/b_integration/test_places.py": {
        "step_create_place": {
            "name": "step_create_place",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "step_update_place": {
            "name": "step_update_place",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "list",
                    "tuple"
                ],
                "places": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "step_patch_place": {
            "name": "step_patch_place",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict"
                ],
                "places": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Sequence[object]"
                ]
            }
        },
        "step_get_place": {
            "name": "step_get_place",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "places": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "step_delete_place": {
            "name": "step_delete_place",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "Set[str]"
                ],
                "places": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "step_list_places": {
            "name": "step_list_places",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "places": [
                    "bool"
                ]
            }
        },
        "step_test_place_notes": {
            "name": "step_test_place_notes",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Mapping[str, Any]",
                    "zerver.models.Realm",
                    "int"
                ],
                "notes": [
                    "str",
                    "bool"
                ]
            }
        },
        "step_test_place_valid": {
            "name": "step_test_place_valid",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_test_place_not_exist": {
            "name": "step_test_place_not_exist",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "step_test_r_valid_place": {
            "name": "step_test_r_valid_place",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "jfinances.models.TransactionModel"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "step_test_r_place_notes": {
            "name": "step_test_r_place_notes",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool"
                ],
                "notes": [
                    "str",
                    "Dict[str, str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "step_test_r_n_results": {
            "name": "step_test_r_n_results",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "session": [],
                "number": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/b_integration/test_relations.py": {
        "step_create_relation": {
            "name": "step_create_relation",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[dict]"
                ],
                "photo_1": [
                    "str",
                    "models.Course"
                ],
                "photo_2": [
                    "str",
                    "models.Course"
                ],
                "photos": [
                    "str",
                    "Tuple[float, float]"
                ]
            }
        },
        "step_update_relation": {
            "name": "step_update_relation",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Dict[str, Any]",
                    "str",
                    "django.db.models.QuerySet"
                ],
                "relations": [
                    "bool"
                ],
                "photo_1": [
                    "zam_repondeur.models.Amendement",
                    "bytes",
                    "django.db.models.query.QuerySet",
                    "bool",
                    "Dict[str, Any]"
                ],
                "photo_2": [
                    "zam_repondeur.models.Amendement",
                    "bytes",
                    "django.db.models.query.QuerySet",
                    "bool",
                    "Dict[str, Any]"
                ],
                "photos": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "step_patch_relation": {
            "name": "step_patch_relation",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Optional[str]",
                    "dict",
                    "Optional[Hashable]",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "relations": [
                    "str",
                    "list",
                    "Iterable"
                ],
                "photo_1": [
                    "str",
                    "Optional[int]"
                ],
                "photo_2": [
                    "str",
                    "Optional[int]"
                ],
                "photos": [
                    "str",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        },
        "step_get_relation": {
            "name": "step_get_relation",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "relations": [
                    "dict",
                    "str",
                    "list",
                    "Iterable"
                ],
                "photo_1": [
                    "str",
                    "Optional[int]"
                ],
                "photo_2": [
                    "str",
                    "Optional[int]"
                ],
                "photos": [
                    "str",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        },
        "step_delete_relation": {
            "name": "step_delete_relation",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Tuple[float, float]"
                ],
                "relations": [
                    "str",
                    "bool",
                    "list"
                ],
                "photo_1": [
                    "str",
                    "Optional[int]"
                ],
                "photo_2": [
                    "str",
                    "Optional[int]"
                ],
                "photos": [
                    "Tuple[float, float]"
                ]
            }
        },
        "step_list_relations": {
            "name": "step_list_relations",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "relations": [
                    "bool"
                ]
            }
        },
        "step_test_relation_description_1": {
            "name": "step_test_relation_description_1",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "photo_1": [
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "zerver.models.Realm"
                ],
                "photo_2": [
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "zerver.models.Realm"
                ],
                "description": [
                    "zerver.models.UserProfile"
                ],
                "photos": [
                    "zerver.models.UserProfile"
                ]
            }
        },
        "step_test_relation_description_2": {
            "name": "step_test_relation_description_2",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "photo_1": [
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "zerver.models.Realm"
                ],
                "photo_2": [
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "zerver.models.Realm"
                ],
                "description": [
                    "zerver.models.UserProfile"
                ],
                "photos": [
                    "zerver.models.UserProfile"
                ]
            }
        },
        "step_test_relation_valid": {
            "name": "step_test_relation_valid",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "photo_1": [
                    "core.models.Grouping",
                    "zerver.models.Realm"
                ],
                "photo_2": [
                    "core.models.Grouping",
                    "zerver.models.Realm"
                ],
                "photos": [
                    "str",
                    "dict",
                    "Optional[zerver.models.Realm]",
                    "int"
                ]
            }
        },
        "step_test_relation_not_exist": {
            "name": "step_test_relation_not_exist",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "photo_1": [
                    "zerver.models.Realm",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "Dict[str, Any]"
                ],
                "photo_2": [
                    "zerver.models.Realm",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "Dict[str, Any]"
                ],
                "photos": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "step_test_r_valid_relation": {
            "name": "step_test_r_valid_relation",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "photo_1": [
                    "str"
                ],
                "photo_2": [
                    "str"
                ],
                "photos": [
                    "Dict[str, Any]"
                ]
            }
        },
        "step_test_r_relation_description_1": {
            "name": "step_test_r_relation_description_1",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "description": [
                    "services.user.transfer.models.User",
                    "str",
                    "flask_appbuilder.security.sqla.models.User"
                ]
            }
        },
        "step_test_r_relation_description_2": {
            "name": "step_test_r_relation_description_2",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "description": [
                    "services.user.transfer.models.User",
                    "str",
                    "flask_appbuilder.security.sqla.models.User"
                ]
            }
        },
        "step_test_r_n_results": {
            "name": "step_test_r_n_results",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "session": [],
                "number": [
                    "str"
                ]
            }
        }
    },
    "spud-master/spud/tests/b_integration/test_sessions.py": {},
    "spud-master/spud/tests/b_integration/__init__.py": {}
}
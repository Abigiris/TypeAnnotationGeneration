{
    "starlette-admin-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 10,
            "return": [
                "bool",
                "Optional[Callable[..., Any]]",
                "bytes",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "package": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_package_data": {
            "name": "get_package_data",
            "location": 18,
            "return": [
                "int",
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 32,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_packages": {
            "name": "get_packages",
            "location": 40,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "package": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "starlette-admin-master/example/admin.py": {
        "datepicker_kwargs": {
            "name": "datepicker_kwargs",
            "location": 18,
            "return": [
                "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "DemoAdmin.get_search_results": {
            "name": "get_search_results",
            "location": 113,
            "return": [
                "List[str]",
                "List[Dict]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "bool",
                    "Optional[str]"
                ],
                "objs": [
                    "Dict[str, Any]",
                    "str",
                    "zerver.models.Message",
                    "dict"
                ],
                "term": [
                    "Dict[str, Any]",
                    "str",
                    "zerver.models.Message",
                    "dict"
                ]
            }
        },
        "DemoAdmin.get_ordered_results": {
            "name": "get_ordered_results",
            "location": 117,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "objs": [
                    "str",
                    "Sequence[Dict[str, Any]]",
                    "T",
                    "Iterable[T_co]",
                    "bytes",
                    "Union[str, bytes]"
                ],
                "by": [
                    "str",
                    "Sequence[Dict[str, Any]]",
                    "T",
                    "Iterable[T_co]",
                    "bytes",
                    "Union[str, bytes]"
                ],
                "direction": [
                    "str",
                    "Sequence[Dict[str, Any]]",
                    "T",
                    "Iterable[T_co]",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        },
        "DemoAdmin.get_list_objects": {
            "name": "get_list_objects",
            "location": 121,
            "return": [
                "List[str]",
                "str",
                "list",
                "List[Tuple[str, str]]",
                "List[Tuple[int, int, Any]]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "zam_repondeur.models.Article",
                    "Tuple[Type]",
                    "Dict[str, Any]",
                    "Type",
                    "Mapping[str, T]"
                ],
                "request": [
                    "libkol.Session",
                    "Optional[requests.Session]",
                    "dict",
                    "requests.Session"
                ]
            }
        },
        "DemoAdmin.get_object": {
            "name": "get_object",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "solo.vendor.old_session.old_session.Session"
                ],
                "request": [
                    "libkol.Session"
                ]
            }
        },
        "DemoModelForm.get_session": {
            "name": "get_session",
            "location": 164,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "DemoModelAdmin.get_default_ordering": {
            "name": "get_default_ordering",
            "location": 188,
            "return": [
                "str",
                "web_exceptions.HTTPException",
                "Optional[str]",
                "bool",
                "List[Callable]",
                "type"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "dict",
                    "List[dict]",
                    "bool"
                ],
                "qs": [
                    "sqlalchemy.orm.Query",
                    "bytes",
                    "str",
                    "Pattern"
                ]
            }
        },
        "DemoModelAdmin.get_search_results": {
            "name": "get_search_results",
            "location": 192,
            "return": [
                "audiopyle.lib.models.plugin.VampyPlugin",
                "taxonomy.db.models.Taxon"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "bool",
                    "Optional[str]"
                ],
                "qs": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "type"
                ],
                "term": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "type"
                ]
            }
        },
        "SystemSettingsModelAdmin.get_object": {
            "name": "get_object",
            "location": 220,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "nox.sessions.Session"
                ],
                "request": [
                    "bool",
                    "solo.vendor.old_session.old_session.Session"
                ]
            }
        }
    },
    "starlette-admin-master/example/main.py": {},
    "starlette-admin-master/example/models.py": {
        "DemoModel.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemSettingsModel.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "int",
                "Sequence[int]",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-admin-master/example/store.py": {
        "object_factory": {
            "name": "object_factory",
            "location": 22,
            "return": [
                "dict",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "DemoObject.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DemoStore._next_id": {
            "name": "_next_id",
            "location": 43,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DemoStore.get": {
            "name": "get",
            "location": 46,
            "return": [
                "bool",
                "int",
                "List[Tuple[int, str, str]]",
                "List[Dict[str, Any]]",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Union[int, str]",
                    "bool"
                ]
            }
        },
        "DemoStore.create": {
            "name": "create",
            "location": 49,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "DemoStore.update": {
            "name": "update",
            "location": 54,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "dict"
                ],
                "data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "DemoStore.delete": {
            "name": "delete",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "starlette-admin-master/example/widgets.py": {
        "Today.get_context": {
            "name": "get_context",
            "location": 7,
            "return": [
                "bool",
                "str",
                "Union[dict, list]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Time.get_context": {
            "name": "get_context",
            "location": 17,
            "return": [
                "bool",
                "str",
                "Union[dict, list]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "DayOfYear.get_context": {
            "name": "get_context",
            "location": 27,
            "return": [
                "Union[dict, list]",
                "str",
                "int",
                "Sequence[util.datetime.range.DateTimeRange]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-admin-master/example/__init__.py": {},
    "starlette-admin-master/starlette_admin/config.py": {},
    "starlette-admin-master/starlette_admin/exceptions.py": {},
    "starlette-admin-master/starlette_admin/site.py": {
        "AdminSite.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "permission_scopes": []
            }
        },
        "AdminSite.register": {
            "name": "register",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "model_admin": []
            }
        },
        "AdminSite.registry": {
            "name": "registry",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.register_widget": {
            "name": "register_widget",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "widget": []
            }
        },
        "AdminSite.widgets": {
            "name": "widgets",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.get_logout_url": {
            "name": "get_logout_url",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AdminSite.get_context": {
            "name": "get_context",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AdminSite.is_auth_enabled": {
            "name": "is_auth_enabled",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AdminSite.base_url_name": {
            "name": "base_url_name",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-admin-master/starlette_admin/widgets.py": {
        "BaseWidget.get_context": {
            "name": "get_context",
            "location": 9,
            "return": [
                "Dict[str, int]",
                "float",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseWidget.render": {
            "name": "render",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseWidget.html": {
            "name": "html",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "starlette-admin-master/starlette_admin/__init__.py": {},
    "starlette-admin-master/starlette_admin/admin/base.py": {
        "BaseAdmin.get_context": {
            "name": "get_context",
            "location": 50,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "cls": [
                    "dict"
                ],
                "request": [
                    "dict",
                    "int"
                ]
            }
        },
        "BaseAdmin.get_list_objects": {
            "name": "get_list_objects",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "request": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseAdmin.get_object": {
            "name": "get_object",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "request": [
                    "bool"
                ]
            }
        },
        "BaseAdmin.paginate": {
            "name": "paginate",
            "location": 103,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "cls": [],
                "request": [],
                "objects": []
            }
        },
        "BaseAdmin.get_form": {
            "name": "get_form",
            "location": 119,
            "return": [
                "str",
                "bool",
                "MutableMapping"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "golem_messages.message.base.Message"
                ],
                "form_cls": [
                    "str",
                    "list",
                    "callable",
                    "wtforms.form.Form",
                    "T"
                ]
            }
        },
        "BaseAdmin.section_path": {
            "name": "section_path",
            "location": 278,
            "return": [
                "str",
                "Tuple[str]",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "BaseAdmin.collection_path": {
            "name": "collection_path",
            "location": 282,
            "return": [
                "str",
                "Tuple[str]",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "BaseAdmin.mount_point": {
            "name": "mount_point",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "BaseAdmin.mount_name": {
            "name": "mount_name",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "BaseAdmin.url_names": {
            "name": "url_names",
            "location": 294,
            "return": [
                "List[str]",
                "set",
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseAdmin.routes": {
            "name": "routes",
            "location": 304,
            "return": [
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "starlette-admin-master/starlette_admin/admin/model_admin.py": {
        "ModelAdmin.get_default_ordering": {
            "name": "get_default_ordering",
            "location": 13,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Tuple[int, int]]",
                    "str",
                    "dict",
                    "List[dict]",
                    "bool"
                ],
                "qs": [
                    "sqlalchemy.orm.Query",
                    "bytes",
                    "str",
                    "Pattern"
                ]
            }
        },
        "ModelAdmin.get_search_results": {
            "name": "get_search_results",
            "location": 17,
            "return": [
                "sqlalchemy.orm.Query"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "bool",
                    "Optional[str]"
                ],
                "qs": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "bool",
                    "Optional[str]"
                ],
                "term": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ModelAdmin.get_ordered_results": {
            "name": "get_ordered_results",
            "location": 21,
            "return": [
                "list",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ],
                "qs": [
                    "sqlalchemy.Column",
                    "bool",
                    "str"
                ],
                "order_by": [
                    "str",
                    "Type",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity",
                    "int",
                    "Exception"
                ],
                "order_direction": [
                    "str",
                    "List[str]",
                    "Union[int, str, bool]"
                ]
            }
        },
        "ModelAdmin.get_list_objects": {
            "name": "get_list_objects",
            "location": 33,
            "return": [
                "str",
                "int",
                "Sequence[str]",
                "type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.sql.schema.Table",
                    "pymongo.database.Database",
                    "bool",
                    "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]"
                ],
                "request": [
                    "int"
                ]
            }
        },
        "ModelAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 52,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes",
                    "Optional[BaseException]"
                ]
            }
        },
        "ModelAdmin.get_object": {
            "name": "get_object",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "grouper.models.base.session.Session",
                    "dict"
                ],
                "request": []
            }
        }
    },
    "starlette-admin-master/starlette_admin/admin/__init__.py": {},
    "starlette-admin-master/starlette_admin/forms/fields.py": {
        "JSONField.process_formdata": {
            "name": "process_formdata",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valuelist": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "JSONField._value": {
            "name": "_value",
            "location": 18,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONField.pre_validate": {
            "name": "pre_validate",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "starlette-admin-master/starlette_admin/forms/widgets.py": {
        "CheckboxInput.__call__": {
            "name": "__call__",
            "location": 7,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Optional[str]",
                    "str",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "FileInput.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Dict[str, Any]",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "HorizontalSelect.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HorizontalSelect.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Dict[str, Any]",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "PasswordInput.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Dict[str, Any]",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "RadioInput.__call__": {
            "name": "__call__",
            "location": 116,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Optional[str]",
                    "str",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "Select.__call__": {
            "name": "__call__",
            "location": 128,
            "return": [
                "float",
                "Iterable[int]",
                "int",
                "Literal"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Dict[str, Any]",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        },
        "TagsInput.__call__": {
            "name": "__call__",
            "location": 142,
            "return": [
                "str",
                "dict",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "wtforms.fields.StringField",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "starlette-admin-master/starlette_admin/forms/__init__.py": {},
    "starlette-admin-master/tests/conftest.py": {},
    "starlette-admin-master/tests/test_testing.py": {
        "test_testing": {
            "name": "test_testing",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "starlette-admin-master/tests/__init__.py": {}
}
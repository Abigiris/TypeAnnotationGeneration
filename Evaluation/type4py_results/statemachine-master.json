{
    "statemachine-master/safe_example.py": {
        "Safe.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pin_code": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "Safe.try_combination": {
            "name": "try_combination",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "combination": [
                    "int",
                    "List[str]",
                    "str",
                    "bytes",
                    "bool",
                    "float"
                ]
            }
        },
        "Safe.lock": {
            "name": "lock",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Safe.force_lock": {
            "name": "force_lock",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "statemachine-master/setup.py": {},
    "statemachine-master/statemachine/state.py": {
        "State.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "Optional[Sequence[Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "is_starting_state": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "will_enter": [
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "str"
                ],
                "entered": [
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "str"
                ],
                "will_exit": [
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "str"
                ],
                "exited": [
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "statemachine-master/statemachine/transition.py": {
        "Transition.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_state_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "to_states_names": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "before": [
                    "Optional[Callable]",
                    "dict",
                    "str",
                    "list"
                ],
                "after": [
                    "Optional[Callable]",
                    "dict",
                    "str",
                    "list"
                ]
            }
        },
        "Transition.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transition.__contains__": {
            "name": "__contains__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "statemachine-master/statemachine/__init__.py": {
        "StateMachine.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.add": {
            "name": "add",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "StateMachine._add_state": {
            "name": "_add_state",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_state": [
                    "prefecengine.state.State",
                    "statemachine.state.State",
                    "raiden.utils.List[raiden.transfer.state.RouteState]",
                    "raiden.transfer.state.RouteState",
                    "Iterable[Callable]"
                ]
            }
        },
        "StateMachine._add_transition": {
            "name": "_add_transition",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "statemachine.transition.Transition",
                    "List[List]",
                    "T"
                ]
            }
        },
        "StateMachine.can_transition_to": {
            "name": "can_transition_to",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "StateMachine.transition_to": {
            "name": "transition_to",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_name": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "statemachine-master/test/test_state.py": {
        "test_string": {
            "name": "test_string",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestHooks.test_empty": {
            "name": "test_empty",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHooks.sample_hook": {
            "name": "sample_hook",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestHooks.test_hooks": {
            "name": "test_hooks",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStartingState.test_is_not": {
            "name": "test_is_not",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStartingState.test_is": {
            "name": "test_is",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHooks.sample_hook.h": {
            "name": "h",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "statemachine-master/test/test_statemachine.py": {
        "test_creation": {
            "name": "test_creation",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestAdd.test_add_state": {
            "name": "test_add_state",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_Transition": {
            "name": "test_add_Transition",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_new_transition_needs_existing_from_state": {
            "name": "test_new_transition_needs_existing_from_state",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_new_transition_needs_existing_to_state": {
            "name": "test_new_transition_needs_existing_to_state",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_adding_invalid_type": {
            "name": "test_adding_invalid_type",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanTransitonTo.test_can_transition": {
            "name": "test_can_transition",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanTransitonTo.test_cant_transition_without_starting_state": {
            "name": "test_cant_transition_without_starting_state",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanTransitonTo.test_transitions_arent_two_way": {
            "name": "test_transitions_arent_two_way",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCanTransitonTo.test_cant_transition_to_undefined_state": {
            "name": "test_cant_transition_to_undefined_state",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransition.test_cant_transition_where_cant_transition_to": {
            "name": "test_cant_transition_where_cant_transition_to",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransition.test_hooks_order": {
            "name": "test_hooks_order",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransition.test_transition": {
            "name": "test_transition",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransition.test_hooks_order.hook": {
            "name": "hook",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "TestTransition.test_hooks_order.hook.h": {
            "name": "h",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "statemachine-master/test/test_transition.py": {
        "TestContains.test_value_is_contained": {
            "name": "test_value_is_contained",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContains.test_from_state_check": {
            "name": "test_from_state_check",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContains.test_value_not_contained": {
            "name": "test_value_not_contained",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHooks.test_empty_hooks": {
            "name": "test_empty_hooks",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHooks.sample_hook": {
            "name": "sample_hook",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestHooks.test_before": {
            "name": "test_before",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHooks.test_after": {
            "name": "test_after",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHooks.test_both_hooks": {
            "name": "test_both_hooks",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConstruction.test_standard_construction": {
            "name": "test_standard_construction",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_String.test_string_representation": {
            "name": "test_string_representation",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHooks.sample_hook.h": {
            "name": "h",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "statemachine-master/test/__init__.py": {}
}
{
    "stepik_algorithms_1-master/src/module_2/big_fibonacci.py": {
        "fib_mod": {
            "name": "fib_mod",
            "location": 1,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "m": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stepik_algorithms_1-master/src/module_2/count_sort.py": {
        "count_sort": {
            "name": "count_sort",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "lst": [
                    "int",
                    "Tuple[int, int, int]",
                    "List[str]",
                    "Iterator[str]",
                    "float"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/src/module_2/fibonacci.py": {
        "fibonacci": {
            "name": "fibonacci",
            "location": 1,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stepik_algorithms_1-master/src/module_2/fibonacci_last.py": {
        "fib_digit": {
            "name": "fib_digit",
            "location": 1,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stepik_algorithms_1-master/src/module_2/gcd.py": {
        "gcd": {
            "name": "gcd",
            "location": 1,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Sequence[T]",
                    "float"
                ],
                "b": [
                    "int",
                    "Sequence[T]",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stepik_algorithms_1-master/src/module_2/speed.py": {
        "f1": {
            "name": "f1",
            "location": 4,
            "return": [
                "str",
                "Dict[str, Callable]",
                "Tuple[str]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f2": {
            "name": "f2",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "f3": {
            "name": "f3",
            "location": 12,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f4": {
            "name": "f4",
            "location": 16,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f5": {
            "name": "f5",
            "location": 20,
            "return": [
                "str",
                "Dict[str, Callable]",
                "Tuple[str]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f6": {
            "name": "f6",
            "location": 24,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "f7": {
            "name": "f7",
            "location": 28,
            "return": [
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f8": {
            "name": "f8",
            "location": 32,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f9": {
            "name": "f9",
            "location": 36,
            "return": [
                "str",
                "Dict[str, Callable]",
                "Tuple[str]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f10": {
            "name": "f10",
            "location": 40,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f11": {
            "name": "f11",
            "location": 44,
            "return": [
                "List[str]",
                "str",
                "int",
                "List[Dict]",
                "float"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "f12": {
            "name": "f12",
            "location": 48,
            "return": [
                "str",
                "Dict[str, Callable]",
                "Tuple[str]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "f13": {
            "name": "f13",
            "location": 52,
            "return": [
                "int",
                "bool",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "f14": {
            "name": "f14",
            "location": 56,
            "return": [
                "str",
                "List[str]",
                "IO[bytes]",
                "type"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "f15": {
            "name": "f15",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "f16": {
            "name": "f16",
            "location": 64,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "f17": {
            "name": "f17",
            "location": 68,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "Dict[str, int]",
                    "list",
                    "memoryview",
                    "str"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/src/module_4/continuous_backpack.py": {
        "max_value": {
            "name": "max_value",
            "location": 14,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "Callable[[Mapping], T]",
                "tuple"
            ],
            "arguments": {
                "capacity": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]"
                ],
                "data": [
                    "List[List[Any]]",
                    "float",
                    "Iterable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Thing.unit_cost": {
            "name": "unit_cost",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stepik_algorithms_1-master/src/module_4/custom_heap.py": {
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Heap.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.insert": {
            "name": "insert",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "Heap.extract_max": {
            "name": "extract_max",
            "location": 19,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.heapify": {
            "name": "heapify",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "Heap.__len__": {
            "name": "__len__",
            "location": 48,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stepik_algorithms_1-master/src/module_4/different_summands.py": {
        "different_summands": {
            "name": "different_summands",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stepik_algorithms_1-master/src/module_4/huffman_code.py": {
        "main": {
            "name": "main",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frequency": [
                    "str",
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "bool"
                ],
                "code": [
                    "str",
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Node.__gt__": {
            "name": "__gt__",
            "location": 17,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.walk": {
            "name": "walk",
            "location": 22,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Branch.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lf": [
                    "int",
                    "bool",
                    "float"
                ],
                "ri": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Branch.walk": {
            "name": "walk",
            "location": 33,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "Leaf.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        },
        "Leaf.walk": {
            "name": "walk",
            "location": 43,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "dict"
                ],
                "string": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Tree.from_string": {
            "name": "from_string",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "Tree._get_encoded_string": {
            "name": "_get_encoded_string",
            "location": 59,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[str]",
                "Union[int, List]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree.encode_dict_length": {
            "name": "encode_dict_length",
            "location": 64,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree.print_encode_dict": {
            "name": "print_encode_dict",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree._from_frequencies": {
            "name": "_from_frequencies",
            "location": 74,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "frequencies": [
                    "List[T]",
                    "List[\"LoadableRelation\"]",
                    "List[\"Syllable\"]",
                    "List[\"Word\"]"
                ]
            }
        },
        "Tree._construct_encode_dict": {
            "name": "_construct_encode_dict",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stepik_algorithms_1-master/src/module_4/huffman_decode.py": {
        "main": {
            "name": "main",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.from_codes": {
            "name": "from_codes",
            "location": 15,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "codes": [
                    "Mapping[str, Dict[str, Any]]",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Node.get_left": {
            "name": "get_left",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_right": {
            "name": "get_right",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.parse": {
            "name": "parse",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "Deque[str]",
                    "str"
                ],
                "code": [
                    "Deque[str]",
                    "str"
                ]
            }
        },
        "Node.decode": {
            "name": "decode",
            "location": 47,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/src/module_4/huffman_simple_solution.py": {
        "huffman_encode": {
            "name": "huffman_encode",
            "location": 6,
            "return": [
                "str",
                "dict",
                "int",
                "float",
                "Tuple[str, int]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int",
                    "Union[bytes, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stepik_algorithms_1-master/src/module_4/section_dot_coverage.py": {
        "section_dot_coverage": {
            "name": "section_dot_coverage",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sections": [
                    "List[Tuple[int, Any]]",
                    "List[dict]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "[[]]",
                    "float",
                    "Iterable[int]",
                    "List[float]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stepik_algorithms_1-master/src/module_6/binary_search.py": {
        "bin_find": {
            "name": "bin_find",
            "location": 5,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "item": [
                    "int",
                    "List[int]",
                    "Sequence[Sequence[Any]]"
                ],
                "array": [
                    "List[int]",
                    "int",
                    "list",
                    "List[OrderedDict]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stepik_algorithms_1-master/tests/module_2/test_big_fibonacci.py": {
        "test_fib_mod": {
            "name": "test_fib_mod",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "stepik_algorithms_1-master/tests/module_2/test_fibonacci.py": {
        "test_fibonacci": {
            "name": "test_fibonacci",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "expected": [
                    "int"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/tests/module_2/test_fibonacci_last.py": {
        "test_fib_digit": {
            "name": "test_fib_digit",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "float",
                    "int"
                ],
                "expected": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/tests/module_4/test_continuous_backpack.py": {
        "test_max_value": {
            "name": "test_max_value",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "capacity": [
                    "str",
                    "int"
                ],
                "things": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/tests/module_4/test_custom_heap.py": {
        "test_initial_example": {
            "name": "test_initial_example",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "commands": [
                    "str"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/tests/module_4/test_different_summands.py": {
        "test_different_summands": {
            "name": "test_different_summands",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ],
                "summands": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/tests/module_4/test_huffman_decode.py": {
        "codes": {
            "name": "codes",
            "location": 9,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "test_from_codes": {
            "name": "test_from_codes",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "codes": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_decode": {
            "name": "test_decode",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "codes": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/tests/module_4/test_huffman_encode.py": {
        "test_encoding": {
            "name": "test_encoding",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "string": [
                    "str",
                    "dict",
                    "int",
                    "list"
                ],
                "expected": [
                    "str",
                    "dict",
                    "int",
                    "list"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/tests/module_4/test_section_dot_coverage.py": {
        "test_section_dot_coverage": {
            "name": "test_section_dot_coverage",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "sections": [
                    "str",
                    "float"
                ],
                "dots": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "stepik_algorithms_1-master/tests/module_6/test_binary_search.py": {
        "odd_array": {
            "name": "odd_array",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "even_array": {
            "name": "even_array",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_bin_find_odd_array": {
            "name": "test_bin_find_odd_array",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "dict",
                    "Dict[str, Tuple[str, str]]"
                ],
                "odd_array": [
                    "dict",
                    "Dict[str, Tuple[str, str]]"
                ],
                "index": [
                    "dict",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "test_bin_find_even_array": {
            "name": "test_bin_find_even_array",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "dict",
                    "Dict[str, Tuple[str, str]]"
                ],
                "even_array": [
                    "dict",
                    "Dict[str, Tuple[str, str]]"
                ],
                "index": [
                    "dict",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        }
    }
}
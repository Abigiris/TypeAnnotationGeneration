{
    "stochastic-decoder-master/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 13,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 25,
            "return": [
                "str",
                "List[List[str]]",
                "bytes"
            ],
            "arguments": {}
        },
        "get_git_hash": {
            "name": "get_git_hash",
            "location": 31,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "temporarily_write_git_hash": {
            "name": "temporarily_write_git_hash",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "git_hash": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "get_requirements": {
            "name": "get_requirements",
            "location": 59,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "list",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "stochastic-decoder-master/contrib/__init__.py": {},
    "stochastic-decoder-master/contrib/sacrebleu/sacrebleu.py": {
        "tokenize_13a": {
            "name": "tokenize_13a",
            "location": 406,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "tokenize_v14_international": {
            "name": "tokenize_v14_international",
            "location": 451,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "tokenize_zh": {
            "name": "tokenize_zh",
            "location": 478,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "_read": {
            "name": "_read",
            "location": 603,
            "return": [],
            "arguments": {
                "file": [],
                "encoding": []
            }
        },
        "my_log": {
            "name": "my_log",
            "location": 613,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "build_signature": {
            "name": "build_signature",
            "location": 626,
            "return": [],
            "arguments": {
                "args": [],
                "numrefs": []
            }
        },
        "extract_ngrams": {
            "name": "extract_ngrams",
            "location": 661,
            "return": [],
            "arguments": {
                "line": [],
                "max_order": []
            }
        },
        "ref_stats": {
            "name": "ref_stats",
            "location": 679,
            "return": [],
            "arguments": {
                "output": [],
                "refs": []
            }
        },
        "process_to_text": {
            "name": "process_to_text",
            "location": 701,
            "return": [],
            "arguments": {
                "rawfile": [],
                "txtfile": []
            }
        },
        "print_test_set": {
            "name": "print_test_set",
            "location": 716,
            "return": [],
            "arguments": {
                "test_set": [],
                "langpair": [],
                "side": []
            }
        },
        "download_test_set": {
            "name": "download_test_set",
            "location": 730,
            "return": [],
            "arguments": {
                "test_set": [],
                "langpair": []
            }
        },
        "compute_bleu": {
            "name": "compute_bleu",
            "location": 787,
            "return": [],
            "arguments": {
                "correct": [],
                "total": [],
                "sys_len": [],
                "ref_len": [],
                "smooth": [],
                "smooth_floor": [],
                "use_effective_order": []
            }
        },
        "corpus_bleu": {
            "name": "corpus_bleu",
            "location": 835,
            "return": [],
            "arguments": {
                "sys_stream": [],
                "ref_streams": [],
                "smooth": [],
                "smooth_floor": [],
                "force": [],
                "lowercase": [],
                "tokenize": [],
                "use_effective_order": []
            }
        },
        "raw_corpus_bleu": {
            "name": "raw_corpus_bleu",
            "location": 896,
            "return": [],
            "arguments": {
                "sys_stream": [],
                "ref_streams": [],
                "smooth_floor": []
            }
        },
        "main": {
            "name": "main",
            "location": 907,
            "return": [],
            "arguments": {}
        },
        "UnicodeRegex._property_chars": {
            "name": "_property_chars",
            "location": 442,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "tokenize_zh.is_chinese_char": {
            "name": "is_chinese_char",
            "location": 508,
            "return": [],
            "arguments": {
                "uchar": []
            }
        }
    },
    "stochastic-decoder-master/contrib/sacrebleu/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/contrib/sacrebleu/__init__.py": {},
    "stochastic-decoder-master/docs/conf.py": {
        "get_version": {
            "name": "get_version",
            "location": 49,
            "return": [
                "str",
                "List[List[str]]",
                "bytes"
            ],
            "arguments": {}
        },
        "MockClass.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "MockClass.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockModule.__getattr__": {
            "name": "__getattr__",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/arguments.py": {
        "regular_file": {
            "name": "regular_file",
            "location": 27,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "int_greater_or_equal": {
            "name": "int_greater_or_equal",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "threshold": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "learning_schedule": {
            "name": "learning_schedule",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "simple_dict": {
            "name": "simple_dict",
            "location": 80,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "multiple_values": {
            "name": "multiple_values",
            "location": 113,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "num_values": [
                    "Optional[float]",
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Union[str, Callable]",
                    "Optional[Callable]"
                ],
                "greater_or_equal": [
                    "Optional[float]",
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Union[str, Callable]",
                    "Optional[Callable]"
                ],
                "data_type": [
                    "Optional[float]",
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Union[str, Callable]",
                    "Optional[Callable]"
                ]
            }
        },
        "file_or_stdin": {
            "name": "file_or_stdin",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "add_average_args": {
            "name": "add_average_args",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_extract_args": {
            "name": "add_extract_args",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_lexicon_args": {
            "name": "add_lexicon_args",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_logging_args": {
            "name": "add_logging_args",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Tuple[Optional[float], Optional[float]]",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_io_args": {
            "name": "add_io_args",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "Mapping[str, Any]",
                    "dict",
                    "Callable",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "add_device_args": {
            "name": "add_device_args",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_vocab_args": {
            "name": "add_vocab_args",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "model_params": [
                    "argparse.ArgumentParser",
                    "list",
                    "str"
                ]
            }
        },
        "add_model_parameters": {
            "name": "add_model_parameters",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "List[str]",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "add_training_args": {
            "name": "add_training_args",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_train_cli_args": {
            "name": "add_train_cli_args",
            "location": 868,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_translate_cli_args": {
            "name": "add_translate_cli_args",
            "location": 876,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict"
                ]
            }
        },
        "add_inference_args": {
            "name": "add_inference_args",
            "location": 882,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_evaluate_args": {
            "name": "add_evaluate_args",
            "location": 976,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_build_vocab_args": {
            "name": "add_build_vocab_args",
            "location": 1003,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction"
                ]
            }
        },
        "regular_file.check_regular_file": {
            "name": "check_regular_file",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "value_to_check": [
                    "str"
                ]
            }
        },
        "int_greater_or_equal.check_greater_equal": {
            "name": "check_greater_equal",
            "location": 52,
            "return": [
                "str",
                "bytes",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "value_to_check": [
                    "int",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "learning_schedule.parse": {
            "name": "parse",
            "location": 69,
            "return": [],
            "arguments": {
                "schedule_str": []
            }
        },
        "simple_dict.parse": {
            "name": "parse",
            "location": 89,
            "return": [],
            "arguments": {
                "dict_str": []
            }
        },
        "multiple_values.parse": {
            "name": "parse",
            "location": 126,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "file_or_stdin.parse": {
            "name": "parse",
            "location": 148,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "simple_dict.parse._parse": {
            "name": "_parse",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Tuple[str, str, str]",
                    "Union[int, str]",
                    "float",
                    "bool",
                    "Tuple[str]",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/average.py": {
        "average": {
            "name": "average",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "param_paths": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "find_checkpoints": {
            "name": "find_checkpoints",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "model_path": [
                    "str",
                    "int"
                ],
                "size": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, int]"
                ],
                "strategy": [
                    "int",
                    "bool",
                    "str"
                ],
                "metric": [
                    "str",
                    "int"
                ]
            }
        },
        "_strategy_best": {
            "name": "_strategy_best",
            "location": 113,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "points": [
                    "list",
                    "dict",
                    "int",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "List[Dict]"
                ],
                "size": [
                    "list",
                    "dict",
                    "int",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "List[Dict]"
                ],
                "maximize": [
                    "list",
                    "dict",
                    "int",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "List[Dict]"
                ]
            }
        },
        "_strategy_last": {
            "name": "_strategy_last",
            "location": 118,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "points": [
                    "int",
                    "str",
                    "List[List[int]]"
                ],
                "size": [
                    "int",
                    "float"
                ],
                "maximize": [
                    "list",
                    "bool",
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ]
            }
        },
        "_strategy_lifespan": {
            "name": "_strategy_lifespan",
            "location": 125,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "points": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int, int]"
                ],
                "size": [
                    "List[Tuple[Any, Any]]",
                    "List[tuple]"
                ],
                "maximize": [
                    "int",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/sockeye/callback.py": {
        "_decode_and_evaluate": {
            "name": "_decode_and_evaluate",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "checkpoint_decoder": [
                    "str",
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]",
                    "list",
                    "bytes"
                ],
                "checkpoint": [
                    "int",
                    "bool",
                    "str"
                ],
                "output_name": [
                    "str",
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]",
                    "list",
                    "bytes"
                ],
                "queue": [
                    "multiprocessing.Queue",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "write_tensorboard": {
            "name": "write_tensorboard",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "summary_writer": [
                    "int",
                    "bool",
                    "List[str]",
                    "float",
                    "Dict[str, str]"
                ],
                "metrics": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "checkpoint": [
                    "int",
                    "bool",
                    "List[str]",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "TrainingMonitor.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "bool",
                    "float"
                ],
                "output_folder": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "List[str]"
                ],
                "optimized_metric": [
                    "str",
                    "raiden.utils.PrivateKey",
                    "bool",
                    "Optional[str]"
                ],
                "use_tensorboard": [
                    "bool",
                    "int",
                    "tuple",
                    "List[str]"
                ],
                "cp_decoder": [
                    "Callable[[str, str], float]",
                    "int",
                    "str",
                    "dict",
                    "bool"
                ],
                "num_concurrent_decodes": [
                    "int",
                    "Sequence[int]",
                    "Tuple[int]"
                ]
            }
        },
        "TrainingMonitor.get_best_checkpoint": {
            "name": "get_best_checkpoint",
            "location": 91,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingMonitor.get_best_validation_score": {
            "name": "get_best_validation_score",
            "location": 97,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingMonitor._is_better": {
            "name": "_is_better",
            "location": 103,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bool"
                ]
            }
        },
        "TrainingMonitor.batch_end_callback": {
            "name": "batch_end_callback",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "bool",
                    "str",
                    "int"
                ],
                "nbatch": [
                    "bool",
                    "str",
                    "int"
                ],
                "metric": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TrainingMonitor.checkpoint_callback": {
            "name": "checkpoint_callback",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checkpoint": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ],
                "train_metric": [
                    "bool",
                    "int",
                    "Hashable",
                    "str",
                    "List[str]"
                ],
                "memory_data": [
                    "float",
                    "Optional[Sequence[Any]]",
                    "Optional[Iterable[str]]",
                    "Optional[dict]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "TrainingMonitor.eval_end_callback": {
            "name": "eval_end_callback",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "checkpoint": [
                    "str",
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ],
                "val_metric": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "TrainingMonitor._find_best_checkpoint": {
            "name": "_find_best_checkpoint",
            "location": 176,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingMonitor._start_decode_process": {
            "name": "_start_decode_process",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checkpoint": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "TrainingMonitor._empty_decoder_metric_queue": {
            "name": "_empty_decoder_metric_queue",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingMonitor._wait_for_decode_slot": {
            "name": "_wait_for_decode_slot",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "TrainingMonitor.stop_fit_callback": {
            "name": "stop_fit_callback",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingMonitor.save_state": {
            "name": "save_state",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "TrainingMonitor.load_state": {
            "name": "load_state",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/checkpoint_decoder.py": {
        "CheckpointDecoder.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "Optional[dict]",
                    "Optional[\"GraphLogger\"]",
                    "List['cirq.Circuit']",
                    "Tuple[int, int, int]"
                ],
                "inputs": [
                    "str",
                    "bool",
                    "Union[float, str]",
                    "int"
                ],
                "references": [
                    "str",
                    "bool",
                    "int"
                ],
                "model": [
                    "bool",
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "max_input_len": [
                    "int",
                    "type",
                    "bool",
                    "Optional[int]"
                ],
                "beam_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "bucket_width_source": [
                    "bool",
                    "float"
                ],
                "bucket_width_target": [
                    "bool"
                ],
                "length_penalty_alpha": [
                    "bool",
                    "Optional[dict]",
                    "Optional[\"GraphLogger\"]",
                    "List['cirq.Circuit']",
                    "Tuple[int, int, int]"
                ],
                "length_penalty_beta": [
                    "bool",
                    "Optional[dict]",
                    "Optional[\"GraphLogger\"]",
                    "List['cirq.Circuit']",
                    "Tuple[int, int, int]"
                ],
                "softmax_temperature": [
                    "bool",
                    "Optional[dict]",
                    "Optional[\"GraphLogger\"]",
                    "List['cirq.Circuit']",
                    "Tuple[int, int, int]"
                ],
                "max_output_length_num_stds": [
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "ensemble_mode": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "sample_size": [
                    "int",
                    "bytes",
                    "Sequence[Sequence[float]]",
                    "raiden.utils.AdditionalHash",
                    "List[str]"
                ],
                "random_seed": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "bool",
                    "raiden.utils.TokenAmount",
                    "float"
                ]
            }
        },
        "CheckpointDecoder.decode_and_evaluate": {
            "name": "decode_and_evaluate",
            "location": 109,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": [],
                "checkpoint": [
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "output_name": [
                    "str"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/chrf.py": {
        "extract_ngrams": {
            "name": "extract_ngrams",
            "location": 31,
            "return": [
                "int",
                "tuple",
                "Sequence['cirq.Qid']",
                "List[Tuple]",
                "list",
                "bool",
                "bytes"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "n": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "delete_whitespace": {
            "name": "delete_whitespace",
            "location": 38,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "get_sentence_statistics": {
            "name": "get_sentence_statistics",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "hypothesis": [
                    "Iterable[str]",
                    "int",
                    "Collection[int]",
                    "str",
                    "List[Dict]",
                    "Dict[int, Tuple[int, int]]"
                ],
                "reference": [
                    "Iterable[str]",
                    "int",
                    "Collection[int]",
                    "str",
                    "List[Dict]",
                    "Dict[int, Tuple[int, int]]"
                ],
                "order": [
                    "int"
                ],
                "trim_whitespaces": [
                    "Iterable[str]",
                    "int",
                    "Collection[int]",
                    "str",
                    "List[Dict]",
                    "Dict[int, Tuple[int, int]]"
                ]
            }
        },
        "get_corpus_statistics": {
            "name": "get_corpus_statistics",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]",
                    "int",
                    "Collection[int]",
                    "str",
                    "List[Dict]",
                    "Dict[int, Tuple[int, int]]"
                ],
                "references": [
                    "Iterable[str]",
                    "int",
                    "Collection[int]",
                    "str",
                    "List[Dict]",
                    "Dict[int, Tuple[int, int]]"
                ],
                "order": [
                    "int",
                    "bytes"
                ],
                "trim_whitespaces": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "_avg_precision_and_recall": {
            "name": "_avg_precision_and_recall",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "statistics": [
                    "float",
                    "str"
                ],
                "order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_chrf": {
            "name": "_chrf",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "avg_precision": [
                    "int",
                    "Callable",
                    "str"
                ],
                "avg_recall": [
                    "int",
                    "Callable",
                    "str"
                ],
                "beta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "corpus_chrf": {
            "name": "corpus_chrf",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]",
                    "int",
                    "bool",
                    "str",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Dict[str, int]]",
                    "numpy.ndarray"
                ],
                "references": [
                    "Iterable[str]",
                    "int",
                    "bool",
                    "str",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Dict[str, int]]",
                    "numpy.ndarray"
                ],
                "order": [
                    "Iterable[str]",
                    "int",
                    "bool",
                    "str",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Dict[str, int]]",
                    "numpy.ndarray"
                ],
                "trim_whitespaces": [
                    "Iterable[str]",
                    "int",
                    "bool",
                    "str",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Dict[str, int]]",
                    "numpy.ndarray"
                ],
                "beta": [
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        },
        "sentence_chrf": {
            "name": "sentence_chrf",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "hypothesis": [
                    "str",
                    "bool",
                    "int"
                ],
                "reference": [
                    "str",
                    "bool",
                    "int"
                ],
                "order": [
                    "str",
                    "bool",
                    "int"
                ],
                "trim_whitespaces": [
                    "str",
                    "bool",
                    "int"
                ],
                "beta": [
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/config.py": {
        "TaggedYamlObjectMetaclass.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Set[str]"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "bases": [
                    "str",
                    "Optional[str]",
                    "Tuple[type]",
                    "Dict[str, Any]"
                ],
                "kwds": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, object]",
                    "Mapping[str, str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__setattr__": {
            "name": "__setattr__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "dict"
                ]
            }
        },
        "Config.__setstate__": {
            "name": "__setstate__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Config.freeze": {
            "name": "freeze",
            "location": 56,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Config.__del_frozen": {
            "name": "__del_frozen",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__add_frozen": {
            "name": "__add_frozen",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.save": {
            "name": "save",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Config.load": {
            "name": "load",
            "location": 111,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        },
        "Config.copy": {
            "name": "copy",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stochastic-decoder-master/sockeye/constants.py": {},
    "stochastic-decoder-master/sockeye/convolution.py": {
        "ConvolutionConfig.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kernel_width": [
                    "int",
                    "Optional[float]"
                ],
                "num_hidden": [
                    "int",
                    "Optional[int]"
                ],
                "act_type": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[int]"
                ],
                "weight_normalization": [
                    "int",
                    "Iterable[Iterable]",
                    "Iterable",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConvolutionBlock.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Optional[Iterable[str]]",
                    "app.config.HealthCheckConfig",
                    "config.Config",
                    "backup.config.Config",
                    "Dict[str, Any]"
                ],
                "pad_type": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[..., None]"
                ],
                "prefix": [
                    "dict",
                    "str",
                    "Callable"
                ]
            }
        },
        "ConvolutionBlock._pre_activation_num_hidden": {
            "name": "_pre_activation_num_hidden",
            "location": 83,
            "return": [
                "config.Config",
                "Mapping[str, str]",
                "Config",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "neuromation.api.Config",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionBlock.__call__": {
            "name": "__call__",
            "location": 89,
            "return": [
                "str",
                "Union[str, Dict]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "MutableMapping",
                    "bytes"
                ],
                "data_length": [
                    "dict"
                ],
                "seq_len": [
                    "int"
                ]
            }
        },
        "ConvolutionBlock.step": {
            "name": "step",
            "location": 136,
            "return": [
                "int",
                "str",
                "bytes",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "ConvolutionBlock._post_convolution": {
            "name": "_post_convolution",
            "location": 164,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data_conv": [
                    "int",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/coverage.py": {
        "get_coverage": {
            "name": "get_coverage",
            "location": 49,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "int",
                "Mapping[str, str]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "str"
            ],
            "arguments": {
                "config": []
            }
        },
        "mask_coverage": {
            "name": "mask_coverage",
            "location": 307,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coverage": [],
                "source_length": [
                    "bool"
                ]
            }
        },
        "CoverageConfig.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int",
                    "str",
                    "Iterable[str]"
                ],
                "num_hidden": [
                    "int"
                ],
                "layer_normalization": [
                    "int",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Coverage.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Coverage.on": {
            "name": "on",
            "location": 76,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "CountCoverage.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountCoverage.on": {
            "name": "on",
            "location": 108,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "GRUCoverage.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage_num_hidden": [
                    "int"
                ],
                "layer_normalization": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "str",
                    "int"
                ]
            }
        },
        "GRUCoverage.on": {
            "name": "on",
            "location": 152,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "ActivationCoverage.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage_num_hidden": [
                    "int"
                ],
                "activation": [
                    "float",
                    "int",
                    "tuple",
                    "str",
                    "bool"
                ],
                "layer_normalization": [
                    "int",
                    "str",
                    "Union[List[int], int]"
                ]
            }
        },
        "ActivationCoverage.on": {
            "name": "on",
            "location": 232,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "Coverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "prev_hidden": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "attention_prob_scores": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "prev_coverage": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "CountCoverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 118,
            "return": [
                "float",
                "str",
                "recidiviz.common.constants.enum_overrides.EnumOverrides",
                "int",
                "bool"
            ],
            "arguments": {
                "prev_hidden": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "attention_prob_scores": [
                    "float",
                    "str",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "int",
                    "bool"
                ],
                "prev_coverage": [
                    "float",
                    "str",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "int",
                    "bool"
                ]
            }
        },
        "GRUCoverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 162,
            "return": [
                "bool",
                "str",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "prev_hidden": [
                    "bool",
                    "Tuple[int, int]"
                ],
                "attention_prob_scores": [
                    "int",
                    "str"
                ],
                "prev_coverage": [
                    "bool",
                    "bytearray",
                    "dict",
                    "raiden.utils.Address"
                ]
            }
        },
        "ActivationCoverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 250,
            "return": [
                "bool",
                "str",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "prev_hidden": [
                    "str"
                ],
                "attention_prob_scores": [
                    "str",
                    "int",
                    "float",
                    "Sequence['cirq.Qid']",
                    "bool"
                ],
                "prev_coverage": [
                    "int",
                    "str",
                    "List[Tuple[int, bytes]]"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/data_io.py": {
        "define_buckets": {
            "name": "define_buckets",
            "location": 36,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "max_seq_len": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ],
                "step": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "define_parallel_buckets": {
            "name": "define_parallel_buckets",
            "location": 52,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "list",
                "List[T]"
            ],
            "arguments": {
                "max_seq_len_source": [
                    "int",
                    "Callable"
                ],
                "max_seq_len_target": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "bool",
                    "Optional[Union[int, float]]"
                ],
                "bucket_width": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "Sequence[str]",
                    "bool"
                ],
                "length_ratio": [
                    "float",
                    "int"
                ]
            }
        },
        "get_bucket": {
            "name": "get_bucket",
            "location": 89,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "Optional[Sequence[str]]",
                "Union[None, List[str]]"
            ],
            "arguments": {
                "seq_len": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "int"
                ],
                "buckets": [
                    "str"
                ]
            }
        },
        "length_statistics": {
            "name": "length_statistics",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source_sentences": [
                    "int",
                    "bytes",
                    "Tuple[int]",
                    "Union[float, Sequence[float]]"
                ],
                "target_sentences": [
                    "int",
                    "bytes",
                    "Tuple[int]",
                    "Union[float, Sequence[float]]"
                ]
            }
        },
        "get_training_data_iters": {
            "name": "get_training_data_iters",
            "location": 118,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "github_labels_sync.config.Config"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "target": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "validation_source": [
                    "str",
                    "Optional[int]"
                ],
                "validation_target": [
                    "Tuple[int, int]",
                    "bool",
                    "Optional[str]",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]"
                ],
                "vocab_source": [
                    "Dict[str, Dict[str, Any]]",
                    "bool",
                    "str",
                    "Type[T]"
                ],
                "vocab_target": [
                    "str",
                    "bool",
                    "int"
                ],
                "vocab_source_path": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[tuple]",
                    "Dict[str, list]"
                ],
                "vocab_target_path": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[tuple]",
                    "Dict[str, list]"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "batch_by_words": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "batch_num_devices": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "fill_up": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "max_seq_len_source": [
                    "int",
                    "float"
                ],
                "max_seq_len_target": [
                    "int",
                    "float"
                ],
                "bucketing": [
                    "int",
                    "float"
                ],
                "bucket_width": [
                    "int",
                    "float"
                ],
                "sequence_limit": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Type[T]"
                ],
                "provide_annealing_data": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "smart_open": {
            "name": "smart_open",
            "location": 248,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ],
                "ftype": [
                    "str",
                    "int"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "read_content": {
            "name": "read_content",
            "location": 269,
            "return": [
                "typing.Iterator[typing.List[builtins.str]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "limit": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_tokens": {
            "name": "get_tokens",
            "location": 284,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "tokens2ids": {
            "name": "tokens2ids",
            "location": 296,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "tokens": [
                    "Iterable[str]",
                    "Dict[str, int]",
                    "dict",
                    "str",
                    "raiden.utils.Dict"
                ],
                "vocab": [
                    "Iterable[str]",
                    "Dict[str, int]",
                    "dict",
                    "str",
                    "raiden.utils.Dict"
                ]
            }
        },
        "get_default_bucket_key": {
            "name": "get_default_bucket_key",
            "location": 365,
            "return": [
                "str",
                "int",
                "Callable[[], str]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "buckets": [
                    "List[Tuple[int, int]]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "get_parallel_bucket": {
            "name": "get_parallel_bucket",
            "location": 375,
            "return": [
                "List[str]",
                "numpy.ndarray",
                "Iterable[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "buckets": [
                    "List[Tuple[int, int]]",
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "length_source": [
                    "int",
                    "str",
                    "Union[dict, list]"
                ],
                "length_target": [
                    "int",
                    "str",
                    "Union[dict, list]"
                ]
            }
        },
        "DataConfig.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "float",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "int"
                ],
                "target": [
                    "bool",
                    "Tuple[str]",
                    "int"
                ],
                "validation_source": [
                    "bool",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "validation_target": [
                    "bool",
                    "Tuple[str]",
                    "int"
                ],
                "vocab_source": [
                    "bool",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "vocab_target": [
                    "bool",
                    "Tuple[str]",
                    "int"
                ],
                "length_ratio_mean": [
                    "bool",
                    "Tuple[str]",
                    "int"
                ],
                "length_ratio_std": [
                    "bool",
                    "Tuple[str]",
                    "int"
                ],
                "max_observed_source_seq_len": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Optional[str]"
                ],
                "max_observed_target_seq_len": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "SentenceReader.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[cmk.utils.type_defs.HostName, str]",
                    "List[str]"
                ],
                "vocab": [
                    "int",
                    "Dict[str, int]",
                    "Callable",
                    "List[str]"
                ],
                "add_bos": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "List[str]"
                ],
                "limit": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "SentenceReader.__iter__": {
            "name": "__iter__",
            "location": 333,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceReader.__next__": {
            "name": "__next__",
            "location": 339,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceReader.is_done": {
            "name": "is_done",
            "location": 361,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Optional[Dict[str, Any]]",
                "Callable[..., None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelBucketSentenceIter.__init__": {
            "name": "__init__",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_sentences": [
                    "str",
                    "Optional[str]",
                    "Iterable",
                    "int"
                ],
                "target_sentences": [
                    "str",
                    "Optional[str]",
                    "Iterable",
                    "int"
                ],
                "buckets": [
                    "Dict[str, Any]",
                    "dict",
                    "List[str]",
                    "Dict[str, str]",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "numpy.ndarray",
                    "bytes"
                ],
                "batch_by_words": [
                    "bool",
                    "Tuple[float, float, float, float]",
                    "bytes",
                    "float",
                    "str",
                    "Optional[int]",
                    "torch.utils.data.DataLoader"
                ],
                "batch_num_devices": [
                    "float",
                    "bool",
                    "Container[int]",
                    "List[int]"
                ],
                "eos_id": [
                    "int",
                    "str"
                ],
                "pad_id": [
                    "int",
                    "str"
                ],
                "unk_id": [
                    "int",
                    "str"
                ],
                "bucket_batch_sizes": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "numpy.array",
                    "numpy.ndarray",
                    "bytes",
                    "bytearray"
                ],
                "fill_up": [
                    "bool",
                    "Tuple[float, float, float, float]",
                    "bytes",
                    "float",
                    "str",
                    "Optional[int]",
                    "torch.utils.data.DataLoader"
                ],
                "source_data_name": [
                    "str",
                    "float",
                    "bytes",
                    "int"
                ],
                "target_data_name": [
                    "List[str]",
                    "bytes",
                    "str",
                    "float",
                    "int",
                    "Type"
                ],
                "annealing_data_name": [
                    "List[str]",
                    "str",
                    "BinaryIO",
                    "Sequence[str]",
                    "ClassVar"
                ],
                "label_name": [
                    "str",
                    "bool",
                    "list",
                    "Optional[str]",
                    "List[Tuple[str, Any]]"
                ],
                "provide_annealing_data": [
                    "str",
                    "bytes",
                    "dict",
                    "bool"
                ],
                "dtype": [
                    "bool",
                    "Tuple[float, float, float, float]",
                    "bytes",
                    "float",
                    "str",
                    "Optional[int]",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "ParallelBucketSentenceIter._assign_to_buckets": {
            "name": "_assign_to_buckets",
            "location": 531,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source_sentences": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]"
                ],
                "target_sentences": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "ParallelBucketSentenceIter._populate_bucket_batch_sizes": {
            "name": "_populate_bucket_batch_sizes",
            "location": 608,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelBucketSentenceIter._convert_to_array": {
            "name": "_convert_to_array",
            "location": 659,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelBucketSentenceIter.reset": {
            "name": "reset",
            "location": 683,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelBucketSentenceIter._append_ndarrays": {
            "name": "_append_ndarrays",
            "location": 700,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "list",
                    "List[str]",
                    "str",
                    "Dict[str, numpy.ndarray]",
                    "Iterable[Any]"
                ],
                "shuffled_indices": [
                    "list",
                    "List[str]",
                    "str",
                    "Dict[str, numpy.ndarray]",
                    "Iterable[Any]"
                ]
            }
        },
        "ParallelBucketSentenceIter.iter_next": {
            "name": "iter_next",
            "location": 712,
            "return": [
                "int",
                "List[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelBucketSentenceIter.next": {
            "name": "next",
            "location": 718,
            "return": [
                "bytes",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelBucketSentenceIter.save_state": {
            "name": "save_state",
            "location": 747,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "ParallelBucketSentenceIter.load_state": {
            "name": "load_state",
            "location": 760,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/decoder.py": {
        "get_decoder": {
            "name": "get_decoder",
            "location": 38,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "Decoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": []
            }
        },
        "Decoder.decode_step": {
            "name": "decode_step",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [],
                "target_embed_prev": [],
                "source_encoded_max_length": []
            }
        },
        "Decoder.reset": {
            "name": "reset",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.init_states": {
            "name": "init_states",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": []
            }
        },
        "Decoder.state_variables": {
            "name": "state_variables",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.state_shapes": {
            "name": "state_shapes",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "source_encoded_max_length": [],
                "source_encoded_depth": []
            }
        },
        "Decoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "TransformerDecoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": []
            }
        },
        "TransformerDecoder._decode": {
            "name": "_decode",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "target_embed": [],
                "target_embed_max_length": []
            }
        },
        "TransformerDecoder.decode_step": {
            "name": "decode_step",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [],
                "target_embed_prev": [],
                "source_encoded_max_length": []
            }
        },
        "TransformerDecoder.reset": {
            "name": "reset",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.init_states": {
            "name": "init_states",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": []
            }
        },
        "TransformerDecoder.state_variables": {
            "name": "state_variables",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.state_shapes": {
            "name": "state_shapes",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "source_encoded_max_length": [],
                "source_encoded_depth": []
            }
        },
        "TransformerDecoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoderConfig.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "max_seq_len_source": [],
                "rnn_config": [],
                "attention_config": [],
                "hidden_dropout": [],
                "state_init": [],
                "context_gating": [],
                "layer_normalization": [],
                "attention_in_upper_layers": [],
                "latent_value_into_hidden_state": [],
                "latent_value_into_attention": [],
                "latent_value_initial_state_only": [],
                "variational_training": [],
                "stochastic_rnn": [],
                "stochastic_layer_size": [],
                "latent_value_into_output": [],
                "stochastic_rnn_prev_word_dependence": [],
                "latent_value_gating": []
            }
        },
        "RecurrentDecoder.__init__": {
            "name": "__init__",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "RecurrentDecoder._create_state_init_parameters": {
            "name": "_create_state_init_parameters",
            "location": 529,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [],
                "target_backward_encoding": [],
                "latent_value": []
            }
        },
        "RecurrentDecoder.decode_step": {
            "name": "decode_step",
            "location": 674,
            "return": [],
            "arguments": {
                "self": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [],
                "target_embed_prev": [],
                "source_encoded_max_length": [],
                "deterministic": []
            }
        },
        "RecurrentDecoder.reset": {
            "name": "reset",
            "location": 730,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 746,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.init_states": {
            "name": "init_states",
            "location": 752,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "latent_value": []
            }
        },
        "RecurrentDecoder.state_variables": {
            "name": "state_variables",
            "location": 776,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.state_shapes": {
            "name": "state_shapes",
            "location": 790,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "source_encoded_max_length": [],
                "source_encoded_depth": []
            }
        },
        "RecurrentDecoder.get_rnn_cells": {
            "name": "get_rnn_cells",
            "location": 825,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.get_initial_state": {
            "name": "get_initial_state",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_length": [],
                "latent_value": []
            }
        },
        "RecurrentDecoder._step": {
            "name": "_step",
            "location": 906,
            "return": [],
            "arguments": {
                "self": [],
                "word_vec_prev": [],
                "state": [],
                "attention_func": [],
                "attention_state": [],
                "word_vec_cur": [],
                "target_backward_encoding": [],
                "seq_idx": [],
                "deterministic": []
            }
        },
        "RecurrentDecoder._hidden_mlp": {
            "name": "_hidden_mlp",
            "location": 1015,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_concat": [],
                "seq_idx": []
            }
        },
        "RecurrentDecoder._context_gate": {
            "name": "_context_gate",
            "location": 1029,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_concat": [],
                "rnn_output": [],
                "attention_state": [],
                "seq_idx": []
            }
        },
        "ConvolutionalDecoderConfig.__init__": {
            "name": "__init__",
            "location": 1077,
            "return": [],
            "arguments": {
                "self": [],
                "cnn_config": [],
                "max_seq_len_target": [],
                "num_embed": [],
                "encoder_num_hidden": [],
                "num_layers": [],
                "positional_embedding_type": [],
                "hidden_dropout": []
            }
        },
        "ConvolutionalDecoder.__init__": {
            "name": "__init__",
            "location": 1114,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "ConvolutionalDecoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 1140,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": []
            }
        },
        "ConvolutionalDecoder._decode": {
            "name": "_decode",
            "location": 1171,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": []
            }
        },
        "ConvolutionalDecoder.decode_step": {
            "name": "decode_step",
            "location": 1217,
            "return": [],
            "arguments": {
                "self": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [],
                "target_embed_prev": [],
                "source_encoded_max_length": []
            }
        },
        "ConvolutionalDecoder.reset": {
            "name": "reset",
            "location": 1305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalDecoder.init_states": {
            "name": "init_states",
            "location": 1314,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": []
            }
        },
        "ConvolutionalDecoder.state_variables": {
            "name": "state_variables",
            "location": 1341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalDecoder.state_shapes": {
            "name": "state_shapes",
            "location": 1353,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "source_encoded_max_length": [],
                "source_encoded_depth": []
            }
        },
        "ConvolutionalDecoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 1377,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stochastic-decoder-master/sockeye/embeddings.py": {
        "compute_sims": {
            "name": "compute_sims",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Callable"
                ],
                "normalize": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nearest_k": {
            "name": "nearest_k",
            "location": 54,
            "return": [
                "str",
                "int",
                "Dict[str, numpy.ndarray]"
            ],
            "arguments": {
                "similarity_matrix": [
                    "int",
                    "float",
                    "str"
                ],
                "query_word_id": [
                    "int",
                    "float",
                    "str"
                ],
                "k": [
                    "int",
                    "float",
                    "str"
                ],
                "gamma": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/sockeye/encoder.py": {
        "get_encoder": {
            "name": "get_encoder",
            "location": 36,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "pyramid.config.Configurator",
                    "config.Config",
                    "entity_embeddings.Config"
                ],
                "prefix": [
                    "Config",
                    "pyramid.config.Configurator",
                    "Optional[str]",
                    "opentrons.config.robot_configs.robot_config",
                    "str"
                ]
            }
        },
        "get_recurrent_encoder": {
            "name": "get_recurrent_encoder",
            "location": 92,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "config": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Optional[pyramid.config.Configurator]",
                    "Config",
                    "entity_embeddings.config.Config"
                ],
                "prefix": [
                    "cmk.base.config.HostConfig",
                    "List[int]",
                    "Dict[str, Any]",
                    "purplship.providers.ups.utils.Settings"
                ]
            }
        },
        "get_convolutional_encoder": {
            "name": "get_convolutional_encoder",
            "location": 143,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "List[dict]",
                    "isorsettings.Config"
                ]
            }
        },
        "get_transformer_encoder": {
            "name": "get_transformer_encoder",
            "location": 163,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "config.Config"
                ]
            }
        },
        "get_positional_embedding": {
            "name": "get_positional_embedding",
            "location": 512,
            "return": [
                "Optional[str]",
                "str",
                "Callable[[], T]"
            ],
            "arguments": {
                "positional_embedding_type": [
                    "str",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "num_embed": [
                    "bool",
                    "int",
                    "str",
                    "raiden.utils.TokenAmount"
                ],
                "max_seq_len": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "str",
                    "raiden.utils.PaymentWithFeeAmount",
                    "bool"
                ],
                "fixed_pos_embed_scale_up_input": [
                    "bool",
                    "int",
                    "str",
                    "raiden.utils.TokenAmount"
                ],
                "fixed_pos_embed_scale_down_positions": [
                    "bool",
                    "int",
                    "str",
                    "raiden.utils.TokenAmount"
                ],
                "prefix": [
                    "bool",
                    "int",
                    "str",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "RecurrentEncoderConfig.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_config": [
                    "Callable",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ],
                "conv_config": [
                    "Callable",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ],
                "reverse_input": [
                    "str",
                    "dict",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "unidirectional": [
                    "str",
                    "dict",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "ConvolutionalEncoderConfig.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int",
                    "Optional[int]"
                ],
                "max_seq_len_source": [
                    "int",
                    "str",
                    "List[str]",
                    "list",
                    "bool"
                ],
                "cnn_config": [
                    "bool",
                    "int",
                    "Mapping[str, Any]",
                    "mode.utils.times.Seconds",
                    "str"
                ],
                "num_layers": [
                    "int",
                    "Optional[int]"
                ],
                "positional_embedding_type": [
                    "List[str]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Encoder.encode": {
            "name": "encode",
            "location": 193,
            "return": [
                "typing.Tuple[mxnet.sym.Symbol, mxnet.sym.Symbol, builtins.int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "dict",
                    "AnyStr",
                    "bool",
                    "str"
                ],
                "data_length": [
                    "int",
                    "dict",
                    "AnyStr",
                    "bool",
                    "str"
                ],
                "seq_len": [
                    "int",
                    "dict",
                    "AnyStr",
                    "bool",
                    "str"
                ]
            }
        },
        "Encoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 207,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Encoder.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 213,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "seq_len": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Encoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 219,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchMajor2TimeMajor.encode": {
            "name": "encode",
            "location": 231,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str"
                ],
                "data_length": [
                    "int",
                    "str"
                ],
                "seq_len": [
                    "int",
                    "str"
                ]
            }
        },
        "ReverseSequence.encode": {
            "name": "encode",
            "location": 252,
            "return": [
                "raiden.utils.signer.Signer",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "List[str]"
                ],
                "data_length": [
                    "dict",
                    "List[str]"
                ],
                "seq_len": [
                    "int",
                    "str"
                ]
            }
        },
        "EmbeddingConfig.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int",
                    "Tuple[int, int, int]"
                ],
                "num_embed": [
                    "int",
                    "Optional[int]"
                ],
                "dropout": [
                    "int",
                    "Union[str, float]",
                    "Iterable[Iterable]"
                ]
            }
        },
        "Embedding.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "_pytesconfig.Config",
                    "pyramid.config.Configurator"
                ],
                "prefix": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "embed_weight": [
                    "tracim.config.CFG",
                    "snapcrafinternal.project_loader._config.Config",
                    "utils.config_generator.Configurations"
                ]
            }
        },
        "Embedding.encode": {
            "name": "encode",
            "location": 292,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ],
                "data_length": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "seq_len": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Embedding.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 314,
            "return": [
                "Dict[str, Any]",
                "str",
                "raiden.constants.Environment",
                "Optional[str]",
                "Optional[type]",
                "neuromation.api.Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionalEncoder.encode_positions": {
            "name": "encode_positions",
            "location": 323,
            "return": [
                "mxnet.sym.Symbol"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ]
            }
        },
        "AddSinCosPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int",
                    "bool"
                ],
                "prefix": [
                    "int",
                    "Union[str, float]",
                    "float"
                ],
                "scale_up_input": [
                    "int",
                    "Union[str, float]",
                    "float"
                ],
                "scale_down_positions": [
                    "int",
                    "Union[str, float]",
                    "float"
                ]
            }
        },
        "AddSinCosPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 357,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "List[bytes]",
                    "str",
                    "bytes"
                ],
                "data_length": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "seq_len": [
                    "int",
                    "Union[Sequence[str], str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "AddSinCosPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 382,
            "return": [
                "Iterable[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "int"
                ],
                "data": [
                    "int",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "AddSinCosPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 414,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddLearnedPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int",
                    "Optional[int]"
                ],
                "max_seq_len": [
                    "float",
                    "int",
                    "str"
                ],
                "prefix": [
                    "bool",
                    "Callable",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "Optional[List[Any]]"
                ],
                "embed_weight": [
                    "Optional[str]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "AddLearnedPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 442,
            "return": [
                "Iterable[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "str",
                    "defaultdict"
                ],
                "data_length": [
                    "dict",
                    "bytes"
                ],
                "seq_len": [
                    "str",
                    "List[str]",
                    "Dict[str, Dict[Any, int]]",
                    "bool"
                ]
            }
        },
        "AddLearnedPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 464,
            "return": [
                "Iterable[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "raiden.utils.Address"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "AddLearnedPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 481,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddLearnedPositionalEmbeddings.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 484,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoOpPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "NoOpPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 497,
            "return": [
                "raiden.utils.signer.Signer",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str"
                ],
                "data_length": [
                    "int",
                    "str"
                ],
                "seq_len": [
                    "int",
                    "str"
                ]
            }
        },
        "NoOpPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 503,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ]
            }
        },
        "NoOpPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 508,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncoderSequence.__init__": {
            "name": "__init__",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoders": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EncoderSequence.encode": {
            "name": "encode",
            "location": 543,
            "return": [
                "raiden.utils.signer.Signer",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict"
                ],
                "data_length": [
                    "int",
                    "bytes",
                    "dict"
                ],
                "seq_len": [
                    "int",
                    "bytes",
                    "dict"
                ]
            }
        },
        "EncoderSequence.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 559,
            "return": [
                "str",
                "int",
                "Dict[str, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncoderSequence.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 570,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "seq_len": [
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "EncoderSequence.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 578,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.__init__": {
            "name": "__init__",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_config": [
                    "logging.Logger",
                    "Optional[Dict]",
                    "str"
                ],
                "prefix": [
                    "Optional[Dict]",
                    "jumeaux.domain.config.vo.Config",
                    "Dict[str, Any]",
                    "dict"
                ],
                "layout": [
                    "dict",
                    "str",
                    "list"
                ]
            }
        },
        "RecurrentEncoder.encode": {
            "name": "encode",
            "location": 604,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ],
                "data_length": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "seq_len": [
                    "int",
                    "Tuple[int, int, bytearray]"
                ]
            }
        },
        "RecurrentEncoder.get_rnn_cells": {
            "name": "get_rnn_cells",
            "location": 620,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 626,
            "return": [
                "bool",
                "str",
                "neuromation.api.Config",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BiDirectionalRNNEncoder.__init__": {
            "name": "__init__",
            "location": 644,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_config": [
                    "backup.config.Config",
                    "config.Config",
                    "_pytesconfig.Config"
                ],
                "prefix": [
                    "config.ConfigFile",
                    "config.Config",
                    "Callable",
                    "pyramid.config.Configurator"
                ],
                "layout": [
                    "config.ConfigFile",
                    "config.Config",
                    "Callable",
                    "pyramid.config.Configurator"
                ],
                "encoder_class": [
                    "config.ConfigFile",
                    "config.Config",
                    "Callable",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "BiDirectionalRNNEncoder.encode": {
            "name": "encode",
            "location": 666,
            "return": [
                "raiden.utils.signer.Signer",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "int",
                    "bytes",
                    "bytearray"
                ],
                "data_length": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "seq_len": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "BiDirectionalRNNEncoder._encode": {
            "name": "_encode",
            "location": 685,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "defaultdict"
                ],
                "data_length": [
                    "int",
                    "defaultdict"
                ],
                "seq_len": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "BiDirectionalRNNEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 704,
            "return": [
                "bool",
                "str",
                "neuromation.api.Config",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BiDirectionalRNNEncoder.get_rnn_cells": {
            "name": "get_rnn_cells",
            "location": 710,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalEncoder.__init__": {
            "name": "__init__",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "_pytesconfig.Config"
                ],
                "prefix": [
                    "dict",
                    "Dict[str, Any]",
                    "logging.Logger",
                    "square.dtypes.Config",
                    "Config"
                ]
            }
        },
        "ConvolutionalEncoder.encode": {
            "name": "encode",
            "location": 740,
            "return": [
                "raiden.utils.signer.Signer",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "data_length": [
                    "bool",
                    "bytes",
                    "str",
                    "List[str]",
                    "dict",
                    "type",
                    "Match[str]"
                ],
                "seq_len": [
                    "bool",
                    "bytes",
                    "str",
                    "List[str]",
                    "dict",
                    "type",
                    "Match[str]"
                ]
            }
        },
        "ConvolutionalEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 765,
            "return": [
                "str",
                "Dict[str, Any]",
                "raiden.constants.Environment",
                "Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "prefix": [
                    "dict",
                    "isorsettings.Config",
                    "trinity.config.ChainConfig",
                    "OrderedDict",
                    "pyramid.config.Configurator",
                    "Optional[pyramid.config.Configurator]"
                ]
            }
        },
        "TransformerEncoder.encode": {
            "name": "encode",
            "location": 792,
            "return": [
                "raiden.utils.signer.Signer",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "bool"
                ],
                "data_length": [
                    "str",
                    "bytes",
                    "MutableMapping",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "seq_len": [
                    "str",
                    "bytes",
                    "MutableMapping",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TransformerEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 814,
            "return": [
                "Dict[str, Any]",
                "str",
                "raiden.constants.Environment",
                "Config",
                "_vendor.traitlets.config.Config",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalEmbeddingConfig.__init__": {
            "name": "__init__",
            "location": 835,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int",
                    "Optional[int]",
                    "Tuple[int]"
                ],
                "output_dim": [
                    "int",
                    "Optional[int]",
                    "Optional[utils.types.Vec3D]"
                ],
                "max_filter_width": [
                    "int",
                    "Tuple[int]",
                    "float"
                ],
                "num_filters": [
                    "int"
                ],
                "pool_stride": [
                    "int",
                    "str",
                    "tuple",
                    "bytes"
                ],
                "num_highway_layers": [
                    "int",
                    "Optional[int]"
                ],
                "dropout": [
                    "int",
                    "str",
                    "tuple",
                    "bytes"
                ],
                "add_positional_encoding": [
                    "float",
                    "Dict[str, Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "ConvolutionalEmbeddingEncoder.__init__": {
            "name": "__init__",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "purplship.providers.purolator.utils.Settings",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "prefix": [
                    "int",
                    "logging.LogRecord"
                ]
            }
        },
        "ConvolutionalEmbeddingEncoder.encode": {
            "name": "encode",
            "location": 902,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "data_length": [
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "bool",
                    "Dict[str, Set[str]]",
                    "List[int]"
                ],
                "seq_len": [
                    "dict",
                    "float",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "ConvolutionalEmbeddingEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1017,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalEmbeddingEncoder.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 1023,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "seq_len": [
                    "str",
                    "bool",
                    "pricemonitor.config.Coin"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/evaluate.py": {
        "raw_corpus_bleu": {
            "name": "raw_corpus_bleu",
            "location": 33,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "int",
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]",
                    "Optional[float]",
                    "str",
                    "int",
                    "bytes",
                    "Tuple[str]"
                ],
                "references": [
                    "Iterable[str]",
                    "Optional[float]",
                    "str",
                    "int",
                    "bytes",
                    "Tuple[str]"
                ],
                "offset": [
                    "Iterable[str]",
                    "Optional[float]",
                    "str",
                    "int",
                    "bytes",
                    "Tuple[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/sockeye/extract_parameters.py": {
        "_extract": {
            "name": "_extract",
            "location": 32,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "param_names": [
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "List[Optional[str]]",
                    "Dict[str, Any]"
                ],
                "params": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "list"
                ],
                "ext_params": [
                    "Dict[str, numpy.ndarray]",
                    "Optional[Callable]",
                    "bool",
                    "Mapping",
                    "type"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 52,
            "return": [
                "str",
                "Iterator[str]",
                "Set[str]"
            ],
            "arguments": {
                "param_path": [
                    "str",
                    "bool",
                    "int"
                ],
                "param_names": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ],
                "list_all": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/sockeye/inference.py": {
        "load_models": {
            "name": "load_models",
            "location": 390,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "context": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "Optional[float]"
                ],
                "max_input_len": [
                    "Optional[int]",
                    "int",
                    "raiden.utils.ChannelID",
                    "Optional[List[str]]",
                    "raiden.utils.BlockExpiration"
                ],
                "beam_size": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "Optional[float]"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "Optional[float]"
                ],
                "model_folders": [
                    "Optional[str]",
                    "Optional[int]",
                    "List[Optional[float]]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ],
                "checkpoints": [
                    "Optional[bool]",
                    "Optional[int]",
                    "list"
                ],
                "softmax_temperature": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "Optional[float]"
                ],
                "max_output_length_num_stds": [
                    "Optional[int]",
                    "int",
                    "raiden.utils.ChannelID",
                    "Optional[List[str]]",
                    "raiden.utils.BlockExpiration"
                ],
                "decoder_return_logit_inputs": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "Optional[float]"
                ],
                "cache_output_layer_w_b": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "Optional[float]"
                ],
                "deterministic_decoding": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "get_max_input_output_length": {
            "name": "get_max_input_output_length",
            "location": 451,
            "return": [
                "float",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "models": [
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[Callable[[], None]]",
                    "str",
                    "Optional[int]"
                ],
                "num_stds": [
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[Callable[[], None]]",
                    "str",
                    "Optional[int]"
                ],
                "max_input_len": [
                    "Optional[numpy.ndarray]",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "_concat_translations": {
            "name": "_concat_translations",
            "location": 599,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "translations": [
                    "int",
                    "List[int]",
                    "List['Node']"
                ],
                "start_id": [
                    "int"
                ],
                "stop_ids": [
                    "str",
                    "int"
                ],
                "length_penalty": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "InferenceModel.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_folder": [
                    "str",
                    "Exception",
                    "bool"
                ],
                "context": [
                    "Sequence[Sequence[float]]",
                    "bool",
                    "List[cmk.gui.plugins.views.utils.Cell]",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "str"
                ],
                "beam_size": [
                    "int",
                    "str",
                    "Union[None, int]"
                ],
                "batch_size": [
                    "Optional[int]",
                    "str",
                    "int",
                    "bool"
                ],
                "checkpoint": [
                    "str",
                    "Optional[Union[int, str]]",
                    "int",
                    "bool",
                    "Sequence[str]",
                    "Union[float, str]"
                ],
                "softmax_temperature": [
                    "Sequence[Sequence[float]]",
                    "bool",
                    "List[cmk.gui.plugins.views.utils.Cell]",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "str"
                ],
                "max_output_length_num_stds": [
                    "int",
                    "raiden.utils.BlockExpiration"
                ],
                "decoder_return_logit_inputs": [
                    "Optional[Collection[int]]",
                    "set",
                    "Iterable[Tuple[Any, Any]]"
                ],
                "cache_output_layer_w_b": [
                    "bytes",
                    "float",
                    "tuple",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Address",
                    "raiden.utils.MonitoringServiceAddress"
                ],
                "deterministic_decoding": [
                    "Sequence[Sequence[float]]",
                    "bool",
                    "List[cmk.gui.plugins.views.utils.Cell]",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "str"
                ]
            }
        },
        "InferenceModel.initialize": {
            "name": "initialize",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_input_length": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "float",
                    "bytes"
                ],
                "get_max_output_length_function": [
                    "bool",
                    "raiden.utils.TokenAmount",
                    "bytes",
                    "str"
                ]
            }
        },
        "InferenceModel._get_encoder_module": {
            "name": "_get_encoder_module",
            "location": 156,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel._get_decoder_module": {
            "name": "_get_decoder_module",
            "location": 214,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel._get_encoder_data_shapes": {
            "name": "_get_encoder_data_shapes",
            "location": 285,
            "return": [
                "float",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "bucket_key": [
                    "int",
                    "bytes",
                    "dict",
                    "Dict[str, int]",
                    "Union[bytes, bytearray]",
                    "str"
                ]
            }
        },
        "InferenceModel._get_decoder_data_shapes": {
            "name": "_get_decoder_data_shapes",
            "location": 296,
            "return": [
                "int",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket_key": [
                    "bytes"
                ]
            }
        },
        "InferenceModel.run_encoder": {
            "name": "run_encoder",
            "location": 313,
            "return": [
                "model.Snapshot",
                "List[int]",
                "numpy.random.RandomState",
                "Iterable[T]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "dataworkspaces.utils.lineage_utils.ResourceRef",
                    "IO[bytes]",
                    "rflx.model.Message",
                    "int",
                    "memoryview"
                ],
                "source_max_length": [
                    "dataworkspaces.utils.lineage_utils.ResourceRef",
                    "IO[bytes]",
                    "rflx.model.Message",
                    "int",
                    "memoryview"
                ]
            }
        },
        "InferenceModel.run_decoder": {
            "name": "run_decoder",
            "location": 337,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "sequences": [
                    "bytes",
                    "str",
                    "IO[bytes]"
                ],
                "bucket_key": [
                    "bytes",
                    "str",
                    "IO[bytes]"
                ],
                "model_state": [
                    "bytes",
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "InferenceModel.training_max_seq_len_source": {
            "name": "training_max_seq_len_source",
            "location": 356,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.training_max_seq_len_target": {
            "name": "training_max_seq_len_target",
            "location": 364,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.max_supported_seq_len_source": {
            "name": "max_supported_seq_len_source",
            "location": 372,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.max_supported_seq_len_target": {
            "name": "max_supported_seq_len_target",
            "location": 377,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.length_ratio_mean": {
            "name": "length_ratio_mean",
            "location": 382,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.length_ratio_std": {
            "name": "length_ratio_std",
            "location": 386,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_max_input_output_length.get_max_output_length": {
            "name": "get_max_output_length",
            "location": 503,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "input_length": [
                    "int",
                    "str"
                ]
            }
        },
        "ModelState.__init__": {
            "name": "__init__",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "str",
                    "numpy.array",
                    "State[np.ndarray]"
                ]
            }
        },
        "ModelState.sort_state": {
            "name": "sort_state",
            "location": 555,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "best_hyp_indices": [
                    "int",
                    "Dict[str, str]",
                    "T"
                ]
            }
        },
        "LengthPenalty.__init__": {
            "name": "__init__",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alpha": [
                    "int",
                    "bool",
                    "float"
                ],
                "beta": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LengthPenalty.__call__": {
            "name": "__call__",
            "location": 579,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "lengths": [
                    "int",
                    "str"
                ]
            }
        },
        "Translator.__init__": {
            "name": "__init__",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "float",
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "bool"
                ],
                "ensemble_mode": [
                    "int",
                    "bool",
                    "str",
                    "Optional[float]"
                ],
                "bucket_source_width": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "bucket_target_width": [
                    "float",
                    "int",
                    "bytes",
                    "str",
                    "utils.types.Vec3D"
                ],
                "length_penalty": [
                    "int",
                    "bool",
                    "List['cirq.Circuit']",
                    "Callable"
                ],
                "models": [
                    "int",
                    "str",
                    "bool"
                ],
                "vocab_source": [
                    "bool",
                    "List[Tuple[int, int]]",
                    "Dict[int, int]",
                    "Dict[str, Any]",
                    "str"
                ],
                "vocab_target": [
                    "int"
                ],
                "restrict_lexicon": [
                    "int",
                    "bool",
                    "List['cirq.Circuit']",
                    "Callable"
                ]
            }
        },
        "Translator._get_interpolation_func": {
            "name": "_get_interpolation_func",
            "location": 705,
            "return": [
                "Callable",
                "bool",
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "ensemble_mode": [
                    "bool",
                    "bytes",
                    "Callable[[], None]",
                    "List[List[dict]]",
                    "str"
                ]
            }
        },
        "Translator._linear_interpolation": {
            "name": "_linear_interpolation",
            "location": 714,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "predictions": [
                    "float",
                    "logging.LogRecord",
                    "str",
                    "numpy.ndarray",
                    "Callable"
                ]
            }
        },
        "Translator._log_linear_interpolation": {
            "name": "_log_linear_interpolation",
            "location": 719,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "predictions": [
                    "dict",
                    "int"
                ]
            }
        },
        "Translator.make_input": {
            "name": "make_input",
            "location": 728,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "sentence_id": [
                    "int",
                    "str"
                ],
                "sentence": [
                    "str",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Translator.translate": {
            "name": "translate",
            "location": 739,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "trans_inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Translator._get_inference_input": {
            "name": "_get_inference_input",
            "location": 802,
            "return": [
                "str",
                "dict",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "sequences": [
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "raiden.utils.Dict"
                ]
            }
        },
        "Translator._make_result": {
            "name": "_make_result",
            "location": 819,
            "return": [
                "str",
                "int",
                "Union[int, float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "trans_input": [
                    "str",
                    "Optional[List[str]]",
                    "Callable[..., bool]"
                ],
                "translation": [
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Translator._concat_translations": {
            "name": "_concat_translations",
            "location": 846,
            "return": [
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "translations": [
                    "List[str]",
                    "int",
                    "Optional[float]",
                    "float",
                    "dict"
                ]
            }
        },
        "Translator.translate_nd": {
            "name": "translate_nd",
            "location": 855,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "source_length": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Translator._encode": {
            "name": "_encode",
            "location": 868,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "dict",
                    "int"
                ],
                "source_length": [
                    "dict",
                    "int"
                ]
            }
        },
        "Translator._decode_step": {
            "name": "_decode_step",
            "location": 878,
            "return": [
                "str",
                "int",
                "Optional[bool]",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "sequences": [
                    "int",
                    "bool",
                    "str"
                ],
                "t": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "raiden.utils.Address.Hex"
                ],
                "source_length": [
                    "str",
                    "int"
                ],
                "max_output_length": [
                    "int",
                    "bool"
                ],
                "states": [
                    "int",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "Optional[Sequence[str]]"
                ],
                "models_output_layer_w": [
                    "int",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "Optional[Sequence[str]]"
                ],
                "models_output_layer_b": [
                    "int",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "Translator._combine_predictions": {
            "name": "_combine_predictions",
            "location": 925,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "probs": [
                    "float",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "List[Tuple[str, float, int, float]]"
                ],
                "attention_probs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Translator._beam_search": {
            "name": "_beam_search",
            "location": 945,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "gluonts.model.common.Tensor"
                ],
                "source_length": [
                    "str",
                    "dict",
                    "T",
                    "Sequence[Sequence[str]]"
                ]
            }
        },
        "Translator._get_best_from_beam": {
            "name": "_get_best_from_beam",
            "location": 1096,
            "return": [
                "List[str]",
                "dict",
                "set",
                "List[Dict[str, Any]]",
                "rflx.model.Refinement",
                "str"
            ],
            "arguments": {
                "self": [],
                "sequences": [
                    "int",
                    "List[numpy.ndarray]",
                    "Iterable[str]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "Union[bytearray, memoryview]"
                ],
                "attention_lists": [
                    "Union[bytearray, memoryview]",
                    "Iterable[str]",
                    "Union[str, List[str]]",
                    "str",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "List[List[Any]]"
                ],
                "accumulated_scores": [
                    "Iterable[str]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "Union[str, List[str]]",
                    "List[List[Any]]",
                    "Callable",
                    "str",
                    "numpy.ndarray",
                    "Optional[List[Any]]"
                ],
                "lengths": [
                    "int",
                    "Optional[Union[numpy.ndarray, numpy.void]]",
                    "bool",
                    "list"
                ]
            }
        },
        "InferenceModel._get_encoder_module.sym_gen": {
            "name": "sym_gen",
            "location": 165,
            "return": [],
            "arguments": {
                "source_seq_len": []
            }
        },
        "InferenceModel._get_decoder_module.sym_gen": {
            "name": "sym_gen",
            "location": 225,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "bucket_key": [
                    "str",
                    "Tuple[str, dict]",
                    "hackathon.utils.utils.DataMessage",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/initializer.py": {
        "get_initializer": {
            "name": "get_initializer",
            "location": 25,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "default_init_type": [
                    "str",
                    "Sequence[str]"
                ],
                "default_init_scale": [
                    "str",
                    "float",
                    "int",
                    "Mapping",
                    "Dict[str, Any]"
                ],
                "default_init_xavier_factor_type": [
                    "str",
                    "float",
                    "int",
                    "Mapping",
                    "Dict[str, Any]"
                ],
                "embed_init_type": [
                    "str",
                    "Sequence[str]"
                ],
                "embed_init_sigma": [
                    "float",
                    "str",
                    "list",
                    "Tuple[int, int]",
                    "numpy.ndarray",
                    "int",
                    "Optional[bool]"
                ],
                "rnn_init_type": [
                    "str",
                    "int"
                ]
            }
        },
        "StackedOrthogonalInit.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "bool",
                    "int",
                    "List[float]",
                    "List[str]"
                ],
                "rand_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "StackedOrthogonalInit._init_weight": {
            "name": "_init_weight",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sym_name": [
                    "str",
                    "Union[int, float]",
                    "int"
                ],
                "arr": [
                    "str",
                    "Mapping[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/kl_divergence.py": {
        "get_kl_divergence": {
            "name": "get_kl_divergence",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "distribution_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "diagonal_gaussian_kl": {
            "name": "diagonal_gaussian_kl",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mean_q": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ],
                "std_q": [
                    "int",
                    "Union[str, Dict[str, Any]]",
                    "bytes",
                    "float"
                ],
                "mean_p": [
                    "float",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "std_p": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "float"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/layers.py": {
        "split_heads": {
            "name": "split_heads",
            "location": 174,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "tuple",
                    "Sequence[int]"
                ],
                "length": [
                    "int",
                    "T",
                    "numpy.ndarray"
                ],
                "heads": [
                    "int"
                ]
            }
        },
        "combine_heads": {
            "name": "combine_heads",
            "location": 191,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ],
                "length": [
                    "int",
                    "numpy.ndarray",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ],
                "heads": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "broadcast_to_heads": {
            "name": "broadcast_to_heads",
            "location": 208,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "float",
                    "numpy.array"
                ],
                "heads": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        },
        "dot_attention": {
            "name": "dot_attention",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "queries": [
                    "Callable",
                    "Sequence[str]"
                ],
                "keys": [
                    "Callable",
                    "Sequence[str]"
                ],
                "values": [
                    "str",
                    "SupportsFloat",
                    "Type",
                    "Set[str]",
                    "int"
                ],
                "lengths": [
                    "Optional[object]",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "dropout": [
                    "Callable",
                    "str"
                ],
                "bias": [
                    "Optional[int]",
                    "Union[str, dict]"
                ]
            }
        },
        "LayerNormalization.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "str",
                    "int",
                    "bool"
                ],
                "prefix": [
                    "bool",
                    "float",
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "scale": [
                    "int",
                    "numpy.ndarray"
                ],
                "shift": [
                    "int",
                    "numpy.ndarray"
                ],
                "scale_init": [
                    "int",
                    "numpy.ndarray"
                ],
                "shift_init": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "LayerNormalization.moments": {
            "name": "moments",
            "location": 56,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "inputs": [
                    "IO",
                    "str"
                ]
            }
        },
        "LayerNormalization.normalize": {
            "name": "normalize",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "eps": [
                    "float",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "WeightNormalization.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "float",
                    "int",
                    "tuple",
                    "str",
                    "bool"
                ],
                "num_hidden": [
                    "float",
                    "int",
                    "str"
                ],
                "ndim": [
                    "str",
                    "List[Tuple[int, int]]",
                    "numpy.ndarray",
                    "List[str]",
                    "Optional[bool]"
                ],
                "prefix": [
                    "float",
                    "Sequence[Sequence[Any]]",
                    "Dict[str, Any]",
                    "List[numpy.ndarray]",
                    "Tuple[str, str]",
                    "bool"
                ]
            }
        },
        "WeightNormalization.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "Optional[float]"
                ],
                "scale": [
                    "Optional[float]"
                ]
            }
        },
        "OutputLayer.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int",
                    "str",
                    "bool"
                ],
                "vocab_size": [
                    "int",
                    "float"
                ],
                "weight": [
                    "int",
                    "constants.HttpVersion",
                    "list",
                    "bool"
                ],
                "weight_normalization": [
                    "int",
                    "constants.HttpVersion",
                    "list",
                    "bool"
                ],
                "prefix": [
                    "int",
                    "float",
                    "List[bool]",
                    "str"
                ]
            }
        },
        "OutputLayer.__call__": {
            "name": "__call__",
            "location": 144,
            "return": [
                "numpy.ndarray",
                "BinaryIO",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "hidden": [
                    "int",
                    "Union[int, slice]"
                ],
                "weight": [
                    "Iterable[str]",
                    "bool"
                ],
                "bias": [
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "MultiHeadAttentionBase.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "Dict[str, object]",
                    "Optional[str]",
                    "list"
                ],
                "depth_att": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "heads": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "depth_out": [
                    "bool",
                    "str",
                    "Union[float, Tuple[float, float]]",
                    "List[utils.CWLObjectType]",
                    "Callable"
                ],
                "dropout": [
                    "bool",
                    "str",
                    "Union[float, Tuple[float, float]]",
                    "List[utils.CWLObjectType]",
                    "Callable"
                ]
            }
        },
        "MultiHeadAttentionBase._attend": {
            "name": "_attend",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "dict",
                    "Union[int, slice]",
                    "str"
                ],
                "keys": [
                    "str"
                ],
                "values": [
                    "Optional[object]",
                    "Type",
                    "dict",
                    "KT"
                ],
                "queries_max_length": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memory_max_length": [
                    "str",
                    "list"
                ],
                "lengths": [
                    "int",
                    "str",
                    "Callable[[str], int]",
                    "Optional[int]",
                    "Union[str, dict]"
                ],
                "bias": []
            }
        },
        "MultiHeadSelfAttention.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "float"
                ],
                "depth_att": [
                    "int",
                    "float"
                ],
                "heads": [
                    "int",
                    "float"
                ],
                "depth_out": [
                    "int",
                    "float"
                ],
                "dropout": [
                    "int",
                    "float"
                ]
            }
        },
        "MultiHeadSelfAttention.__call__": {
            "name": "__call__",
            "location": 354,
            "return": [
                "bool",
                "Optional[Dict[str, str]]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Dict[str, numpy.ndarray]",
                    "float",
                    "numpy.ndarray"
                ],
                "max_length": [
                    "T"
                ],
                "lengths": [
                    "T"
                ],
                "bias": [
                    "Sequence[int]",
                    "float"
                ]
            }
        },
        "MultiHeadAttention.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "float"
                ],
                "depth_att": [
                    "int",
                    "float"
                ],
                "heads": [
                    "int",
                    "float"
                ],
                "depth_out": [
                    "int",
                    "float"
                ],
                "dropout": [
                    "int",
                    "float"
                ]
            }
        },
        "MultiHeadAttention.__call__": {
            "name": "__call__",
            "location": 412,
            "return": [
                "bool",
                "Optional[Dict[str, str]]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "Callable[[Any], None]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.Item",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "float"
                ],
                "queries_max_length": [
                    "Type[types.C]",
                    "bytes"
                ],
                "memory": [
                    "numpy.ndarray",
                    "numpy.array",
                    "str"
                ],
                "memory_lengths": [
                    "Type[types.C]",
                    "bytes"
                ],
                "memory_max_length": [
                    "Type[types.C]",
                    "bytes"
                ]
            }
        },
        "PositionalEncodings.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "slice"
                ],
                "depth": [
                    "slice"
                ]
            }
        },
        "PositionalEncodings.get_encodings": {
            "name": "get_encodings",
            "location": 473,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "length": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float",
                    "slice",
                    "bool"
                ],
                "depth": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PositionalEncodings.forward": {
            "name": "forward",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_train": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "req": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "in_data": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "out_data": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "aux": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "PositionalEncodings.backward": {
            "name": "backward",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "out_grad": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "in_data": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "out_data": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "in_grad": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "aux": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "PositionalEncodingsProp.__init__": {
            "name": "__init__",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ],
                "depth": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "PositionalEncodingsProp.list_arguments": {
            "name": "list_arguments",
            "location": 505,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionalEncodingsProp.list_outputs": {
            "name": "list_outputs",
            "location": 508,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionalEncodingsProp.infer_shape": {
            "name": "infer_shape",
            "location": 511,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "in_shape": [
                    "bool",
                    "int",
                    "Callable[[], bool]",
                    "List[str]"
                ]
            }
        },
        "PositionalEncodingsProp.infer_type": {
            "name": "infer_type",
            "location": 514,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "self": [],
                "in_type": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "PositionalEncodingsProp.create_operator": {
            "name": "create_operator",
            "location": 517,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        }
    },
    "stochastic-decoder-master/sockeye/lexicon.py": {
        "initialize_lexicon": {
            "name": "initialize_lexicon",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cmdline_arg": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.SectionName",
                    "List[str]"
                ],
                "vocab_source": [
                    "Dict[str, int]",
                    "List[str]",
                    "int",
                    "Tuple[int]"
                ],
                "vocab_target": [
                    "Dict[str, int]",
                    "List[str]",
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "lexicon_iterator": {
            "name": "lexicon_iterator",
            "location": 117,
            "return": [
                "typing.Generator[typing.Tuple[builtins.int, builtins.int, builtins.float], None, None]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "vocab_source": [
                    "str",
                    "Union[int, float]",
                    "dict",
                    "bytes",
                    "Dict[str, Dict[str, str]]"
                ],
                "vocab_target": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "read_lexicon": {
            "name": "read_lexicon",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "List[List[str]]",
                    "List[str]"
                ],
                "vocab_source": [
                    "bytes",
                    "str",
                    "int"
                ],
                "vocab_target": [
                    "str",
                    "List[int]",
                    "Tuple[int, str]",
                    "Optional[bytes]",
                    "Dict[str, List[int]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Lexicon.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_vocab_size": [
                    "int",
                    "bytes"
                ],
                "target_vocab_size": [
                    "int",
                    "Dict[str, str]",
                    "bool",
                    "Callable[[str], int]",
                    "Optional[Any]",
                    "str"
                ],
                "learn": [
                    "bool",
                    "str"
                ]
            }
        },
        "Lexicon.lookup": {
            "name": "lookup",
            "location": 59,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Callable",
                    "str",
                    "IO"
                ]
            }
        },
        "Lexicon.calculate_lex_bias": {
            "name": "calculate_lex_bias",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source_lexicon": [
                    "str"
                ],
                "attention_prob_score": [
                    "raiden.utils.Secret",
                    "str"
                ]
            }
        },
        "LexiconInitializer.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lexicon": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LexiconInitializer._init_default": {
            "name": "_init_default",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sym_name": [
                    "str"
                ],
                "arr": [
                    "bool",
                    "dict",
                    "str",
                    "type",
                    "Dict[str, Any]"
                ]
            }
        },
        "TopKLexicon.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_source": [
                    "Dict[str, Dict]",
                    "Tuple[str, float]",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.Item"
                ],
                "vocab_target": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "TopKLexicon.create": {
            "name": "create",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "k": [
                    "List[str]",
                    "list",
                    "Union[bytes, str]",
                    "Set[str]",
                    "str",
                    "List[Tuple[Any, str]]",
                    "\"Sections\""
                ]
            }
        },
        "TopKLexicon.save": {
            "name": "save",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TopKLexicon.load": {
            "name": "load",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TopKLexicon.get_trg_ids": {
            "name": "get_trg_ids",
            "location": 255,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "src_ids": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/log.py": {
        "_is_python34": {
            "name": "_is_python34",
            "location": 100,
            "return": [
                "str",
                "Union[str, int]",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "setup_main_logger": {
            "name": "setup_main_logger",
            "location": 105,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "file_logging": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "console": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "log_sockeye_version": {
            "name": "log_sockeye_version",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "logger": [
                    "str",
                    "int",
                    "logging.Logger",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "log_mxnet_version": {
            "name": "log_mxnet_version",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "logger": [
                    "str",
                    "int",
                    "logging.Logger",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "setup_main_logger.exception_hook": {
            "name": "exception_hook",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "exc_type": [
                    "Callable",
                    "Type[Any]"
                ],
                "exc_value": [
                    "Type[BaseException]",
                    "str",
                    "Union[Callable, str]",
                    "Optional[str]",
                    "Optional[Type[BaseException]]"
                ],
                "exc_traceback": [
                    "Callable",
                    "Type[Any]"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/loss.py": {
        "label_mask": {
            "name": "label_mask",
            "location": 31,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "Optional[str]",
                    "Tuple[int]"
                ],
                "label": [
                    "Optional[object]",
                    "str",
                    "Type[C]"
                ],
                "ignore_symbol": [
                    "Optional[object]",
                    "str",
                    "Type[C]"
                ]
            }
        },
        "get_loss": {
            "name": "get_loss",
            "location": 58,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "loss_config": [
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "LossConfig.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "vocab_size": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional['InstrumentBase']"
                ],
                "normalization_type": [
                    "bool",
                    "str",
                    "type",
                    "int"
                ],
                "label_smoothing": [
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "Loss.get_loss": {
            "name": "get_loss",
            "location": 79,
            "return": [
                "typing.List[mxnet.sym.Symbol]"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "List[dict]"
                ],
                "labels": [
                    "List[dict]"
                ]
            }
        },
        "Loss.create_metric": {
            "name": "create_metric",
            "location": 90,
            "return": [
                "mxnet.metric.EvalMetric"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossEntropyLoss.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss_config": [
                    "pyramid.config.Configurator",
                    "Mapping[str, int]",
                    "cmk.base.config.ConfigCache",
                    "dict"
                ]
            }
        },
        "CrossEntropyLoss.get_loss": {
            "name": "get_loss",
            "location": 109,
            "return": [
                "str",
                "int",
                "Callable",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "int"
                ],
                "labels": [
                    "int"
                ]
            }
        },
        "CrossEntropyLoss.create_metric": {
            "name": "create_metric",
            "location": 131,
            "return": [
                "bool",
                "List[str]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KLLoss.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "typing.List[mxnet.sym.Symbol]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "bool"
                ],
                "distribution_name": [
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "float",
                    "dict",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "KLLoss.get_loss": {
            "name": "get_loss",
            "location": 147,
            "return": [
                "bool",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "params_q": [
                    "str",
                    "int",
                    "bytes",
                    "Union[str, List[str]]"
                ],
                "params_p": [
                    "str",
                    "int",
                    "bytes",
                    "Union[str, List[str]]"
                ],
                "labels": [
                    "Optional[Sequence[Any]]",
                    "float",
                    "Optional[\"Outcome\"]"
                ],
                "annealing_factor": [
                    "Optional[str]",
                    "Optional[List[int]]",
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "CrossEntropyMetric.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss_config": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "output_names": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "label_names": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "CrossEntropyMetric.cross_entropy": {
            "name": "cross_entropy",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "bool",
                    "str"
                ],
                "label": [
                    "bool",
                    "str"
                ],
                "ignore": [
                    "float",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "CrossEntropyMetric.cross_entropy_smoothed": {
            "name": "cross_entropy_smoothed",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "float",
                    "Sequence[str]"
                ],
                "label": [
                    "int",
                    "List[int]",
                    "bool",
                    "str"
                ],
                "ignore": [
                    "str"
                ]
            }
        },
        "CrossEntropyMetric.update": {
            "name": "update",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ],
                "preds": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "CrossEntropyNegElboMetric.update": {
            "name": "update",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "eth.abc.DatabaseAPI",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "preds": [
                    "bytes",
                    "bool",
                    "dict",
                    "eth.abc.BlockHeaderAPI"
                ]
            }
        },
        "CrossEntropyElboMetric.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss_config": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "name": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "output_names": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "label_names": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "annealing_factor": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Mapping[str, Any]"
                ],
                "annealing_increase": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Mapping[str, Any]"
                ],
                "kl_terms": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "CrossEntropyElboMetric.update": {
            "name": "update",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ],
                "preds": [
                    "discord.abc.GuildChannel",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "KlMetric.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Callable[[Any], bool]"
                ],
                "output_names": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Callable[[Any], bool]"
                ],
                "label_names": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "Callable[[Any], bool]"
                ],
                "annealing_factor": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "annealing_increase": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "kl_terms": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "KlMetric.update": {
            "name": "update",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Sequence[str]",
                    "Tuple[int, int]",
                    "routemaster.config.StateMachine",
                    "Dict[str, int]",
                    "str"
                ],
                "preds": [
                    "discord.abc.GuildChannel",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/lr_scheduler.py": {
        "get_lr_scheduler": {
            "name": "get_lr_scheduler",
            "location": 251,
            "return": [
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "scheduler_type": [
                    "str",
                    "dict"
                ],
                "updates_per_checkpoint": [
                    "str"
                ],
                "learning_rate_half_life": [
                    "str"
                ],
                "learning_rate_reduce_factor": [
                    "float",
                    "str",
                    "bool"
                ],
                "learning_rate_reduce_num_not_improved": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "learning_rate_schedule": [
                    "str",
                    "bool",
                    "bytes",
                    "float",
                    "raiden.utils.Address"
                ],
                "learning_rate_warmup": [
                    "str"
                ]
            }
        },
        "LearningRateScheduler.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warmup": [
                    "bool",
                    "Dict['cirq.Qid', float]",
                    "float",
                    "str"
                ]
            }
        },
        "LearningRateScheduler.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_updates": [
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "LearningRateScheduler._warmup": {
            "name": "_warmup",
            "location": 35,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "num_updates": [
                    "int",
                    "float"
                ]
            }
        },
        "AdaptiveLearningRateScheduler.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LearningRateSchedulerFixedStep.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "int",
                    "Sequence[str]",
                    "str"
                ],
                "updates_per_checkpoint": [
                    "Optional[int]"
                ]
            }
        },
        "LearningRateSchedulerFixedStep.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LearningRateSchedulerFixedStep._update_rate": {
            "name": "_update_rate",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "step": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "LearningRateSchedulerFixedStep.__call__": {
            "name": "__call__",
            "location": 113,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "LearningRateSchedulerFixedStep.parse_schedule_str": {
            "name": "parse_schedule_str",
            "location": 118,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "schedule_str": [
                    "str"
                ]
            }
        },
        "LearningRateSchedulerInvSqrtT.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updates_per_checkpoint": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ],
                "half_life": [
                    "int",
                    "str"
                ],
                "warmup": [
                    "bool",
                    "int",
                    "Mapping",
                    "str"
                ]
            }
        },
        "LearningRateSchedulerInvSqrtT.__call__": {
            "name": "__call__",
            "location": 152,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "num_updates": [
                    "int",
                    "List[str]",
                    "List[float]",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "LearningRateSchedulerInvT.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updates_per_checkpoint": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ],
                "half_life": [
                    "int",
                    "str"
                ],
                "warmup": [
                    "bool",
                    "int",
                    "Mapping",
                    "str"
                ]
            }
        },
        "LearningRateSchedulerInvT.__call__": {
            "name": "__call__",
            "location": 182,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "num_updates": [
                    "int"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reduce_factor": [
                    "bool",
                    "Optional[int]",
                    "list",
                    "str"
                ],
                "reduce_num_not_improved": [
                    "str",
                    "int",
                    "logging.Logger",
                    "bool",
                    "Optional[bool]"
                ],
                "warmup": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.__call__": {
            "name": "__call__",
            "location": 237,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.__repr__": {
            "name": "__repr__",
            "location": 246,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stochastic-decoder-master/sockeye/model.py": {
        "ModelConfig.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "str"
                ],
                "max_seq_len_source": [
                    "int",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str",
                    "Tuple[str]"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "vocab_source_size": [
                    "bytes",
                    "List[int]",
                    "List[List[int]]",
                    "int",
                    "Union[Dict, List]"
                ],
                "vocab_target_size": [
                    "float",
                    "int",
                    "bytes",
                    "List[List[int]]",
                    "bool"
                ],
                "config_embed_source": [
                    "dict",
                    "Dict[str, str]",
                    "bool"
                ],
                "config_embed_target": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "bool"
                ],
                "config_encoder": [
                    "bool",
                    "dict",
                    "str",
                    "MutableMapping[str, str]",
                    "Dict[Any, int]"
                ],
                "config_decoder": [
                    "bool",
                    "dict",
                    "str",
                    "MutableMapping[str, str]",
                    "Dict[Any, int]"
                ],
                "config_loss": [
                    "bool",
                    "dict",
                    "str",
                    "MutableMapping[str, str]",
                    "Dict[Any, int]"
                ],
                "weight_tying": [
                    "int",
                    "dict",
                    "bool"
                ],
                "weight_tying_type": [
                    "Optional[str]",
                    "str",
                    "Type[types.C]",
                    "Type[Any]",
                    "dict",
                    "Optional[List[str]]"
                ],
                "weight_normalization": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Dict]",
                    "dict"
                ],
                "config_latent_encoder_sampler": [
                    "str"
                ],
                "config_inference_sampler": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "bool"
                ],
                "latent_variable_average_states": [
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "bool",
                    "nucypher.config.characters.BobConfiguration"
                ],
                "annealing": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Dict]",
                    "dict"
                ]
            }
        },
        "SockeyeModel.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "bytes",
                    "Optional[List[str]]",
                    "config.Config"
                ]
            }
        },
        "SockeyeModel.save_config": {
            "name": "save_config",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "SockeyeModel.load_config": {
            "name": "load_config",
            "location": 139,
            "return": [
                "Optional[dict]",
                "bool",
                "str",
                "neuromation.api.Config",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "SockeyeModel.save_params_to_file": {
            "name": "save_params_to_file",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "BinaryIO",
                    "bytes"
                ]
            }
        },
        "SockeyeModel.load_params_from_file": {
            "name": "load_params_from_file",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "SockeyeModel.save_version": {
            "name": "save_version",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SockeyeModel._get_embed_weights": {
            "name": "_get_embed_weights",
            "location": 184,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel._build_model_components": {
            "name": "_build_model_components",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stochastic-decoder-master/sockeye/optimizers.py": {
        "SockeyeOptimizer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_optimized_metric": [
                    "int"
                ]
            }
        },
        "SockeyeOptimizer.pre_update_batch": {
            "name": "pre_update_batch",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_state": [
                    "T"
                ]
            }
        },
        "SockeyeOptimizer.pre_update_checkpoint": {
            "name": "pre_update_checkpoint",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checkpoint_state": [
                    "T"
                ]
            }
        },
        "SockeyeOptimizer.update": {
            "name": "update",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[Dict[str, str]]",
                    "list",
                    "Optional[str]",
                    "int"
                ],
                "weight": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[Dict[str, str]]",
                    "list",
                    "Optional[str]",
                    "int"
                ],
                "grad": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[Dict[str, str]]",
                    "list",
                    "Optional[str]",
                    "int"
                ],
                "state": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[Dict[str, str]]",
                    "list",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "EveState.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "int",
                    "str"
                ]
            }
        },
        "Eve.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ],
                "beta1": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "beta2": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "beta3_batch": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "beta3_checkpoint": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "epsilon": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "k_lo": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "k_hi": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "schedule_decay": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "use_batch_objective": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "use_checkpoint_objective": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "use_nesterov_momentum": [
                    "bool"
                ]
            }
        },
        "Eve.create_state": {
            "name": "create_state",
            "location": 140,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "raiden.utils.Address"
                ],
                "weight": [
                    "bool",
                    "dict",
                    "raiden.utils.SecreHash",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "Eve.update": {
            "name": "update",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[Dict[str, str]]",
                    "list",
                    "Optional[str]",
                    "int"
                ],
                "weight": [
                    "int",
                    "str",
                    "Optional[str]",
                    "TextIO",
                    "set",
                    "bool"
                ],
                "grad": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "List[str]"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "Eve.update.compute_d": {
            "name": "compute_d",
            "location": 160,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "t": [
                    "int",
                    "float"
                ],
                "f": [
                    "int",
                    "list",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "Optional[Union[int, slice]]"
                ],
                "f_hat_prev": [
                    "int",
                    "list",
                    "Optional[Union[int, slice]]"
                ],
                "d_prev": [
                    "bool",
                    "List[int]",
                    "Optional[int]",
                    "List[str]",
                    "int"
                ],
                "beta": [
                    "bool",
                    "List[int]",
                    "Optional[int]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/output_handler.py": {
        "get_output_handler": {
            "name": "get_output_handler",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "output_type": [
                    "str",
                    "int"
                ],
                "output_fname": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "float"
                ],
                "sure_align_threshold": [
                    "float",
                    "str",
                    "int",
                    "Union[str, Tuple[str, ...]]",
                    "cmk.utils.type_defs.HostName",
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "OutputHandler.handle": {
            "name": "handle",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "StringOutputHandler.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StringOutputHandler.handle": {
            "name": "handle",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "str",
                    "Dict[str, Any]",
                    "List[int]",
                    "float"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "StringWithScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StringWithScoreOutputHandler.handle": {
            "name": "handle",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "qutebrowser.utils.utils.FakeIOStream"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "StringWithAlignmentsOutputHandler.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "threshold": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StringWithAlignmentsOutputHandler.handle": {
            "name": "handle",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "StringWithAlignmentMatrixOutputHandler.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "StringWithAlignmentMatrixOutputHandler.handle": {
            "name": "handle",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "BenchmarkOutputHandler.handle": {
            "name": "handle",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_walltime": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ]
            }
        },
        "AlignPlotHandler.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plot_prefix": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "AlignPlotHandler.handle": {
            "name": "handle",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "AlignTextHandler.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AlignTextHandler.handle": {
            "name": "handle",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/reparametrisation_samplers.py": {
        "get_reparametrisation_sampler": {
            "name": "get_reparametrisation_sampler",
            "location": 51,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "config.ConfigStorage",
                    "dict",
                    "nucypher.config.node.CharacterConfiguration"
                ],
                "prefix": [
                    "str",
                    "app.config.HealthCheckConfig",
                    "Optional[Iterable[str]]",
                    "app.config.MQConfig",
                    "azafea.config.Config"
                ]
            }
        },
        "ReparametrisationSamplerConfig.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distribution_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "latent_dim": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ReparametrisationSampler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "latent_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "prefix": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ReparametrisationSampler.sample": {
            "name": "sample",
            "location": 39,
            "return": [
                "typing.Tuple[mxnet.sym.Symbol, typing.List[mxnet.sym.Symbol]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "deterministic": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "DiagonalGaussianSampler.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_dim": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "prefix": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "DiagonalGaussianSampler.sample": {
            "name": "sample",
            "location": 89,
            "return": [
                "bool",
                "Callable[[KT, VT], bool]",
                "Dict[int, Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "List[str]"
                ],
                "deterministic": [
                    "float",
                    "bool"
                ]
            }
        },
        "DiagonalGaussianSampler.sample_with_residual_mean": {
            "name": "sample_with_residual_mean",
            "location": 105,
            "return": [
                "bool",
                "Callable[[KT, VT], bool]",
                "Dict[int, Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "bytes"
                ],
                "origin": [
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "bool"
                ],
                "deterministic": [
                    "float",
                    "bool"
                ]
            }
        },
        "DiagonalGaussianSampler._sample_value": {
            "name": "_sample_value",
            "location": 125,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "scale": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DiagonalGaussianSampler._compute_mean": {
            "name": "_compute_mean",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Mapping[str, object]",
                    "Dict[str, Any]"
                ],
                "origin": [
                    "Optional[bool]",
                    "Optional[bytes]",
                    "Optional[List[int]]",
                    "Optional[int]",
                    "Union[Dict[str, Any], None]",
                    "Union[Dict[str, str], None]",
                    "Optional[str]"
                ]
            }
        },
        "DiagonalGaussianSampler._compute_scale": {
            "name": "_compute_scale",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Mapping[str, object]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FullRankGaussianSampler.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_dim": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "prefix": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "FullRankGaussianSampler._compute_scale": {
            "name": "_compute_scale",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "FullRankGaussianSampler._sample_value": {
            "name": "_sample_value",
            "location": 210,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "str"
                ],
                "scale": [
                    "str"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/rnn.py": {
        "get_stacked_rnn": {
            "name": "get_stacked_rnn",
            "location": 111,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "pyramid.config.Configurator",
                    "_pytesconfig.Config"
                ],
                "prefix": [
                    "str",
                    "core.common.Config",
                    "Dict[str, str]",
                    "azafea.config.Config",
                    "model.Config",
                    "utils.config_generator.Configurations",
                    "config.Config"
                ],
                "parallel_inputs": [
                    "Dict[str, Any]",
                    "config.Config",
                    "Mapping[str, Any]",
                    "str",
                    "int"
                ],
                "layers": [
                    "int",
                    "Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "RNNConfig.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell_type": [
                    "int",
                    "bool",
                    "str"
                ],
                "num_hidden": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "num_layers": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "dropout_inputs": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "str",
                    "Callable",
                    "Optional[bool]"
                ],
                "dropout_states": [
                    "float",
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "dropout_recurrent": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "str",
                    "Callable",
                    "Optional[bool]"
                ],
                "residual": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "str",
                    "Callable",
                    "Optional[bool]"
                ],
                "first_residual_layer": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "str",
                    "Callable",
                    "Optional[bool]"
                ],
                "forget_bias": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "str",
                    "Callable",
                    "Optional[bool]"
                ]
            }
        },
        "SequentialRNNCellParallelInput.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [
                "callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Sequence[str]",
                    "dict"
                ],
                "parallel_inputs": [
                    "Sequence[str]",
                    "dict"
                ],
                "states": [
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "ParallelInputCell.__call__": {
            "name": "__call__",
            "location": 91,
            "return": [
                "List[float]",
                "str",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Sequence[str]",
                    "dict"
                ],
                "parallel_inputs": [
                    "Sequence[str]",
                    "dict"
                ],
                "states": [
                    "int"
                ]
            }
        },
        "ResidualCellParallelInput.__call__": {
            "name": "__call__",
            "location": 104,
            "return": [
                "List[float]",
                "str",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "parallel_inputs": [
                    "Sequence[str]",
                    "dict"
                ],
                "states": [
                    "int"
                ]
            }
        },
        "LayerNormLSTMCell.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int",
                    "str"
                ],
                "prefix": [
                    "int",
                    "str"
                ],
                "params": [
                    "int",
                    "str"
                ],
                "forget_bias": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "norm_scale": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "norm_shift": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "LayerNormLSTMCell.__call__": {
            "name": "__call__",
            "location": 209,
            "return": [
                "utils.Node",
                "trezor.utils.Writer",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ],
                "states": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "LayerNormPerGateLSTMCell.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "prefix": [
                    "int",
                    "str",
                    "float"
                ],
                "params": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "forget_bias": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "norm_scale": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "norm_shift": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "LayerNormPerGateLSTMCell.__call__": {
            "name": "__call__",
            "location": 275,
            "return": [
                "utils.Node",
                "trezor.utils.Writer",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ],
                "states": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "RecurrentDropoutLSTMCell.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "prefix": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "params": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "forget_bias": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "dropout": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RecurrentDropoutLSTMCell.__call__": {
            "name": "__call__",
            "location": 321,
            "return": [
                "utils.Node",
                "trezor.utils.Writer",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ],
                "states": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "LayerNormGRUCell.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int",
                    "str"
                ],
                "prefix": [
                    "int",
                    "str"
                ],
                "params": [
                    "int",
                    "str"
                ],
                "norm_scale": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "norm_shift": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "LayerNormGRUCell.__call__": {
            "name": "__call__",
            "location": 384,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ],
                "states": [
                    "float",
                    "Sequence",
                    "int"
                ]
            }
        },
        "LayerNormPerGateGRUCell.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int",
                    "str",
                    "float",
                    "cmk.utils.piggyback.PiggybackTimeSettings"
                ],
                "prefix": [
                    "int",
                    "str"
                ],
                "params": [
                    "int",
                    "str",
                    "float",
                    "cmk.utils.piggyback.PiggybackTimeSettings"
                ],
                "norm_scale": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "Tuple['cirq.Qid']"
                ],
                "norm_shift": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "LayerNormPerGateGRUCell.__call__": {
            "name": "__call__",
            "location": 453,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ],
                "states": [
                    "float",
                    "Sequence",
                    "int"
                ]
            }
        },
        "VariationalDropoutCell.__init__": {
            "name": "__init__",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_cell": [
                    "list",
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[bytes]"
                ],
                "dropout_inputs": [
                    "int",
                    "str",
                    "bool",
                    "Optional[dict]",
                    "List['cirq.Circuit']"
                ],
                "dropout_states": [
                    "int",
                    "str",
                    "raiden.utils.Secret",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.SecretHash",
                    "raiden.utils.PaymentID",
                    "raiden.utils.BlockTimeout",
                    "raiden.utils.TargetAddress"
                ]
            }
        },
        "VariationalDropoutCell.__call__": {
            "name": "__call__",
            "location": 508,
            "return": [
                "List[float]",
                "str",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "torch.nn.utils.rnn.PackedSequence",
                    "bytes",
                    "int",
                    "dict"
                ],
                "states": []
            }
        },
        "VariationalDropoutCell.reset": {
            "name": "reset",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stochastic-decoder-master/sockeye/rnn_attention.py": {
        "get_attention": {
            "name": "get_attention",
            "location": 64,
            "return": [],
            "arguments": {
                "config": [],
                "max_seq_len": []
            }
        },
        "mask_attention_scores": {
            "name": "mask_attention_scores",
            "location": 693,
            "return": [],
            "arguments": {
                "logits": [],
                "length": []
            }
        },
        "get_context_and_attention_probs": {
            "name": "get_context_and_attention_probs",
            "location": 712,
            "return": [],
            "arguments": {
                "values": [],
                "length": [],
                "logits": []
            }
        },
        "AttentionConfig.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "num_hidden": [],
                "input_previous_word": [],
                "source_num_hidden": [],
                "query_num_hidden": [],
                "layer_normalization": [],
                "config_coverage": [],
                "num_heads": []
            }
        },
        "Attention.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "dynamic_source_num_hidden": [],
                "prefix": []
            }
        },
        "Attention.on": {
            "name": "on",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "Attention.get_initial_state": {
            "name": "get_initial_state",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "Attention.make_input": {
            "name": "make_input",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "seq_idx": [],
                "word_vec_prev": [],
                "decoder_state": []
            }
        },
        "BilinearAttention.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": []
            }
        },
        "BilinearAttention.on": {
            "name": "on",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "DotAttention.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "source_num_hidden": [],
                "query_num_hidden": [],
                "num_hidden": [],
                "scale": []
            }
        },
        "DotAttention.on": {
            "name": "on",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "MultiHeadDotAttention.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "num_hidden": [],
                "heads": []
            }
        },
        "MultiHeadDotAttention.on": {
            "name": "on",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "EncoderLastStateAttention.on": {
            "name": "on",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "LocationAttention.__init__": {
            "name": "__init__",
            "location": 503,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "max_source_seq_len": []
            }
        },
        "LocationAttention.on": {
            "name": "on",
            "location": 511,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "MlpAttention.__init__": {
            "name": "__init__",
            "location": 576,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "attention_num_hidden": [],
                "layer_normalization": [],
                "config_coverage": []
            }
        },
        "MlpAttention.on": {
            "name": "on",
            "location": 600,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "Attention.on.attend": {
            "name": "attend",
            "location": 155,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "BilinearAttention.on.attend": {
            "name": "attend",
            "location": 237,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "DotAttention.on.attend": {
            "name": "attend",
            "location": 318,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "MultiHeadDotAttention.on.attend": {
            "name": "attend",
            "location": 408,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "EncoderLastStateAttention.on.attend": {
            "name": "attend",
            "location": 483,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "LocationAttention.on.attend": {
            "name": "attend",
            "location": 523,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "MlpAttention.on.attend": {
            "name": "attend",
            "location": 622,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        }
    },
    "stochastic-decoder-master/sockeye/train.py": {
        "none_if_negative": {
            "name": "none_if_negative",
            "location": 55,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "val": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "_build_or_load_vocab": {
            "name": "_build_or_load_vocab",
            "location": 59,
            "return": [
                "int",
                "str",
                "complex",
                "Tuple[str, int]"
            ],
            "arguments": {
                "existing_vocab_path": [
                    "Optional[str]",
                    "int"
                ],
                "data_paths": [
                    "int",
                    "List[str]",
                    "Union[Dict[str, Any], List[Any]]",
                    "str"
                ],
                "num_words": [
                    "int",
                    "List[str]",
                    "Union[Dict[str, Any], List[Any]]",
                    "str"
                ],
                "word_min_count": [
                    "int",
                    "List[str]",
                    "Union[Dict[str, Any], List[Any]]",
                    "str"
                ]
            }
        },
        "_list_to_tuple": {
            "name": "_list_to_tuple",
            "location": 70,
            "return": [
                "Mapping",
                "Tuple[float, float, float, float]",
                "Optional[Callable]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "v": [
                    "List[str]",
                    "str",
                    "Type[Any]",
                    "bool"
                ]
            }
        },
        "_dict_difference": {
            "name": "_dict_difference",
            "location": 77,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Tuple[int, int, int]",
                "bool",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "dict1": [
                    "dict",
                    "Dict[str, Any]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "Dict[str, bytes]",
                    "Dict[str, str]",
                    "Mapping[str, utils.mssql_counters.Section]",
                    "Dict[str, bool]"
                ],
                "dict2": [
                    "dict",
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Mapping[str, utils.mssql_counters.Section]",
                    "str"
                ]
            }
        },
        "check_arg_compatibility": {
            "name": "check_arg_compatibility",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "check_resume": {
            "name": "check_resume",
            "location": 107,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "args": [],
                "output_folder": [
                    "str",
                    "model.objects.BenchmarkStatistics"
                ]
            }
        },
        "determine_context": {
            "name": "determine_context",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "exit_stack": [
                    "bool",
                    "int"
                ]
            }
        },
        "determine_decode_and_evaluate_context": {
            "name": "determine_decode_and_evaluate_context",
            "location": 181,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "args": [],
                "exit_stack": [
                    "bool"
                ],
                "train_context": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_or_create_vocabs": {
            "name": "load_or_create_vocabs",
            "location": 227,
            "return": [
                "str",
                "rflx.model.Model"
            ],
            "arguments": {
                "args": [],
                "resume_training": [
                    "Iterable[str]"
                ],
                "output_folder": [
                    "str"
                ]
            }
        },
        "create_data_iters": {
            "name": "create_data_iters",
            "location": 263,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "vocab_source": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "vocab_target": [
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "create_lr_scheduler": {
            "name": "create_lr_scheduler",
            "location": 300,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "args": [],
                "resume_training": [
                    "str",
                    "bool"
                ],
                "training_state_dir": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "create_encoder_config": {
            "name": "create_encoder_config",
            "location": 326,
            "return": [
                "cmk.utils.type_defs.OptionalConfigSerial",
                "_vendor.traitlets.config.Config",
                "argparse.Namespace",
                "Dict[str, Any]",
                "cerise.config.Config",
                "neuromation.api.Config"
            ],
            "arguments": {
                "args": [],
                "config_conv": [
                    "argparse.Namespace",
                    "cmk.utils.structured_data.StructuredDataTree",
                    "trinity.config.ChainConfig",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_decoder_config": {
            "name": "create_decoder_config",
            "location": 392,
            "return": [
                "Optional[dict]",
                "dict",
                "str",
                "neuromation.api.Config",
                "app.config.HealthCheckConfig",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Sequence"
            ],
            "arguments": {
                "args": [],
                "encoder_num_hidden": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Union[float, int]",
                    "Callable",
                    "numpy.ndarray"
                ]
            }
        },
        "check_encoder_decoder_args": {
            "name": "check_encoder_decoder_args",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_model_config": {
            "name": "create_model_config",
            "location": 513,
            "return": [
                "dict",
                "Optional[dict]",
                "Config",
                "Dict[str, Any]",
                "Sequence"
            ],
            "arguments": {
                "args": [],
                "vocab_source_size": [
                    "int",
                    "Dict[str, int]"
                ],
                "vocab_target_size": [
                    "int",
                    "float",
                    "str",
                    "Optional[Iterable[Any]]",
                    "bool"
                ],
                "config_data": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "raiden.utils.Address"
                ]
            }
        },
        "create_training_model": {
            "name": "create_training_model",
            "location": 584,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "model_config": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.base.config.ConfigCache"
                ],
                "args": [],
                "context": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.base.config.ConfigCache"
                ],
                "train_iter": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.base.config.ConfigCache"
                ],
                "lr_scheduler_instance": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.base.config.ConfigCache"
                ],
                "resume_training": [
                    "bool",
                    "str"
                ],
                "training_state_dir": [
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "define_optimizer": {
            "name": "define_optimizer",
            "location": 621,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "args": [],
                "lr_scheduler_instance": [
                    "str",
                    "model.View"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 655,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/sockeye/training.py": {
        "cleanup_params_files": {
            "name": "cleanup_params_files",
            "location": 817,
            "return": [
                "Iterator[object]",
                "str",
                "bool",
                "Tuple[int, str]",
                "List[str]"
            ],
            "arguments": {
                "output_folder": [
                    "str"
                ],
                "max_to_keep": [
                    "int",
                    "bool"
                ],
                "checkpoint": [
                    "int",
                    "bool"
                ],
                "best_checkpoint": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "_TrainingState.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_not_improved": [
                    "int",
                    "Optional[int]"
                ],
                "epoch": [
                    "int",
                    "bool"
                ],
                "checkpoint": [
                    "int",
                    "bool"
                ],
                "updates": [
                    "int",
                    "bool"
                ],
                "samples": [
                    "int",
                    "bool"
                ]
            }
        },
        "TrainingModel.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "model.ModelConfig",
                    "dict"
                ],
                "context": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "logging.handlers.QueueListener",
                    "Dict[str, Any]"
                ],
                "train_iter": [
                    "Dict[str, Any]",
                    "bool",
                    "List[dict]"
                ],
                "bucketing": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "logging.handlers.QueueListener",
                    "Dict[str, Any]"
                ],
                "lr_scheduler": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "logging.handlers.QueueListener",
                    "Dict[str, Any]"
                ]
            }
        },
        "TrainingModel._build_module": {
            "name": "_build_module",
            "location": 91,
            "return": [
                "numpy.array",
                "Dict[str, Any]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "train_iter": [
                    "data_io.ParallelBucketSentenceIter",
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "TrainingModel.create_eval_metric": {
            "name": "create_eval_metric",
            "location": 239,
            "return": [
                "numpy.array",
                "numpy.ndarray",
                "int",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "metric_name": [
                    "str",
                    "AnyStr",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "TrainingModel.create_eval_metric_composite": {
            "name": "create_eval_metric_composite",
            "location": 252,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "metric_names": [
                    "str"
                ]
            }
        },
        "TrainingModel.fit": {
            "name": "fit",
            "location": 259,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "train_iter": [
                    "str",
                    "bool",
                    "int"
                ],
                "val_iter": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "output_folder": [
                    "str",
                    "Optional[str]"
                ],
                "max_params_files_to_keep": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "metrics": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "initializer": [
                    "int",
                    "Union[str, None]",
                    "IO[str]",
                    "Optional[\"Frame\"]",
                    "Optional[bool]"
                ],
                "max_updates": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "checkpoint_frequency": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "optimizer": [
                    "bool",
                    "Tuple[str, dict]",
                    "int",
                    "float",
                    "Callable"
                ],
                "optimizer_params": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "optimized_metric": [
                    "Optional[float]",
                    "bool",
                    "int",
                    "str"
                ],
                "kvstore": [
                    "str",
                    "bytes"
                ],
                "max_num_not_improved": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "min_num_epochs": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "max_num_epochs": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "decode_and_evaluate": [
                    "str",
                    "dict"
                ],
                "decode_and_evaluate_context": [
                    "str",
                    "dict"
                ],
                "use_tensorboard": [
                    "Optional[float]",
                    "bool",
                    "int",
                    "str"
                ],
                "mxmonitor_pattern": [
                    "Optional[Any]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "int",
                    "str"
                ],
                "mxmonitor_stat_func": [
                    "str",
                    "dict",
                    "list"
                ],
                "lr_decay_param_reset": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName"
                ],
                "lr_decay_opt_states_reset": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName"
                ],
                "annealing_factor": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "annealing_increase": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ],
                "annealing_max": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "data_io.ParallelBucketSentenceIter",
                    "List[AnyStr]"
                ]
            }
        },
        "TrainingModel._check_dist_kvstore_requirements": {
            "name": "_check_dist_kvstore_requirements",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lr_decay_opt_states_reset": [
                    "str",
                    "int"
                ],
                "lr_decay_param_reset": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes"
                ],
                "optimizer": [
                    "str",
                    "int"
                ]
            }
        },
        "TrainingModel._fit": {
            "name": "_fit",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "train_iter": [
                    "str",
                    "Optional[Set[int]]"
                ],
                "val_iter": [
                    "int",
                    "float"
                ],
                "output_folder": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ],
                "kvstore": [
                    "str",
                    "bool",
                    "Union[str, os.PathLike]",
                    "int"
                ],
                "max_params_files_to_keep": [
                    "int",
                    "List[AnyStr]",
                    "data_io.ParallelBucketSentenceIter",
                    "Optional[int]"
                ],
                "metrics": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "bytes"
                ],
                "max_updates": [
                    "Optional[int]",
                    "Optional[str]"
                ],
                "checkpoint_frequency": [
                    "int",
                    "str",
                    "Optional[\"ShippingInfo\"]",
                    "bool",
                    "Dict[str, float]",
                    "bytes"
                ],
                "max_num_not_improved": [
                    "int",
                    "List[int]"
                ],
                "min_num_epochs": [
                    "Optional[int]",
                    "Optional[str]",
                    "bytes"
                ],
                "max_num_epochs": [
                    "Optional[int]",
                    "Optional[str]"
                ],
                "mxmonitor": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Optional[numpy.ndarray]",
                    "bool",
                    "Sequence[str]"
                ],
                "lr_decay_param_reset": [
                    "bool",
                    "List[str]",
                    "list",
                    "int",
                    "str"
                ],
                "lr_decay_opt_states_reset": [
                    "str",
                    "int"
                ],
                "annealing_factor": [
                    "str"
                ],
                "annealing_increase": [
                    "str"
                ],
                "annealing_max": [
                    "int",
                    "bool",
                    "Iterator[int]",
                    "Optional[bool]",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "TrainingModel._log_params": {
            "name": "_log_params",
            "location": 635,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel._save_params": {
            "name": "_save_params",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output_folder": [
                    "str",
                    "Union[str, os.PathLike]"
                ],
                "checkpoint": [
                    "str",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "TrainingModel._load_params": {
            "name": "_load_params",
            "location": 658,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output_folder": [
                    "str",
                    "bool"
                ],
                "checkpoint": [
                    "str",
                    "bool"
                ]
            }
        },
        "TrainingModel._evaluate": {
            "name": "_evaluate",
            "location": 666,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "training_state": [
                    "dict",
                    "type",
                    "Callable",
                    "bool"
                ],
                "val_iter": [
                    "str",
                    "bytes"
                ],
                "val_metric": [
                    "Iterable[str]",
                    "Union[Sequence[str], str]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TrainingModel._checkpoint": {
            "name": "_checkpoint",
            "location": 682,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "training_state": [
                    "str",
                    "int"
                ],
                "output_folder": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable[[str], str]"
                ],
                "train_iter": [
                    "data_io.ParallelBucketSentenceIter",
                    "bytes",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.ServiceState",
                    "cmk.utils.type_defs.HostName",
                    "bool"
                ]
            }
        },
        "TrainingModel.save_state": {
            "name": "save_state",
            "location": 735,
            "return": [
                ""
            ],
            "arguments": {
                "training_state": [
                    "dict",
                    "numpy.array",
                    "int",
                    "raiden.utils.signer.Signer"
                ],
                "fname": [
                    "str",
                    "numpy.ndarray",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TrainingModel.load_state": {
            "name": "load_state",
            "location": 746,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "float"
                ]
            }
        },
        "TrainingModel.save_optimizer_states": {
            "name": "save_optimizer_states",
            "location": 758,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "TrainingModel.load_optimizer_states": {
            "name": "load_optimizer_states",
            "location": 774,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "cmk.utils.type_defs.EventRule",
                    "int"
                ]
            }
        },
        "TrainingModel.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 786,
            "return": [
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "Callable",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "train_iter": [
                    "data_io.ParallelBucketSentenceIter",
                    "purplship.providers.fedex.utils.Settings",
                    "Optional[Exception]"
                ]
            }
        },
        "TrainingModel._build_module.sym_gen": {
            "name": "sym_gen",
            "location": 117,
            "return": [
                "int",
                "bytes",
                "str",
                "Callable"
            ],
            "arguments": {
                "seq_lens": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/transformer.py": {
        "get_autoregressive_bias": {
            "name": "get_autoregressive_bias",
            "location": 271,
            "return": [
                "Callable"
            ],
            "arguments": {
                "max_length": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "TransformerConfig.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float"
                ],
                "attention_heads": [
                    "bool",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "int"
                ],
                "feed_forward_num_hidden": [
                    "List[int]",
                    "Container[int]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "List[Tuple[str, str]]",
                    "List[str]"
                ],
                "num_layers": [
                    "int",
                    "Tuple[int, int]"
                ],
                "dropout_attention": [
                    "bool",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "int"
                ],
                "dropout_relu": [
                    "bool",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "int"
                ],
                "dropout_prepost": [
                    "bool",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "int"
                ],
                "positional_embedding_type": [
                    "List[str]",
                    "Optional[Tuple[str]]",
                    "str",
                    "int",
                    "tuple",
                    "List[Tuple]",
                    "bool"
                ],
                "preprocess_sequence": [
                    "bool",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "int"
                ],
                "postprocess_sequence": [
                    "bool",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "int"
                ],
                "max_seq_len_source": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[int]",
                    "bool"
                ],
                "max_seq_len_target": [
                    "int",
                    "Union[int, Tuple[int, int]]"
                ],
                "conv_config": [
                    "bool",
                    "int",
                    "Mapping[str, Any]",
                    "str",
                    "List[Tuple[str, str]]",
                    "List[str]"
                ]
            }
        },
        "TransformerEncoderBlock.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "cmk.base.config.ConfigCache",
                    "config.Config"
                ],
                "prefix": [
                    "str",
                    "cmk.base.config.ConfigCache",
                    "config.Config"
                ]
            }
        },
        "TransformerEncoderBlock.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "numpy.ndarray",
                    "str",
                    "List[numpy.ndarray]"
                ],
                "lengths": [
                    "numpy.ndarray",
                    "Tuple[Optional[str], Any]",
                    "Optional[int]",
                    "Callable"
                ],
                "max_length": [
                    "numpy.ndarray",
                    "Tuple[Optional[str], Any]",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "TransformerDecoderBlock.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "cmk.base.config.ConfigCache",
                    "config.Config"
                ],
                "prefix": [
                    "str",
                    "cmk.base.config.ConfigCache",
                    "config.Config"
                ]
            }
        },
        "TransformerDecoderBlock.__call__": {
            "name": "__call__",
            "location": 152,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "Optional[int]",
                    "Mapping[str, Tuple[float, float, float]]"
                ],
                "target_max_length": [
                    "bool",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "target_bias": [
                    "int",
                    "Optional[int]"
                ],
                "source": [
                    "numpy.dtype",
                    "bool"
                ],
                "source_lengths": [
                    "numpy.dtype",
                    "bool"
                ],
                "source_max_length": [
                    "numpy.dtype",
                    "bool"
                ]
            }
        },
        "TransformerProcessBlock.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "float",
                    "int",
                    "tuple",
                    "str",
                    "bool"
                ],
                "num_hidden": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "dropout": [
                    "float",
                    "int",
                    "tuple",
                    "str",
                    "bool"
                ],
                "prefix": [
                    "int"
                ]
            }
        },
        "TransformerProcessBlock.__call__": {
            "name": "__call__",
            "location": 204,
            "return": [
                "str",
                "bool",
                "List[Dict[str, Any]]",
                "List[numpy.ndarray]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "List[str]",
                    "T",
                    "bytes",
                    "Union[Mapping, str]",
                    "dict"
                ],
                "prev": [
                    "Iterable",
                    "int"
                ]
            }
        },
        "TransformerFeedForward.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int",
                    "Optional[int]"
                ],
                "num_model": [
                    "int",
                    "Optional[int]"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "prefix": [
                    "int",
                    "Optional[int]",
                    "Callable",
                    "Dict[str, object]"
                ]
            }
        },
        "TransformerFeedForward.__call__": {
            "name": "__call__",
            "location": 256,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int",
                    "List[int]"
                ]
            }
        },
        "AutoRegressiveBias.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "str",
                    "float"
                ]
            }
        },
        "AutoRegressiveBias.get_bias": {
            "name": "get_bias",
            "location": 301,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "length": [
                    "float",
                    "List[int]",
                    "int"
                ]
            }
        },
        "AutoRegressiveBias.forward": {
            "name": "forward",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_train": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "req": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "in_data": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "out_data": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "aux": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "AutoRegressiveBias.backward": {
            "name": "backward",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "out_grad": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "in_data": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "out_data": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "in_grad": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "aux": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "AutoRegressiveBiasProp.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "AutoRegressiveBiasProp.list_arguments": {
            "name": "list_arguments",
            "location": 322,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoRegressiveBiasProp.list_outputs": {
            "name": "list_outputs",
            "location": 325,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoRegressiveBiasProp.infer_shape": {
            "name": "infer_shape",
            "location": 328,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "in_shape": [
                    "bool",
                    "int",
                    "Callable[[], bool]",
                    "List[str]"
                ]
            }
        },
        "AutoRegressiveBiasProp.infer_type": {
            "name": "infer_type",
            "location": 331,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "self": [],
                "in_type": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "AutoRegressiveBiasProp.create_operator": {
            "name": "create_operator",
            "location": 334,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        }
    },
    "stochastic-decoder-master/sockeye/translate.py": {
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "read_and_translate": {
            "name": "read_and_translate",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "translator": [
                    "int",
                    "str",
                    "float",
                    "sockeye.inference.Translator",
                    "sockeye.output_handler.OutputHandler"
                ],
                "output_handler": [
                    "int",
                    "str",
                    "Iterable[T]",
                    "Optional[int]",
                    "float"
                ],
                "chunk_size": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "source": [
                    "bool",
                    "Optional[str]",
                    "torch.utils.data.Dataset",
                    "str"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 123,
            "return": [
                "int",
                "List[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "output_handler": [
                    "sockeye.output_handler.OutputHandler",
                    "List[str]",
                    "Dict[str, Dict]",
                    "bool"
                ],
                "source_data": [
                    "int",
                    "Dict[bytes, bytes]",
                    "bool"
                ],
                "translator": [
                    "sockeye.inference.Translator",
                    "int",
                    "Iterable[str]",
                    "bool",
                    "float"
                ],
                "chunk_id": [
                    "int",
                    "Dict[bytes, bytes]",
                    "bool"
                ]
            }
        },
        "_setup_context": {
            "name": "_setup_context",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "exit_stack": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "stochastic-decoder-master/sockeye/utils.py": {
        "check_version": {
            "name": "check_version",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "version": [
                    "str",
                    "Sequence[str]",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "load_version": {
            "name": "load_version",
            "location": 61,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "parse_version": {
            "name": "parse_version",
            "location": 75,
            "return": [
                "int",
                "list",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "version_string": [
                    "str"
                ]
            }
        },
        "log_basic_info": {
            "name": "log_basic_info",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "seedRNGs": {
            "name": "seedRNGs",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "check_condition": {
            "name": "check_condition",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "bool"
                ],
                "error_message": [
                    "str",
                    "int"
                ]
            }
        },
        "save_graph": {
            "name": "save_graph",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "symbol": [
                    "bool",
                    "float",
                    "Sequence[str]",
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "hide_weights": [
                    "bool",
                    "float",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "compute_lengths": {
            "name": "compute_lengths",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sequence_data": [
                    "str",
                    "int"
                ]
            }
        },
        "save_params": {
            "name": "save_params",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "arg_params": [
                    "list",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "fname": [
                    "str",
                    "Dict[str, Any]",
                    "BinaryIO",
                    "dict",
                    "int",
                    "Optional[str]"
                ],
                "aux_params": [
                    "str",
                    "numpy.array",
                    "bool"
                ]
            }
        },
        "load_params": {
            "name": "load_params",
            "location": 158,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "smallest_k": {
            "name": "smallest_k",
            "location": 217,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "Union[np.ndarray, Dict[str, np.ndarray], loompy.LayerManager]",
                    "Iterable[T]",
                    "Callable[[T], Any]",
                    "Optional[T]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "k": [
                    "int",
                    "Set[str]",
                    "List[str]",
                    "str"
                ],
                "only_first_row": [
                    "bool"
                ]
            }
        },
        "smallest_k_mx": {
            "name": "smallest_k_mx",
            "location": 240,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "Dict[str, object]",
                    "tuple",
                    "Optional[int]",
                    "bool"
                ],
                "k": [
                    "bool",
                    "str",
                    "int",
                    "Optional[int]",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "only_first_row": [
                    "bool"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 259,
            "return": [
                "typing.Iterable[typing.List]"
            ],
            "arguments": {
                "some_list": [
                    "int",
                    "list",
                    "Sequence[int]"
                ],
                "n": [
                    "int",
                    "list",
                    "Sequence[int]"
                ]
            }
        },
        "plot_attention": {
            "name": "plot_attention",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "attention_matrix": [
                    "numpy.ndarray",
                    "List[str]",
                    "str",
                    "bytes",
                    "Union[List[str], List[int]]",
                    "bool"
                ],
                "source_tokens": [
                    "List[str]",
                    "int",
                    "List[int]",
                    "list"
                ],
                "target_tokens": [
                    "List[str]",
                    "bytes",
                    "int",
                    "numpy.ndarray"
                ],
                "filename": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "print_attention_text": {
            "name": "print_attention_text",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "attention_matrix": [
                    "Optional[bool]",
                    "str",
                    "int"
                ],
                "source_tokens": [
                    "List[str]",
                    "Set[str]",
                    "AsyncIterator[T]",
                    "int",
                    "Optional[str]"
                ],
                "target_tokens": [
                    "List[str]",
                    "numpy.ndarray",
                    "bool",
                    "bytes",
                    "int",
                    "List[bool]",
                    "Callable"
                ],
                "threshold": [
                    "float",
                    "int",
                    "Iterator[int]",
                    "Tuple[int]",
                    "str"
                ]
            }
        },
        "get_alignments": {
            "name": "get_alignments",
            "location": 329,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.int, builtins.int]]"
            ],
            "arguments": {
                "attention_matrix": [
                    "numpy.ndarray",
                    "bool",
                    "int",
                    "Tuple[str, str]"
                ],
                "threshold": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "average_arrays": {
            "name": "average_arrays",
            "location": 344,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "arrays": [
                    "float",
                    "int",
                    "str",
                    "numpy.ndarray",
                    "List[numpy.ndarray]",
                    "List[int]"
                ]
            }
        },
        "get_num_gpus": {
            "name": "get_num_gpus",
            "location": 361,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "get_gpu_memory_usage": {
            "name": "get_gpu_memory_usage",
            "location": 376,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "log_gpu_memory_usage": {
            "name": "log_gpu_memory_usage",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "memory_data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "expand_requested_device_ids": {
            "name": "expand_requested_device_ids",
            "location": 409,
            "return": [
                "Callable[[], None]",
                "Dict[str, Any]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "requested_device_ids": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "_expand_requested_device_ids": {
            "name": "_expand_requested_device_ids",
            "location": 423,
            "return": [
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "requested_device_ids": [
                    "List[int]",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "num_gpus_available": [
                    "int"
                ]
            }
        },
        "acquire_gpus": {
            "name": "acquire_gpus",
            "location": 444,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "requested_device_ids": [
                    "List[int]",
                    "int",
                    "str",
                    "List[bool]",
                    "List[str]",
                    "Optional[int]"
                ],
                "lock_dir": [
                    "str"
                ],
                "retry_wait_min": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "retry_wait_rand": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "num_gpus_available": [
                    "Optional[str]",
                    "Optional[int]",
                    "Union[Exception, str]"
                ]
            }
        },
        "namedtuple_with_defaults": {
            "name": "namedtuple_with_defaults",
            "location": 587,
            "return": [
                "str",
                "Union[bool, List[bool]]"
            ],
            "arguments": {
                "typename": [
                    "str",
                    "Optional[str]",
                    "type"
                ],
                "field_names": [
                    "str",
                    "Optional[str]",
                    "type"
                ],
                "default_values": [
                    "Type",
                    "Optional[T]",
                    "dict"
                ]
            }
        },
        "read_metrics_file": {
            "name": "read_metrics_file",
            "location": 606,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_metrics_file": {
            "name": "write_metrics_file",
            "location": 628,
            "return": [
                ""
            ],
            "arguments": {
                "metrics": [
                    "List[Dict[str, Any]]",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "get_validation_metric_points": {
            "name": "get_validation_metric_points",
            "location": 641,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ],
                "metric": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 717,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "float",
                    "bytes",
                    "set"
                ],
                "size": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Accuracy.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "output_names": [
                    "str",
                    "float"
                ],
                "label_names": [
                    "str",
                    "float"
                ],
                "ignore_label": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Accuracy.update": {
            "name": "update",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "numpy.random.RandomState",
                    "Optional[numpy.dtype]"
                ],
                "preds": [
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "numpy.random.RandomState",
                    "Optional[numpy.dtype]"
                ]
            }
        },
        "GpuFileLock.__init__": {
            "name": "__init__",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "Sequence[str]",
                    "int",
                    "List[str]"
                ],
                "lock_dir": [
                    "str",
                    "IO[Any]",
                    "Sequence[str]"
                ]
            }
        },
        "GpuFileLock.__enter__": {
            "name": "__enter__",
            "location": 549,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GpuFileLock.__exit__": {
            "name": "__exit__",
            "location": 577,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "PrintValue.__init__": {
            "name": "__init__",
            "location": 665,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "print_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "print_grad": [
                    "str",
                    "bool",
                    "Optional[Mapping]",
                    "Optional[str]"
                ],
                "use_logger": [
                    "bool"
                ]
            }
        },
        "PrintValue.__print_nd__": {
            "name": "__print_nd__",
            "location": 672,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nd": [
                    "Optional[Dict]",
                    "Callable",
                    "str",
                    "int"
                ],
                "label": [
                    "Optional[Dict]",
                    "Optional[Any]",
                    "str",
                    "int"
                ]
            }
        },
        "PrintValue.forward": {
            "name": "forward",
            "location": 681,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_train": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "req": [
                    "Optional[Callable[[Any], Any]]"
                ],
                "in_data": [
                    "str",
                    "Optional[str]"
                ],
                "out_data": [
                    "Optional[Callable[[Any], Any]]"
                ],
                "aux": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "PrintValue.backward": {
            "name": "backward",
            "location": 685,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "req": [
                    "List[str]",
                    "str",
                    "Dict[str, List[str]]"
                ],
                "out_grad": [
                    "List[str]",
                    "str",
                    "Dict[str, List[str]]"
                ],
                "in_data": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "out_data": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "in_grad": [
                    "List[str]",
                    "str",
                    "Dict[str, List[str]]"
                ],
                "aux": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "PrintValueProp.__init__": {
            "name": "__init__",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "print_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "print_grad": [
                    "str",
                    "bool",
                    "Optional[Mapping]",
                    "Optional[str]"
                ],
                "use_logger": [
                    "bool"
                ]
            }
        },
        "PrintValueProp.list_arguments": {
            "name": "list_arguments",
            "location": 699,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[Dict[str, Any]]",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintValueProp.list_outputs": {
            "name": "list_outputs",
            "location": 702,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintValueProp.infer_shape": {
            "name": "infer_shape",
            "location": 705,
            "return": [
                "bool",
                "List[str]",
                "str",
                "List[Dict[str, str]]",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "in_shape": [
                    "int",
                    "list",
                    "numpy.ndarray",
                    "str",
                    "Sequence[T]"
                ]
            }
        },
        "PrintValueProp.infer_type": {
            "name": "infer_type",
            "location": 708,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "in_type": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "PrintValueProp.create_operator": {
            "name": "create_operator",
            "location": 711,
            "return": [
                "str",
                "Optional[str]",
                "Literal"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        }
    },
    "stochastic-decoder-master/sockeye/vocab.py": {
        "build_from_paths": {
            "name": "build_from_paths",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "int"
                ],
                "num_words": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "min_count": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "build_vocab": {
            "name": "build_vocab",
            "location": 50,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "bool",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "str"
                ],
                "num_words": [
                    "bool",
                    "int",
                    "Tuple[int, int, bytearray]",
                    "bytes"
                ],
                "min_count": [
                    "dict",
                    "str"
                ]
            }
        },
        "vocab_to_pickle": {
            "name": "vocab_to_pickle",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "vocab": [
                    "str"
                ],
                "path": [
                    "str",
                    "raiden.utils.List[str]"
                ]
            }
        },
        "vocab_to_json": {
            "name": "vocab_to_json",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "vocab": [
                    "str"
                ],
                "path": [
                    "str",
                    "Union[os.PathLike, str]"
                ]
            }
        },
        "vocab_from_json_or_pickle": {
            "name": "vocab_from_json_or_pickle",
            "location": 106,
            "return": [
                "List[str]",
                "dict",
                "float",
                "Optional[int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "vocab_from_pickle": {
            "name": "vocab_from_pickle",
            "location": 120,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "path": [
                    "str",
                    "logging.Logger",
                    "bool"
                ]
            }
        },
        "vocab_from_json": {
            "name": "vocab_from_json",
            "location": 133,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "reverse_vocab": {
            "name": "reverse_vocab",
            "location": 146,
            "return": [
                "Set[str]",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "vocab": [
                    "Optional[Union[str, Any, Any, Any]]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/sockeye/__init__.py": {},
    "stochastic-decoder-master/test/common.py": {
        "gaussian_vector": {
            "name": "gaussian_vector",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "shape": [
                    "int",
                    "bool",
                    "Union[str, int]",
                    "str"
                ],
                "return_symbol": [
                    "int",
                    "bool",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "integer_vector": {
            "name": "integer_vector",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "shape": [],
                "max_value": [],
                "return_symbol": []
            }
        },
        "uniform_vector": {
            "name": "uniform_vector",
            "location": 64,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "shape": [
                    "bool",
                    "int",
                    "float"
                ],
                "min_value": [
                    "bool",
                    "int",
                    "float"
                ],
                "max_value": [
                    "bool",
                    "int",
                    "float"
                ],
                "return_symbol": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "generate_random_sentence": {
            "name": "generate_random_sentence",
            "location": 78,
            "return": [
                "int",
                "tuple",
                "str",
                "List[str]"
            ],
            "arguments": {
                "vocab_size": [
                    "int"
                ],
                "max_len": [
                    "int",
                    "list"
                ]
            }
        },
        "generate_digits_file": {
            "name": "generate_digits_file",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "int",
                    "Optional[bool]"
                ],
                "target_path": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "line_count": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "float"
                ],
                "line_length": [
                    "int",
                    "Set[int]",
                    "str",
                    "tuple"
                ],
                "sort_target": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "seed": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "generate_fast_align_lex": {
            "name": "generate_fast_align_lex",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "lex_path": [
                    "str"
                ]
            }
        },
        "tmp_digits_dataset": {
            "name": "tmp_digits_dataset",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "float"
                ],
                "train_line_count": [
                    "int",
                    "bool",
                    "str"
                ],
                "train_max_length": [
                    "int",
                    "bool",
                    "str"
                ],
                "dev_line_count": [
                    "int",
                    "bool",
                    "str"
                ],
                "dev_max_length": [
                    "int",
                    "bool",
                    "str"
                ],
                "sort_target": [
                    "int",
                    "bool",
                    "str"
                ],
                "seed_train": [
                    "int",
                    "bool",
                    "str"
                ],
                "seed_dev": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "run_train_translate": {
            "name": "run_train_translate",
            "location": 159,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "train_params": [
                    "str",
                    "bool"
                ],
                "translate_params": [
                    "str",
                    "bool"
                ],
                "translate_params_equiv": [
                    "str",
                    "Union[str, IO]",
                    "bool",
                    "Optional[str]"
                ],
                "train_source_path": [
                    "str",
                    "bool"
                ],
                "train_target_path": [
                    "str",
                    "bool"
                ],
                "dev_source_path": [
                    "str",
                    "bool"
                ],
                "dev_target_path": [
                    "str",
                    "bool"
                ],
                "max_seq_len": [
                    "str",
                    "bool"
                ],
                "restrict_lexicon": [
                    "bool",
                    "str"
                ],
                "work_dir": [
                    "str",
                    "IO",
                    "bool"
                ],
                "quiet": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/__init__.py": {},
    "stochastic-decoder-master/test/integration/test_seq_copy_int.py": {
        "test_seq_copy": {
            "name": "test_seq_copy",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "train_params": [
                    "str",
                    "bool",
                    "float"
                ],
                "translate_params": [
                    "int"
                ],
                "restrict_lexicon": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/integration/__init__.py": {},
    "stochastic-decoder-master/test/system/test_seq_copy_sys.py": {
        "test_seq_copy": {
            "name": "test_seq_copy",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "train_params": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "translate_params": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "perplexity_thresh": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ],
                "bleu_thresh": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_seq_sort": {
            "name": "test_seq_sort",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "train_params": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "translate_params": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "perplexity_thresh": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ],
                "bleu_thresh": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/system/__init__.py": {},
    "stochastic-decoder-master/test/unit/test_arguments.py": {
        "test_io_args": {
            "name": "test_io_args",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_logging_args": {
            "name": "test_logging_args",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "Tuple[str]"
                ],
                "expected_params": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_device_args": {
            "name": "test_device_args",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "Tuple[str]"
                ],
                "expected_params": [
                    "Tuple[str]"
                ]
            }
        },
        "test_model_parameters": {
            "name": "test_model_parameters",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "Tuple[str]"
                ],
                "expected_params": [
                    "Tuple[str]"
                ]
            }
        },
        "test_training_arg": {
            "name": "test_training_arg",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "Tuple[str]"
                ],
                "expected_params": [
                    "Tuple[str]"
                ]
            }
        },
        "test_inference_args": {
            "name": "test_inference_args",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "Tuple[str]"
                ],
                "expected_params": [
                    "Tuple[str]"
                ]
            }
        },
        "test_tutorial_train_args": {
            "name": "test_tutorial_train_args",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "test_tutorial_translate_args": {
            "name": "test_tutorial_translate_args",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "test_tutorial_averaging_args": {
            "name": "test_tutorial_averaging_args",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "_create_argument_values_that_must_be_files": {
            "name": "_create_argument_values_that_must_be_files",
            "location": 312,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "params": [
                    "str"
                ]
            }
        },
        "_delete_argument_values_that_must_be_files": {
            "name": "_delete_argument_values_that_must_be_files",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "to_unlink": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "List[dict]",
                    "Iterator[int]",
                    "bool"
                ]
            }
        },
        "_test_args": {
            "name": "_test_args",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "expected_params": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "args_func": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_test_args_subset": {
            "name": "_test_args_subset",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "bool",
                    "dict"
                ],
                "expected_params": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, None]"
                ],
                "expected_params_present": [
                    "bool",
                    "Optional[Tuple]",
                    "List[str]",
                    "str"
                ],
                "args_func": [
                    "str",
                    "Type"
                ]
            }
        },
        "_create_argument_values_that_must_be_files.grouper": {
            "name": "grouper",
            "location": 317,
            "return": [
                "str",
                "Union[str, Dict]",
                "int"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "dict",
                    "argparse.Namespace",
                    "bool"
                ],
                "n": [
                    "int",
                    "dict",
                    "argparse.Namespace",
                    "bool"
                ],
                "fillvalue": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_attention.py": {
        "test_attention": {
            "name": "test_attention",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "attention_type": [
                    "str",
                    "int",
                    "bool"
                ],
                "batch_size": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "encoder_num_hidden": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "decoder_num_hidden": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_coverage_attention": {
            "name": "test_coverage_attention",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "attention_coverage_type": [
                    "str",
                    "bool",
                    "Iterable[T]"
                ],
                "attention_coverage_num_hidden": [
                    "str",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ],
                "encoder_num_hidden": [
                    "str"
                ],
                "decoder_num_hidden": [
                    "str"
                ]
            }
        },
        "test_last_state_attention": {
            "name": "test_last_state_attention",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "encoder_num_hidden": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "test_get_context_and_attention_probs": {
            "name": "test_get_context_and_attention_probs",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_average.py": {
        "test_strategy_best": {
            "name": "test_strategy_best",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "test_points": [
                    "float",
                    "int"
                ],
                "expected_top_n": [
                    "str",
                    "List[int]",
                    "float",
                    "dict",
                    "Dict[str, Any]"
                ],
                "size": [
                    "float",
                    "int"
                ],
                "maximize": [
                    "float",
                    "int"
                ]
            }
        },
        "test_strategy_last": {
            "name": "test_strategy_last",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "test_points": [
                    "str",
                    "float",
                    "int",
                    "Sequence[int]",
                    "Optional[float]"
                ],
                "expected_top_n": [
                    "str",
                    "dict",
                    "List[int]",
                    "float"
                ],
                "size": [
                    "str",
                    "float",
                    "int",
                    "Sequence[int]",
                    "Optional[float]"
                ],
                "maximize": [
                    "str",
                    "float",
                    "int",
                    "Sequence[int]",
                    "Optional[float]"
                ]
            }
        },
        "test_strategy_lifespan": {
            "name": "test_strategy_lifespan",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "test_points": [
                    "float",
                    "int"
                ],
                "expected_top_n": [
                    "str",
                    "List[int]",
                    "float",
                    "dict",
                    "Dict[str, Any]"
                ],
                "size": [
                    "float",
                    "int"
                ],
                "maximize": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_bleu.py": {
        "test_bleu": {
            "name": "test_bleu",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [
                    "Callable",
                    "str"
                ],
                "references": [
                    "Callable",
                    "str"
                ],
                "expected_bleu": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_effective_order": {
            "name": "test_effective_order",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [
                    "Callable",
                    "str"
                ],
                "references": [
                    "Callable",
                    "str"
                ],
                "expected_bleu": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_statistics": {
            "name": "test_statistics",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "hypothesis": [
                    "str",
                    "bool"
                ],
                "reference": [
                    "str",
                    "bool"
                ],
                "expected_stat": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "test_scoring": {
            "name": "test_scoring",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "statistics": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected_score": [
                    "str",
                    "int",
                    "List[Tuple[str, Any]]",
                    "List[str]",
                    "bytearray"
                ]
            }
        },
        "test_offset": {
            "name": "test_offset",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "hypothesis": [
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "reference": [
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "expected_with_offset": [
                    "bool",
                    "Type[Exception]",
                    "int",
                    "Union[int, slice]"
                ],
                "expected_without_offset": [
                    "bool",
                    "Type[Exception]",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "test_degenerate_statistics": {
            "name": "test_degenerate_statistics",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "statistics": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "offset": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "expected_score": [
                    "str",
                    "int",
                    "Type[Exception]"
                ]
            }
        },
        "test_degenerate_uneven": {
            "name": "test_degenerate_uneven",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [
                    "Dict[str, Sequence[Any]]"
                ],
                "references": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_callback.py": {
        "test_callback": {
            "name": "test_callback",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "optimized_metric": [
                    "int"
                ],
                "initial_best": [
                    "str"
                ],
                "train_metrics": [
                    "str",
                    "float"
                ],
                "eval_metrics": [
                    "str",
                    "float"
                ],
                "improved_seq": [
                    "str",
                    "float"
                ]
            }
        },
        "_compare_metrics": {
            "name": "_compare_metrics",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "str",
                    "mode.utils.types.graphs._T",
                    "numpy.ndarray",
                    "tuple",
                    "int"
                ],
                "b": [
                    "str",
                    "mode.utils.types.graphs._T",
                    "numpy.ndarray",
                    "tuple",
                    "int"
                ]
            }
        },
        "test_bleu_requires_checkpoint_decoder": {
            "name": "test_bleu_requires_checkpoint_decoder",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "DummyMetric.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metric_dict": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "DummyMetric.get_name_value": {
            "name": "get_name_value",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_checkpoint.py": {
        "create_parallel_sentence_iter": {
            "name": "create_parallel_sentence_iter",
            "location": 23,
            "return": [
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "source_sentences": [
                    "Tuple[int, int]",
                    "int",
                    "List[str]",
                    "BinaryIO",
                    "str",
                    "bool"
                ],
                "target_sentences": [
                    "Tuple[int, int]",
                    "int",
                    "List[str]",
                    "BinaryIO",
                    "str",
                    "bool"
                ],
                "max_len": [
                    "int"
                ],
                "batch_size": [
                    "Tuple[int, int]",
                    "int",
                    "List[str]",
                    "BinaryIO",
                    "str",
                    "bool"
                ],
                "batch_by_words": [
                    "Tuple[int, int]",
                    "int",
                    "List[str]",
                    "BinaryIO",
                    "str",
                    "bool"
                ]
            }
        },
        "data_batches_equal": {
            "name": "data_batches_equal",
            "location": 39,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "db1": [],
                "db2": []
            }
        },
        "test_parallel_sentence_iter": {
            "name": "test_parallel_sentence_iter",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "str"
                ],
                "batch_by_words": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_chrf.py": {
        "test_sentence_chrf": {
            "name": "test_sentence_chrf",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "hypothesis": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "int",
                    "Hashable"
                ],
                "reference": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "int",
                    "Hashable"
                ],
                "expected_chrf": [
                    "List[str]",
                    "Type[Exception]",
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        },
        "test_corpus_chrf": {
            "name": "test_corpus_chrf",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "int",
                    "Hashable"
                ],
                "references": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "int",
                    "Hashable"
                ],
                "expected_chrf": [
                    "List[str]",
                    "Type[Exception]",
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_config.py": {
        "test_base_freeze": {
            "name": "test_base_freeze",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_freeze": {
            "name": "test_freeze",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_config_repr": {
            "name": "test_config_repr",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_self_attribute": {
            "name": "test_no_self_attribute",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_serialization": {
            "name": "test_serialization",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copy": {
            "name": "test_copy",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_attributes_filled_with_default": {
            "name": "test_missing_attributes_filled_with_default",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ConfigTest.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "param": [
                    "dict",
                    "str",
                    "list"
                ],
                "config": [
                    "sphinx.config.Config",
                    "virgene.config.Config",
                    "dict"
                ]
            }
        },
        "ConfigWithMissingAttributes.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "existing_attribute": [
                    "bool",
                    "int",
                    "List[str]",
                    "Callable",
                    "str"
                ],
                "new_attribute": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_coverage.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_activation_coverage": {
            "name": "test_activation_coverage",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "act_type": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_gru_coverage": {
            "name": "test_gru_coverage",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_test_activation_coverage": {
            "name": "_test_activation_coverage",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "act_type": [
                    "Type[Any]",
                    "str"
                ]
            }
        },
        "_test_gru_coverage": {
            "name": "_test_gru_coverage",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_mask_with_one": {
            "name": "_mask_with_one",
            "location": 136,
            "return": [
                "bytearray",
                "numpy.ndarray",
                "float",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "use_sequence_length": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "sequence_length": [
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "_patch_sequence_mask": {
            "name": "_patch_sequence_mask",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Exception"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_data_io.py": {
        "test_define_buckets": {
            "name": "test_define_buckets",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "max_seq_len": [
                    "int",
                    "bool",
                    "str"
                ],
                "step": [
                    "int",
                    "bool",
                    "str"
                ],
                "expected_buckets": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_define_parallel_buckets": {
            "name": "test_define_parallel_buckets",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "max_seq_len_source": [
                    "int",
                    "List[int]",
                    "gluonts.model.common.Tensor",
                    "float"
                ],
                "max_seq_len_target": [
                    "int",
                    "List[int]",
                    "gluonts.model.common.Tensor",
                    "float"
                ],
                "bucket_width": [
                    "int",
                    "List[int]",
                    "gluonts.model.common.Tensor",
                    "float"
                ],
                "length_ratio": [
                    "int",
                    "List[int]",
                    "gluonts.model.common.Tensor",
                    "float"
                ],
                "expected_buckets": [
                    "int"
                ]
            }
        },
        "test_get_bucket": {
            "name": "test_get_bucket",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "buckets": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "length": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "expected_bucket": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "test_get_tokens": {
            "name": "test_get_tokens",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "line": [
                    "bool",
                    "List[int]",
                    "Optional[Dict[str, str]]"
                ],
                "expected_tokens": [
                    "str",
                    "dict",
                    "int",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "test_tokens2ids": {
            "name": "test_tokens2ids",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "int"
                ],
                "vocab": [
                    "str",
                    "int"
                ],
                "expected_ids": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_get_default_bucket_key": {
            "name": "test_get_default_bucket_key",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "buckets": [
                    "Optional[List[str]]",
                    "str"
                ],
                "expected_default_bucket_key": [
                    "Optional[Callable]",
                    "nevergrad.common.FloatLoss",
                    "bool",
                    "Callable",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_get_parallel_bucket": {
            "name": "test_get_parallel_bucket",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "buckets": [
                    "str",
                    "Exception"
                ],
                "source_length": [
                    "str",
                    "Exception"
                ],
                "target_length": [
                    "str",
                    "Exception"
                ],
                "expected_bucket_index": [
                    "str",
                    "bool",
                    "Type[Exception]",
                    "int"
                ],
                "expected_bucket": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "int",
                    "Optional[\"Game\"]",
                    "bytes"
                ]
            }
        },
        "test_length_statistics": {
            "name": "test_length_statistics",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str",
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "target": [
                    "str",
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "expected_mean": [
                    "Tuple[str, bool]",
                    "int",
                    "str",
                    "tuple"
                ],
                "expected_std": [
                    "Tuple[str, bool]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        },
        "test_get_training_data_iters": {
            "name": "test_get_training_data_iters",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_decoder.py": {
        "test_step": {
            "name": "test_step",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "cell_type": [
                    "int",
                    "List[\"transaction_model.TransactionModel\"]",
                    "str",
                    "bool"
                ],
                "context_gating": [
                    "str",
                    "Sequence[str]"
                ],
                "num_embed": [
                    "int",
                    "float"
                ],
                "encoder_num_hidden": [
                    "str",
                    "bool"
                ],
                "decoder_num_hidden": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_encoder.py": {
        "test_convolutional_embedding_encoder": {
            "name": "test_convolutional_embedding_encoder",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "out_data_shape": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "out_data_length": [
                    "int",
                    "str",
                    "float",
                    "bytes",
                    "Optional[float]"
                ],
                "out_seq_len": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ]
            }
        },
        "test_sincos_positional_embeddings": {
            "name": "test_sincos_positional_embeddings",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_inference.py": {
        "test_concat_translations": {
            "name": "test_concat_translations",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_length_penalty_default": {
            "name": "test_length_penalty_default",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_length_penalty": {
            "name": "test_length_penalty",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_length_penalty_int_input": {
            "name": "test_length_penalty_int_input",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_concat_translations.length_penalty": {
            "name": "length_penalty",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_layers.py": {
        "test_layer_normalization": {
            "name": "test_layer_normalization",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_weight_normalization": {
            "name": "test_weight_normalization",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_lexicon.py": {
        "test_topk_lexicon": {
            "name": "test_topk_lexicon",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_loss.py": {
        "test_cross_entropy_loss": {
            "name": "test_cross_entropy_loss",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_smoothed_cross_entropy_loss": {
            "name": "test_smoothed_cross_entropy_loss",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cross_entropy_metric": {
            "name": "test_cross_entropy_metric",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "preds": [
                    "int",
                    "str"
                ],
                "labels": [
                    "Optional[\"TrackingData\"]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "Optional[Dict]"
                ],
                "normalization_type": [
                    "int",
                    "str"
                ],
                "label_smoothing": [
                    "int",
                    "str"
                ],
                "expected_value": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "test_cross_entropy_internal": {
            "name": "test_cross_entropy_internal",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_lr_scheduler.py": {
        "test_lr_scheduler": {
            "name": "test_lr_scheduler",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fixed_step_lr_scheduler": {
            "name": "test_fixed_step_lr_scheduler",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_lr_scheduler": {
            "name": "test_get_lr_scheduler",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "scheduler_type": [
                    "str",
                    "dict"
                ],
                "reduce_factor": [
                    "str",
                    "dict"
                ],
                "expected_instance": [
                    "str",
                    "bool",
                    "Type[Exception]"
                ]
            }
        },
        "test_get_lr_scheduler_no_reduce": {
            "name": "test_get_lr_scheduler_no_reduce",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_optimizers.py": {
        "test_optimizer": {
            "name": "test_optimizer",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "optimizer": [],
                "optimizer_params": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_output_handler.py": {
        "test_stream_output_handler": {
            "name": "test_stream_output_handler",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "handler": [
                    "str",
                    "bytes"
                ],
                "translation_input": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ],
                "translation_output": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ],
                "translation_walltime": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ],
                "expected_string": [
                    "str",
                    "IO[bytes]",
                    "io.StringIO"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_params.py": {
        "test_cleanup_param_files": {
            "name": "test_cleanup_param_files",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_rnn.py": {
        "test_ln_cell": {
            "name": "test_ln_cell",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "cell": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "expected_param_keys": [
                    "dict",
                    "int",
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "test_get_stacked_rnn": {
            "name": "test_get_stacked_rnn",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ],
                "expected_cell": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "test_cell_parallel_input": {
            "name": "test_cell_parallel_input",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_residual_cell_parallel_input": {
            "name": "test_residual_cell_parallel_input",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sequential_rnn_cell_parallel_input": {
            "name": "test_sequential_rnn_cell_parallel_input",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_translate.py": {
        "mock_translator": {
            "name": "mock_translator",
            "location": 28,
            "return": [
                "Dict[str, Sequence[str]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "mock_output_handler": {
            "name": "mock_output_handler",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "mock_open": {
            "name": "mock_open",
            "location": 37,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "test_translate_by_file": {
            "name": "test_translate_by_file",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "mock_file": [
                    "Optional[str]",
                    "kata.data.io.network.GithubApi",
                    "str"
                ],
                "mock_translator": [
                    "str"
                ],
                "mock_output_handler": []
            }
        },
        "test_translate_by_stdin_chunk2": {
            "name": "test_translate_by_stdin_chunk2",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "mock_translator": [],
                "mock_output_handler": []
            }
        }
    },
    "stochastic-decoder-master/test/unit/test_utils.py": {
        "test_chunks": {
            "name": "test_chunks",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "some_list": [
                    "List[List[Any]]",
                    "Optional[str]",
                    "List[Tuple[bool, str]]"
                ],
                "expected": [
                    "Dict[str, Any]",
                    "Callable",
                    "dict",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "test_get_alignments": {
            "name": "test_get_alignments",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_expand_requested_device_ids": {
            "name": "test_expand_requested_device_ids",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "requested_device_ids": [
                    "int",
                    "Type[Any]"
                ],
                "num_gpus_available": [
                    "int",
                    "Type[Any]"
                ],
                "expected": [
                    "int",
                    "Type[Any]"
                ]
            }
        },
        "test_aquire_gpus": {
            "name": "test_aquire_gpus",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "int"
                ],
                "requested_device_ids": [
                    "int"
                ],
                "num_gpus_available": [
                    "int"
                ],
                "expected": [
                    "list",
                    "str",
                    "Dict[str, bytes]",
                    "Set[int]"
                ]
            }
        },
        "test_expand_requested_device_ids_exception": {
            "name": "test_expand_requested_device_ids_exception",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "requested_device_ids": [
                    "int"
                ],
                "num_gpus_available": [
                    "int"
                ]
            }
        },
        "test_aquire_gpus_exception": {
            "name": "test_aquire_gpus_exception",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "raiden.utils.TokenNetworkID"
                ],
                "requested_device_ids": [
                    "int",
                    "raiden.utils.TokenNetworkID"
                ],
                "num_gpus_available": [
                    "int",
                    "raiden.utils.TokenNetworkID"
                ]
            }
        },
        "test_aquire_gpus_1_locked": {
            "name": "test_aquire_gpus_1_locked",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Literal",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "requested_device_ids": [
                    "int"
                ],
                "num_gpus_available": [
                    "int"
                ],
                "expected": [
                    "list",
                    "str",
                    "Dict[str, bytes]",
                    "Set[int]"
                ]
            }
        },
        "test_acquire_gpus_exception_propagation": {
            "name": "test_acquire_gpus_exception_propagation",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_gpu_file_lock_cleanup": {
            "name": "test_gpu_file_lock_cleanup",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "int",
                    "Dict[str, bytes]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "test_gpu_file_lock_exception_propagation": {
            "name": "test_gpu_file_lock_exception_propagation",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "test_gpu_file_lock_locking": {
            "name": "test_gpu_file_lock_locking",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "float",
                    "bool"
                ]
            }
        },
        "test_gpu_file_lock_permission_exception": {
            "name": "test_gpu_file_lock_permission_exception",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_check_condition_true": {
            "name": "test_check_condition_true",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_condition_false": {
            "name": "test_check_condition_false",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_version": {
            "name": "test_parse_version",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "version_string": [
                    "str",
                    "List[str]"
                ],
                "expected_version": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_check_version_disregards_minor": {
            "name": "test_check_version_disregards_minor",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_get_later_major_version": {
            "name": "_get_later_major_version",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_check_version_checks_major": {
            "name": "test_check_version_checks_major",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_average_arrays": {
            "name": "test_average_arrays",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_save_and_load_params": {
            "name": "test_save_and_load_params",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_value": {
            "name": "test_print_value",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stochastic-decoder-master/test/unit/test_vocab.py": {
        "test_build_vocab": {
            "name": "test_build_vocab",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "Union[Tuple[int, int], int]"
                ],
                "size": [
                    "int",
                    "Union[Tuple[int, int], int]"
                ],
                "min_count": [
                    "int",
                    "Union[Tuple[int, int], int]"
                ],
                "expected": [
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_constants_in_vocab": {
            "name": "test_constants_in_vocab",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bool",
                    "float",
                    "Optional[Iterable]",
                    "int",
                    "bytes"
                ],
                "size": [
                    "bool",
                    "float",
                    "Optional[Iterable]",
                    "int",
                    "bytes"
                ],
                "min_count": [
                    "bool",
                    "float",
                    "Optional[Iterable]",
                    "int",
                    "bytes"
                ],
                "constants": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "stochastic-decoder-master/test/unit/__init__.py": {},
    "stochastic-decoder-master/tutorials/seqcopy/genseqcopy.py": {},
    "stochastic-decoder-master/workflow/clean_corpus.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
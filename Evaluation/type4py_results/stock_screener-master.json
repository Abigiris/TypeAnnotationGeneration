{
    "stock_screener-master/tests/test_stock_info_scraper.py": {
        "TestStockInfoScraper.test_normal_get_yahoo_ticker": {
            "name": "test_normal_get_yahoo_ticker",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStockInfoScraper.test_crazy_get_yahoo_ticker": {
            "name": "test_crazy_get_yahoo_ticker",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stock_screener-master/tests/__init__.py": {},
    "stock_screener-master/utils/alembic_helpers.py": {
        "create_view": {
            "name": "create_view",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "operations": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "operation": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "drop_view": {
            "name": "drop_view",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "operations": [
                    "str",
                    "bool"
                ],
                "operation": [
                    "str",
                    "bool"
                ]
            }
        },
        "create_sp": {
            "name": "create_sp",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "operations": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "operation": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "drop_sp": {
            "name": "drop_sp",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "operations": [
                    "str",
                    "bool"
                ],
                "operation": [
                    "str",
                    "bool"
                ]
            }
        },
        "ReversibleOp.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ReversibleOp.invoke_for_target": {
            "name": "invoke_for_target",
            "location": 9,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Optional[int]"
                ],
                "operations": [
                    "str",
                    "Type[\"SerializationDialect\"]",
                    "Type"
                ],
                "target": [
                    "Type",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "ReversibleOp.reverse": {
            "name": "reverse",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReversibleOp._get_object_from_version": {
            "name": "_get_object_from_version",
            "location": 17,
            "return": [
                "int",
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Type[T]"
                ],
                "operations": [
                    "Optional[int]",
                    "Iterable[Tuple[str, int]]",
                    "list"
                ],
                "ident": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ReversibleOp.replace": {
            "name": "replace",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str]",
                    "AsyncGenerator"
                ],
                "operations": [
                    "str",
                    "AsyncGenerator"
                ],
                "target": [
                    "int",
                    "bool",
                    "list",
                    "tuple",
                    "Callable"
                ],
                "replaces": [
                    "str",
                    "Type[T]",
                    "Type['AbstractIntegrationConversation']",
                    "int"
                ],
                "replace_with": [
                    "str",
                    "Type[T]",
                    "Type['AbstractIntegrationConversation']",
                    "int"
                ]
            }
        },
        "CreateViewOp.reverse": {
            "name": "reverse",
            "location": 45,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropViewOp.reverse": {
            "name": "reverse",
            "location": 51,
            "return": [
                "str",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateSPOp.reverse": {
            "name": "reverse",
            "location": 58,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropSPOp.reverse": {
            "name": "reverse",
            "location": 64,
            "return": [
                "str",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stock_screener-master/utils/config.py": {
        "get_last_year": {
            "name": "get_last_year",
            "location": 11,
            "return": [
                "str",
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "create_pg_engine": {
            "name": "create_pg_engine",
            "location": 29,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "level": [
                    "int",
                    "Optional[BaseException]",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "stock_screener-master/utils/etl_base.py": {
        "ETLBase.load_data": {
            "name": "load_data",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "List[utils.models.Base]",
                    "bytes",
                    "Dict[str, Any]",
                    "Callable[[bytes], bytes]",
                    "Iterable[T]",
                    "Callable[[T], bool]",
                    "str"
                ]
            }
        },
        "ETLBase.job": {
            "name": "job",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/utils/queries.py": {
        "fetch_all_tickers_from_database": {
            "name": "fetch_all_tickers_from_database",
            "location": 7,
            "return": [
                "str",
                "list",
                "models.User",
                "bool"
            ],
            "arguments": {}
        },
        "fetch_isins_not_updated_financials": {
            "name": "fetch_isins_not_updated_financials",
            "location": 14,
            "return": [
                "str",
                "models.User",
                "int",
                "Hashable",
                "List[str]"
            ],
            "arguments": {
                "Model": [
                    "str",
                    "List[Callable]",
                    "django.db.models.Model",
                    "list",
                    "List[manager.models.training.Training]"
                ]
            }
        },
        "screened_stocks": {
            "name": "screened_stocks",
            "location": 24,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "multinedb.models.workspace.Workspace",
                "int"
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/utils/stock_financial_statements_etl.py": {
        "fetch_yahoo_responses": {
            "name": "fetch_yahoo_responses",
            "location": 10,
            "return": [
                "dict",
                "Optional[str]",
                "List[dict]",
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "traverse_statement_history": {
            "name": "traverse_statement_history",
            "location": 35,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "Model": [
                    "str",
                    "Optional[str]",
                    "List[float]",
                    "bool",
                    "Dict[str, str]"
                ],
                "isin": [
                    "str",
                    "Optional[str]",
                    "List[float]",
                    "bool",
                    "Dict[str, str]"
                ],
                "statements": [
                    "List[Dict]",
                    "Union[int, float]",
                    "str",
                    "Iterable[str]",
                    "List[Tuple[str, str]]",
                    "bool"
                ]
            }
        },
        "StockFinancialStatementsETL.job": {
            "name": "job",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/utils/stock_info_etl.py": {
        "get_stock_info_soup_table": {
            "name": "get_stock_info_soup_table",
            "location": 19,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "Optional[cmk.utils.type_defs.HostName]",
                "zilencer.models.RemoteZulipServer"
            ],
            "arguments": {
                "response": [
                    "requests.Response",
                    "dict",
                    "rest_framework.response.Response",
                    "scrapy.http.Response",
                    "flask.Response",
                    "Optional[Any]"
                ]
            }
        },
        "create_data_from_soup": {
            "name": "create_data_from_soup",
            "location": 25,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Union[Dict, Tuple]",
                "Dict[str, raiden.utils.Any]",
                "bytes"
            ],
            "arguments": {
                "soup": [
                    "bs4.Tag",
                    "Dict[str, Any]",
                    "Dict[int, Dict[str, Any]]",
                    "dict",
                    "List[Dict]"
                ]
            }
        },
        "StockInfoETL.job": {
            "name": "job",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/utils/stock_valuation_etl.py": {
        "create_database_records": {
            "name": "create_database_records",
            "location": 9,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {}
        },
        "StockValuationETL.job": {
            "name": "job",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/utils/__init__.py": {
        "get_nested": {
            "name": "get_nested",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "dict_": [
                    "str",
                    "dict"
                ]
            }
        },
        "make_yahoo_request": {
            "name": "make_yahoo_request",
            "location": 32,
            "return": [
                "bytes",
                "float",
                "Sequence[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "yahoo_ticker": [
                    "dict",
                    "str"
                ],
                "params": [
                    "dict",
                    "str"
                ]
            }
        },
        "fetch_yahoo_data": {
            "name": "fetch_yahoo_data",
            "location": 38,
            "return": [
                "dict",
                "Optional[str]",
                "List[dict]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "yahoo_ticker": [
                    "bool",
                    "Dict[int, dict]",
                    "memoryview",
                    "Optional[Iterable[str]]",
                    "int"
                ],
                "modules": [
                    "str",
                    "float",
                    "tuple",
                    "bool"
                ]
            }
        },
        "union_of_list_elements": {
            "name": "union_of_list_elements",
            "location": 45,
            "return": [
                "List[str]",
                "str",
                "List[Tuple]"
            ],
            "arguments": {}
        },
        "ApiJSONEncoder.default": {
            "name": "default",
            "location": 9,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "str",
                    "datetime.datetime"
                ]
            }
        }
    },
    "stock_screener-master/utils/models/balance_sheet_statements.py": {
        "BalanceSheetStatement.process_response": {
            "name": "process_response",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "list"
            ],
            "arguments": {
                "cls": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "Dict[str, str]",
                    "raiden.utils.Dict",
                    "Dict[str, Dict[str, Any]]"
                ],
                "response": [
                    "grouper.models.base.session.Session",
                    "Dict[str, Any]"
                ],
                "isin": [
                    "grouper.models.base.session.Session",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "stock_screener-master/utils/models/base.py": {},
    "stock_screener-master/utils/models/cash_flow_statements.py": {
        "CashFlowStatement.process_response": {
            "name": "process_response",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "list"
            ],
            "arguments": {
                "cls": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "Dict[str, str]",
                    "raiden.utils.Dict",
                    "Dict[str, Dict[str, Any]]"
                ],
                "response": [
                    "grouper.models.base.session.Session",
                    "Dict[str, Any]"
                ],
                "isin": [
                    "grouper.models.base.session.Session",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "stock_screener-master/utils/models/income_statements.py": {
        "IncomeStatement.process_response": {
            "name": "process_response",
            "location": 38,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "list"
            ],
            "arguments": {
                "cls": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "Dict[str, str]",
                    "raiden.utils.Dict",
                    "Dict[str, Dict[str, Any]]"
                ],
                "response": [
                    "grouper.models.base.session.Session",
                    "Dict[str, Any]"
                ],
                "isin": [
                    "grouper.models.base.session.Session",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "stock_screener-master/utils/models/prices.py": {
        "Price.process_response": {
            "name": "process_response",
            "location": 25,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "alerta.database.base.Query",
                    "contests.models.User",
                    "users.models.JustfixUser"
                ],
                "response": [
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "Dict[str, Any]"
                ],
                "isin": [
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "stock_screener-master/utils/models/stocks.py": {
        "Stock.parse_yahoo_ticker_from_isin": {
            "name": "parse_yahoo_ticker_from_isin",
            "location": 19,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "record": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "Stock.process_response": {
            "name": "process_response",
            "location": 45,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "list"
            ],
            "arguments": {
                "cls": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "bool",
                    "sqlalchemy.exdeclarative.DeclarativeMeta"
                ],
                "response": [
                    "list",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "stock_screener-master/utils/models/_view_magic_formula_score.py": {},
    "stock_screener-master/utils/models/_view_piotroski_score.py": {},
    "stock_screener-master/utils/models/_view_screen_results.py": {},
    "stock_screener-master/utils/models/__init__.py": {},
    "stock_screener-master/web/app.py": {
        "stocks": {
            "name": "stocks",
            "location": 52,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "make_session_permanent": {
            "name": "make_session_permanent",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 67,
            "return": [
                "bool",
                "str",
                "Dict[int, Any]"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 75,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[bool]",
                "Dict[str, object]"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 83,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[bool]",
                "Dict[str, object]"
            ],
            "arguments": {}
        },
        "ReverseProxied.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "ReverseProxied.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict",
                    "Optional[str]"
                ],
                "start_response": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "stock_screener-master/worker/worker.py": {
        "run_threaded": {
            "name": "run_threaded",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "job_func": [
                    "Callable",
                    "...",
                    "List[str]",
                    "int"
                ]
            }
        },
        "SafeScheduler.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reschedule_on_failure": [
                    "int",
                    "bool"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "SafeScheduler._run_job": {
            "name": "_run_job",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "Callable",
                    "Optional[int]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        }
    },
    "stock_screener-master/worker/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/worker/alembic/versions/00b80735370b_stock_financial_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/worker/alembic/versions/0e87ac62cba4_magic_formula_view.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/worker/alembic/versions/4f406bad1840_screener_results_view.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/worker/alembic/versions/7848c183a286_re_create_screener_results_view.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/worker/alembic/versions/7bfdef0682d4_new_stock_prices_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/worker/alembic/versions/aeee2aa4ad8f_stocks_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "stock_screener-master/worker/alembic/versions/f5cebdfa9f70_piotroski_view.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
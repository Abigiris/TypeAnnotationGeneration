{
    "stratotask-master/src/stratotask/exceptions.py": {},
    "stratotask-master/src/stratotask/models.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "OrderedDict",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Optional[Sequence[Any]]"
                ],
                "bucket_size": [
                    "bool",
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "bucket_rate": [
                    "Optional[List[str]]",
                    "int",
                    "bool",
                    "str",
                    "Sequence"
                ]
            }
        },
        "Queue.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.messages": {
            "name": "messages",
            "location": 52,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Queue.tokens": {
            "name": "tokens",
            "location": 56,
            "return": [
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "cls": [
                    "api.GroupJSON",
                    "int",
                    "bool",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "bool",
                    "float"
                ],
                "queue": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 86,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.queue_id": {
            "name": "queue_id",
            "location": 90,
            "return": [
                "str",
                "dict",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.queue_id": {
            "name": "queue_id",
            "location": 123,
            "return": [
                "str",
                "dict",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.State.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.State.__str__": {
            "name": "__str__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stratotask-master/src/stratotask/operations.py": {
        "refresh_object": {
            "name": "refresh_object",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "nox.sessions.Session",
                    "_pytesmain.Session"
                ],
                "obj": [
                    "sqlalchemy.orm.session.Session",
                    "nox.sessions.Session",
                    "_pytesmain.Session"
                ]
            }
        },
        "get_queue": {
            "name": "get_queue",
            "location": 19,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "Callable[[str], None]"
                ],
                "name": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "Callable[[str], None]"
                ]
            }
        },
        "get_all_queues": {
            "name": "get_all_queues",
            "location": 23,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "nox.sessions.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "create_queue": {
            "name": "create_queue",
            "location": 27,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "sqlalchemy.orm.Session",
                    "int",
                    "grouper.models.base.session.Session",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "bucket_size": [
                    "float",
                    "int",
                    "Union[int, str]"
                ],
                "bucket_rate": [
                    "float",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "get_or_create_queue": {
            "name": "get_or_create_queue",
            "location": 43,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "apistar.backends.sqlalchemy_backend.Session",
                    "grouper.models.base.session.Session"
                ],
                "name": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "apistar.backends.sqlalchemy_backend.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 50,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "List[str]",
                "bytes",
                "excars.models.profiles.Profile"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "recidiviz.persistence.database.session.Session",
                    "grouper.models.base.session.Session",
                    "app.models.User",
                    "sqlalchemy.orm.Session"
                ],
                "payload": [
                    "str",
                    "models.Queue"
                ],
                "queue": [
                    "str",
                    "models.Queue"
                ]
            }
        },
        "get_task": {
            "name": "get_task",
            "location": 61,
            "return": [
                "str",
                "int",
                "Callable[[str, str], None]",
                "daylighdb.models.Photo",
                "bytes",
                "zerver.models.UserProfile",
                "app.models.Game"
            ],
            "arguments": {
                "session": [
                    "mwapi.Session",
                    "grouper.models.service_accounServiceAccount",
                    "domain.Session",
                    "requests.Session",
                    "sqlalchemy.orm.Session",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session"
                ],
                "queue": [
                    "mwapi.Session",
                    "grouper.models.service_accounServiceAccount",
                    "domain.Session",
                    "requests.Session",
                    "sqlalchemy.orm.Session",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "task_ack": {
            "name": "task_ack",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "domain.Session",
                    "int",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "task": [
                    "models.Task",
                    "sqlalchemy.orm.session.Session",
                    "prefeccore.task.Task",
                    "Mapping[str, Any]",
                    "Dict[prefeccore.Task, Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "task_nack": {
            "name": "task_nack",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "domain.Session",
                    "int",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "task": [
                    "models.Task",
                    "sqlalchemy.orm.session.Session",
                    "prefeccore.task.Task",
                    "Mapping[str, Any]",
                    "list",
                    "Dict[prefeccore.Task, Dict[str, Any]]"
                ]
            }
        },
        "create_queue_tokens": {
            "name": "create_queue_tokens",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "yawasscanner.session.Session",
                    "grouper.models.service_accounServiceAccount"
                ],
                "queue": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "models.Queue",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "get_queue_token": {
            "name": "get_queue_token",
            "location": 143,
            "return": [
                "dict",
                "bool",
                "as3.scanner.Token",
                "int",
                "float",
                "List[List[str]]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "models.Queue",
                    "recidiviz.persistence.database.session.Session"
                ],
                "queue": [
                    "models.Queue",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "str"
                ]
            }
        },
        "consume_queue_token": {
            "name": "consume_queue_token",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "models.Token",
                    "requests.Session",
                    "recidiviz.persistence.database.session.Session",
                    "grouper.models.base.session.Session",
                    "nox.sessions.Session",
                    "Optional[str]"
                ],
                "token": [
                    "models.Token",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]",
                    "requests.Session",
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]"
                ]
            }
        },
        "return_queue_token": {
            "name": "return_queue_token",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "models.Token",
                    "grouper.models.base.session.Session",
                    "labm8.py.sqlutil.Session"
                ],
                "token": [
                    "models.Token",
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session",
                    "Dict[str, str]",
                    "Optional[str]",
                    "app.models.RenewToken",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ]
            }
        }
    },
    "stratotask-master/src/stratotask/__init__.py": {},
    "stratotask-master/src/stratotask/__main__.py": {},
    "stratotask-master/src/tests/test_stratotask.py": {
        "session": {
            "name": "session",
            "location": 14,
            "return": [
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "ops": {
            "name": "ops",
            "location": 26,
            "return": [
                "str",
                "bool",
                "models.Profile"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "test_create_some_tasks": {
            "name": "test_create_some_tasks",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "id3c.db.types.KitRecord",
                    "abilian.core.sqlalchemy.SQLAlchemy"
                ],
                "ops": [
                    "int",
                    "bool",
                    "bytes",
                    "deeplearning.ml4pl.models.log_database.Database"
                ]
            }
        },
        "test_does_not_get_task_when_no_tokens_available": {
            "name": "test_does_not_get_task_when_no_tokens_available",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "ops": [
                    "str",
                    "zerver.models.UserProfile",
                    "int"
                ]
            }
        },
        "test_tokens_are_created_as_time_passes": {
            "name": "test_tokens_are_created_as_time_passes",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "id3c.db.types.KitRecord",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]",
                    "bytes"
                ],
                "ops": [
                    "Optional[str]",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "test_gets_tasks": {
            "name": "test_gets_tasks",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "sqlalchemy.orm.Session"
                ],
                "ops": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "str"
                ]
            }
        },
        "test_mark_task_as_incomplete": {
            "name": "test_mark_task_as_incomplete",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool"
                ],
                "ops": [
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "test_mark_task_as_complete": {
            "name": "test_mark_task_as_complete",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool"
                ],
                "ops": [
                    "int",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "stratotask-master/src/tests/__init__.py": {}
}
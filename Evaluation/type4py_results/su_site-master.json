{
    "su_site-master/celeryconfig.py": {},
    "su_site-master/main.py": {
        "load_user": {
            "name": "load_user",
            "location": 30,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "u_id": [
                    "str"
                ]
            }
        },
        "unauth": {
            "name": "unauth",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "manual_grade_retrieve_task": {
            "name": "manual_grade_retrieve_task",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "sky_data": [
                    "Dict[str, Any]",
                    "list",
                    "os.stat_result",
                    "Type['Declared']",
                    "dict"
                ],
                "service": [
                    "Dict[str, Any]",
                    "list",
                    "os.stat_result",
                    "Type['Declared']",
                    "dict"
                ]
            }
        },
        "page_data": {
            "name": "page_data",
            "location": 48,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "hello": {
            "name": "hello",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 89,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 113,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {}
        },
        "profile": {
            "name": "profile",
            "location": 119,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "grades": {
            "name": "grades",
            "location": 127,
            "return": [
                "str",
                "flask.Response",
                "dict"
            ],
            "arguments": {}
        },
        "skyward_page": {
            "name": "skyward_page",
            "location": 135,
            "return": [
                "str",
                "flask.Response",
                "dict"
            ],
            "arguments": {}
        },
        "sky_login": {
            "name": "sky_login",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "get_grades": {
            "name": "get_grades",
            "location": 157,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "check_grades_task": {
            "name": "check_grades_task",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "check_login_task": {
            "name": "check_login_task",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[int]",
                    "Optional[str]"
                ]
            }
        },
        "check_task": {
            "name": "check_task",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "Dict[str, Dict[str, int]]",
                    "Sequence[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "fn": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "cancel_task": {
            "name": "cancel_task",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "Dict[str, Dict[str, int]]",
                    "Sequence[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "check_grades_task.process_grades": {
            "name": "process_grades",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "grades": [
                    "List[skyward_api.SkywardClass]",
                    "str"
                ]
            }
        },
        "check_login_task.process_sky_data": {
            "name": "process_sky_data",
            "location": 196,
            "return": [
                "Union[tuple, list]",
                "Iterable[Hashable]",
                "str"
            ],
            "arguments": {
                "sky_data": [
                    "Dict[str, str]",
                    "dict",
                    "Tuple[int, str, bytearray]",
                    "OrderedDict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "su_site-master/server/notify.py": {
        "wait_for": {
            "name": "wait_for",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "sec": [
                    "int",
                    "float",
                    "str",
                    "Match"
                ],
                "interval": [
                    "int",
                    "float",
                    "str",
                    "Match"
                ]
            }
        },
        "login_to_server": {
            "name": "login_to_server",
            "location": 21,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "find_diff": {
            "name": "find_diff",
            "location": 35,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "u_id": [
                    "str",
                    "int"
                ]
            }
        },
        "send_email": {
            "name": "send_email",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Exception",
                    "Optional[str]"
                ],
                "added": [
                    "List[skyward_api.SkywardClass]",
                    "str",
                    "Optional[str]",
                    "dict",
                    "Iterable[str]",
                    "Optional[Union[float, int]]"
                ],
                "removed": [
                    "List[skyward_api.SkywardClass]",
                    "str",
                    "Optional[str]",
                    "dict",
                    "Iterable[str]",
                    "Optional[Union[float, int]]"
                ]
            }
        },
        "handle_session_error": {
            "name": "handle_session_error",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "u_id": [
                    "str",
                    "int",
                    "float",
                    "Union['KspNativeControl', int]"
                ],
                "email": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "notify": {
            "name": "notify",
            "location": 153,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "notify": [
                    "List[List[str]]",
                    "Optional[socialhome.users.models.Profile]",
                    "str"
                ]
            }
        },
        "keep_alive": {
            "name": "keep_alive",
            "location": 161,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "notify": [
                    "Optional[BaseException]",
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "su_site-master/server/tasks.py": {
        "login_task": {
            "name": "login_task",
            "location": 10,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "service": [
                    "str"
                ]
            }
        },
        "get_grades_task": {
            "name": "get_grades_task",
            "location": 25,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "service": [
                    "Dict[str, Dict[str, float]]",
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "sky_data": [
                    "Dict[str, Dict[str, float]]",
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "su_site-master/server/users.py": {
        "reset_connection": {
            "name": "reset_connection",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_users": {
            "name": "get_users",
            "location": 29,
            "return": [
                "List[str]",
                "str",
                "List[Dict]"
            ],
            "arguments": {}
        },
        "get_user_by_query": {
            "name": "get_user_by_query",
            "location": 36,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "query": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "update_user_by_query": {
            "name": "update_user_by_query",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "id_info": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Dict[int, Dict[str, float]]",
                    "Dict[str, str]"
                ],
                "update_info": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Dict[int, Dict[str, float]]",
                    "Dict[str, str]"
                ]
            }
        },
        "add_user": {
            "name": "add_user",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "make_id": {
            "name": "make_id",
            "location": 146,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "length": [
                    "int",
                    "random.Random"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "Optional[str]",
                    "str"
                ],
                "password1": [
                    "str",
                    "bytes",
                    "Dict[str, bool]"
                ],
                "password2": [
                    "bool",
                    "str",
                    "Type[T]",
                    "numpy.random.RandomState"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 203,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "get_user_by_id": {
            "name": "get_user_by_id",
            "location": 239,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Optional[Any]",
                "Set[int]"
            ],
            "arguments": {
                "u_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "update_user": {
            "name": "update_user",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "u_id": [
                    "str",
                    "Dict[str, Any]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u_id": [
                    "str",
                    "Optional[str]"
                ],
                "email": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Callable[[], bool]]"
                ],
                "sky_data": [
                    "int",
                    "bool",
                    "Optional[\"TrackingData\"]",
                    "bytes",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "Mapping[str, str]",
                    "Optional[Dict]"
                ],
                "service": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Callable[[], bool]]"
                ],
                "grades": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Callable[[], bool]]"
                ]
            }
        },
        "User.from_login": {
            "name": "from_login",
            "location": 70,
            "return": [
                "Type",
                "int"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Dict[str, Any]"
                ],
                "password": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.from_id": {
            "name": "from_id",
            "location": 87,
            "return": [
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "u_id": [
                    "str",
                    "int"
                ]
            }
        },
        "User.is_authenticated": {
            "name": "is_authenticated",
            "location": 99,
            "return": [
                "str",
                "list",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_anonymous": {
            "name": "is_anonymous",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_id": {
            "name": "get_id",
            "location": 109,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.set_sky_data": {
            "name": "set_sky_data",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sky_data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "User.set_service": {
            "name": "set_service",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "bool"
                ]
            }
        },
        "User.set_grades": {
            "name": "set_grades",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grades": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "su_site-master/server/__init__.py": {}
}
{
    "switch_case-master/setup.py": {},
    "switch_case-master/switch_case/case.py": {
        "Case.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Case.__rshift__": {
            "name": "__rshift__",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "Case.match": {
            "name": "match",
            "location": 12,
            "return": [
                "int",
                "Tuple[List[str], int]",
                "bool",
                "SupportsFloat"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "int",
                    "type",
                    "List[str]"
                ]
            }
        },
        "Case.resolve": {
            "name": "resolve",
            "location": 15,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "switch_case-master/switch_case/curry.py": {
        "curry": {
            "name": "curry",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "curry.wrapped": {
            "name": "wrapped",
            "location": 7,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "float",
                "Dict[str, float]",
                "Dict[str, Dict[str, int]]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "switch_case-master/switch_case/infix.py": {
        "Infix.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Infix.__truediv__": {
            "name": "__truediv__",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str"
                ]
            }
        }
    },
    "switch_case-master/switch_case/nil.py": {},
    "switch_case-master/switch_case/operator.py": {
        "Operator.__eq__": {
            "name": "__eq__",
            "location": 9,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operator.__ne__": {
            "name": "__ne__",
            "location": 12,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operator.__lt__": {
            "name": "__lt__",
            "location": 15,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operator.__le__": {
            "name": "__le__",
            "location": 18,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operator.__gt__": {
            "name": "__gt__",
            "location": 21,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operator.__ge__": {
            "name": "__ge__",
            "location": 24,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operator.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "tuple",
                    "List[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "Operator.__truediv__": {
            "name": "__truediv__",
            "location": 30,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        }
    },
    "switch_case-master/switch_case/switch.py": {
        "Switch.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cases": [
                    "str",
                    "IO"
                ],
                "expr": [
                    "str",
                    "IO"
                ]
            }
        },
        "Switch.__or__": {
            "name": "__or__",
            "location": 12,
            "return": [
                "Iterable[int]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Switch.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "float"
                ]
            }
        },
        "Switch.__invert__": {
            "name": "__invert__",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "switch_case-master/switch_case/__init__.py": {},
    "switch_case-master/tests/test_case.py": {
        "TestCase.test_no_args": {
            "name": "test_no_args",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_match": {
            "name": "test_match",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_resolve": {
            "name": "test_resolve",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_resolve_without_value": {
            "name": "test_resolve_without_value",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_factory": {
            "name": "test_factory",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "switch_case-master/tests/test_curry.py": {
        "TestCurry.test_curry_without_args": {
            "name": "test_curry_without_args",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCurry.test_curry_with_args": {
            "name": "test_curry_with_args",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCurry.test_curry_with_kwargs": {
            "name": "test_curry_with_kwargs",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCurry.test_curry_with_args_and_kwargs": {
            "name": "test_curry_with_args_and_kwargs",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "switch_case-master/tests/test_operator.py": {
        "TestOperator.test_eq": {
            "name": "test_eq",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOperator.test_ne": {
            "name": "test_ne",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOperator.test_lt": {
            "name": "test_lt",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOperator.test_le": {
            "name": "test_le",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOperator.test_gt": {
            "name": "test_gt",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOperator.test_ge": {
            "name": "test_ge",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOperator.test_curry": {
            "name": "test_curry",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOperator.test_infix": {
            "name": "test_infix",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOperator.test_alias": {
            "name": "test_alias",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOperator.test_immutable": {
            "name": "test_immutable",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "switch_case-master/tests/test_switch.py": {
        "TestSwitch.test_resolve_single_truthy": {
            "name": "test_resolve_single_truthy",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_resolve_single_falsy": {
            "name": "test_resolve_single_falsy",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_resolve_multiple_truthy": {
            "name": "test_resolve_multiple_truthy",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_resolve_multiple_falsy": {
            "name": "test_resolve_multiple_falsy",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_resolve_multiple_truthy_falsy": {
            "name": "test_resolve_multiple_truthy_falsy",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_switch_single_case": {
            "name": "test_switch_single_case",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_switch_multiple_cases": {
            "name": "test_switch_multiple_cases",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_switch_with_expr": {
            "name": "test_switch_with_expr",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_switch_with_2_expr": {
            "name": "test_switch_with_2_expr",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_switch_without_expr": {
            "name": "test_switch_without_expr",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_switch_without_cases": {
            "name": "test_switch_without_cases",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_switch_resolve": {
            "name": "test_switch_resolve",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_alias": {
            "name": "test_alias",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_immutable": {
            "name": "test_immutable",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwitch.test_immutable_expr": {
            "name": "test_immutable_expr",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "switch_case-master/tests/test_switch_case.py": {
        "TestSwitchCase.test_switch_case": {
            "name": "test_switch_case",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "switch_case-master/tests/__init__.py": {}
}
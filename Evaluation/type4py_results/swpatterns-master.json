{
    "swpatterns-master/setup.py": {},
    "swpatterns-master/swpatterns/composition.py": {
        "Compose": {
            "name": "Compose",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "List[Tuple[str, str, str]]"
                ]
            }
        },
        "_build_field": {
            "name": "_build_field",
            "location": 95,
            "return": [
                "dict",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "field": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "_build_field.getter": {
            "name": "getter",
            "location": 104,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [
                    "str",
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict"
                ]
            }
        },
        "_build_field.setter": {
            "name": "setter",
            "location": 107,
            "return": [
                "Dict[str, int]",
                "int",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [
                    "str",
                    "dict"
                ],
                "value": [
                    "str",
                    "dict"
                ]
            }
        },
        "_build_field.deleter": {
            "name": "deleter",
            "location": 110,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [
                    "str",
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict"
                ]
            }
        },
        "Compose.InheritableComposition.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Type[Any]",
                    "Optional[bytes]"
                ]
            }
        },
        "Compose.InheritableComposition.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "swpatterns-master/swpatterns/interface.py": {
        "implements": {
            "name": "implements",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "interface": [
                    "bool",
                    "str"
                ]
            }
        },
        "isimplementation": {
            "name": "isimplementation",
            "location": 55,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "impl": [
                    "type",
                    "str",
                    "Optional[str]"
                ],
                "interface_or_tuple": [
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_perform_check": {
            "name": "_perform_check",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "impl": [
                    "bool",
                    "Optional[Tuple[str, ...]]"
                ],
                "interface": [
                    "Dict[str, Any]",
                    "type",
                    "Mapping[Any, Any]",
                    "int"
                ],
                "skip_types": [
                    "bool",
                    "int",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "InterfaceMeta.__implementationcheck__": {
            "name": "__implementationcheck__",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "type",
                    "Type"
                ],
                "impl": [
                    "type",
                    "str",
                    "Optional[Union[int, float]]",
                    "bool"
                ]
            }
        },
        "implements.inner": {
            "name": "inner",
            "location": 42,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "swpatterns-master/swpatterns/matching.py": {
        "match": {
            "name": "match",
            "location": 24,
            "return": [
                "float",
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "target": [
                    "dict",
                    "T"
                ]
            }
        },
        "_IMatchBranch.check": {
            "name": "check",
            "location": 50,
            "return": [
                "typing.Optional[typing.Tuple]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MatchBranch.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "symbol": [
                    "Optional[str]",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "MatchBranch.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "check_val": [
                    "str",
                    "Dict[str, Callable]",
                    "bool"
                ]
            }
        },
        "MatchBranch.__rshift__": {
            "name": "__rshift__",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Sequence[Dict]",
                    "List[str]"
                ]
            }
        },
        "MatchBranch.check": {
            "name": "check",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MatchBranch.apply": {
            "name": "apply",
            "location": 75,
            "return": [
                "bool",
                "float",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Literal.check": {
            "name": "check",
            "location": 88,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Conditional.check": {
            "name": "check",
            "location": 100,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Struct.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Struct.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[Any]"
                ],
                "type_": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Struct.check": {
            "name": "check",
            "location": 120,
            "return": [
                "str",
                "int",
                "tuple",
                "Union[List[str], str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "swpatterns-master/swpatterns/__init__.py": {},
    "swpatterns-master/tests/test_composition.py": {
        "TestCompose.test_base": {
            "name": "test_base",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_multiple": {
            "name": "test_multiple",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_rename": {
            "name": "test_rename",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_forwarding_simple": {
            "name": "test_forwarding_simple",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_forwarding_rename": {
            "name": "test_forwarding_rename",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_full": {
            "name": "test_full",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_nobuild": {
            "name": "test_nobuild",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_autobuild": {
            "name": "test_autobuild",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_interface": {
            "name": "test_interface",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_full.A.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TestCompose.test_full.B.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestCompose.test_autobuild.A.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "TestCompose.test_interface.I.test": {
            "name": "test",
            "location": 135,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "dict"
                ]
            }
        },
        "TestCompose.test_interface.A.test": {
            "name": "test",
            "location": 140,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "dict"
                ]
            }
        },
        "TestCompose.test_interface.B.test": {
            "name": "test",
            "location": 144,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "dict"
                ]
            }
        }
    },
    "swpatterns-master/tests/test_interface.py": {
        "TestInterface.test_simple": {
            "name": "test_simple",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInterface.test_staticmethod": {
            "name": "test_staticmethod",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInterface.test_classmethod": {
            "name": "test_classmethod",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInterface.test_type": {
            "name": "test_type",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInterface.test_partialtypes": {
            "name": "test_partialtypes",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInterface.test_simple.I.test": {
            "name": "test",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "TestInterface.test_simple.A.test": {
            "name": "test",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "TestInterface.test_staticmethod.I.test": {
            "name": "test",
            "location": 27,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "TestInterface.test_staticmethod.A.test": {
            "name": "test",
            "location": 33,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "TestInterface.test_classmethod.I.test": {
            "name": "test",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "a": []
            }
        },
        "TestInterface.test_classmethod.A.test": {
            "name": "test",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "a": []
            }
        },
        "TestInterface.test_type.I.test": {
            "name": "test",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "TestInterface.test_type.A.test": {
            "name": "test",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "TestInterface.test_type.C.test": {
            "name": "test",
            "location": 77,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "TestInterface.test_type.D.test": {
            "name": "test",
            "location": 84,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "TestInterface.test_partialtypes.I.test": {
            "name": "test",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "dict"
                ]
            }
        },
        "TestInterface.test_partialtypes.A.test": {
            "name": "test",
            "location": 98,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "dict"
                ]
            }
        },
        "TestInterface.test_type.B.test": {
            "name": "test",
            "location": 72,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "swpatterns-master/tests/test_matching.py": {
        "TestMatching.test_simple": {
            "name": "test_simple",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatching.test_default": {
            "name": "test_default",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatching.test_callable": {
            "name": "test_callable",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatching.test_branch_condition": {
            "name": "test_branch_condition",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatching.test_branch_struct": {
            "name": "test_branch_struct",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatching.test_branch_struct.A.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "swpatterns-master/tests/__init__.py": {},
    "swpatterns-master/tests/__main__.py": {}
}
{
    "taggy-master/setup.py": {},
    "taggy-master/taggy/cli.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 29,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "args": []
            }
        },
        "is_git_repo": {
            "name": "is_git_repo",
            "location": 75,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "sanitize": {
            "name": "sanitize",
            "location": 82,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str"
                ]
            }
        },
        "color_diff": {
            "name": "color_diff",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "diff": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_tag": {
            "name": "get_tag",
            "location": 105,
            "return": [
                "Sequence",
                "Callable[[KT], VT]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "default": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "create_tag": {
            "name": "create_tag",
            "location": 122,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "tag": [
                    "str",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "find_and_replace": {
            "name": "find_and_replace",
            "location": 131,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "target": [
                    "str",
                    "int",
                    "list"
                ],
                "old": [
                    "str",
                    "int"
                ],
                "new": [
                    "str",
                    "int"
                ],
                "preview": [
                    "List[float]",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "strip_prefix": {
            "name": "strip_prefix",
            "location": 159,
            "return": [
                "str",
                "Set[str]",
                "Union[str, Sequence[str]]",
                "MutableSet[str]"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "runchecks": {
            "name": "runchecks",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "cwd": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "taggy-master/taggy/prompts.py": {
        "build_choices": {
            "name": "build_choices",
            "location": 14,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "int",
                "str"
            ],
            "arguments": {
                "choices": [
                    "bool",
                    "str"
                ],
                "allow_prefix": [
                    "bool",
                    "str"
                ]
            }
        },
        "_prompt_choice": {
            "name": "_prompt_choice",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "question": [
                    "List[int]",
                    "int",
                    "bool"
                ],
                "options": [
                    "dict",
                    "Union[str, bytes]",
                    "Dict[str, Union[str, bool]]"
                ],
                "lower": [
                    "List[Dict[str, Any]]",
                    "List[object]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "choice": {
            "name": "choice",
            "location": 33,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, int]",
                "Callable"
            ],
            "arguments": {
                "question": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[int, Dict[int, Any]]",
                    "dict",
                    "bool",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "choices": [
                    "dict",
                    "str",
                    "int"
                ],
                "allow_prefix": [
                    "dict",
                    "str",
                    "int"
                ],
                "lower": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "prompt": {
            "name": "prompt",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "question": [
                    "int",
                    "Callable",
                    "str"
                ],
                "lower": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "confirm": {
            "name": "confirm",
            "location": 50,
            "return": [
                "List[Dict[str, Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "question": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "WriteOnceDict.__setitem__": {
            "name": "__setitem__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "taggy-master/taggy/semver.py": {
        "pad": {
            "name": "pad",
            "location": 9,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int, int]"
                ],
                "size": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int, int]"
                ],
                "padding": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "InvalidSemanticVersion.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "Union[str, float]"
                ]
            }
        },
        "InvalidSemanticVersion.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semver.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "Semver.components": {
            "name": "components",
            "location": 43,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semver.valstrings": {
            "name": "valstrings",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semver.bump": {
            "name": "bump",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "part": [
                    "dict",
                    "Dict[str, Type]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Semver.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Semver.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taggy-master/taggy/__init__.py": {},
    "taggy-master/tests/test_cli.py": {
        "TestArgumentParsing.test_calls_system_exit_on_invalid_args": {
            "name": "test_calls_system_exit_on_invalid_args",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "int"
                ]
            }
        },
        "TestArgumentParsing.test_provides_default_message": {
            "name": "test_provides_default_message",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgumentParsing.test_parses_files": {
            "name": "test_parses_files",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgumentParsing.test_parses_message": {
            "name": "test_parses_message",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgumentParsing.test_no_color_flag_disables_crayons": {
            "name": "test_no_color_flag_disables_crayons",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_crayons": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestArgumentParsing.test_version_flag": {
            "name": "test_version_flag",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_version": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "capsys": [
                    "int",
                    "str"
                ]
            }
        },
        "TestUtils.test_is_git_repo": {
            "name": "test_is_git_repo",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_run": [
                    "Callable[[], int]",
                    "mock.Mock"
                ]
            }
        },
        "TestUtils.test_sanitize": {
            "name": "test_sanitize",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_color_diff": {
            "name": "test_color_diff",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_crayons": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestUtils.test_get_tag": {
            "name": "test_get_tag",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_run": [
                    "Callable[[], int]"
                ]
            }
        },
        "TestUtils.test_get_tag_on_error": {
            "name": "test_get_tag_on_error",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_run": [
                    "Callable[[], int]",
                    "mock.Mock"
                ]
            }
        },
        "TestUtils.test_create_tag": {
            "name": "test_create_tag",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_run": [
                    "unittesmock.Mock"
                ]
            }
        },
        "TestUtils.test_strip_prefix": {
            "name": "test_strip_prefix",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunChecks.test_aborts_if_git_executable_not_found": {
            "name": "test_aborts_if_git_executable_not_found",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_which": [
                    "mock.Mock"
                ]
            }
        },
        "TestRunChecks.aborts_if_not_git_repository": {
            "name": "aborts_if_not_git_repository",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_is_git_repo": [
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "TestRunChecks.test_prompts_git_repo_creation": {
            "name": "test_prompts_git_repo_creation",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "unittesmock.Mock",
                    "List[Tuple[int, int, float]]"
                ],
                "mock_confirm": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "capsys": [
                    "unittesmock.Mock",
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "TestRunChecks.test_creates_git_repo_on_confirm": {
            "name": "test_creates_git_repo_on_confirm",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_run": [
                    "unittesmock.Mock",
                    "str",
                    "int",
                    "mock.Mock"
                ],
                "_": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "__": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestRunChecks.test_runcheck_returns_none_if_valid": {
            "name": "test_runcheck_returns_none_if_valid",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_is_git_repo": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestFindAndReplace.test_with_preview": {
            "name": "test_with_preview",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_mkstemp": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_remove": []
            }
        },
        "TestFindAndReplace.test_replaces_content": {
            "name": "test_replaces_content",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_mkstemp": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "mock_copy": []
            }
        },
        "TestInitalTagCreation.test_prompts_for_tag_creation": {
            "name": "test_prompts_for_tag_creation",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "tests.async_mock.Mock",
                    "Type"
                ],
                "__": [
                    "tests.async_mock.Mock",
                    "Type"
                ],
                "___": [
                    "tests.async_mock.Mock",
                    "Type"
                ]
            }
        },
        "TestInitalTagCreation.test_creates_tag_on_confirmation": {
            "name": "test_creates_tag_on_confirmation",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_create": [
                    "mock.Mock",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "_": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "__": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "___": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestHandlesArgs.test_prompts_for_bump_arg": {
            "name": "test_prompts_for_bump_arg",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_choice": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "__": [
                    "mock.Mock"
                ],
                "___": [
                    "mock.Mock"
                ]
            }
        },
        "TestHandlesArgs.test_prints_preview": {
            "name": "test_prints_preview",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Mapping[str, Any]",
                    "str"
                ],
                "__": [
                    "str",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "TestWithFilePositionalArgs.setup_class": {
            "name": "setup_class",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "argparse.Namespace",
                    "dict",
                    "IO",
                    "Sequence[str]"
                ]
            }
        },
        "TestWithFilePositionalArgs.test_shows_file_diffs_on_preview": {
            "name": "test_shows_file_diffs_on_preview",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_args": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "_": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock",
                    "Generator[None, Any, None]"
                ],
                "__": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock",
                    "Generator[None, Any, None]"
                ],
                "___": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock",
                    "Generator[None, Any, None]"
                ],
                "capsys": [
                    "unittesmock.Mock",
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "TestWithFilePositionalArgs.test_commits_changes": {
            "name": "test_commits_changes",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_args": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "_": [
                    "mock.Mock",
                    "Generator[None, Any, None]",
                    "mock.MagicMock"
                ],
                "__": [
                    "mock.Mock",
                    "Generator[None, Any, None]",
                    "mock.MagicMock"
                ],
                "___": [
                    "mock.Mock",
                    "Generator[None, Any, None]",
                    "mock.MagicMock"
                ],
                "capsys": [
                    "mock.Mock",
                    "Generator[None, Any, None]",
                    "mock.MagicMock"
                ]
            }
        },
        "TestWithFilePositionalArgs.test_skip_commit_on_prompt": {
            "name": "test_skip_commit_on_prompt",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_args": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "mock_run": [
                    "unittesmock.Mock"
                ],
                "_": [
                    "mock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "__": [
                    "mock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "capsys": [
                    "mock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        },
        "TestTagCreation.test_handles_prefix": {
            "name": "test_handles_prefix",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_create_tag": [],
                "_": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "List[T]"
                ],
                "__": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "List[T]"
                ]
            }
        },
        "TestTagCreation.test_success_message": {
            "name": "test_success_message",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_create_tag": [],
                "_": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "List[T]"
                ],
                "__": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "List[T]"
                ],
                "capsys": [
                    "List[Tuple[int, int, float]]",
                    "bool"
                ]
            }
        }
    },
    "taggy-master/tests/test_prompts.py": {
        "test_prompt_lowers_input": {
            "name": "test_prompt_lowers_input",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_prompt_quits_on_interrupt": {
            "name": "test_prompt_quits_on_interrupt",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "mock_input": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_confirm": {
            "name": "test_confirm",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_choice_accepts_prefix": {
            "name": "test_choice_accepts_prefix",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_choice_lowers_case": {
            "name": "test_choice_lowers_case",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_choice_case_insensitive_by_default": {
            "name": "test_choice_case_insensitive_by_default",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "mock_input": [
                    "mock.Mock"
                ]
            }
        },
        "test_choice_with_lower_disabled": {
            "name": "test_choice_with_lower_disabled",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "mock_input": [
                    "mock.Mock"
                ]
            }
        },
        "test_choice_retries_on_failure": {
            "name": "test_choice_retries_on_failure",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "mock_input": [
                    "mock.Mock"
                ]
            }
        },
        "test_build_choices_with_prefix": {
            "name": "test_build_choices_with_prefix",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_choices_with_duplicate_keys": {
            "name": "test_build_choices_with_duplicate_keys",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "taggy-master/tests/test_semver.py": {
        "test_semver": {
            "name": "test_semver",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "List[List[int]]",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "part": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_parse_zero_prerelease": {
            "name": "test_should_parse_zero_prerelease",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_parse_version": {
            "name": "test_should_parse_version",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "check_validity": {
            "name": "check_validity",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "tag": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_raises_exception_on_invalid_prerelease": {
            "name": "test_raises_exception_on_invalid_prerelease",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_raises_exception_on_missing_part": {
            "name": "test_raises_exception_on_missing_part",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
{
    "tangent-backend-master/backend/manage.py": {},
    "tangent-backend-master/backend/backend/settings.py": {},
    "tangent-backend-master/backend/backend/urls.py": {},
    "tangent-backend-master/backend/backend/wsgi.py": {},
    "tangent-backend-master/backend/backend/__init__.py": {},
    "tangent-backend-master/backend/employees/admin.py": {},
    "tangent-backend-master/backend/employees/apps.py": {},
    "tangent-backend-master/backend/employees/models.py": {
        "Employee.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tangent-backend-master/backend/employees/permissions.py": {
        "CanListCreateDelete.has_permission": {
            "name": "has_permission",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "dict"
                ],
                "view": [
                    "rest_framework.requesRequest",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "IsOwnerOrManager.has_object_permission": {
            "name": "has_object_permission",
            "location": 40,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "str"
                ],
                "view": [
                    "dict"
                ],
                "obj": [
                    "rest_framework.requesRequest",
                    "str"
                ]
            }
        }
    },
    "tangent-backend-master/backend/employees/serializers.py": {
        "ManagerSerializer.create": {
            "name": "create",
            "location": 33,
            "return": [
                "core.models.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "bytes",
                    "MutableMapping",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "ManagerSerializer.update": {
            "name": "update",
            "location": 49,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "employees.models.Employee",
                    "str",
                    "Optional[Dict]",
                    "bytes",
                    "T"
                ],
                "validated_data": [
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "Dict[str, str]",
                    "Mapping[str, str]",
                    "list"
                ]
            }
        }
    },
    "tangent-backend-master/backend/employees/urls.py": {},
    "tangent-backend-master/backend/employees/views.py": {
        "EmployeeViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 46,
            "return": [
                "str",
                "List[str]",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeeViewSet.current_employee": {
            "name": "current_employee",
            "location": 61,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "Callable"
                ]
            }
        }
    },
    "tangent-backend-master/backend/employees/__init__.py": {},
    "tangent-backend-master/backend/employees/migrations/0001_initial.py": {},
    "tangent-backend-master/backend/employees/migrations/__init__.py": {},
    "tangent-backend-master/backend/employees/tests/test_permissions.py": {
        "EmployeePermissionTests.test_manager_can_list": {
            "name": "test_manager_can_list",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeePermissionTests.test_non_manager_cannot_list": {
            "name": "test_non_manager_cannot_list",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeePermissionTests.test_manager_can_view_another_employee": {
            "name": "test_manager_can_view_another_employee",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeePermissionTests.test_manager_can_update_another_employee": {
            "name": "test_manager_can_update_another_employee",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeePermissionTests.test_non_manager_cannot_view_another_employee": {
            "name": "test_non_manager_cannot_view_another_employee",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeePermissionTests.test_non_manager_cannot_update_another_employee": {
            "name": "test_non_manager_cannot_update_another_employee",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tangent-backend-master/backend/employees/tests/__init__.py": {}
}
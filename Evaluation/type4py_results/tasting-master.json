{
    "tasting-master/setup.py": {},
    "tasting-master/docs/conf.py": {},
    "tasting-master/tasting/decorators.py": {
        "Checkpoint.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Needs.__call__": {
            "name": "__call__",
            "location": 55,
            "return": [
                "List[Callable]",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "NeedsDecorator.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "NeedsGenerator.__getattr__": {
            "name": "__getattr__",
            "location": 79,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Checkpoint.__call__.wrapper": {
            "name": "wrapper",
            "location": 35,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "NeedsDecorator.__call__.wrapper": {
            "name": "wrapper",
            "location": 67,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "tasting-master/tasting/pytest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_cmdline_main": {
            "name": "pytest_cmdline_main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "list",
                    "Iterable"
                ],
                "exitstatus": [
                    "str",
                    "list",
                    "Iterable"
                ]
            }
        }
    },
    "tasting-master/tasting/report.py": {
        "is_checkpoint": {
            "name": "is_checkpoint",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "frame": [
                    "str",
                    "int"
                ]
            }
        },
        "get_checkpoint": {
            "name": "get_checkpoint",
            "location": 25,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "frame": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ],
                "lineno": [
                    "str",
                    "int"
                ]
            }
        },
        "record": {
            "name": "record",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "needs": [
                    "str"
                ],
                "checkpoint": [
                    "str"
                ]
            }
        },
        "results": {
            "name": "results",
            "location": 50,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "tasting-master/tasting/__init__.py": {},
    "tasting-master/tests/conftest.py": {
        "taste": {
            "name": "taste",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "needs": {
            "name": "needs",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "checkpoint": {
            "name": "checkpoint",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "simple_nesting": {
            "name": "simple_nesting",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "needs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "checkpoint": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "simple_nesting.inner": {
            "name": "inner",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "simple_nesting.outer": {
            "name": "outer",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "tasting-master/tests/test_simple_nesting.py": {
        "test_finds_direct_parent": {
            "name": "test_finds_direct_parent",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "taste": [],
                "needs": [],
                "checkpoint": [],
                "simple_nesting": []
            }
        }
    },
    "tasting-master/tests/test_tasting_not_tasting.py": {
        "func": {
            "name": "func",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_functions_unaltered_when_not_tasting": {
            "name": "test_functions_unaltered_when_not_tasting",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_functions_altered_when_tasting": {
            "name": "test_functions_altered_when_tasting",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "taste": [
                    "str"
                ]
            }
        },
        "test_pytest_flag_tastes": {
            "name": "test_pytest_flag_tastes",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    }
}
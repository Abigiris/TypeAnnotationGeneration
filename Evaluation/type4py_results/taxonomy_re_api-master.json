{
    "taxonomy_re_api-master/src/exceptions.py": {
        "MethodNotFound.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "REError.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "int",
                    "Optional[Callable]",
                    "Dict[str, str]"
                ]
            }
        },
        "REError.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy_re_api-master/src/__init__.py": {},
    "taxonomy_re_api-master/src/server/main.py": {
        "transform_taxon_results": {
            "name": "transform_taxon_results",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "taxa": [
                    "int",
                    "List[List[int]]"
                ],
                "ns": [
                    "int",
                    "Tuple[float, float]",
                    "list",
                    "float"
                ],
                "ns_config": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "transform_query_params": {
            "name": "transform_query_params",
            "location": 34,
            "return": [
                "str",
                "raiden.utils.Address",
                "bool",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "required_ns_fields": [
                    "bool",
                    "str",
                    "type"
                ],
                "field_name_remappings": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_get_taxon": {
            "name": "_get_taxon",
            "location": 85,
            "return": [
                "int",
                "bool",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "headers": [
                    "int"
                ]
            }
        },
        "_get_taxon_from_ws_obj": {
            "name": "_get_taxon_from_ws_obj",
            "location": 98,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "ValuesView",
                    "Dict[str, Any]",
                    "dict"
                ],
                "headers": [
                    "int",
                    "str"
                ]
            }
        },
        "_get_lineage": {
            "name": "_get_lineage",
            "location": 111,
            "return": [
                "int",
                "bool",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "headers": [
                    "int"
                ]
            }
        },
        "_get_children": {
            "name": "_get_children",
            "location": 124,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "params": [
                    "str",
                    "dict"
                ],
                "headers": [
                    "int"
                ]
            }
        },
        "_get_siblings": {
            "name": "_get_siblings",
            "location": 138,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "params": [
                    "str",
                    "dict"
                ],
                "headers": [
                    "int"
                ]
            }
        },
        "_search_taxa": {
            "name": "_search_taxa",
            "location": 152,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "str"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "dict",
                    "Optional[Tuple]",
                    "str",
                    "List[Callable]",
                    "Dict[str, List[dict]]"
                ],
                "headers": [
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "_search_species": {
            "name": "_search_species",
            "location": 171,
            "return": [
                "int",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "str",
                "Optional[int]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "params": [
                    "Optional['models.LTI1p3Provider']",
                    "str",
                    "ValuesView",
                    "raiden.utils.Dict"
                ],
                "headers": [
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "_get_associated_ws_objects": {
            "name": "_get_associated_ws_objects",
            "location": 221,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bool",
                    "Optional['models.LTI1p3Provider']",
                    "ValuesView"
                ],
                "headers": [
                    "List[Dict[str, Any]]",
                    "Dict[str, str]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "_get_data_sources": {
            "name": "_get_data_sources",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "params": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[dict]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool"
                ],
                "headers": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "_rpc_resp": {
            "name": "_rpc_resp",
            "location": 278,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "req": [
                    "str",
                    "Optional[str]",
                    "Awaitable",
                    "int"
                ],
                "resp": [
                    "Optional[str]",
                    "dict",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ],
                "status": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "get_json_type": {
            "name": "get_json_type",
            "location": 294,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "json_value": [
                    "str",
                    "tuple",
                    "Callable",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "taxonomy_re_api-master/src/server/__init__.py": {},
    "taxonomy_re_api-master/src/test/test_base.py": {
        "api_url": {
            "name": "api_url",
            "location": 7,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "verify_ssl": {
            "name": "verify_ssl",
            "location": 11,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "TestBase.assert_is_jsonrpc_base": {
            "name": "assert_is_jsonrpc_base",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rpc_response": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestBase.assert_is_error_response": {
            "name": "assert_is_error_response",
            "location": 33,
            "return": [
                "str",
                "List[str]",
                "Optional[Set[str]]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "rpc_response": [
                    "str",
                    "Dict[str, Tuple[Any, Any]]",
                    "Optional[Callable]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "code": [
                    "str",
                    "Union[None, dict]",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "message": [
                    "str",
                    "Union[None, dict]",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "error": [
                    "Optional[T]",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "TestBase.assert_is_result_response": {
            "name": "assert_is_result_response",
            "location": 52,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": [],
                "rpc_response": [
                    "dict",
                    "Dict[int, Dict[str, Any]]",
                    "Dict[str, float]",
                    "Dict[str, str]"
                ]
            }
        },
        "TestBase.assert_query_results": {
            "name": "assert_query_results",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sciname_target": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int"
                ],
                "search_text_exp_hit": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "search_text_exp_miss": [
                    "str",
                    "list",
                    "bool",
                    "float"
                ],
                "expired": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "TestBase.request": {
            "name": "request",
            "location": 90,
            "return": [
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "rpc": [
                    "dict",
                    "Callable",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "taxonomy_re_api-master/src/test/__init__.py": {},
    "taxonomy_re_api-master/src/test/integration/test_integration.py": {
        "TestIntegration.test_status": {
            "name": "test_status",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_lineage": {
            "name": "test_get_lineage",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_children": {
            "name": "test_get_children",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_children_search": {
            "name": "test_get_children_search",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_siblings": {
            "name": "test_get_siblings",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_taxon": {
            "name": "test_get_taxon",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_taxa": {
            "name": "test_search_taxa",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_species_gtdb": {
            "name": "test_search_species_gtdb",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_species": {
            "name": "test_search_species",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_species__syntax": {
            "name": "test_search_species__syntax",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_species__exact_hit": {
            "name": "test_search_species__exact_hit",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_associated_ws_objects": {
            "name": "test_get_associated_ws_objects",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_get_taxon_from_ws_obj": {
            "name": "test_get_taxon_from_ws_obj",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_search_taxa_rdp": {
            "name": "test_search_taxa_rdp",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy_re_api-master/src/test/integration/test_jsonrpc.py": {
        "TestJSONRPC.test_invalid_http_method": {
            "name": "test_invalid_http_method",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_string": {
            "name": "test_invalid_params_type_string",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_boolean": {
            "name": "test_invalid_params_type_boolean",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_number1": {
            "name": "test_invalid_params_type_number1",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_number2": {
            "name": "test_invalid_params_type_number2",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_null": {
            "name": "test_invalid_params_type_null",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_params_type_object": {
            "name": "test_invalid_params_type_object",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_missing_method": {
            "name": "test_missing_method",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_invalid_method_type": {
            "name": "test_invalid_method_type",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_unknown_method": {
            "name": "test_unknown_method",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRPC.test_missing_params": {
            "name": "test_missing_params",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy_re_api-master/src/test/integration/__init__.py": {},
    "taxonomy_re_api-master/src/test/local_integration/test_get_data_sources.py": {
        "TestGetDataSources.test_get_data_sources_all_null_ns": {
            "name": "test_get_data_sources_all_null_ns",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_all_missing_ns": {
            "name": "test_get_data_sources_all_missing_ns",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_all_no_params": {
            "name": "test_get_data_sources_all_no_params",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_with_filtering_one": {
            "name": "test_get_data_sources_with_filtering_one",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_with_filtering_three": {
            "name": "test_get_data_sources_with_filtering_three",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_bad_ns": {
            "name": "test_get_data_sources_bad_ns",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_provide_undefined_param": {
            "name": "test_get_data_sources_provide_undefined_param",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_missing_method": {
            "name": "test_get_data_sources_missing_method",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDataSources.test_get_data_sources_missing_params": {
            "name": "test_get_data_sources_missing_params",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taxonomy_re_api-master/src/test/local_integration/__init__.py": {},
    "taxonomy_re_api-master/src/test/unit/test_misc.py": {
        "test_validate_search_text": {
            "name": "test_validate_search_text",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "taxonomy_re_api-master/src/utils/config.py": {
        "get_config": {
            "name": "get_config",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "taxonomy_re_api-master/src/utils/re_api.py": {
        "query": {
            "name": "query",
            "location": 12,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable[..., T]"
                ],
                "params": [
                    "str",
                    "Callable[..., T]"
                ],
                "tok": [
                    "str",
                    "Callable[..., T]"
                ]
            }
        }
    },
    "taxonomy_re_api-master/src/utils/schemas.py": {
        "load_schemas": {
            "name": "load_schemas",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "taxonomy_re_api-master/src/utils/search.py": {
        "clean_search_text": {
            "name": "clean_search_text",
            "location": 4,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "taxonomy_re_api-master/src/utils/wait_for_services.py": {
        "wait_for_app": {
            "name": "wait_for_app",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "taxonomy_re_api-master/src/utils/__init__.py": {}
}
{
    "terrazero-master/code/play.py": {},
    "terrazero-master/code/alphazero/Arena.py": {
        "Arena.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "player1": [
                    "dict",
                    "bool"
                ],
                "player2": [
                    "dict",
                    "bool"
                ],
                "game": [
                    "dict",
                    "bool"
                ],
                "display": [
                    "dict",
                    "bool"
                ]
            }
        },
        "Arena.playGame": {
            "name": "playGame",
            "location": 26,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "List[str]"
                ]
            }
        },
        "Arena.playGames": {
            "name": "playGames",
            "location": 60,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.CheckPluginName.Str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/Coach.py": {
        "Coach.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ],
                "nnet": [
                    "str"
                ],
                "args": []
            }
        },
        "Coach.executeEpisode": {
            "name": "executeEpisode",
            "location": 25,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coach.learn": {
            "name": "learn",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Coach.getCheckpointFile": {
            "name": "getCheckpointFile",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "iteration": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Coach.saveTrainExamples": {
            "name": "saveTrainExamples",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iteration": [
                    "str",
                    "int"
                ]
            }
        },
        "Coach.loadTrainExamples": {
            "name": "loadTrainExamples",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/alphazero/Game.py": {
        "Game.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.getInitBoard": {
            "name": "getInitBoard",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.getBoardSize": {
            "name": "getBoardSize",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.getActionSize": {
            "name": "getActionSize",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.getNextState": {
            "name": "getNextState",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "tuple",
                    "int",
                    "bool"
                ],
                "player": [
                    "tuple",
                    "int",
                    "bool"
                ],
                "action": [
                    "tuple",
                    "int",
                    "bool"
                ]
            }
        },
        "Game.getValidMoves": {
            "name": "getValidMoves",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "Optional[List[str]]",
                    "str"
                ],
                "player": [
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "Game.getGameEnded": {
            "name": "getGameEnded",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "player": [
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Game.getCanonicalForm": {
            "name": "getCanonicalForm",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "player": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Game.getSymmetries": {
            "name": "getSymmetries",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "pi": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Game.stringRepresentation": {
            "name": "stringRepresentation",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "int",
                    "bool",
                    "Union[int, Tuple[int, ...]]"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/main.py": {},
    "terrazero-master/code/alphazero/MCTS.py": {
        "MCTS.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ],
                "nnet": [
                    "Tuple[int, int]",
                    "str"
                ],
                "args": []
            }
        },
        "MCTS.getActionProb": {
            "name": "getActionProb",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "canonicalBoard": [
                    "float",
                    "int",
                    "str"
                ],
                "temp": [
                    "numpy.ndarray",
                    "Set[Optional[str]]",
                    "list",
                    "str"
                ]
            }
        },
        "MCTS.search": {
            "name": "search",
            "location": 48,
            "return": [
                "List[str]",
                "Optional[str]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "canonicalBoard": [
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/NeuralNet.py": {
        "NeuralNet.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int",
                    "bool",
                    "Optional[\"Game\"]"
                ]
            }
        },
        "NeuralNet.train": {
            "name": "train",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NeuralNet.predict": {
            "name": "predict",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NeuralNet.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "NeuralNet.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[int]"
                ],
                "filename": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pit.py": {},
    "terrazero-master/code/alphazero/utils.py": {
        "dotdict.__getattr__": {
            "name": "__getattr__",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/connect4/Connect4Game.py": {
        "display": {
            "name": "display",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "board": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Connect4Game.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "str",
                    "float"
                ],
                "width": [
                    "int",
                    "str",
                    "float"
                ],
                "win_length": [
                    "int",
                    "str",
                    "float"
                ],
                "np_pieces": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Connect4Game.getInitBoard": {
            "name": "getInitBoard",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect4Game.getBoardSize": {
            "name": "getBoardSize",
            "location": 21,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect4Game.getActionSize": {
            "name": "getActionSize",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect4Game.getNextState": {
            "name": "getNextState",
            "location": 27,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "tuple",
                    "Optional[int]",
                    "str",
                    "bytes"
                ],
                "player": [
                    "str",
                    "Iterable[str]",
                    "Union[str, bytes]"
                ],
                "action": [
                    "str",
                    "Union[str, bytes]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "Connect4Game.getValidMoves": {
            "name": "getValidMoves",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "player": [
                    "Optional[List[str]]",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "Connect4Game.getGameEnded": {
            "name": "getGameEnded",
            "location": 37,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "Callable"
                ],
                "player": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Connect4Game.getCanonicalForm": {
            "name": "getCanonicalForm",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "bool"
                ],
                "player": [
                    "str",
                    "bool"
                ]
            }
        },
        "Connect4Game.getSymmetries": {
            "name": "getSymmetries",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "bool"
                ],
                "pi": [
                    "str",
                    "bool"
                ]
            }
        },
        "Connect4Game.stringRepresentation": {
            "name": "stringRepresentation",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/connect4/Connect4Logic.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "List[int]"
                ],
                "width": [
                    "int",
                    "List[int]",
                    "Callable"
                ],
                "win_length": [
                    "int",
                    "float"
                ],
                "np_pieces": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Board.add_stone": {
            "name": "add_stone",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "column": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "player": [
                    "Optional[Set[str]]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Board.get_valid_moves": {
            "name": "get_valid_moves",
            "location": 36,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_win_state": {
            "name": "get_win_state",
            "location": 40,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.with_np_pieces": {
            "name": "with_np_pieces",
            "location": 56,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "np_pieces": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "Board._is_diagonal_winner": {
            "name": "_is_diagonal_winner",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player_pieces": [
                    "List[int]",
                    "List[Tuple[int, int]]",
                    "List[float]",
                    "List[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "Board._is_straight_winner": {
            "name": "_is_straight_winner",
            "location": 74,
            "return": [
                "Union[List[float], List[int]]",
                "str",
                "Sequence['cirq.Qid']",
                "List[List[Any]]",
                "tuple",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "player_pieces": [
                    "Iterable",
                    "Iterable[Any]",
                    "List[numpy.array]",
                    "list",
                    "str"
                ]
            }
        },
        "Board.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/alphazero/connect4/Connect4Players.py": {
        "RandomPlayer.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "RandomPlayer.play": {
            "name": "play",
            "location": 8,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "HumanConnect4Player.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "HumanConnect4Player.play": {
            "name": "play",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "OneStepLookaheadConnect4Player.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ],
                "verbose": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "OneStepLookaheadConnect4Player.play": {
            "name": "play",
            "location": 38,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "board": []
            }
        }
    },
    "terrazero-master/code/alphazero/connect4/test_connect4.py": {
        "init_board_from_moves": {
            "name": "init_board_from_moves",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "moves": [
                    "int",
                    "str"
                ],
                "height": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "width": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "init_board_from_array": {
            "name": "init_board_from_array",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "board": [
                    "str",
                    "list",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "int"
                ],
                "player": [
                    "str",
                    "int",
                    "Generator",
                    "float"
                ]
            }
        },
        "test_simple_moves": {
            "name": "test_simple_moves",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_overfull_column": {
            "name": "test_overfull_column",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_valid_moves": {
            "name": "test_get_valid_moves",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_symmetries": {
            "name": "test_symmetries",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_game_ended": {
            "name": "test_game_ended",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_immutable_move": {
            "name": "test_immutable_move",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "terrazero-master/code/alphazero/connect4/__init__.py": {},
    "terrazero-master/code/alphazero/connect4/tensorflow/Connect4NNet.py": {
        "Connect4NNet.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "slice"
                ],
                "args": []
            }
        },
        "Connect4NNet.conv2d": {
            "name": "conv2d",
            "location": 45,
            "return": [
                "str",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bool",
                    "Iterable[Any]"
                ],
                "out_channels": [
                    "int",
                    "bool",
                    "Iterable[Any]"
                ],
                "padding": [
                    "int",
                    "bool",
                    "Iterable[Any]"
                ]
            }
        },
        "Connect4NNet.calculate_loss": {
            "name": "calculate_loss",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/alphazero/connect4/tensorflow/NNet.py": {
        "NNetWrapper.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int"
                ]
            }
        },
        "NNetWrapper.train": {
            "name": "train",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "numpy.ndarray",
                    "Sequence[T]"
                ]
            }
        },
        "NNetWrapper.predict": {
            "name": "predict",
            "location": 92,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "bool",
                    "float",
                    "list"
                ]
            }
        },
        "NNetWrapper.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "NNetWrapper.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/connect4/tensorflow/__init__.py": {},
    "terrazero-master/code/alphazero/gobang/GobangGame.py": {
        "display": {
            "name": "display",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "board": [
                    "str",
                    "Callable",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "GobangGame.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "nir": [
                    "int",
                    "Iterable[int]",
                    "Callable[[int], str]"
                ]
            }
        },
        "GobangGame.getInitBoard": {
            "name": "getInitBoard",
            "location": 14,
            "return": [
                "str",
                "int",
                "bool",
                "bytearray",
                "bytes",
                "Union[bytes, bytearray]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GobangGame.getBoardSize": {
            "name": "getBoardSize",
            "location": 19,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GobangGame.getActionSize": {
            "name": "getActionSize",
            "location": 23,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GobangGame.getNextState": {
            "name": "getNextState",
            "location": 27,
            "return": [
                "str",
                "bool",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "Exception"
                ],
                "player": [
                    "board.Board",
                    "Dict[str, Dict[str, int]]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "action": [
                    "int",
                    "List[int]",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "GobangGame.getValidMoves": {
            "name": "getValidMoves",
            "location": 39,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str"
                ],
                "player": [
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "GobangGame.getGameEnded": {
            "name": "getGameEnded",
            "location": 53,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "Iterable[str]",
                    "list",
                    "bool",
                    "Optional[str]"
                ],
                "player": [
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "GobangGame.getCanonicalForm": {
            "name": "getCanonicalForm",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "bool"
                ],
                "player": [
                    "str",
                    "bool"
                ]
            }
        },
        "GobangGame.getSymmetries": {
            "name": "getSymmetries",
            "location": 83,
            "return": [
                "Set[str]",
                "str",
                "bool",
                "Callable[[str, Any], Tuple[bytes, int]]",
                "MutableMapping[str, int]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "List[str]",
                    "Optional[int]",
                    "str"
                ],
                "pi": [
                    "str",
                    "int",
                    "board.Board"
                ]
            }
        },
        "GobangGame.stringRepresentation": {
            "name": "stringRepresentation",
            "location": 99,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/gobang/GobangLogic.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Board.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board.get_legal_moves": {
            "name": "get_legal_moves",
            "location": 26,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Board.has_legal_moves": {
            "name": "has_legal_moves",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.execute_move": {
            "name": "execute_move",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int",
                    "list",
                    "str"
                ],
                "color": [
                    "int",
                    "list",
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/gobang/GobangPlayers.py": {
        "RandomPlayer.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "RandomPlayer.play": {
            "name": "play",
            "location": 8,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "HumanGobangPlayer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "HumanGobangPlayer.play": {
            "name": "play",
            "location": 20,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "GreedyGobangPlayer.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "GreedyGobangPlayer.play": {
            "name": "play",
            "location": 43,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "board": []
            }
        }
    },
    "terrazero-master/code/alphazero/gobang/__init__.py": {},
    "terrazero-master/code/alphazero/gobang/keras/GobangNNet.py": {
        "GobangNNet.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "slice"
                ],
                "args": []
            }
        }
    },
    "terrazero-master/code/alphazero/gobang/keras/NNet.py": {
        "NNetWrapper.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int"
                ]
            }
        },
        "NNetWrapper.train": {
            "name": "train",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "Optional[Union[str, Any]]",
                    "dict",
                    "list",
                    "bool"
                ]
            }
        },
        "NNetWrapper.predict": {
            "name": "predict",
            "location": 45,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "NNetWrapper.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "NNetWrapper.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/gobang/tensorflow/GobangNNet.py": {
        "GobangNNet.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "slice"
                ],
                "args": []
            }
        },
        "GobangNNet.conv2d": {
            "name": "conv2d",
            "location": 42,
            "return": [
                "str",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bool",
                    "Iterable[Any]"
                ],
                "out_channels": [
                    "int",
                    "bool",
                    "Iterable[Any]"
                ],
                "padding": [
                    "int",
                    "bool",
                    "Iterable[Any]"
                ]
            }
        },
        "GobangNNet.calculate_loss": {
            "name": "calculate_loss",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/alphazero/gobang/tensorflow/NNet.py": {
        "NNetWrapper.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int"
                ]
            }
        },
        "NNetWrapper.train": {
            "name": "train",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "numpy.ndarray",
                    "Sequence[T]"
                ]
            }
        },
        "NNetWrapper.predict": {
            "name": "predict",
            "location": 89,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "bool",
                    "float",
                    "list"
                ]
            }
        },
        "NNetWrapper.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "NNetWrapper.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/gobang/tensorflow/__init__.py": {},
    "terrazero-master/code/alphazero/othello/OthelloGame.py": {
        "display": {
            "name": "display",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "board": [
                    "str",
                    "Callable",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "OthelloGame.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "OthelloGame.getInitBoard": {
            "name": "getInitBoard",
            "location": 13,
            "return": [
                "str",
                "int",
                "bool",
                "bytearray",
                "bytes",
                "Union[bytes, bytearray]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OthelloGame.getBoardSize": {
            "name": "getBoardSize",
            "location": 18,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "OthelloGame.getActionSize": {
            "name": "getActionSize",
            "location": 22,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "OthelloGame.getNextState": {
            "name": "getNextState",
            "location": 26,
            "return": [
                "str",
                "bool",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "Exception"
                ],
                "player": [
                    "board.Board",
                    "Dict[str, Dict[str, int]]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "action": [
                    "int",
                    "List[int]",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "OthelloGame.getValidMoves": {
            "name": "getValidMoves",
            "location": 37,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str"
                ],
                "player": [
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "OthelloGame.getGameEnded": {
            "name": "getGameEnded",
            "location": 50,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "Iterable[str]"
                ],
                "player": [
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "OthelloGame.getCanonicalForm": {
            "name": "getCanonicalForm",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "bool"
                ],
                "player": [
                    "str",
                    "bool"
                ]
            }
        },
        "OthelloGame.getSymmetries": {
            "name": "getSymmetries",
            "location": 67,
            "return": [
                "Set[str]",
                "str",
                "bool",
                "Callable[[str, Any], Tuple[bytes, int]]",
                "MutableMapping[str, int]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "List[str]",
                    "Optional[int]",
                    "str"
                ],
                "pi": [
                    "str",
                    "int",
                    "board.Board"
                ]
            }
        },
        "OthelloGame.stringRepresentation": {
            "name": "stringRepresentation",
            "location": 83,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "OthelloGame.getScore": {
            "name": "getScore",
            "location": 87,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "dict",
                    "float",
                    "Union[str, Dict[str, str]]"
                ],
                "player": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/othello/OthelloLogic.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "Board.__getitem__": {
            "name": "__getitem__",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board.countDiff": {
            "name": "countDiff",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Board.get_legal_moves": {
            "name": "get_legal_moves",
            "location": 49,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "int"
                ]
            }
        },
        "Board.has_legal_moves": {
            "name": "has_legal_moves",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "Board.get_moves_for_square": {
            "name": "get_moves_for_square",
            "location": 72,
            "return": [
                "Optional[int]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "square": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Board.execute_move": {
            "name": "execute_move",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "move": [
                    "str",
                    "bytearray"
                ],
                "color": [
                    "Sequence[int]",
                    "float"
                ]
            }
        },
        "Board._discover_move": {
            "name": "_discover_move",
            "location": 116,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "int",
                    "list",
                    "str"
                ],
                "direction": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board._get_flips": {
            "name": "_get_flips",
            "location": 136,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str",
                    "bool"
                ],
                "direction": [
                    "str",
                    "bool"
                ],
                "color": [
                    "int",
                    "str",
                    "List[List[Any]]",
                    "bytes",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "Board._increment_move": {
            "name": "_increment_move",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "move": [
                    "int"
                ],
                "direction": [
                    "int",
                    "Union[int, List[int]]",
                    "List[float]"
                ],
                "n": [
                    "int",
                    "bool",
                    "List[list]",
                    "Collection[\"Issue\"]"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/othello/OthelloPlayers.py": {
        "RandomPlayer.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "RandomPlayer.play": {
            "name": "play",
            "location": 8,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "HumanOthelloPlayer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "HumanOthelloPlayer.play": {
            "name": "play",
            "location": 20,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "GreedyOthelloPlayer.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "GreedyOthelloPlayer.play": {
            "name": "play",
            "location": 43,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "board": []
            }
        }
    },
    "terrazero-master/code/alphazero/othello/__init__.py": {},
    "terrazero-master/code/alphazero/othello/keras/NNet.py": {
        "NNetWrapper.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int"
                ]
            }
        },
        "NNetWrapper.train": {
            "name": "train",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "Optional[Union[str, Any]]",
                    "dict",
                    "list",
                    "bool"
                ]
            }
        },
        "NNetWrapper.predict": {
            "name": "predict",
            "location": 41,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "NNetWrapper.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "NNetWrapper.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/othello/keras/OthelloNNet.py": {
        "OthelloNNet.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "slice"
                ],
                "args": []
            }
        }
    },
    "terrazero-master/code/alphazero/othello/keras/__init__.py": {},
    "terrazero-master/code/alphazero/othello/pytorch/NNet.py": {
        "NNetWrapper.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int"
                ]
            }
        },
        "NNetWrapper.train": {
            "name": "train",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "torch.Tensor",
                    "Optional[torch.Tensor]",
                    "numpy.ndarray",
                    "Sequence[T]"
                ]
            }
        },
        "NNetWrapper.predict": {
            "name": "predict",
            "location": 110,
            "return": [
                "str",
                "List[dict]",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "Union[bool, numpy.ndarray]",
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "NNetWrapper.loss_pi": {
            "name": "loss_pi",
            "location": 129,
            "return": [
                "torch.Tensor",
                "torch.nn.utils.rnn.PackedSequence",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "str",
                    "List[str]"
                ],
                "outputs": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "NNetWrapper.loss_v": {
            "name": "loss_v",
            "location": 132,
            "return": [
                "str",
                "numpy.ndarray",
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "int",
                    "str"
                ],
                "outputs": [
                    "int",
                    "str"
                ]
            }
        },
        "NNetWrapper.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "NNetWrapper.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/othello/pytorch/OthelloNNet.py": {
        "OthelloNNet.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "slice",
                    "allennlp.nn.activations.Activation"
                ],
                "args": []
            }
        },
        "OthelloNNet.forward": {
            "name": "forward",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/othello/pytorch/__init__.py": {},
    "terrazero-master/code/alphazero/othello/tensorflow/NNet.py": {
        "NNetWrapper.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int"
                ]
            }
        },
        "NNetWrapper.train": {
            "name": "train",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "numpy.ndarray",
                    "Sequence[T]"
                ]
            }
        },
        "NNetWrapper.predict": {
            "name": "predict",
            "location": 89,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "bool",
                    "float",
                    "list"
                ]
            }
        },
        "NNetWrapper.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "NNetWrapper.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/othello/tensorflow/OthelloNNet.py": {
        "OthelloNNet.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "slice"
                ],
                "args": []
            }
        },
        "OthelloNNet.conv2d": {
            "name": "conv2d",
            "location": 42,
            "return": [
                "str",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "Tuple[int]",
                    "Tuple[int, int]",
                    "float"
                ],
                "out_channels": [
                    "bool",
                    "Tuple[int]",
                    "Tuple[int, int]",
                    "float"
                ],
                "padding": [
                    "bool",
                    "Tuple[int]",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "OthelloNNet.calculate_loss": {
            "name": "calculate_loss",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResNet.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "slice"
                ],
                "args": []
            }
        },
        "ResNet.residual_block": {
            "name": "residual_block",
            "location": 109,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputLayer": [
                    "int",
                    "str"
                ],
                "filters": [
                    "int",
                    "float",
                    "str",
                    "utils.times.Seconds",
                    "List[bool]"
                ],
                "kernel_size": [
                    "int",
                    "float",
                    "str",
                    "utils.times.Seconds",
                    "List[bool]"
                ],
                "stage": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "bool"
                ],
                "block": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "ResNet.calculate_loss": {
            "name": "calculate_loss",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/alphazero/othello/tensorflow/__init__.py": {},
    "terrazero-master/code/alphazero/pytorch_classification/cifar.py": {},
    "terrazero-master/code/alphazero/pytorch_classification/imagenet.py": {},
    "terrazero-master/code/alphazero/pytorch_classification/__init__.py": {},
    "terrazero-master/code/alphazero/pytorch_classification/models/__init__.py": {},
    "terrazero-master/code/alphazero/pytorch_classification/models/cifar/alexnet.py": {
        "alexnet": {
            "name": "alexnet",
            "location": 39,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "AlexNet.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_classes": [
                    "int",
                    "float",
                    "Hashable",
                    "str"
                ]
            }
        },
        "AlexNet.forward": {
            "name": "forward",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/models/cifar/densenet.py": {
        "densenet": {
            "name": "densenet",
            "location": 145,
            "return": [
                "float",
                "str"
            ],
            "arguments": {}
        },
        "Bottleneck.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inplanes": [
                    "torch.Tensor",
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "expansion": [
                    "int",
                    "bool",
                    "float"
                ],
                "growthRate": [
                    "torch.Tensor",
                    "int",
                    "dict",
                    "str",
                    "float"
                ],
                "dropRate": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Bottleneck.forward": {
            "name": "forward",
            "location": 24,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inplanes": [
                    "int",
                    "str",
                    "dict",
                    "torch.Tensor",
                    "Optional[int]",
                    "float"
                ],
                "expansion": [
                    "int",
                    "bool",
                    "float"
                ],
                "growthRate": [
                    "torch.Tensor",
                    "int",
                    "dict",
                    "str",
                    "float"
                ],
                "dropRate": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BasicBlock.forward": {
            "name": "forward",
            "location": 49,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "Transition.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inplanes": [
                    "torch.Tensor",
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "outplanes": [
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "Transition.forward": {
            "name": "forward",
            "location": 69,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "Iterable[Iterable[float]]"
                ]
            }
        },
        "DenseNet.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int",
                    "Dict[str, Tuple[int, int]]"
                ],
                "block": [
                    "int"
                ],
                "dropRate": [
                    "int",
                    "str",
                    "bool"
                ],
                "num_classes": [
                    "int"
                ],
                "growthRate": [
                    "int",
                    "str",
                    "bool"
                ],
                "compressionRate": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "DenseNet._make_denseblock": {
            "name": "_make_denseblock",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "Callable",
                    "list"
                ],
                "blocks": [
                    "str",
                    "float",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "DenseNet._make_transition": {
            "name": "_make_transition",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "compressionRate": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DenseNet.forward": {
            "name": "forward",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "List[float]"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/models/cifar/preresnet.py": {
        "conv3x3": {
            "name": "conv3x3",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "in_planes": [
                    "int",
                    "bool"
                ],
                "out_planes": [
                    "int",
                    "bool"
                ],
                "stride": [
                    "int",
                    "bool"
                ]
            }
        },
        "preresnet": {
            "name": "preresnet",
            "location": 154,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inplanes": [
                    "int",
                    "bool",
                    "float"
                ],
                "planes": [
                    "int",
                    "bool",
                    "float"
                ],
                "stride": [
                    "int",
                    "bool",
                    "float"
                ],
                "downsample": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BasicBlock.forward": {
            "name": "forward",
            "location": 35,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Bottleneck.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inplanes": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "planes": [
                    "List[List[T]]",
                    "float",
                    "int",
                    "bytes",
                    "bool"
                ],
                "stride": [
                    "List[List[T]]",
                    "str",
                    "Tuple[int, int]"
                ],
                "downsample": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Bottleneck.forward": {
            "name": "forward",
            "location": 70,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "PreResNet.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "num_classes": [
                    "Callable",
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "PreResNet._make_layer": {
            "name": "_make_layer",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool"
                ],
                "planes": [
                    "bool"
                ],
                "blocks": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "float"
                ],
                "stride": [
                    "bool"
                ]
            }
        },
        "PreResNet.forward": {
            "name": "forward",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "List[float]",
                    "float"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/models/cifar/resnet.py": {
        "conv3x3": {
            "name": "conv3x3",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "in_planes": [
                    "int",
                    "bool"
                ],
                "out_planes": [
                    "int",
                    "bool"
                ],
                "stride": [
                    "int",
                    "bool"
                ]
            }
        },
        "resnet": {
            "name": "resnet",
            "location": 155,
            "return": [
                "List[int]",
                "int",
                "torch.nn.Module"
            ],
            "arguments": {}
        },
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inplanes": [
                    "int",
                    "bool",
                    "float"
                ],
                "planes": [
                    "int",
                    "bool",
                    "float"
                ],
                "stride": [
                    "int",
                    "bool",
                    "float"
                ],
                "downsample": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BasicBlock.forward": {
            "name": "forward",
            "location": 35,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Bottleneck.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inplanes": [
                    "int"
                ],
                "planes": [
                    "List[List[T]]",
                    "float",
                    "int",
                    "bytes",
                    "bool"
                ],
                "stride": [
                    "List[List[T]]",
                    "str",
                    "Tuple[int, int]"
                ],
                "downsample": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Bottleneck.forward": {
            "name": "forward",
            "location": 70,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ResNet.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "num_classes": [
                    "Callable",
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "ResNet._make_layer": {
            "name": "_make_layer",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool"
                ],
                "planes": [
                    "bool"
                ],
                "blocks": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "float"
                ],
                "stride": [
                    "bool"
                ]
            }
        },
        "ResNet.forward": {
            "name": "forward",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "List[float]",
                    "float"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/models/cifar/resnext.py": {
        "resnext": {
            "name": "resnext",
            "location": 122,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "ResNeXtBottleneck.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int",
                    "float"
                ],
                "out_channels": [
                    "int",
                    "float",
                    "bool"
                ],
                "stride": [
                    "int",
                    "Optional[float]"
                ],
                "cardinality": [
                    "int",
                    "float"
                ],
                "widen_factor": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ResNeXtBottleneck.forward": {
            "name": "forward",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "CifarResNeXt.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cardinality": [
                    "int",
                    "bool",
                    "str",
                    "Callable"
                ],
                "depth": [
                    "int",
                    "bool",
                    "str",
                    "Callable"
                ],
                "num_classes": [
                    "int",
                    "bool"
                ],
                "widen_factor": [
                    "int",
                    "bool",
                    "str",
                    "Callable"
                ],
                "dropRate": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "CifarResNeXt.block": {
            "name": "block",
            "location": 92,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "in_channels": [
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "out_channels": [
                    "str",
                    "Optional[bool]",
                    "List[str]"
                ],
                "pool_stride": [
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "CifarResNeXt.forward": {
            "name": "forward",
            "location": 112,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "Union[int, slice]"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/models/cifar/vgg.py": {
        "make_layers": {
            "name": "make_layers",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "batch_norm": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "vgg11": {
            "name": "vgg11",
            "location": 77,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "vgg11_bn": {
            "name": "vgg11_bn",
            "location": 87,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "vgg13": {
            "name": "vgg13",
            "location": 93,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "vgg13_bn": {
            "name": "vgg13_bn",
            "location": 103,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "vgg16": {
            "name": "vgg16",
            "location": 109,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "vgg16_bn": {
            "name": "vgg16_bn",
            "location": 119,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "vgg19": {
            "name": "vgg19",
            "location": 125,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "vgg19_bn": {
            "name": "vgg19_bn",
            "location": 135,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "VGG.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "features": [
                    "int",
                    "bool",
                    "str",
                    "Union[int, float]"
                ],
                "num_classes": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "VGG.forward": {
            "name": "forward",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "VGG._initialize_weights": {
            "name": "_initialize_weights",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/models/cifar/wrn.py": {
        "wrn": {
            "name": "wrn",
            "location": 88,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_planes": [
                    "int",
                    "float"
                ],
                "out_planes": [
                    "int",
                    "float",
                    "torch.IntTensor",
                    "bool"
                ],
                "stride": [
                    "int",
                    "bool",
                    "allennlp.nn.beam_search.BeamSearch",
                    "float"
                ],
                "dropRate": [
                    "Optional[dict]",
                    "int",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "BasicBlock.forward": {
            "name": "forward",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "NetworkBlock.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nb_layers": [
                    "int"
                ],
                "in_planes": [
                    "int"
                ],
                "out_planes": [
                    "int"
                ],
                "block": [
                    "int"
                ],
                "stride": [
                    "int"
                ],
                "dropRate": [
                    "int"
                ]
            }
        },
        "NetworkBlock._make_layer": {
            "name": "_make_layer",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "float",
                    "str",
                    "List[int]",
                    "int",
                    "list"
                ],
                "in_planes": [
                    "float",
                    "str",
                    "List[int]",
                    "int",
                    "list"
                ],
                "out_planes": [
                    "float",
                    "str",
                    "List[int]",
                    "int",
                    "list"
                ],
                "nb_layers": [
                    "str",
                    "bool",
                    "List[int]",
                    "Tuple[float, float]"
                ],
                "stride": [
                    "float",
                    "str",
                    "List[int]",
                    "int",
                    "list"
                ],
                "dropRate": [
                    "float",
                    "str",
                    "List[int]",
                    "int",
                    "list"
                ]
            }
        },
        "NetworkBlock.forward": {
            "name": "forward",
            "location": 43,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "WideResNet.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int",
                    "bool",
                    "str",
                    "Union[int, float]"
                ],
                "num_classes": [
                    "int",
                    "float"
                ],
                "widen_factor": [
                    "int",
                    "bool",
                    "str",
                    "Union[int, float]"
                ],
                "dropRate": [
                    "int",
                    "bool",
                    "Hashable"
                ]
            }
        },
        "WideResNet.forward": {
            "name": "forward",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "Iterable[Iterable[float]]"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/models/cifar/__init__.py": {},
    "terrazero-master/code/alphazero/pytorch_classification/models/imagenet/resnext.py": {
        "resnext50": {
            "name": "resnext50",
            "location": 152,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "baseWidth": [
                    "list",
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "List[int]"
                ],
                "cardinality": [
                    "list",
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "List[int]"
                ]
            }
        },
        "resnext101": {
            "name": "resnext101",
            "location": 160,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "baseWidth": [
                    "list",
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "List[int]"
                ],
                "cardinality": [
                    "list",
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "List[int]"
                ]
            }
        },
        "resnext152": {
            "name": "resnext152",
            "location": 168,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "baseWidth": [
                    "list",
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "List[int]"
                ],
                "cardinality": [
                    "list",
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Bottleneck.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inplanes": [
                    "int",
                    "bool"
                ],
                "planes": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "baseWidth": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "Optional[int]"
                ],
                "cardinality": [
                    "bool",
                    "int",
                    "List['cirq.Circuit']",
                    "str"
                ],
                "stride": [
                    "int",
                    "bool"
                ],
                "downsample": [
                    "bool",
                    "int",
                    "List['cirq.Circuit']",
                    "str"
                ]
            }
        },
        "Bottleneck.forward": {
            "name": "forward",
            "location": 47,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ResNeXt.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "baseWidth": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[str]"
                ],
                "cardinality": [
                    "int",
                    "str",
                    "bool"
                ],
                "layers": [
                    "int",
                    "bool",
                    "Hashable",
                    "float"
                ],
                "num_classes": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "torch.LongTensor"
                ]
            }
        },
        "ResNeXt._make_layer": {
            "name": "_make_layer",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "torch.Tensor"
                ],
                "planes": [
                    "bool",
                    "torch.Tensor"
                ],
                "blocks": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "float"
                ],
                "stride": [
                    "bool",
                    "torch.Tensor"
                ]
            }
        },
        "ResNeXt.forward": {
            "name": "forward",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "List[float]",
                    "float"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/models/imagenet/__init__.py": {},
    "terrazero-master/code/alphazero/pytorch_classification/utils/eval.py": {
        "accuracy": {
            "name": "accuracy",
            "location": 5,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "output": [
                    "str",
                    "Optional[str]"
                ],
                "target": [
                    "bytes",
                    "str",
                    "dict",
                    "int"
                ],
                "topk": [
                    "str",
                    "bool",
                    "Sequence[Sequence[T]]",
                    "int"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/utils/logger.py": {
        "savefig": {
            "name": "savefig",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "fname": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dpi": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "plot_overlap": {
            "name": "plot_overlap",
            "location": 15,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[int]"
                ],
                "names": [
                    "str"
                ]
            }
        },
        "Logger.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Union[str, IO[bytes]]"
                ],
                "title": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ],
                "resume": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Logger.set_names": {
            "name": "set_names",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Logger.append": {
            "name": "append",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "numbers": [
                    "str",
                    "Optional[Union[str, Any]]",
                    "Optional[Union[str, Any, Any, Any]]",
                    "Dict[str, str]",
                    "List[dict]"
                ]
            }
        },
        "Logger.plot": {
            "name": "plot",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "names": [
                    "Optional[str]",
                    "str",
                    "Callable[[Any], str]",
                    "Sequence[Any]",
                    "Union[str, bytes]"
                ]
            }
        },
        "Logger.close": {
            "name": "close",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggerMonitor.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "Dict[str, str]",
                    "TextIO",
                    "dict",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "LoggerMonitor.plot": {
            "name": "plot",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/utils/misc.py": {
        "AverageMeter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AverageMeter.reset": {
            "name": "reset",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AverageMeter.update": {
            "name": "update",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float",
                    "int"
                ],
                "n": [
                    "int",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/utils/__init__.py": {},
    "terrazero-master/code/alphazero/pytorch_classification/utils/progress/setup.py": {},
    "terrazero-master/code/alphazero/pytorch_classification/utils/progress/test_progress.py": {
        "sleep": {
            "name": "sleep",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/utils/progress/progress/bar.py": {
        "Bar.update": {
            "name": "update",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncrementalBar.update": {
            "name": "update",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/utils/progress/progress/counter.py": {
        "Counter.update": {
            "name": "update",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Countdown.update": {
            "name": "update",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.update": {
            "name": "update",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/utils/progress/progress/helpers.py": {
        "WriteMixin.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Callable",
                    "dict",
                    "bytes"
                ]
            }
        },
        "WriteMixin.write": {
            "name": "write",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "int"
                ]
            }
        },
        "WriteMixin.finish": {
            "name": "finish",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WritelnMixin.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WritelnMixin.clearln": {
            "name": "clearln",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WritelnMixin.writeln": {
            "name": "writeln",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "WritelnMixin.finish": {
            "name": "finish",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SigIntMixin.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SigIntMixin._sigint_handler": {
            "name": "_sigint_handler",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/utils/progress/progress/spinner.py": {
        "Spinner.update": {
            "name": "update",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/alphazero/pytorch_classification/utils/progress/progress/__init__.py": {
        "Infinite.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Infinite.__getitem__": {
            "name": "__getitem__",
            "location": 40,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Infinite.elapsed": {
            "name": "elapsed",
            "location": 46,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infinite.elapsed_td": {
            "name": "elapsed_td",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Infinite.update_avg": {
            "name": "update_avg",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "List[int]",
                    "Callable",
                    "str"
                ],
                "dt": [
                    "int",
                    "List[int]",
                    "Callable",
                    "str"
                ]
            }
        },
        "Infinite.update": {
            "name": "update",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Infinite.start": {
            "name": "start",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Infinite.finish": {
            "name": "finish",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Infinite.next": {
            "name": "next",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "Infinite.iter": {
            "name": "iter",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "it": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Progress.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.eta": {
            "name": "eta",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.eta_td": {
            "name": "eta_td",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.percent": {
            "name": "percent",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.progress": {
            "name": "progress",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.remaining": {
            "name": "remaining",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.start": {
            "name": "start",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Progress.goto": {
            "name": "goto",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "Progress.iter": {
            "name": "iter",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "it": [
                    "int",
                    "list",
                    "Sequence[int]"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/tictactoe/TicTacToeGame.py": {
        "display": {
            "name": "display",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "board": [
                    "str",
                    "Callable",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "TicTacToeGame.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "TicTacToeGame.getInitBoard": {
            "name": "getInitBoard",
            "location": 21,
            "return": [
                "str",
                "int",
                "bool",
                "bytearray",
                "bytes",
                "Union[bytes, bytearray]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToeGame.getBoardSize": {
            "name": "getBoardSize",
            "location": 26,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToeGame.getActionSize": {
            "name": "getActionSize",
            "location": 30,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToeGame.getNextState": {
            "name": "getNextState",
            "location": 34,
            "return": [
                "str",
                "bool",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "Exception"
                ],
                "player": [
                    "board.Board",
                    "Dict[str, Dict[str, int]]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "action": [
                    "int",
                    "List[int]",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "TicTacToeGame.getValidMoves": {
            "name": "getValidMoves",
            "location": 45,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str"
                ],
                "player": [
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "TicTacToeGame.getGameEnded": {
            "name": "getGameEnded",
            "location": 58,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "Iterable[str]"
                ],
                "player": [
                    "str"
                ]
            }
        },
        "TicTacToeGame.getCanonicalForm": {
            "name": "getCanonicalForm",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "bool"
                ],
                "player": [
                    "str",
                    "bool"
                ]
            }
        },
        "TicTacToeGame.getSymmetries": {
            "name": "getSymmetries",
            "location": 77,
            "return": [
                "Set[str]",
                "str",
                "bool",
                "Callable[[str, Any], Tuple[bytes, int]]",
                "MutableMapping[str, int]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "List[str]",
                    "Optional[int]",
                    "str"
                ],
                "pi": [
                    "str",
                    "int",
                    "board.Board"
                ]
            }
        },
        "TicTacToeGame.stringRepresentation": {
            "name": "stringRepresentation",
            "location": 93,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/tictactoe/TicTacToeLogic.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Board.__getitem__": {
            "name": "__getitem__",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Board.get_legal_moves": {
            "name": "get_legal_moves",
            "location": 36,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Board.has_legal_moves": {
            "name": "has_legal_moves",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.is_win": {
            "name": "is_win",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bytes",
                    "Union[bytearray, memoryview]",
                    "Optional[list]"
                ]
            }
        },
        "Board.execute_move": {
            "name": "execute_move",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int",
                    "list",
                    "str"
                ],
                "color": [
                    "int",
                    "list",
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/tictactoe/TicTacToePlayers.py": {
        "RandomPlayer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "RandomPlayer.play": {
            "name": "play",
            "location": 16,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "HumanTicTacToePlayer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "HumanTicTacToePlayer.play": {
            "name": "play",
            "location": 28,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/tictactoe/__init__.py": {},
    "terrazero-master/code/alphazero/tictactoe/keras/NNet.py": {
        "NNetWrapper.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int"
                ]
            }
        },
        "NNetWrapper.train": {
            "name": "train",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "examples": [
                    "Optional[Union[str, Any]]",
                    "dict",
                    "list",
                    "bool"
                ]
            }
        },
        "NNetWrapper.predict": {
            "name": "predict",
            "location": 50,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "float"
                ]
            }
        },
        "NNetWrapper.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "NNetWrapper.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "terrazero-master/code/alphazero/tictactoe/keras/TicTacToeNNet.py": {
        "TicTacToeNNet.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "slice"
                ],
                "args": []
            }
        }
    },
    "terrazero-master/code/alphazero/tictactoe/keras/__init__.py": {},
    "terrazero-master/code/simulation/game_runner.py": {
        "GameRunner.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameRunner._init_game": {
            "name": "_init_game",
            "location": 17,
            "return": [
                "Type",
                "str",
                "List[str]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameRunner.execute": {
            "name": "execute",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/utils.py": {},
    "terrazero-master/code/simulation/__init__.py": {},
    "terrazero-master/code/simulation/core/board.py": {
        "ParsePosition": {
            "name": "ParsePosition",
            "location": 23,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bool"
                ]
            }
        },
        "GameBoard.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameBoard.lines_to_map": {
            "name": "lines_to_map",
            "location": 74,
            "return": [
                "float",
                "str",
                "Dict[str, Any]",
                "Callable",
                "int"
            ],
            "arguments": {
                "lines": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "GameBoard.can_be_built": {
            "name": "can_be_built",
            "location": 100,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "dict",
                    "bool"
                ],
                "structure": [
                    "simulation.core.common.Structure",
                    "int",
                    "Optional[utils.diskstaSection]"
                ],
                "final_terrain": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "GameBoard.build": {
            "name": "build",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool"
                ],
                "structure": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Callable",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "GameBoard.get_terrain": {
            "name": "get_terrain",
            "location": 129,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "bool"
                ]
            }
        },
        "GameBoard.get_structure": {
            "name": "get_structure",
            "location": 134,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "bool"
                ]
            }
        },
        "GameBoard.get_neighbor_tiles": {
            "name": "get_neighbor_tiles",
            "location": 137,
            "return": [
                "Dict[str, Any]",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "GameBoard.neighbor_structure_owners": {
            "name": "neighbor_structure_owners",
            "location": 149,
            "return": [
                "bool",
                "list",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, bool]"
                ]
            }
        },
        "GameBoard._get_raw_neighbors": {
            "name": "_get_raw_neighbors",
            "location": 160,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int"
                ],
                "column": [
                    "int"
                ]
            }
        },
        "GameBoard._to_raw": {
            "name": "_to_raw",
            "location": 172,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "GameBoard._from_raw": {
            "name": "_from_raw",
            "location": 177,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "dict"
            ],
            "arguments": {
                "self": [],
                "rawRow": [
                    "int",
                    "str",
                    "Optional[Union[int, str]]",
                    "List[str]"
                ],
                "rawColumn": [
                    "int",
                    "str",
                    "Dict[int, Any]",
                    "set"
                ]
            }
        },
        "GameBoard._load_starting_map": {
            "name": "_load_starting_map",
            "location": 185,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]",
                "raiden.utils.Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/core/board_test.py": {
        "TestPosition.test_initialization": {
            "name": "test_initialization",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPosition.test_parse_position": {
            "name": "test_parse_position",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPosition.test_parse_position_failure": {
            "name": "test_parse_position_failure",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoardModule.test_empty_lines_to_map": {
            "name": "test_empty_lines_to_map",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoardModule.test_single_lines_to_map": {
            "name": "test_single_lines_to_map",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoardModule.test_multi_lines_to_map": {
            "name": "test_multi_lines_to_map",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.setUp": {
            "name": "setUp",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_default_game_terrain_edge_cases": {
            "name": "test_default_game_terrain_edge_cases",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_default_game_bard_terrain_random": {
            "name": "test_default_game_bard_terrain_random",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_extra_water_tile_for_even_rows": {
            "name": "test_extra_water_tile_for_even_rows",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_default_game_board_terrain_failure_cases": {
            "name": "test_default_game_board_terrain_failure_cases",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_default_game_board_neighbors_corners": {
            "name": "test_default_game_board_neighbors_corners",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.testcan_be_built_basic": {
            "name": "testcan_be_built_basic",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_cannot_build_on_water": {
            "name": "test_cannot_build_on_water",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_build_dwelling": {
            "name": "test_build_dwelling",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_build_trading_post": {
            "name": "test_build_trading_post",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_build_temple": {
            "name": "test_build_temple",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_build_sanctuary": {
            "name": "test_build_sanctuary",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_build_strong_hold": {
            "name": "test_build_strong_hold",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_build_failures": {
            "name": "test_build_failures",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_default_game_board_neighbors": {
            "name": "test_default_game_board_neighbors",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameBoard.test_default_game_board_neighbors_structure_owners": {
            "name": "test_default_game_board_neighbors_structure_owners",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/core/common.py": {
        "Resources.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coins": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "workers": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "bridges": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "priests": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Resources.is_valid": {
            "name": "is_valid",
            "location": 19,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resources.force_valid": {
            "name": "force_valid",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resources.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "Resources.__add__": {
            "name": "__add__",
            "location": 34,
            "return": [
                "str",
                "List[int]",
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "str"
                ]
            }
        },
        "Resources.__radd__": {
            "name": "__radd__",
            "location": 40,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Resources.__iadd__": {
            "name": "__iadd__",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Resources.__sub__": {
            "name": "__sub__",
            "location": 52,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "Optional[float]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "Resources.__rsub__": {
            "name": "__rsub__",
            "location": 58,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Resources.__isub__": {
            "name": "__isub__",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Resources.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Income.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "power": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Income.is_valid": {
            "name": "is_valid",
            "location": 85,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Income.force_valid": {
            "name": "force_valid",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Income.__eq__": {
            "name": "__eq__",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Income.__add__": {
            "name": "__add__",
            "location": 95,
            "return": [
                "int",
                "Iterable[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "Income.__radd__": {
            "name": "__radd__",
            "location": 101,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Income.__iadd__": {
            "name": "__iadd__",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Income.__sub__": {
            "name": "__sub__",
            "location": 111,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "Income.__rsub__": {
            "name": "__rsub__",
            "location": 117,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Income.__isub__": {
            "name": "__isub__",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Income.__str__": {
            "name": "__str__",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terrain.get_color": {
            "name": "get_color",
            "location": 145,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terrain.__str__": {
            "name": "__str__",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TownKey._get_human_description": {
            "name": "_get_human_description",
            "location": 194,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TownKey.__str__": {
            "name": "__str__",
            "location": 208,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BonusCard.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Iterable[T]",
                    "int",
                    "bytes",
                    "T",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "BonusCard.player_income": {
            "name": "player_income",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BonusCard._get_human_description": {
            "name": "_get_human_description",
            "location": 257,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BonusCard.__str__": {
            "name": "__str__",
            "location": 288,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BonusCard.__repr__": {
            "name": "__repr__",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoringTile._get_human_description": {
            "name": "_get_human_description",
            "location": 318,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoringTile.__str__": {
            "name": "__str__",
            "location": 338,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FavorTile.player_income": {
            "name": "player_income",
            "location": 366,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FavorTile._get_human_description": {
            "name": "_get_human_description",
            "location": 381,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Structure.is_upgradeable_to": {
            "name": "is_upgradeable_to",
            "location": 419,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "bool"
                ]
            }
        }
    },
    "terrazero-master/code/simulation/core/common_test.py": {
        "TestResources.test_validation": {
            "name": "test_validation",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResources.test_force_valid": {
            "name": "test_force_valid",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResources.test_equality_operator": {
            "name": "test_equality_operator",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResources.test_addition_operator": {
            "name": "test_addition_operator",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResources.test_subtraction": {
            "name": "test_subtraction",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIncome.test_functions_raise_errors": {
            "name": "test_functions_raise_errors",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIncome.test_equality_operator": {
            "name": "test_equality_operator",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIncome.test_addition_operator": {
            "name": "test_addition_operator",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIncome.test_subtraction": {
            "name": "test_subtraction",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBonusCard.test_income_from_bonus_cards": {
            "name": "test_income_from_bonus_cards",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFavorTile.testIncomeFromFavorTiel": {
            "name": "testIncomeFromFavorTiel",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStructureUpgrades.testDwellingUpgrades": {
            "name": "testDwellingUpgrades",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStructureUpgrades.testTradingPostUpgrades": {
            "name": "testTradingPostUpgrades",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/core/cult.py": {
        "CultBoard.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "factions": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "CultBoard.sacrifice_priest_to_order": {
            "name": "sacrifice_priest_to_order",
            "location": 48,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "simulation.core.common.Resources",
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "List['cirq.Qid']",
                    "str",
                    "float"
                ],
                "order": [
                    "int",
                    "bytes",
                    "float",
                    "Tuple[int]"
                ]
            }
        }
    },
    "terrazero-master/code/simulation/core/cult_test.py": {
        "TestCultBoard.test_initialization_of_empty_cult_board": {
            "name": "test_initialization_of_empty_cult_board",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCultBoard.test_initialization_single_faction": {
            "name": "test_initialization_single_faction",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCultBoard.test_initialization_multiple_factions": {
            "name": "test_initialization_multiple_factions",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCultBoard.test_sacrifice_priest_to_order_overshoot_power": {
            "name": "test_sacrifice_priest_to_order_overshoot_power",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCultBoard.test_sacrifice_priest_to_order_land_on_power": {
            "name": "test_sacrifice_priest_to_order_land_on_power",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCultBoard.test_sacrifice_many_priests_town_keys": {
            "name": "test_sacrifice_many_priests_town_keys",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCultBoard.test_cant_occupy_already_taken_town": {
            "name": "test_cant_occupy_already_taken_town",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/core/faction.py": {
        "all_available": {
            "name": "all_available",
            "location": 284,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "Faction.home_terrain": {
            "name": "home_terrain",
            "location": 24,
            "return": [
                "simulation.core.common.Terrain"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction.starting_power": {
            "name": "starting_power",
            "location": 29,
            "return": [
                "typing.Dict[simulation.core.common.PowerBowl, builtins.int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction.starting_resources": {
            "name": "starting_resources",
            "location": 34,
            "return": [
                "simulation.core.common.Resources"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction.starting_cult_positions": {
            "name": "starting_cult_positions",
            "location": 39,
            "return": [
                "typing.Dict[simulation.core.common.CultTrack, builtins.int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction.staring_shipping": {
            "name": "staring_shipping",
            "location": 44,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction.structure_cost": {
            "name": "structure_cost",
            "location": 49,
            "return": [
                "simulation.core.common.Resources"
            ],
            "arguments": {
                "self": [],
                "structure": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "adjacentEnemyStructure": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Faction._worker_income_spots": {
            "name": "_worker_income_spots",
            "location": 54,
            "return": [
                "typing.List[simulation.core.common.Income]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction._tp_income_spots": {
            "name": "_tp_income_spots",
            "location": 58,
            "return": [
                "typing.List[simulation.core.common.Income]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction._temple_income_spots": {
            "name": "_temple_income_spots",
            "location": 62,
            "return": [
                "typing.List[simulation.core.common.Income]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction._sanctuary_income": {
            "name": "_sanctuary_income",
            "location": 66,
            "return": [
                "simulation.core.common.Income"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction._strong_hold_income": {
            "name": "_strong_hold_income",
            "location": 70,
            "return": [
                "simulation.core.common.Income"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction._default_income": {
            "name": "_default_income",
            "location": 74,
            "return": [
                "simulation.core.common.Income"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faction.income_for_structures": {
            "name": "income_for_structures",
            "location": 77,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "structures": [
                    "Dict[simulation.core.common.Structure, int]",
                    "Mapping",
                    "Dict[str, int]",
                    "Dict[str, float]"
                ]
            }
        },
        "Faction.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "Type",
                "Sequence[Any]",
                "BaseException",
                "Exception",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings.home_terrain": {
            "name": "home_terrain",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings.starting_power": {
            "name": "starting_power",
            "location": 136,
            "return": [
                "int",
                "List[dict]",
                "str",
                "bytearray",
                "bytes",
                "List[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings.starting_resources": {
            "name": "starting_resources",
            "location": 143,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings.starting_cult_positions": {
            "name": "starting_cult_positions",
            "location": 146,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings.staring_shipping": {
            "name": "staring_shipping",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings.structure_cost": {
            "name": "structure_cost",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "structure": [
                    "int",
                    "Callable",
                    "str"
                ],
                "adjacentEnemyStructure": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Halflings._default_income": {
            "name": "_default_income",
            "location": 172,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings._worker_income_spots": {
            "name": "_worker_income_spots",
            "location": 175,
            "return": [
                "str",
                "int",
                "core.types.UserRole",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings._tp_income_spots": {
            "name": "_tp_income_spots",
            "location": 181,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings._temple_income_spots": {
            "name": "_temple_income_spots",
            "location": 190,
            "return": [
                "str",
                "int",
                "core.types.UserRole",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings._sanctuary_income": {
            "name": "_sanctuary_income",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Halflings._strong_hold_income": {
            "name": "_strong_hold_income",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers.home_terrain": {
            "name": "home_terrain",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers.starting_power": {
            "name": "starting_power",
            "location": 210,
            "return": [
                "int",
                "List[dict]",
                "str",
                "bytearray",
                "bytes",
                "List[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers.starting_resources": {
            "name": "starting_resources",
            "location": 217,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers.starting_cult_positions": {
            "name": "starting_cult_positions",
            "location": 220,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers.staring_shipping": {
            "name": "staring_shipping",
            "location": 228,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers.structure_cost": {
            "name": "structure_cost",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "structure": [
                    "int",
                    "Callable",
                    "str"
                ],
                "adjacentEnemyStructure": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Engineers._default_income": {
            "name": "_default_income",
            "location": 246,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers._worker_income_spots": {
            "name": "_worker_income_spots",
            "location": 249,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers._tp_income_spots": {
            "name": "_tp_income_spots",
            "location": 261,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers._temple_income_spots": {
            "name": "_temple_income_spots",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers._sanctuary_income": {
            "name": "_sanctuary_income",
            "location": 277,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engineers._strong_hold_income": {
            "name": "_strong_hold_income",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/core/faction_test.py": {
        "TestHalflingFaction.test_halfling_creation": {
            "name": "test_halfling_creation",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHalflingFaction.test_starting_resources": {
            "name": "test_starting_resources",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHalflingFaction.test_structure_cost": {
            "name": "test_structure_cost",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHalflingFaction.test_income_for_structures": {
            "name": "test_income_for_structures",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEngineerFaction.test_engineer_creation": {
            "name": "test_engineer_creation",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEngineerFaction.test_starting_resources": {
            "name": "test_starting_resources",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEngineerFaction.test_structure_cost": {
            "name": "test_structure_cost",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEngineerFaction.test_income_for_structures": {
            "name": "test_income_for_structures",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFactionModule.testAllFactions": {
            "name": "testAllFactions",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/core/gameplay.py": {
        "select_game_scoring_tiles": {
            "name": "select_game_scoring_tiles",
            "location": 123,
            "return": [
                "List[str]",
                "str",
                "bytes",
                "list"
            ],
            "arguments": {}
        },
        "select_game_bonus_cards": {
            "name": "select_game_bonus_cards",
            "location": 127,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "int",
                "list"
            ],
            "arguments": {
                "num_players": [
                    "int",
                    "List[int]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "players": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "Tuple[int]"
                ],
                "scoring_tiles": [],
                "bonus_cards": [],
                "interface": [
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ]
            }
        },
        "Game.player_has_opponent_neighbors_at_position": {
            "name": "player_has_opponent_neighbors_at_position",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pos": [
                    "str",
                    "simulation.core.board.Position",
                    "Sequence['cirq.Qid']",
                    "int",
                    "bool"
                ]
            }
        },
        "Game._transform_and_build": {
            "name": "_transform_and_build",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "Game._place_initial_dwellings": {
            "name": "_place_initial_dwellings",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "bool",
                    "str"
                ]
            }
        },
        "Game.initialize_dwellings": {
            "name": "initialize_dwellings",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.swap_bonus_cards": {
            "name": "swap_bonus_cards",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "simulation.core.player.Player",
                    "Sequence[int]"
                ]
            }
        },
        "Game._end_round_for_bonus_cards": {
            "name": "_end_round_for_bonus_cards",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.end_round": {
            "name": "end_round",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.initialize_bonus_cards": {
            "name": "initialize_bonus_cards",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.income_phase": {
            "name": "income_phase",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.action_phase": {
            "name": "action_phase",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/core/gameplay_test.py": {
        "TestGameObject.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameObject.test_selecting_game_scoring_tiles": {
            "name": "test_selecting_game_scoring_tiles",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameObject.test_selecting_bonus_cards_for_players": {
            "name": "test_selecting_bonus_cards_for_players",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameObject.test_opponent_at_position": {
            "name": "test_opponent_at_position",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestGameObject.test_only_myself_around_me": {
            "name": "test_only_myself_around_me",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestGameObject.test_no_one_around_me": {
            "name": "test_no_one_around_me",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "TestGameObject.test_player_limits": {
            "name": "test_player_limits",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/core/player.py": {
        "Player.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "player_faction": [
                    "str",
                    "int",
                    "Optional[str]",
                    "float",
                    "bool",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "Player.sacrifice_priest_to_order": {
            "name": "sacrifice_priest_to_order",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player._max_useable_power": {
            "name": "_max_useable_power",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player._power_required_to_zero_negative_resources": {
            "name": "_power_required_to_zero_negative_resources",
            "location": 61,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "simulation.core.common.Resources",
                "str"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "float",
                    "int",
                    "Union[bool, None]",
                    "simulation.core.common.Resources",
                    "str"
                ]
            }
        },
        "Player._can_burn_power_for_missing_resources": {
            "name": "_can_burn_power_for_missing_resources",
            "location": 78,
            "return": [
                "dict",
                "float",
                "raiden.utils.TokenAmount"
            ],
            "arguments": {
                "self": [],
                "resources": [
                    "str",
                    "float",
                    "List[str]",
                    "int",
                    "raiden.utils.SecretHash"
                ]
            }
        },
        "Player.can_build": {
            "name": "can_build",
            "location": 84,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "structure": [
                    "bool"
                ],
                "adjacentEnemies": [
                    "bool"
                ]
            }
        },
        "Player.build": {
            "name": "build",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "structure": [
                    "str",
                    "dict",
                    "cmk.utils.type_defs.UserId",
                    "bool"
                ],
                "adjacentEnemies": [
                    "str",
                    "Mapping[str, Any]",
                    "purplship.core.utils.xml.Element",
                    "Iterable[str]",
                    "dict"
                ],
                "free": [
                    "str",
                    "Mapping[str, Any]",
                    "purplship.core.utils.xml.Element",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "Player.collect_phase_ii_income": {
            "name": "collect_phase_ii_income",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.use_town_key": {
            "name": "use_town_key",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.can_use_power": {
            "name": "can_use_power",
            "location": 158,
            "return": [
                "Optional[int]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "bool"
                ]
            }
        },
        "Player.use_power": {
            "name": "use_power",
            "location": 165,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int"
                ]
            }
        },
        "Player.take_bonus_card": {
            "name": "take_bonus_card",
            "location": 193,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Player.gain_town": {
            "name": "gain_town",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "townKey": [
                    "str",
                    "core.models.GroupingKey",
                    "Union[str, int]",
                    "static_frame.core.util.GetItemKeyTypeCompound"
                ]
            }
        },
        "Player.gain_power": {
            "name": "gain_power",
            "location": 218,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "power": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "terrazero-master/code/simulation/core/player_test.py": {
        "TestPlayer.test_halfling_player": {
            "name": "test_halfling_player",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_engineer_player": {
            "name": "test_engineer_player",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_gaining_single_power": {
            "name": "test_player_gaining_single_power",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_gaining_rollover_power": {
            "name": "test_player_gaining_rollover_power",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_gaining_max_power": {
            "name": "test_player_gaining_max_power",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_gaining_max_power_plus_even_value": {
            "name": "test_player_gaining_max_power_plus_even_value",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_gaining_max_power_plus_odd_value": {
            "name": "test_player_gaining_max_power_plus_odd_value",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_gain_power_but_not_tokens_left": {
            "name": "test_player_gain_power_but_not_tokens_left",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_town_key": {
            "name": "test_player_town_key",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_sacrifice_priest_to_order": {
            "name": "test_sacrifice_priest_to_order",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_can_build": {
            "name": "test_player_can_build",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_build_dwellings": {
            "name": "test_player_build_dwellings",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_burn_to_build": {
            "name": "test_player_burn_to_build",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_build_failure_if_cannot_build": {
            "name": "test_player_build_failure_if_cannot_build",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_collect_income_phase": {
            "name": "test_player_collect_income_phase",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_collect_income_from_favorite_tiles": {
            "name": "test_player_collect_income_from_favorite_tiles",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.testPlayerBoundNumberOfPriests": {
            "name": "testPlayerBoundNumberOfPriests",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_can_use_power": {
            "name": "test_player_can_use_power",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_player_take_bonus_cards": {
            "name": "test_player_take_bonus_cards",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "terrazero-master/code/simulation/core/__init__.py": {},
    "terrazero-master/code/simulation/interface/io.py": {
        "IO.welcome_message": {
            "name": "welcome_message",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.request_number_of_players": {
            "name": "request_number_of_players",
            "location": 21,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.request_player_names": {
            "name": "request_player_names",
            "location": 25,
            "return": [
                "typing.List[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "num_players": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "IO.display_scoring_tiles": {
            "name": "display_scoring_tiles",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tiles": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IO.display_bonus_cards": {
            "name": "display_bonus_cards",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cards": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IO.request_player_factions": {
            "name": "request_player_factions",
            "location": 37,
            "return": [
                "typing.List[simulation.core.faction.Faction]"
            ],
            "arguments": {
                "self": [],
                "player_names": [
                    "List[str]",
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "available": [
                    "List[str]",
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "IO.invalid_input": {
            "name": "invalid_input",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.inform_initial_dwelling_placement": {
            "name": "inform_initial_dwelling_placement",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IO.request_location": {
            "name": "request_location",
            "location": 51,
            "return": [
                "simulation.core.board.Position"
            ],
            "arguments": {
                "self": [],
                "pl": [
                    "simulation.core.player.Player",
                    "bytes",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "IO.request_bonus_card_selection": {
            "name": "request_bonus_card_selection",
            "location": 55,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "pl": [
                    "List[simulation.core.common.BonusCard]",
                    "Any",
                    "simulation.core.player.Player",
                    "Callable"
                ],
                "available": [
                    "List[simulation.core.common.BonusCard]",
                    "Any",
                    "simulation.core.player.Player",
                    "Callable"
                ]
            }
        }
    },
    "terrazero-master/code/simulation/interface/terminal.py": {
        "CommandLine.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine._vertical_space": {
            "name": "_vertical_space",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine._request_integer": {
            "name": "_request_integer",
            "location": 23,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Mapping[str, Any]",
                    "str",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "CommandLine._request_string": {
            "name": "_request_string",
            "location": 30,
            "return": [
                "str",
                "Set[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "CommandLine.welcome_message": {
            "name": "welcome_message",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine.request_number_of_players": {
            "name": "request_number_of_players",
            "location": 44,
            "return": [
                "Dict[str, str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine.request_player_names": {
            "name": "request_player_names",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "num_players": [
                    "int",
                    "bool",
                    "bytes",
                    "float"
                ]
            }
        },
        "CommandLine._display_printable_value": {
            "name": "_display_printable_value",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "CommandLine._display_message": {
            "name": "_display_message",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "CommandLine.display_scoring_tiles": {
            "name": "display_scoring_tiles",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tiles": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CommandLine.display_bonus_cards": {
            "name": "display_bonus_cards",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cards": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CommandLine._display_factions": {
            "name": "_display_factions",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CommandLine.request_player_factions": {
            "name": "request_player_factions",
            "location": 77,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "player_names": [
                    "List[str]",
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "available": [
                    "bool",
                    "str"
                ]
            }
        },
        "CommandLine.invalid_input": {
            "name": "invalid_input",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine.inform_initial_dwelling_placement": {
            "name": "inform_initial_dwelling_placement",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLine._name_prefix": {
            "name": "_name_prefix",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pl": [
                    "dict",
                    "bool",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "CommandLine.request_location": {
            "name": "request_location",
            "location": 116,
            "return": [
                "str",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pl": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "CommandLine.request_bonus_card_selection": {
            "name": "request_bonus_card_selection",
            "location": 126,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "pl": [
                    "int",
                    "str",
                    "float"
                ],
                "available": [
                    "str",
                    "int",
                    "bytes",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        }
    },
    "terrazero-master/code/simulation/interface/__init__.py": {},
    "terrazero-master/notebook/data.py": {
        "fetchAllSummaryData": {
            "name": "fetchAllSummaryData",
            "location": 58,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "minDate": [
                    "datetime.datetime",
                    "Optional[int]",
                    "Optional[datetime.datetime]",
                    "int"
                ],
                "maxDate": [
                    "Optional[int]",
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[str]",
                    "Optional[datetime.datetime]",
                    "str"
                ],
                "keepPredicate": [
                    "bool",
                    "float",
                    "tuple",
                    "int",
                    "Optional[str]"
                ],
                "local": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "List[str]",
                    "dict"
                ],
                "maxGames": [
                    "datetime.datetime",
                    "Optional[int]",
                    "Optional[datetime.datetime]",
                    "int"
                ]
            }
        },
        "keepHighScoringGames": {
            "name": "keepHighScoringGames",
            "location": 116,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "game": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "downloadLogForGame": {
            "name": "downloadLogForGame",
            "location": 121,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "game": [
                    "str"
                ]
            }
        },
        "parseShardedFilename": {
            "name": "parseShardedFilename",
            "location": 143,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "loadGameLedgesFromDisk": {
            "name": "loadGameLedgesFromDisk",
            "location": 160,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "fetchAllGameLogs": {
            "name": "fetchAllGameLogs",
            "location": 192,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "detailsLocal": [
                    "bool",
                    "int"
                ],
                "summaryLocal": [
                    "bool",
                    "int",
                    "Optional[\"DiscountCodeState\"]",
                    "Tuple[bool, str]"
                ],
                "saveEvery": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "maxGames": [
                    "bool",
                    "int",
                    "Optional[\"DiscountCodeState\"]",
                    "Tuple[bool, str]"
                ]
            }
        },
        "setUpParser": {
            "name": "setUpParser",
            "location": 249,
            "return": [
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "dict",
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Game.averageVPPerPlayer": {
            "name": "averageVPPerPlayer",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "str",
                "argparse.Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "fetchAllGameLogs.downloadGameWrapper": {
            "name": "downloadGameWrapper",
            "location": 208,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "info": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        }
    }
}
{
    "textacy-corpora-master/setup.py": {
        "read": {
            "name": "read",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        },
        "CleanCommand.initialize_options": {
            "name": "initialize_options",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanCommand.finalize_options": {
            "name": "finalize_options",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CleanCommand.run": {
            "name": "run",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "textacy-corpora-master/src/textacy_corpora/about.py": {},
    "textacy-corpora-master/src/textacy_corpora/corpora.py": {
        "_filter_label": {
            "name": "_filter_label",
            "location": 315,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Dict[Hashable, Any]"
                ],
                "glob": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Dict[Hashable, Any]"
                ],
                "labels": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Dict[Hashable, Any]"
                ]
            }
        },
        "TextCorpora.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lang": [
                    "str",
                    "float",
                    "logging.LogRecord"
                ],
                "corpora": [
                    "str",
                    "List[str]",
                    "Mapping[str, Any]",
                    "Mapping[str, str]",
                    "Sequence[str]",
                    "Iterator[str]"
                ],
                "meta": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TextCorpora.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCorpora.__len__": {
            "name": "__len__",
            "location": 49,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCorpora.__iter__": {
            "name": "__iter__",
            "location": 52,
            "return": [
                "spacy.tokens.Doc"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCorpora.__contains__": {
            "name": "__contains__",
            "location": 56,
            "return": [
                "list",
                "int",
                "List[str]",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int",
                    "float"
                ]
            }
        },
        "TextCorpora.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "idx_or_slice": [
                    "Callable",
                    "Optional[str]",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "TextCorpora.n_corpora": {
            "name": "n_corpora",
            "location": 83,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCorpora.labels": {
            "name": "labels",
            "location": 87,
            "return": [
                "List[str]",
                "bool",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCorpora.n_docs": {
            "name": "n_docs",
            "location": 90,
            "return": [
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "corpora": [
                    "tuple",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "TextCorpora.n_sents": {
            "name": "n_sents",
            "location": 95,
            "return": [
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "corpora": [
                    "tuple",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "TextCorpora.n_tokens": {
            "name": "n_tokens",
            "location": 100,
            "return": [
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "corpora": [
                    "tuple",
                    "List[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "TextCorpora.word_counts": {
            "name": "word_counts",
            "location": 105,
            "return": [
                "str",
                "List[str]",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": [],
                "normalize": [
                    "str",
                    "bool",
                    "bytearray"
                ],
                "weighting": [
                    "str",
                    "bool",
                    "bytearray"
                ],
                "as_strings": [
                    "str",
                    "bool",
                    "bytearray"
                ],
                "corpora": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "TextCorpora.word_doc_counts": {
            "name": "word_doc_counts",
            "location": 121,
            "return": [
                "str",
                "List[str]",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": [],
                "normalize": [
                    "bool",
                    "str"
                ],
                "weighting": [
                    "bool",
                    "str"
                ],
                "smooth_idf": [
                    "bool",
                    "str"
                ],
                "as_strings": [
                    "bool",
                    "str"
                ],
                "corpora": [
                    "str",
                    "bool",
                    "dict",
                    "Union[str, int, float]",
                    "Optional[Dict]"
                ]
            }
        },
        "TextCorpora._agg_with": {
            "name": "_agg_with",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Optional[Union[str, Any]]",
                    "Set[int]",
                    "Callable[..., None]",
                    "Callable"
                ],
                "merge_func": [
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "List[int]",
                    "numpy.ndarray"
                ],
                "corpora": [
                    "Optional[Union[str, Any]]",
                    "Set[int]",
                    "Callable[..., None]",
                    "Callable"
                ]
            }
        },
        "TextCorpora.corpora": {
            "name": "corpora",
            "location": 152,
            "return": [
                "typing.Iterator[textacy.Corpus]"
            ],
            "arguments": {
                "self": [],
                "corpora": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "TextCorpora.get": {
            "name": "get",
            "location": 177,
            "return": [
                "typing.Iterator[spacy.tokens.Doc]"
            ],
            "arguments": {
                "self": [],
                "match_func": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "limit": [
                    "Optional[int]",
                    "Union[int, float]",
                    "List[str]",
                    "float",
                    "numpy.ndarray",
                    "List[Dict[str, Any]]",
                    "int",
                    "bool"
                ],
                "corpora": [
                    "int",
                    "set",
                    "dict",
                    "str",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ]
            }
        },
        "TextCorpora.remove": {
            "name": "remove",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match_func": [
                    "Optional[int]",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "int",
                    "bool",
                    "Tuple[float, float]",
                    "numpy.ndarray",
                    "str"
                ],
                "limit": [
                    "Optional[int]",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "int",
                    "bool",
                    "Tuple[float, float]",
                    "numpy.ndarray",
                    "str"
                ],
                "corpora": [
                    "str",
                    "T",
                    "int",
                    "Set[str]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "TextCorpora.save": {
            "name": "save",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirpath": [
                    "str",
                    "dict",
                    "IO"
                ]
            }
        },
        "TextCorpora.load": {
            "name": "load",
            "location": 227,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int"
                ],
                "lang": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "utils.Vote",
                    "int",
                    "Dict[str, str]"
                ],
                "dirpath": [
                    "str",
                    "dict"
                ],
                "glob": [
                    "str",
                    "Dict[str, Iterable[Any]]",
                    "dict",
                    "Union[int, bytes]",
                    "type",
                    "Optional[Match]"
                ],
                "labels": [
                    "str",
                    "Dict[str, Iterable[Any]]",
                    "dict",
                    "Union[int, bytes]",
                    "type",
                    "Optional[Match]"
                ]
            }
        },
        "TextCorpora.add_corpus": {
            "name": "add_corpus",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "pathlib.Path",
                    "logging.Logger"
                ],
                "corpus": [
                    "str",
                    "numpy.ndarray",
                    "raiden.utils.TokenNetworkAddress",
                    "int"
                ]
            }
        },
        "TextCorpora._get_or_create_corpus": {
            "name": "_get_or_create_corpus",
            "location": 260,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "TextCorpora.add_text": {
            "name": "add_text",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "TextCorpora.add_texts": {
            "name": "add_texts",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Optional[bool]",
                    "str",
                    "List[str]"
                ],
                "texts": [
                    "int",
                    "Iterable[str]",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "TextCorpora.add_doc": {
            "name": "add_doc",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "np.ndarray[np.ndarray[int]]",
                    "raiden.utils.Secret",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "raiden.utils.TokenAddress"
                ],
                "doc": [
                    "spacy.tokens.Doc",
                    "str",
                    "float",
                    "raiden.utils.TokenAmount",
                    "numpy.ndarray"
                ]
            }
        },
        "TextCorpora.add_docs": {
            "name": "add_docs",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "np.ndarray[np.ndarray[int]]",
                    "raiden.utils.Secret",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "raiden.utils.TokenAddress"
                ],
                "docs": [
                    "spacy.tokens.Doc",
                    "str",
                    "float",
                    "raiden.utils.TokenAmount",
                    "numpy.ndarray"
                ]
            }
        },
        "TextCorpora.add_record": {
            "name": "add_record",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "np.ndarray[np.ndarray[int]]",
                    "raiden.utils.Secret",
                    "List[List[Any]]",
                    "List[List[str]]",
                    "raiden.utils.TokenAddress"
                ],
                "record": [
                    "Tuple[str, dict]",
                    "raiden.utils.TokenNetworkAddress",
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "raiden.utils.Callable",
                    "spacy.tokens.Doc"
                ]
            }
        },
        "TextCorpora.add_records": {
            "name": "add_records",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Callable",
                    "np.ndarray[np.ndarray[int]]",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.ChannelID"
                ],
                "records": [
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "str",
                    "raiden.utils.TokenNetworkAddress",
                    "Callable"
                ],
                "batch_size": [
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "str",
                    "raiden.utils.TokenNetworkAddress",
                    "Callable"
                ]
            }
        },
        "TextCorpora.add": {
            "name": "add",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "float",
                    "int",
                    "bool"
                ],
                "data": [
                    "int",
                    "Data",
                    "str",
                    "bytes"
                ],
                "batch_size": [
                    "int",
                    "Data",
                    "str",
                    "bytes"
                ]
            }
        },
        "TextCorpora.add_labelled": {
            "name": "add_labelled",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labelled_data": [
                    "int",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Tuple[str, str, str]",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "Set[int]"
                ],
                "batch_size": [
                    "int",
                    "Data",
                    "str"
                ]
            }
        },
        "TextCorpora.vectors": {
            "name": "vectors",
            "location": 304,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "corpora": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TextCorpora.vector_norms": {
            "name": "vector_norms",
            "location": 309,
            "return": [
                "int",
                "bool",
                "str",
                "mode.utils.Counter[faustypes.TP]"
            ],
            "arguments": {
                "self": [],
                "corpora": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "textacy-corpora-master/src/textacy_corpora/typing.py": {},
    "textacy-corpora-master/src/textacy_corpora/utils.py": {
        "splitext": {
            "name": "splitext",
            "location": 8,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "basename": [
                    "Union[str, pathlib.Path]",
                    "str"
                ]
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 19,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "labelled_data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "textacy-corpora-master/src/textacy_corpora/__init__.py": {},
    "textacy-corpora-master/tests/conftest.py": {
        "spacy_lang": {
            "name": "spacy_lang",
            "location": 13,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "text_collection": {
            "name": "text_collection",
            "location": 18,
            "return": [
                "List[int]",
                "int",
                "List[dict]",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "record_collection": {
            "name": "record_collection",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "text_collection": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ]
            }
        },
        "doc_collection": {
            "name": "doc_collection",
            "location": 47,
            "return": [
                "int",
                "str",
                "tuple",
                "list",
                "List[str]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, Sequence[str]]",
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "text_collection": [
                    "spacy.language.Language",
                    "Dict[str, Sequence[str]]",
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "corpus_collection": {
            "name": "corpus_collection",
            "location": 55,
            "return": [],
            "arguments": {
                "spacy_lang": [
                    "Dict[str, Sequence[str]]",
                    "spacy.language.Language",
                    "str",
                    "int",
                    "Callable"
                ],
                "text_collection": [
                    "Dict[str, Sequence[str]]",
                    "spacy.language.Language",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "text_corpora": {
            "name": "text_corpora",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]",
                    "int",
                    "List[str]",
                    "str"
                ],
                "corpus_collection": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "textacy-corpora-master/tests/test_corpora.py": {
        "test_can_create_empty_corpora": {
            "name": "test_can_create_empty_corpora",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ]
            }
        },
        "test_can_create_corpora": {
            "name": "test_can_create_corpora",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "corpus_collection": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ]
            }
        },
        "test_corpora_length": {
            "name": "test_corpora_length",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "text_corpora": [
                    "textacy_corpora.TextCorpora",
                    "spacy.language.Language",
                    "str"
                ]
            }
        },
        "test_n_docs_attributes": {
            "name": "test_n_docs_attributes",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "text_corpora": [
                    "textacy_corpora.TextCorpora",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_n_sents_attributes": {
            "name": "test_n_sents_attributes",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "text_corpora": [
                    "textacy_corpora.TextCorpora",
                    "Dict[str, textacy.Corpus]",
                    "spacy.language.Language",
                    "bool",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_n_tokens_attributes": {
            "name": "test_n_tokens_attributes",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "text_corpora": [
                    "textacy_corpora.TextCorpora",
                    "Dict[str, textacy.Corpus]",
                    "bool",
                    "Dict[str, Sequence[str]]",
                    "spacy.language.Language",
                    "str"
                ]
            }
        },
        "test_word_counts_attributes": {
            "name": "test_word_counts_attributes",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "text_corpora": [
                    "textacy_corpora.TextCorpora",
                    "int",
                    "Dict[str, textacy.Corpus]",
                    "Tuple[str]"
                ],
                "corpus_collection": [
                    "textacy_corpora.TextCorpora",
                    "str"
                ]
            }
        },
        "test_word_doc_counts_attributes": {
            "name": "test_word_doc_counts_attributes",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "text_corpora": [
                    "textacy_corpora.TextCorpora",
                    "int",
                    "Dict[str, textacy.Corpus]",
                    "Tuple[str]",
                    "bool"
                ],
                "corpus_collection": [
                    "textacy_corpora.TextCorpora",
                    "int",
                    "Dict[str, textacy.Corpus]"
                ]
            }
        },
        "test_indexing": {
            "name": "test_indexing",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "text_corpora": [
                    "Dict[str, textacy.Corpus]",
                    "textacy_corpora.TextCorpora",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "str",
                    "spacy.language.Language",
                    "bool"
                ],
                "corpus_collection": [
                    "Dict[str, textacy.Corpus]",
                    "textacy_corpora.TextCorpora",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "str",
                    "spacy.language.Language",
                    "bool"
                ]
            }
        },
        "test_can_add_corpus": {
            "name": "test_can_add_corpus",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "corpus_collection": [
                    "Dict[str, textacy.Corpus]",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_can_add_text": {
            "name": "test_can_add_text",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language"
                ],
                "text_collection": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_can_add_texts": {
            "name": "test_can_add_texts",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language"
                ],
                "text_collection": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ]
            }
        },
        "test_can_add_doc": {
            "name": "test_can_add_doc",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "doc_collection": [
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Sequence[spacy.tokens.Doc]]"
                ]
            }
        },
        "test_can_add_docs": {
            "name": "test_can_add_docs",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "doc_collection": [
                    "Dict[str, Sequence[spacy.tokens.Doc]]",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_can_add_record": {
            "name": "test_can_add_record",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "record_collection": [
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Sequence[spacy.tokens.Doc]]"
                ]
            }
        },
        "test_can_add_records": {
            "name": "test_can_add_records",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "record_collection": [
                    "Dict[str, Sequence[str]]",
                    "Dict[str, textacy.Corpus]"
                ]
            }
        },
        "test_add_with_texts": {
            "name": "test_add_with_texts",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "textacy_corpora.TextCorpora"
                ],
                "text_collection": [
                    "Dict[str, Sequence[str]]",
                    "Optional[str]"
                ]
            }
        },
        "test_add_with_docs": {
            "name": "test_add_with_docs",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "doc_collection": [
                    "Dict[str, Sequence[str]]",
                    "str",
                    "List[Dict]",
                    "List[str]"
                ]
            }
        },
        "test_add_with_records": {
            "name": "test_add_with_records",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "record_collection": [
                    "Dict[str, Sequence[str]]",
                    "str",
                    "List[Dict]",
                    "List[str]"
                ]
            }
        },
        "test_add_labelled_texts": {
            "name": "test_add_labelled_texts",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "textacy_corpora.TextCorpora",
                    "str"
                ],
                "text_collection": [
                    "Dict[str, Sequence[str]]",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "spacy.language.Language"
                ]
            }
        },
        "test_add_labelled_docs": {
            "name": "test_add_labelled_docs",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "doc_collection": [
                    "Dict[str, Sequence[spacy.tokens.Doc]]",
                    "Dict[str, Sequence[Any]]",
                    "str"
                ]
            }
        },
        "test_add_labelled_with_records": {
            "name": "test_add_labelled_with_records",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "spacy_lang": [
                    "spacy.language.Language",
                    "Dict[str, textacy.Corpus]"
                ],
                "record_collection": [
                    "Dict[str, Sequence[spacy.tokens.Doc]]",
                    "Dict[str, Sequence[Any]]",
                    "str"
                ]
            }
        },
        "test_vector": {
            "name": "test_vector",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "text_corpora": [
                    "textacy_corpora.TextCorpora",
                    "Dict[str, textacy.Corpus]",
                    "str"
                ],
                "corpus_collection": [
                    "Dict[str, textacy.Corpus]",
                    "str"
                ]
            }
        }
    },
    "textacy-corpora-master/tests/utils.py": {
        "to_labelled": {
            "name": "to_labelled",
            "location": 9,
            "return": [
                "typing.Iterator[textacy_corpora.typing.LabelledData]"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "yattag.doc.Doc",
                    "bytes",
                    "set",
                    "bool"
                ]
            }
        },
        "flatten_collection": {
            "name": "flatten_collection",
            "location": 24,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "collection": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "_from_scalar": {
            "name": "_from_scalar",
            "location": 30,
            "return": [
                "str",
                "bytes",
                "Callable",
                "Sequence",
                "Exception",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "label": [
                    "dict",
                    "Type[Any]",
                    "bytes",
                    "int"
                ],
                "data": [
                    "dict",
                    "Type[Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "_from_record": {
            "name": "_from_record",
            "location": 34,
            "return": [
                "str",
                "bytes",
                "Callable",
                "Sequence",
                "Exception",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "label": [
                    "dict",
                    "Type[Any]",
                    "bytes",
                    "int"
                ],
                "data": [
                    "dict",
                    "Type[Any]",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "textacy-corpora-master/tests/__init__.py": {}
}
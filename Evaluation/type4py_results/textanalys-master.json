{
    "textanalys-master/app.py": {
        "handle_error": {
            "name": "handle_error",
            "location": 34,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "start": {
            "name": "start",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "canvas": {
            "name": "canvas",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "docx_post": {
            "name": "docx_post",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "APIError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": [],
                "payload": []
            }
        },
        "APIError.to_dict": {
            "name": "to_dict",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "textanalys-master/scripts/cache_documents.py": {
        "get_document_list": {
            "name": "get_document_list",
            "location": 13,
            "return": [
                "str",
                "Callable",
                "List[str]",
                "list"
            ],
            "arguments": {}
        },
        "create_reports": {
            "name": "create_reports",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "files": [
                    "bool",
                    "str",
                    "List[\"Issue\"]",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "textanalys-master/scripts/statistics_tonality_reading_attributes.py": {
        "read_documents": {
            "name": "read_documents",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "gather_statistics": {
            "name": "gather_statistics",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "documents": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "BaseException",
                    "Mapping",
                    "Iterable"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "textanalys-master/scripts/test.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "textanalys-master/src/analyzer.py": {
        "Analyzer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "report": [],
                "stop_on_error": []
            }
        },
        "Analyzer.add_error": {
            "name": "add_error",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "position": [],
                "headline": [],
                "word": []
            }
        },
        "Analyzer.get_analysis": {
            "name": "get_analysis",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.has_errors": {
            "name": "has_errors",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.run": {
            "name": "run",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_sanity": {
            "name": "test_sanity",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_headlines_predefined": {
            "name": "test_headlines_predefined",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_headlines_required": {
            "name": "test_headlines_required",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_headlines_dependencies": {
            "name": "test_headlines_dependencies",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_headlines_order": {
            "name": "test_headlines_order",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_headlines_named_entities": {
            "name": "test_headlines_named_entities",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_reading_attributes": {
            "name": "test_reading_attributes",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_named_entities": {
            "name": "test_named_entities",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_forbidden_words": {
            "name": "test_forbidden_words",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_unwanted_words": {
            "name": "test_unwanted_words",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_police_abbreviations": {
            "name": "test_police_abbreviations",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_spelling": {
            "name": "test_spelling",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_grammar_rules_regex": {
            "name": "test_grammar_rules_regex",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_tonality": {
            "name": "test_tonality",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyzer.test_headlines_dependencies.has_dep": {
            "name": "has_dep",
            "location": 139,
            "return": [],
            "arguments": {
                "dep": []
            }
        }
    },
    "textanalys-master/src/helpers.py": {
        "create_response": {
            "name": "create_response",
            "location": 4,
            "return": [
                "int",
                "List[str]",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "code": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "data": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "assert_str": {
            "name": "assert_str",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "Optional[str]",
                    "str",
                    "AnyStr",
                    "dict"
                ]
            }
        }
    },
    "textanalys-master/src/__init__.py": {},
    "textanalys-master/src/report/headline.py": {
        "Headline.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headline_node": [
                    "str",
                    "Tuple[str]",
                    "Union[str, Tuple[Any]]",
                    "int"
                ]
            }
        },
        "Headline.get_named_entities": {
            "name": "get_named_entities",
            "location": 18,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "Optional[str]",
                    "str"
                ],
                "type": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Dict[str, str]"
                ],
                "subtype": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Headline.has_named_entity": {
            "name": "has_named_entity",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "Optional[str]",
                    "Union[str, 'Type']",
                    "Tuple[type]"
                ],
                "type": [
                    "str",
                    "Optional[str]",
                    "Union[str, 'Type']",
                    "Tuple[type]"
                ],
                "subtype": [
                    "str",
                    "Optional[str]",
                    "Union[str, 'Type']",
                    "Tuple[type]"
                ]
            }
        },
        "Headline.to_text": {
            "name": "to_text",
            "location": 45,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "textanalys-master/src/report/named_entity.py": {
        "NamedEntity.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "named_entity_node": [
                    "str"
                ]
            }
        }
    },
    "textanalys-master/src/report/report.py": {
        "Report.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "document": []
            }
        },
        "Report._sparv_convert_document_to_xml": {
            "name": "_sparv_convert_document_to_xml",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Report._sparv_get_analysis": {
            "name": "_sparv_get_analysis",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Report.get_named_entities": {
            "name": "get_named_entities",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "identity": [],
                "type": [],
                "subtype": []
            }
        },
        "Report.get_regex_position": {
            "name": "get_regex_position",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "Report.get_regex_postions": {
            "name": "get_regex_postions",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "ignore_case": []
            }
        },
        "Report.get_headline_position": {
            "name": "get_headline_position",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "headline": []
            }
        },
        "Report.get_word_postion": {
            "name": "get_word_postion",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Report.get_words_position": {
            "name": "get_words_position",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "Report.get_words": {
            "name": "get_words",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "skip_wordclasses": []
            }
        },
        "Report.spellcheck": {
            "name": "spellcheck",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "skip_wordclasses": []
            }
        },
        "Report.to_text": {
            "name": "to_text",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Report._sparv_convert_document_to_xml.split_and_keep_delimiter": {
            "name": "split_and_keep_delimiter",
            "location": 46,
            "return": [],
            "arguments": {
                "s": [],
                "sep": []
            }
        }
    },
    "textanalys-master/src/report/sentence.py": {
        "Sentence.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence_node": [
                    "str",
                    "Tuple[str]",
                    "Union[str, Tuple[Any]]",
                    "int"
                ]
            }
        },
        "Sentence.has_word": {
            "name": "has_word",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Sentence.get_named_entities": {
            "name": "get_named_entities",
            "location": 28,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "Optional[str]"
                ],
                "type": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Dict[str, str]"
                ],
                "subtype": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "textanalys-master/src/report/word.py": {
        "Word.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_node": [
                    "str",
                    "Tuple[str, str]",
                    "Union[str, Tuple[Any]]"
                ]
            }
        }
    },
    "textanalys-master/src/report/__init__.py": {},
    "textanalys-master/src/rules/rules.py": {
        "Rules.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Rules._init_headline_rules": {
            "name": "_init_headline_rules",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Rules.get_headline_rules": {
            "name": "get_headline_rules",
            "location": 62,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable",
                    "Match[str]",
                    "List[Dict]"
                ]
            }
        }
    },
    "textanalys-master/src/rules/rule_structures.py": {
        "HeadlineRules.matches_any": {
            "name": "matches_any",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "List[str]",
                    "bool",
                    "str",
                    "T"
                ]
            }
        },
        "HeadlineRules.matches": {
            "name": "matches",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "bytes",
                    "Iterator[T]",
                    "Match[str]",
                    "Callable[[], Any]"
                ]
            }
        }
    },
    "textanalys-master/src/rules/__init__.py": {}
}
{
    "tezos-flask-master/service.py": {
        "tezos_client": {
            "name": "tezos_client",
            "location": 55,
            "return": [
                "flask.Flask"
            ],
            "arguments": {}
        },
        "tezosclient": {
            "name": "tezosclient",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "str",
                "Union[tuple, list]"
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "tezos-flask-master/client/client.py": {
        "format_command": {
            "name": "format_command",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_path": [
                    "str"
                ],
                "admin_client_path": [
                    "str"
                ],
                "host": [
                    "str",
                    "int"
                ],
                "base_dir": [
                    "str",
                    "Optional[str]"
                ],
                "rpc_port": [
                    "int",
                    "str"
                ],
                "use_tls": [
                    "int",
                    "str",
                    "List[Tuple[str, str]]",
                    "bool"
                ],
                "disable_disclaimer": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Client.run": {
            "name": "run",
            "location": 90,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "List[Dict]",
                    "bool",
                    "Coroutine"
                ],
                "admin": [
                    "Coroutine",
                    "int",
                    "str",
                    "datetime.datetime"
                ],
                "check": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "trace": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Client.rpc": {
            "name": "rpc",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "verb": [
                    "str",
                    "Tuple[int, int]"
                ],
                "path": [
                    "str",
                    "Tuple[int, int]"
                ],
                "data": [
                    "Optional[str]",
                    "str",
                    "Optional[Mapping[str, str]]",
                    "dict"
                ],
                "params": [
                    "Optional[Mapping[str, str]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Client.typecheck": {
            "name": "typecheck",
            "location": 162,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "str",
                    "int",
                    "Mapping"
                ]
            }
        },
        "Client.run_script": {
            "name": "run_script",
            "location": 166,
            "return": [
                "Coroutine",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "str",
                    "int",
                    "Union[float, str]"
                ],
                "storage": [
                    "int",
                    "str",
                    "bytes"
                ],
                "inp": [
                    "int",
                    "str",
                    "bytes"
                ],
                "amount": [
                    "float",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Client.gen_key": {
            "name": "gen_key",
            "location": 178,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "int",
                    "str",
                    "Tuple[str, int]"
                ],
                "args": []
            }
        },
        "Client.import_secret_key": {
            "name": "import_secret_key",
            "location": 185,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "secret": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.activate_protocol": {
            "name": "activate_protocol",
            "location": 188,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "str",
                    "bool"
                ],
                "parameter_file": [
                    "str"
                ],
                "fitness": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ],
                "timestamp": [
                    "Optional[str]",
                    "str",
                    "Optional[TextIO]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Client.activate_protocol_json": {
            "name": "activate_protocol_json",
            "location": 204,
            "return": [
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "bytes",
                    "str",
                    "Optional[bool]",
                    "Optional[Exception]",
                    "Dict[str, Any]"
                ],
                "parameters": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "fitness": [
                    "bytes",
                    "str",
                    "Optional[bool]",
                    "Optional[Exception]",
                    "Dict[str, Any]"
                ],
                "key": [
                    "bytes",
                    "str",
                    "Optional[bool]",
                    "Optional[Exception]",
                    "Dict[str, Any]"
                ],
                "timestamp": [
                    "bytes",
                    "str",
                    "Optional[bool]",
                    "Optional[Exception]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Client.show_voting_period": {
            "name": "show_voting_period",
            "location": 218,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.ban_peer": {
            "name": "ban_peer",
            "location": 221,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Client.unban_peer": {
            "name": "unban_peer",
            "location": 224,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Client.trust_peer": {
            "name": "trust_peer",
            "location": 227,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Client.untrust_peer": {
            "name": "untrust_peer",
            "location": 230,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Client.endorse": {
            "name": "endorse",
            "location": 233,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "Client.bake": {
            "name": "bake",
            "location": 237,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ],
                "args": []
            }
        },
        "Client.originate": {
            "name": "originate",
            "location": 246,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "manager": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "amount": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "sender": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "contract": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "args": []
            }
        },
        "Client.transfer": {
            "name": "transfer",
            "location": 261,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Sequence"
                ],
                "account1": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Sequence"
                ],
                "account2": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Sequence"
                ],
                "args": []
            }
        },
        "Client.p2p_stat": {
            "name": "p2p_stat",
            "location": 273,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_balance": {
            "name": "get_balance",
            "location": 276,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "Client.get_receipt": {
            "name": "get_receipt",
            "location": 280,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str",
                    "bool"
                ],
                "args": []
            }
        },
        "Client.get_prevalidator": {
            "name": "get_prevalidator",
            "location": 289,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_mempool": {
            "name": "get_mempool",
            "location": 292,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.mempool_is_empty": {
            "name": "mempool_is_empty",
            "location": 295,
            "return": [
                "int",
                "bool",
                "Sequence",
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_head": {
            "name": "get_head",
            "location": 303,
            "return": [
                "str",
                "List[dict]",
                "int",
                "Optional[str]",
                "Callable[[], T]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_block": {
            "name": "get_block",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "int",
                    "List[List]",
                    "List[int]",
                    "List[List[T]]"
                ]
            }
        },
        "Client.get_ballot_list": {
            "name": "get_ballot_list",
            "location": 309,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]",
                "List[dict]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_ballots": {
            "name": "get_ballots",
            "location": 312,
            "return": [
                "str",
                "List[dict]",
                "int",
                "Optional[str]",
                "Callable[[], T]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_period_kind": {
            "name": "get_current_period_kind",
            "location": 315,
            "return": [
                "str",
                "List[dict]",
                "int",
                "Optional[str]",
                "Callable[[], T]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_proposal": {
            "name": "get_current_proposal",
            "location": 319,
            "return": [
                "str",
                "List[dict]",
                "int",
                "Optional[str]",
                "Callable[[], T]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_quorum": {
            "name": "get_current_quorum",
            "location": 323,
            "return": [
                "str",
                "List[dict]",
                "int",
                "Optional[str]",
                "Callable[[], T]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_listings": {
            "name": "get_listings",
            "location": 326,
            "return": [
                "str",
                "List[dict]",
                "int",
                "Optional[str]",
                "Callable[[], T]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_proposals": {
            "name": "get_proposals",
            "location": 329,
            "return": [
                "str",
                "List[dict]",
                "int",
                "Optional[str]",
                "Callable[[], T]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_protocol": {
            "name": "get_protocol",
            "location": 332,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Client.get_period_position": {
            "name": "get_period_position",
            "location": 337,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_level": {
            "name": "get_level",
            "location": 342,
            "return": [
                "str",
                "int",
                "Any"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Client.wait_for_inclusion": {
            "name": "wait_for_inclusion",
            "location": 347,
            "return": [
                "str",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "operation_hash": [
                    "str",
                    "List[Dict]",
                    "T",
                    "list"
                ],
                "branch": [
                    "Optional[str]",
                    "Optional[object]",
                    "Tuple[int, int]",
                    "Optional[AnyStr]",
                    "bool",
                    "Optional[T]",
                    "str"
                ],
                "args": []
            }
        },
        "Client.inject_protocol": {
            "name": "inject_protocol",
            "location": 360,
            "return": [
                "bool",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "List[int]",
                    "bytes",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "Client.list_protocols": {
            "name": "list_protocols",
            "location": 363,
            "return": [
                "str",
                "dict",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.submit_proposals": {
            "name": "submit_proposals",
            "location": 367,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ],
                "protos": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ]
            }
        },
        "Client.submit_ballot": {
            "name": "submit_ballot",
            "location": 374,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ],
                "proto": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ],
                "vote": [
                    "List[str]",
                    "str",
                    "int",
                    "Sized",
                    "Optional[str]"
                ]
            }
        },
        "Client.bootstrapped": {
            "name": "bootstrapped",
            "location": 380,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.cleanup": {
            "name": "cleanup",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tezos-flask-master/client/client_output.py": {
        "extract_rpc_answer": {
            "name": "extract_rpc_answer",
            "location": 132,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "client_output": [
                    "int",
                    "str",
                    "Mapping[str, str]",
                    "T",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "extract_balance": {
            "name": "extract_balance",
            "location": 143,
            "return": [
                "str",
                "int",
                "Optional[bool]",
                "Optional[int]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "client_output": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "IO[str]",
                    "Callable[[str, str], None]",
                    "Optional[bool]"
                ]
            }
        },
        "extract_protocols": {
            "name": "extract_protocols",
            "location": 151,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "client_output": [
                    "str",
                    "bool"
                ]
            }
        },
        "InvalidClientOutput.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "EndorseResult.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "TransferResult.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "GetReceiptResult.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "RunScriptResult.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "OriginationResult.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "dict"
                ]
            }
        },
        "SubmitProposalsResult.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "BakeForResult.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "ActivationResult.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "WaitForResult.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str",
                    "AnyStr"
                ]
            }
        }
    },
    "tezos-flask-master/client/__init__.py": {},
    "tezos-flask-master/tools/constants.py": {},
    "tezos-flask-master/tools/paths.py": {},
    "tezos-flask-master/tools/utils.py": {
        "retry": {
            "name": "retry",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "attempts": [
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "check_block_contains_operations": {
            "name": "check_block_contains_operations",
            "location": 44,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "bool",
                "\"ImmutableSet[T]\""
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "Client"
                ],
                "operation_hashes": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "check_mempool_contains_operations": {
            "name": "check_mempool_contains_operations",
            "location": 53,
            "return": [
                "Set[str]",
                "list"
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "str"
                ],
                "operation_hashes": [
                    "List[str]",
                    "int",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "check_protocol": {
            "name": "check_protocol",
            "location": 61,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "str",
                    "zerver.models.Client"
                ],
                "proto": [
                    "str",
                    "Set[str]",
                    "float"
                ],
                "params": [
                    "List[str]",
                    "str",
                    "zerver.models.Client"
                ]
            }
        },
        "check_level": {
            "name": "check_level",
            "location": 68,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ]
            }
        },
        "check_level_greater_than": {
            "name": "check_level_greater_than",
            "location": 73,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ]
            }
        },
        "check_operation_in_receipt": {
            "name": "check_operation_in_receipt",
            "location": 78,
            "return": [
                "bool",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[str]"
                ],
                "operation_hash": [
                    "str",
                    "List[str]"
                ],
                "check_previous": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Tuple[str, str]"
                ]
            }
        },
        "synchronize": {
            "name": "synchronize",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "clients": [],
                "max_diff": [
                    "int"
                ]
            }
        },
        "get_block_hash": {
            "name": "get_block_hash",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [
                    "Client",
                    "google.cloud.datastore.Client"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "all_blocks": {
            "name": "all_blocks",
            "location": 109,
            "return": [
                "List[int]",
                "list",
                "str",
                "Optional[Type]",
                "Union[int, slice]"
            ],
            "arguments": {
                "client": [
                    "Client",
                    "google.cloud.datastore.Client"
                ]
            }
        },
        "operations_hash_from_block": {
            "name": "operations_hash_from_block",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "block": []
            }
        },
        "check_logs": {
            "name": "check_logs",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "logs": [
                    "List[str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "pattern": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "check_logs_counts": {
            "name": "check_logs_counts",
            "location": 142,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "type",
                "int"
            ],
            "arguments": {
                "logs": [
                    "List[str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "pattern": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "activate_alpha": {
            "name": "activate_alpha",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "float"
                ],
                "parameters": [
                    "str",
                    "zerver.models.Client"
                ]
            }
        },
        "pprint": {
            "name": "pprint",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "json_data": [
                    "dict",
                    "Dict[str, Union[str, bool]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "rpc": {
            "name": "rpc",
            "location": 165,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "verb": [
                    "str",
                    "int"
                ],
                "path": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "data": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Optional[Dict[str, Any]]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "headers": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 200,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "secret_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "b58_key_to_hex": {
            "name": "b58_key_to_hex",
            "location": 220,
            "return": [
                "bytes",
                "List[str]",
                "str"
            ],
            "arguments": {
                "b58_key": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "b58_sig_to_hex": {
            "name": "b58_sig_to_hex",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "b58_sig": [
                    "str",
                    "List[str]",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "hex_sig_to_b58": {
            "name": "hex_sig_to_b58",
            "location": 246,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "hexsig": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "sign_operation": {
            "name": "sign_operation",
            "location": 269,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "encoded_operation": [
                    "bytes",
                    "str",
                    "int"
                ],
                "secret_key": [
                    "int",
                    "List[List[int]]",
                    "bytes",
                    "IO[bytes]",
                    "str"
                ]
            }
        },
        "retry.decorator_retry": {
            "name": "decorator_retry",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "hex_sig_to_b58.sha256": {
            "name": "sha256",
            "location": 255,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "retry.decorator_retry.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "tezos-flask-master/tools/__init__.py": {}
}
{
    "theHarvester-master/restfulHarvest.py": {},
    "theHarvester-master/setup.py": {},
    "theHarvester-master/theHarvester.py": {},
    "theHarvester-master/tests/test_myparser.py": {},
    "theHarvester-master/tests/__init__.py": {},
    "theHarvester-master/tests/discovery/test_anubis.py": {
        "TestAnubis.domain": {
            "name": "domain",
            "location": 15,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        }
    },
    "theHarvester-master/tests/discovery/test_bufferover.py": {
        "TestBufferover.domain": {
            "name": "domain",
            "location": 15,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        }
    },
    "theHarvester-master/tests/discovery/test_certspotter.py": {
        "TestCertspotter.domain": {
            "name": "domain",
            "location": 15,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        }
    },
    "theHarvester-master/tests/discovery/test_githubcode.py": {},
    "theHarvester-master/tests/discovery/test_linkedin_links.py": {},
    "theHarvester-master/tests/discovery/test_n45ht.py": {
        "TestN45ht.domain": {
            "name": "domain",
            "location": 15,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        }
    },
    "theHarvester-master/tests/discovery/test_omnisint.py": {
        "TestOmnisint.domain": {
            "name": "domain",
            "location": 15,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        }
    },
    "theHarvester-master/tests/discovery/test_otx.py": {
        "TestOtx.domain": {
            "name": "domain",
            "location": 15,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        }
    },
    "theHarvester-master/tests/discovery/test_qwantsearch.py": {
        "TestSearchQwant.domain": {
            "name": "domain",
            "location": 14,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        },
        "TestSearchQwant.test_get_start_offset_return_0": {
            "name": "test_get_start_offset_return_0",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchQwant.test_get_start_offset_return_50": {
            "name": "test_get_start_offset_return_50",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchQwant.test_get_start_offset_return_100": {
            "name": "test_get_start_offset_return_100",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "theHarvester-master/tests/discovery/test_sublist3r.py": {
        "TestSublist3r.domain": {
            "name": "domain",
            "location": 15,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        }
    },
    "theHarvester-master/tests/discovery/test_threatminer.py": {
        "TestThreatminer.domain": {
            "name": "domain",
            "location": 15,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {}
        }
    },
    "theHarvester-master/tests/discovery/__init__.py": {},
    "theHarvester-master/theHarvester/__init__.py": {},
    "theHarvester-master/theHarvester/__main__.py": {},
    "theHarvester-master/theHarvester/discovery/anubis.py": {
        "SearchAnubis.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/baidusearch.py": {
        "SearchBaidu.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/binaryedgesearch.py": {
        "SearchBinaryEdge.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/bingsearch.py": {
        "SearchBing.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "Union[str, float]",
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "start": [
                    "int",
                    "Union[str, float]",
                    "str"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/bufferoverun.py": {
        "SearchBufferover.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/censysearch.py": {
        "SearchCensys.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "int",
                    "float",
                    "str"
                ],
                "limit": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/certspottersearch.py": {
        "SearchCertspoter.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/constants.py": {
        "filter": {
            "name": "filter",
            "location": 34,
            "return": [
                "Union[\"RangeSet[T]\", Iterable[Any]]",
                "int",
                "Callable"
            ],
            "arguments": {
                "lst": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_delay": {
            "name": "get_delay",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "MissingKey.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "list"
                ]
            }
        },
        "MissingKey.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/crtsh.py": {
        "SearchCrtsh.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/dnsdumpster.py": {
        "SearchDnsDumpster.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/dnssearch.py": {
        "serialize_ip_range": {
            "name": "serialize_ip_range",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "ip": [
                    "str",
                    "int",
                    "Iterable[int]"
                ],
                "netmask": [
                    "int",
                    "Dict[str, str]",
                    "float"
                ]
            }
        },
        "list_ips_in_network_range": {
            "name": "list_ips_in_network_range",
            "location": 102,
            "return": [
                "int",
                "List[int]",
                "List[str]",
                "str",
                "bool",
                "Sequence[Any]"
            ],
            "arguments": {
                "iprange": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "log_query": {
            "name": "log_query",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "ip": [
                    "str",
                    "int",
                    "BinaryIO",
                    "Dict[str, Any]"
                ]
            }
        },
        "log_result": {
            "name": "log_result",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "bytes"
                ]
            }
        },
        "generate_postprocessing_callback": {
            "name": "generate_postprocessing_callback",
            "location": 211,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "target": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DnsForce.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "int",
                    "str",
                    "Dict[str, float]"
                ],
                "dnsserver": [
                    "bool",
                    "Sequence[str]",
                    "Optional[float]",
                    "Optional[Union[bool, Any]]",
                    "Dict[int, Set[str]]",
                    "bytes"
                ],
                "verbose": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "generate_postprocessing_callback.append_matching_hosts": {
            "name": "append_matching_hosts",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/duckduckgosearch.py": {
        "SearchDuckDuckGo.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/fullhuntsearch.py": {
        "SearchFullHunt.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/githubcode.py": {
        "SearchGithubCode.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/googlesearch.py": {
        "SearchGoogle.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "Union[str, float]",
                    "str"
                ],
                "limit": [
                    "int",
                    "Union[str, float]",
                    "str"
                ],
                "start": [
                    "int",
                    "Union[str, float]",
                    "str"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/hackertarget.py": {
        "SearchHackerTarget.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/huntersearch.py": {
        "SearchHunter.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "Dict[int, Dict[int, Any]]",
                    "bytes"
                ],
                "limit": [
                    "int",
                    "Union[str, float]",
                    "str"
                ],
                "start": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/intelxsearch.py": {
        "SearchIntelx.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/linkedinsearch.py": {
        "SearchLinkedin.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/n45htsearch.py": {
        "SearchN45ht.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/omnisint.py": {
        "SearchOmnisint.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/otxsearch.py": {
        "SearchOtx.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/pentesttools.py": {
        "SearchPentestTools.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/projectdiscovery.py": {
        "SearchDiscovery.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/qwantsearch.py": {
        "SearchQwant.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "dict"
                ],
                "start": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "limit": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "SearchQwant.get_start_offset": {
            "name": "get_start_offset",
            "location": 17,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/rapiddns.py": {
        "SearchRapidDns.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/rocketreach.py": {
        "SearchRocketReach.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/securitytrailssearch.py": {
        "SearchSecuritytrail.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/shodansearch.py": {
        "SearchShodan.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/spyse.py": {
        "SearchSpyse.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/sublist3r.py": {
        "SearchSublist3r.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/takeover.py": {
        "TakeOver.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hosts": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/threatcrowd.py": {
        "SearchThreatcrowd.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/threatminer.py": {
        "SearchThreatminer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/trello.py": {
        "SearchTrello.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/twittersearch.py": {
        "SearchTwitter.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/urlscan.py": {
        "SearchUrlscan.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/virustotal.py": {
        "SearchVirustotal.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/yahoosearch.py": {
        "SearchYahoo.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/zoomeyesearch.py": {
        "SearchZoomEye.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/discovery/__init__.py": {},
    "theHarvester-master/theHarvester/lib/core.py": {
        "Core.version": {
            "name": "version",
            "location": 14,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {}
        },
        "Core.api_keys": {
            "name": "api_keys",
            "location": 18,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "Core.binaryedge_key": {
            "name": "binaryedge_key",
            "location": 32,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.bing_key": {
            "name": "bing_key",
            "location": 36,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.censys_key": {
            "name": "censys_key",
            "location": 40,
            "return": [
                "str",
                "Callable",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "Core.fullhunt_key": {
            "name": "fullhunt_key",
            "location": 44,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.github_key": {
            "name": "github_key",
            "location": 48,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.hunter_key": {
            "name": "hunter_key",
            "location": 52,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.intelx_key": {
            "name": "intelx_key",
            "location": 56,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.pentest_tools_key": {
            "name": "pentest_tools_key",
            "location": 60,
            "return": [
                "str",
                "bool",
                "Sequence[Sequence[Any]]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "Core.projectdiscovery_key": {
            "name": "projectdiscovery_key",
            "location": 64,
            "return": [
                "str",
                "int",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "Core.rocketreach_key": {
            "name": "rocketreach_key",
            "location": 68,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.security_trails_key": {
            "name": "security_trails_key",
            "location": 72,
            "return": [
                "str",
                "bool",
                "Sequence[Sequence[Any]]",
                "int"
            ],
            "arguments": {}
        },
        "Core.shodan_key": {
            "name": "shodan_key",
            "location": 76,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.spyse_key": {
            "name": "spyse_key",
            "location": 80,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.zoomeye_key": {
            "name": "zoomeye_key",
            "location": 84,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "Core.proxy_list": {
            "name": "proxy_list",
            "location": 88,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {}
        },
        "Core.banner": {
            "name": "banner",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Core.get_supportedengines": {
            "name": "get_supportedengines",
            "location": 120,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Core.get_user_agent": {
            "name": "get_user_agent",
            "location": 163,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "theHarvester-master/theHarvester/lib/hostchecker.py": {
        "Checker.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hosts": [
                    "int",
                    "bool",
                    "float"
                ],
                "nameserver": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/lib/stash.py": {
        "StashManager.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "theHarvester-master/theHarvester/lib/__init__.py": {},
    "theHarvester-master/theHarvester/lib/api/api.py": {},
    "theHarvester-master/theHarvester/lib/api/api_example.py": {},
    "theHarvester-master/theHarvester/lib/api/__init__.py": {},
    "theHarvester-master/theHarvester/parsers/intelxparser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "theHarvester-master/theHarvester/parsers/myparser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "results": [
                    "Counter",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "list"
                ],
                "word": [
                    "int",
                    "Union[str, float]",
                    "str",
                    "tuple",
                    "float"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/parsers/securitytrailsparser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "bool",
                    "List[int]",
                    "float",
                    "int"
                ],
                "text": [
                    "str",
                    "bool",
                    "List[int]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "theHarvester-master/theHarvester/parsers/__init__.py": {},
    "theHarvester-master/theHarvester/screenshot/screenshot.py": {
        "ScreenShotter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output": [
                    "bytes",
                    "str"
                ]
            }
        },
        "ScreenShotter.verify_path": {
            "name": "verify_path",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenShotter.chunk_list": {
            "name": "chunk_list",
            "location": 46,
            "return": [
                "str",
                "bool",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "items": [
                    "int",
                    "list",
                    "bool",
                    "Sized"
                ],
                "chunk_size": [
                    "int",
                    "list",
                    "bool",
                    "Sized"
                ]
            }
        }
    }
}
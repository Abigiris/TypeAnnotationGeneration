{
    "timeserio-master/setup.py": {},
    "timeserio-master/docs/source/conf.py": {},
    "timeserio-master/tests/conftest.py": {
        "random": {
            "name": "random",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "use_tensor_extension": {
            "name": "use_tensor_extension",
            "location": 18,
            "return": [
                "int",
                "float",
                "raiden.utils.Optional[int]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]"
                ]
            }
        }
    },
    "timeserio-master/tests/test_externals.py": {
        "test_absent_imports": {
            "name": "test_absent_imports",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "timeserio-master/tests/test_version.py": {
        "test_version": {
            "name": "test_version",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "timeserio-master/tests/test_batches/conftest.py": {
        "dask_client": {
            "name": "dask_client",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "timeserio-master/tests/test_batches/test_utils.py": {
        "test_ceiling_division": {
            "name": "test_ceiling_division",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "dividend": [
                    "str"
                ],
                "divisor": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        }
    },
    "timeserio-master/tests/test_batches/__init__.py": {},
    "timeserio-master/tests/test_batches/test_chunked/test_dask.py": {
        "TestSequenceForecastBatchGeneratorMultiID.test_n_subgens": {
            "name": "test_n_subgens",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_customers": [
                    "int",
                    "List[int]",
                    "Union[float, List[float]]"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorMultiID.test_subgen_lengths": {
            "name": "test_subgen_lengths",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_customers": [
                    "int",
                    "Callable[[str, str], float]",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "np.ndarray",
                    "numpy.ndarray"
                ],
                "exp_sg_len": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorMultiID.test_find_batch_in_subgens": {
            "name": "test_find_batch_in_subgens",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "batch_idx": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int",
                    "float"
                ],
                "exp_subgen_idx": [
                    "Tuple[int, int]",
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "bytes",
                    "Optional[int]",
                    "bool"
                ],
                "exp_idx_in_subgen": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorMultiID.test_find_batch_raises_outside_subgens": {
            "name": "test_find_batch_raises_outside_subgens",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequenceForecastBatchGeneratorMultiID.test_aggregate_ids": {
            "name": "test_aggregate_ids",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "timeserio-master/tests/test_batches/test_chunked/test_pandas.py": {
        "TestRowBatchGenerator.test_nb_batches": {
            "name": "test_nb_batches",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "int",
                    "Iterable[str]"
                ],
                "batch_size": [
                    "int",
                    "Sequence[Any]"
                ],
                "batch_aggregator": [
                    "int",
                    "Sequence[Any]"
                ],
                "expected_nb_batches": [
                    "float",
                    "numpy.ndarray",
                    "str",
                    "Callable[[str, str], float]"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorMultiID.test_n_subgens": {
            "name": "test_n_subgens",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_customers": [
                    "numpy.ndarray",
                    "int",
                    "bytearray",
                    "numpy.ma.MaskedArray",
                    "bytes",
                    "List[Dict]",
                    "List[int]"
                ],
                "use_tensor_extension": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorMultiID.test_subgen_lengths": {
            "name": "test_subgen_lengths",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_customers": [
                    "Callable",
                    "int",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Optional[Tuple[int, ...]]"
                ],
                "exp_sg_len": [
                    "int",
                    "float",
                    "bool",
                    "Tuple[int]",
                    "Optional[float]"
                ],
                "use_tensor_extension": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorMultiID.test_find_batch_in_subgens": {
            "name": "test_find_batch_in_subgens",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "batch_idx": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int",
                    "float"
                ],
                "exp_subgen_idx": [
                    "Tuple[int, int]",
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "bytes",
                    "Optional[int]",
                    "bool"
                ],
                "exp_idx_in_subgen": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "use_tensor_extension": [
                    "Optional[bool]",
                    "bool",
                    "str"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorMultiID.test_find_batch_raises_outside_subgens": {
            "name": "test_find_batch_raises_outside_subgens",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "use_tensor_extension": [
                    "int",
                    "str"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorMultiID.test_aggregate_ids": {
            "name": "test_aggregate_ids",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "use_tensor_extension": [
                    "Dict[int, dict]"
                ]
            }
        }
    },
    "timeserio-master/tests/test_batches/test_chunked/test_parquet.py": {
        "local_writable_url": {
            "name": "local_writable_url",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "float"
                ]
            }
        },
        "s3_writable_url": {
            "name": "s3_writable_url",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_ddf_to_parquet": {
            "name": "_ddf_to_parquet",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "ddf": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "TestRowBatchGenerator.test_nb_batches": {
            "name": "test_nb_batches",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "int",
                    "Iterable[str]"
                ],
                "batch_size": [
                    "Callable",
                    "Callable[[str, str], None]",
                    "Iterable",
                    "float",
                    "int",
                    "bool",
                    "Exception"
                ],
                "batch_aggregator": [
                    "Callable",
                    "Callable[[str, str], None]",
                    "Iterable",
                    "float",
                    "int",
                    "bool",
                    "Exception"
                ],
                "expected_nb_batches": [
                    "float",
                    "numpy.ndarray",
                    "str",
                    "Callable[[str, str], float]"
                ],
                "writable_url": [
                    "Dict[str, str]",
                    "bool",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorFromParquet.test_n_subgens": {
            "name": "test_n_subgens",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_customers": [
                    "List[int]",
                    "int",
                    "Dict[str, int]",
                    "List[Dict]",
                    "numpy.ma.MaskedArray"
                ],
                "writable_url": [
                    "dict",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorFromParquet.test_subgen_lengths": {
            "name": "test_subgen_lengths",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "writable_url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorFromParquet.test_find_batch_in_subgens": {
            "name": "test_find_batch_in_subgens",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "batch_idx": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int",
                    "float"
                ],
                "exp_subgen_idx": [
                    "Tuple[int, int]",
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "bytes",
                    "Optional[int]",
                    "bool"
                ],
                "exp_idx_in_subgen": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "writable_url": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorFromParquet.test_find_batch_raises_outside_subgens": {
            "name": "test_find_batch_raises_outside_subgens",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "writable_url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestSequenceForecastBatchGeneratorFromParquet.test_aggregate_ids": {
            "name": "test_aggregate_ids",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_aggregator": [],
                "exp_gen_len": [
                    "str"
                ],
                "writable_url": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "timeserio-master/tests/test_batches/test_single/test_row.py": {
        "TestRowBatchGenerator.test_nb_batches": {
            "name": "test_nb_batches",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "batch_size": [
                    "Sequence[Any]",
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "List[List[int]]"
                ],
                "expected_nb_batches": [
                    "Type[Exception]",
                    "Optional[int]",
                    "List[List[int]]",
                    "int",
                    "float"
                ]
            }
        },
        "TestRowBatchGenerator.test_batch_size": {
            "name": "test_batch_size",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "bool",
                    "int",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "Sequence[Any]",
                    "float"
                ],
                "expected_last_batch_size": [
                    "int",
                    "Type[Exception]"
                ]
            }
        }
    },
    "timeserio-master/tests/test_batches/test_single/test_sequence.py": {
        "TestSamplingForecastBatchGenerator.test_get_sequence_values": {
            "name": "test_get_sequence_values",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "use_tensor_extension": [
                    "Dict[str, str]",
                    "Optional[Dict]"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_num_examples": {
            "name": "test_num_examples",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "int",
                    "Dict[str, Any]"
                ],
                "seq_length": [
                    "float",
                    "numpy.array",
                    "Mapping[str, Tuple[float, float, float]]",
                    "bytes"
                ],
                "fc_max": [
                    "float",
                    "numpy.array",
                    "Mapping[str, Tuple[float, float, float]]",
                    "bytes"
                ],
                "n_sequences_expected": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "use_tensor_extension": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_columns": {
            "name": "test_columns",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id_column": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "float",
                    "str",
                    "Optional[float]"
                ],
                "sequence_columns": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "float",
                    "str",
                    "Optional[float]"
                ],
                "last_step_columns": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "float",
                    "str",
                    "Optional[float]"
                ],
                "expected_columns": [
                    "List[str]",
                    "Dict[str, int]",
                    "int",
                    "Set[str]",
                    "tuple",
                    "List[Tuple[int, int, int]]",
                    "Tuple[int]",
                    "str"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_start_time": {
            "name": "test_start_time",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_time_idx": [
                    "int",
                    "Union[int, str]",
                    "Optional[float]"
                ],
                "expected_start_time_idx": [
                    "int",
                    "Optional[int]"
                ],
                "use_tensor_extension": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_invalid_start_time": {
            "name": "test_invalid_start_time",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "use_tensor_extension": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_random_offset": {
            "name": "test_random_offset",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "random": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[bool]"
                ],
                "use_tensor_extension": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_random_offset_value_with_period": {
            "name": "test_random_offset_value_with_period",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "random": [
                    "List[Tuple[str, str]]"
                ],
                "seq_len": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "period": [
                    "bool",
                    "int"
                ],
                "expected_max_offset": [
                    "str",
                    "Type[Exception]",
                    "bool"
                ],
                "use_tensor_extension": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_incompatible_period": {
            "name": "test_incompatible_period",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "seq_len": [],
                "period": []
            }
        },
        "TestSequenceForecastBatchGenerator.test_n_batches": {
            "name": "test_n_batches",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "int",
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "seq_length": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "fc_max": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "batch_size": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "n_batches_expected": [
                    "int",
                    "pandas.DataFrame",
                    "Optional[int]",
                    "str"
                ],
                "use_tensor_extension": [
                    "int",
                    "str",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_n_batches_with_offset": {
            "name": "test_n_batches_with_offset",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "int",
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "seq_length": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "fc_max": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "batch_size": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "n_batches_expected": [
                    "int",
                    "pandas.DataFrame",
                    "Optional[int]",
                    "str"
                ],
                "use_tensor_extension": [
                    "int",
                    "str",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_batch_size": {
            "name": "test_batch_size",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "int",
                    "bool",
                    "float"
                ],
                "seq_length": [
                    "int",
                    "numpy.ndarray"
                ],
                "fc_max": [
                    "int",
                    "numpy.ndarray"
                ],
                "batch_size": [
                    "int",
                    "numpy.ndarray"
                ],
                "expected_last_batch_size": [
                    "int",
                    "Type[Exception]",
                    "list"
                ],
                "use_tensor_extension": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_single_batch": {
            "name": "test_single_batch",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "use_tensor_extension": [
                    "int"
                ]
            }
        },
        "TestSequenceForecastBatchGenerator.test_single_batch_with_last_step": {
            "name": "test_single_batch_with_last_step",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "use_tensor_extension": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "timeserio-master/tests/test_batches/test_single/__init__.py": {},
    "timeserio-master/tests/test_data/test_datasets.py": {
        "test_load_iris_df": {
            "name": "test_load_iris_df",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "timeserio-master/tests/test_data/test_mock.py": {
        "test_single_user_fit_df_sets_id": {
            "name": "test_single_user_fit_df_sets_id",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "embed_dim": [],
                "seq_len": []
            }
        }
    },
    "timeserio-master/tests/test_data/__init__.py": {},
    "timeserio-master/tests/test_keras/conftest.py": {
        "multimodel": {
            "name": "multimodel",
            "location": 9,
            "return": [
                "str",
                "float",
                "bytearray",
                "bool"
            ],
            "arguments": {}
        },
        "multimodel_num_layers": {
            "name": "multimodel_num_layers",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "timeserio-master/tests/test_keras/test_batches.py": {
        "x_y_data": {
            "name": "x_y_data",
            "location": 8,
            "return": [
                "float",
                "T",
                "bool",
                "int"
            ],
            "arguments": {
                "n_points": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "TestArrayBatchGenerator.test_nb_batches": {
            "name": "test_nb_batches",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "str"
                ],
                "batch_size": [
                    "numpy.ndarray",
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "expected_nb_batches": [
                    "Type[Exception]",
                    "Optional[int]",
                    "List[List[int]]",
                    "int",
                    "float"
                ]
            }
        },
        "TestArrayBatchGenerator.test_batch_size": {
            "name": "test_batch_size",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_points": [
                    "str"
                ],
                "batch_size": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "expected_last_batch_size": [
                    "bytes",
                    "List[int]",
                    "Callable"
                ]
            }
        }
    },
    "timeserio-master/tests/test_keras/test_callbacks.py": {
        "TestFormatting.test_get_log_metrics": {
            "name": "test_get_log_metrics",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormatting.test_format_epoch_metric": {
            "name": "test_format_epoch_metric",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormatting.test_format_epoch_summary": {
            "name": "test_format_epoch_summary",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeLogger.test_epoch_stats": {
            "name": "test_epoch_stats",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "TestTimeLogger.test_train_": {
            "name": "test_train_",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "timeserio-master/tests/test_keras/test_multinetwork.py": {
        "test_reproducibility": {
            "name": "test_reproducibility",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MinimalSubClass._model": {
            "name": "_model",
            "location": 28,
            "return": [
                "numpy.ndarray",
                "int",
                "Optional[str]",
                "src.autoks.callbacks.CallbackList"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMultiNetwork._model": {
            "name": "_model",
            "location": 35,
            "return": [
                "models.PermissionLookup",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "forecaster_features": [
                    "app.models.Question",
                    "int",
                    "Exception",
                    "dict",
                    "str"
                ],
                "forecaster_hidden_units": [
                    "float",
                    "str",
                    "list"
                ],
                "lr": [
                    "tensorflow.train.Checkpoint",
                    "tensorflow.Variable",
                    "Callable",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "SimpleMultiNetwork._callbacks": {
            "name": "_callbacks",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchNormNetwork._model": {
            "name": "_model",
            "location": 78,
            "return": [
                "models.PermissionLookup",
                "list",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbedderForecasterNetwork._model": {
            "name": "_model",
            "location": 101,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbedderForecasterNetwork._callbacks": {
            "name": "_callbacks",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseClass.test_base_class_abstract": {
            "name": "test_base_class_abstract",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseClass.test_sub_class_illegal_param": {
            "name": "test_sub_class_illegal_param",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseClass.test_sub_class_not_implemented_model": {
            "name": "test_sub_class_not_implemented_model",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseClass.test_sub_class_get_set_params": {
            "name": "test_sub_class_get_set_params",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubClass.testclass": {
            "name": "testclass",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubClass.multinetwork": {
            "name": "multinetwork",
            "location": 229,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "random": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestSubClass.test_default_params": {
            "name": "test_default_params",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "str"
                ]
            }
        },
        "TestSubClass.test_history_is_appended": {
            "name": "test_history_is_appended",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TestSubClass.test_history_is_reset": {
            "name": "test_history_is_reset",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "TestSubClass.test_model_names": {
            "name": "test_model_names",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "int",
                    "django.db.models.QuerySet"
                ]
            }
        },
        "TestSubClass.test_model_subnets": {
            "name": "test_model_subnets",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "Callable"
                ]
            }
        },
        "TestSubClass.test_predict_defaut": {
            "name": "test_predict_defaut",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "List[numpy.ndarray]",
                    "numpy.ndarray",
                    "Mapping[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "TestSubClass.test_predict_set_params": {
            "name": "test_predict_set_params",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "numpy.ndarray",
                    "bool",
                    "str"
                ]
            }
        },
        "TestSubClass.test_fit_default": {
            "name": "test_fit_default",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "List[numpy.ndarray]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "TestSubClass.test_fit_generator": {
            "name": "test_fit_generator",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "batch_size": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "TestSubClass.test_validation_data": {
            "name": "test_validation_data",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestSubClass.test_score": {
            "name": "test_score",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "int",
                    "List[Dict[str, Any]]",
                    "numpy.ndarray"
                ]
            }
        },
        "TestSubClass.test_evaluate": {
            "name": "test_evaluate",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestSubClass.test_evaluate_generator": {
            "name": "test_evaluate_generator",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle",
                    "str",
                    "List[numpy.ndarray]"
                ],
                "batch_size": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "TestSubClass.test_trainable_models_sets_internal_state": {
            "name": "test_trainable_models_sets_internal_state",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "keanu.Model",
                    "TestModule.Model",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "bool"
                ],
                "models": [
                    "keanu.Model",
                    "TestModule.Model",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "bool"
                ]
            }
        },
        "TestSubClass.test__freeze_sets_trainable_none": {
            "name": "test__freeze_sets_trainable_none",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "keanu.Model",
                    "core.models.Grouping",
                    "bool",
                    "models.cf_recommend_models.ICfRecommendationModel"
                ],
                "model": [
                    "keanu.Model",
                    "core.models.Grouping",
                    "List[src.main.core.models.display.Display]"
                ]
            }
        },
        "TestSubClass.test__freeze_sets_trainable_all": {
            "name": "test__freeze_sets_trainable_all",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "TestModule.Model",
                    "int",
                    "models.cf_recommend_models.ICfRecommendationModel"
                ]
            }
        },
        "TestSubClass.test__freeze_sets_trainable_except": {
            "name": "test__freeze_sets_trainable_except",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "Callable"
                ]
            }
        },
        "TestSubClass.test_freeze": {
            "name": "test_freeze",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "Iterable"
                ],
                "mocker": []
            }
        },
        "TestSubClass.test_freeze_with_arg": {
            "name": "test_freeze_with_arg",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "Iterable"
                ],
                "mocker": []
            }
        },
        "TestSubClass.test_unfreeze": {
            "name": "test_unfreeze",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "Iterable"
                ],
                "mocker": []
            }
        },
        "TestSubClass.test_training_context": {
            "name": "test_training_context",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [],
                "mocker": []
            }
        },
        "TestSubClass.test_training_context_with_trainable_models": {
            "name": "test_training_context_with_trainable_models",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [],
                "mocker": []
            }
        },
        "TestSubClass.test_training_context_preserves_loss_and_metrics": {
            "name": "test_training_context_preserves_loss_and_metrics",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "keanu.Model",
                    "bool",
                    "core.models.Grouping",
                    "List[src.main.core.models.display.Display]"
                ]
            }
        },
        "TestSubClass.test_fit_frozen": {
            "name": "test_fit_frozen",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "TestModule.Model",
                    "tartare.core.models.Process",
                    "str",
                    "models.Category"
                ]
            }
        },
        "TestSubClass.test_fit_frozen_via_kwarg": {
            "name": "test_fit_frozen_via_kwarg",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [
                    "TestModule.Model",
                    "str"
                ]
            }
        },
        "TestMultiNetworkSerialization.multinetwork": {
            "name": "multinetwork",
            "location": 497,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "random": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestMultiNetworkSerialization.bn_multinetwork": {
            "name": "bn_multinetwork",
            "location": 501,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "random": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestMultiNetworkSerialization.ef_multinetwork": {
            "name": "ef_multinetwork",
            "location": 505,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "random": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestMultiNetworkSerialization.assert_models_same": {
            "name": "assert_models_same",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Optional[Any]",
                    "dict",
                    "models.Payment"
                ],
                "model2": [
                    "dict"
                ]
            }
        },
        "TestMultiNetworkSerialization.assert_model_dicts_same": {
            "name": "assert_model_dicts_same",
            "location": 519,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_dict": [
                    "dict",
                    "Iterable[Tuple[Hashable, Any]]"
                ],
                "model_dict_2": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Optional[Dict[object, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "TestMultiNetworkSerialization.test_deserialized_params": {
            "name": "test_deserialized_params",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ef_multinetwork": [
                    "lms.lmsdb.models.Comment"
                ]
            }
        },
        "TestMultiNetworkSerialization.test_deserialized_batch_norm": {
            "name": "test_deserialized_batch_norm",
            "location": 534,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bn_multinetwork": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMultiNetworkSerialization.test_layer_sharing": {
            "name": "test_layer_sharing",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ef_multinetwork": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMultiNetworkSerialization.test_history_preserved": {
            "name": "test_history_preserved",
            "location": 551,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": []
            }
        },
        "TestMultiNetworkSerialization.test_optimizer_state": {
            "name": "test_optimizer_state",
            "location": 558,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": []
            }
        },
        "TestMultiNetworkSerialization.test_serialize_no_keras": {
            "name": "test_serialize_no_keras",
            "location": 572,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multinetwork": [],
                "mocker": []
            }
        }
    },
    "timeserio-master/tests/test_keras/test_utils.py": {
        "model_single_layer": {
            "name": "model_single_layer",
            "location": 9,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "allennlp.models.model.Model"
            ],
            "arguments": {}
        },
        "model_sequential": {
            "name": "model_sequential",
            "location": 14,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "allennlp.models.model.Model"
            ],
            "arguments": {}
        },
        "model_compiled": {
            "name": "model_compiled",
            "location": 21,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "model_with_shared_layer": {
            "name": "model_with_shared_layer",
            "location": 29,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "allennlp.models.model.Model"
            ],
            "arguments": {}
        },
        "model_with_submodel": {
            "name": "model_with_submodel",
            "location": 38,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "allennlp.models.model.Model"
            ],
            "arguments": {}
        },
        "model_with_shared_in_submodel": {
            "name": "model_with_shared_in_submodel",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestIterLayers.test_model": {
            "name": "test_model",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ],
                "n_layers": [
                    "float"
                ]
            }
        },
        "TestIterLayers.test_multimodel": {
            "name": "test_multimodel",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multimodel": [
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "multimodel_num_layers": [
                    "cmk.utils.type_defs.EventRule",
                    "BaseException",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "timeserio-master/tests/test_keras/__init__.py": {},
    "timeserio-master/tests/test_model_selection/test_time_series_split.py": {
        "input_df": {
            "name": "input_df",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "teams": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "index_offset": [
                    "int",
                    "numpy.array",
                    "List[int]"
                ],
                "num_days": [
                    "pandas.DataFrame",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "test_pandas_time_series_split": {
            "name": "test_pandas_time_series_split",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        },
        "test_raises_nonunique": {
            "name": "test_raises_nonunique",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_raises_non_ascending": {
            "name": "test_raises_non_ascending",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_different_series_lengths": {
            "name": "test_different_series_lengths",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "timeserio-master/tests/test_model_selection/__init__.py": {},
    "timeserio-master/tests/test_multimodel/test_base.py": {
        "multinetwork": {
            "name": "multinetwork",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "random": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "multipipeline": {
            "name": "multipipeline",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "manifold": {
            "name": "manifold",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "multimodel": {
            "name": "multimodel",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "multinetwork": [
                    "str",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "float"
                ],
                "multipipeline": [
                    "str",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "float"
                ],
                "manifold": [
                    "str",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "multimodel_validation": {
            "name": "multimodel_validation",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "multinetwork": [
                    "str",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "df": {
            "name": "df",
            "location": 113,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "validation_df": {
            "name": "validation_df",
            "location": 118,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "test_fit": {
            "name": "test_fit",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [
                    "keanu.Model"
                ],
                "df": [
                    "keanu.Model"
                ]
            }
        },
        "test_fit_generator": {
            "name": "test_fit_generator",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [
                    "int",
                    "raiden.utils.ProportionalFeeAmount"
                ],
                "df": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[int]"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "test_fit_with_validation_data": {
            "name": "test_fit_with_validation_data",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [
                    "keanu.Model",
                    "int"
                ],
                "df": [
                    "keanu.Model",
                    "int"
                ],
                "validation_df": [
                    "keanu.Model",
                    "int"
                ]
            }
        },
        "test_fit_with_validation_data_none": {
            "name": "test_fit_with_validation_data_none",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [
                    "keanu.Model",
                    "TestModule.Model",
                    "int"
                ],
                "df": [
                    "keanu.Model",
                    "TestModule.Model",
                    "int"
                ]
            }
        },
        "test_fit_generator_with_validation_data": {
            "name": "test_fit_generator_with_validation_data",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [
                    "core.models.Grouping"
                ],
                "df": [
                    "int"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "str"
                ],
                "num_epochs": [
                    "core.models.Grouping",
                    "int"
                ]
            }
        },
        "test_fit_generator_with_validation_gen": {
            "name": "test_fit_generator_with_validation_gen",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [
                    "int",
                    "float",
                    "bool"
                ],
                "df": [
                    "int",
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]"
                ],
                "batch_size": [
                    "int",
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]"
                ],
                "num_epochs": [
                    "int",
                    "float"
                ]
            }
        },
        "test_evaluate": {
            "name": "test_evaluate",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [
                    "str",
                    "keanu.Model"
                ],
                "df": [
                    "int",
                    "str",
                    "core.models.Grouping"
                ]
            }
        },
        "test_evaluate_generator": {
            "name": "test_evaluate_generator",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [
                    "int",
                    "List[str]",
                    "TestModule.Model"
                ],
                "df": [
                    "int",
                    "float",
                    "Optional[Tuple[int, ...]]"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "Optional[Tuple[int, ...]]"
                ]
            }
        },
        "test_fit_frozen": {
            "name": "test_fit_frozen",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [],
                "df": [
                    "keanu.Model"
                ]
            }
        },
        "test_fit_un_frozen": {
            "name": "test_fit_un_frozen",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": [],
                "df": [
                    "keanu.Model"
                ]
            }
        },
        "test_multimodel_pipeline_validation": {
            "name": "test_multimodel_pipeline_validation",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel_validation": [
                    "str"
                ]
            }
        },
        "test_multimodel_pickle_pipeline": {
            "name": "test_multimodel_pickle_pipeline",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel_validation": [
                    "Callable"
                ]
            }
        },
        "SimpleMultiNetwork._model": {
            "name": "_model",
            "location": 26,
            "return": [
                "models.PermissionLookup",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "forecaster_features": [
                    "app.models.Question",
                    "int",
                    "Exception",
                    "dict",
                    "str"
                ],
                "forecaster_hidden_units": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "SimpleMultiNetwork._callbacks": {
            "name": "_callbacks",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "timeserio-master/tests/test_multimodel/__init__.py": {},
    "timeserio-master/tests/test_pipeline/test_column_checks.py": {
        "test_pipeline_required": {
            "name": "test_pipeline_required",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "str"
                ],
                "required_columns": [
                    "str"
                ]
            }
        },
        "test_pipeline_transformed": {
            "name": "test_pipeline_transformed",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "str",
                    "Union[str, float]",
                    "int"
                ],
                "input_columns": [
                    "str",
                    "Union[str, float]",
                    "int"
                ],
                "transformed_columns": [
                    "str",
                    "Union[str, float]",
                    "int"
                ]
            }
        },
        "test_feature_union_required_columns": {
            "name": "test_feature_union_required_columns",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [],
                "required_columns": []
            }
        },
        "test_feature_union_transformed_columns": {
            "name": "test_feature_union_transformed_columns",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "transformed_columns": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "input_columns": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "test_pandas_numpy_mixed_pipeline": {
            "name": "test_pandas_numpy_mixed_pipeline",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "pipeline": [
                    "str",
                    "int",
                    "Union[str, float]"
                ],
                "input_columns": [
                    "str",
                    "int",
                    "Union[str, float]"
                ],
                "expected": [
                    "str",
                    "int",
                    "Union[str, float]"
                ]
            }
        },
        "test_pipeline_no_attributes_required_or_transformed": {
            "name": "test_pipeline_no_attributes_required_or_transformed",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "pipeline": [
                    "list",
                    "int",
                    "Dict[str, Any]"
                ],
                "required_columns": [
                    "list",
                    "int",
                    "Dict[str, Any]"
                ],
                "transformed_columns": [
                    "str",
                    "dict",
                    "bool",
                    "List[int]",
                    "Tuple[Tuple[int, int]]"
                ]
            }
        },
        "test_invalid_pipeline": {
            "name": "test_invalid_pipeline",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_grouped_pipeline_required": {
            "name": "test_grouped_pipeline_required",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "str"
                ],
                "required_columns": [
                    "str"
                ]
            }
        },
        "test_grouped_pipeline_transformed": {
            "name": "test_grouped_pipeline_transformed",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "str",
                    "Union[str, float]",
                    "int"
                ],
                "input_columns": [
                    "str",
                    "Union[str, float]",
                    "int"
                ],
                "transformed_columns": [
                    "str",
                    "Union[str, float]",
                    "int"
                ]
            }
        }
    },
    "timeserio-master/tests/test_pipeline/test_grouped_pipeline.py": {
        "input_df": {
            "name": "input_df",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_grouped_returns_numpy": {
            "name": "test_grouped_returns_numpy",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "pipeline": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "int"
                ],
                "groupby": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "int"
                ],
                "is_estimator": [
                    "List[str]",
                    "bool",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "input_df": [
                    "int",
                    "bool",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "test_grouped_returns_pandas": {
            "name": "test_grouped_returns_pandas",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "pipeline": [
                    "Iterable[Tuple[int, int]]"
                ],
                "groupby": [
                    "Iterable[Tuple[int, int]]"
                ],
                "input_df": [
                    "int",
                    "str"
                ]
            }
        },
        "test_grouped_with_y": {
            "name": "test_grouped_with_y",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "pipeline": [
                    "Union[int, slice]"
                ],
                "groupby": [
                    "Union[int, slice]"
                ],
                "y": [
                    "float",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "input_df": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "y_mode": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_grouped_order": {
            "name": "test_grouped_order",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "pipeline": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "int",
                    "bool",
                    "raiden.utils.TokenAmount"
                ],
                "groupby": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "int",
                    "bool",
                    "raiden.utils.TokenAmount"
                ],
                "is_estimator": [
                    "List[str]",
                    "bool",
                    "List[Tuple[str, Any]]",
                    "int"
                ],
                "input_df": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "float",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]",
                    "Callable"
                ]
            }
        },
        "test_grouped_values": {
            "name": "test_grouped_values",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "List[List[int]]"
                ],
                "pipeline": [
                    "Iterable[Tuple[int, int]]",
                    "int",
                    "str",
                    "raiden.utils.TokenAmount"
                ],
                "groupby": [
                    "bool"
                ],
                "is_estimator": [
                    "bool",
                    "List[List[int]]"
                ],
                "input_df": [
                    "int",
                    "bool",
                    "Optional[Set[str]]"
                ]
            }
        },
        "test_raises_when_missing_key": {
            "name": "test_raises_when_missing_key",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "input_df": [
                    "str"
                ]
            }
        },
        "test_one_group_missing_return_none": {
            "name": "test_one_group_missing_return_none",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "input_df": []
            }
        },
        "test_one_groups_missing_return_df": {
            "name": "test_one_groups_missing_return_df",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "input_df": [
                    "str",
                    "Callable",
                    "int",
                    "Type"
                ]
            }
        },
        "test_all_groups_missing_raises": {
            "name": "test_all_groups_missing_raises",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "input_df": [
                    "Dict[str, float]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_iter_groups_non_consecutive_index": {
            "name": "test_iter_groups_non_consecutive_index",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "index": [
                    "str",
                    "List[str]",
                    "float",
                    "numpy.ndarray",
                    "list",
                    "int"
                ]
            }
        },
        "test_iter_groups_non_consecutive_index_target_series": {
            "name": "test_iter_groups_non_consecutive_index_target_series",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "index": [
                    "numpy.ndarray",
                    "list",
                    "Callable",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "timeserio-master/tests/test_pipeline/test_multipipeline.py": {
        "multipipeline": {
            "name": "multipipeline",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "multipipeline_validation": {
            "name": "multipipeline_validation",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_get_param_names": {
            "name": "test_get_param_names",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "multipipeline": []
            }
        },
        "test_get_params": {
            "name": "test_get_params",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "multipipeline": [
                    "str"
                ]
            }
        },
        "test_set_params": {
            "name": "test_set_params",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "multipipeline": [
                    "str"
                ]
            }
        },
        "test_get_attr": {
            "name": "test_get_attr",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "multipipeline": [
                    "str"
                ]
            }
        },
        "test_get_item": {
            "name": "test_get_item",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "multipipeline": [
                    "str",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "test_pipeline_validation": {
            "name": "test_pipeline_validation",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "multipipeline_validation": []
            }
        }
    },
    "timeserio-master/tests/test_pipeline/test_utils.py": {
        "df": {
            "name": "df",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_fit_decorator": {
            "name": "test_fit_decorator",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str",
                    "float"
                ]
            }
        },
        "test_fit_decorator.fit": {
            "name": "fit",
            "location": 19,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "df": [
                    "str"
                ],
                "y": [
                    "str"
                ]
            }
        }
    },
    "timeserio-master/tests/test_pipeline/__init__.py": {},
    "timeserio-master/tests/test_preprocessing/test_aggregate.py": {
        "test_flatten_columns": {
            "name": "test_flatten_columns",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "column_tuples": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "names": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "expected": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "test_flatten_column_ignores_flat": {
            "name": "test_flatten_column_ignores_flat",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cartesian_product": {
            "name": "test_cartesian_product",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "df_1_dict": [
                    "Optional[str]"
                ],
                "df_2_dict": [
                    "Optional[str]"
                ],
                "expected_dict": [
                    "int",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "test_aggregate_values": {
            "name": "test_aggregate_values",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "bool",
                    "bytes",
                    "bytearray",
                    "int",
                    "numpy.ndarray"
                ],
                "agg_dict": [
                    "int",
                    "bytes"
                ],
                "groupby": [
                    "int",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "int",
                    "float",
                    "List[str]",
                    "List[int]",
                    "Dict[str, int]"
                ]
            }
        },
        "test_aggregate_col_names": {
            "name": "test_aggregate_col_names",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str",
                    "Union[str, float]",
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "agg_dict": [
                    "str",
                    "Union[str, float]",
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "groupby": [],
                "expected": [
                    "List[float]",
                    "float",
                    "List[int]"
                ]
            }
        },
        "test_required_columns": {
            "name": "test_required_columns",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "agg_dict": [
                    "str"
                ],
                "groupby": [
                    "str"
                ],
                "required_columns": [
                    "str"
                ]
            }
        }
    },
    "timeserio-master/tests/test_preprocessing/test_datetime_features.py": {
        "df": {
            "name": "df",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "featurizer": {
            "name": "featurizer",
            "location": 31,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {}
        },
        "test_get_fractional_hour_from_series": {
            "name": "test_get_fractional_hour_from_series",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_fractional_day_from_series": {
            "name": "test_get_fractional_day_from_series",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_fractional_year_from_series": {
            "name": "test_get_fractional_year_from_series",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_is_holiday_from_series": {
            "name": "test_get_is_holiday_from_series",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_is_holiday_from_series_with_country": {
            "name": "test_get_is_holiday_from_series_with_country",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "country": [
                    "str",
                    "Sequence[int]",
                    "Optional[str]"
                ],
                "expected": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "test_get_zero_indexed_month_from_series": {
            "name": "test_get_zero_indexed_month_from_series",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_truncate_series": {
            "name": "test_truncate_series",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "series_data": [
                    "dict",
                    "int",
                    "str",
                    "List[Tuple[Any, Dict]]"
                ],
                "truncation_period": [
                    "dict",
                    "int",
                    "str",
                    "List[Tuple[Any, Dict]]"
                ],
                "expected_data": [
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_set_get_params": {
            "name": "test_set_get_params",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "featurizer": [
                    "dict"
                ]
            }
        },
        "test_with_unknown_attribute": {
            "name": "test_with_unknown_attribute",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str",
                    "float"
                ],
                "featurizer": [
                    "str",
                    "float"
                ]
            }
        },
        "test_with_unknown_column": {
            "name": "test_with_unknown_column",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "df": [],
                "featurizer": [
                    "pandas.DataFrame",
                    "datetime.date.time"
                ]
            }
        },
        "test_with_non_dt_column": {
            "name": "test_with_non_dt_column",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "df": [],
                "featurizer": [
                    "pandas.DataFrame",
                    "str",
                    "Sequence[numpy.ndarray]"
                ]
            }
        },
        "test_featurizer": {
            "name": "test_featurizer",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "featurizer": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_featurizer_callable": {
            "name": "test_featurizer_callable",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame"
                ],
                "featurizer": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_seq_datetime": {
            "name": "test_seq_datetime",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "Iterable[str]"
                ],
                "featurizer": [
                    "pandas.DataFrame",
                    "datetime.date.time"
                ]
            }
        },
        "test_get_time_is_in_interval_from_series": {
            "name": "test_get_time_is_in_interval_from_series",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "periods": [
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "test_featurize_is_in_interval": {
            "name": "test_featurize_is_in_interval",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "featurizer": [
                    "pandas.DataFrame",
                    "int",
                    "bool"
                ],
                "periods": []
            }
        },
        "test_get_is_morning_peak_from_series": {
            "name": "test_get_is_morning_peak_from_series",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "featurizer": [
                    "datetime.date.time"
                ],
                "periods": []
            }
        },
        "test_required_columns": {
            "name": "test_required_columns",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "int",
                    "str"
                ],
                "required_columns": [
                    "int",
                    "str"
                ]
            }
        },
        "test_transformed_columns_from_required": {
            "name": "test_transformed_columns_from_required",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "pandas.DataFrame",
                    "Dict[str, Sequence[Any]]"
                ],
                "transformed_columns": [
                    "pandas.DataFrame"
                ]
            }
        },
        "test_transformed_columns": {
            "name": "test_transformed_columns",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "transformed_columns": [
                    "int",
                    "float"
                ],
                "input_columns": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_invalid_columns": {
            "name": "test_invalid_columns",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "timeserio-master/tests/test_preprocessing/test_datetime_lag.py": {
        "df": {
            "name": "df",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_fit_single_lag": {
            "name": "test_fit_single_lag",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "int"
                ]
            }
        },
        "test_dont_refit": {
            "name": "test_dont_refit",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "df": []
            }
        },
        "test_fit_multiple_lags": {
            "name": "test_fit_multiple_lags",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "test_transform_from_datetime": {
            "name": "test_transform_from_datetime",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "Sequence[numpy.ndarray]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "test_columns": {
            "name": "test_columns",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "df": []
            }
        },
        "test_transform_with_duplicates": {
            "name": "test_transform_with_duplicates",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "df": []
            }
        },
        "test_fit_with_duplicates_raises": {
            "name": "test_fit_with_duplicates_raises",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "bool"
                ]
            }
        },
        "test_fit_with_duplicates_with_agg": {
            "name": "test_fit_with_duplicates_with_agg",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "bool"
                ]
            }
        },
        "test_fit_rolling_mean_single_window": {
            "name": "test_fit_rolling_mean_single_window",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/tests/test_preprocessing/test_encoding.py": {
        "TestFeatureIndexEncoder.test_feature_encoder": {
            "name": "test_feature_encoder",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_labels": [
                    "int",
                    "List[int]",
                    "list",
                    "List[List[Any]]",
                    "List[List[int]]"
                ],
                "expected_encoding": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Iterable[int]"
                ]
            }
        },
        "TestStatelessOneHotEncoder.test_invalid_n_values": {
            "name": "test_invalid_n_values",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatelessOneHotEncoder.test_same_as_stateful": {
            "name": "test_same_as_stateful",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_features": [
                    "int",
                    "bool"
                ],
                "n_values": [
                    "int",
                    "bool"
                ],
                "categories": [
                    "int",
                    "List[int]",
                    "bytes",
                    "numpy.ndarray",
                    "str"
                ],
                "random": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestStatelessOneHotEncoder.test_same_as_stateful_for_multiple_n_values": {
            "name": "test_same_as_stateful_for_multiple_n_values",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_features": [
                    "bool",
                    "numpy.ndarray",
                    "Dict[int, Dict[int, Any]]"
                ],
                "n_values": [
                    "int",
                    "numpy.ndarray",
                    "IO[str]",
                    "bytearray"
                ],
                "categories": [
                    "bool",
                    "str",
                    "float"
                ],
                "random": [
                    "int",
                    "numpy.ndarray",
                    "IO[str]",
                    "bytearray",
                    "str"
                ]
            }
        },
        "TestStatelessTemporalOneHotEncoder.test_invalid_n_values": {
            "name": "test_invalid_n_values",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_values": [
                    "numpy.ndarray",
                    "Optional[int]",
                    "float",
                    "int",
                    "List[float]"
                ]
            }
        },
        "TestStatelessTemporalOneHotEncoder.test_temporal_onehot": {
            "name": "test_temporal_onehot",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeriodicEncoder.array": {
            "name": "array",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n_features": [
                    "int"
                ]
            }
        },
        "TestPeriodicEncoder.test_single_column_no_transform": {
            "name": "test_single_column_no_transform",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "periodic_features": []
            }
        },
        "TestPeriodicEncoder.test_single_column": {
            "name": "test_single_column",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "periodic_features": [
                    "Tuple[int, int]"
                ]
            }
        },
        "TestPeriodicEncoder.test_multi_column": {
            "name": "test_multi_column",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_features": [
                    "int",
                    "float",
                    "Optional[str]",
                    "List[list]"
                ],
                "periodic_features": [
                    "float",
                    "int"
                ]
            }
        },
        "TestStatelessPeriodicEncoder.test_same_as_stateful": {
            "name": "test_same_as_stateful",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_features": [
                    "int"
                ],
                "periodic_features": [
                    "int",
                    "Optional[int]"
                ],
                "period": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "timeserio-master/tests/test_preprocessing/test_pandas_array_utils.py": {
        "df": {
            "name": "df",
            "location": 18,
            "return": [
                "str",
                "Any",
                "Optional[Any]",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {}
        },
        "arr1d": {
            "name": "arr1d",
            "location": 22,
            "return": [
                "numpy.ndarray",
                "int",
                "BinaryIO",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "arr2d": {
            "name": "arr2d",
            "location": 26,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "test_create_df_from_array": {
            "name": "test_create_df_from_array",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "float",
                    "str"
                ],
                "n_dims": [
                    "Sequence[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_insert_into_flat_idx_df": {
            "name": "test_insert_into_flat_idx_df",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "Optional[Tuple[numpy.ndarray, numpy.ndarray]]"
                ],
                "arr": [
                    "int"
                ],
                "n_dims": [
                    "Sequence[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "Iterable[int]",
                    "tuple",
                    "list"
                ]
            }
        },
        "test_insert_into_multi_idx_df": {
            "name": "test_insert_into_multi_idx_df",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "bool",
                    "numpy.ndarray",
                    "float"
                ],
                "arr": [
                    "int"
                ],
                "n_dims": [
                    "Sequence[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "Iterable[int]",
                    "tuple",
                    "list"
                ]
            }
        }
    },
    "timeserio-master/tests/test_preprocessing/test_pandas_feature_selector.py": {
        "df": {
            "name": "df",
            "location": 18,
            "return": [
                "int",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "use_tensor_extension": [
                    "bool",
                    "int",
                    "Sequence[Sequence[int]]",
                    "float"
                ]
            }
        },
        "indexed_df": {
            "name": "indexed_df",
            "location": 23,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_column_selector": {
            "name": "test_column_selector",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str",
                    "List[str]",
                    "int",
                    "list",
                    "List[List[Any]]"
                ],
                "columns": [
                    "str",
                    "Tuple[int, int]",
                    "list",
                    "pandas.DataFrame",
                    "float"
                ],
                "num_columns": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "test_value_selector": {
            "name": "test_value_selector",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "List[List[int]]"
                ],
                "columns": [
                    "str",
                    "Union[Mapping[str, Any], str]",
                    "Callable[[], Any]"
                ],
                "shape1": [
                    "int",
                    "numpy.ndarray",
                    "dict",
                    "str"
                ]
            }
        },
        "test_value_selector_dtype": {
            "name": "test_value_selector_dtype",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str",
                    "dict"
                ],
                "dtype": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_index_value_selector": {
            "name": "test_index_value_selector",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "indexed_df": [],
                "levels": [],
                "shape1": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_index_value_selector_dtype": {
            "name": "test_index_value_selector_dtype",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "indexed_df": [
                    "bool"
                ],
                "dtype": [
                    "bool"
                ]
            }
        },
        "test_single_transformer_required_columns": {
            "name": "test_single_transformer_required_columns",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [],
                "required_columns": []
            }
        },
        "test_single_transformer_transformed_from_required_only": {
            "name": "test_single_transformer_transformed_from_required_only",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "pandas.DataFrame",
                    "Dict[str, Sequence[Any]]"
                ],
                "transformed_columns": [
                    "pandas.DataFrame"
                ]
            }
        },
        "test_single_transformer_transformed_columns": {
            "name": "test_single_transformer_transformed_columns",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "numpy.array"
                ],
                "input_columns": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "numpy.array"
                ],
                "transformed_columns": [
                    "int",
                    "float",
                    "Iterable[Any]"
                ]
            }
        },
        "test_missing_required_columns": {
            "name": "test_missing_required_columns",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "transformer": []
            }
        }
    },
    "timeserio-master/tests/test_preprocessing/test_utils.py": {
        "test_as_list_of_str": {
            "name": "test_as_list_of_str",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "columns_in": [
                    "bytes",
                    "int",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "T",
                    "Optional[Union[str, Any]]"
                ],
                "columns_out": [
                    "bytes",
                    "int",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "T",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "test_identity_regressor_fit": {
            "name": "test_identity_regressor_fit",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_identity_regressor_predict": {
            "name": "test_identity_regressor_predict",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "timeserio-master/tests/test_preprocessing/__init__.py": {},
    "timeserio-master/tests/test_utils/conftest.py": {
        "test_bucket_name": {
            "name": "test_bucket_name",
            "location": 8,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "s3": {
            "name": "s3",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "test_bucket_name": [
                    "str"
                ]
            }
        }
    },
    "timeserio-master/tests/test_utils/test_functools.py": {
        "func1": {
            "name": "func1",
            "location": 6,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "func2": {
            "name": "func2",
            "location": 10,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "func3": {
            "name": "func3",
            "location": 14,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "func4": {
            "name": "func4",
            "location": 18,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_get_default_args": {
            "name": "test_get_default_args",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "str",
                    "List[str]",
                    "bool",
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "float"
                ],
                "args": []
            }
        }
    },
    "timeserio-master/tests/test_utils/test_pickle.py": {
        "assert_is": {
            "name": "assert_is",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "assert_eq": {
            "name": "assert_eq",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "assert_lambda_eq": {
            "name": "assert_lambda_eq",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "Sequence[T]",
                    "float"
                ],
                "b": [
                    "int",
                    "Sequence[T]",
                    "float"
                ]
            }
        },
        "TestPickling.test_pickle_to_string": {
            "name": "test_pickle_to_string",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "assert_object_same": []
            }
        },
        "TestPickling.test_pickle_to_file": {
            "name": "test_pickle_to_file",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Tuple[int, int]",
                    "str"
                ],
                "assert_object_same": [
                    "set"
                ]
            }
        },
        "TestPickling.test_pickle_to_s3": {
            "name": "test_pickle_to_s3",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s3": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "test_bucket_name": [
                    "str",
                    "Optional[str]"
                ],
                "obj": [
                    "str"
                ],
                "assert_object_same": [
                    "Optional[int]",
                    "List[str]",
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/tests/test_utils/__init__.py": {},
    "timeserio-master/tests/test_validation/test_pipeline_validation.py": {
        "multinetwork": {
            "name": "multinetwork",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "multimodel": {
            "name": "multimodel",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "multinetwork": [
                    "str",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "invalid_multimodel": {
            "name": "invalid_multimodel",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "multinetwork": [
                    "str",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "test_valid_multimodel": {
            "name": "test_valid_multimodel",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "multimodel": []
            }
        },
        "test_invalid_multimodel": {
            "name": "test_invalid_multimodel",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_multimodel": [
                    "str",
                    "float"
                ]
            }
        },
        "SimpleMultiNetwork._model": {
            "name": "_model",
            "location": 17,
            "return": [
                "models.PermissionLookup",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "forecaster_features": [
                    "app.models.Question",
                    "int",
                    "Exception",
                    "dict",
                    "str"
                ],
                "forecaster_hidden_units": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "SimpleMultiNetwork._callbacks": {
            "name": "_callbacks",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "timeserio-master/tests/test_validation/__init__.py": {},
    "timeserio-master/timeserio/externals.py": {
        "optional_import": {
            "name": "optional_import",
            "location": 44,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "module_name": [
                    "Tuple[int, int]",
                    "OSError",
                    "T",
                    "IO",
                    "Optional[str]"
                ]
            }
        },
        "NotFoundModule.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "NotFoundModule.__getattr__": {
            "name": "__getattr__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "NotFoundModule.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotFoundModule.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "timeserio-master/timeserio/ini.py": {},
    "timeserio-master/timeserio/version.py": {
        "get_home_dir": {
            "name": "get_home_dir",
            "location": 10,
            "return": [],
            "arguments": {
                "home_dir": []
            }
        },
        "get_git_dir": {
            "name": "get_git_dir",
            "location": 16,
            "return": [],
            "arguments": {
                "home_dir": []
            }
        },
        "get_release_version_file": {
            "name": "get_release_version_file",
            "location": 21,
            "return": [],
            "arguments": {
                "home_dir": []
            }
        },
        "call_git_describe": {
            "name": "call_git_describe",
            "location": 26,
            "return": [],
            "arguments": {
                "abbrev": [],
                "home_dir": []
            }
        },
        "read_release_version": {
            "name": "read_release_version",
            "location": 51,
            "return": [],
            "arguments": {
                "home_dir": []
            }
        },
        "write_release_version": {
            "name": "write_release_version",
            "location": 61,
            "return": [],
            "arguments": {
                "version": [],
                "home_dir": []
            }
        },
        "get_git_version": {
            "name": "get_git_version",
            "location": 67,
            "return": [],
            "arguments": {
                "abbrev": [],
                "home_dir": []
            }
        }
    },
    "timeserio-master/timeserio/__init__.py": {},
    "timeserio-master/timeserio/batches/utils.py": {
        "ceiling_division": {
            "name": "ceiling_division",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dividend": [
                    "int",
                    "Callable",
                    "str"
                ],
                "divisor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/timeserio/batches/__init__.py": {},
    "timeserio-master/timeserio/batches/chunked/base.py": {
        "ChunkedBatchGenerator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "ChunkedBatchGenerator.chunks": {
            "name": "chunks",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedBatchGenerator.make_subgen": {
            "name": "make_subgen",
            "location": 30,
            "return": [
                "single.base.BatchGenerator"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChunkedBatchGenerator._subgen_length": {
            "name": "_subgen_length",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ChunkedBatchGenerator.subgen_lengths": {
            "name": "subgen_lengths",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedBatchGenerator.subgen_index_bounds": {
            "name": "subgen_index_bounds",
            "location": 54,
            "return": [
                "int",
                "str",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedBatchGenerator.num_subbatches": {
            "name": "num_subbatches",
            "location": 63,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedBatchGenerator.__len__": {
            "name": "__len__",
            "location": 66,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedBatchGenerator.find_subbatch_in_subgens": {
            "name": "find_subbatch_in_subgens",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "subbatch_idx": [
                    "int",
                    "Dict[str, int]",
                    "List[str]",
                    "float",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "ChunkedBatchGenerator.__getitem__": {
            "name": "__getitem__",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch_idx": [
                    "bytes",
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/timeserio/batches/chunked/dask.py": {
        "SequenceForecastBatchGenerator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.chunks": {
            "name": "chunks",
            "location": 52,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.make_subgen": {
            "name": "make_subgen",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/timeserio/batches/chunked/pandas.py": {
        "RowBatchGenerator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBatchGenerator.chunks": {
            "name": "chunks",
            "location": 29,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBatchGenerator.make_subgen": {
            "name": "make_subgen",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "List[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "SamplingForecastBatchGenerator.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingForecastBatchGenerator.chunks": {
            "name": "chunks",
            "location": 77,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingForecastBatchGenerator.make_subgen": {
            "name": "make_subgen",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "List[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "SequenceForecastBatchGenerator.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.chunks": {
            "name": "chunks",
            "location": 138,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.make_subgen": {
            "name": "make_subgen",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "List[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/timeserio/batches/chunked/parquet.py": {
        "RowBatchGenerator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBatchGenerator.chunks": {
            "name": "chunks",
            "location": 31,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBatchGenerator.make_subgen": {
            "name": "make_subgen",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "str",
                    "bytes",
                    "Union[str, List[str]]",
                    "bool"
                ]
            }
        },
        "SequenceForecastBatchGenerator.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.chunks": {
            "name": "chunks",
            "location": 87,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.make_subgen": {
            "name": "make_subgen",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "str",
                    "bytes",
                    "Union[str, List[str]]",
                    "bool"
                ]
            }
        }
    },
    "timeserio-master/timeserio/batches/chunked/__init__.py": {},
    "timeserio-master/timeserio/batches/single/base.py": {},
    "timeserio-master/timeserio/batches/single/row.py": {
        "RowBatchGenerator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBatchGenerator._eff_batch_size": {
            "name": "_eff_batch_size",
            "location": 22,
            "return": [
                "int",
                "str",
                "List[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBatchGenerator.__len__": {
            "name": "__len__",
            "location": 25,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowBatchGenerator.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch_idx": [
                    "bytes",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "IO[str]"
                ]
            }
        }
    },
    "timeserio-master/timeserio/batches/single/sequence.py": {
        "ForecastBatchGeneratorBase.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ForecastBatchGeneratorBase.num_points": {
            "name": "num_points",
            "location": 63,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForecastBatchGeneratorBase.__len__": {
            "name": "__len__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ForecastBatchGeneratorBase.batch_seq_start_indices": {
            "name": "batch_seq_start_indices",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_idx": [
                    "str",
                    "bool"
                ]
            }
        },
        "ForecastBatchGeneratorBase._get_sequence_values": {
            "name": "_get_sequence_values",
            "location": 75,
            "return": [
                "Type[T]",
                "str",
                "dict",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "start_indices": [
                    "float",
                    "int",
                    "T",
                    "str"
                ]
            }
        },
        "ForecastBatchGeneratorBase.__getitem__": {
            "name": "__getitem__",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch_idx": [
                    "int",
                    "Optional[List[Any]]",
                    "bytes"
                ]
            }
        },
        "SamplingForecastBatchGenerator.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingForecastBatchGenerator.num_examples": {
            "name": "num_examples",
            "location": 159,
            "return": [
                "int",
                "Callable[[T], List[T]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingForecastBatchGenerator._eff_batch_size": {
            "name": "_eff_batch_size",
            "location": 168,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingForecastBatchGenerator.__len__": {
            "name": "__len__",
            "location": 171,
            "return": [
                "str",
                "int",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingForecastBatchGenerator.batch_seq_start_indices": {
            "name": "batch_seq_start_indices",
            "location": 174,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "batch_idx": [
                    "str",
                    "bool"
                ]
            }
        },
        "SequenceForecastBatchGenerator.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.first_index": {
            "name": "first_index",
            "location": 235,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.num_examples": {
            "name": "num_examples",
            "location": 245,
            "return": [
                "int",
                "Callable[[T], List[T]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator._eff_batch_size": {
            "name": "_eff_batch_size",
            "location": 257,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.__len__": {
            "name": "__len__",
            "location": 260,
            "return": [
                "str",
                "int",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator.batch_seq_start_indices": {
            "name": "batch_seq_start_indices",
            "location": 263,
            "return": [
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "batch_idx": [
                    "int",
                    "float",
                    "rl_algorithms.utils.config.ConfigDict",
                    "str",
                    "bytes"
                ]
            }
        },
        "SequenceForecastBatchGenerator.random_offset_value": {
            "name": "random_offset_value",
            "location": 273,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceForecastBatchGenerator._get_sequence_values": {
            "name": "_get_sequence_values",
            "location": 285,
            "return": [
                "Type[T]",
                "str",
                "dict",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "int",
                    "str"
                ],
                "start_indices": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/timeserio/batches/single/__init__.py": {},
    "timeserio-master/timeserio/data/datasets.py": {
        "load_iris_df": {
            "name": "load_iris_df",
            "location": 5,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {}
        }
    },
    "timeserio-master/timeserio/data/mock.py": {
        "mock_datetime_range": {
            "name": "mock_datetime_range",
            "location": 17,
            "return": [
                "datetime.datetime",
                "int",
                "Union[str, int]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "periods": [
                    "datetime.datetime",
                    "Sequence[util.datetime.range.DateTimeRange]",
                    "Optional[str]",
                    "int"
                ],
                "start": [
                    "datetime.datetime",
                    "int",
                    "pandas.Series"
                ]
            }
        },
        "_single_user_fit_df": {
            "name": "_single_user_fit_df",
            "location": 24,
            "return": [
                "int",
                "str",
                "bool",
                "float",
                "datetime.date"
            ],
            "arguments": {
                "periods": [
                    "int",
                    "Optional[int]",
                    "tuple",
                    "str"
                ],
                "start_date": [
                    "datetime.datetime",
                    "int",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "str"
                ],
                "id": [
                    "Optional[List[str]]",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "Tuple[numpy.ndarray]",
                    "bool",
                    "Optional[bool]"
                ],
                "embedding_dim": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "seq_length": [
                    "float",
                    "Tuple[int, int]",
                    "Optional[datetime.datetime]",
                    "Optional[int]",
                    "datetime.date",
                    "int"
                ],
                "use_tensor_extension": [
                    "bool",
                    "str",
                    "float",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "mock_fit_data": {
            "name": "mock_fit_data",
            "location": 69,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "periods": [
                    "Optional[str]",
                    "datetime.datetime",
                    "datetime.date",
                    "str"
                ],
                "start_date": [
                    "Optional[str]",
                    "datetime.datetime",
                    "datetime.date",
                    "str"
                ],
                "ids": [
                    "Optional[str]",
                    "datetime.datetime",
                    "datetime.date",
                    "str"
                ],
                "embedding_dim": [
                    "Optional[str]",
                    "datetime.datetime",
                    "datetime.date",
                    "str"
                ],
                "seq_length": [
                    "Optional[str]",
                    "datetime.datetime",
                    "datetime.date",
                    "str"
                ],
                "use_tensor_extension": [
                    "Optional[str]",
                    "datetime.datetime",
                    "datetime.date",
                    "str"
                ],
                "index": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int",
                    "float"
                ]
            }
        },
        "mock_dask_fit_data": {
            "name": "mock_dask_fit_data",
            "location": 96,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "periods": [
                    "str"
                ],
                "start_date": [
                    "str"
                ],
                "ids": [
                    "str"
                ],
                "embedding_dim": [
                    "str"
                ],
                "seq_length": [
                    "str"
                ]
            }
        },
        "_single_user_raw_df": {
            "name": "_single_user_raw_df",
            "location": 118,
            "return": [
                "int",
                "str",
                "bool",
                "float",
                "datetime.date"
            ],
            "arguments": {
                "periods": [
                    "str",
                    "int"
                ],
                "start_date": [
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "mock_raw_data": {
            "name": "mock_raw_data",
            "location": 134,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "periods": [
                    "int",
                    "str",
                    "datetime.date",
                    "Optional[int]",
                    "Tuple[str, str]"
                ],
                "start_date": [
                    "int",
                    "str",
                    "datetime.date",
                    "Optional[int]",
                    "Tuple[str, str]"
                ],
                "ids": [
                    "int",
                    "str",
                    "datetime.date",
                    "Optional[int]",
                    "Tuple[str, str]"
                ]
            }
        },
        "mock_dask_raw_data": {
            "name": "mock_dask_raw_data",
            "location": 148,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "periods": [
                    "str"
                ],
                "start_date": [
                    "str"
                ],
                "ids": [
                    "str"
                ]
            }
        },
        "mock_predict_data": {
            "name": "mock_predict_data",
            "location": 162,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "periods": [
                    "str",
                    "datetime.datetime",
                    "Union[str, int, float]"
                ],
                "start_date": [
                    "str",
                    "datetime.datetime",
                    "Union[str, int, float]"
                ],
                "use_tensor_extension": [
                    "str",
                    "datetime.datetime",
                    "Union[str, int, float]"
                ]
            }
        }
    },
    "timeserio-master/timeserio/data/__init__.py": {},
    "timeserio-master/timeserio/keras/batches.py": {
        "ArrayBatchGenerator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "y": [
                    "int",
                    "float",
                    "bool",
                    "Dict[str, int]",
                    "Dict[int, str]",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "ArrayBatchGenerator.__len__": {
            "name": "__len__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayBatchGenerator.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [
                "float",
                "str",
                "bool",
                "callable"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "timeserio-master/timeserio/keras/callbacks.py": {
        "_now": {
            "name": "_now",
            "location": 11,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "_get_log_metrics": {
            "name": "_get_log_metrics",
            "location": 16,
            "return": [
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "history": [
                    "str",
                    "List[str]",
                    "Tuple[str, str, str, str, str, str, str]",
                    "Tuple[str]"
                ],
                "exclude": [
                    "str",
                    "List[str]",
                    "Tuple[str, str, str, str, str, str, str]",
                    "Tuple[str]"
                ]
            }
        },
        "_format_epoch_metric": {
            "name": "_format_epoch_metric",
            "location": 21,
            "return": [
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "history": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Optional[Dict]"
                ],
                "metric": [
                    "str",
                    "Optional[str]",
                    "Callable[[], int]",
                    "bool"
                ],
                "fmt": [
                    "str",
                    "int",
                    "Optional[List[int]]"
                ],
                "errors": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "Dict[str, Tuple[str, int, int]]",
                    "bool"
                ],
                "idx": [
                    "int",
                    "bool",
                    "str",
                    "Optional[List[int]]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "with_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_format_epoch_summary": {
            "name": "_format_epoch_summary",
            "location": 44,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "history": [
                    "bool",
                    "str"
                ],
                "fmt": [
                    "bytes",
                    "Optional[bytes]",
                    "int"
                ],
                "idx": [
                    "bytes",
                    "Optional[bytes]",
                    "int"
                ]
            }
        },
        "HistoryLogger.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batches": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "HistoryLogger.on_train_begin": {
            "name": "on_train_begin",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logs": [
                    "Optional[dict]",
                    "dict",
                    "int"
                ]
            }
        },
        "HistoryLogger.on_epoch_begin": {
            "name": "on_epoch_begin",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "int",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "List[float]"
                ],
                "logs": [
                    "int",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "HistoryLogger.on_train_batch_end": {
            "name": "on_train_batch_end",
            "location": 77,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "List[float]"
                ],
                "logs": [
                    "dict",
                    "logging.Logger",
                    "int",
                    "Union[int, str]",
                    "bytes"
                ]
            }
        },
        "HistoryLogger.on_epoch_end": {
            "name": "on_epoch_end",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "dict",
                    "Dict[str, str]"
                ],
                "logs": [
                    "int",
                    "str",
                    "dict",
                    "list"
                ]
            }
        },
        "HistoryLogger._log_training_metric_improvement": {
            "name": "_log_training_metric_improvement",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "Union[str, List[str], None]"
                ]
            }
        },
        "HistoryLogger._log_training_time": {
            "name": "_log_training_time",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "HistoryLogger.on_train_end": {
            "name": "on_train_end",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logs": [
                    "Optional[dict]",
                    "dict",
                    "int"
                ]
            }
        },
        "TimeLogger.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeLogger.on_train_begin": {
            "name": "on_train_begin",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logs": [
                    "Optional[dict]",
                    "dict",
                    "int"
                ]
            }
        },
        "TimeLogger.on_train_end": {
            "name": "on_train_end",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logs": [
                    "Optional[dict]",
                    "dict",
                    "int"
                ]
            }
        },
        "TimeLogger._get_stats": {
            "name": "_get_stats",
            "location": 155,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeLogger.on_epoch_begin": {
            "name": "on_epoch_begin",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "int",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "List[float]"
                ],
                "logs": [
                    "int",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "TimeLogger.on_epoch_end": {
            "name": "on_epoch_end",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "str",
                    "Optional[dict]",
                    "Union[int, str]",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "logs": [
                    "int",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "List[float]"
                ]
            }
        }
    },
    "timeserio-master/timeserio/keras/multinetwork.py": {
        "make_history_logger": {
            "name": "make_history_logger",
            "location": 12,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "MultiNetworkBase.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._model": {
            "name": "_model",
            "location": 62,
            "return": [
                "typing.Dict[builtins.str, \"keras.models.Model\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._callbacks": {
            "name": "_callbacks",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._funcs_with_legal_params": {
            "name": "_funcs_with_legal_params",
            "location": 73,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._funcs_with_default_params": {
            "name": "_funcs_with_default_params",
            "location": 88,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._default_params": {
            "name": "_default_params",
            "location": 92,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._filter_hyperparams": {
            "name": "_filter_hyperparams",
            "location": 99,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "Dict[str, float]",
                    "Exception"
                ],
                "override": [
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.EventRule",
                    "bool"
                ]
            }
        },
        "MultiNetworkBase.check_params": {
            "name": "check_params",
            "location": 120,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MultiNetworkBase.hyperparams": {
            "name": "hyperparams",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "Dict[str, Union[int, bool]]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "MultiNetworkBase.get_params": {
            "name": "get_params",
            "location": 155,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase.set_params": {
            "name": "set_params",
            "location": 167,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._init_model": {
            "name": "_init_model",
            "location": 181,
            "return": [
                "src.autoks.callbacks.CallbackList",
                "str",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "reset_weights": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "dict",
                    "Optional[BaseException]"
                ],
                "reset_optimizers": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "dict",
                    "Optional[BaseException]"
                ]
            }
        },
        "MultiNetworkBase.model": {
            "name": "model",
            "location": 196,
            "return": [
                "src.autoks.callbacks.CallbackList"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase.model_names": {
            "name": "model_names",
            "location": 202,
            "return": [
                "List[str]",
                "List[int]",
                "Callable[[None], None]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase.check_model_name": {
            "name": "check_model_name",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        },
        "MultiNetworkBase.callbacks": {
            "name": "callbacks",
            "location": 213,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._get_weights": {
            "name": "_get_weights",
            "location": 221,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._set_weights": {
            "name": "_set_weights",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "dict",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "MultiNetworkBase._get_optimizers_config": {
            "name": "_get_optimizers_config",
            "location": 235,
            "return": [
                "Dict[str, Any]",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "List[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._set_optimizers_config": {
            "name": "_set_optimizers_config",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "optimizers_config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "MultiNetworkBase.trainable_models": {
            "name": "trainable_models",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "bool",
                    "Dict[str, utils.types.A]"
                ]
            }
        },
        "MultiNetworkBase._set_model_trainable": {
            "name": "_set_model_trainable",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "Type[T]"
                ],
                "trainable": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]"
                ]
            }
        },
        "MultiNetworkBase._compile_all_models": {
            "name": "_compile_all_models",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._freeze_models_except": {
            "name": "_freeze_models_except",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "MultiNetworkBase._freeze": {
            "name": "_freeze",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trainable_models": [
                    "int",
                    "src.autoks.callbacks.CallbackList"
                ]
            }
        },
        "MultiNetworkBase._unfreeze": {
            "name": "_unfreeze",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._model_context": {
            "name": "_model_context",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._training_context": {
            "name": "_training_context",
            "location": 363,
            "return": [
                "str",
                "src.autoks.callbacks.CallbackList",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase._prediction_context": {
            "name": "_prediction_context",
            "location": 381,
            "return": [
                "bool",
                "Optional[bool]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "persist_model": [
                    "str",
                    "Callable[[str], str]",
                    "Mapping[str, int]"
                ]
            }
        },
        "MultiNetworkBase._add_history_record": {
            "name": "_add_history_record",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase.fit": {
            "name": "fit",
            "location": 402,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "model": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Dict[str, Any]"
                ],
                "reset_weights": [
                    "Dict[str, Any]"
                ],
                "reset_optimizers": [
                    "Dict[str, Any]"
                ],
                "reset_history": [
                    "Dict[str, Any]"
                ]
            }
        },
        "MultiNetworkBase.fit_generator": {
            "name": "fit_generator",
            "location": 441,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "generator": [
                    "int",
                    "float",
                    "str"
                ],
                "model": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Union[object, type]",
                    "purplship.providers.ups.utils.Settings",
                    "Optional['models.LTI1p3Provider']"
                ],
                "reset_weights": [
                    "dict",
                    "bool"
                ],
                "reset_optimizers": [
                    "dict",
                    "bool"
                ],
                "reset_history": [
                    "dict",
                    "bool"
                ]
            }
        },
        "MultiNetworkBase.predict": {
            "name": "predict",
            "location": 495,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "model": [
                    "dict"
                ]
            }
        },
        "MultiNetworkBase.predict_generator": {
            "name": "predict_generator",
            "location": 517,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "generator": [
                    "keras.engine.Layer",
                    "List[List[Any]]",
                    "str"
                ],
                "model": [
                    "str",
                    "int"
                ]
            }
        },
        "MultiNetworkBase.evaluate": {
            "name": "evaluate",
            "location": 542,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bool",
                    "Collection[int]"
                ],
                "y": [
                    "int",
                    "bool",
                    "Collection[int]"
                ],
                "model": [
                    "int"
                ]
            }
        },
        "MultiNetworkBase.score": {
            "name": "score",
            "location": 568,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase.evaluate_generator": {
            "name": "evaluate_generator",
            "location": 577,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "generator": [
                    "keras.engine.Layer",
                    "List[List[Any]]",
                    "str"
                ],
                "model": [
                    "str",
                    "int"
                ]
            }
        },
        "MultiNetworkBase.__getstate__": {
            "name": "__getstate__",
            "location": 604,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiNetworkBase.__setstate__": {
            "name": "__setstate__",
            "location": 613,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "timeserio-master/timeserio/keras/timing.py": {
        "_n": {
            "name": "_n",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "num_or_tuple": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "total_latency": {
            "name": "total_latency",
            "location": 21,
            "return": [
                "List[str]",
                "Iterable[T]",
                "bool"
            ],
            "arguments": {
                "relative_latencies": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "absolute_latencies": {
            "name": "absolute_latencies",
            "location": 39,
            "return": [
                "str",
                "bool",
                "Tuple[int, int]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "relative_latencies": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "layer_latency": {
            "name": "layer_latency",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "layer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "model_latency": {
            "name": "model_latency",
            "location": 100,
            "return": [
                "Callable",
                "Optional[str]",
                "Type"
            ],
            "arguments": {
                "model": [
                    "keras.engine.Layer"
                ]
            }
        },
        "model_output_length": {
            "name": "model_output_length",
            "location": 120,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "model": [
                    "int"
                ],
                "input_shape": [
                    "int",
                    "list",
                    "str",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "timeserio-master/timeserio/keras/utils.py": {
        "iterlayers": {
            "name": "iterlayers",
            "location": 11,
            "return": [
                "typing.Iterable[timeserio.externals.keras.layers.Layer]"
            ],
            "arguments": {
                "model": [
                    "keras.engine.Layer",
                    "int",
                    "float"
                ]
            }
        },
        "has_arg": {
            "name": "has_arg",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "bool"
                ],
                "name": [
                    "List[Type]",
                    "Optional[Callable[..., None]]",
                    "tuple",
                    "float"
                ],
                "accept_all": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "seed_random": {
            "name": "seed_random",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "seed": [
                    "int",
                    "list",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/timeserio/keras/__init__.py": {},
    "timeserio-master/timeserio/model_selection/time_series_split.py": {
        "PandasTimeSeriesSplit.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "groupby": [
                    "float",
                    "bool",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "datetime_col": [
                    "float",
                    "bool",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "n_splits": [
                    "float",
                    "bool",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "max_train_size": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "PandasTimeSeriesSplit.split": {
            "name": "split",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "df": [
                    "dict"
                ],
                "y": [
                    "bool",
                    "Optional[int]",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "Dict[str, Any]"
                ],
                "groups": [
                    "str",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "PandasTimeSeriesSplit._validate_df": {
            "name": "_validate_df",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int"
                ]
            }
        }
    },
    "timeserio-master/timeserio/model_selection/__init__.py": {},
    "timeserio-master/timeserio/multimodel/base.py": {
        "make_pipeline_generator": {
            "name": "make_pipeline_generator",
            "location": 10,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "MultiModel.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiModel.model_names": {
            "name": "model_names",
            "location": 28,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiModel.trainable_models": {
            "name": "trainable_models",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "MultiModel.history": {
            "name": "history",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiModel.get_model_pipes": {
            "name": "get_model_pipes",
            "location": 43,
            "return": [
                "str",
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "MultiModel.get_transformed": {
            "name": "get_transformed",
            "location": 64,
            "return": [
                "bool",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "pipes": [
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "df": [
                    "str",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "MultiModel.get_fit_transformed": {
            "name": "get_fit_transformed",
            "location": 68,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "pipes": [
                    "int",
                    "Tuple[int]",
                    "float"
                ],
                "df": [
                    "int",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "MultiModel.fit": {
            "name": "fit",
            "location": 71,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "model": [
                    "str"
                ]
            }
        },
        "MultiModel.predict": {
            "name": "predict",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "list"
                ],
                "model": [
                    "list",
                    "dict"
                ]
            }
        },
        "MultiModel.predict_generator": {
            "name": "predict_generator",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "df_generator": [
                    "List[int]",
                    "str",
                    "int"
                ],
                "model": [
                    "str"
                ]
            }
        },
        "MultiModel.fit_generator": {
            "name": "fit_generator",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "df_generator": [
                    "List[int]",
                    "str",
                    "int"
                ],
                "model": [
                    "int",
                    "Dict[int, dict]",
                    "float",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "MultiModel.evaluate": {
            "name": "evaluate",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str"
                ],
                "model": [
                    "str"
                ]
            }
        },
        "MultiModel.evaluate_generator": {
            "name": "evaluate_generator",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df_generator": [
                    "List[int]",
                    "str",
                    "int"
                ],
                "model": [
                    "bool"
                ]
            }
        },
        "MultiModel.freeze_models_except": {
            "name": "freeze_models_except",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "MultiModel.freeze": {
            "name": "freeze",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiModel.unfreeze": {
            "name": "unfreeze",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "timeserio-master/timeserio/multimodel/pipegen.py": {
        "_PipelineGenerator.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_PipelineGenerator.__len__": {
            "name": "__len__",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PipelineGenerator.__getitem__": {
            "name": "__getitem__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[Dict[str, Any]]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        }
    },
    "timeserio-master/timeserio/multimodel/__init__.py": {},
    "timeserio-master/timeserio/pipeline/multipipeline.py": {
        "MultiPipeline.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipelines": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MultiPipeline._get_param_names": {
            "name": "_get_param_names",
            "location": 17,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPipeline.__setattr__": {
            "name": "__setattr__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "list"
                ],
                "value": [
                    "dict",
                    "Iterable[T]",
                    "list",
                    "OrderedDict"
                ]
            }
        },
        "MultiPipeline.__getattr__": {
            "name": "__getattr__",
            "location": 27,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Iterable[T]"
                ]
            }
        },
        "MultiPipeline.__getitem__": {
            "name": "__getitem__",
            "location": 34,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list",
                    "str"
                ]
            }
        },
        "MultiPipeline.required_columns": {
            "name": "required_columns",
            "location": 42,
            "return": [
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiPipeline.transformed_columns": {
            "name": "transformed_columns",
            "location": 48,
            "return": [
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "Sequence[Dict]",
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, List[Any]]"
                ]
            }
        }
    },
    "timeserio-master/timeserio/pipeline/pipeline.py": {
        "_parse_df_y": {
            "name": "_parse_df_y",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "list",
                    "str",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "list",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "FeatureUnion.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transformer_list": [
                    "int",
                    "Union[int, float]"
                ],
                "n_jobs": [
                    "int",
                    "Union[int, float]"
                ],
                "transformer_weights": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "FeatureUnion.required_columns": {
            "name": "required_columns",
            "location": 34,
            "return": [
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureUnion.transformed_columns": {
            "name": "transformed_columns",
            "location": 40,
            "return": [
                "bool",
                "float",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "int",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "memory": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Pipeline.required_columns": {
            "name": "required_columns",
            "location": 58,
            "return": [
                "Optional[int]",
                "Optional[float]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.transformed_columns": {
            "name": "transformed_columns",
            "location": 81,
            "return": [
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "int",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        },
        "GroupedPipeline.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "groupby": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "Optional[Callable[[Any], None]]"
                ],
                "pipeline": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "Optional[Callable[[Any], None]]"
                ],
                "errors": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        },
        "GroupedPipeline._iter_groups": {
            "name": "_iter_groups",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str"
                ],
                "y": [
                    "bool",
                    "List[numpy.ndarray]"
                ]
            }
        },
        "GroupedPipeline.fit": {
            "name": "fit",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Set[str]",
                    "Dict[str, Callable[[], None]]"
                ],
                "y": [
                    "Set[str]",
                    "Dict[str, Callable[[], None]]"
                ]
            }
        },
        "GroupedPipeline._fit_subdf": {
            "name": "_fit_subdf",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sub_df": [
                    "List[int]",
                    "pandas.DataFrame",
                    "list",
                    "str",
                    "float"
                ],
                "y": [
                    "List[int]",
                    "pandas.DataFrame",
                    "list",
                    "str",
                    "float"
                ]
            }
        },
        "GroupedPipeline.transform": {
            "name": "transform",
            "location": 149,
            "return": [
                "list",
                "Iterable[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GroupedPipeline.predict": {
            "name": "predict",
            "location": 152,
            "return": [
                "list",
                "Iterable[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "GroupedPipeline.fit_predict": {
            "name": "fit_predict",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "BaseException"
                ],
                "y": [
                    "BaseException"
                ]
            }
        },
        "GroupedPipeline._call_pipeline": {
            "name": "_call_pipeline",
            "location": 158,
            "return": [
                "str",
                "Type",
                "boto3.resources.base.ServiceResource",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "dict",
                    "pandas.DataFrame",
                    "Dict[str, str]"
                ],
                "y": [
                    "dict",
                    "pandas.DataFrame"
                ],
                "attr": [
                    "dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "GroupedPipeline._call_pipeline_subdf": {
            "name": "_call_pipeline_subdf",
            "location": 173,
            "return": [
                "bytes",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "sub_df": [
                    "str",
                    "Optional[str]"
                ],
                "attr": [
                    "str"
                ]
            }
        },
        "GroupedPipeline.required_columns": {
            "name": "required_columns",
            "location": 192,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "geostream.base.Feature",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupedPipeline.transformed_columns": {
            "name": "transformed_columns",
            "location": 196,
            "return": [
                "int",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "int",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        }
    },
    "timeserio-master/timeserio/pipeline/__init__.py": {},
    "timeserio-master/timeserio/preprocessing/aggregate.py": {
        "_flatten_columns": {
            "name": "_flatten_columns",
            "location": 71,
            "return": [
                "str",
                "bool",
                "\"CollectionList\"",
                "pandas.Series",
                "Dict[str, Any]"
            ],
            "arguments": {
                "columns": [
                    "pandas.Index",
                    "pandas.DataFrame",
                    "bool",
                    "int",
                    "str",
                    "float",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "_cartesian_product": {
            "name": "_cartesian_product",
            "location": 87,
            "return": [
                "int",
                "float",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "df_1": [
                    "pandas.DataFrame",
                    "bool",
                    "dict"
                ],
                "df_2": [
                    "pandas.DataFrame",
                    "bool",
                    "dict"
                ]
            }
        },
        "AggregateFeaturizer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregateFeaturizer.fit": {
            "name": "fit",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Callable",
                    "str"
                ],
                "y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AggregateFeaturizer._agg": {
            "name": "_agg",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "list",
                    "pandas.DataFrame",
                    "int"
                ]
            }
        },
        "AggregateFeaturizer.transform": {
            "name": "transform",
            "location": 59,
            "return": [
                "bool",
                "hackathon.utils.utils.DataMessage",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]",
                    "str"
                ]
            }
        },
        "AggregateFeaturizer.required_columns": {
            "name": "required_columns",
            "location": 64,
            "return": [
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "timeserio-master/timeserio/preprocessing/base.py": {},
    "timeserio-master/timeserio/preprocessing/batches.py": {},
    "timeserio-master/timeserio/preprocessing/datetime.py": {
        "get_fractional_hour_from_series": {
            "name": "get_fractional_hour_from_series",
            "location": 24,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_fractional_day_from_series": {
            "name": "get_fractional_day_from_series",
            "location": 35,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "dict",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "get_fractional_year_from_series": {
            "name": "get_fractional_year_from_series",
            "location": 45,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_is_holiday_from_series": {
            "name": "get_is_holiday_from_series",
            "location": 54,
            "return": [
                "dict",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "str"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "str",
                    "dict",
                    "int",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex"
                ],
                "country": [
                    "pandas.Series",
                    "pandas.DataFrame"
                ]
            }
        },
        "get_zero_indexed_month_from_series": {
            "name": "get_zero_indexed_month_from_series",
            "location": 68,
            "return": [
                "raiden.utils.ChannelID",
                "float",
                "int",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "str",
                    "bool"
                ]
            }
        },
        "get_is_weekday_from_series": {
            "name": "get_is_weekday_from_series",
            "location": 73,
            "return": [
                "pandas.Series",
                "str",
                "bool",
                "pandas._AnyArrayLike"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "str",
                    "bool",
                    "pandas._AnyArrayLike"
                ]
            }
        },
        "get_time_is_in_interval_from_series": {
            "name": "get_time_is_in_interval_from_series",
            "location": 79,
            "return": [
                "str",
                "int",
                "Tuple[int, int, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "get_is_peak_hour_from_series": {
            "name": "get_is_peak_hour_from_series",
            "location": 107,
            "return": [
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "int",
                    "bool"
                ]
            }
        },
        "get_is_daytime_from_series": {
            "name": "get_is_daytime_from_series",
            "location": 115,
            "return": [
                "bool",
                "Optional['User']"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "str",
                    "dict",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex"
                ]
            }
        },
        "get_is_morning_peak_from_series": {
            "name": "get_is_morning_peak_from_series",
            "location": 123,
            "return": [
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "int",
                    "bool"
                ]
            }
        },
        "truncate_series": {
            "name": "truncate_series",
            "location": 131,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "str",
                "List[int]"
            ],
            "arguments": {
                "series": [
                    "pandas.Series",
                    "str",
                    "int",
                    "Tuple[float, float]",
                    "float"
                ],
                "truncation_period": [
                    "pandas.Series",
                    "str",
                    "int",
                    "Tuple[float, float]",
                    "float"
                ]
            }
        },
        "PandasDateTimeFeaturizer.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "column": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float",
                    "List[str]"
                ],
                "attributes": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float",
                    "List[str]"
                ],
                "kwargs": []
            }
        },
        "PandasDateTimeFeaturizer.attributes_": {
            "name": "attributes_",
            "location": 179,
            "return": [
                "Type[T]",
                "float",
                "Optional[dict]",
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDateTimeFeaturizer.fit": {
            "name": "fit",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PandasDateTimeFeaturizer.transform": {
            "name": "transform",
            "location": 186,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pandas.DataFrame",
                    "bool",
                    "int",
                    "float",
                    "Mapping[str, Any]"
                ]
            }
        },
        "PandasDateTimeFeaturizer.required_columns": {
            "name": "required_columns",
            "location": 212,
            "return": [
                "List[str]",
                "Set[str]",
                "str",
                "bool",
                "Dict[str, Set[str]]",
                "Type[Union[Any, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDateTimeFeaturizer.transformed_columns": {
            "name": "transformed_columns",
            "location": 215,
            "return": [
                "int",
                "bool",
                "Dict[str, str]",
                "Dict[str, int]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "List[str]",
                    "str",
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "_BaseLagFeaturizer.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "datetime_column": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "columns": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "lags": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "refit": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "duplicate_agg": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "_BaseLagFeaturizer.fit": {
            "name": "fit",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "Callable",
                    "int",
                    "bool",
                    "float"
                ],
                "y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_BaseLagFeaturizer._lag_df": {
            "name": "_lag_df",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lag": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_BaseLagFeaturizer.transform": {
            "name": "transform",
            "location": 263,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Optional[int]"
                ]
            }
        },
        "_BaseLagFeaturizer.required_columns": {
            "name": "required_columns",
            "location": 277,
            "return": [
                "List[str]",
                "Set[str]",
                "str",
                "bool",
                "Dict[str, Set[str]]",
                "Type[Union[Any, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseLagFeaturizer.transformed_columns": {
            "name": "transformed_columns",
            "location": 281,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "List[str]",
                    "str",
                    "list",
                    "int",
                    "dict"
                ]
            }
        },
        "LagFeaturizer._lag_df": {
            "name": "_lag_df",
            "location": 316,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lag": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RollingMeanFeaturizer.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "datetime_column": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, List[str]]",
                    "Optional[str]",
                    "int"
                ],
                "columns": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, List[str]]",
                    "Optional[str]",
                    "int"
                ],
                "windows": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, List[str]]",
                    "Optional[str]",
                    "int"
                ],
                "min_periods": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "center": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "win_type": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "closed": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool",
                    "dict"
                ],
                "refit": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, List[str]]",
                    "Optional[str]",
                    "int"
                ],
                "duplicate_agg": [
                    "str",
                    "bool",
                    "list",
                    "Union[str, List[str]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "RollingMeanFeaturizer.windows": {
            "name": "windows",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "windows": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Optional[Dict]",
                    "Type[T]",
                    "str",
                    "Tuple[List, List, List]"
                ]
            }
        },
        "RollingMeanFeaturizer._lag_df": {
            "name": "_lag_df",
            "location": 387,
            "return": [
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "lag": [
                    "rl_algorithms.utils.config.ConfigDict",
                    "str",
                    "pandas.DataFrame",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "timeserio-master/timeserio/preprocessing/encoding.py": {
        "FeatureIndexEncoder.n_classes_": {
            "name": "n_classes_",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureIndexEncoder.fit": {
            "name": "fit",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "FeatureIndexEncoder.transform": {
            "name": "transform",
            "location": 29,
            "return": [
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "float",
                    "int",
                    "numpy.array"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "StatelessOneHotEncoder.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatelessOneHotEncoder.get_categories": {
            "name": "get_categories",
            "location": 64,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n_features": [
                    "int",
                    "str"
                ],
                "n_values": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "StatelessOneHotEncoder._init_stateless": {
            "name": "_init_stateless",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatelessOneHotEncoder.required_columns": {
            "name": "required_columns",
            "location": 82,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatelessOneHotEncoder.transformed_columns": {
            "name": "transformed_columns",
            "location": 85,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "StatelessTemporalOneHotEncoder.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatelessTemporalOneHotEncoder._reshape_temporal": {
            "name": "_reshape_temporal",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "n_features": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "StatelessTemporalOneHotEncoder.transform": {
            "name": "transform",
            "location": 123,
            "return": [
                "str",
                "bool",
                "List[float]",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "PeriodicEncoder.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicEncoder.fit": {
            "name": "fit",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "PeriodicEncoder._check_value_per_feature": {
            "name": "_check_value_per_feature",
            "location": 174,
            "return": [
                "str",
                "int",
                "dict",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "list"
                ],
                "n_features": [
                    "int",
                    "str",
                    "Optional[T]",
                    "Sequence[T]",
                    "list",
                    "List[int]"
                ]
            }
        },
        "PeriodicEncoder._transform": {
            "name": "_transform",
            "location": 185,
            "return": [
                "str",
                "Optional[int]",
                "Optional[List[int]]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "float"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "PeriodicEncoder.transform": {
            "name": "transform",
            "location": 194,
            "return": [
                "utils.Node",
                "str",
                "numpy.ndarray",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "float",
                    "int",
                    "numpy.array"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "PeriodicEncoder.required_columns": {
            "name": "required_columns",
            "location": 210,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicEncoder.transformed_columns": {
            "name": "transformed_columns",
            "location": 213,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "StatelessPeriodicEncoder.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatelessPeriodicEncoder._init_stateless": {
            "name": "_init_stateless",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatelessPeriodicEncoder.required_columns": {
            "name": "required_columns",
            "location": 272,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatelessPeriodicEncoder.transformed_columns": {
            "name": "transformed_columns",
            "location": 275,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/timeserio/preprocessing/multipipeline.py": {},
    "timeserio-master/timeserio/preprocessing/pandas.py": {
        "array_to_dataframe": {
            "name": "array_to_dataframe",
            "location": 8,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "List[int]",
                    "list"
                ],
                "column": [
                    "pandas.DataFrame",
                    "int",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "df": [
                    "numpy.ndarray",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]"
                ]
            }
        },
        "_join_multilevel_dataframes": {
            "name": "_join_multilevel_dataframes",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df_list": [
                    "List[Tuple[str, str]]",
                    "Sequence[dict]",
                    "list",
                    "List[str]",
                    "Iterator[tuple]",
                    "bool"
                ]
            }
        },
        "_get_column_as_tensor": {
            "name": "_get_column_as_tensor",
            "location": 76,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, float]",
                    "bytes"
                ]
            }
        },
        "PandasColumnSelector.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "PandasColumnSelector.fit": {
            "name": "fit",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PandasColumnSelector.transform": {
            "name": "transform",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PandasColumnSelector.required_columns": {
            "name": "required_columns",
            "location": 66,
            "return": [
                "int",
                "Dict[str, Iterable[Any]]",
                "Dict[str, Union[str, Any]]",
                "cmk.utils.type_defs.CheckVariables",
                "Optional[Match]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasColumnSelector.transformed_columns": {
            "name": "transformed_columns",
            "location": 69,
            "return": [
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Pattern[str]",
                    "Set[str]"
                ]
            }
        },
        "PandasValueSelector.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float",
                    "List[str]"
                ],
                "dtype": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "PandasValueSelector.fit": {
            "name": "fit",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PandasValueSelector.transform": {
            "name": "transform",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Any",
                    "callable",
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        },
        "PandasValueSelector.required_columns": {
            "name": "required_columns",
            "location": 110,
            "return": [
                "int",
                "Dict[str, Iterable[Any]]",
                "Dict[str, Union[str, Any]]",
                "cmk.utils.type_defs.CheckVariables",
                "Optional[Match]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasValueSelector.transformed_columns": {
            "name": "transformed_columns",
            "location": 113,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Pattern[str]",
                    "Set[str]"
                ]
            }
        },
        "PandasIndexValueSelector.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "levels": [
                    "int",
                    "bool",
                    "float"
                ],
                "dtype": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PandasIndexValueSelector.fit": {
            "name": "fit",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PandasIndexValueSelector.transform": {
            "name": "transform",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "list"
                ]
            }
        },
        "PandasSequenceSplitter.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float",
                    "List[str]"
                ],
                "index": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "PandasSequenceSplitter.fit": {
            "name": "fit",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PandasSequenceSplitter.transform": {
            "name": "transform",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "pandas.Series",
                    "int",
                    "metrics_backend.utils.Address",
                    "Dict[str, str]"
                ]
            }
        },
        "PandasSequenceSplitter.required_columns": {
            "name": "required_columns",
            "location": 171,
            "return": [
                "int",
                "pandas.DataFrame",
                "List[str]",
                "Dict[int, int]",
                "str",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasSequenceSplitter.transformed_columns": {
            "name": "transformed_columns",
            "location": 175,
            "return": [
                "str",
                "set",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "List[torch.nn.utils.rnn.PackedSequence]"
                ]
            }
        }
    },
    "timeserio-master/timeserio/preprocessing/utils.py": {
        "_as_list_of_str": {
            "name": "_as_list_of_str",
            "location": 9,
            "return": [
                "Dict[int, dict]",
                "List[Dict[str, Any]]",
                "int",
                "Dict[int, int]"
            ],
            "arguments": {
                "columns": [
                    "List[str]",
                    "str",
                    "numpy.array",
                    "Dict[str, bool]"
                ]
            }
        },
        "transform_selected": {
            "name": "transform_selected",
            "location": 38,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "X": [
                    "T",
                    "bool",
                    "dict"
                ],
                "transform": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "dtype": [
                    "bool",
                    "dict",
                    "str"
                ],
                "selected": [
                    "str",
                    "int"
                ],
                "copy": [
                    "int",
                    "str",
                    "Callable[[None], bool]"
                ],
                "retain_order": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "CallableMixin.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityRegressor.fit": {
            "name": "fit",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "IdentityRegressor.predict": {
            "name": "predict",
            "location": 30,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "IdentityRegressor.fit_predict": {
            "name": "fit_predict",
            "location": 33,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "timeserio-master/timeserio/preprocessing/__init__.py": {},
    "timeserio-master/timeserio/utils/functools.py": {
        "get_default_args": {
            "name": "get_default_args",
            "location": 4,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "func": [
                    "bytes",
                    "Callable",
                    "str",
                    "Dict[str, Optional[str]]",
                    "bool"
                ]
            }
        }
    },
    "timeserio-master/timeserio/utils/pickle.py": {
        "dumpf": {
            "name": "dumpf",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "int",
                    "bool",
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[List[str]]",
                    "Callable[[str], None]"
                ]
            }
        },
        "loadf": {
            "name": "loadf",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "str",
                    "T",
                    "Optional[int]"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 25,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "timeserio-master/timeserio/utils/__init__.py": {},
    "timeserio-master/timeserio/validation/validation.py": {
        "is_valid_transformer": {
            "name": "is_valid_transformer",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "transformer": [
                    "str",
                    "float"
                ]
            }
        },
        "is_valid_pipeline": {
            "name": "is_valid_pipeline",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "pipeline": [
                    "Dict[str, Any]",
                    "Optional[Union[str, Any, Any, Any]]",
                    "float",
                    "int",
                    "Dict[str, Set[str]]",
                    "Mapping[str, Any]",
                    "Iterable[Type]",
                    "dict"
                ]
            }
        },
        "is_valid_multipipeline": {
            "name": "is_valid_multipipeline",
            "location": 33,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {
                "multipipeline": [
                    "Dict[Hashable, Any]",
                    "Dict[str, Set[str]]",
                    "Dict[str, float]",
                    "int",
                    "dict"
                ]
            }
        },
        "is_valid_multimodel": {
            "name": "is_valid_multimodel",
            "location": 44,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "multimodel": [
                    "str"
                ]
            }
        },
        "is_valid_pickle": {
            "name": "is_valid_pickle",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "timeserio-master/timeserio/validation/__init__.py": {}
}
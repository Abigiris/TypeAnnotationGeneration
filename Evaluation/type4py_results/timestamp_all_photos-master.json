{
    "timestamp_all_photos-master/setup.py": {},
    "timestamp_all_photos-master/app/apple_photos_library.py": {
        "dump_image_paths": {
            "name": "dump_image_paths",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "photos_library_path": [
                    "str"
                ],
                "destination_filepath": [
                    "str"
                ],
                "limit": [
                    "bool",
                    "dict",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "timestamp_all_photos-master/app/commands.py": {
        "transmission_options": {
            "name": "transmission_options",
            "location": 31,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "func": [
                    "dict",
                    "Callable[[T], None]",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "import_photos": {
            "name": "import_photos",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "library": [
                    "str",
                    "bytes"
                ]
            }
        },
        "hashify": {
            "name": "hashify",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "file_of_paths": [
                    "str",
                    "bool"
                ],
                "file_of_hashes": [
                    "str",
                    "bool"
                ]
            }
        },
        "lookup_random_photo_filepath": {
            "name": "lookup_random_photo_filepath",
            "location": 68,
            "return": [
                "str",
                "Callable",
                "Tuple[str, str]",
                "List[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "param": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "Optional[Tuple[str]]",
                    "str",
                    "click.Context"
                ]
            }
        },
        "build_and_verify_merkle": {
            "name": "build_and_verify_merkle",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "file_of_hashes": [
                    "str",
                    "List[Tuple[str, str, str]]"
                ],
                "expected_included_filepath": [
                    "str",
                    "Set[str]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "send_merkle_root_to_bitcoin": {
            "name": "send_merkle_root_to_bitcoin",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "file_of_hashes": [
                    "bool",
                    "str",
                    "Callable[[float], None]",
                    "int"
                ],
                "wif": [
                    "int",
                    "str",
                    "Iterable[str]"
                ],
                "change_address": [
                    "int",
                    "str",
                    "Iterable[str]"
                ],
                "is_testnet": [
                    "int",
                    "str",
                    "Iterable[str]"
                ],
                "is_dryrun": [
                    "int",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "end_to_end": {
            "name": "end_to_end",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "int",
                    "str"
                ],
                "library": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "timestamp_all_photos-master/app/merkle_tree.py": {
        "hash": {
            "name": "hash",
            "location": 22,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "something": [
                    "Callable",
                    "bytes",
                    "T",
                    "int",
                    "IO"
                ]
            }
        },
        "hash_from_path": {
            "name": "hash_from_path",
            "location": 26,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "_build_simple_merkle_tree_list": {
            "name": "_build_simple_merkle_tree_list",
            "location": 31,
            "return": [
                "str",
                "dict",
                "float",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "items": [
                    "list",
                    "str",
                    "bytes"
                ]
            }
        },
        "MerkleTree.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "list",
                    "dict",
                    "Optional[Callable]",
                    "List[str]"
                ]
            }
        },
        "MerkleTree.from_filestream": {
            "name": "from_filestream",
            "location": 60,
            "return": [
                "str",
                "dict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict]"
                ],
                "input_filestream": [
                    "bool",
                    "str"
                ]
            }
        },
        "MerkleTree.test_existence": {
            "name": "test_existence",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "MerkleTree._is_hashed_element_present": {
            "name": "_is_hashed_element_present",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hashed_element": [
                    "str",
                    "Dict[str, Any]",
                    "IO[bytes]",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "MerkleTree._generation_bounds_for_index": {
            "name": "_generation_bounds_for_index",
            "location": 74,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "MerkleTree._sibling": {
            "name": "_sibling",
            "location": 85,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "List[float]",
                    "str",
                    "bool"
                ]
            }
        },
        "MerkleTree._parent": {
            "name": "_parent",
            "location": 101,
            "return": [
                "bool",
                "type",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "MerkleTree.proof": {
            "name": "proof",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "timestamp_all_photos-master/app/read_and_hashify.py": {
        "read_and_hashify": {
            "name": "read_and_hashify",
            "location": 5,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "input_file_of_filepaths": [
                    "bool",
                    "float",
                    "Optional[str]"
                ],
                "output_file_of_hashes": [
                    "List[str]",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "hash_from_filepath": {
            "name": "hash_from_filepath",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "Dict[Any, bool]",
                "Union[str, None]"
            ],
            "arguments": {
                "filepath": [
                    "Union[str, IO]",
                    "TextIO",
                    "str"
                ]
            }
        }
    },
    "timestamp_all_photos-master/app/transmit.py": {
        "send_to_bitcoin": {
            "name": "send_to_bitcoin",
            "location": 6,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "wif": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "change_address": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "payload": [
                    "str",
                    "Dict[Tuple[str, str], Exception]",
                    "bytes"
                ],
                "is_testnet": [
                    "Optional[Any]",
                    "Union[float, Tuple[float, float]]",
                    "Callable[[str], bool]"
                ],
                "is_dryrun": [
                    "Optional[Any]",
                    "Union[float, Tuple[float, float]]",
                    "Callable[[str], bool]"
                ],
                "fee": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_from_bitcoin": {
            "name": "get_from_bitcoin",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "transaction_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "is_testnet": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "timestamp_all_photos-master/app/__init__.py": {},
    "timestamp_all_photos-master/tests/test_apple_photos_library.py": {
        "TestApplePhotosLibrary.setup_method": {
            "name": "setup_method",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_method": [
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestApplePhotosLibrary.teardown_method": {
            "name": "teardown_method",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_method": [
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestApplePhotosLibrary.test_dump_image_paths": {
            "name": "test_dump_image_paths",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "timestamp_all_photos-master/tests/test_merkle_tree.py": {
        "input_filestream_of_hashes": {
            "name": "input_filestream_of_hashes",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "matching_filepath_builder": {
            "name": "matching_filepath_builder",
            "location": 33,
            "return": [
                "IO[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "tmpdir": [
                    "List[str]",
                    "dict"
                ]
            }
        },
        "unmatching_filepath": {
            "name": "unmatching_filepath",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "merkle_tree": {
            "name": "merkle_tree",
            "location": 49,
            "return": [
                "str",
                "Mapping",
                "List[Union[\"PipeChain\", str]]"
            ],
            "arguments": {
                "input_filestream_of_hashes": [
                    "List[str]",
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "verify_proof": {
            "name": "verify_proof",
            "location": 53,
            "return": [
                "float",
                "bool",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "proof": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_root_is_correct": {
            "name": "test_root_is_correct",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "merkle_tree": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "test_existence_true_for_all_element": {
            "name": "test_existence_true_for_all_element",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "merkle_tree": [
                    "str"
                ],
                "matching_filepath_builder": [
                    "str",
                    "int",
                    "Union[int,str]",
                    "bool"
                ],
                "element_id": [
                    "str",
                    "int",
                    "Union[int,str]",
                    "bool"
                ]
            }
        },
        "test_existence_false": {
            "name": "test_existence_false",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "merkle_tree": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "unmatching_filepath": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_proof_nonexistent_element_is_false": {
            "name": "test_proof_nonexistent_element_is_false",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "merkle_tree": [
                    "str",
                    "int",
                    "Sequence",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "unmatching_filepath": [
                    "str",
                    "int",
                    "Sequence",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "test_proof": {
            "name": "test_proof",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "element_id": [
                    "str"
                ],
                "path": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "merkle_tree": [
                    "str"
                ],
                "matching_filepath_builder": [
                    "str"
                ]
            }
        },
        "matching_filepath_builder.inner": {
            "name": "inner",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "element_id": [
                    "str",
                    "IO[bytes]"
                ]
            }
        }
    },
    "timestamp_all_photos-master/tests/test_read_and_hashify.py": {
        "test_read_and_hashify": {
            "name": "test_read_and_hashify",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "timestamp_all_photos-master/tests/__init__.py": {}
}
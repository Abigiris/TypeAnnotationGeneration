{
    "toDolst-master/database.py": {
        "runsql": {
            "name": "runsql",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "create_table": {
            "name": "create_table",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "insert": {
            "name": "insert",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "values": [
                    "dict",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "float",
                    "Collection[str]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "deleteall": {
            "name": "deleteall",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mark_complete": {
            "name": "mark_complete",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "showall": {
            "name": "showall",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "showall_incomp": {
            "name": "showall_incomp",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toDolst-master/database_using_decorators.py": {
        "uppermethod": {
            "name": "uppermethod",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "create_table": {
            "name": "create_table",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "cursor": [
                    "sqlite3.Connection",
                    "Union[sqlite3.Connection, sqlite3.Cursor]",
                    "bool",
                    "sqlite3.Cursor",
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "insert": {
            "name": "insert",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "values": [
                    "dict",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "float",
                    "Collection[str]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "deleteall": {
            "name": "deleteall",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mark_complete": {
            "name": "mark_complete",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "showall": {
            "name": "showall",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "showall_incomp": {
            "name": "showall_incomp",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "uppermethod._database_connector": {
            "name": "_database_connector",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "uppermethod._database_connector.connector": {
            "name": "connector",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toDolst-master/database_using_sqlalchemy.py": {
        "insert": {
            "name": "insert",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "values": [
                    "dict",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "float",
                    "Collection[str]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "deleteall": {
            "name": "deleteall",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mark_complete": {
            "name": "mark_complete",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "showall": {
            "name": "showall",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "showall_incomp": {
            "name": "showall_incomp",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "print_task": {
            "name": "print_task",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "t": [
                    "int",
                    "Type"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bytes"
                ],
                "task": [
                    "str",
                    "int",
                    "float"
                ],
                "notes": [
                    "str",
                    "int",
                    "float"
                ],
                "username": [
                    "str",
                    "int",
                    "float"
                ],
                "fullname": [
                    "str",
                    "int",
                    "float"
                ],
                "completed": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[int]"
                ],
                "subtasks": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[int]"
                ]
            }
        }
    },
    "toDolst-master/jsonload.py": {
        "flatten_dict": {
            "name": "flatten_dict",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "nested_dict": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[int, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, int]"
                ],
                "final_dict": [
                    "dict",
                    "Dict[int, Dict[str, Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "Dict[str, bool]",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "pop_temp": {
            "name": "pop_temp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "template": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "str",
                    "Type[T]",
                    "Union[str, Dict[str, str]]"
                ],
                "request_dict": [
                    "dict",
                    "str",
                    "Optional[bool]",
                    "Optional[Dict]"
                ]
            }
        },
        "jsonread": {
            "name": "jsonread",
            "location": 22,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "templatename": [
                    "str",
                    "dict",
                    "list",
                    "Optional[Dict[str, str]]"
                ],
                "requestname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "toDolst-master/main-tryone.py": {
        "getval": {
            "name": "getval",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "nested_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, List[Callable]]",
                    "Dict[str, int]"
                ],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "poptemp": {
            "name": "poptemp",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "template": [
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "request_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "toDolst-master/main.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "insert": {
            "name": "insert",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "int",
                    "Callable[[KT], VT]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "deleteall": {
            "name": "deleteall",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "showall_incomplete": {
            "name": "showall_incomplete",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "showall": {
            "name": "showall",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mark_complete": {
            "name": "mark_complete",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        }
    },
    "toDolst-master/typedef.py": {},
    "toDolst-master/test/tester.py": {
        "dbtes": {
            "name": "dbtes",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toDolst-master/test/__init__.py": {},
    "toDolst-master/toDolst/__init__.py": {}
}
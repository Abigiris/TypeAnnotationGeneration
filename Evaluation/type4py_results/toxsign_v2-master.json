{
    "toxsign_v2-master/manage.py": {},
    "toxsign_v2-master/merge_production_dotenvs_in_dotenv.py": {
        "merge": {
            "name": "merge",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_path": [
                    "str",
                    "int"
                ],
                "merged_file_paths": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "bytes"
                ],
                "append_linesep": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "int",
                    "str"
                ],
                "merged_file_count": [
                    "int",
                    "Tuple[str, str]",
                    "str"
                ],
                "append_linesep": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "toxsign_v2-master/config/forms.py": {
        "get_model_data": {
            "name": "get_model_data",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "MutableMapping[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "ontology_model": [
                    "str",
                    "bool"
                ],
                "related_field_name": [
                    "str",
                    "bool"
                ],
                "entity_model": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "field_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "field_slug_name": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "ProjectSearchForm.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyChoiceField.label_from_instance": {
            "name": "label_from_instance",
            "location": 69,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Type[T]",
                    "str",
                    "projects.models.Project"
                ]
            }
        },
        "SignatureSearchForm.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/config/urls.py": {},
    "toxsign_v2-master/config/views.py": {
        "HomeView": {
            "name": "HomeView",
            "location": 49,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "download_signature": {
            "name": "download_signature",
            "location": 53,
            "return": [],
            "arguments": {
                "request": [],
                "sigid": []
            }
        },
        "download_job_result": {
            "name": "download_job_result",
            "location": 72,
            "return": [],
            "arguments": {
                "request": [],
                "jobid": []
            }
        },
        "autocompleteModel": {
            "name": "autocompleteModel",
            "location": 90,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "advanced_search_form": {
            "name": "advanced_search_form",
            "location": 190,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "advanced_search": {
            "name": "advanced_search",
            "location": 208,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "graph_data": {
            "name": "graph_data",
            "location": 214,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "index": {
            "name": "index",
            "location": 272,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_sub_create_url": {
            "name": "get_sub_create_url",
            "location": 376,
            "return": [],
            "arguments": {
                "entity_type": [],
                "prj_id": [],
                "tsx_id": []
            }
        },
        "get_clone_url": {
            "name": "get_clone_url",
            "location": 387,
            "return": [],
            "arguments": {
                "entity_type": [],
                "prj_id": [],
                "tsx_id": []
            }
        },
        "get_edit_url": {
            "name": "get_edit_url",
            "location": 400,
            "return": [],
            "arguments": {
                "entity_type": [],
                "tsx_id": []
            }
        },
        "render_403": {
            "name": "render_403",
            "location": 411,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "search": {
            "name": "search",
            "location": 430,
            "return": [],
            "arguments": {
                "request": [],
                "model": [],
                "document": [],
                "search_terms": [],
                "pagination": []
            }
        },
        "generate_query": {
            "name": "generate_query",
            "location": 462,
            "return": [],
            "arguments": {
                "search_terms": []
            }
        },
        "generate_biological_query": {
            "name": "generate_biological_query",
            "location": 512,
            "return": [],
            "arguments": {
                "onto_id": []
            }
        },
        "generate_slug_query": {
            "name": "generate_slug_query",
            "location": 522,
            "return": [],
            "arguments": {
                "onto_id": [],
                "type": []
            }
        },
        "count_subentities": {
            "name": "count_subentities",
            "location": 534,
            "return": [],
            "arguments": {
                "entity": [],
                "entity_type": []
            }
        },
        "paginate": {
            "name": "paginate",
            "location": 541,
            "return": [],
            "arguments": {
                "values": [],
                "query": [],
                "count": [],
                "is_ES": []
            }
        },
        "MaintenanceView": {
            "name": "MaintenanceView",
            "location": 557,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "SearchResults.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "search_object": []
            }
        },
        "SearchResults.__len__": {
            "name": "__len__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchResults.__getitem__": {
            "name": "__getitem__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "toxsign_v2-master/config/wsgi.py": {},
    "toxsign_v2-master/config/__init__.py": {},
    "toxsign_v2-master/config/settings/base.py": {},
    "toxsign_v2-master/config/settings/local.py": {},
    "toxsign_v2-master/config/settings/production.py": {},
    "toxsign_v2-master/config/settings/test.py": {},
    "toxsign_v2-master/config/settings/__init__.py": {},
    "toxsign_v2-master/docs/conf.py": {},
    "toxsign_v2-master/docs/__init__.py": {},
    "toxsign_v2-master/loading_data/migration_files/assays.py": {
        "process_assays": {
            "name": "process_assays",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "int"
                ],
                "study_dict": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "user_dict": [
                    "list",
                    "int",
                    "List[str]",
                    "List[Dict[Any, str]]",
                    "List[Dict[int, str]]"
                ],
                "project_dict": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_assay_dict": {
            "name": "get_assay_dict",
            "location": 39,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_create_fake_assay": {
            "name": "_create_fake_assay",
            "location": 48,
            "return": [
                "bool",
                "zerver.models.Realm",
                "int",
                "Optional[str]",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "assay_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "user_dict": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_create_assay": {
            "name": "_create_assay",
            "location": 51,
            "return": [
                "int",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "assay_data": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "List[str]",
                    "Union[float, str]"
                ],
                "study_dict": [
                    "str",
                    "list",
                    "int"
                ],
                "user_dict": [
                    "int",
                    "bool",
                    "transfer.models.ArticleID"
                ],
                "project_dict": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "bool",
                    "Dict[str, object]"
                ],
                "onto_dict": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "toxsign_v2-master/loading_data/migration_files/factors.py": {
        "process_factors": {
            "name": "process_factors",
            "location": 7,
            "return": [],
            "arguments": {
                "path": [],
                "user_dict": [],
                "assay_dict": []
            }
        },
        "get_factor_dict": {
            "name": "get_factor_dict",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "get_corres_dict": {
            "name": "get_corres_dict",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "_create_fake_factor": {
            "name": "_create_fake_factor",
            "location": 63,
            "return": [],
            "arguments": {
                "factor_id": [],
                "user_dict": []
            }
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "_create_factor": {
            "name": "_create_factor",
            "location": 70,
            "return": [],
            "arguments": {
                "factor_data": [],
                "user_dict": [],
                "assay_dict": []
            }
        },
        "_create_sub_factor": {
            "name": "_create_sub_factor",
            "location": 82,
            "return": [],
            "arguments": {
                "factor_data": [],
                "user_dict": [],
                "factor_dict": [],
                "onto_dict": []
            }
        },
        "_get_factor_name": {
            "name": "_get_factor_name",
            "location": 99,
            "return": [],
            "arguments": {
                "factor_data": []
            }
        },
        "_get_dose": {
            "name": "_get_dose",
            "location": 110,
            "return": [],
            "arguments": {
                "factor_data": []
            }
        },
        "_get_exposure_duration": {
            "name": "_get_exposure_duration",
            "location": 140,
            "return": [],
            "arguments": {
                "factor_data": []
            }
        }
    },
    "toxsign_v2-master/loading_data/migration_files/migrate.py": {},
    "toxsign_v2-master/loading_data/migration_files/ontologies.py": {
        "get_ontology": {
            "name": "get_ontology",
            "location": 3,
            "return": [
                "int",
                "Dict[str, bool]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "value_dict": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[str]"
                ],
                "field_name": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[str]"
                ],
                "onto_dict": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "dict"
                ]
            }
        },
        "get_ontology_slug": {
            "name": "get_ontology_slug",
            "location": 46,
            "return": [
                "Mapping[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "value_dict": [
                    "str",
                    "Dict[str, Any]"
                ],
                "field_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]"
                ],
                "slug_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]"
                ],
                "onto_dict": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "dict"
                ],
                "filter": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "toxsign_v2-master/loading_data/migration_files/projects.py": {
        "process_projects": {
            "name": "process_projects",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "user_dict": [
                    "list",
                    "List[str]",
                    "Tuple[str]",
                    "dict",
                    "Set[str]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "get_project_dict": {
            "name": "get_project_dict",
            "location": 34,
            "return": [
                "dict",
                "Dict[str, Any]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_create_empty_project": {
            "name": "_create_empty_project",
            "location": 43,
            "return": [
                "str",
                "bool",
                "Callable",
                "models.Payment"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int",
                    "bson.ObjectId",
                    "projects.project_models.Project",
                    "Tuple[int, str]",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "user_dict": [
                    "str",
                    "int",
                    "bson.ObjectId",
                    "projects.project_models.Project",
                    "Tuple[int, str]",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_create_project": {
            "name": "_create_project",
            "location": 46,
            "return": [
                "bool",
                "int",
                "str",
                "Tuple[int, int]",
                "dict"
            ],
            "arguments": {
                "project_data": [
                    "Optional[Dict]",
                    "bool",
                    "bytes",
                    "tuple",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "user_dict": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int",
                    "Union[bytes, str]"
                ]
            }
        }
    },
    "toxsign_v2-master/loading_data/migration_files/signatures.py": {
        "process_signatures": {
            "name": "process_signatures",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "int"
                ],
                "user_dict": [
                    "list",
                    "List[str]",
                    "List[Tuple[Any, Any]]",
                    "bool",
                    "List[cleanslate.models.SourceRecord]"
                ],
                "corresp_dict": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "populate_signatures": {
            "name": "populate_signatures",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "file_root": [
                    "str",
                    "BinaryIO",
                    "bool",
                    "IO[Any]",
                    "List[str]"
                ]
            }
        },
        "_create_fake_signature": {
            "name": "_create_fake_signature",
            "location": 50,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "signature_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "user_dict": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_create_signature": {
            "name": "_create_signature",
            "location": 56,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "int",
                "object",
                "bool",
                "paradigm.signatures.Base"
            ],
            "arguments": {
                "signature_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ],
                "user_dict": [
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "corresp_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, object]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[Hashable, int]",
                    "int"
                ],
                "onto_dict": [
                    "dict",
                    "boucanpy.core.PaginationQS",
                    "OrderedDict",
                    "Iterable[Tuple[Hashable, Any]]"
                ]
            }
        },
        "_populate_signature": {
            "name": "_populate_signature",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "signature": [
                    "str"
                ],
                "file_root": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_numerical_values": {
            "name": "_get_numerical_values",
            "location": 120,
            "return": [
                "float",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "type": [
                    "str",
                    "bool",
                    "AnyStr",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Mapping[Any, str]",
                    "Dict[str, int]",
                    "Optional[Any]",
                    "bool"
                ],
                "default": [
                    "str",
                    "bool",
                    "AnyStr",
                    "Optional[str]"
                ]
            }
        }
    },
    "toxsign_v2-master/loading_data/migration_files/studies.py": {
        "process_studies": {
            "name": "process_studies",
            "location": 3,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "toxsign_v2-master/loading_data/migration_files/users.py": {
        "process_users": {
            "name": "process_users",
            "location": 5,
            "return": [
                "amundsen_application.models.user.User",
                "bool",
                "arxiv.users.domain.User",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str, bytes, int]"
                ]
            }
        },
        "get_user_dict": {
            "name": "get_user_dict",
            "location": 20,
            "return": [
                "dict",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]",
                "story.models.Author"
            ],
            "arguments": {}
        },
        "get_owner": {
            "name": "get_owner",
            "location": 27,
            "return": [
                "str",
                "zerver.models.Realm",
                "Dict[str, Any]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "current_owner": [
                    "str",
                    "models.User",
                    "dict",
                    "bool",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "list"
                ],
                "user_dict": [
                    "str",
                    "models.User",
                    "dict",
                    "bool",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "_create_user": {
            "name": "_create_user",
            "location": 33,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet",
                "asgard.backends.users.UsersBackend"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "src.domain.entity.user.User"
                ]
            }
        },
        "_create_super_user": {
            "name": "_create_super_user",
            "location": 49,
            "return": [
                "zam_repondeur.models.Lecture",
                "user_models.User",
                "app.models.user.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "discord.User",
                "core.models.UserPreferences",
                "asgard.backends.users.UsersBackend"
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/loading_data/migration_files/__init__.py": {},
    "toxsign_v2-master/toxsign/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "settings": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "tmpdir": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/toxsign/__init__.py": {},
    "toxsign_v2-master/toxsign/assays/admin.py": {},
    "toxsign_v2-master/toxsign/assays/apps.py": {},
    "toxsign_v2-master/toxsign/assays/documents.py": {
        "AssayDocument.get_queryset": {
            "name": "get_queryset",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssayDocument.get_instances_from_related": {
            "name": "get_instances_from_related",
            "location": 77,
            "return": [
                "int",
                "str",
                "salon.models.Stylist",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "related_instance": [
                    "str",
                    "bytes",
                    "Callable",
                    "zerver.models.Message"
                ]
            }
        },
        "FactorDocument.get_queryset": {
            "name": "get_queryset",
            "location": 120,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactorDocument.get_instances_from_related": {
            "name": "get_instances_from_related",
            "location": 127,
            "return": [
                "int",
                "str",
                "salon.models.Stylist",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "related_instance": [
                    "int",
                    "dict"
                ]
            }
        },
        "ChemicalsubFactorDocument.get_queryset": {
            "name": "get_queryset",
            "location": 167,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChemicalsubFactorDocument.get_instances_from_related": {
            "name": "get_instances_from_related",
            "location": 173,
            "return": [
                "int",
                "str",
                "dict",
                "salon.models.Stylist",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "related_instance": [
                    "Set[int]",
                    "int",
                    "jumeaux.models.FinalAddOnPayload",
                    "django.db.models.Model",
                    "Union[int, slice]"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/assays/forms.py": {
        "AssayCreateForm.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssayEditForm.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FactorCreateForm.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FactorEditForm.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChemicalsubFactorCreateForm.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChemicalsubFactorCreateForm.is_valid": {
            "name": "is_valid",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChemicalsubFactorEditForm.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/assays/models.py": {
        "auto_delete_assay_on_delete": {
            "name": "auto_delete_assay_on_delete",
            "location": 153,
            "return": [],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "auto_delete_factor_on_delete": {
            "name": "auto_delete_factor_on_delete",
            "location": 164,
            "return": [],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "Assay.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Assay.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Assay.save": {
            "name": "save",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Factor.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Factor.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Factor.save": {
            "name": "save",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChemicalsubFactor.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/assays/urls.py": {},
    "toxsign_v2-master/toxsign/assays/views.py": {
        "DetailAssayView": {
            "name": "DetailAssayView",
            "location": 23,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "assid": [
                    "str",
                    "int"
                ]
            }
        },
        "DetailFactorView": {
            "name": "DetailFactorView",
            "location": 34,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "facid": [
                    "str",
                    "int"
                ]
            }
        },
        "get_subfactors": {
            "name": "get_subfactors",
            "location": 215,
            "return": [
                "salon.models.Stylist",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "facid": [
                    "str",
                    "django.http.HttpRequest",
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ]
            }
        },
        "delete_subfactor": {
            "name": "delete_subfactor",
            "location": 233,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "Optional[int]",
                    "Optional[str]",
                    "django.http.HttpRequest",
                    "str",
                    "dict",
                    "Optional[bytes]"
                ],
                "type": [
                    "bool",
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "EditAssayView.get_permission_object": {
            "name": "get_permission_object",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditAssayView.get_object": {
            "name": "get_object",
            "location": 62,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "EditFactorView.get_permission_object": {
            "name": "get_permission_object",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditFactorView.get_object": {
            "name": "get_object",
            "location": 83,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "EditFactorView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 87,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateAssayView.get_permission_object": {
            "name": "get_permission_object",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateAssayView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 107,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateAssayView.form_valid": {
            "name": "form_valid",
            "location": 117,
            "return": [
                "int",
                "bool",
                "str",
                "BaseException",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str"
                ]
            }
        },
        "CreateFactorView.get_permission_object": {
            "name": "get_permission_object",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateFactorView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 139,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateFactorView.form_valid": {
            "name": "form_valid",
            "location": 163,
            "return": [
                "int",
                "bool",
                "str",
                "BaseException",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str"
                ]
            }
        },
        "CreateChemicalsubFactorView.get_permission_object": {
            "name": "get_permission_object",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateChemicalsubFactorView.get_context_data": {
            "name": "get_context_data",
            "location": 183,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateChemicalsubFactorView.form_valid": {
            "name": "form_valid",
            "location": 190,
            "return": [
                "str",
                "float",
                "rl_algorithms.utils.config.ConfigDict",
                "Callable[[None, None], bool]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "List[int]",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "EditChemicalsubFactorView.get_permission_object": {
            "name": "get_permission_object",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditChemicalsubFactorView.get_object": {
            "name": "get_object",
            "location": 212,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/assays/__init__.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0002_auto_20190529_1245.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0003_factor.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0004_auto_20190605_1558.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0005_auto_20190708_0834.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0006_remove_assay_status.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0007_create_chemical_subfactor.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0008_auto_20191106_1244.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0009_auto_20191108_0906.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0010_assay_cell_line_slug.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0011_auto_20211104_1437.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/0012_auto_20211105_1025.py": {},
    "toxsign_v2-master/toxsign/assays/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/assays/tests/factories.py": {},
    "toxsign_v2-master/toxsign/assays/tests/test_assays_views.py": {
        "get_form": {
            "name": "get_form",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "bytes",
                    "str"
                ],
                "tsx_id": [
                    "List[dict]",
                    "itests.pages.groups.GroupRow",
                    "int",
                    "List[None]",
                    "dict",
                    "List[bytes]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "tsx_id": [
                    "bool",
                    "int",
                    "str",
                    "List[bytes]"
                ],
                "form": [
                    "str",
                    "Dict[str, int]",
                    "bytes"
                ],
                "new_description": [
                    "str",
                    "int"
                ]
            }
        },
        "TestAssayDetailView.test_details_private_anonymous": {
            "name": "test_details_private_anonymous",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestAssayDetailView.test_details_private_logged": {
            "name": "test_details_private_logged",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        },
        "TestAssayDetailView.test_detail_read_groups": {
            "name": "test_detail_read_groups",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "django_user_model": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]"
                ]
            }
        },
        "TestAssayDetailView.test_details_public": {
            "name": "test_details_public",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestAssayUpdateView.test_update_anonymous": {
            "name": "test_update_anonymous",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestAssayUpdateView.test_update_edit_groups": {
            "name": "test_update_edit_groups",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "django_user_model": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAssayUpdateView.test_update_logged": {
            "name": "test_update_logged",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        },
        "TestAssayUpdateView.test_update_logged_public": {
            "name": "test_update_logged_public",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/assays/tests/test_factors_views.py": {
        "get_form": {
            "name": "get_form",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "bytes",
                    "str"
                ],
                "tsx_id": [
                    "List[dict]",
                    "itests.pages.groups.GroupRow",
                    "int",
                    "List[None]",
                    "dict",
                    "List[bytes]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [
                    "str",
                    "dict"
                ],
                "tsx_id": [
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "dict",
                    "Callable[[str], str]",
                    "str"
                ],
                "form": [
                    "str",
                    "Optional[str]"
                ],
                "new_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestAssayDetailView.test_details_private_anonymous": {
            "name": "test_details_private_anonymous",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestAssayDetailView.test_details_private_logged": {
            "name": "test_details_private_logged",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        },
        "TestAssayDetailView.test_detail_read_groups": {
            "name": "test_detail_read_groups",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "django_user_model": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]"
                ]
            }
        },
        "TestAssayDetailView.test_details_public": {
            "name": "test_details_public",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestAssayUpdateView.test_update_anonymous": {
            "name": "test_update_anonymous",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestAssayUpdateView.test_update_edit_groups": {
            "name": "test_update_edit_groups",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "django_user_model": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAssayUpdateView.test_update_logged": {
            "name": "test_update_logged",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        },
        "TestAssayUpdateView.test_update_logged_public": {
            "name": "test_update_logged_public",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/assays/tests/test_model.py": {
        "test_assay_model": {
            "name": "test_assay_model",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_factor_model": {
            "name": "test_factor_model",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_chemical_subfactor_model": {
            "name": "test_chemical_subfactor_model",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/toxsign/assays/tests/test_urls.py": {
        "test_assay_details": {
            "name": "test_assay_details",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_factor_details": {
            "name": "test_factor_details",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/toxsign/assays/tests/__init__.py": {},
    "toxsign_v2-master/toxsign/clusters/apps.py": {},
    "toxsign_v2-master/toxsign/clusters/models.py": {
        "get_upload_path": {
            "name": "get_upload_path",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dist_type": [
                    "str",
                    "Optional[str]"
                ],
                "instance": [
                    "str",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Literal",
                    "int",
                    "bool",
                    "Optional[List[dict]]"
                ]
            }
        },
        "Cluster.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.save": {
            "name": "save",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/clusters/urls.py": {},
    "toxsign_v2-master/toxsign/clusters/views.py": {
        "index": {
            "name": "index",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "details": {
            "name": "details",
            "location": 27,
            "return": [
                "dict",
                "str",
                "List[Callable]",
                "int"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[str]",
                    "django.http.HttpRequest"
                ],
                "type": [
                    "int",
                    "raiden.utils.Address",
                    "core.models.User.Key",
                    "str",
                    "topicdb.core.models.collaborationmode.CollaborationMode"
                ],
                "clrid": [
                    "int",
                    "raiden.utils.Address",
                    "core.models.User.Key",
                    "str",
                    "topicdb.core.models.collaborationmode.CollaborationMode"
                ]
            }
        },
        "details_modal": {
            "name": "details_modal",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "Optional[Dict[str, Any]]"
                ],
                "type": [
                    "int",
                    "raiden.utils.Address",
                    "core.models.User.Key",
                    "str",
                    "topicdb.core.models.collaborationmode.CollaborationMode"
                ],
                "clrid": [
                    "int",
                    "raiden.utils.Address",
                    "core.models.User.Key",
                    "str",
                    "topicdb.core.models.collaborationmode.CollaborationMode"
                ]
            }
        },
        "get_graph_data": {
            "name": "get_graph_data",
            "location": 50,
            "return": [
                "django.http.HttpResponse",
                "dict",
                "Optional[bytes]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "dict",
                    "django.http.HttpRequest"
                ],
                "type": [
                    "Optional[str]",
                    "int",
                    "str",
                    "raiden.utils.Address",
                    "topicdb.core.models.collaborationmode.CollaborationMode",
                    "zerver.models.UserProfile"
                ],
                "clrid": [
                    "Optional[str]",
                    "int",
                    "str",
                    "raiden.utils.Address",
                    "topicdb.core.models.collaborationmode.CollaborationMode",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "_format_graph_data": {
            "name": "_format_graph_data",
            "location": 71,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "bool"
                ],
                "title": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "rows": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "type",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "_clean_name": {
            "name": "_clean_name",
            "location": 107,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "string": [
                    "Set[str]",
                    "str",
                    "Optional[str]",
                    "Union[Literal, str]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/clusters/__init__.py": {},
    "toxsign_v2-master/toxsign/clusters/management/commands/load_clusters.py": {
        "load_clusters": {
            "name": "load_clusters",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "data_folder": [
                    "str",
                    "File",
                    "bytes"
                ],
                "distance_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_create_cluster": {
            "name": "_create_cluster",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "cluster_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "distance_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "bool"
                ]
            }
        },
        "_get_cluster_file_paths": {
            "name": "_get_cluster_file_paths",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "Dict[int, Any]",
                "str"
            ],
            "arguments": {
                "data_folder": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 80,
            "return": [
                "app.models.Article"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/clusters/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/clusters/migrations/0002_auto_20200305_1555.py": {},
    "toxsign_v2-master/toxsign/clusters/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/contrib/__init__.py": {},
    "toxsign_v2-master/toxsign/contrib/sites/__init__.py": {},
    "toxsign_v2-master/toxsign/contrib/sites/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "toxsign_v2-master/toxsign/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/contrib/sites/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/genes/admin.py": {},
    "toxsign_v2-master/toxsign/genes/apps.py": {},
    "toxsign_v2-master/toxsign/genes/models.py": {
        "Gene.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/genes/urls.py": {},
    "toxsign_v2-master/toxsign/genes/views.py": {
        "get_gene": {
            "name": "get_gene",
            "location": 43,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "gene_id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "GeneAutocomplete.get_result_value": {
            "name": "get_result_value",
            "location": 30,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Mapping[str, T]",
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "GeneAutocomplete.get_result_label": {
            "name": "get_result_label",
            "location": 33,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Dict[str, Any]",
                    "dict",
                    "tracim.models.auth.User",
                    "tuple",
                    "Dict[str, str]"
                ]
            }
        },
        "GeneAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 36,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/genes/__init__.py": {},
    "toxsign_v2-master/toxsign/genes/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/genes/migrations/0003_pathway.py": {},
    "toxsign_v2-master/toxsign/genes/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/groups/admin.py": {},
    "toxsign_v2-master/toxsign/groups/apps.py": {
        "GroupsAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/groups/forms.py": {
        "GroupCreateForm.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupInvitationForm.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/groups/models.py": {
        "create_custom_group": {
            "name": "create_custom_group",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "int",
                    "bool"
                ],
                "instance": [
                    "str",
                    "bool",
                    "zerver.models.UserProfile",
                    "Dict[str, Dict[str, Any]]"
                ],
                "created": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "save_custom_group": {
            "name": "save_custom_group",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ],
                "instance": [
                    "int",
                    "models.order.Order",
                    "Union[int, str]",
                    "List[str]",
                    "models.seat_group.SeatGroup",
                    "dict"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/groups/urls.py": {},
    "toxsign_v2-master/toxsign/groups/views.py": {
        "DetailView": {
            "name": "DetailView",
            "location": 21,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "models.WalletRequest",
                    "str",
                    "django.http.HttpRequest"
                ],
                "grpid": [
                    "models.WalletRequest",
                    "str"
                ]
            }
        },
        "create_group": {
            "name": "create_group",
            "location": 36,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]",
                "cmk.gui.plugins.views.utils.ABCDataSource",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "send_invitation": {
            "name": "send_invitation",
            "location": 64,
            "return": [
                "str",
                "Tuple[int, float]",
                "Union[int, List[int]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "int",
                    "str"
                ],
                "group_id": [
                    "int",
                    "str"
                ]
            }
        },
        "set_owner": {
            "name": "set_owner",
            "location": 103,
            "return": [
                "str",
                "django.http.HttpResponse",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "group_id": [
                    "int",
                    "str"
                ],
                "new_owner_id": [
                    "int",
                    "str",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 128,
            "return": [
                "str",
                "apistar.http.Header",
                "apistar.http.QueryParam",
                "Dict[str, Any]",
                "Callable",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "request": [
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest",
                    "int",
                    "django.http.requesHttpRequest",
                    "Callable"
                ],
                "group_id": [
                    "int",
                    "str",
                    "transfer.models.ShopID",
                    "Set[int]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "user_to_remove_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/groups/__init__.py": {},
    "toxsign_v2-master/toxsign/groups/migrations/0001_squashed_0002_auto_20190723_1321.py": {},
    "toxsign_v2-master/toxsign/groups/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/groups/tests/factories.py": {},
    "toxsign_v2-master/toxsign/groups/tests/__init__.py": {},
    "toxsign_v2-master/toxsign/jobs/admin.py": {},
    "toxsign_v2-master/toxsign/jobs/apps.py": {},
    "toxsign_v2-master/toxsign/jobs/forms.py": {},
    "toxsign_v2-master/toxsign/jobs/models.py": {
        "auto_delete_file_on_delete": {
            "name": "auto_delete_file_on_delete",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "int",
                    "float",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor"
                ],
                "instance": [
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "mtg_ssm.scryfall.models.ScryCard",
                    "dict"
                ]
            }
        },
        "Job.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/jobs/urls.py": {},
    "toxsign_v2-master/toxsign/jobs/views.py": {
        "DetailView": {
            "name": "DetailView",
            "location": 33,
            "return": [
                "str",
                "salon.models.Stylist",
                "int",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "zam_repondeur.models.Lecture",
                    "int",
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[int, zam_repondeur.models.Amendement]",
                    "zam_repondeur.models.Team"
                ]
            }
        },
        "DownloadView": {
            "name": "DownloadView",
            "location": 55,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "List[str]",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "bool"
                ],
                "pk": [
                    "str"
                ],
                "file_name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "running_jobs_view": {
            "name": "running_jobs_view",
            "location": 65,
            "return": [
                "bool",
                "Optional[Exception]",
                "lunch_buddies.models.polls.Poll",
                "Dict[str, Any]",
                "str",
                "db.models.taxon.FillDataLevel"
            ],
            "arguments": {
                "request": [
                    "http.MITMRequest"
                ]
            }
        },
        "partial_running_jobs_view": {
            "name": "partial_running_jobs_view",
            "location": 71,
            "return": [
                "str",
                "Dict[str, Any]",
                "telegram.utils.AsyncResult",
                "Sequence[Sequence[str]]"
            ],
            "arguments": {
                "request": [
                    "Mapping[str, List[Any]]",
                    "apistar.http.Session",
                    "tildes.models.topic.Topic",
                    "Callable",
                    "Dict[str, bytes]",
                    "list",
                    "dict"
                ]
            }
        },
        "_generate_job_table": {
            "name": "_generate_job_table",
            "location": 76,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "Delete_job": {
            "name": "Delete_job",
            "location": 106,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "models.WalletRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "str"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "int"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/jobs/__init__.py": {},
    "toxsign_v2-master/toxsign/jobs/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/jobs/migrations/0002_auto_20191023_0723.py": {},
    "toxsign_v2-master/toxsign/jobs/migrations/0003_job_type.py": {},
    "toxsign_v2-master/toxsign/jobs/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/ontologies/admin.py": {},
    "toxsign_v2-master/toxsign/ontologies/apps.py": {},
    "toxsign_v2-master/toxsign/ontologies/documents.py": {},
    "toxsign_v2-master/toxsign/ontologies/forms.py": {
        "BiologicalForm.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CellLineForm.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CellForm.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChemicalForm.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DiseaseForm.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentForm.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesForm.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TissueForm.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/ontologies/models.py": {
        "Biological.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellLine.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chemical.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Disease.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Species.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tissue.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/ontologies/urls.py": {},
    "toxsign_v2-master/toxsign/ontologies/views.py": {
        "get_results": {
            "name": "get_results",
            "location": 95,
            "return": [
                "List[List[int]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "query": [
                    "Dict[str, Any]",
                    "Mapping",
                    "str",
                    "type",
                    "Callable"
                ],
                "Model": [
                    "dict",
                    "flask_appbuilder.models.sqla.Model",
                    "Optional[List[str]]"
                ],
                "Document": [
                    "str",
                    "bool",
                    "Sequence",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Optional[int]"
                ]
            }
        },
        "get_restricted_results": {
            "name": "get_restricted_results",
            "location": 109,
            "return": [
                "list",
                "Callable",
                "str"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "List[Tuple[str, str]]",
                    "Iterable",
                    "bool"
                ],
                "Model": [
                    "str"
                ],
                "Document": [
                    "dict",
                    "Iterable[contests.models.User]",
                    "models.Match",
                    "bool",
                    "int"
                ],
                "fieldname": [
                    "str",
                    "bool",
                    "Union[int, bytes]",
                    "type",
                    "Mapping[str, Any]",
                    "Iterable"
                ]
            }
        },
        "DetailView": {
            "name": "DetailView",
            "location": 123,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "OntologyAutocomplete.get_result_value": {
            "name": "get_result_value",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Mapping[str, T]",
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "OntologyAutocomplete.get_result_label": {
            "name": "get_result_label",
            "location": 18,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "abilian.services.security.models.Permission"
                ]
            }
        },
        "CellLineAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 23,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 28,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChemicalAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 33,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiseaseAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 38,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 43,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 48,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TissueAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 53,
            "return": [
                "str",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellLineRestrictedAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 60,
            "return": [
                "bool",
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellRestrictedAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 65,
            "return": [
                "str",
                "zerver.models.Realm",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChemicalRestrictedAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 70,
            "return": [
                "str",
                "zerver.models.Realm",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiseaseRestrictedAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 75,
            "return": [
                "str",
                "zerver.models.Realm",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentRestrictedAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 80,
            "return": [
                "str",
                "zerver.models.Realm",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeciesRestrictedAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 85,
            "return": [
                "str",
                "zerver.models.Realm",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TissueRestrictedAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 90,
            "return": [
                "str",
                "zerver.models.Realm",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/ontologies/__init__.py": {},
    "toxsign_v2-master/toxsign/ontologies/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/ontologies/migrations/0002_auto_20190529_1032.py": {},
    "toxsign_v2-master/toxsign/ontologies/migrations/0003_auto_20190529_1033.py": {},
    "toxsign_v2-master/toxsign/ontologies/migrations/0004_auto_20190529_1033.py": {},
    "toxsign_v2-master/toxsign/ontologies/migrations/0005_auto_20190529_1039.py": {},
    "toxsign_v2-master/toxsign/ontologies/migrations/0007_auto_20190913_0724.py": {},
    "toxsign_v2-master/toxsign/ontologies/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/ontologies/tests/factories.py": {},
    "toxsign_v2-master/toxsign/ontologies/tests/test_model.py": {
        "test_project_model": {
            "name": "test_project_model",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/toxsign/ontologies/tests/__init__.py": {},
    "toxsign_v2-master/toxsign/projects/admin.py": {},
    "toxsign_v2-master/toxsign/projects/apps.py": {},
    "toxsign_v2-master/toxsign/projects/documents.py": {
        "ProjectDocument.get_queryset": {
            "name": "get_queryset",
            "location": 49,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDocument.get_instances_from_related": {
            "name": "get_instances_from_related",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "core.models.User",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {
                "self": [],
                "related_instance": [
                    "str",
                    "bytes",
                    "zerver.models.Realm",
                    "dict"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/projects/forms.py": {
        "ProjectCreateForm.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateForm.is_valid": {
            "name": "is_valid",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectEditForm.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/projects/models.py": {
        "update__permissions_read": {
            "name": "update__permissions_read",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "bool",
                    "List[object]"
                ],
                "instance": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "List[str]"
                ],
                "action": [
                    "str",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "update__permissions_write": {
            "name": "update__permissions_write",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "bool",
                    "List[object]"
                ],
                "instance": [
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "Optional[Any]",
                    "str"
                ],
                "action": [
                    "str",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "auto_delete_project_on_delete": {
            "name": "auto_delete_project_on_delete",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str"
                ],
                "instance": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "change_permission_owner": {
            "name": "change_permission_owner",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "Union[int, str]",
                    "tuple"
                ]
            }
        },
        "Project.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 53,
            "return": [
                "str",
                "bool",
                "set",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.save": {
            "name": "save",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/projects/urls.py": {},
    "toxsign_v2-master/toxsign/projects/views.py": {
        "DetailView": {
            "name": "DetailView",
            "location": 22,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "prjid": [
                    "django.http.HttpRequest",
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "publicize_project": {
            "name": "publicize_project",
            "location": 80,
            "return": [
                "salon.models.Stylist",
                "str",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "prjid": [
                    "apistar.http.Headers",
                    "tildes.models.topic.Topic",
                    "viewer.models.Archive.QuerySet",
                    "dict"
                ]
            }
        },
        "check_view_permissions": {
            "name": "check_view_permissions",
            "location": 105,
            "return": [
                "str",
                "bytes",
                "int",
                "dict",
                "List[Dict[str, Any]]",
                "List[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "user": [
                    "Optional[List[Any]]",
                    "Optional[Callable]",
                    "app.models.Question",
                    "app.models.Position",
                    "str"
                ],
                "project": [
                    "managers.models.Project",
                    "projects.models.Project"
                ],
                "strict": [
                    "str",
                    "app.models.Game",
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "Optional[docker.models.images.Image]",
                    "jfinances.models.TransactionModel",
                    "dict"
                ],
                "allow_superuser": [
                    "Callable",
                    "str",
                    "int",
                    "List[Dict]",
                    "List[str]"
                ]
            }
        },
        "check_edit_permissions": {
            "name": "check_edit_permissions",
            "location": 116,
            "return": [
                "str",
                "bytes",
                "int",
                "dict",
                "List[Dict[str, Any]]",
                "List[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "asgard.models.user.User",
                    "raiden.utils.TokenNetworkAddress",
                    "int"
                ],
                "project": [
                    "zerver.models.UserProfile",
                    "int",
                    "asgard.models.user.User",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "need_owner": [
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "asgard.models.user.User",
                    "models.UserAuth"
                ]
            }
        },
        "get_access_type": {
            "name": "get_access_type",
            "location": 136,
            "return": [
                "str",
                "int",
                "set",
                "dict"
            ],
            "arguments": {
                "user": [
                    "Optional[int]"
                ],
                "project": [
                    "Type['Declared']",
                    "core.entities.game.Game"
                ]
            }
        },
        "EditProjectView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 42,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditProjectView.get_object": {
            "name": "get_object",
            "location": 48,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "CreateProjectView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 61,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectView.form_valid": {
            "name": "form_valid",
            "location": 74,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Optional[float]",
                    "str"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/projects/__init__.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0002_auto_20190529_1245.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0003_auto_20190708_0834.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0004_auto_20190717_1055.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0005_auto_20190717_1225.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0006_project_superproject.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0007_auto_20190905_1324.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0008_auto_20191030_1635.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0009_auto_20191106_1244.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0010_auto_20191112_0949_squashed_0011_auto_20191112_0951.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/0011_auto_20211104_1437.py": {},
    "toxsign_v2-master/toxsign/projects/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/projects/tests/factories.py": {
        "ProjectFactory.read_groups": {
            "name": "read_groups",
            "location": 16,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "Tuple[int, str]",
                    "Iterator[int]",
                    "Iterable[int]"
                ],
                "extracted": [
                    "int",
                    "Tuple[int, str]",
                    "Iterator[int]",
                    "Iterable[int]"
                ]
            }
        },
        "ProjectFactory.edit_groups": {
            "name": "edit_groups",
            "location": 27,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "Tuple[int, str]",
                    "Iterator[int]",
                    "Iterable[int]"
                ],
                "extracted": [
                    "int",
                    "Tuple[int, str]",
                    "Iterator[int]",
                    "Iterable[int]"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/projects/tests/test_model.py": {
        "test_project_model": {
            "name": "test_project_model",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/toxsign/projects/tests/test_urls.py": {
        "test_details": {
            "name": "test_details",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/toxsign/projects/tests/test_views.py": {
        "TestProjectDetailView.test_details_private_anonymous": {
            "name": "test_details_private_anonymous",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectDetailView.test_details_private_logged": {
            "name": "test_details_private_logged",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        },
        "TestProjectDetailView.test_detail_read_groups": {
            "name": "test_detail_read_groups",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict"
                ],
                "django_user_model": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]"
                ]
            }
        },
        "TestProjectDetailView.test_details_public": {
            "name": "test_details_public",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectUpdateView.test_update_anonymous": {
            "name": "test_update_anonymous",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectUpdateView.test_update_edit_groups": {
            "name": "test_update_edit_groups",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Optional[float]",
                    "int"
                ],
                "django_user_model": [
                    "str",
                    "float"
                ]
            }
        },
        "TestProjectUpdateView.test_update_logged": {
            "name": "test_update_logged",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Optional[float]",
                    "int"
                ],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        },
        "TestProjectUpdateView.test_update_logged_public": {
            "name": "test_update_logged_public",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Optional[float]",
                    "int"
                ],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/projects/tests/__init__.py": {},
    "toxsign_v2-master/toxsign/scripts/apps.py": {},
    "toxsign_v2-master/toxsign/scripts/data.py": {
        "prepare_homolog_data": {
            "name": "prepare_homolog_data",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "force": []
            }
        },
        "prepare_cluster_data": {
            "name": "prepare_cluster_data",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "prepare_tools_env": {
            "name": "prepare_tools_env",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "setup_files": {
            "name": "setup_files",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "signature_id": [],
                "index_files": [],
                "need_move_files": []
            }
        },
        "index_genes": {
            "name": "index_genes",
            "location": 104,
            "return": [],
            "arguments": {
                "signature": [],
                "new_path": [],
                "new_unix_path": []
            }
        },
        "move_files": {
            "name": "move_files",
            "location": 125,
            "return": [],
            "arguments": {
                "signature": [],
                "new_path": [],
                "new_unix_path": []
            }
        },
        "change_status": {
            "name": "change_status",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": []
            }
        },
        "setup_cluster": {
            "name": "setup_cluster",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_id": []
            }
        },
        "_process_cluster_conditions": {
            "name": "_process_cluster_conditions",
            "location": 183,
            "return": [],
            "arguments": {
                "condition_file": []
            }
        },
        "_process_condition_line": {
            "name": "_process_condition_line",
            "location": 201,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "_process_data": {
            "name": "_process_data",
            "location": 218,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_process_cluster_signature": {
            "name": "_process_cluster_signature",
            "location": 225,
            "return": [],
            "arguments": {
                "signature_file": []
            }
        },
        "_generate_values": {
            "name": "_generate_values",
            "location": 244,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "_extract_values": {
            "name": "_extract_values",
            "location": 262,
            "return": [],
            "arguments": {
                "values": [],
                "file": [],
                "gene_type": [],
                "expression_value": []
            }
        },
        "_prepare_values": {
            "name": "_prepare_values",
            "location": 282,
            "return": [],
            "arguments": {
                "values": [],
                "file": [],
                "gene_type": []
            }
        },
        "_write_gene_file": {
            "name": "_write_gene_file",
            "location": 312,
            "return": [],
            "arguments": {
                "gene_values": [],
                "path": []
            }
        },
        "_format_values": {
            "name": "_format_values",
            "location": 319,
            "return": [],
            "arguments": {
                "gene_values": []
            }
        },
        "_download_datafiles": {
            "name": "_download_datafiles",
            "location": 329,
            "return": [],
            "arguments": {
                "dest_dir": [],
                "url_list": [],
                "force": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/processing.py": {
        "zip_results": {
            "name": "zip_results",
            "location": 27,
            "return": [],
            "arguments": {
                "path_to_folder": [],
                "archive_name": []
            }
        },
        "run_distance": {
            "name": "run_distance",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "signature_id": [],
                "user_id": []
            }
        },
        "run_enrich": {
            "name": "run_enrich",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "signature_id": []
            }
        },
        "run_cluster_dist": {
            "name": "run_cluster_dist",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "signature_id": [],
                "clustering_type": []
            }
        },
        "run_predict": {
            "name": "run_predict",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "signature_id": [],
                "model_id": []
            }
        },
        "_prepare_temp_folder": {
            "name": "_prepare_temp_folder",
            "location": 302,
            "return": [],
            "arguments": {
                "request_id": [],
                "signature": [],
                "additional_signatures": [],
                "add_RData": [],
                "add_Homolog": [],
                "predict_model": [],
                "add_Cluster_Method": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/__init__.py": {},
    "toxsign_v2-master/toxsign/scripts/management/commands/classify_data.py": {
        "classify_data": {
            "name": "classify_data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "_get_drugmatrix": {
            "name": "_get_drugmatrix",
            "location": 35,
            "return": [],
            "arguments": {
                "admin_user": []
            }
        },
        "_get_tg_gates": {
            "name": "_get_tg_gates",
            "location": 51,
            "return": [],
            "arguments": {
                "admin_user": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/load_all.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/load_carcinogenome.py": {
        "import_superproject": {
            "name": "import_superproject",
            "location": 21,
            "return": [],
            "arguments": {
                "dict_superproject": [],
                "user": [],
                "key": []
            }
        },
        "import_project": {
            "name": "import_project",
            "location": 43,
            "return": [],
            "arguments": {
                "dict": [],
                "user": [],
                "key": []
            }
        },
        "import_assay": {
            "name": "import_assay",
            "location": 70,
            "return": [],
            "arguments": {
                "dict": [],
                "user": [],
                "key": []
            }
        },
        "import_factor": {
            "name": "import_factor",
            "location": 109,
            "return": [],
            "arguments": {
                "dict": [],
                "user": [],
                "key": []
            }
        },
        "import_signature": {
            "name": "import_signature",
            "location": 162,
            "return": [],
            "arguments": {
                "dict": [],
                "user": [],
                "key": []
            }
        },
        "publicize_project": {
            "name": "publicize_project",
            "location": 235,
            "return": [],
            "arguments": {
                "project_dict": []
            }
        },
        "import_data_from_list": {
            "name": "import_data_from_list",
            "location": 240,
            "return": [],
            "arguments": {
                "signaturefile": []
            }
        },
        "launch_import": {
            "name": "launch_import",
            "location": 278,
            "return": [],
            "arguments": {
                "signature_data_folder": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/load_data.py": {
        "launch_data": {
            "name": "launch_data",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "bson_folder": [
                    "str"
                ],
                "signature_data_folder": [
                    "str",
                    "int"
                ],
                "admin_mail": [
                    "str",
                    "int"
                ],
                "admin_password": [
                    "str",
                    "int"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/load_genes.py": {
        "download_datafiles": {
            "name": "download_datafiles",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "concat_files": {
            "name": "concat_files",
            "location": 48,
            "return": [
                "str",
                "games.models.Game",
                "Optional[str]"
            ],
            "arguments": {
                "dirpath": [
                    "str",
                    "List[str]"
                ],
                "use_dl": [
                    "Dict[str, str]",
                    "List[str]",
                    "Callable",
                    "bool",
                    "dict"
                ],
                "file_list": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "insertCollections": {
            "name": "insertCollections",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "genefile": [
                    "str",
                    "Callable"
                ]
            }
        },
        "check_file": {
            "name": "check_file",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "populate_genes": {
            "name": "populate_genes",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Command.handle": {
            "name": "handle",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/load_ontologies.py": {
        "get_children_loop": {
            "name": "get_children_loop",
            "location": 29,
            "return": [
                "str",
                "int",
                "Type[Any]"
            ],
            "arguments": {
                "ontology": [
                    "int",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Union[str, int]]",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "temp_process": {
            "name": "temp_process",
            "location": 44,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "ontology": [
                    "str"
                ],
                "model": [
                    "str",
                    "int",
                    "List[list]"
                ]
            }
        },
        "temp_download_ontology": {
            "name": "temp_download_ontology",
            "location": 53,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "onto": [
                    "str"
                ],
                "lock": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "launch_import": {
            "name": "launch_import",
            "location": 94,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {}
        },
        "Command.handle": {
            "name": "handle",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/load_pathways.py": {
        "cleanup": {
            "name": "cleanup",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "dirpath": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "specie": [
                    "str"
                ],
                "release": [
                    "int",
                    "float",
                    "core.audio.audio_backend.AudioBackend",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "download_specie_file": {
            "name": "download_specie_file",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Type]",
                "type",
                "topicdb.core.models.language.Language",
                "Tuple[List[str], List[str]]"
            ],
            "arguments": {
                "specie": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "int",
                    "Iterable[str]"
                ],
                "url_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "games.models.Game",
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, str]"
                ]
            }
        },
        "process_pathway_file": {
            "name": "process_pathway_file",
            "location": 63,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "path": [
                    "str",
                    "dict"
                ]
            }
        },
        "create_pathway": {
            "name": "create_pathway",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "Sequence[str]",
                    "str",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "get_urls": {
            "name": "get_urls",
            "location": 97,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "base_url_layout": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "process_pathways": {
            "name": "process_pathways",
            "location": 107,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {}
        },
        "Command.handle": {
            "name": "handle",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/load_prediction_models.py": {
        "populate_prediction_models": {
            "name": "populate_prediction_models",
            "location": 15,
            "return": [
                "Callable",
                "Iterable[bytes]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Callable",
                    "bytes",
                    "Union[str, dict]"
                ]
            }
        },
        "extract_models_stats": {
            "name": "extract_models_stats",
            "location": 76,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "Optional[Dict[str, Any]]",
                "float",
                "Optional[Dict]",
                "List[str]"
            ],
            "arguments": {
                "folder": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "type": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/load_tools.py": {
        "populate_default_tools": {
            "name": "populate_default_tools",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_create_category": {
            "name": "_create_category",
            "location": 131,
            "return": [
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "supersemodels.core.Database",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "description": [
                    "str",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "supersemodels.core.Database",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "_create_tag": {
            "name": "_create_tag",
            "location": 136,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "word": [
                    "Optional[str]",
                    "str",
                    "float",
                    "Union[str, List[str]]",
                    "models.KippoProject"
                ],
                "slug": [
                    "Optional[str]",
                    "str",
                    "float",
                    "Union[str, List[str]]",
                    "models.KippoProject"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/publicize.py": {
        "publicize": {
            "name": "publicize",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/_assays.py": {
        "process_assays": {
            "name": "process_assays",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "int"
                ],
                "study_dict": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "user_dict": [
                    "list",
                    "int",
                    "List[str]",
                    "List[Dict[Any, str]]",
                    "List[Dict[int, str]]"
                ],
                "project_dict": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_assay_dict": {
            "name": "get_assay_dict",
            "location": 39,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_create_fake_assay": {
            "name": "_create_fake_assay",
            "location": 48,
            "return": [
                "bool",
                "zerver.models.Realm",
                "int",
                "Optional[str]",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "assay_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "user_dict": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_create_assay": {
            "name": "_create_assay",
            "location": 51,
            "return": [
                "int",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "assay_data": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "List[str]",
                    "Union[float, str]"
                ],
                "study_dict": [
                    "str",
                    "list",
                    "int"
                ],
                "user_dict": [
                    "int",
                    "bool",
                    "transfer.models.ArticleID"
                ],
                "project_dict": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "bool",
                    "Dict[str, object]"
                ],
                "onto_dict": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/_factors.py": {
        "process_factors": {
            "name": "process_factors",
            "location": 7,
            "return": [],
            "arguments": {
                "path": [],
                "user_dict": [],
                "assay_dict": []
            }
        },
        "get_factor_dict": {
            "name": "get_factor_dict",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "get_corres_dict": {
            "name": "get_corres_dict",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "_create_fake_factor": {
            "name": "_create_fake_factor",
            "location": 63,
            "return": [],
            "arguments": {
                "factor_id": [],
                "user_dict": []
            }
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "_create_factor": {
            "name": "_create_factor",
            "location": 70,
            "return": [],
            "arguments": {
                "factor_data": [],
                "user_dict": [],
                "assay_dict": []
            }
        },
        "_create_sub_factor": {
            "name": "_create_sub_factor",
            "location": 82,
            "return": [],
            "arguments": {
                "factor_data": [],
                "user_dict": [],
                "factor_dict": [],
                "onto_dict": []
            }
        },
        "_get_factor_name": {
            "name": "_get_factor_name",
            "location": 99,
            "return": [],
            "arguments": {
                "factor_data": []
            }
        },
        "_get_dose": {
            "name": "_get_dose",
            "location": 110,
            "return": [],
            "arguments": {
                "factor_data": []
            }
        },
        "_get_exposure_duration": {
            "name": "_get_exposure_duration",
            "location": 140,
            "return": [],
            "arguments": {
                "factor_data": []
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/_ontologies.py": {
        "get_ontology": {
            "name": "get_ontology",
            "location": 3,
            "return": [
                "int",
                "Dict[str, bool]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "value_dict": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[str]"
                ],
                "field_name": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[str]"
                ],
                "onto_dict": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "dict"
                ]
            }
        },
        "get_ontology_slug": {
            "name": "get_ontology_slug",
            "location": 46,
            "return": [
                "Mapping[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "value_dict": [
                    "str",
                    "Dict[str, Any]"
                ],
                "field_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]"
                ],
                "slug_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]"
                ],
                "onto_dict": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "dict"
                ],
                "filter": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/_projects.py": {
        "process_projects": {
            "name": "process_projects",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "user_dict": [
                    "list",
                    "List[str]",
                    "Tuple[str]",
                    "dict",
                    "Set[str]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "get_project_dict": {
            "name": "get_project_dict",
            "location": 34,
            "return": [
                "dict",
                "Dict[str, Any]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_create_empty_project": {
            "name": "_create_empty_project",
            "location": 43,
            "return": [
                "str",
                "bool",
                "Callable",
                "models.Payment"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int",
                    "bson.ObjectId",
                    "projects.project_models.Project",
                    "Tuple[int, str]",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "user_dict": [
                    "str",
                    "int",
                    "bson.ObjectId",
                    "projects.project_models.Project",
                    "Tuple[int, str]",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_create_project": {
            "name": "_create_project",
            "location": 46,
            "return": [
                "bool",
                "int",
                "str",
                "Tuple[int, int]",
                "dict"
            ],
            "arguments": {
                "project_data": [
                    "Optional[Dict]",
                    "bool",
                    "bytes",
                    "tuple",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "user_dict": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int",
                    "Union[bytes, str]"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/_signatures.py": {
        "process_signatures": {
            "name": "process_signatures",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "int"
                ],
                "user_dict": [
                    "list",
                    "List[str]",
                    "List[Tuple[Any, Any]]",
                    "bool",
                    "List[cleanslate.models.SourceRecord]"
                ],
                "corresp_dict": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "populate_signatures": {
            "name": "populate_signatures",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "file_root": [
                    "str",
                    "BinaryIO",
                    "bool",
                    "IO[Any]",
                    "List[str]"
                ]
            }
        },
        "_create_fake_signature": {
            "name": "_create_fake_signature",
            "location": 50,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "signature_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "user_dict": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_create_signature": {
            "name": "_create_signature",
            "location": 56,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "int",
                "object",
                "bool",
                "paradigm.signatures.Base"
            ],
            "arguments": {
                "signature_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ],
                "user_dict": [
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "int",
                    "zerver.models.UserProfile"
                ],
                "corresp_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, object]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[Hashable, int]",
                    "int"
                ],
                "onto_dict": [
                    "dict",
                    "boucanpy.core.PaginationQS",
                    "OrderedDict",
                    "Iterable[Tuple[Hashable, Any]]"
                ]
            }
        },
        "_populate_signature": {
            "name": "_populate_signature",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "signature": [
                    "str"
                ],
                "file_root": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_numerical_values": {
            "name": "_get_numerical_values",
            "location": 120,
            "return": [
                "float",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "type": [
                    "str",
                    "bool",
                    "AnyStr",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Mapping[Any, str]",
                    "Dict[str, int]",
                    "Optional[Any]",
                    "bool"
                ],
                "default": [
                    "str",
                    "bool",
                    "AnyStr",
                    "Optional[str]"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/_studies.py": {
        "process_studies": {
            "name": "process_studies",
            "location": 3,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/_users.py": {
        "process_users": {
            "name": "process_users",
            "location": 4,
            "return": [
                "amundsen_application.models.user.User",
                "bool",
                "arxiv.users.domain.User",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "admin_mail": [
                    "str",
                    "Optional[str]"
                ],
                "admin_password": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_user_dict": {
            "name": "get_user_dict",
            "location": 19,
            "return": [
                "dict",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]",
                "story.models.Author"
            ],
            "arguments": {}
        },
        "get_owner": {
            "name": "get_owner",
            "location": 26,
            "return": [
                "str",
                "zerver.models.Realm",
                "Dict[str, Any]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "current_owner": [
                    "str",
                    "models.User",
                    "dict",
                    "bool",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "list"
                ],
                "user_dict": [
                    "str",
                    "models.User",
                    "dict",
                    "bool",
                    "users.models.JustfixUser",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "_create_user": {
            "name": "_create_user",
            "location": 32,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet",
                "asgard.backends.users.UsersBackend"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "src.domain.entity.user.User"
                ]
            }
        },
        "_create_super_user": {
            "name": "_create_super_user",
            "location": 48,
            "return": [
                "zam_repondeur.models.Lecture",
                "user_models.User",
                "app.models.user.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "discord.User",
                "core.models.UserPreferences",
                "asgard.backends.users.UsersBackend"
            ],
            "arguments": {
                "admin_mail": [
                    "str"
                ],
                "admin_password": [
                    "str"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/scripts/management/commands/__init__.py": {},
    "toxsign_v2-master/toxsign/signatures/admin.py": {},
    "toxsign_v2-master/toxsign/signatures/apps.py": {},
    "toxsign_v2-master/toxsign/signatures/documents.py": {
        "SignatureDocument.get_queryset": {
            "name": "get_queryset",
            "location": 96,
            "return": [
                "bool",
                "bytes",
                "Iterable[Union[Any, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureDocument.get_instances_from_related": {
            "name": "get_instances_from_related",
            "location": 110,
            "return": [
                "Iterable[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "related_instance": [
                    "int",
                    "dict"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/signatures/forms.py": {
        "SignatureCreateForm.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureEditForm.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/signatures/models.py": {
        "auto_delete_signature_on_delete": {
            "name": "auto_delete_signature_on_delete",
            "location": 170,
            "return": [
                "int",
                "Set[str]",
                "Optional[bool]",
                "tuple",
                "DefaultDict",
                "Set[VT]"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "Type",
                    "bytes",
                    "int"
                ],
                "instance": [
                    "str",
                    "bytearray",
                    "zam_repondeur.models.phase.Phase"
                ]
            }
        },
        "Signature.__str__": {
            "name": "__str__",
            "location": 119,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signature.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 122,
            "return": [
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signature.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Signature.save": {
            "name": "save",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/signatures/urls.py": {},
    "toxsign_v2-master/toxsign/signatures/views.py": {
        "DetailView": {
            "name": "DetailView",
            "location": 59,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "sigid": [
                    "str",
                    "int"
                ]
            }
        },
        "SignatureToolAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 28,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureToolAutocomplete.get_result_value": {
            "name": "get_result_value",
            "location": 53,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Mapping[str, T]",
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "SignatureToolAutocomplete.get_result_label": {
            "name": "get_result_label",
            "location": 56,
            "return": [
                "str",
                "models.Name",
                "Optional[str]",
                "users.models.CustomUser",
                "type",
                "Dict[str, object]",
                "list"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "zerver.models.UserProfile",
                    "zerver.models.Stream",
                    "str"
                ]
            }
        },
        "EditSignatureView.get_permission_object": {
            "name": "get_permission_object",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditSignatureView.get_object": {
            "name": "get_object",
            "location": 89,
            "return": [
                "Set[str]",
                "str",
                "List[str]",
                "set",
                "int"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "EditSignatureView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 92,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateSignatureView.get_permission_object": {
            "name": "get_permission_object",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateSignatureView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 113,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateSignatureView.form_valid": {
            "name": "form_valid",
            "location": 139,
            "return": [
                "bool",
                "rl_algorithms.utils.config.ConfigDict",
                "Mapping[str, Any]",
                "int",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "dict"
                ]
            }
        },
        "CreateSignatureView.get_success_url": {
            "name": "get_success_url",
            "location": 144,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/signatures/__init__.py": {},
    "toxsign_v2-master/toxsign/signatures/management/commands/check_signatures.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bool"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/signatures/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0002_auto_20190708_0834.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0003_remove_signature_status.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0005_auto_20191008_1135.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0006_signature_expression_values_file.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0007_auto_20191030_1637.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0008_auto_20191104_0923.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0009_auto_20191108_0906.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0010_signature_cell_line_slug.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0011_auto_20200403_1000.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/0012_auto_20211104_1437.py": {},
    "toxsign_v2-master/toxsign/signatures/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/signatures/tests/factories.py": {},
    "toxsign_v2-master/toxsign/signatures/tests/test_model.py": {
        "test_signature_model": {
            "name": "test_signature_model",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/toxsign/signatures/tests/test_urls.py": {
        "test_details": {
            "name": "test_details",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/toxsign/signatures/tests/test_views.py": {
        "get_create_form": {
            "name": "get_create_form",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "tsx_id": [
                    "int",
                    "bool",
                    "List[tracim.models.data.Content]"
                ]
            }
        },
        "get_update_form": {
            "name": "get_update_form",
            "location": 139,
            "return": [
                "str",
                "Optional[Iterable[str]]",
                "baseplate.lib.metrics.Client"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "tsx_id": [
                    "int",
                    "bool",
                    "List[tracim.models.data.Content]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "tsx_id": [
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "dict",
                    "List[int]",
                    "Iterable[str]"
                ],
                "form": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str"
                ],
                "factor": [
                    "str",
                    "Optional[arxiv.submission.Client]",
                    "mediaarchiver.models.Account",
                    "Optional[str]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [
                    "str",
                    "models.Workspace",
                    "dict"
                ],
                "tsx_id": [
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "dict",
                    "Callable[[str], str]",
                    "str"
                ],
                "form": [
                    "str",
                    "Optional[str]"
                ],
                "new_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestSignatureCreateView.test_create_owner": {
            "name": "test_create_owner",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [],
                "django_user_model": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]",
                    "grpy.core.models.Grouping"
                ]
            }
        },
        "TestSignatureDetailView.test_details_private_anonymous": {
            "name": "test_details_private_anonymous",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestSignatureDetailView.test_details_private_logged": {
            "name": "test_details_private_logged",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        },
        "TestSignatureDetailView.test_detail_read_groups": {
            "name": "test_detail_read_groups",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "django_user_model": [
                    "str",
                    "grpy.core.models.Grouping",
                    "Optional[str]",
                    "Union[int, str]"
                ]
            }
        },
        "TestSignatureDetailView.test_details_public": {
            "name": "test_details_public",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestSignatureUpdateView.test_update_anonymous": {
            "name": "test_update_anonymous",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestSignatureUpdateView.test_update_edit_groups": {
            "name": "test_update_edit_groups",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "core.models.Recipe"
                ],
                "django_user_model": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSignatureUpdateView.test_update_logged": {
            "name": "test_update_logged",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "core.models.Recipe"
                ],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        },
        "TestSignatureUpdateView.test_update_logged_public": {
            "name": "test_update_logged_public",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "core.models.Recipe"
                ],
                "django_user_model": [
                    "str",
                    "aioguardian.Client"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/signatures/tests/__init__.py": {},
    "toxsign_v2-master/toxsign/superprojects/admin.py": {},
    "toxsign_v2-master/toxsign/superprojects/apps.py": {},
    "toxsign_v2-master/toxsign/superprojects/documents.py": {},
    "toxsign_v2-master/toxsign/superprojects/forms.py": {
        "SuperprojectCreateForm.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/superprojects/models.py": {
        "Superproject.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superproject.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 21,
            "return": [
                "str",
                "dict",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Superproject.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Superproject.save": {
            "name": "save",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/superprojects/urls.py": {},
    "toxsign_v2-master/toxsign/superprojects/views.py": {
        "DetailView": {
            "name": "DetailView",
            "location": 21,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "spjid": [
                    "str",
                    "int"
                ]
            }
        },
        "edit_superproject": {
            "name": "edit_superproject",
            "location": 42,
            "return": [
                "Optional[str]",
                "int",
                "Dict[str, Any]",
                "Dict[int, str]",
                "str",
                "List[DefaultDict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ],
                "spjid": [
                    "str",
                    "int"
                ]
            }
        },
        "create_superproject": {
            "name": "create_superproject",
            "location": 72,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]",
                "Optional[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "unlink_project": {
            "name": "unlink_project",
            "location": 98,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "List[projects.source_item_models.DirectoryListEntry]",
                "dict",
                "Dict[str, str]",
                "str",
                "jumeaux.models.Request"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "spjid": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "prjid": [
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/superprojects/__init__.py": {},
    "toxsign_v2-master/toxsign/superprojects/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/superprojects/migrations/0002_superproject_contact_mail.py": {},
    "toxsign_v2-master/toxsign/superprojects/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/taskapp/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "cron_cleanup": {
            "name": "cron_cleanup",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "raiden.utils.Address"
                ]
            }
        },
        "cleanup_jobs": {
            "name": "cleanup_jobs",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "cleanup_failed_jobs": {
            "name": "cleanup_failed_jobs",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "CeleryAppConfig.ready": {
            "name": "ready",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/taskapp/__init__.py": {},
    "toxsign_v2-master/toxsign/templatetags/custom.py": {
        "onto_value": {
            "name": "onto_value",
            "location": 8,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "List[Dict[str, Any]]",
                "Optional[float]",
                "int",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str, int, float]",
                    "bytes"
                ],
                "substitute": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "Union[float, int, str]"
                ]
            }
        },
        "url_replace": {
            "name": "url_replace",
            "location": 20,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "float",
                    "type"
                ],
                "field": [
                    "str"
                ],
                "value": [
                    "dict",
                    "Dict[str, Any]",
                    "django.db.models.Model",
                    "str"
                ]
            }
        },
        "get_arrow": {
            "name": "get_arrow",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "List[int]",
                    "Optional[Any]",
                    "str",
                    "bool",
                    "List[dict]"
                ]
            }
        },
        "get_dict_value": {
            "name": "get_dict_value",
            "location": 57,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "dict": [
                    "str",
                    "Optional[str]",
                    "Iterable",
                    "Optional[Iterable]",
                    "dict"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Iterable",
                    "Optional[Iterable]",
                    "dict"
                ]
            }
        },
        "get_model_group_data": {
            "name": "get_model_group_data",
            "location": 64,
            "return": [
                "str",
                "Sequence[str]",
                "Optional[str]"
            ],
            "arguments": {
                "dict": [
                    "dict",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "Dict[str, float]",
                    "Dict[str, Any]"
                ],
                "group_id": [
                    "dict",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "Dict[str, float]",
                    "Dict[str, Any]"
                ],
                "field": [
                    "str",
                    "Optional[str]",
                    "int",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "get_chemicals": {
            "name": "get_chemicals",
            "location": 71,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "signature": [
                    "float",
                    "int"
                ]
            }
        },
        "get_chemicals_es": {
            "name": "get_chemicals_es",
            "location": 86,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "signature": [
                    "int",
                    "bytes",
                    "float",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ]
            }
        },
        "show_username": {
            "name": "show_username",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "entity": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/templatetags/__init__.py": {},
    "toxsign_v2-master/toxsign/tools/admin.py": {
        "AdminForm.is_valid": {
            "name": "is_valid",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentTypeAdminForm.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/tools/apps.py": {},
    "toxsign_v2-master/toxsign/tools/forms.py": {
        "SignatureChoiceField.label_from_instance": {
            "name": "label_from_instance",
            "location": 14,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "app.models.Tweet"
                ]
            }
        },
        "default_form.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "signature_compute_form.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "signature_cluster_compute_form.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "prediction_compute_form.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/tools/models.py": {
        "get_model_upload_path": {
            "name": "get_model_upload_path",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "instance": [
                    "str"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_association_upload_path": {
            "name": "get_association_upload_path",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "instance": [
                    "str"
                ],
                "filename": [
                    "bool",
                    "str"
                ]
            }
        },
        "auto_delete_signature_on_delete": {
            "name": "auto_delete_signature_on_delete",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "Type",
                    "bytes",
                    "int"
                ],
                "instance": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentType.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str",
                "int",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tool.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionModel.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/tools/urls.py": {},
    "toxsign_v2-master/toxsign/tools/views.py": {
        "distance_analysis_tool": {
            "name": "distance_analysis_tool",
            "location": 62,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "distance_analysis_results": {
            "name": "distance_analysis_results",
            "location": 102,
            "return": [],
            "arguments": {
                "request": [],
                "job_id": []
            }
        },
        "distance_analysis_table": {
            "name": "distance_analysis_table",
            "location": 113,
            "return": [],
            "arguments": {
                "request": [],
                "job_id": []
            }
        },
        "functional_analysis_tool": {
            "name": "functional_analysis_tool",
            "location": 198,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "functional_analysis_results": {
            "name": "functional_analysis_results",
            "location": 234,
            "return": [],
            "arguments": {
                "request": [],
                "job_id": []
            }
        },
        "functional_analysis_full_table": {
            "name": "functional_analysis_full_table",
            "location": 246,
            "return": [],
            "arguments": {
                "request": [],
                "job_id": []
            }
        },
        "functional_analysis_partial_table": {
            "name": "functional_analysis_partial_table",
            "location": 318,
            "return": [],
            "arguments": {
                "request": [],
                "job_id": [],
                "type": []
            }
        },
        "prediction_tool": {
            "name": "prediction_tool",
            "location": 413,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "cluster_dist_tool": {
            "name": "cluster_dist_tool",
            "location": 451,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "cluster_dist_results": {
            "name": "cluster_dist_results",
            "location": 493,
            "return": [],
            "arguments": {
                "request": [],
                "job_id": []
            }
        },
        "prediction_tool_results": {
            "name": "prediction_tool_results",
            "location": 537,
            "return": [],
            "arguments": {
                "request": [],
                "job_id": []
            }
        },
        "_format_graph_data": {
            "name": "_format_graph_data",
            "location": 594,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_create_job": {
            "name": "_create_job",
            "location": 617,
            "return": [],
            "arguments": {
                "title": [],
                "owner": [],
                "task_id": [],
                "tool": [],
                "type": []
            }
        },
        "_paginate_table": {
            "name": "_paginate_table",
            "location": 631,
            "return": [],
            "arguments": {
                "dataframe": [],
                "page": [],
                "max_size": [],
                "is_sig": []
            }
        },
        "IndexView.get_queryset": {
            "name": "get_queryset",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexView.get_context_data": {
            "name": "get_context_data",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/tools/__init__.py": {},
    "toxsign_v2-master/toxsign/tools/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/tools/migrations/0002_auto_20190807_1139.py": {},
    "toxsign_v2-master/toxsign/tools/migrations/0003_auto_20190807_1139.py": {
        "load_args_type": {
            "name": "load_args_type",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "server.models.Bike"
                ],
                "schema_editor": [
                    "Callable",
                    "Type[Any]",
                    "List[str]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/tools/migrations/0004_auto_20190812_1432.py": {},
    "toxsign_v2-master/toxsign/tools/migrations/0006_auto_20191010_0751.py": {},
    "toxsign_v2-master/toxsign/tools/migrations/0007_auto_20191023_1058.py": {},
    "toxsign_v2-master/toxsign/tools/migrations/0008_predictionmodel.py": {},
    "toxsign_v2-master/toxsign/tools/migrations/0009_predictionmodel_parameters.py": {},
    "toxsign_v2-master/toxsign/tools/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 10,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/users/admin.py": {},
    "toxsign_v2-master/toxsign/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/users/urls.py": {},
    "toxsign_v2-master/toxsign/users/views.py": {
        "dismiss_notification": {
            "name": "dismiss_notification",
            "location": 111,
            "return": [
                "str",
                "Tuple[int, float]",
                "Union[int, List[int]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "notification_id": [
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "accept_group_invitation": {
            "name": "accept_group_invitation",
            "location": 130,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "zerver.models.UserProfile",
                    "int",
                    "str",
                    "zam_repondeur.models.Team"
                ],
                "notification_id": [
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "is_viewable": {
            "name": "is_viewable",
            "location": 149,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "entity": [
                    "str",
                    "dict",
                    "django.db.models.Model"
                ],
                "user": [
                    "bool",
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]"
                ]
            }
        },
        "UserDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 27,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 91,
            "return": [
                "bool",
                "zerver.models.Realm",
                "Optional[zerver.models.UserProfile]",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 94,
            "return": [
                "str",
                "bool",
                "models.User",
                "arxiv.users.domain.User",
                "app.models.GameMember",
                "app.models.course.Course"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/users/__init__.py": {},
    "toxsign_v2-master/toxsign/users/migrations/0001_initial.py": {},
    "toxsign_v2-master/toxsign/users/migrations/0002_auto_20190523_0800.py": {},
    "toxsign_v2-master/toxsign/users/migrations/0003_user_projects.py": {},
    "toxsign_v2-master/toxsign/users/migrations/0004_auto_20190523_1412.py": {},
    "toxsign_v2-master/toxsign/users/migrations/0005_notification.py": {},
    "toxsign_v2-master/toxsign/users/migrations/0006_notification_created_at.py": {},
    "toxsign_v2-master/toxsign/users/migrations/__init__.py": {},
    "toxsign_v2-master/toxsign/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toxsign_v2-master/toxsign/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "toxsign_v2-master/toxsign/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str",
                    "int",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "toxsign_v2-master/toxsign/users/tests/__init__.py": {}
}
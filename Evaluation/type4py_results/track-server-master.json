{
    "track-server-master/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "track-server-master/setup.py": {},
    "track-server-master/api/admin.py": {},
    "track-server-master/api/apps.py": {},
    "track-server-master/api/urls.py": {},
    "track-server-master/api/views.py": {
        "ActiveRecordView.get": {
            "name": "get",
            "location": 122,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "ActiveRecordView.post": {
            "name": "post",
            "location": 132,
            "return": [
                "str",
                "List[str]",
                "List[Dict[str, Any]]",
                "Dict[int, dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest"
                ]
            }
        },
        "ReportWeekView.get": {
            "name": "get",
            "location": 173,
            "return": [
                "str",
                "bool",
                "models.Dashboard",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "dict"
                ],
                "year": [
                    "int",
                    "str",
                    "django.db.models.query.QuerySet",
                    "Optional[int]"
                ],
                "week_number": [
                    "django.http.HttpRequest",
                    "int",
                    "str"
                ]
            }
        },
        "ReportCategoryWeekView.get": {
            "name": "get",
            "location": 197,
            "return": [
                "str",
                "bool",
                "models.Dashboard",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "dict"
                ],
                "category": [
                    "str",
                    "aiohttp.web.Request"
                ],
                "year": [
                    "bool",
                    "aiohttp.web.Request",
                    "django.db.models.query.QuerySet",
                    "float",
                    "django.http.HttpRequest",
                    "Request"
                ],
                "week_number": [
                    "str",
                    "grouper.models.user.User",
                    "aiohttp.web.Request",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "CategoryViewSet.CategorySerializer.create": {
            "name": "create",
            "location": 36,
            "return": [
                "Iterable[Union[Any, int]]",
                "bytes",
                "Callable",
                "Tuple[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "Optional[bool]",
                    "List[mtg_ssm.scryfall.models.ScryCard]",
                    "Union[None, int, str]",
                    "List[bytes]",
                    "str"
                ]
            }
        },
        "ProjectViewSet.ProjectSerializer.create": {
            "name": "create",
            "location": 57,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "Dict[str, Any]",
                    "dict",
                    "feed.serializers.Feed",
                    "Dict[str, Optional[str]]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]"
                ]
            }
        },
        "RecordViewSet.RecordSerializer.create": {
            "name": "create",
            "location": 84,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "List[mtg_ssm.scryfall.models.ScryCard]",
                    "Optional[List[Dict]]",
                    "dict",
                    "Union[None, int, str]",
                    "str"
                ]
            }
        },
        "RecordViewSet.RecordSerializer.update": {
            "name": "update",
            "location": 92,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "phial.Response",
                    "dict"
                ],
                "validated_data": [
                    "phial.Response",
                    "dict"
                ]
            }
        }
    },
    "track-server-master/api/__init__.py": {},
    "track-server-master/api/migrations/__init__.py": {},
    "track-server-master/api/tests/test_views.py": {
        "client": {
            "name": "client",
            "location": 11,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "test_create_category": {
            "name": "test_create_category",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_category": {
            "name": "test_get_category",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_list_categories": {
            "name": "test_list_categories",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_category": {
            "name": "test_update_category",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "field": [],
                "client": []
            }
        },
        "test_delete_category": {
            "name": "test_delete_category",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_create_project": {
            "name": "test_create_project",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_project": {
            "name": "test_get_project",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_list_projects": {
            "name": "test_list_projects",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_project": {
            "name": "test_update_project",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "field": [],
                "client": []
            }
        },
        "test_assign_project": {
            "name": "test_assign_project",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "client": [],
                "subtests": [
                    "Tuple[str]",
                    "str"
                ]
            }
        },
        "test_delete_project": {
            "name": "test_delete_project",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_create_record": {
            "name": "test_create_record",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_create_record_with_stop_time": {
            "name": "test_create_record_with_stop_time",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_list_records": {
            "name": "test_list_records",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_active_record": {
            "name": "test_get_active_record",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_active_record_missing": {
            "name": "test_get_active_record_missing",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_weekly_report": {
            "name": "test_weekly_report",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict"
                ],
                "subtests": [
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "track-server-master/track/models.py": {
        "Category.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.start_time": {
            "name": "start_time",
            "location": 35,
            "return": [
                "int",
                "datetime.datetime",
                "Optional[int]",
                "datetime.timedelta",
                "Optional[datetime.timedelta]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.stop_time": {
            "name": "stop_time",
            "location": 39,
            "return": [
                "bool",
                "int",
                "Optional[List[str]]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.elapsed": {
            "name": "elapsed",
            "location": 45,
            "return": [
                "str",
                "float",
                "int",
                "Optional[datetime.timedelta]",
                "datetime.timedelta",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.clean": {
            "name": "clean",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.save": {
            "name": "save",
            "location": 57,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "track-server-master/track/selectors.py": {
        "get_active_record": {
            "name": "get_active_record",
            "location": 14,
            "return": [
                "Optional[str]",
                "Optional[zerver.models.Realm]",
                "Optional[bool]",
                "zerver.models.UserProfile",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_elapsed_time": {
            "name": "get_elapsed_time",
            "location": 24,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "get_elapsed_time_per_category": {
            "name": "get_elapsed_time_per_category",
            "location": 48,
            "return": [
                "str",
                "Optional[str]",
                "zerver.models.Realm"
            ],
            "arguments": {}
        },
        "get_entries_per_day": {
            "name": "get_entries_per_day",
            "location": 66,
            "return": [
                "dict",
                "set",
                "List[str]",
                "models.Match",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "get_entries_per_week": {
            "name": "get_entries_per_week",
            "location": 103,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "track-server-master/track/services.py": {
        "create_category": {
            "name": "create_category",
            "location": 11,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "create_project": {
            "name": "create_project",
            "location": 23,
            "return": [
                "bool",
                "int",
                "str",
                "Tuple[int, int]",
                "dict"
            ],
            "arguments": {}
        },
        "create_record": {
            "name": "create_record",
            "location": 34,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "update_record": {
            "name": "update_record",
            "location": 62,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "datetime.timedelta",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "add_project_to_category": {
            "name": "add_project_to_category",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove_project_from_category": {
            "name": "remove_project_from_category",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "track-server-master/track/settings.py": {},
    "track-server-master/track/urls.py": {},
    "track-server-master/track/wsgi.py": {},
    "track-server-master/track/__init__.py": {},
    "track-server-master/track/migrations/0001_initial.py": {},
    "track-server-master/track/migrations/0002_auto_20190709_0148.py": {},
    "track-server-master/track/migrations/0003_auto_20190709_1423.py": {},
    "track-server-master/track/migrations/__init__.py": {},
    "track-server-master/track/tests/factories.py": {},
    "track-server-master/track/tests/test_selectors.py": {
        "test_get_active_record_all_stopped": {
            "name": "test_get_active_record_all_stopped",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_active_record_one_is_running": {
            "name": "test_get_active_record_one_is_running",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_elapsed_time": {
            "name": "test_get_elapsed_time",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_elapsed_time_with_lower_bounds": {
            "name": "test_get_elapsed_time_with_lower_bounds",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_elapsed_time_with_upper_bounds": {
            "name": "test_get_elapsed_time_with_upper_bounds",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_elapsed_time_with_lower_and_upper_bounds": {
            "name": "test_get_elapsed_time_with_lower_and_upper_bounds",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_elapsed_time_per_category": {
            "name": "test_get_elapsed_time_per_category",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_elapsed_time_per_category_with_lower_bounds": {
            "name": "test_get_elapsed_time_per_category_with_lower_bounds",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_elapsed_time_per_category_with_upper_bounds": {
            "name": "test_get_elapsed_time_per_category_with_upper_bounds",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_entries_per_day": {
            "name": "test_get_entries_per_day",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_entries_per_day_for_category": {
            "name": "test_get_entries_per_day_for_category",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_entries_per_week": {
            "name": "test_get_entries_per_week",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "with_category": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "track-server-master/track/tests/test_services.py": {
        "test_create_category": {
            "name": "test_create_category",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_category_without_description": {
            "name": "test_create_category_without_description",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_project": {
            "name": "test_create_project",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_project_without_description": {
            "name": "test_create_project_without_description",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add_project_to_category": {
            "name": "test_add_project_to_category",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_remove_project_from_category": {
            "name": "test_remove_project_from_category",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_record": {
            "name": "test_create_record",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_record_no_stop_time": {
            "name": "test_create_record_no_stop_time",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_record_stop_time_in_the_past": {
            "name": "test_create_record_stop_time_in_the_past",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update_record_project": {
            "name": "test_update_record_project",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update_record_start_time": {
            "name": "test_update_record_start_time",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update_record_stop_time": {
            "name": "test_update_record_stop_time",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update_record_remove_stop_time": {
            "name": "test_update_record_remove_stop_time",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "track-server-master/track/tests/__init__.py": {}
}
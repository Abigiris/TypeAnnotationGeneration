{
    "transphire_transform-master/setup.py": {},
    "transphire_transform-master/transphire_transform/__init__.py": {},
    "transphire_transform-master/transphire_transform/dump_load/box.py": {
        "load_eman1": {
            "name": "load_eman1",
            "location": 33,
            "return": [
                "IO",
                "bytes",
                "str",
                "Callable[[], str]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "load_box": {
            "name": "load_box",
            "location": 56,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str]",
                "Dict[str, str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Dict[str, List[bytes]]"
                ],
                "version": [
                    "str",
                    "Dict[str, List[bytes]]"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/cter.py": {
        "get_cter_v1_0_header_names": {
            "name": "get_cter_v1_0_header_names",
            "location": 33,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "load_cter": {
            "name": "load_cter",
            "location": 69,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "load_cter_v1_0": {
            "name": "load_cter_v1_0",
            "location": 101,
            "return": [
                "int",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "dump_cter": {
            "name": "dump_cter",
            "location": 125,
            "return": [
                "Callable",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "pandas.DataFrame",
                    "dict",
                    "Dict[str, str]"
                ],
                "cter_data": [
                    "str",
                    "pandas.DataFrame",
                    "dict",
                    "Dict[str, str]"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "dump_cter_v1_0": {
            "name": "dump_cter_v1_0",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "int"
                ],
                "cter_data": [
                    "pandas.DataFrame",
                    "int",
                    "Union[Dict[str, Any], List[Any]]",
                    "Optional[str]",
                    "Optional[bytes]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "cter_to_intern": {
            "name": "cter_to_intern",
            "location": 210,
            "return": [
                "str",
                "bool",
                "Optional[float]",
                "Awaitable"
            ],
            "arguments": {
                "cter_data": [
                    "pandas.DataFrame",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "allennlp.common.util.JsonDict",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "intern_to_cter": {
            "name": "intern_to_cter",
            "location": 252,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "cter_data": [
                    "pandas.DataFrame",
                    "dict",
                    "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]",
                    "Iterable[T]",
                    "Callable[[T], bool]",
                    "bytes"
                ],
                "valid_list": [
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "defocus_defocus_diff_to_defocus_u_and_v": {
            "name": "defocus_defocus_diff_to_defocus_u_and_v",
            "location": 304,
            "return": [
                "bool"
            ],
            "arguments": {
                "defocus": [
                    "pandas.Series",
                    "List[int]",
                    "Iterable[T]"
                ],
                "astigmatism": [
                    "pandas.Series",
                    "List[int]",
                    "Iterable[T]"
                ]
            }
        },
        "defocus_u_and_v_to_defocus_defocus_diff": {
            "name": "defocus_u_and_v_to_defocus_defocus_diff",
            "location": 327,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "defocus_u": [
                    "pandas.Series",
                    "int",
                    "Callable",
                    "Optional[float]",
                    "bool"
                ],
                "defocus_v": [
                    "pandas.Series",
                    "int",
                    "Callable",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "amplitude_contrast_to_angle": {
            "name": "amplitude_contrast_to_angle",
            "location": 349,
            "return": [
                "str",
                "dict",
                "int",
                "Iterable[numpy.dtype]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "amp_contrast": [
                    "pandas.Series",
                    "pandas.DataFrame",
                    "int",
                    "float",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "angle_to_amplitude_contrast": {
            "name": "angle_to_amplitude_contrast",
            "location": 368,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "angle": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/ctffind.py": {
        "get_ctffind_4_1_0_header_names": {
            "name": "get_ctffind_4_1_0_header_names",
            "location": 34,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {}
        },
        "get_ctffind_4_1_0_extract_dict": {
            "name": "get_ctffind_4_1_0_extract_dict",
            "location": 54,
            "return": [
                "str",
                "bool",
                "type",
                "Callable",
                "denite.util.UserContext"
            ],
            "arguments": {}
        },
        "get_ctffind_4_1_0_meta": {
            "name": "get_ctffind_4_1_0_meta",
            "location": 74,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "load_ctffind_4_1_0": {
            "name": "load_ctffind_4_1_0",
            "location": 113,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "load_ctffind": {
            "name": "load_ctffind",
            "location": 140,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/motioncor2.py": {
        "load_motioncor2_1_0_0": {
            "name": "load_motioncor2_1_0_0",
            "location": 33,
            "return": [
                "str",
                "Callable[[], str]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "load_motioncor2": {
            "name": "load_motioncor2",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/mrc.py": {
        "load_mrc_header": {
            "name": "load_mrc_header",
            "location": 29,
            "return": [
                "str",
                "bool",
                "int",
                "List[int]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/star.py": {
        "create_star_header": {
            "name": "create_star_header",
            "location": 34,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "dict",
                "Awaitable"
            ],
            "arguments": {
                "names": [
                    "str",
                    "List[str]"
                ],
                "prefix": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "dump_star": {
            "name": "dump_star",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "data": [
                    "pandas.DataFrame",
                    "str"
                ],
                "version": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "load_star_header": {
            "name": "load_star_header",
            "location": 83,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "load_star": {
            "name": "load_star",
            "location": 114,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "import_star_header": {
            "name": "import_star_header",
            "location": 135,
            "return": [
                "Tuple[str, 'LabelAligner']",
                "Tuple[List[str], 'LabelAligner']"
            ],
            "arguments": {
                "header_names": [
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "export_star_header": {
            "name": "export_star_header",
            "location": 186,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "header_names": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "type"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "Callable[[str], str]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/unblur.py": {
        "load_unblur_1_0_2": {
            "name": "load_unblur_1_0_2",
            "location": 33,
            "return": [
                "str",
                "Callable[[], str]"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_unblur": {
            "name": "load_unblur",
            "location": 58,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[str]"
                ],
                "version": [
                    "Optional[str]",
                    "str",
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/util.py": {
        "create_header": {
            "name": "create_header",
            "location": 29,
            "return": [
                "str",
                "int",
                "Callable",
                "bool",
                "Optional[float]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "names": [
                    "str"
                ],
                "index": [
                    "str",
                    "Sequence[str]",
                    "Set[str]",
                    "bytes",
                    "bool"
                ],
                "prefix": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "dump_file": {
            "name": "dump_file",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "header": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Union[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "vertical": [
                    "str",
                    "Literal",
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        },
        "load_file": {
            "name": "load_file",
            "location": 93,
            "return": [
                "str",
                "int",
                "List[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "names": [
                    "str"
                ],
                "header": [
                    "str"
                ],
                "skiprows": [
                    "str"
                ],
                "delim_whitespace": [
                    "str"
                ]
            }
        },
        "import_keys": {
            "name": "import_keys",
            "location": 126,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "input_file": [
                    "IO",
                    "str",
                    "TextIO",
                    "int",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "parse_keys_to_dict": {
            "name": "parse_keys_to_dict",
            "location": 148,
            "return": [
                "str",
                "int",
                "Tuple[int, str]"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "bytes"
                ],
                "export": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "add_to_dict": {
            "name": "add_to_dict",
            "location": 184,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "data_dict": [
                    "dict",
                    "str",
                    "Dict[Any, str]",
                    "Dict[int, Any]",
                    "Dict[str, str]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Dict[int, Any]"
                ],
                "value": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "bytes"
                ]
            }
        },
        "extract_function_from_function_dict": {
            "name": "extract_function_from_function_dict",
            "location": 207,
            "return": [
                "Type",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "function_dict": [
                    "List[str]",
                    "list",
                    "str"
                ],
                "version": [
                    "int",
                    "Optional[T]",
                    "dict",
                    "Callable[..., T]"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/xml.py": {
        "get_key_without_prefix": {
            "name": "get_key_without_prefix",
            "location": 29,
            "return": [
                "str",
                "IO[str]",
                "IO",
                "bool"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "get_all_key_value": {
            "name": "get_all_key_value",
            "location": 51,
            "return": [
                "Optional[List[str]]",
                "Optional[str]",
                "str",
                "Optional[Dict]",
                "Type"
            ],
            "arguments": {
                "node": [
                    "str",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]"
                ],
                "key": [
                    "tuple",
                    "str",
                    "int",
                    "dict"
                ],
                "search_keys": [
                    "str",
                    "Optional[str]"
                ],
                "data_dict": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "fill_key_value_dict": {
            "name": "fill_key_value_dict",
            "location": 110,
            "return": [
                "Type[T]",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "findall_key": [
                    "bytes",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "findall_value": [
                    "bytes",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "data_dict": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "dose_frac_nested_values": {
            "name": "dose_frac_nested_values",
            "location": 140,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Mapping"
                ],
                "data_dict": [
                    "bytes",
                    "dict",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "number_frac_nested_values": {
            "name": "number_frac_nested_values",
            "location": 174,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Type"
                ],
                "data_dict": [
                    "memoryview",
                    "Mapping"
                ]
            }
        },
        "get_level_0_xml": {
            "name": "get_level_0_xml",
            "location": 191,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Dict[str, str]"
                ],
                "key": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "search_keys": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "data_dict": [
                    "str",
                    "Optional[str]",
                    "tuple",
                    "Dict[str, Any]",
                    "Type['Declared']",
                    "int"
                ]
            }
        },
        "get_level_1_xml": {
            "name": "get_level_1_xml",
            "location": 222,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "key": [
                    "str"
                ],
                "search_keys": [
                    "str",
                    "bytes"
                ],
                "data_dict": [
                    "str"
                ]
            }
        },
        "get_level_3_xml": {
            "name": "get_level_3_xml",
            "location": 267,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "key": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "search_keys": [
                    "str",
                    "bytes"
                ],
                "data_dict": [
                    "str"
                ]
            }
        },
        "recursive_node": {
            "name": "recursive_node",
            "location": 328,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "node": [
                    "T",
                    "list"
                ],
                "data_dict": [
                    "T",
                    "list"
                ],
                "level_dict": [
                    "dict",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Dict[str, int]",
                    "Optional[Dict[str, Any]]"
                ],
                "level_func_dict": [
                    "T",
                    "list"
                ]
            }
        },
        "load_xml": {
            "name": "load_xml",
            "location": 373,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "pandas._FilePathOrBuffer"
                ],
                "level_dict": [
                    "List[Tuple[str, Any]]",
                    "Tuple[Any, Any, Any]"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/__init__.py": {},
    "transphire_transform-master/transphire_transform/dump_load/tests/test_box.py": {
        "TestLoadEman1.test_box_file_should_import_correct_values": {
            "name": "test_box_file_should_import_correct_values",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadBox.test_box_file_should_import_correct_values": {
            "name": "test_box_file_should_import_correct_values",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadBox.test_unknown_key_should_raise_KeyError": {
            "name": "test_unknown_key_should_raise_KeyError",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/tests/test_cter.py": {
        "TestGetCterV10HeaderNames.test_call_functions_should_return_filled_list": {
            "name": "test_call_functions_should_return_filled_list",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadCterV10.test_correct_multiline_file_should_return_filled_data_frame": {
            "name": "test_correct_multiline_file_should_return_filled_data_frame",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadCterV10.test_correct_file_should_return_filled_data_frame": {
            "name": "test_correct_file_should_return_filled_data_frame",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadCterV10.test_correct_file_low_angle_should_return_filled_data_frame": {
            "name": "test_correct_file_low_angle_should_return_filled_data_frame",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadCterV10.test_correct_file_high_angle_should_return_filled_data_frame": {
            "name": "test_correct_file_high_angle_should_return_filled_data_frame",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocusDefocusDiffToDefocuUAndV.test_defocus_2_um_zero_astigmatism_should_return_20000_angstrom": {
            "name": "test_defocus_2_um_zero_astigmatism_should_return_20000_angstrom",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocusDefocusDiffToDefocuUAndV.test_zero_astigmatism_should_return_same_values": {
            "name": "test_zero_astigmatism_should_return_same_values",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocusDefocusDiffToDefocuUAndV.test_values_should_return_correct_defocus_u": {
            "name": "test_values_should_return_correct_defocus_u",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocusDefocusDiffToDefocuUAndV.test_values_should_return_correct_defocus_v": {
            "name": "test_values_should_return_correct_defocus_v",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocusDefocusDiffToDefocuUAndV.test_values_inverse_should_return_correct_defocus_v": {
            "name": "test_values_inverse_should_return_correct_defocus_v",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocusDefocusDiffToDefocuUAndV.test_multi_input_should_return_multi_output_defocus_u": {
            "name": "test_multi_input_should_return_multi_output_defocus_u",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocusDefocusDiffToDefocuUAndV.test_multi_input_should_return_multi_output_defocus_v": {
            "name": "test_multi_input_should_return_multi_output_defocus_v",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocuUAndVToDefocusDefocusDiff.test_defocus_u_2_um_defocus_v_2_um_should_return_20000_angstrom": {
            "name": "test_defocus_u_2_um_defocus_v_2_um_should_return_20000_angstrom",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocuUAndVToDefocusDefocusDiff.test_zero_astigmatism_should_return_same_values": {
            "name": "test_zero_astigmatism_should_return_same_values",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocuUAndVToDefocusDefocusDiff.test_values_should_return_correct_defocus_u": {
            "name": "test_values_should_return_correct_defocus_u",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocuUAndVToDefocusDefocusDiff.test_values_should_return_correct_defocus_v": {
            "name": "test_values_should_return_correct_defocus_v",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocuUAndVToDefocusDefocusDiff.test_values_invert_should_return_correct_defocus_v": {
            "name": "test_values_invert_should_return_correct_defocus_v",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocuUAndVToDefocusDefocusDiff.test_multi_input_should_return_multi_output_defocus": {
            "name": "test_multi_input_should_return_multi_output_defocus",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefocuUAndVToDefocusDefocusDiff.test_multi_input_should_return_multi_output_astigmatism": {
            "name": "test_multi_input_should_return_multi_output_astigmatism",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDumpCterV10.test_valid_cter_data_should_create_partres_file": {
            "name": "test_valid_cter_data_should_create_partres_file",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestDumpCterV10.test_valid_cter_data_large_angle_should_create_correct_file": {
            "name": "test_valid_cter_data_large_angle_should_create_correct_file",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "List[str]"
                ]
            }
        },
        "TestDumpCterV10.test_valid_cter_data_should_create_correct_file": {
            "name": "test_valid_cter_data_should_create_correct_file",
            "location": 534,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestAmplitudeContrastToAngle.test_zero_should_return_zero": {
            "name": "test_zero_should_return_zero",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmplitudeContrastToAngle.test_100_should_return_ninety": {
            "name": "test_100_should_return_ninety",
            "location": 636,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmplitudeContrastToAngle.test_minus_100_should_return_ninety": {
            "name": "test_minus_100_should_return_ninety",
            "location": 641,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmplitudeContrastToAngle.test_50_should_return_30": {
            "name": "test_50_should_return_30",
            "location": 646,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmplitudeContrastToAngle.test_minus_50_should_return_150": {
            "name": "test_minus_50_should_return_150",
            "location": 652,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmplitudeContrastToAngle.test_multiline_should_return_correct_values": {
            "name": "test_multiline_should_return_correct_values",
            "location": 658,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmplitudeContrastToAngle.test_200_should_raise_assertionerror": {
            "name": "test_200_should_raise_assertionerror",
            "location": 664,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmplitudeContrastToAngle.test_minus_200_should_raise_assertionerror": {
            "name": "test_minus_200_should_raise_assertionerror",
            "location": 669,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmplitudeContrastToAngle.test_muliline_200_should_raise_assertionerror": {
            "name": "test_muliline_200_should_raise_assertionerror",
            "location": 674,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAngleToAmplitudeContrast.test_zero_should_return_zero": {
            "name": "test_zero_should_return_zero",
            "location": 682,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAngleToAmplitudeContrast.test_100_should_return_ninety": {
            "name": "test_100_should_return_ninety",
            "location": 687,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAngleToAmplitudeContrast.test_minus_100_should_return_ninety": {
            "name": "test_minus_100_should_return_ninety",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAngleToAmplitudeContrast.test_50_should_return_30": {
            "name": "test_50_should_return_30",
            "location": 697,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAngleToAmplitudeContrast.test_minus_50_should_return_150": {
            "name": "test_minus_50_should_return_150",
            "location": 703,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAngleToAmplitudeContrast.test_multiline_should_return_correct_values": {
            "name": "test_multiline_should_return_correct_values",
            "location": 709,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternToCter.test_input_cter_values_should_return_output_values": {
            "name": "test_input_cter_values_should_return_output_values",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternToCter.test_input_ctffind_values_should_return_output_values": {
            "name": "test_input_ctffind_values_should_return_output_values",
            "location": 773,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternToCter.test_input_ctffind_high_angle_values_should_return_output_values": {
            "name": "test_input_ctffind_high_angle_values_should_return_output_values",
            "location": 828,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternToCter.test_input_ctffind_low_angle_values_should_return_output_values": {
            "name": "test_input_ctffind_low_angle_values_should_return_output_values",
            "location": 883,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternToCter.test_input_ctffind_phase_shift_values_should_return_output_values": {
            "name": "test_input_ctffind_phase_shift_values_should_return_output_values",
            "location": 937,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternToCter.test_input_ctffind_phase_shift_multiline_values_should_return_output_values": {
            "name": "test_input_ctffind_phase_shift_multiline_values_should_return_output_values",
            "location": 992,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCterToIntern.test_input_cter_should_modify_input_data": {
            "name": "test_input_cter_should_modify_input_data",
            "location": 1050,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCterToIntern.test_input_cter_should_drop_defocus": {
            "name": "test_input_cter_should_drop_defocus",
            "location": 1112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCterToIntern.test_input_cter_should_drop_astigmatism_amplitude": {
            "name": "test_input_cter_should_drop_astigmatism_amplitude",
            "location": 1145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCterToIntern.test_input_cter_should_return_correct_defocus_u_and_v": {
            "name": "test_input_cter_should_return_correct_defocus_u_and_v",
            "location": 1178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCterToIntern.test_input_cter_inverse_should_return_correct_defocus_u_and_v": {
            "name": "test_input_cter_inverse_should_return_correct_defocus_u_and_v",
            "location": 1225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCterToIntern.test_input_cter_large_angle_should_modify_input_data": {
            "name": "test_input_cter_large_angle_should_modify_input_data",
            "location": 1272,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCterToIntern.test_input_cter_small_angle_should_modify_input_data": {
            "name": "test_input_cter_small_angle_should_modify_input_data",
            "location": 1334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadCter.test_version_1_0_should_return_version_1_0": {
            "name": "test_version_1_0_should_return_version_1_0",
            "location": 1399,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadCter.test_version_1_1_should_return_version_1_0": {
            "name": "test_version_1_1_should_return_version_1_0",
            "location": 1458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadCter.test_version_0_1_should_raise_AssertionError": {
            "name": "test_version_0_1_should_raise_AssertionError",
            "location": 1517,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDumpCter.test_valid_cter_data_version_1_0_should_create_partres_file": {
            "name": "test_valid_cter_data_version_1_0_should_create_partres_file",
            "location": 1525,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestDumpCter.test_valid_cter_data_1_0_large_angle_should_create_correct_file": {
            "name": "test_valid_cter_data_1_0_large_angle_should_create_correct_file",
            "location": 1582,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "List[str]"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/tests/test_ctffind.py": {
        "ctffind_4_1_0_file": {
            "name": "ctffind_4_1_0_file",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ctffind_4_1_0_meta": {
            "name": "ctffind_4_1_0_meta",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ctffind_4_1_0_data": {
            "name": "ctffind_4_1_0_data",
            "location": 45,
            "return": [
                "str",
                "int",
                "Generator",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {}
        },
        "TestGetCtffind410HeaderNames.test_call_functions_returns_list": {
            "name": "test_call_functions_returns_list",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetCtffind410Meta.test_correct_file_should_return_filled_data_frame": {
            "name": "test_correct_file_should_return_filled_data_frame",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctffind_4_1_0_meta": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "ctffind_4_1_0_file": [
                    "str",
                    "set"
                ]
            }
        },
        "TestGetCtffind410Meta.test_corrupt_file_should_raise_assertionerror": {
            "name": "test_corrupt_file_should_raise_assertionerror",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadCtffind410.test_correct_file_should_return_filled_data_frame": {
            "name": "test_correct_file_should_return_filled_data_frame",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctffind_4_1_0_meta": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "ctffind_4_1_0_file": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "ctffind_4_1_0_data": [
                    "int",
                    "str"
                ]
            }
        },
        "TestLoadCtffind410.test_corrupt_file_should_raise_assertionerror": {
            "name": "test_corrupt_file_should_raise_assertionerror",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadCtffind.test_correct_file_4_1_0_should_return_filled_data_frame": {
            "name": "test_correct_file_4_1_0_should_return_filled_data_frame",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctffind_4_1_0_meta": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "ctffind_4_1_0_file": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "ctffind_4_1_0_data": [
                    "int",
                    "str"
                ]
            }
        },
        "TestLoadCtffind.test_corrupt_file_should_raise_assertionerror": {
            "name": "test_corrupt_file_should_raise_assertionerror",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/tests/test_motioncor2.py": {
        "TestLoadMotioncor100.test_file_reads_correct_data": {
            "name": "test_file_reads_correct_data",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadMotioncor.test_file_version_1_0_0_reads_correct_data": {
            "name": "test_file_version_1_0_0_reads_correct_data",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/tests/test_mrc.py": {
        "TestLoadMrcHeader.test_header_contains_phase_plate": {
            "name": "test_header_contains_phase_plate",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadMrcHeader.test_phase_plate_is_false": {
            "name": "test_phase_plate_is_false",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadMrcHeader.test_phase_plate_is_true": {
            "name": "test_phase_plate_is_true",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadMrcHeader.test_file_does_not_exists_raises_IOError": {
            "name": "test_file_does_not_exists_raises_IOError",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/tests/test_star.py": {
        "TestStarHeader.test_create_star_header_four_list": {
            "name": "test_create_star_header_four_list",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStarHeader.test_create_star_header_four_array": {
            "name": "test_create_star_header_four_array",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStarHeader.test_create_star_header_single_list": {
            "name": "test_create_star_header_single_list",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStarHeader.test_create_star_header_single_array": {
            "name": "test_create_star_header_single_array",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDumpStar.test_dump_star_four": {
            "name": "test_dump_star_four",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestDumpStar.test_dump_star_single": {
            "name": "test_dump_star_single",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestDumpStar.test_dump_star_single_empty": {
            "name": "test_dump_star_single_empty",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestLoadStarHeader.test_load_star_header_single": {
            "name": "test_load_star_header_single",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestLoadStarHeader.test_load_star_header_four": {
            "name": "test_load_star_header_four",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestLoadStarHeader.test_load_star_header_four_wrong_export": {
            "name": "test_load_star_header_four_wrong_export",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestLoadStar.test_load_star_single": {
            "name": "test_load_star_single",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestLoadStar.test_load_star_four": {
            "name": "test_load_star_four",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestLoadStar.test_load_star_single_empty": {
            "name": "test_load_star_single_empty",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestImportStarHeader.test_MicrographName_outputs_MicrographName": {
            "name": "test_MicrographName_outputs_MicrographName",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportStarHeader.test_SgdSkipAnneal_outputs_SgdSkipAnneal": {
            "name": "test_SgdSkipAnneal_outputs_SgdSkipAnneal",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportStarHeader.test_SgdNextSubset_outputs_SgdNextSubset": {
            "name": "test_SgdNextSubset_outputs_SgdNextSubset",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportStarHeader.test_testii_raises_AssertionError": {
            "name": "test_testii_raises_AssertionError",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportStarHeader.test_empty_header_raises_AssertionError": {
            "name": "test_empty_header_raises_AssertionError",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportStarHeader.test_input_relion2_outputs_relion2_correct_out_header": {
            "name": "test_input_relion2_outputs_relion2_correct_out_header",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportStarHeader.test_input_relion2_outputs_relion2_correct_old_header": {
            "name": "test_input_relion2_outputs_relion2_correct_old_header",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportStarHeader.test_input_relion2_outputs_relion2_correct_prefix": {
            "name": "test_input_relion2_outputs_relion2_correct_prefix",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportStarHeader.test_input_relion2_outputs_relion3_correct_out_header": {
            "name": "test_input_relion2_outputs_relion3_correct_out_header",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportStarHeader.test_input_relion2_outputs_relion3_correct_old_header": {
            "name": "test_input_relion2_outputs_relion3_correct_old_header",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportStarHeader.test_input_relion2_outputs_relion3_correct_prefix": {
            "name": "test_input_relion2_outputs_relion3_correct_prefix",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/tests/test_unblur.py": {
        "TestLoadUnblur102.test_file_reads_correct_data": {
            "name": "test_file_reads_correct_data",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadUnblur.test_file_version_1_0_2_reads_correct_data": {
            "name": "test_file_version_1_0_2_reads_correct_data",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/tests/test_util.py": {
        "TestCreateHeader.test_create_header_list": {
            "name": "test_create_header_list",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateHeader.test_create_header_index_list": {
            "name": "test_create_header_index_list",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateHeader.test_create_header_array": {
            "name": "test_create_header_array",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateHeader.test_create_header_index_array": {
            "name": "test_create_header_index_array",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateHeader.test_create_header_array_prefix": {
            "name": "test_create_header_array_prefix",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateHeader.test_create_header_index_array_prefix": {
            "name": "test_create_header_index_array_prefix",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateHeader.test_create_header_array_empty": {
            "name": "test_create_header_array_empty",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateHeader.test_create_header_list_empty": {
            "name": "test_create_header_list_empty",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDumpFile.test_dump_file_empty": {
            "name": "test_dump_file_empty",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestDumpFile.test_dump_file_four": {
            "name": "test_dump_file_four",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestDumpFile.test_dump_file_single": {
            "name": "test_dump_file_single",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestDumpFile.test_dump_file_four_hor": {
            "name": "test_dump_file_four_hor",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestDumpFile.test_dump_file_single_hor": {
            "name": "test_dump_file_single_hor",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestDumpFile.test_dump_file_four_header": {
            "name": "test_dump_file_four_header",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestDumpFile.test_dump_file_single_header": {
            "name": "test_dump_file_single_header",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestDumpFile.test_dump_file_four_hor_header": {
            "name": "test_dump_file_four_hor_header",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestDumpFile.test_dump_file_single_hor_header": {
            "name": "test_dump_file_single_hor_header",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestImportKeys.test_import_keys_filled_file_should_work": {
            "name": "test_import_keys_filled_file_should_work",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestImportKeys.test_import_keys_filled_file_multi_hastag_should_work": {
            "name": "test_import_keys_filled_file_multi_hastag_should_work",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestImportKeys.test_import_keys_empty_file_should_work": {
            "name": "test_import_keys_empty_file_should_work",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestImportKeys.test_import_keys_contains_whitespace_should_raise_AssertError": {
            "name": "test_import_keys_contains_whitespace_should_raise_AssertError",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestParseKeysToDict.test_input_unspecified_to_output": {
            "name": "test_input_unspecified_to_output",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseKeysToDict.test_input_unspecified_export_to_output": {
            "name": "test_input_unspecified_export_to_output",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseKeysToDict.test_input_specified_to_output": {
            "name": "test_input_specified_to_output",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseKeysToDict.test_input_specified_export_to_output": {
            "name": "test_input_specified_export_to_output",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddToDict.test_new_key_should_return_filled_dict": {
            "name": "test_new_key_should_return_filled_dict",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddToDict.test_new_key_int_should_return_filled_dict": {
            "name": "test_new_key_int_should_return_filled_dict",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddToDict.test_double_key_should_attributeerror": {
            "name": "test_double_key_should_attributeerror",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.dummy_function_1": {
            "name": "dummy_function_1",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.dummy_function_2": {
            "name": "dummy_function_2",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.dummy_function_3": {
            "name": "dummy_function_3",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_empty_version_ordered_should_return_dummy_function_3": {
            "name": "test_empty_version_ordered_should_return_dummy_function_3",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_empty_version_unordered_should_return_dummy_function_3": {
            "name": "test_empty_version_unordered_should_return_dummy_function_3",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_225_ordered_should_return_dummy_function_3": {
            "name": "test_version_225_ordered_should_return_dummy_function_3",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_326_ordered_should_return_dummy_function_3": {
            "name": "test_version_326_ordered_should_return_dummy_function_3",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_112_ordered_should_return_dummy_function_2": {
            "name": "test_version_112_ordered_should_return_dummy_function_2",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_122_ordered_should_return_dummy_function_2": {
            "name": "test_version_122_ordered_should_return_dummy_function_2",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_004_ordered_should_return_dummy_function_1": {
            "name": "test_version_004_ordered_should_return_dummy_function_1",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_005_ordered_should_return_dummy_function_1": {
            "name": "test_version_005_ordered_should_return_dummy_function_1",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_225_unordered_should_return_dummy_function_3": {
            "name": "test_version_225_unordered_should_return_dummy_function_3",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_326_unordered_should_return_dummy_function_3": {
            "name": "test_version_326_unordered_should_return_dummy_function_3",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_112_unordered_should_return_dummy_function_2": {
            "name": "test_version_112_unordered_should_return_dummy_function_2",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_122_unordered_should_return_dummy_function_2": {
            "name": "test_version_122_unordered_should_return_dummy_function_2",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_004_unordered_should_return_dummy_function_1": {
            "name": "test_version_004_unordered_should_return_dummy_function_1",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_005_unordered_should_return_dummy_function_1": {
            "name": "test_version_005_unordered_should_return_dummy_function_1",
            "location": 512,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_003_unordered_should_raise_AssertionError": {
            "name": "test_version_003_unordered_should_raise_AssertionError",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_unequal_format_raises_AssertionError": {
            "name": "test_version_unequal_format_raises_AssertionError",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractFunctionFromFunctionDict.test_version_unequal_format_in_keys_raises_AssertionError": {
            "name": "test_version_unequal_format_in_keys_raises_AssertionError",
            "location": 539,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/tests/test_xml.py": {
        "TestGetAllKeyValue.test_single_key_value_should_return_filled_dict": {
            "name": "test_single_key_value_should_return_filled_dict",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllKeyValue.test_no_key_should_return_empty_dict": {
            "name": "test_no_key_should_return_empty_dict",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllKeyValue.test_FramesPerFraction_falcon_should_return_filled_dict": {
            "name": "test_FramesPerFraction_falcon_should_return_filled_dict",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllKeyValue.test_FramesPerFraction_k2_should_return_filled_dict": {
            "name": "test_FramesPerFraction_k2_should_return_filled_dict",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllKeyValue.test_unknown_subvalue_should_return_empty_dict": {
            "name": "test_unknown_subvalue_should_return_empty_dict",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllKeyValue.test_double_key_should_raise_attributeerror": {
            "name": "test_double_key_should_raise_attributeerror",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetAllKeyValue.test_unequal_key_value_number_should_raise_assertionerror": {
            "name": "test_unequal_key_value_number_should_raise_assertionerror",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFillKeyValueDict.test_one_key_one_value_should_fill_dict": {
            "name": "test_one_key_one_value_should_fill_dict",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFillKeyValueDict.test_two_key_two_value_should_fill_dict": {
            "name": "test_two_key_two_value_should_fill_dict",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFillKeyValueDict.test_zero_key_zero_value_should_return_empty_dict_dict": {
            "name": "test_zero_key_zero_value_should_return_empty_dict_dict",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFillKeyValueDict.test_one_key_two_value_should_raise_assertion_error": {
            "name": "test_one_key_two_value_should_raise_assertion_error",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFillKeyValueDict.test_two_key_one_value_should_raise_assertion_error": {
            "name": "test_two_key_one_value_should_raise_assertion_error",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFillKeyValueDict.test_one_empty_key_one_value_should_raise_assertion_error": {
            "name": "test_one_empty_key_one_value_should_raise_assertion_error",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFillKeyValueDict.test_one_key_one_value_should_return_empty_list": {
            "name": "test_one_key_one_value_should_return_empty_list",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFillKeyValueDict.test_one_key_one_empty_value_should_return_filled_list": {
            "name": "test_one_key_one_empty_value_should_return_filled_list",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoseFracNestedValues.test_tag_exist_should_fill_dict": {
            "name": "test_tag_exist_should_fill_dict",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoseFracNestedValues.test_start_tag_exist_should_not_fill_dict": {
            "name": "test_start_tag_exist_should_not_fill_dict",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoseFracNestedValues.test_end_tag_exist_should_not_fill_dict": {
            "name": "test_end_tag_exist_should_not_fill_dict",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoseFracNestedValues.test_start_tag_not_int_should_raise_valueerror": {
            "name": "test_start_tag_not_int_should_raise_valueerror",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoseFracNestedValues.test_end_tag_not_int_should_raise_valueerror": {
            "name": "test_end_tag_not_int_should_raise_valueerror",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDoseFracNestedValues.test_end_and_start_tag_not_int_should_raise_valueerror": {
            "name": "test_end_and_start_tag_not_int_should_raise_valueerror",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberFracNestedValues.test_value_with_text_should_fill_dict": {
            "name": "test_value_with_text_should_fill_dict",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberFracNestedValues.test_value_without_text_should_raise_assertionError": {
            "name": "test_value_without_text_should_raise_assertionError",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberFracNestedValues.test_value_no_int_should_raise_valueerror": {
            "name": "test_value_no_int_should_raise_valueerror",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel0Xml.test_key_exists_should_return_filled_dict": {
            "name": "test_key_exists_should_return_filled_dict",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel0Xml.test_key_not_exists_should_return_empty_dict": {
            "name": "test_key_not_exists_should_return_empty_dict",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel0Xml.test_key_exists_twice_should_raise_attributeerror": {
            "name": "test_key_exists_twice_should_raise_attributeerror",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_single_search_key_tag_prefix_single_tree_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_single_search_key_tag_prefix_single_tree_key_tag_prefix_should_return_filled_dict",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_single_search_key_no_tag_prefix_single_tree_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_single_search_key_no_tag_prefix_single_tree_key_tag_prefix_should_return_filled_dict",
            "location": 437,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_single_search_key_tag_prefix_single_tree_key_no_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_single_search_key_tag_prefix_single_tree_key_no_tag_prefix_should_return_filled_dict",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_single_search_key_no_tag_prefix_single_tree_key_no_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_single_search_key_no_tag_prefix_single_tree_key_no_tag_prefix_should_return_filled_dict",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_multiple_search_key_tag_prefix_multiple_tree_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_multiple_search_key_tag_prefix_multiple_tree_key_tag_prefix_should_return_filled_dict",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_multiple_search_key_no_tag_prefix_multiple_tree_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_multiple_search_key_no_tag_prefix_multiple_tree_key_tag_prefix_should_return_filled_dict",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_multiple_search_key_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_multiple_search_key_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_filled_dict",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_multiple_search_no_key_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_multiple_search_no_key_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_filled_dict",
            "location": 560,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_multiple_search_key_tag_prefix_multiple_tree_partially_no_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_multiple_search_key_tag_prefix_multiple_tree_partially_no_key_tag_prefix_should_return_filled_dict",
            "location": 585,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_multiple_search_key_partially_tag_prefix_multiple_tree_partially_no_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_multiple_search_key_partially_tag_prefix_multiple_tree_partially_no_key_tag_prefix_should_return_filled_dict",
            "location": 610,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_multiple_search_key_partially_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_multiple_search_key_partially_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_filled_dict",
            "location": 635,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_less_search_no_key_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_less_search_no_key_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_filled_dict",
            "location": 660,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_multiple_search_no_key_tag_prefix_less_tree_no_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_multiple_search_no_key_tag_prefix_less_tree_no_key_tag_prefix_should_return_filled_dict",
            "location": 683,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_exists_wrong_search_no_key_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_empty_dict": {
            "name": "test_key_exists_wrong_search_no_key_tag_prefix_multiple_tree_no_key_tag_prefix_should_return_empty_dict",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel1Xml.test_key_not_exists_should_return_empty_dict": {
            "name": "test_key_not_exists_should_return_empty_dict",
            "location": 729,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel3Xml.test_key_exists_single_search_key_tag_prefix_single_tree_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_single_search_key_tag_prefix_single_tree_key_tag_prefix_should_return_filled_dict",
            "location": 755,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel3Xml.test_key_exists_single_search_key_no_tag_prefix_single_tree_key_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_single_search_key_no_tag_prefix_single_tree_key_tag_prefix_should_return_filled_dict",
            "location": 773,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel3Xml.test_key_exists_single_search_key_tag_prefix_single_tree_key_no_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_single_search_key_tag_prefix_single_tree_key_no_tag_prefix_should_return_filled_dict",
            "location": 791,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel3Xml.test_key_exists_single_search_key_no_tag_prefix_single_tree_key_no_tag_prefix_should_return_filled_dict": {
            "name": "test_key_exists_single_search_key_no_tag_prefix_single_tree_key_no_tag_prefix_should_return_filled_dict",
            "location": 809,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel3Xml.test_key_not_exists_should_return_empty_dict": {
            "name": "test_key_not_exists_should_return_empty_dict",
            "location": 827,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel3Xml.test_nesting_1_should_return_empty_dict": {
            "name": "test_nesting_1_should_return_empty_dict",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel3Xml.test_nesting_2_should_return_empty_dict": {
            "name": "test_nesting_2_should_return_empty_dict",
            "location": 873,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel3Xml.test_nesting_3_wrong_key_should_return_empty_dict": {
            "name": "test_nesting_3_wrong_key_should_return_empty_dict",
            "location": 895,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLevel3Xml.test_nesting_4_wrong_key_should_return_empty_dict": {
            "name": "test_nesting_4_wrong_key_should_return_empty_dict",
            "location": 920,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetKeyWithouPrefix.test_key_with_prefix_should_return_key_without_prefix": {
            "name": "test_key_with_prefix_should_return_key_without_prefix",
            "location": 947,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetKeyWithouPrefix.test_key_without_prefix_should_return_key_without_prefix": {
            "name": "test_key_without_prefix_should_return_key_without_prefix",
            "location": 951,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetKeyWithouPrefix.test_key_with_leading_trailing_whitespaces_should_return_key_without_leading_trailing_whitespaces": {
            "name": "test_key_with_leading_trailing_whitespaces_should_return_key_without_leading_trailing_whitespaces",
            "location": 955,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetKeyWithouPrefix.test_key_with_leading_trailing_underscore_should_return_key_without_leading_trailing_underscore": {
            "name": "test_key_with_leading_trailing_underscore_should_return_key_without_leading_trailing_underscore",
            "location": 959,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetKeyWithouPrefix.test_key_with_mixed_leading_trailing_underscore_should_return_key_without_leading_trailing_underscore": {
            "name": "test_key_with_mixed_leading_trailing_underscore_should_return_key_without_leading_trailing_underscore",
            "location": 963,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecursiveNode.level_func_dict": {
            "name": "level_func_dict",
            "location": 971,
            "return": [
                "List[str]",
                "int",
                "Optional[List[str]]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecursiveNode.root": {
            "name": "root",
            "location": 980,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRecursiveNode.test_nested_node_key_value_should_return_filled_dict": {
            "name": "test_nested_node_key_value_should_return_filled_dict",
            "location": 1011,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level_func_dict": [],
                "root": []
            }
        },
        "TestRecursiveNode.test_nested_node_level_0_should_return_filled_dict": {
            "name": "test_nested_node_level_0_should_return_filled_dict",
            "location": 1024,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level_func_dict": [],
                "root": []
            }
        },
        "TestRecursiveNode.test_nested_node_level_1_should_return_filled_dict": {
            "name": "test_nested_node_level_1_should_return_filled_dict",
            "location": 1032,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level_func_dict": [],
                "root": []
            }
        },
        "TestRecursiveNode.test_nested_node_level_3_should_return_filled_dict": {
            "name": "test_nested_node_level_3_should_return_filled_dict",
            "location": 1040,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level_func_dict": [],
                "root": []
            }
        },
        "TestLoadXML.level_dict": {
            "name": "level_dict",
            "location": 1052,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[int, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadXML.test_epu_1_8_falcon_should_return_filled_dict": {
            "name": "test_epu_1_8_falcon_should_return_filled_dict",
            "location": 1087,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level_dict": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLoadXML.test_epu_1_11_falcon_should_return_filled_dict": {
            "name": "test_epu_1_11_falcon_should_return_filled_dict",
            "location": 1139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level_dict": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLoadXML.test_epu_1_11_falcon_vpp_should_return_filled_dict": {
            "name": "test_epu_1_11_falcon_vpp_should_return_filled_dict",
            "location": 1192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level_dict": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "TestLoadXML.test_epu_1_8_k2_should_return_filled_dict": {
            "name": "test_epu_1_8_k2_should_return_filled_dict",
            "location": 1247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level_dict": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLoadXML.test_epu_1_9_k2_should_return_filled_dict": {
            "name": "test_epu_1_9_k2_should_return_filled_dict",
            "location": 1298,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level_dict": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "transphire_transform-master/transphire_transform/dump_load/tests/__init__.py": {}
}
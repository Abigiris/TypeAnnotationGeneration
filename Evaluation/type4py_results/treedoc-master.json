{
    "treedoc-master/setup.py": {},
    "treedoc-master/treedoc/main.py": {
        "treedoc": {
            "name": "treedoc",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "setup_argumentparser": {
            "name": "setup_argumentparser",
            "location": 72,
            "return": [
                "argparse._SubParsersAction",
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "printers": [
                    "List[str]",
                    "Callable",
                    "list",
                    "str"
                ]
            }
        },
        "CLI_entrypoint": {
            "name": "CLI_entrypoint",
            "location": 225,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "treedoc-master/treedoc/printing.py": {
        "_describe": {
            "name": "_describe",
            "location": 313,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "describe": {
            "name": "describe",
            "location": 349,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_docstring": {
            "name": "get_docstring",
            "location": 354,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "clean_object_stack": {
            "name": "clean_object_stack",
            "location": 397,
            "return": [],
            "arguments": {
                "stack": []
            }
        },
        "_get_name": {
            "name": "_get_name",
            "location": 430,
            "return": [],
            "arguments": {
                "param": []
            }
        },
        "_between": {
            "name": "_between",
            "location": 438,
            "return": [],
            "arguments": {
                "string": [],
                "start": [],
                "end": []
            }
        },
        "signature_from_docstring": {
            "name": "signature_from_docstring",
            "location": 455,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "format_signature": {
            "name": "format_signature",
            "location": 498,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_format_signature": {
            "name": "_format_signature",
            "location": 541,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "resolve_str_to_obj": {
            "name": "resolve_str_to_obj",
            "location": 633,
            "return": [],
            "arguments": {
                "object_string": []
            }
        },
        "resolve_input": {
            "name": "resolve_input",
            "location": 701,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "PrinterABC.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrinterABC.format_iterable": {
            "name": "format_iterable",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "Printer.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Printer._validate_obj_stack": {
            "name": "_validate_obj_stack",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "stack": []
            }
        },
        "DensePrinter._get_docstring": {
            "name": "_get_docstring",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DensePrinter._format_signature": {
            "name": "_format_signature",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DensePrinter.format_iterable": {
            "name": "format_iterable",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "DensePrinter._format_row": {
            "name": "_format_row",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "TreePrinter._get_docstring": {
            "name": "_get_docstring",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TreePrinter._format_signature": {
            "name": "_format_signature",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TreePrinter.format_iterable": {
            "name": "format_iterable",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "TreePrinter._format_row": {
            "name": "_format_row",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": [],
                "depth": [],
                "print_stack": []
            }
        }
    },
    "treedoc-master/treedoc/traversal.py": {
        "is_inspectable": {
            "name": "is_inspectable",
            "location": 394,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_propersubpackage": {
            "name": "is_propersubpackage",
            "location": 400,
            "return": [],
            "arguments": {
                "package_a": [],
                "package_b": []
            }
        },
        "is_subpackage": {
            "name": "is_subpackage",
            "location": 415,
            "return": [],
            "arguments": {
                "package_a": [],
                "package_b": []
            }
        },
        "is_dunder_method": {
            "name": "is_dunder_method",
            "location": 434,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_private": {
            "name": "is_private",
            "location": 443,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_test": {
            "name": "is_test",
            "location": 454,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_package": {
            "name": "is_package",
            "location": 464,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "descend_from_package": {
            "name": "descend_from_package",
            "location": 472,
            "return": [],
            "arguments": {
                "package": []
            }
        },
        "ObjectTraverser.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObjectTraverser.search": {
            "name": "search",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ObjectTraverser._p": {
            "name": "_p",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObjectTraverser.recurse_to_child_object": {
            "name": "recurse_to_child_object",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObjectTraverser.recurse_to_object": {
            "name": "recurse_to_object",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ObjectTraverser._search": {
            "name": "_search",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObjectTraverser._search.unique_first": {
            "name": "unique_first",
            "location": 311,
            "return": [],
            "arguments": {
                "gen1": [],
                "gen2": []
            }
        }
    },
    "treedoc-master/treedoc/utils.py": {
        "get_terminal_size": {
            "name": "get_terminal_size",
            "location": 82,
            "return": [
                "int",
                "List[List[int]]",
                "List[str]",
                "str",
                "Tuple[List[Any], List[Any]]"
            ],
            "arguments": {
                "fallback": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "PrintMixin.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peekable.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "float",
                    "bool"
                ]
            }
        },
        "Peekable.__iter__": {
            "name": "__iter__",
            "location": 50,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peekable.__bool__": {
            "name": "__bool__",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peekable.peek": {
            "name": "peek",
            "location": 60,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "Sequence[Any]"
                ]
            }
        },
        "Peekable.__next__": {
            "name": "__next__",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "treedoc-master/treedoc/utils_deprecated.py": {
        "is_method": {
            "name": "is_method",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "is_bound_method": {
            "name": "is_bound_method",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool",
                    "Callable[..., Awaitable]",
                    "int"
                ]
            }
        },
        "inspect_classify": {
            "name": "inspect_classify",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "treedoc-master/treedoc/__init__.py": {},
    "treedoc-master/treedoc/__main__.py": {},
    "treedoc-master/treedoc/tests/setup.py": {},
    "treedoc-master/treedoc/tests/test_CLI.py": {
        "test_cli_smoketests": {
            "name": "test_cli_smoketests",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "obj_string": [
                    "str"
                ]
            }
        },
        "test_cli_smoketests_famous_packages": {
            "name": "test_cli_smoketests_famous_packages",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "library": [
                    "str"
                ]
            }
        },
        "_generate_cli_args": {
            "name": "_generate_cli_args",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "test_cli_smoketests_w_args": {
            "name": "test_cli_smoketests_w_args",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "arg_string": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "treedoc-master/treedoc/tests/test_printing.py": {
        "map_itemgetter": {
            "name": "map_itemgetter",
            "location": 216,
            "return": [],
            "arguments": {
                "iterable": [],
                "index": []
            }
        },
        "test_signature_from_docstring": {
            "name": "test_signature_from_docstring",
            "location": 231,
            "return": [],
            "arguments": {
                "input_arg": [],
                "expected": []
            }
        },
        "test_get_docstring": {
            "name": "test_get_docstring",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "TestTreePrinterRowFormatting.test_row_formatting_ex1": {
            "name": "test_row_formatting_ex1",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreePrinterRowFormatting.test_row_formatting_ex2": {
            "name": "test_row_formatting_ex2",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreePrinterRowFormatting.test_row_formatting_ex3": {
            "name": "test_row_formatting_ex3",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_get_docstring.func": {
            "name": "func",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "TestObjectResolution.test_resolve_str_to_obj": {
            "name": "test_resolve_str_to_obj",
            "location": 322,
            "return": [],
            "arguments": {
                "input_arg": [],
                "expected": []
            }
        },
        "TestObjectResolution.test_resolve_str_to_obj_raises": {
            "name": "test_resolve_str_to_obj_raises",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "TestObjectResolution.test_resolve_str_to_obj_from_file": {
            "name": "test_resolve_str_to_obj_from_file",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "TestObjectResolution.test_resolve_input": {
            "name": "test_resolve_input",
            "location": 355,
            "return": [],
            "arguments": {
                "input_arg": [],
                "expected": []
            }
        },
        "TestObjectResolution.test_resolve_input_raises": {
            "name": "test_resolve_input_raises",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "TestSignature.test_keywords_annotated_defaults_args_kwargs": {
            "name": "test_keywords_annotated_defaults_args_kwargs",
            "location": 385,
            "return": [],
            "arguments": {
                "verbosity": [],
                "expected": []
            }
        },
        "TestSignature.test_empty_signature": {
            "name": "test_empty_signature",
            "location": 397,
            "return": [],
            "arguments": {
                "verbosity": [],
                "expected": []
            }
        },
        "TestSignature.test_builtin_class": {
            "name": "test_builtin_class",
            "location": 418,
            "return": [],
            "arguments": {
                "verbosity": [],
                "expected": []
            }
        },
        "TestSignature.test_method": {
            "name": "test_method",
            "location": 428,
            "return": [],
            "arguments": {
                "verbosity": [],
                "expected": []
            }
        },
        "TestSignature.test_static_method": {
            "name": "test_static_method",
            "location": 452,
            "return": [],
            "arguments": {
                "verbosity": [],
                "expected": []
            }
        },
        "TestSignature.test_width_restriction": {
            "name": "test_width_restriction",
            "location": 468,
            "return": [],
            "arguments": {}
        },
        "TestSignature.test_keywords_annotated_defaults_args_kwargs.myfunc1": {
            "name": "myfunc1",
            "location": 390,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "TestSignature.test_empty_signature.myfunc2": {
            "name": "myfunc2",
            "location": 402,
            "return": [],
            "arguments": {}
        }
    },
    "treedoc-master/treedoc/tests/test_traversal.py": {
        "map_itemgetter": {
            "name": "map_itemgetter",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_is_package": {
            "name": "test_is_package",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestObjectTraverser.test_recusion_subpackages": {
            "name": "test_recusion_subpackages",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "modules": [
                    "List[str]",
                    "str",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        },
        "TestObjectTraverser.test_recusion_subpackages_never_up": {
            "name": "test_recusion_subpackages_never_up",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "subpackages": [
                    "str"
                ],
                "modules": [
                    "str"
                ]
            }
        },
        "TestObjectTraverser.test_recusion_never_other_packages": {
            "name": "test_recusion_never_other_packages",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "subpackages": [
                    "type",
                    "str"
                ],
                "modules": [
                    "type",
                    "str"
                ]
            }
        },
        "TestObjectTraverser.test_recusion_modules": {
            "name": "test_recusion_modules",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "subpackages": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestObjectTraverser.test_recusion_to_objs_only_where_defined": {
            "name": "test_recusion_to_objs_only_where_defined",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "subpackages": [
                    "str",
                    "set"
                ],
                "modules": [
                    "str",
                    "set"
                ]
            }
        },
        "TestObjectTraverser.test_recursion_objs_same_level": {
            "name": "test_recursion_objs_same_level",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "subpackages": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestObjectTraverser.test_recursion_objs_lower_level": {
            "name": "test_recursion_objs_lower_level",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "modules": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestObjectTraverser.test_recursion_composite_classes": {
            "name": "test_recursion_composite_classes",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "subpackages": [
                    "str",
                    "int"
                ],
                "modules": [
                    "str",
                    "int"
                ]
            }
        },
        "TestDescendFromPackage.test_package_to_subpackages": {
            "name": "test_package_to_subpackages",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestDescendFromPackage.test_package_to_modules": {
            "name": "test_package_to_modules",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestDescendFromPackage.test_package_to_modules_w_private": {
            "name": "test_package_to_modules_w_private",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "treedoc-master/treedoc/tests/test_utils.py": {},
    "treedoc-master/treedoc/tests/__init__.py": {},
    "treedoc-master/treedoc/tests/treedoctestpackage/module.py": {
        "func_addition": {
            "name": "func_addition",
            "location": 24,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ],
                "b": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ]
            }
        },
        "func_using_imported": {
            "name": "func_using_imported",
            "location": 29,
            "return": [
                "tuple",
                "List[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "str",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "func_many_args": {
            "name": "func_many_args",
            "location": 36,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool"
                ],
                "b": [
                    "int",
                    "List[int]"
                ],
                "c": [
                    "int",
                    "List[int]"
                ],
                "d": [
                    "int",
                    "bool"
                ]
            }
        },
        "func_many_long_args": {
            "name": "func_many_long_args",
            "location": 41,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "Iterable[str]"
                ],
                "num": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "Iterable[str]"
                ],
                "name": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "Iterable[str]"
                ],
                "pi": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "Iterable[str]"
                ],
                "place": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "Iterable[str]"
                ],
                "e": [
                    "str",
                    "float",
                    "int",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "generator": {
            "name": "generator",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "func_wrapped_w_wrapper_from_other_module": {
            "name": "func_wrapped_w_wrapper_from_other_module",
            "location": 64,
            "return": [
                "Callable[[T], T]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "Iterator[int]"
                ]
            }
        },
        "SubClass.subclass_method": {
            "name": "subclass_method",
            "location": 20,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyClass.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyClass.method_bound_to_myclass": {
            "name": "method_bound_to_myclass",
            "location": 77,
            "return": [
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Optional[List[str]]"
                ],
                "b": [
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "MyClass.classmethod_bound_to_myclass": {
            "name": "classmethod_bound_to_myclass",
            "location": 82,
            "return": [
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "1"
                ],
                "a": [
                    "int",
                    "float",
                    "1"
                ],
                "b": [
                    "int",
                    "float",
                    "1"
                ]
            }
        },
        "MyClass.static_method_bound_to_myclass": {
            "name": "static_method_bound_to_myclass",
            "location": 87,
            "return": [
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "str"
                ],
                "b": [
                    "int",
                    "str"
                ]
            }
        },
        "MyClass.__add__": {
            "name": "__add__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T"
                ]
            }
        }
    },
    "treedoc-master/treedoc/tests/treedoctestpackage/module2.py": {
        "function_nested_outer": {
            "name": "function_nested_outer",
            "location": 11,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "type"
                ]
            }
        },
        "function_with_inner_class": {
            "name": "function_with_inner_class",
            "location": 18,
            "return": [
                "T",
                "Iterable",
                "Type"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Type[T]",
                    "str",
                    "Callable[..., T]"
                ]
            }
        },
        "function_which_will_become_staticmethod": {
            "name": "function_which_will_become_staticmethod",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T], Any]"
                ]
            }
        },
        "func_wrapped": {
            "name": "func_wrapped",
            "location": 38,
            "return": [
                "float",
                "T",
                "Iterable[int]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "function_nested_outer.function_nested_inner": {
            "name": "function_nested_inner",
            "location": 12,
            "return": [
                "T",
                "Iterable",
                "Type",
                "Tuple[float, float]",
                "str",
                "dict"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "type"
                ]
            }
        },
        "wrapper.wrapped": {
            "name": "wrapped",
            "location": 31,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "SuperClass.superclass_method": {
            "name": "superclass_method",
            "location": 48,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubClass.subclass_method": {
            "name": "subclass_method",
            "location": 55,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubSubClass.subsubclass_method": {
            "name": "subsubclass_method",
            "location": 60,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "treedoc-master/treedoc/tests/treedoctestpackage/_hidden_module.py": {
        "func_addition": {
            "name": "func_addition",
            "location": 13,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ],
                "b": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ]
            }
        },
        "func_many_args": {
            "name": "func_many_args",
            "location": 21,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool"
                ],
                "b": [
                    "int",
                    "List[int]"
                ],
                "c": [
                    "int",
                    "List[int]"
                ],
                "d": [
                    "int",
                    "bool"
                ]
            }
        },
        "generator": {
            "name": "generator",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "wrapper": {
            "name": "wrapper",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T], Any]"
                ]
            }
        },
        "func_wrapped": {
            "name": "func_wrapped",
            "location": 40,
            "return": [
                "float",
                "T",
                "Iterable[int]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "wrapper.wrapped": {
            "name": "wrapped",
            "location": 33,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "MyClass.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyClass.method_bound_to_myclass": {
            "name": "method_bound_to_myclass",
            "location": 48,
            "return": [
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "List[Type]",
                    "list",
                    "bool"
                ]
            }
        },
        "MyClass.classmethod_bound_to_myclass": {
            "name": "classmethod_bound_to_myclass",
            "location": 53,
            "return": [
                "float"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "Dict[str, Any]"
                ],
                "a": [
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "MyClass.static_method_bound_to_myclass": {
            "name": "static_method_bound_to_myclass",
            "location": 58,
            "return": [
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "List[Type]"
                ]
            }
        },
        "MyClass.__add__": {
            "name": "__add__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T"
                ]
            }
        }
    },
    "treedoc-master/treedoc/tests/treedoctestpackage/__init__.py": {},
    "treedoc-master/treedoc/tests/treedoctestpackage/subpackage/subpackagemodule.py": {
        "func_subtraction": {
            "name": "func_subtraction",
            "location": 12,
            "return": [
                "float",
                "T",
                "int"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ],
                "b": [
                    "bool",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ]
            }
        },
        "BinaryOperator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BinaryOperator.get_operator": {
            "name": "get_operator",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryOperator.set_operator": {
            "name": "set_operator",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "treedoc-master/treedoc/tests/treedoctestpackage/subpackage/_hidden_module.py": {
        "func_addition": {
            "name": "func_addition",
            "location": 12,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ],
                "b": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_hidden_func_addition": {
            "name": "_hidden_func_addition",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bytes",
                    "int"
                ],
                "b": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "treedoc-master/treedoc/tests/treedoctestpackage/subpackage/__init__.py": {},
    "treedoc-master/treedoc/tests/treedoctestpackage/subpackage/subsubpackage/subsubpackagemodule.py": {
        "func_addition": {
            "name": "func_addition",
            "location": 12,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ],
                "b": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ]
            }
        },
        "func_subtraction": {
            "name": "func_subtraction",
            "location": 17,
            "return": [
                "float",
                "T",
                "int"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ],
                "b": [
                    "bool",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ]
            }
        },
        "BinaryOperator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BinaryOperator.get_operator": {
            "name": "get_operator",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryOperator.set_operator": {
            "name": "set_operator",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "treedoc-master/treedoc/tests/treedoctestpackage/subpackage/subsubpackage/__init__.py": {},
    "treedoc-master/treedoc/tests/treedoctestpackage/subpackage2/subpackagefunctions.py": {
        "func_addition": {
            "name": "func_addition",
            "location": 12,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ],
                "b": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]"
                ]
            }
        },
        "func_subtraction": {
            "name": "func_subtraction",
            "location": 17,
            "return": [
                "float",
                "T",
                "int"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ],
                "b": [
                    "bool",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "str"
                ]
            }
        }
    },
    "treedoc-master/treedoc/tests/treedoctestpackage/subpackage2/__init__.py": {}
}
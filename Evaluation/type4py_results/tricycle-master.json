{
    "tricycle-master/setup.py": {},
    "tricycle-master/docs/source/conf.py": {},
    "tricycle-master/tricycle/_meta.py": {
        "ScopedObjectMeta.__new__": {
            "name": "__new__",
            "location": 26,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "mcls": [
                    "str"
                ],
                "clsname": [
                    "str"
                ],
                "bases": [
                    "str"
                ],
                "dct": [
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "BackgroundObject.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "tricycle-master/tricycle/_multi_cancel.py": {
        "MultiCancelScope.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiCancelScope.cancel_called": {
            "name": "cancel_called",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiCancelScope.shield": {
            "name": "shield",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "bool",
                    "str",
                    "Optional[float]",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "MultiCancelScope.cancel": {
            "name": "cancel",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiCancelScope.open_child": {
            "name": "open_child",
            "location": 76,
            "return": [
                "Iterable[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tricycle-master/tricycle/_rwlock.py": {
        "RWLock.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLock.locked": {
            "name": "locked",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLock.acquire_nowait": {
            "name": "acquire_nowait",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLock.release": {
            "name": "release",
            "location": 153,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLock._wake_all_readers": {
            "name": "_wake_all_readers",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLock.acquire_read_nowait": {
            "name": "acquire_read_nowait",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLock.acquire_write_nowait": {
            "name": "acquire_write_nowait",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLock.statistics": {
            "name": "statistics",
            "location": 266,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLock.read_biased": {
            "name": "read_biased",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "RWLock.acquire.abort_fn": {
            "name": "abort_fn",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "tricycle-master/tricycle/_service_nursery.py": {
        "_get_coroutine_or_flag_problem": {
            "name": "_get_coroutine_or_flag_problem",
            "location": 11,
            "return": [
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "async_fn": [
                    "tuple",
                    "Dict[str, Callable[[], None]]",
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "open_service_nursery.start_soon": {
            "name": "start_soon",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "async_fn": [
                    "Callable[..., Awaitable[Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "open_service_nursery.start.wrap_child.wrap_started": {
            "name": "wrap_started",
            "location": 120,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str",
                "Union[tuple, list]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "Union[str, bytes, Any]"
                ]
            }
        }
    },
    "tricycle-master/tricycle/_streams.py": {
        "BufferedReceiveStream.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferedReceiveStream.unget": {
            "name": "unget",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[List[str]]"
                ]
            }
        },
        "TextReceiveStream.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transport_stream": [
                    "int",
                    "trio.abc.ReceiveStream",
                    "bool",
                    "str"
                ],
                "encoding": [
                    "float",
                    "T",
                    "Optional[T]",
                    "Optional[List[str]]",
                    "Sequence[object]",
                    "Callable"
                ]
            }
        },
        "TextReceiveStream.encoding": {
            "name": "encoding",
            "location": 212,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextReceiveStream.errors": {
            "name": "errors",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[bytes, bytearray, str]"
                ]
            }
        },
        "TextReceiveStream.newlines": {
            "name": "newlines",
            "location": 224,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextReceiveStream.__init__.make_decoder": {
            "name": "make_decoder",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "encoding": [
                    "Optional[str]",
                    "str",
                    "Optional[Type]"
                ],
                "errors": [
                    "bool",
                    "Exception",
                    "Type[BaseException]",
                    "List[Tuple[str, str]]",
                    "dict"
                ],
                "universal": [
                    "bool"
                ],
                "translate": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "tricycle-master/tricycle/_version.py": {},
    "tricycle-master/tricycle/__init__.py": {},
    "tricycle-master/tricycle/_tests/conftest.py": {},
    "tricycle-master/tricycle/_tests/test_meta.py": {
        "test_too_much_magic": {
            "name": "test_too_much_magic",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "async_yield": {
            "name": "async_yield",
            "location": 30,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "value": [
                    "ics.types.ContextDict",
                    "ics.types.ExtraParams",
                    "ics.types.DatetimeLike",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "test_mro": {
            "name": "test_mro",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Example.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_mro.D.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    },
    "tricycle-master/tricycle/_tests/test_multi_cancel.py": {
        "test_shielding.shield_child_after_parent_unshielded.abort_fn": {
            "name": "abort_fn",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "tricycle-master/tricycle/_tests/test_rwlock.py": {},
    "tricycle-master/tricycle/_tests/test_service_nursery.py": {
        "test_problems.evil": {
            "name": "evil",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "tricycle-master/tricycle/_tests/test_streams.py": {},
    "tricycle-master/tricycle/_tests/__init__.py": {}
}
{
    "twdft-master/setup.py": {},
    "twdft-master/template_script.py": {},
    "twdft-master/tests/conftest.py": {
        "bad_site_names": {
            "name": "bad_site_names",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable[..., Awaitable[dict]]"
                ]
            }
        },
        "date_location": {
            "name": "date_location",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Iterator"
                ]
            }
        },
        "date_time_location": {
            "name": "date_time_location",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Iterator"
                ]
            }
        },
        "date_natural_location": {
            "name": "date_natural_location",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "date_time_natural_location": {
            "name": "date_time_natural_location",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_db": {
            "name": "test_db",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "twdft-master/tests/test_adding_task.py": {
        "test_basic_inspection_with_date": {
            "name": "test_basic_inspection_with_date",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "date_location": [
                    "int",
                    "Union[str, int, float]",
                    "str"
                ]
            }
        },
        "test_no_command_issued": {
            "name": "test_no_command_issued",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "date_natural_location": [
                    "str"
                ]
            }
        },
        "test_basic_inspection_with_natural_date_and_time_and_location": {
            "name": "test_basic_inspection_with_natural_date_and_time_and_location",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "date_time_natural_location": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "twdft-master/tests/test_database.py": {
        "test_initial_set_up": {
            "name": "test_initial_set_up",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_site_name": {
            "name": "test_get_site_name",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "test_db": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_get_inspector_name": {
            "name": "test_get_inspector_name",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "test_db": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_get_inspection_data": {
            "name": "test_get_inspection_data",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "test_db": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_double_inspector_tuple": {
            "name": "test_double_inspector_tuple",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "test_db": [
                    "str",
                    "int"
                ]
            }
        },
        "test_treble_inspector_tuple": {
            "name": "test_treble_inspector_tuple",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "test_db": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "twdft-master/tests/test_report.py": {
        "test_cell_padding": {
            "name": "test_cell_padding",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_report": {
            "name": "test_report",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "twdft-master/tests/test_unit.py": {
        "test_clean_bad_site_names": {
            "name": "test_clean_bad_site_names",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "bad_site_names": [
                    "str"
                ]
            }
        }
    },
    "twdft-master/tests/__init__.py": {},
    "twdft-master/twdft/database.py": {
        "conv_site_name_to_id": {
            "name": "conv_site_name_to_id",
            "location": 12,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "site": [
                    "str",
                    "int",
                    "Union[dict, List[dict]]",
                    "datetime.timedelta"
                ]
            }
        },
        "create_db_entry": {
            "name": "create_db_entry",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "site": [
                    "str",
                    "int"
                ],
                "inspection_date": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Union[None, int, str]"
                ],
                "inspection_time": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Union[None, int, str]"
                ],
                "inspection_status": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Union[None, int, str]"
                ],
                "inspectors": [
                    "Dict[str, str]",
                    "Iterable",
                    "int",
                    "str",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "bool"
                ]
            }
        },
        "clean_inspection_freq_data": {
            "name": "clean_inspection_freq_data",
            "location": 90,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "dict",
                "Union[List, Dict]",
                "Dict[str, str]",
                "bool",
                "Tuple[float, float]"
            ],
            "arguments": {
                "data": [
                    "list",
                    "int",
                    "str",
                    "Dict[str, List[Dict]]"
                ],
                "sortkey": [
                    "str",
                    "dict",
                    "List[int]",
                    "Optional[Dict]",
                    "bool",
                    "Dict[str, Any]",
                    "T"
                ],
                "limit": [
                    "int",
                    "Optional[str]",
                    "list",
                    "Tuple[int, int, int]"
                ],
                "filter": [
                    "str",
                    "int",
                    "Callable[[int], str]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "get_inspection_periods_all_sites": {
            "name": "get_inspection_periods_all_sites",
            "location": 140,
            "return": [
                "List[str]",
                "str",
                "dict",
                "set",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "db_name": [
                    "str"
                ],
                "team": [
                    "str"
                ]
            }
        },
        "get_inspection_periods": {
            "name": "get_inspection_periods",
            "location": 161,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "db_name": [
                    "str"
                ],
                "site_name": [
                    "str"
                ]
            }
        },
        "initial_db_setup": {
            "name": "initial_db_setup",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "convert_date_str": {
            "name": "convert_date_str",
            "location": 332,
            "return": [
                "datetime.date",
                "Optional[str]",
                "str",
                "int",
                "bool",
                "datetime.datetime",
                "Tuple[str, str]"
            ],
            "arguments": {
                "date_str": [
                    "str",
                    "list",
                    "List[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "days_since": {
            "name": "days_since",
            "location": 344,
            "return": [
                "int",
                "str",
                "List[str]",
                "datetime.date",
                "Optional[str]"
            ],
            "arguments": {
                "d": [
                    "datetime.date",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "days_in_frequency_target": {
            "name": "days_in_frequency_target",
            "location": 349,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "target": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "twdft-master/twdft/env.py": {},
    "twdft-master/twdft/helpers.py": {
        "inspection_line": {
            "name": "inspection_line",
            "location": 21,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "inspection_id": [
                    "int",
                    "str"
                ],
                "db_file": [
                    "Union[str, None]",
                    "bytes",
                    "int",
                    "str",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "get_inspection_data": {
            "name": "get_inspection_data",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "clean_date": {
            "name": "clean_date",
            "location": 67,
            "return": [
                "datetime.datetime",
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "date": [
                    "datetime.datetime",
                    "str",
                    "datetime.date",
                    "Optional[datetime.date]"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_card": {
            "name": "create_card",
            "location": 122,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "type",
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "inspection_name": [
                    "dict",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool"
                ],
                "inspection_date": [
                    "str",
                    "int",
                    "Optional[datetime.datetime]",
                    "Dict[str, Any]"
                ],
                "inspection_time": [
                    "str",
                    "int",
                    "Optional[datetime.datetime]",
                    "Dict[str, Any]"
                ],
                "inspectors": [
                    "str",
                    "int",
                    "Optional[datetime.datetime]",
                    "Dict[str, Any]"
                ],
                "open_card": [
                    "bool",
                    "int",
                    "str"
                ],
                "verbose": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "clean_site_name_for_path": {
            "name": "clean_site_name_for_path",
            "location": 220,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "site_name": [
                    "str"
                ]
            }
        },
        "get_card_file": {
            "name": "get_card_file",
            "location": 239,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "task_number": [
                    "str",
                    "prefeccore.Task",
                    "taskiapplication.models.task.Task",
                    "asyncio.Task",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "task_card_path": {
            "name": "task_card_path",
            "location": 257,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "uuid.UUID"
                ]
            }
        },
        "get_inspection_status_choices": {
            "name": "get_inspection_status_choices",
            "location": 308,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "completion_facility_names": {
            "name": "completion_facility_names",
            "location": 319,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Container[str]"
            ],
            "arguments": {}
        },
        "lookup_site_data": {
            "name": "lookup_site_data",
            "location": 334,
            "return": [
                "Dict[str, List[int]]",
                "Optional[float]",
                "dict",
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "bytes",
                "float"
            ],
            "arguments": {
                "site": [
                    "int",
                    "bytes"
                ]
            }
        },
        "CardComment.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bytes"
                ],
                "comment": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "CardComment._get_task": {
            "name": "_get_task",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CardComment._get_now": {
            "name": "_get_now",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CardComment.write_to_card": {
            "name": "write_to_card",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "CardComment.__str__": {
            "name": "__str__",
            "location": 304,
            "return": [
                "str",
                "Optional[uuid.UUID]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "twdft-master/twdft/report.py": {
        "Report.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "List[str]",
                    "bytes"
                ],
                "titles": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[dict]",
                    "Optional[float]",
                    "bytes"
                ]
            }
        },
        "Report._create_presentation": {
            "name": "_create_presentation",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCell.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "Iterable[Tuple[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "ReportHeader.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "MutableMapping"
                ]
            }
        },
        "ReportHeader.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "int",
                "dict",
                "Callable",
                "bytes",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportBody.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "ReportLine.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "int",
                    "Optional[Dict]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping",
                    "bytes",
                    "list"
                ]
            }
        }
    },
    "twdft-master/twdft/twdft.py": {
        "__complete_site": {
            "name": "__complete_site",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "cli": {
            "name": "cli",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "str"
                ],
                "verbose": [
                    "dict",
                    "str"
                ]
            }
        },
        "new": {
            "name": "new",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "list": {
            "name": "list",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "inspections": {
            "name": "inspections",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "inspection": {
            "name": "inspection",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ],
                "site": [
                    "str",
                    "int",
                    "bool"
                ],
                "inspectiondate": [
                    "dict",
                    "int"
                ],
                "inspectiontime": [
                    "str",
                    "int",
                    "bool"
                ],
                "opencard": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "mine": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "inspector": [
                    "str",
                    "int",
                    "bool"
                ],
                "inspectionstatus": [
                    "dict"
                ]
            }
        },
        "abort_if_false": {
            "name": "abort_if_false",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.core.Context",
                    "Union[click.core.Option, click.core.Parameter]"
                ],
                "param": [
                    "click.Parameter",
                    "str",
                    "Union[click.Option, click.Parameter]",
                    "Tuple[str]"
                ],
                "value": [
                    "click.Parameter",
                    "str",
                    "Union[click.Option, click.Parameter]",
                    "Tuple[str]"
                ]
            }
        },
        "dropdb": {
            "name": "dropdb",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "rate": {
            "name": "rate",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "sortkey": [
                    "dict"
                ],
                "limit": [
                    "dict"
                ],
                "filter": [
                    "bool",
                    "int",
                    "bytes"
                ],
                "team": [
                    "Dict[str, Any]",
                    "NamedTuple",
                    "str",
                    "bool"
                ]
            }
        },
        "comment": {
            "name": "comment",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Iterable[prefeccore.task.Task]",
                    "Optional[Union[str, Any]]"
                ],
                "task_id": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "bool",
                    "Optional[float]"
                ],
                "comment": [
                    "str",
                    "bytes"
                ]
            }
        },
        "flip": {
            "name": "flip",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "task_number": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "edit": {
            "name": "edit",
            "location": 351,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "task_number": [
                    "models.Task",
                    "asyncio.Task",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "inspectionstatus": [
                    "List[int]",
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Type[T]",
                    "List[dict]",
                    "str",
                    "bool"
                ],
                "task_number": [
                    "Task",
                    "str",
                    "dict",
                    "IO[str]"
                ]
            }
        },
        "pdf": {
            "name": "pdf",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "task_number": [
                    "models.Task",
                    "asyncio.Task",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "destination_directory": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "twdft-master/twdft/__init__.py": {}
}
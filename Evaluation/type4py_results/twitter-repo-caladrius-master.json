{
    "twitter-repo-caladrius-master/app.py": {
        "_create_parser": {
            "name": "_create_parser",
            "location": 22,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        }
    },
    "twitter-repo-caladrius-master/loader.py": {
        "get_class": {
            "name": "get_class",
            "location": 14,
            "return": [
                "str",
                "Set[str]",
                "List[str]",
                "Iterator[str]"
            ],
            "arguments": {
                "class_path": [
                    "str"
                ]
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 52,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "get_model_classes": {
            "name": "get_model_classes",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, Any]",
                    "Type[T]"
                ],
                "dsps_name": [
                    "str",
                    "Dict[str, Any]",
                    "Type[T]"
                ],
                "model_type": [
                    "str",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/logs.py": {
        "setup": {
            "name": "setup",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "console": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "dict"
                ],
                "logfile": [
                    "str",
                    "logging.Logger",
                    "bytes",
                    "bool"
                ],
                "debug": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/__init__.py": {},
    "twitter-repo-caladrius-master/api/router.py": {
        "create_router": {
            "name": "create_router",
            "location": 26,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "neuromation.api.login._AuthConfig",
                    "dict",
                    "config.Config"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/api/utils.py": {
        "convert_wimd_to_dict": {
            "name": "convert_wimd_to_dict",
            "location": 11,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "wimd": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/api/__init__.py": {},
    "twitter-repo-caladrius-master/api/model/__init__.py": {},
    "twitter-repo-caladrius-master/api/model/topology/heron.py": {
        "HeronTopologyModels.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_classes": [
                    "List[Type]",
                    "bool",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "HeronTopologyModels.get": {
            "name": "get",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeronCurrent.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_classes": [
                    "List[Type]",
                    "bool",
                    "Optional[str]"
                ],
                "model_config": [
                    "List[str]",
                    "Union[Callable, str]",
                    "Exception",
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "metrics_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "raiden.utils.PaymentNetworkID"
                ],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "raiden.utils.PaymentNetworkID"
                ],
                "tracker_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "HeronCurrent.post": {
            "name": "post",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "int"
                ]
            }
        },
        "HeronCurrent.get": {
            "name": "get",
            "location": 161,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "HeronProposed.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_classes": [
                    "List[Type]",
                    "bool",
                    "str"
                ],
                "model_config": [
                    "Dict[str, Any]",
                    "NamedTuple",
                    "int",
                    "Union[Callable, str]",
                    "Exception",
                    "bool",
                    "str"
                ],
                "traffic_config": [
                    "Dict[str, Any]",
                    "NamedTuple",
                    "List[Tuple[str, str, str, str, str, str, str]]",
                    "bool",
                    "List[Tuple[str, str, str, Any, int]]"
                ],
                "metrics_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "raiden.utils.PaymentNetworkID",
                    "src.api.AccountProfile"
                ],
                "tracker_url": [
                    "str"
                ]
            }
        },
        "HeronProposed.get": {
            "name": "get",
            "location": 274,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "int"
                ],
                "traffic_source": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/api/model/topology/__init__.py": {},
    "twitter-repo-caladrius-master/api/model/traffic/heron.py": {
        "HeronTrafficModels.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_classes": [
                    "List[Type]",
                    "bool",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "HeronTrafficModels.get": {
            "name": "get",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeronTraffic.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_classes": [
                    "List[Type]",
                    "bool",
                    "Optional[str]"
                ],
                "model_config": [
                    "List[str]",
                    "Union[Callable, str]",
                    "Exception",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bool"
                ],
                "metrics_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "flask.Flask"
                ],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "tracker_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "HeronTraffic.get": {
            "name": "get",
            "location": 63,
            "return": [
                "Dict[str, Any]",
                "model.Integration",
                "IO",
                "str"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/api/model/traffic/__init__.py": {},
    "twitter-repo-caladrius-master/common/timestamp.py": {
        "get_window_dt_from_now": {
            "name": "get_window_dt_from_now",
            "location": 19,
            "return": [
                "int",
                "List[List[str]]",
                "bool",
                "str"
            ],
            "arguments": {
                "seconds": [
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "minutes": [
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "hours": [
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "days": [
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "calculate_ts_period": {
            "name": "calculate_ts_period",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "time_series": [
                    "float",
                    "Optional[str]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/common/__init__.py": {},
    "twitter-repo-caladrius-master/common/heron/tracker.py": {
        "get_topologies": {
            "name": "get_topologies",
            "location": 22,
            "return": [],
            "arguments": {
                "tracker_url": [],
                "cluster": [],
                "environ": []
            }
        },
        "get_logical_plan": {
            "name": "get_logical_plan",
            "location": 79,
            "return": [],
            "arguments": {
                "tracker_url": [],
                "cluster": [],
                "environ": [],
                "topology": []
            }
        },
        "get_physical_plan": {
            "name": "get_physical_plan",
            "location": 118,
            "return": [],
            "arguments": {
                "tracker_url": [],
                "cluster": [],
                "environ": [],
                "topology": []
            }
        },
        "get_packing_plan": {
            "name": "get_packing_plan",
            "location": 157,
            "return": [],
            "arguments": {
                "tracker_url": [],
                "cluster": [],
                "environ": [],
                "topology": []
            }
        },
        "parse_instance_name": {
            "name": "parse_instance_name",
            "location": 196,
            "return": [],
            "arguments": {
                "instance_name": []
            }
        },
        "get_topology_info": {
            "name": "get_topology_info",
            "location": 222,
            "return": [],
            "arguments": {
                "tracker_url": [],
                "cluster": [],
                "environ": [],
                "topology": []
            }
        },
        "get_metrics": {
            "name": "get_metrics",
            "location": 257,
            "return": [],
            "arguments": {
                "tracker_url": [],
                "cluster": [],
                "environ": [],
                "topology": [],
                "component": [],
                "interval": [],
                "metrics": []
            }
        },
        "get_metrics_timeline": {
            "name": "get_metrics_timeline",
            "location": 299,
            "return": [],
            "arguments": {
                "tracker_url": [],
                "cluster": [],
                "environ": [],
                "topology": [],
                "component": [],
                "start_time": [],
                "end_time": [],
                "metrics": []
            }
        },
        "issue_metrics_query": {
            "name": "issue_metrics_query",
            "location": 354,
            "return": [],
            "arguments": {
                "tracker_url": [],
                "cluster": [],
                "environ": [],
                "topology": [],
                "start_time": [],
                "end_time": [],
                "query": []
            }
        },
        "get_incoming_streams": {
            "name": "get_incoming_streams",
            "location": 405,
            "return": [],
            "arguments": {
                "logical_plan": [],
                "component_name": []
            }
        },
        "incoming_sources_and_streams": {
            "name": "incoming_sources_and_streams",
            "location": 425,
            "return": [],
            "arguments": {
                "logical_plan": [],
                "component_name": []
            }
        },
        "get_outgoing_streams": {
            "name": "get_outgoing_streams",
            "location": 447,
            "return": [],
            "arguments": {
                "logical_plan": [],
                "component_name": []
            }
        },
        "get_component_task_ids": {
            "name": "get_component_task_ids",
            "location": 473,
            "return": [],
            "arguments": {
                "tracker_url": [],
                "cluster": [],
                "environ": [],
                "topology": []
            }
        }
    },
    "twitter-repo-caladrius-master/common/heron/zookeeper.py": {
        "last_topo_update_ts_html": {
            "name": "last_topo_update_ts_html",
            "location": 30,
            "return": [
                "int",
                "Union[str, List[str]]",
                "Dict[str, Union[str, Any]]",
                "dict",
                "Dict[str, Tuple[int, int]]",
                "bool"
            ],
            "arguments": {
                "zk_connection": [
                    "str",
                    "Optional[str]"
                ],
                "zk_root_node": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[bool]"
                ],
                "topology_id": [
                    "str",
                    "Optional[str]"
                ],
                "zk_time_offset": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "last_topo_update_ts": {
            "name": "last_topo_update_ts",
            "location": 106,
            "return": [
                "int",
                "Union[str, List[str]]",
                "Dict[str, Union[str, Any]]",
                "dict",
                "Dict[str, Tuple[int, int]]",
                "bool"
            ],
            "arguments": {
                "zk_connection": [
                    "str"
                ],
                "zk_root_node": [
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "topology_id": [
                    "str"
                ],
                "zk_time_offset": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/common/heron/__init__.py": {},
    "twitter-repo-caladrius-master/config/keys.py": {},
    "twitter-repo-caladrius-master/config/__init__.py": {},
    "twitter-repo-caladrius-master/docs/source/conf.py": {},
    "twitter-repo-caladrius-master/graph/__init__.py": {},
    "twitter-repo-caladrius-master/graph/analysis/__init__.py": {},
    "twitter-repo-caladrius-master/graph/analysis/heron/arrival_rates.py": {
        "get_levels": {
            "name": "get_levels",
            "location": 40,
            "return": [
                "str",
                "bool",
                "Vertex"
            ],
            "arguments": {
                "topo_traversal": [
                    "gremlin_python.process.graph_traversal.GraphTraversalSource",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "_setup_arrival_calcs": {
            "name": "_setup_arrival_calcs",
            "location": 84,
            "return": [
                "int",
                "Optional[int]",
                "Dict[int, int]",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "metrics_client": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "graph_client": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "topology_id": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "topology_ref": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "io_bucket_length": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]"
                ],
                "tracker_url": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ]
            }
        },
        "_calculate_arrivals": {
            "name": "_calculate_arrivals",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "topo_traversal": [
                    "gremlin_python.process.graph_traversal.GraphTraversalSource",
                    "gremlin_python.structure.graph.Vertex",
                    "float",
                    "str",
                    "Optional[float]",
                    "int",
                    "Dict[str, Any]"
                ],
                "source_vertex": [
                    "gremlin_python.process.graph_traversal.GraphTraversalSource",
                    "gremlin_python.structure.graph.Vertex",
                    "float",
                    "str",
                    "Optional[float]",
                    "int",
                    "Dict[str, Any]"
                ],
                "arrival_rates": [
                    "str",
                    "bool",
                    "int"
                ],
                "output_rates": [
                    "DefaultDict[int, Dict[str, float]]",
                    "pandas.DataFrame",
                    "str",
                    "pandas.Series"
                ],
                "i2i_rps": [
                    "pandas.DataFrame",
                    "DefaultDict[int, Dict[str, float]]",
                    "str",
                    "pandas.Series"
                ]
            }
        },
        "_calculate_outputs": {
            "name": "_calculate_outputs",
            "location": 216,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {
                "topo_traversal": [
                    "gremlin_python.process.graph_traversal.GraphTraversalSource",
                    "gremlin_python.structure.graph.Vertex",
                    "int",
                    "Tuple[int]",
                    "Sequence[int]"
                ],
                "source_vertex": [
                    "gremlin_python.process.graph_traversal.GraphTraversalSource",
                    "gremlin_python.structure.graph.Vertex",
                    "int",
                    "Tuple[int]",
                    "Sequence[int]"
                ],
                "arrival_rates": [
                    "pandas.Series",
                    "bool",
                    "pandas.DataFrame",
                    "DefaultDict[int, Dict[str, float]]",
                    "int"
                ],
                "output_rates": [
                    "DefaultDict[int, Dict[str, float]]",
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "coefficients": [
                    "pandas.Series",
                    "pandas.DataFrame",
                    "bool",
                    "DefaultDict[int, Dict[str, float]]",
                    "int"
                ]
            }
        },
        "_convert_arrs_to_df": {
            "name": "_convert_arrs_to_df",
            "location": 275,
            "return": [],
            "arguments": {
                "arrival_rates": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, pandas.DataFrame]"
                ]
            }
        },
        "_calc_strmgr_in_out": {
            "name": "_calc_strmgr_in_out",
            "location": 292,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "sending_instances": [
                    "Dict[str, List[int]]",
                    "Dict[str, str]",
                    "str",
                    "IO[bytes]",
                    "Optional[float]"
                ],
                "receiving_instances": [
                    "Dict[str, List[int]]",
                    "Dict[str, str]",
                    "str",
                    "IO[bytes]",
                    "Optional[float]"
                ],
                "output_rates": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "arrival_rates": [
                    "str",
                    "Iterable[Iterable[float]]",
                    "int",
                    "Union[Iterable[str], str]"
                ]
            }
        },
        "calculate": {
            "name": "calculate",
            "location": 331,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "metrics_client": [
                    "str",
                    "Union[str, int, float]",
                    "int",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "topology_id": [
                    "str",
                    "Optional[str]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]",
                    "int",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]",
                    "int",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "topology_ref": [
                    "str",
                    "Optional[str]"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ],
                "io_bucket_length": [
                    "str",
                    "Union[str, int, float]",
                    "int",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "tracker_url": [
                    "str",
                    "Union[str, int, float]",
                    "int",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "spout_state": [
                    "Dict[int, Dict[str, float]]",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "List[Dict[str, Any]]",
                    "Mapping[str, str]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/graph/analysis/heron/io_ratios.py": {
        "get_in_out_components": {
            "name": "get_in_out_components",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "topology_id": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "lstsq_io_ratios": {
            "name": "lstsq_io_ratios",
            "location": 47,
            "return": [
                "pandas.Series",
                "bool",
                "pandas.DataFrame",
                "str"
            ],
            "arguments": {
                "metrics_client": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "datetime.date",
                    "Sequence[str]",
                    "int"
                ],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "environ": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ],
                "bucket_length": [
                    "int",
                    "Dict[str, int]",
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[float]",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/graph/analysis/heron/routing_probabilities.py": {
        "get_comp_links_by_grouping": {
            "name": "get_comp_links_by_grouping",
            "location": 29,
            "return": [
                "int",
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "graph_traversal": [
                    "str",
                    "gremlin_python.process.graph_traversal.GraphTraversalSource",
                    "List[Dict[str, str]]"
                ],
                "grouping": [
                    "str",
                    "gremlin_python.process.graph_traversal.GraphTraversalSource",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "set_shuffle_routing_probs": {
            "name": "set_shuffle_routing_probs",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "int"
                ],
                "topology_id": [
                    "str",
                    "Optional[IO[str]]",
                    "Optional[str]"
                ],
                "topology_ref": [
                    "str",
                    "Optional[IO[str]]",
                    "Optional[str]"
                ]
            }
        },
        "set_fields_routing_probs": {
            "name": "set_fields_routing_probs",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "metrics_client": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "topology_id": [
                    "str",
                    "datetime.datetime"
                ],
                "topology_ref": [
                    "str",
                    "datetime.datetime"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/graph/analysis/heron/__init__.py": {},
    "twitter-repo-caladrius-master/graph/builder/__init__.py": {},
    "twitter-repo-caladrius-master/graph/builder/heron/builder.py": {
        "_create_stream_managers": {
            "name": "_create_stream_managers",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_client": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "topology_id": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "topology_ref": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "physical_plan": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_create_spouts": {
            "name": "_create_spouts",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_client": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "topology_id": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "topology_ref": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "physical_plan": [
                    "Dict[str, Any]",
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Optional[str]"
                ],
                "logical_plan": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "_create_bolts": {
            "name": "_create_bolts",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_client": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "topology_id": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "topology_ref": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "physical_plan": [
                    "Dict[str, Any]",
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Optional[str]"
                ],
                "logical_plan": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bool",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "_create_logical_connections": {
            "name": "_create_logical_connections",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "datetime.datetime",
                    "int"
                ],
                "topology_id": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "topology_ref": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "datetime.datetime",
                    "int"
                ],
                "logical_plan": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "_create_physical_connections": {
            "name": "_create_physical_connections",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "topology_id": [
                    "str",
                    "Optional[str]"
                ],
                "topology_ref": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_physical_graph": {
            "name": "create_physical_graph",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "topology_id": [
                    "str",
                    "List[str]"
                ],
                "topology_ref": [
                    "str",
                    "List[str]"
                ],
                "logical_plan": [
                    "Dict[str, Any]",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "bool",
                    "str",
                    "datetime.datetime"
                ],
                "physical_plan": [
                    "Dict[str, Any]",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "bool"
                ]
            }
        },
        "populate_physical_graph": {
            "name": "populate_physical_graph",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str",
                    "Union[str, int, float]"
                ],
                "metrics_client": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime",
                    "Union[str, int, float]",
                    "str"
                ],
                "topology_id": [
                    "str",
                    "int"
                ],
                "topology_ref": [
                    "str",
                    "int"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/graph/builder/heron/__init__.py": {},
    "twitter-repo-caladrius-master/graph/gremlin/client.py": {
        "GremlinClient.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "graph_name": [
                    "str",
                    "int",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "GremlinClient.__hash__": {
            "name": "__hash__",
            "location": 40,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GremlinClient.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "GremlinClient.connect": {
            "name": "connect",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GremlinClient.topology_ref_exists": {
            "name": "topology_ref_exists",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "int",
                    "str",
                    "bytes",
                    "List[float]",
                    "Optional[str]"
                ],
                "topology_ref": [
                    "int",
                    "str",
                    "bytes",
                    "List[float]",
                    "Optional[str]"
                ]
            }
        },
        "GremlinClient.raise_if_missing": {
            "name": "raise_if_missing",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Optional[str]"
                ],
                "topology_ref": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GremlinClient.topology_subgraph": {
            "name": "topology_subgraph",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "bool"
                ],
                "topology_ref": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/graph/gremlin/__init__.py": {},
    "twitter-repo-caladrius-master/graph/utils/heron.py": {
        "find_all_paths": {
            "name": "find_all_paths",
            "location": 29,
            "return": [],
            "arguments": {
                "parent_to_child": [
                    "Optional[Pattern[str]]",
                    "Optional[Callable[[None], None]]",
                    "str",
                    "bytes"
                ],
                "start": [
                    "int",
                    "List[Union[Any, Any]]",
                    "list"
                ],
                "path": [
                    "str",
                    "Union[str, List]"
                ],
                "path_dict": [
                    "dict",
                    "Tuple[int, str]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "path_helper": {
            "name": "path_helper",
            "location": 54,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "parent_to_child": [
                    "str",
                    "multiprocessing.pool.ThreadPool"
                ],
                "spouts": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "get_all_paths": {
            "name": "get_all_paths",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "graph_client": [
                    "str"
                ],
                "topology_id": [
                    "str"
                ]
            }
        },
        "get_current_refs": {
            "name": "get_current_refs",
            "location": 111,
            "return": [
                "List[str]",
                "Set[str]",
                "FrozenSet[str]",
                "List[List[str]]",
                "AbstractSet[Type[object]]",
                "Optional[bool]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "graph_client": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ],
                "topology_id": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "most_recent_graph_ref": {
            "name": "most_recent_graph_ref",
            "location": 132,
            "return": [
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "graph_client": [
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "List[str]"
                ],
                "topology_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_physical_plan_still_current": {
            "name": "_physical_plan_still_current",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "topology_id": [
                    "str",
                    "Optional[str]"
                ],
                "most_recent_graph_ts": [
                    "bool",
                    "int",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[str]"
                ],
                "zk_connection": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "zk_root_node": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "zk_time_offset": [
                    "datetime.datetime",
                    "int",
                    "str"
                ]
            }
        },
        "_build_graph": {
            "name": "_build_graph",
            "location": 184,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "graph_client": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "tracker_url": [
                    "str"
                ],
                "cluster": [
                    "str"
                ],
                "environ": [
                    "str"
                ],
                "topology_id": [
                    "str"
                ],
                "ref_prefix": [
                    "str"
                ]
            }
        },
        "read_paths": {
            "name": "read_paths",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "zk_config": [
                    "bool",
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "str",
                    "List[int]"
                ],
                "topology_id": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "cluster": [
                    "str",
                    "allennlp.common.Params"
                ],
                "environ": [
                    "TextIO",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "paths_check": {
            "name": "paths_check",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "graph_client": [
                    "str",
                    "os.PathLike",
                    "Union[int, str]",
                    "Iterable[str]",
                    "bytes"
                ],
                "zk_config": [
                    "Optional[str]",
                    "int",
                    "datetime.datetime",
                    "Union[str, int, None]"
                ],
                "cluster": [
                    "bool",
                    "derex.builder.builders.buildah.BuildahBuilder",
                    "str"
                ],
                "environ": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "topology_id": [
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool",
                    "int"
                ]
            }
        },
        "graph_check": {
            "name": "graph_check",
            "location": 265,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "graph_client": [
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "type",
                    "bool",
                    "Optional[List[str]]",
                    "Sequence[str]",
                    "Optional[Dict[str, Dict]]",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "zk_config": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "tracker_url": [
                    "str",
                    "int",
                    "dict",
                    "float"
                ],
                "cluster": [
                    "str",
                    "int",
                    "dict",
                    "Literal"
                ],
                "environ": [
                    "str",
                    "int",
                    "dict",
                    "float"
                ],
                "topology_id": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "type"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/graph/utils/__init__.py": {},
    "twitter-repo-caladrius-master/metrics/client.py": {
        "MetricsClient.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "MetricsClient.__hash__": {
            "name": "__hash__",
            "location": 19,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsClient.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/metrics/__init__.py": {},
    "twitter-repo-caladrius-master/metrics/heron/client.py": {
        "HeronMetricsClient.get_service_times": {
            "name": "get_service_times",
            "location": 21,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_receive_counts": {
            "name": "get_receive_counts",
            "location": 29,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_emit_counts": {
            "name": "get_emit_counts",
            "location": 37,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_execute_counts": {
            "name": "get_execute_counts",
            "location": 45,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_complete_latencies": {
            "name": "get_complete_latencies",
            "location": 53,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_calculated_arrival_rates": {
            "name": "get_calculated_arrival_rates",
            "location": 62,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_incoming_queue_sizes": {
            "name": "get_incoming_queue_sizes",
            "location": 70,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ]
            }
        },
        "HeronMetricsClient.get_cpu_load": {
            "name": "get_cpu_load",
            "location": 80,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_gc_time": {
            "name": "get_gc_time",
            "location": 92,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_num_packets_received": {
            "name": "get_num_packets_received",
            "location": 100,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_packet_arrival_rate": {
            "name": "get_packet_arrival_rate",
            "location": 107,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_tuple_arrivals_at_stmgr": {
            "name": "get_tuple_arrivals_at_stmgr",
            "location": 116,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_end_to_end_latency": {
            "name": "get_end_to_end_latency",
            "location": 125,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "sink": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ]
            }
        },
        "HeronMetricsClient.get_outgoing_queue_processing_rate": {
            "name": "get_outgoing_queue_processing_rate",
            "location": 134,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_out_going_queue_arrival_rate": {
            "name": "get_out_going_queue_arrival_rate",
            "location": 142,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronMetricsClient.get_average_tuple_set_size_added_to_outgoing_queue": {
            "name": "get_average_tuple_set_size_added_to_outgoing_queue",
            "location": 150,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/metrics/heron/__init__.py": {},
    "twitter-repo-caladrius-master/metrics/heron/influxdb/client.py": {
        "create_db_name": {
            "name": "create_db_name",
            "location": 35,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "bool",
                    "Union[str, Dict[str, Any]]"
                ],
                "topology": [
                    "str",
                    "bool",
                    "Union[str, Dict[str, Any]]"
                ],
                "cluster": [
                    "str",
                    "bool",
                    "Union[str, Dict[str, Any]]"
                ],
                "environ": [
                    "str",
                    "bool",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "convert_rfc339_to_datetime": {
            "name": "convert_rfc339_to_datetime",
            "location": 54,
            "return": [
                "datetime.datetime",
                "str",
                "bool",
                "Optional[datetime.timedelta]",
                "datetime.date.time"
            ],
            "arguments": {
                "time_str": [
                    "str"
                ]
            }
        },
        "convert_datetime_to_rfc3339": {
            "name": "convert_datetime_to_rfc3339",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "dt_obj": [
                    "datetime.datetime",
                    "str",
                    "datetime.date"
                ]
            }
        },
        "HeronInfluxDBClient.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "HeronInfluxDBClient.__hash__": {
            "name": "__hash__",
            "location": 136,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeronInfluxDBClient.__eq__": {
            "name": "__eq__",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[int]",
                    "int",
                    "Union[int, List]",
                    "Union['FixedPoint', int]"
                ]
            }
        },
        "HeronInfluxDBClient.get_all_measurement_names": {
            "name": "get_all_measurement_names",
            "location": 163,
            "return": [
                "str",
                "Set[str]",
                "Pattern",
                "List[str]",
                "List[Tuple[str, Any]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Optional[str]"
                ],
                "cluster": [
                    "str",
                    "Optional[str]"
                ],
                "environ": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "HeronInfluxDBClient.get_metric_measurement_names": {
            "name": "get_metric_measurement_names",
            "location": 183,
            "return": [
                "str",
                "Optional[Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str"
                ],
                "metric_name": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "metric_regex": [
                    "str"
                ],
                "force": [
                    "str",
                    "bool"
                ]
            }
        },
        "HeronInfluxDBClient.get_service_times": {
            "name": "get_service_times",
            "location": 242,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "datetime.datetime",
                    "str"
                ],
                "environ": [
                    "datetime.datetime",
                    "str"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "HeronInfluxDBClient.get_emit_counts": {
            "name": "get_emit_counts",
            "location": 335,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "datetime.datetime",
                    "str"
                ],
                "environ": [
                    "datetime.datetime",
                    "str"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "HeronInfluxDBClient.get_execute_counts": {
            "name": "get_execute_counts",
            "location": 424,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "datetime.datetime",
                    "str"
                ],
                "environ": [
                    "datetime.datetime",
                    "str"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "HeronInfluxDBClient.get_complete_latencies": {
            "name": "get_complete_latencies",
            "location": 516,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Optional[str]"
                ],
                "cluster": [
                    "str"
                ],
                "environ": [
                    "str"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "HeronInfluxDBClient.get_arrival_rates": {
            "name": "get_arrival_rates",
            "location": 638,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronInfluxDBClient.get_receive_counts": {
            "name": "get_receive_counts",
            "location": 645,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/metrics/heron/influxdb/__init__.py": {},
    "twitter-repo-caladrius-master/metrics/heron/tmaster/client.py": {
        "time_check": {
            "name": "time_check",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "float"
                ],
                "end": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "float"
                ],
                "time_limit_hrs": [
                    "float",
                    "datetime.datetime",
                    "int",
                    "Optional[int]",
                    "datetime.datetime.datetime"
                ]
            }
        },
        "instance_timelines_to_dataframe": {
            "name": "instance_timelines_to_dataframe",
            "location": 84,
            "return": [
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "instance_timelines": [
                    "dict",
                    "Optional[dict]",
                    "Dict[str, List[str]]"
                ],
                "stream": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "Container[int]",
                    "Tuple[int, int]",
                    "List[int]"
                ],
                "measurement_name": [
                    "str",
                    "bool",
                    "int"
                ],
                "conversion_func": [
                    "bool",
                    "Iterable[str]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "source_component": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Optional[Exception]",
                    "int",
                    "bool"
                ]
            }
        },
        "str_nano_to_float_milli": {
            "name": "str_nano_to_float_milli",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "nano_str": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "HeronTMasterClient.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "config.Config",
                    "app.config.HealthCheckConfig"
                ]
            }
        },
        "HeronTMasterClient.__hash__": {
            "name": "__hash__",
            "location": 181,
            "return": [
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeronTMasterClient.__eq__": {
            "name": "__eq__",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Type"
                ]
            }
        },
        "HeronTMasterClient._query_setup": {
            "name": "_query_setup",
            "location": 195,
            "return": [
                "Dict[str, int]",
                "dict",
                "int",
                "pandas.DataFrame",
                "str"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str"
                ],
                "cluster": [
                    "str"
                ],
                "environ": [
                    "str"
                ],
                "start": [
                    "int",
                    "datetime.datetime"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "HeronTMasterClient.get_component_service_times": {
            "name": "get_component_service_times",
            "location": 211,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str"
                ],
                "cluster": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "environ": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "component_name": [
                    "str"
                ],
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "logical_plan": [
                    "str",
                    "int"
                ]
            }
        },
        "HeronTMasterClient.get_service_times": {
            "name": "get_service_times",
            "location": 291,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "environ": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "HeronTMasterClient.get_component_emission_counts": {
            "name": "get_component_emission_counts",
            "location": 360,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str"
                ],
                "cluster": [
                    "str",
                    "Dict[int, str]",
                    "bool",
                    "List[str]"
                ],
                "environ": [
                    "str",
                    "Dict[int, str]",
                    "bool",
                    "List[str]"
                ],
                "component_name": [
                    "str",
                    "Optional[str]"
                ],
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "logical_plan": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "HeronTMasterClient.get_emit_counts": {
            "name": "get_emit_counts",
            "location": 438,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "HeronTMasterClient.get_component_execute_counts": {
            "name": "get_component_execute_counts",
            "location": 503,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str"
                ],
                "cluster": [
                    "str",
                    "Dict[int, str]",
                    "bool",
                    "List[str]"
                ],
                "environ": [
                    "str",
                    "Dict[int, str]",
                    "bool",
                    "List[str]"
                ],
                "component_name": [
                    "str"
                ],
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "logical_plan": [
                    "str",
                    "int"
                ]
            }
        },
        "HeronTMasterClient.get_execute_counts": {
            "name": "get_execute_counts",
            "location": 583,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "HeronTMasterClient.get_spout_complete_latencies": {
            "name": "get_spout_complete_latencies",
            "location": 648,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str"
                ],
                "cluster": [
                    "str",
                    "Dict[int, str]",
                    "bool",
                    "List[str]"
                ],
                "environ": [
                    "str",
                    "Dict[int, str]",
                    "bool",
                    "List[str]"
                ],
                "component_name": [
                    "str",
                    "Optional[str]"
                ],
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "logical_plan": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "HeronTMasterClient.get_complete_latencies": {
            "name": "get_complete_latencies",
            "location": 728,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "str",
                    "Optional[str]"
                ],
                "environ": [
                    "str",
                    "Optional[str]"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "HeronTMasterClient.get_calculated_arrival_rates": {
            "name": "get_calculated_arrival_rates",
            "location": 815,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "environ": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "HeronTMasterClient.get_receive_counts": {
            "name": "get_receive_counts",
            "location": 867,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronTMasterClient.get_incoming_queue_sizes": {
            "name": "get_incoming_queue_sizes",
            "location": 875,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]",
                    "datetime.datetime"
                ]
            }
        },
        "HeronTMasterClient.get_cpu_load": {
            "name": "get_cpu_load",
            "location": 882,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronTMasterClient.get_gc_time": {
            "name": "get_gc_time",
            "location": 889,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronTMasterClient.get_num_packets_received": {
            "name": "get_num_packets_received",
            "location": 896,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronTMasterClient.get_packet_arrival_rate": {
            "name": "get_packet_arrival_rate",
            "location": 903,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "HeronTMasterClient.get_tuple_arrivals_at_stmgr": {
            "name": "get_tuple_arrivals_at_stmgr",
            "location": 910,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "Union[str, int, float]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/metrics/heron/tmaster/__init__.py": {},
    "twitter-repo-caladrius-master/metrics/heron/topology/groupings.py": {
        "summary": {
            "name": "summary",
            "location": 18,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "tracker_url": [
                    "str"
                ],
                "topology_id": [
                    "str"
                ],
                "cluster": [
                    "str"
                ],
                "environ": [
                    "str"
                ]
            }
        },
        "has_fields_fields": {
            "name": "has_fields_fields",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "tracker_url": [
                    "str",
                    "int",
                    "Dict[int, int]",
                    "Optional[int]"
                ],
                "topology_id": [
                    "str",
                    "int",
                    "Dict[int, int]",
                    "Optional[int]"
                ],
                "cluster": [
                    "str",
                    "int",
                    "Dict[int, int]",
                    "Optional[int]"
                ],
                "environ": [
                    "str",
                    "int",
                    "Dict[int, int]",
                    "Optional[int]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/metrics/heron/topology/routing_probabilities.py": {
        "calculate_inter_instance_rps": {
            "name": "calculate_inter_instance_rps",
            "location": 23,
            "return": [
                "pandas._IOargs[str, Any]",
                "List[Dict]",
                "Dict[str, Any]",
                "Union[List, str]"
            ],
            "arguments": {
                "metrics_client": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "topology_id": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "float"
                ],
                "cluster": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "environ": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "start": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "float"
                ],
                "end": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "calculate_ISAP": {
            "name": "calculate_ISAP",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "metrics_client": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "topology_id": [
                    "datetime.datetime",
                    "str"
                ],
                "cluster": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "environ": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "calc_current_inter_instance_rps": {
            "name": "calc_current_inter_instance_rps",
            "location": 168,
            "return": [
                "List[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "metrics_client": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str",
                    "datetime.datetime"
                ],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "Optional[Exception]",
                    "int"
                ],
                "cluster": [
                    "str",
                    "Optional[Mapping[str, str]]",
                    "dict"
                ],
                "environ": [
                    "str",
                    "Optional[Mapping[str, str]]",
                    "dict"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ],
                "tracker_url": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/metrics/heron/topology/__init__.py": {},
    "twitter-repo-caladrius-master/model/base.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ],
                "metrics_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "dict",
                    "Callable"
                ],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "Callable",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/model/__init__.py": {},
    "twitter-repo-caladrius-master/model/topology/__init__.py": {},
    "twitter-repo-caladrius-master/model/topology/heron/abs_queueing_models.py": {
        "QueueingModels.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graph_client": [
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "metrics_client": [
                    "str"
                ],
                "paths": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable"
                ],
                "topology_id": [
                    "str"
                ],
                "cluster": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "dict"
                ],
                "environ": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "dict"
                ],
                "start": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "dict"
                ],
                "end": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "dict"
                ],
                "kwargs": []
            }
        },
        "QueueingModels.average_waiting_time": {
            "name": "average_waiting_time",
            "location": 34,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueingModels.average_queue_size": {
            "name": "average_queue_size",
            "location": 41,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueingModels.end_to_end_latencies": {
            "name": "end_to_end_latencies",
            "location": 48,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "twitter-repo-caladrius-master/model/topology/heron/base.py": {
        "HeronTopologyModel.find_current_instance_waiting_times": {
            "name": "find_current_instance_waiting_times",
            "location": 21,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "traffic_source": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ]
            }
        },
        "HeronTopologyModel.predict_current_performance": {
            "name": "predict_current_performance",
            "location": 46,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ],
                "cluster": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ],
                "environ": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ],
                "spout_traffic": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        },
        "HeronTopologyModel.predict_packing_plan": {
            "name": "predict_packing_plan",
            "location": 69,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ],
                "traffic_provider": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/model/topology/heron/helpers.py": {
        "convert_throughput_to_inter_arr_times": {
            "name": "convert_throughput_to_inter_arr_times",
            "location": 12,
            "return": [
                "int",
                "numpy.ndarray",
                "Type",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "arrivals_per_min": [
                    "pandas.DataFrame",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "process_execute_latencies": {
            "name": "process_execute_latencies",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "execute_latencies": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "convert_service_times_to_rates": {
            "name": "convert_service_times_to_rates",
            "location": 43,
            "return": [
                "int",
                "str",
                "Union[str, int, float]"
            ],
            "arguments": {
                "latencies": [
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "convert_arr_rate_to_mean_arr_rate": {
            "name": "convert_arr_rate_to_mean_arr_rate",
            "location": 56,
            "return": [
                "List[int]",
                "Union[str, int, float]",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "throughput": [
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "find_end_to_end_latencies": {
            "name": "find_end_to_end_latencies",
            "location": 69,
            "return": [
                "str",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "paths": [
                    "List[List[str]]",
                    "str",
                    "bool",
                    "List[int]",
                    "Optional[str]"
                ],
                "waiting_times": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ],
                "service_times": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "remap_keys": {
            "name": "remap_keys",
            "location": 98,
            "return": [
                "List[str]",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "latencies_dict": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "validate_queue_size": {
            "name": "validate_queue_size",
            "location": 102,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "execute_counts": [
                    "pandas.DataFrame",
                    "str",
                    "float",
                    "Set[str]",
                    "logging.LogRecord",
                    "bool",
                    "numpy.ndarray"
                ],
                "tuple_arrivals": [
                    "pandas.DataFrame",
                    "str",
                    "float",
                    "Set[str]",
                    "logging.LogRecord",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/model/topology/heron/queueing_models.py": {
        "littles_law": {
            "name": "littles_law",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "merged": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MMCQueue.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "Optional[Union[str, Any]]"
                ],
                "metrics_client": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict"
                ],
                "paths": [
                    "str",
                    "datetime.datetime",
                    "List[str]",
                    "caladrius.metrics.clienMetricsClient",
                    "dict"
                ],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict"
                ],
                "other_kwargs": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict"
                ]
            }
        },
        "MMCQueue.average_waiting_time": {
            "name": "average_waiting_time",
            "location": 69,
            "return": [
                "float",
                "str",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMCQueue.average_queue_size": {
            "name": "average_queue_size",
            "location": 75,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMCQueue.end_to_end_latencies": {
            "name": "end_to_end_latencies",
            "location": 82,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GGCQueue.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graph_client": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "metrics_client": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "paths": [
                    "list",
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "dict"
                ],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "traffic_provider": [
                    "int",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider",
                    "datetime.datetime",
                    "List[str]",
                    "float"
                ],
                "other_kwargs": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ]
            }
        },
        "GGCQueue.average_waiting_time": {
            "name": "average_waiting_time",
            "location": 125,
            "return": [
                "float",
                "str",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GGCQueue.average_queue_size": {
            "name": "average_queue_size",
            "location": 137,
            "return": [
                "int",
                "str",
                "List[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GGCQueue.end_to_end_latencies": {
            "name": "end_to_end_latencies",
            "location": 154,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "twitter-repo-caladrius-master/model/topology/heron/queueing_theory.py": {
        "get_start_end_times": {
            "name": "get_start_end_times",
            "location": 196,
            "return": [
                "int",
                "str",
                "utils.Node",
                "float"
            ],
            "arguments": {}
        },
        "QTTopologyModel.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str",
                    "dict"
                ],
                "metrics_client": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "Callable"
                ],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "QTTopologyModel.predict_arrival_rates": {
            "name": "predict_arrival_rates",
            "location": 50,
            "return": [
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "bool",
                    "int",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ],
                "cluster": [
                    "str",
                    "bool",
                    "int",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ],
                "environ": [
                    "str",
                    "bool",
                    "int",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ],
                "spout_traffic": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str",
                    "datetime.datetime",
                    "raiden.utils.TargetAddress",
                    "Union[str, int, float]"
                ],
                "start": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str",
                    "datetime.datetime",
                    "raiden.utils.TargetAddress",
                    "Union[str, int, float]"
                ],
                "end": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str",
                    "datetime.datetime",
                    "raiden.utils.TargetAddress",
                    "Union[str, int, float]"
                ],
                "metric_bucket_length": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str",
                    "datetime.datetime",
                    "raiden.utils.TargetAddress",
                    "Union[str, int, float]"
                ],
                "topology_ref": [
                    "str",
                    "bool",
                    "int",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ]
            }
        },
        "QTTopologyModel.find_current_instance_waiting_times": {
            "name": "find_current_instance_waiting_times",
            "location": 84,
            "return": [
                "int",
                "Iterable[int]",
                "dict",
                "IO[str]",
                "set"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Optional[str]"
                ],
                "cluster": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Iterable[str]",
                    "Dict[str, str]"
                ],
                "environ": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Iterable[str]",
                    "Dict[str, str]"
                ],
                "traffic_source": [
                    "str",
                    "List[model.qa.Answer]"
                ],
                "start": [
                    "str",
                    "List[model.qa.Answer]"
                ],
                "end": [
                    "str",
                    "List[model.qa.Answer]"
                ]
            }
        },
        "QTTopologyModel.predict_current_performance": {
            "name": "predict_current_performance",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "cluster": [
                    "str",
                    "int"
                ],
                "environ": [
                    "str",
                    "int"
                ],
                "spout_traffic": [
                    "str",
                    "Optional[int]",
                    "cmk.utils.type_defs.UserId",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "QTTopologyModel.predict_packing_plan": {
            "name": "predict_packing_plan",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str"
                ],
                "cluster": [
                    "str",
                    "int",
                    "Optional[datetime.datetime]"
                ],
                "environ": [
                    "str",
                    "int",
                    "Optional[datetime.datetime]"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ],
                "traffic_provider": [
                    "str",
                    "datetime.datetime",
                    "caladrius.traffic_provider.trafficprovider.TrafficProvider",
                    "List[model.qa.Answer]",
                    "datetime.date",
                    "int"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/model/topology/heron/__init__.py": {},
    "twitter-repo-caladrius-master/model/traffic/base.py": {
        "TrafficModel.predict_traffic": {
            "name": "predict_traffic",
            "location": 17,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/model/traffic/__init__.py": {},
    "twitter-repo-caladrius-master/model/traffic/heron/base.py": {
        "HeronTrafficModel.predict_traffic": {
            "name": "predict_traffic",
            "location": 18,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ],
                "cluster": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ],
                "environ": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/model/traffic/heron/prophet.py": {
        "get_spout_emissions": {
            "name": "get_spout_emissions",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "metric_client": [
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str"
                ],
                "tracker_url": [
                    "str"
                ],
                "topology_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "cluster": [
                    "str",
                    "int",
                    "bool"
                ],
                "environ": [
                    "str",
                    "int",
                    "bool"
                ],
                "start": [
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str"
                ]
            }
        },
        "build_component_models": {
            "name": "build_component_models",
            "location": 47,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "metric_client": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "tracker_url": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "topology_id": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "cluster": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "environ": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "start": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[pandas.DataFrame]",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[pandas.DataFrame]",
                    "str"
                ],
                "spout_emits": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[pandas.DataFrame]",
                    "str"
                ]
            }
        },
        "predict_per_component": {
            "name": "predict_per_component",
            "location": 88,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Iterable",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "metric_client": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "tracker_url": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "future_mins": [
                    "int",
                    "str",
                    "datetime.date",
                    "List[model.qa.Answer]"
                ]
            }
        },
        "run_per_component": {
            "name": "run_per_component",
            "location": 100,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "models": [
                    "dict",
                    "int",
                    "Dict[str, str]"
                ],
                "future_mins": [
                    "int",
                    "dbcontracts.graph.compiled.NonSourceCompiledNode",
                    "base.Connection",
                    "base.Model"
                ]
            }
        },
        "build_instance_models": {
            "name": "build_instance_models",
            "location": 122,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "metric_client": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "tracker_url": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "topology_id": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "cluster": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "environ": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "start": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[pandas.DataFrame]",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[pandas.DataFrame]",
                    "str"
                ],
                "spout_emits": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[pandas.DataFrame]",
                    "str"
                ]
            }
        },
        "run_per_instance_models": {
            "name": "run_per_instance_models",
            "location": 165,
            "return": [
                "Set[str]",
                "str",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "models": [
                    "Dict[str, Set[str]]",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ],
                "future_mins": [
                    "int",
                    "dbcontracts.graph.compiled.NonSourceCompiledNode",
                    "Set[int]",
                    "base.Connection"
                ]
            }
        },
        "predict_per_instance": {
            "name": "predict_per_instance",
            "location": 191,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "metric_client": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Optional[List[str]]"
                ],
                "tracker_url": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Optional[List[str]]"
                ],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Optional[List[str]]"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Optional[List[str]]"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Optional[List[str]]"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Optional[List[str]]"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Optional[List[str]]"
                ],
                "future_mins": [
                    "int",
                    "str",
                    "datetime.date",
                    "List[model.qa.Answer]"
                ]
            }
        },
        "ProphetTrafficModel.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "dict",
                    "Sequence[int]"
                ],
                "metrics_client": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "Callable"
                ],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "ProphetTrafficModel.predict_traffic": {
            "name": "predict_traffic",
            "location": 275,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "cluster": [
                    "int",
                    "str"
                ],
                "environ": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/model/traffic/heron/stats_summary.py": {
        "StatsSummaryTrafficModel.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "dict",
                    "bool"
                ],
                "metrics_client": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "Callable"
                ],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "StatsSummaryTrafficModel.predict_traffic": {
            "name": "predict_traffic",
            "location": 61,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str"
                ],
                "cluster": [
                    "str"
                ],
                "environ": [
                    "str"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/model/traffic/heron/__init__.py": {},
    "twitter-repo-caladrius-master/performance_prediction/predictor.py": {
        "Predictor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "List[str]",
                    "bool",
                    "list",
                    "List[Tuple[str, Any]]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "cluster": [
                    "str"
                ],
                "environ": [
                    "str"
                ],
                "start": [
                    "str",
                    "bool",
                    "int"
                ],
                "end": [
                    "str",
                    "bool",
                    "int"
                ],
                "tracker_url": [
                    "str",
                    "int"
                ],
                "metrics_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "graph_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Optional[str]",
                    "str"
                ],
                "queue": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Predictor.create_new_plan": {
            "name": "create_new_plan",
            "location": 51,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "twitter-repo-caladrius-master/performance_prediction/simple_predictor.py": {
        "SimplePredictor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "topology_id": [
                    "str",
                    "caladrius.model.topology.heron.abs_queueing_models.QueueingModels",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "cluster": [
                    "str",
                    "caladrius.model.topology.heron.abs_queueing_models.QueueingModels",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "environ": [
                    "str",
                    "caladrius.model.topology.heron.abs_queueing_models.QueueingModels",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "start": [
                    "str",
                    "caladrius.model.topology.heron.abs_queueing_models.QueueingModels",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "end": [
                    "str",
                    "caladrius.model.topology.heron.abs_queueing_models.QueueingModels",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "tracker_url": [
                    "str",
                    "caladrius.model.topology.heron.abs_queueing_models.QueueingModels",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "metrics_client": [
                    "str",
                    "caladrius.model.topology.heron.abs_queueing_models.QueueingModels",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "graph_client": [
                    "str",
                    "caladrius.model.topology.heron.abs_queueing_models.QueueingModels",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.clienMetricsClient"
                ],
                "queue": [
                    "str",
                    "caladrius.model.topology.heron.abs_queueing_models.QueueingModels",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "caladrius.metrics.clienMetricsClient"
                ]
            }
        },
        "SimplePredictor.create_new_plan": {
            "name": "create_new_plan",
            "location": 28,
            "return": [
                "Type",
                "Tuple[type]",
                "dbcontracts.graph.compiled.ManifestNode",
                "bool",
                "str",
                "Callable[[KT], VT]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimplePredictor.process_resource_bottlenecks": {
            "name": "process_resource_bottlenecks",
            "location": 57,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "merged": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SimplePredictor.process_parallelism": {
            "name": "process_parallelism",
            "location": 129,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_plan": [
                    "float",
                    "int"
                ],
                "expected_service_rate": [
                    "int",
                    "List[List[int]]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/performance_prediction/__init__.py": {},
    "twitter-repo-caladrius-master/performance_prediction/util/util.py": {
        "validate_packing_plan": {
            "name": "validate_packing_plan",
            "location": 16,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "json_packing_plan": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "summarize_packing_plans": {
            "name": "summarize_packing_plans",
            "location": 75,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "packing_plan": [
                    "str"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/performance_prediction/util/__init__.py": {},
    "twitter-repo-caladrius-master/tests/__init__.py": {},
    "twitter-repo-caladrius-master/tests/validation/helpers.py": {
        "create_start_end_list": {
            "name": "create_start_end_list",
            "location": 13,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "total_hours": [
                    "float",
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "period_length_secs": [
                    "int",
                    "float",
                    "datetime.datetime",
                    "datetime.timedelta",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/tests/validation/__init__.py": {},
    "twitter-repo-caladrius-master/tests/validation/heron/helpers.py": {
        "get_spout_state": {
            "name": "get_spout_state",
            "location": 23,
            "return": [
                "str",
                "List[int]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "metrics_client": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]",
                    "str"
                ],
                "topology_id": [
                    "str",
                    "datetime.datetime"
                ],
                "cluster": [
                    "str",
                    "int"
                ],
                "environ": [
                    "str",
                    "int"
                ],
                "tracker_url": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "start": [
                    "datetime.datetime",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "str"
                ],
                "metrics_sample_period": [
                    "float",
                    "int",
                    "datetime.datetime",
                    "Optional[str]",
                    "str"
                ],
                "summary_method": [
                    "str",
                    "datetime.datetime"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/tests/validation/heron/visulisation.py": {
        "plot_emit_complete_latency": {
            "name": "plot_emit_complete_latency",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "metrics_client": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]"
                ],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]"
                ],
                "environ": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]"
                ],
                "end": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "Union[str, int, float]"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/tests/validation/heron/__init__.py": {},
    "twitter-repo-caladrius-master/tests/validation/heron/topology/latencies-predictor.py": {
        "_create_parser": {
            "name": "_create_parser",
            "location": 30,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        }
    },
    "twitter-repo-caladrius-master/tests/validation/heron/topology/qt_model_runner.py": {
        "compare": {
            "name": "compare",
            "location": 31,
            "return": [],
            "arguments": {
                "metrics_client": [],
                "spout_state": [],
                "actual_instance_arrs": [],
                "topology_model": [],
                "topology_id": [],
                "cluster": [],
                "environ": [],
                "start": [],
                "end": [],
                "metric_bucket_length": []
            }
        },
        "run": {
            "name": "run",
            "location": 58,
            "return": [],
            "arguments": {
                "config": [],
                "metrics_client": [],
                "total_hours": [],
                "period_length_secs": [],
                "topology_model": [],
                "topology_id": [],
                "cluster": [],
                "environ": [],
                "metric_bucket_length": []
            }
        },
        "_create_parser": {
            "name": "_create_parser",
            "location": 149,
            "return": [],
            "arguments": {}
        }
    },
    "twitter-repo-caladrius-master/tests/validation/heron/traffic/prophet_model_runner.py": {
        "validate_component_level_stats": {
            "name": "validate_component_level_stats",
            "location": 29,
            "return": [
                "List[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "metrics_client": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "tracker_url": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "topology_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "cluster": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "environ": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "source_hours_list": [
                    "List[float]",
                    "bool",
                    "Optional[Tuple]",
                    "str",
                    "List[str]"
                ],
                "future_mins_list": [
                    "List[int]",
                    "str",
                    "int",
                    "Optional[datetime.datetime]",
                    "dict",
                    "datetime.datetime"
                ],
                "metrics_start": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "metrics_end": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ]
            }
        },
        "validate_instance_level_stats": {
            "name": "validate_instance_level_stats",
            "location": 124,
            "return": [
                "List[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "metrics_client": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "tracker_url": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "topology_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "cluster": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "environ": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "source_hours_list": [
                    "List[float]",
                    "bool",
                    "Optional[Tuple]",
                    "str",
                    "List[str]"
                ],
                "future_mins_list": [
                    "List[int]",
                    "str",
                    "int",
                    "Optional[datetime.datetime]",
                    "dict",
                    "datetime.datetime"
                ],
                "metrics_start": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ],
                "metrics_end": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime"
                ]
            }
        },
        "calc_source_metrics_period": {
            "name": "calc_source_metrics_period",
            "location": 222,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "source_hours_list": [
                    "List[float]",
                    "List[int]",
                    "int",
                    "Optional[datetime.datetime]",
                    "Optional[List[str]]",
                    "datetime.datetime",
                    "Optional[str]",
                    "Optional[datetime.date]"
                ],
                "future_mins_list": [
                    "List[float]",
                    "List[int]",
                    "int",
                    "Optional[datetime.datetime]",
                    "Optional[List[str]]",
                    "datetime.datetime",
                    "Optional[str]",
                    "Optional[datetime.date]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 236,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "metrics_client": [
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "str",
                    "dict",
                    "Optional[asyncpg_migrate.model.Revision]"
                ],
                "source_hours_list": [
                    "List[float]",
                    "bytes",
                    "List[int]",
                    "bool",
                    "str"
                ],
                "future_mins_list": [
                    "List[int]",
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "bytes"
                ],
                "output_dir": [
                    "str"
                ],
                "topology_ids": [
                    "str",
                    "int"
                ],
                "comp": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "_create_parser": {
            "name": "_create_parser",
            "location": 327,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        }
    },
    "twitter-repo-caladrius-master/tools/heron/graph_builder.py": {
        "create_parser": {
            "name": "create_parser",
            "location": 29,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        }
    },
    "twitter-repo-caladrius-master/tools/heron/tracker_stats.py": {
        "summarise_groupings": {
            "name": "summarise_groupings",
            "location": 29,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "tracker_url": [
                    "int",
                    "str",
                    "List[int]",
                    "Set[str]",
                    "List[str]"
                ],
                "topologies": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "T",
                    "bool",
                    "pandas.DataFrame",
                    "Optional[float]"
                ]
            }
        },
        "add_pplan_info": {
            "name": "add_pplan_info",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "tracker_url": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ],
                "topologies": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "add_logical_plan_info": {
            "name": "add_logical_plan_info",
            "location": 156,
            "return": [
                "int",
                "dict",
                "pandas.DataFrame",
                "Sequence[str]"
            ],
            "arguments": {
                "tracker_url": [
                    "Dict[str, Any]",
                    "str"
                ],
                "topologies": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "_get_mg_summary": {
            "name": "_get_mg_summary",
            "location": 250,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "topo_pplan": [
                    "pandas.DataFrame",
                    "bytes"
                ],
                "groupby_term": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_create_parser": {
            "name": "_create_parser",
            "location": 278,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "_check_tracker": {
            "name": "_check_tracker",
            "location": 313,
            "return": [
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "tracker_str": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "twitter-repo-caladrius-master/traffic_provider/current_traffic.py": {
        "CurrentTraffic.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "str",
                    "Optional[str]",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "graph_client": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "topology_id": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "bool",
                    "list",
                    "Dict[str, Any]",
                    "str"
                ],
                "cluster": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "dict",
                    "list",
                    "int"
                ],
                "environ": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ],
                "start": [
                    "str",
                    "datetime.datetime",
                    "caladrius.metrics.clienMetricsClient",
                    "dict",
                    "caladrius.graph.gremlin.clienGremlinClient"
                ],
                "end": [
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient",
                    "datetime.datetime",
                    "Union[str, int, float]"
                ],
                "traffic_config": [
                    "Dict[str, Any]",
                    "datetime.datetime",
                    "str",
                    "Mapping",
                    "Sequence",
                    "bool",
                    "Union[str, int, float]"
                ]
            }
        },
        "CurrentTraffic.tuple_arrivals": {
            "name": "tuple_arrivals",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentTraffic.arrival_rates": {
            "name": "arrival_rates",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentTraffic.inter_arrival_times": {
            "name": "inter_arrival_times",
            "location": 65,
            "return": [
                "int",
                "datetime.datetime",
                "List[float]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentTraffic.service_times": {
            "name": "service_times",
            "location": 70,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "twitter-repo-caladrius-master/traffic_provider/predicted_traffic.py": {
        "PredictedTraffic.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_client": [
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "graph_client": [
                    "Optional[str]",
                    "caladrius.metrics.heron.clienHeronMetricsClient"
                ],
                "topology_id": [
                    "str",
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[int]",
                    "List[str]"
                ],
                "cluster": [
                    "int",
                    "str",
                    "datetime.date",
                    "bool"
                ],
                "environ": [
                    "str"
                ],
                "start": [
                    "str",
                    "Optional[str]",
                    "pandas.DataFrame",
                    "Dict[str, str]"
                ],
                "end": [
                    "str",
                    "Optional[str]",
                    "pandas.DataFrame",
                    "Dict[str, str]"
                ],
                "traffic_config": [
                    "int",
                    "str",
                    "caladrius.graph.gremlin.clienGremlinClient",
                    "repo.base.Connection",
                    "List[model.qa.Answer]"
                ]
            }
        },
        "PredictedTraffic.tuple_arrivals": {
            "name": "tuple_arrivals",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictedTraffic.arrival_rates": {
            "name": "arrival_rates",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictedTraffic.inter_arrival_times": {
            "name": "inter_arrival_times",
            "location": 72,
            "return": [
                "int",
                "List[str]",
                "datetime.datetime",
                "List[float]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictedTraffic.service_times": {
            "name": "service_times",
            "location": 83,
            "return": [
                "int",
                "bool",
                "float",
                "datetime.datetime",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "twitter-repo-caladrius-master/traffic_provider/trafficprovider.py": {
        "TrafficProvider.service_times": {
            "name": "service_times",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrafficProvider.arrival_rates": {
            "name": "arrival_rates",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrafficProvider.tuple_arrivals": {
            "name": "tuple_arrivals",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrafficProvider.inter_arrival_times": {
            "name": "inter_arrival_times",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "twitter-repo-caladrius-master/traffic_provider/__init__.py": {}
}
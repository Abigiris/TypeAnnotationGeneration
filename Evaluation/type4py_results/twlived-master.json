{
    "twlived-master/launcher.py": {},
    "twlived-master/twlived/cli.py": {
        "is_video_from_stream": {
            "name": "is_video_from_stream",
            "location": 19,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "video": [
                    "Dict[str, str]",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "stream": [
                    "Dict[str, str]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "delay_generator": {
            "name": "delay_generator",
            "location": 24,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "maximum": [
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "float"
                ],
                "step": [
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "float"
                ]
            }
        },
        "new_delay": {
            "name": "new_delay",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "quality": [
                    "str",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]",
                    "Type[T]",
                    "Optional[int]"
                ],
                "main_publisher": [
                    "str",
                    "bool",
                    "raiden.utils.ChainID",
                    "int"
                ],
                "twitch_api": [
                    "datetime.datetime",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.Address",
                    "str",
                    "Callable",
                    "bool",
                    "list"
                ],
                "download_manager": [
                    "str",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]",
                    "Type[T]",
                    "Optional[int]"
                ],
                "storage": [
                    "storage.Storage",
                    "Callable[[], Any]",
                    "Dict[str, int]",
                    "bool",
                    "Optional[int]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "twlived-master/twlived/config_app.py": {
        "load": {
            "name": "load",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "twlived-master/twlived/config_logging.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "level": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "twlived-master/twlived/downloader.py": {
        "get_url": {
            "name": "get_url",
            "location": 24,
            "return": [
                "str",
                "cmk.utils.type_defs.CheckPluginName.Str",
                "int"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "TwitchPlaylist.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "quality": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "variant_playlist_fetch": [
                    "str",
                    "Callable[[], str]",
                    "Sequence[str]",
                    "bool",
                    "Counter[str]"
                ]
            }
        },
        "TwitchPlaylist.m3u8": {
            "name": "m3u8",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitchPlaylist.files": {
            "name": "files",
            "location": 64,
            "return": [
                "str",
                "List[str]",
                "Generator[pathlib.Path, None, None]",
                "pathlib.Path",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitchPlaylist.base_uri": {
            "name": "base_uri",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitchPlaylist.url": {
            "name": "url",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitchPlaylist.update": {
            "name": "update",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_old_url": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TwitchPlaylist._get_playlist_url": {
            "name": "_get_playlist_url",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitchPlaylist.segments_after": {
            "name": "segments_after",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "last_segment": [
                    "Optional[int]",
                    "int",
                    "Union[int, None]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "TwitchDownloadManager.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "twitch_api": [
                    "int",
                    "bool",
                    "float"
                ],
                "temporary_folder": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "float",
                    "int"
                ]
            }
        },
        "TwitchDownloadManager.download": {
            "name": "download",
            "location": 118,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "Union[int, str]"
                ]
            }
        },
        "TwitchDownloadManager._download_archive": {
            "name": "_download_archive",
            "location": 127,
            "return": [
                "str",
                "bool",
                "int",
                "Iterable[str]",
                "Optional[cmk.utils.type_defs.HostAddress]"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "int"
                ],
                "quality": [
                    "str",
                    "int"
                ]
            }
        },
        "TwitchDownloadManager._download_chunks": {
            "name": "_download_chunks",
            "location": 163,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "str",
                    "IO[bytes]",
                    "List[str]",
                    "Dict[str, Callable[[str], Any]]",
                    "bytes",
                    "int"
                ],
                "segments": [
                    "List[str]",
                    "str",
                    "Callable[[], bool]"
                ],
                "write_to": [
                    "str",
                    "IO[bytes]",
                    "List[str]",
                    "Dict[str, Callable[[str], Any]]",
                    "bytes",
                    "int"
                ]
            }
        },
        "TwitchDownloadManager._video_is_recording": {
            "name": "_video_is_recording",
            "location": 172,
            "return": [
                "datetime.datetime",
                "raiden.utils.BlockIdentifier"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str"
                ]
            }
        }
    },
    "twlived-master/twlived/events.py": {
        "DownloadingProgress.chunk_loaded": {
            "name": "chunk_loaded",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "twlived-master/twlived/storage.py": {
        "Storage.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str, pathlib.Path]"
                ],
                "channel_from_id": [
                    "int",
                    "str",
                    "IO",
                    "bool",
                    "Union[str, Tuple[str, ...]]"
                ],
                "vod_path_template": [
                    "bool",
                    "str",
                    "Path"
                ]
            }
        },
        "Storage.added_broadcast_ids": {
            "name": "added_broadcast_ids",
            "location": 30,
            "return": [
                "str",
                "Iterable[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "self": [],
                "broadcast_type": [
                    "str"
                ]
            }
        },
        "Storage.add_broadcast": {
            "name": "add_broadcast",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broadcast": [
                    "pathlib.Path"
                ],
                "temp_file": [
                    "pathlib.Path"
                ],
                "exist_ok": [
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "Storage._create_storage_dir": {
            "name": "_create_storage_dir",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage.update_db": {
            "name": "update_db",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "broadcast": [
                    "pathlib.Path",
                    "Iterable[pathlib.Path]"
                ],
                "file": [
                    "Iterator[str]",
                    "Iterable[str]",
                    "pathlib.Path",
                    "str",
                    "IO[bytes]"
                ]
            }
        }
    },
    "twlived-master/twlived/twitch_api.py": {
        "timed_cache": {
            "name": "timed_cache",
            "location": 18,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "list"
                ]
            }
        },
        "filter_none_and_empty": {
            "name": "filter_none_and_empty",
            "location": 32,
            "return": [
                "tuple",
                "Dict[str, str]",
                "Dict[str, float]",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "dictionary": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "timed_cache.wrapper": {
            "name": "wrapper",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "TwitchAPI.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "dict"
                ]
            }
        },
        "TwitchAPI.get_streams": {
            "name": "get_streams",
            "location": 56,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitchAPI.get_videos": {
            "name": "get_videos",
            "location": 97,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitchAPI.get_users": {
            "name": "get_users",
            "location": 141,
            "return": [
                "list",
                "Iterable",
                "Optional[dict]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitchAPI.get_video_token": {
            "name": "get_video_token",
            "location": 172,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "Dict[str, str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TwitchAPI.get_variant_playlist": {
            "name": "get_variant_playlist",
            "location": 178,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "TwitchAPI.__get": {
            "name": "__get",
            "location": 189,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict"
                ]
            }
        },
        "TwitchAPI._get": {
            "name": "_get",
            "location": 197,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ]
            }
        },
        "TwitchAPI._helix_get": {
            "name": "_helix_get",
            "location": 207,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "twlived-master/twlived/view.py": {
        "ConsoleView.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleView.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "raiden_libs.events.Event",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TelegramView.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "chat_id": [
                    "int",
                    "str"
                ]
            }
        },
        "TelegramView.handle": {
            "name": "handle",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "apscheduler.events.JobExecutionEvent",
                    "raiden_libs.events.Event",
                    "Dict[str, Any]",
                    "events.events_base.EventType"
                ]
            }
        },
        "TelegramView.send_message": {
            "name": "send_message",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "twlived-master/twlived/__init__.py": {},
    "twlived-master/twlived/utils/pubsub.py": {
        "Provider.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.notify": {
            "name": "notify",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, float]",
                    "List[dict]"
                ]
            }
        },
        "Provider.subscribe": {
            "name": "subscribe",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "Callable",
                    "Match",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "subscriber": [
                    "Callable",
                    "Match",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "Provider.unsubscribe": {
            "name": "unsubscribe",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "set",
                    "List[str]"
                ],
                "subscriber": [
                    "str",
                    "set",
                    "List[str]"
                ]
            }
        },
        "Provider.connect": {
            "name": "connect",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderClientMixin.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderClientMixin.connect_to": {
            "name": "connect_to",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_center": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Publisher.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publisher.publish": {
            "name": "publish",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "Callable",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Subscriber.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscriber.subscribe": {
            "name": "subscribe",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str"
                ]
            }
        },
        "Subscriber.unsubscribe": {
            "name": "unsubscribe",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str"
                ]
            }
        },
        "Subscriber.handle": {
            "name": "handle",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        }
    },
    "twlived-master/twlived/utils/utils.py": {
        "retry_on_exception": {
            "name": "retry_on_exception",
            "location": 12,
            "return": [
                "float",
                "Iterable[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "exceptions": [
                    "Exception"
                ],
                "wait": [
                    "Exception"
                ],
                "max_tries": [
                    "Exception"
                ]
            }
        },
        "chunked": {
            "name": "chunked",
            "location": 36,
            "return": [
                "typing.Iterator[typing.List[T]]"
            ],
            "arguments": {
                "l": [
                    "int",
                    "Sequence"
                ],
                "chunk_size": [
                    "int",
                    "Sequence"
                ]
            }
        },
        "sanitize_filename": {
            "name": "sanitize_filename",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "replace_to": [
                    "str"
                ]
            }
        },
        "fails_in_row": {
            "name": "fails_in_row",
            "location": 48,
            "return": [
                "typing.Generator[builtins.bool, builtins.bool, None]"
            ],
            "arguments": {
                "num": [
                    "bool",
                    "list",
                    "float"
                ]
            }
        },
        "retry_on_exception.decorator": {
            "name": "decorator",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "retry_on_exception.decorator.wrapper": {
            "name": "wrapper",
            "location": 17,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "twlived-master/twlived/utils/__init__.py": {}
}
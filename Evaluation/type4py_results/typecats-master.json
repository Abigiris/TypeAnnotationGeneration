{
    "typecats-master/env_runner.py": {
        "run_cmd_in_pipenv": {
            "name": "run_cmd_in_pipenv",
            "location": 10,
            "return": [
                "bytes",
                "Callable",
                "int"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "TextIO"
                ],
                "fileorpath": [
                    "str"
                ],
                "cli_args": [
                    "Iterable",
                    "Dict[str, str]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "typecats-master/setup.py": {},
    "typecats-master/tests/data_utils.py": {
        "ld": {
            "name": "ld",
            "location": 4,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "typecats-master/tests/test_cats.py": {
        "test_cats_decorator": {
            "name": "test_cats_decorator",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_with_structurer": {
            "name": "test_nested_with_structurer",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union_structuring": {
            "name": "test_union_structuring",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typecats-master/tests/test_exceptions.py": {
        "test_exceptions_get_logged": {
            "name": "test_exceptions_get_logged",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_exceptions_have_type_path": {
            "name": "test_exceptions_have_type_path",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "Callable"
                ]
            }
        },
        "test_try_struc_no_exception_if_common": {
            "name": "test_try_struc_no_exception_if_common",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "Callable"
                ]
            }
        }
    },
    "typecats-master/tests/test_funcs.py": {
        "test_funcs_work": {
            "name": "test_funcs_work",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typecats-master/tests/test_strip_defaults.py": {
        "test_clean_cats_basic": {
            "name": "test_clean_cats_basic",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_method_works_also": {
            "name": "test_method_works_also",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_clean_wildcat": {
            "name": "test_clean_wildcat",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_clean_literal": {
            "name": "test_clean_literal",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_clean_with_wildcat_underneath": {
            "name": "test_clean_with_wildcat_underneath",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_works_with_pure_attrs_obj": {
            "name": "test_works_with_pure_attrs_obj",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_comparsion_works_on_structured_value": {
            "name": "test_default_comparsion_works_on_structured_value",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typecats-master/tests/test_validators.py": {
        "test_typecat_validators": {
            "name": "test_typecat_validators",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_decimal_zero": {
            "name": "test_decimal_zero",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_typecat_validators.Foo._is_bar": {
            "name": "_is_bar",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "bool",
                    "float",
                    "T"
                ],
                "value": [
                    "int",
                    "bool",
                    "float",
                    "T"
                ]
            }
        },
        "test_typecat_validators.FooCat._is_bar": {
            "name": "_is_bar",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "bool",
                    "float",
                    "T"
                ],
                "value": [
                    "int",
                    "bool",
                    "float",
                    "T"
                ]
            }
        },
        "test_typecat_validators.NotNone._isnt_none": {
            "name": "_isnt_none",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "bool",
                    "KT",
                    "int"
                ],
                "value": [
                    "Optional[bool]",
                    "T",
                    "Optional[T]",
                    "Optional[str]"
                ]
            }
        },
        "test_typecat_validators.WithDefault._not_null": {
            "name": "_not_null",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "value": [
                    "T",
                    "Optional[bool]",
                    "Optional[T]",
                    "Optional[str]"
                ]
            }
        },
        "test_typecat_validators.EmptyAllowed._not_bar": {
            "name": "_not_bar",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "typecats-master/tests/test_wildcats.py": {
        "test_wildcats": {
            "name": "test_wildcats",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_attr_in_wildcat_dict_is_unstructured": {
            "name": "test_attr_in_wildcat_dict_is_unstructured",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nested_wildcats_still_unstructure": {
            "name": "test_nested_wildcats_still_unstructure",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wildcat_with_id": {
            "name": "test_wildcat_with_id",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wildcat_repr_no_conflicts": {
            "name": "test_wildcat_repr_no_conflicts",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wildcat_equality_takes_wildcat_key_values_into_account": {
            "name": "test_wildcat_equality_takes_wildcat_key_values_into_account",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typecats-master/typecats/attrs_shim.py": {
        "cat_attrs": {
            "name": "cat_attrs",
            "location": 25,
            "return": [
                "float",
                "T",
                "List[int]"
            ],
            "arguments": {
                "maybe_cls": [
                    "Optional[List[int]]",
                    "Optional[int]"
                ],
                "these": [
                    "bool",
                    "Iterable[Any]"
                ],
                "repr_ns": [
                    "bool",
                    "Iterable[Any]"
                ],
                "repr": [
                    "bool",
                    "Iterable[Any]"
                ],
                "cmp": [
                    "bool",
                    "Iterable[Any]"
                ],
                "hash": [
                    "bool",
                    "Iterable[Any]"
                ],
                "init": [
                    "bool",
                    "Iterable[Any]"
                ],
                "slots": [
                    "bool",
                    "Iterable[Any]"
                ],
                "frozen": [
                    "bool",
                    "Iterable[Any]"
                ],
                "weakref_slot": [
                    "bool",
                    "Iterable[Any]"
                ],
                "str": [
                    "bool",
                    "Iterable[Any]"
                ],
                "auto_attribs": [
                    "bool",
                    "Iterable[Any]"
                ],
                "kw_only": [
                    "bool",
                    "Iterable[Any]"
                ],
                "cache_hash": [
                    "bool",
                    "Iterable[Any]"
                ],
                "disallow_empties": [
                    "bool",
                    "Iterable[Any]"
                ],
                "auto_exc": [
                    "bool",
                    "Iterable[Any]"
                ],
                "eq": [
                    "bool",
                    "Iterable[Any]"
                ],
                "order": [
                    "bool",
                    "Iterable[Any]"
                ],
                "auto_detect": [
                    "bool",
                    "Iterable[Any]"
                ],
                "collect_by_mro": [
                    "bool",
                    "Iterable[Any]"
                ],
                "getstate_setstate": [
                    "bool",
                    "Iterable[Any]"
                ],
                "on_setattr": [
                    "bool",
                    "Iterable[Any]"
                ],
                "field_transformer": [
                    "bool",
                    "Iterable[Any]"
                ]
            }
        },
        "nonempty_validator": {
            "name": "nonempty_validator",
            "location": 182,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [
                    "str",
                    "Optional[Any]"
                ],
                "attribute": [
                    "bool",
                    "type",
                    "Optional[int]",
                    "List[str]",
                    "str",
                    "Callable[..., None]"
                ],
                "value": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "_hack_add_validator": {
            "name": "_hack_add_validator",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "attrib": [
                    "float",
                    "Callable[[T], bool]"
                ],
                "validator": [
                    "float",
                    "Callable[[T], bool]"
                ]
            }
        },
        "_hook_builder_before_doing_anything": {
            "name": "_hook_builder_before_doing_anything",
            "location": 211,
            "return": [
                "Iterator[Tuple[str, str]]",
                "int",
                "\"DGEList\""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[Any]"
                ],
                "disallow_empties": [
                    "Callable",
                    "bool",
                    "Callable[..., T]",
                    "Exception"
                ]
            }
        },
        "get_attrs_names": {
            "name": "get_attrs_names",
            "location": 224,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "Type": [
                    "type",
                    "str",
                    "Optional[str]",
                    "Union[str, None]"
                ]
            }
        },
        "drop_nonattrs": {
            "name": "drop_nonattrs",
            "location": 232,
            "return": [
                "Dict[str, str]",
                "List[str]",
                "int",
                "str",
                "Set[str]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "str",
                    "Tuple[object]",
                    "bool"
                ],
                "Type": [
                    "type",
                    "str"
                ]
            }
        },
        "cat_attrs.wrap": {
            "name": "wrap",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "bytes"
                ]
            }
        },
        "_hack_add_validator.combine_validators": {
            "name": "combine_validators",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "float",
                    "Tuple[str, float]",
                    "Dict[str, Any]"
                ],
                "att": [
                    "str",
                    "float",
                    "Tuple[str, float]",
                    "Dict[str, Any]"
                ],
                "val": [
                    "str",
                    "float",
                    "Tuple[str, float]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "typecats-master/typecats/cats_mypy_plugin.py": {
        "fullname": {
            "name": "fullname",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "Union[mypy.nodes.FuncBase, mypy.nodes.SymbolNode]",
                    "bool",
                    "int"
                ]
            }
        },
        "nameit": {
            "name": "nameit",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "Union[mypy.nodes.FuncBase, mypy.nodes.SymbolNode]",
                    "str",
                    "int"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_version": [
                    "str"
                ]
            }
        },
        "make_optional": {
            "name": "make_optional",
            "location": 62,
            "return": [
                "mypy.types.Type",
                "List[Dict[str, Any]]",
                "Type[Any]",
                "Sequence[Any]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "typ": [
                    "mypy.types.Type",
                    "type"
                ]
            }
        },
        "serialize_info_name": {
            "name": "serialize_info_name",
            "location": 149,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Container[str]"
            ],
            "arguments": {
                "info": [
                    "str",
                    "mypy.nodes.TypeInfo"
                ],
                "name": [
                    "str",
                    "mypy.nodes.TypeInfo"
                ],
                "class_path": [
                    "str",
                    "mypy.nodes.TypeInfo"
                ]
            }
        },
        "deserialize_funcdefs": {
            "name": "deserialize_funcdefs",
            "location": 156,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[int]",
                "bool",
                "Optional[Iterable[str]]",
                "int"
            ],
            "arguments": {
                "stmts": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "add_static_method": {
            "name": "add_static_method",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.ClassDefContext",
                    "Union[mypy.nodes.Expression, mypy.nodes.SymbolNode, None]"
                ],
                "function_name": [
                    "str",
                    "Union[int, str]",
                    "Type"
                ],
                "args": [],
                "return_type": [
                    "mypy.types.Type",
                    "Optional[basilisp.lang.compiler.nodes.KeywordArgSupport]",
                    "mypy.nodes.Context"
                ]
            }
        },
        "CatsPlugin.get_class_decorator_hook": {
            "name": "get_class_decorator_hook",
            "location": 69,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "CatsPlugin.get_class_decorator_hook.add_struc_and_unstruc_to_classdefcontext": {
            "name": "add_struc_and_unstruc_to_classdefcontext",
            "location": 74,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "cls_def_ctx": [
                    "mypy.plugin.ClassDefContext",
                    "bool",
                    "Optional[mypy.types.Type]",
                    "int",
                    "mypy.types.Type"
                ]
            }
        }
    },
    "typecats-master/typecats/cattrs_hooks.py": {
        "patch_cattrs_function_dispatch": {
            "name": "patch_cattrs_function_dispatch",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "multistrategy_dispatch": [],
                "patch": [
                    "str",
                    "Iterable",
                    "bool"
                ]
            }
        },
        "PostFunctionDispatchPatch.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "__original_handler": [
                    "Callable",
                    "bool",
                    "int"
                ]
            }
        },
        "patch_cattrs_function_dispatch.make_patched_handler": {
            "name": "make_patched_handler",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "original_handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ConverterContextPatch.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "converter": [
                    "tuple",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "ConverterContextPatch.structure_patch": {
            "name": "structure_patch",
            "location": 60,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "original_handler": [
                    "str",
                    "bool",
                    "List[dict]"
                ],
                "obj": [
                    "str",
                    "bool",
                    "List[dict]"
                ],
                "Type": [
                    "str",
                    "bool",
                    "List[dict]"
                ]
            }
        },
        "ConverterContextPatch.unstructure_patch": {
            "name": "unstructure_patch",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "original_handler": [
                    "Callable",
                    "str",
                    "bool",
                    "Exception"
                ],
                "obj": [
                    "Callable",
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        },
        "patch_cattrs_function_dispatch.make_patched_handler.wrapper_handler": {
            "name": "wrapper_handler",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "typecats-master/typecats/exceptions.py": {
        "_simple_type_name": {
            "name": "_simple_type_name",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "Type": [
                    "type",
                    "List[\"ElementHandle\"]"
                ]
            }
        },
        "_assemble_default_exception_msg": {
            "name": "_assemble_default_exception_msg",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "type",
                    "Callable",
                    "Iterable[T]"
                ],
                "item": [
                    "Dict[str, Any]",
                    "Union[Set[int], List[int], Dict[int, Any]]"
                ],
                "Type": [
                    "Exception",
                    "type",
                    "Callable",
                    "Iterable[T]"
                ],
                "typecats_stack": [
                    "List[str]",
                    "Type"
                ]
            }
        },
        "_default_log_structure_exception": {
            "name": "_default_log_structure_exception",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "type",
                    "Exception",
                    "str",
                    "int"
                ],
                "item": [
                    "type",
                    "Exception",
                    "str",
                    "int"
                ],
                "Type": [
                    "type",
                    "Exception",
                    "str",
                    "int"
                ],
                "typecats_stack": [
                    "type",
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "set_default_exception_hook": {
            "name": "set_default_exception_hook",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "hook": [
                    "int",
                    "bool"
                ]
            }
        },
        "_extract_typecats_stack_if_any": {
            "name": "_extract_typecats_stack_if_any",
            "location": 61,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float",
                "list",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "str",
                    "dict"
                ]
            }
        },
        "_emit_exception_to_default_handler": {
            "name": "_emit_exception_to_default_handler",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "type",
                    "str",
                    "Callable"
                ],
                "item": [
                    "Exception",
                    "type",
                    "str",
                    "Callable"
                ],
                "Type": [
                    "Exception",
                    "type",
                    "str",
                    "Callable"
                ],
                "typecats_stack": [
                    "Exception",
                    "type",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "typecats-master/typecats/patch.py": {
        "patch_converter_for_typecats": {
            "name": "patch_converter_for_typecats",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "converter": [
                    "cattr.Converter",
                    "list",
                    "str",
                    "tuple",
                    "Callable[[], None]",
                    "float"
                ]
            }
        },
        "_embed_exception_info": {
            "name": "_embed_exception_info",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "str",
                    "type"
                ],
                "item": [
                    "type",
                    "int",
                    "List[int]"
                ],
                "Type": [
                    "type",
                    "int",
                    "List[int]"
                ]
            }
        },
        "TypecatsCattrPatch.unstructure_patch": {
            "name": "unstructure_patch",
            "location": 34,
            "return": [
                "str",
                "Dict[str, int]",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "original_handler": [
                    "Callable",
                    "bool",
                    "Sequence[str]",
                    "dict",
                    "int",
                    "bytes"
                ],
                "obj_to_unstructure": [
                    "Dict[str, Any]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "TypecatsCattrPatch.structure_patch": {
            "name": "structure_patch",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "original_handler": [
                    "bool",
                    "str",
                    "int"
                ],
                "obj_to_structure": [
                    "Type[types.C]",
                    "bool",
                    "Callable"
                ],
                "Type": [
                    "Type[types.C]",
                    "dict"
                ]
            }
        }
    },
    "typecats-master/typecats/strip_defaults.py": {
        "_get_factory_default": {
            "name": "_get_factory_default",
            "location": 17,
            "return": [
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "_attr": [
                    "str",
                    "Dict[str, Any]",
                    "List[dict]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "_get_attr_default_value": {
            "name": "_get_attr_default_value",
            "location": 21,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "attribute": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "_strip_attr_defaults": {
            "name": "_strip_attr_defaults",
            "location": 27,
            "return": [
                "Set[str]",
                "dict",
                "Dict[str, List[Callable]]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "attrs_type": [
                    "Type",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[T]",
                    "Dict[str, Any]"
                ],
                "m": [
                    "Mapping[str, Any]",
                    "str",
                    "Dict[str, type]",
                    "Union[int, bytes]",
                    "type"
                ]
            }
        },
        "_get_names_of_defaulted_nonliteral_attrs": {
            "name": "_get_names_of_defaulted_nonliteral_attrs",
            "location": 48,
            "return": [
                "bool",
                "MutableMapping[str, Any]",
                "List[str]",
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "attrs_obj": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_strip_attrs_defaults": {
            "name": "_strip_attrs_defaults",
            "location": 59,
            "return": [
                "dict",
                "Dict[int, Dict[int, Any]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "unstructured_but_unclean": [
                    "dict",
                    "Dict[str, Any]",
                    "Union[Dict, List]",
                    "Dict[str, str]",
                    "tuple"
                ],
                "obj_to_unstructure": [
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "get_stripping_converter": {
            "name": "get_stripping_converter",
            "location": 82,
            "return": [
                "int",
                "BaseException",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "unstruc_strip_defaults": {
            "name": "unstruc_strip_defaults",
            "location": 86,
            "return": [
                "int",
                "Callable"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable"
                ]
            }
        },
        "StripAttrsDefaultsOnUnstructurePatch.unstructure_patch": {
            "name": "unstructure_patch",
            "location": 71,
            "return": [
                "List[List[str]]",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "original_handler": [
                    "Callable",
                    "bool",
                    "Sequence[str]",
                    "dict",
                    "int",
                    "bytes"
                ],
                "obj_to_unstructure": [
                    "int",
                    "Union[float, int]",
                    "Tuple[int, int]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "typecats-master/typecats/tc.py": {
        "make_struc": {
            "name": "make_struc",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "converter": [
                    "bool",
                    "str",
                    "cattr.Converter"
                ]
            }
        },
        "make_unstruc": {
            "name": "make_unstruc",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "converter": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "stripping_converter": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_try_struc": {
            "name": "_try_struc",
            "location": 86,
            "return": [
                "Optional[str]",
                "Optional[BaseException]",
                "Union[int, None]",
                "bool",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "Union[Iterable[str], str]"
            ],
            "arguments": {
                "structure_method": [
                    "int",
                    "bool"
                ],
                "cl": [
                    "Type[types.C]",
                    "Optional[types.StrucInput]",
                    "Type",
                    "Type[object]"
                ],
                "obj": [
                    "Type[types.C]",
                    "Optional[types.StrucInput]",
                    "Type",
                    "Type[object]"
                ]
            }
        },
        "get_default_converter": {
            "name": "get_default_converter",
            "location": 120,
            "return": [
                "Callable",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "register_struc_hook": {
            "name": "register_struc_hook",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "register_unstruc_hook": {
            "name": "register_unstruc_hook",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Cat": {
            "name": "Cat",
            "location": 135,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "maybe_cls": [
                    "int",
                    "Optional[str]",
                    "Optional[AnyStr]",
                    "Callable[[str], int]",
                    "dict"
                ],
                "auto_attribs": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "disallow_empties": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "converter": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "set_struc_converter": {
            "name": "set_struc_converter",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type[types.C]",
                    "Optional[str]",
                    "bool",
                    "Hashable",
                    "str"
                ],
                "converter": [
                    "cattr.Converter",
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "set_unstruc_converter": {
            "name": "set_unstruc_converter",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type[types.C]",
                    "str",
                    "bytes",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "converter": [
                    "cattr.Converter",
                    "bool"
                ],
                "strip_defaults_converter": [
                    "cattr.Converter",
                    "bool"
                ]
            }
        },
        "TypeCat.struc": {
            "name": "struc",
            "location": 36,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "_d": [
                    "Mapping",
                    "bool",
                    "dict",
                    "types.StrucInput",
                    "Optional[types.StrucInput]",
                    "deque"
                ]
            }
        },
        "TypeCat.try_struc": {
            "name": "try_struc",
            "location": 40,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "_d": [
                    "Mapping",
                    "bool",
                    "dict",
                    "types.StrucInput",
                    "Optional[types.StrucInput]",
                    "deque"
                ]
            }
        },
        "TypeCat.unstruc": {
            "name": "unstruc",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_struc._struc_with_hook": {
            "name": "_struc_with_hook",
            "location": 61,
            "return": [
                "float",
                "T",
                "List[int]"
            ],
            "arguments": {
                "cl": [
                    "Type[types.C]",
                    "types.StrucInput",
                    "type",
                    "str"
                ],
                "obj": [
                    "Type[types.C]",
                    "types.StrucInput",
                    "type",
                    "str"
                ]
            }
        },
        "make_unstruc._unstruc": {
            "name": "_unstruc",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "dict",
                    "Dict[Tuple[str, str], Tuple[float, float]]"
                ]
            }
        },
        "Cat.make_cat": {
            "name": "make_cat",
            "location": 174,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type[types.C]",
                    "Union[int, slice]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "set_struc_converter.struc_cat": {
            "name": "struc_cat",
            "location": 218,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "d": [
                    "types.StrucInput",
                    "Optional[types.StrucInput]",
                    "IO[bytes]",
                    "bytes",
                    "Type[T]",
                    "AsyncGenerator"
                ]
            }
        },
        "set_struc_converter.try_struc_cat": {
            "name": "try_struc_cat",
            "location": 222,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "int",
                "types.solution_T",
                "bool"
            ],
            "arguments": {
                "d": [
                    "Optional[types.StrucInput]",
                    "types.StrucInput",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "typecats-master/typecats/types.py": {},
    "typecats-master/typecats/wildcat.py": {
        "is_wildcat": {
            "name": "is_wildcat",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str"
                ]
            }
        },
        "enrich_structured_wildcat": {
            "name": "enrich_structured_wildcat",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "wildcat": [
                    "type",
                    "Mapping[Any, Any]",
                    "dict"
                ],
                "prestructured_obj_dict": [
                    "type",
                    "Mapping[Any, Any]",
                    "dict"
                ],
                "Type": [
                    "type",
                    "Mapping[Any, Any]",
                    "dict"
                ]
            }
        },
        "enrich_unstructured_wildcat": {
            "name": "enrich_unstructured_wildcat",
            "location": 46,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "converter": [
                    "cattr.converters.Converter",
                    "dict",
                    "Tuple['cirq.Qid']",
                    "Tuple[str, list]",
                    "bool"
                ],
                "obj": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "unstructured_obj_dict": [
                    "dict",
                    "Tuple['cirq.Qid']",
                    "cattr.converters.Converter",
                    "Dict[str, Dict[str, float]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "_strip_defined_abstract_methods": {
            "name": "_strip_defined_abstract_methods",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, Any]]",
                    "List[Dict]"
                ]
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations": {
            "name": "setup_warnings_for_dangerous_dict_subclass_operations",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type",
                    "int",
                    "type"
                ]
            }
        },
        "mixin_wildcat_post_attrs_methods": {
            "name": "mixin_wildcat_post_attrs_methods",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type",
                    "type"
                ]
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations.warn_key_set_on_attribute": {
            "name": "warn_key_set_on_attribute",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations.__setitem__": {
            "name": "__setitem__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "int",
                    "dict"
                ],
                "key": [
                    "dict",
                    "float",
                    "str",
                    "list",
                    "Optional[List[str]]",
                    "OrderedDict"
                ],
                "item": [
                    "str",
                    "Dict[str, str]",
                    "Sequence[Any]",
                    "float",
                    "dict",
                    "Callable[[], None]"
                ]
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations.__getitem__": {
            "name": "__getitem__",
            "location": 96,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "setup_warnings_for_dangerous_dict_subclass_operations.update": {
            "name": "update",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "dict"
                ],
                "other_dict": [
                    "Dict[str, float]",
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[int, int, str]",
                    "Set[bytes]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "mixin_wildcat_post_attrs_methods.__repr__": {
            "name": "__repr__",
            "location": 124,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [
                    "dict",
                    "Optional[Dict[str, str]]",
                    "str",
                    "list"
                ]
            }
        },
        "mixin_wildcat_post_attrs_methods.__bool__": {
            "name": "__bool__",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "bool",
                    "str",
                    "List[List[Any]]",
                    "List[str]",
                    "Iterable[int]",
                    "range",
                    "Optional[str]"
                ]
            }
        },
        "mixin_wildcat_post_attrs_methods.__eq__": {
            "name": "__eq__",
            "location": 155,
            "return": [
                "Callable",
                "list"
            ],
            "arguments": {
                "self": [
                    "dict"
                ],
                "other": [
                    "dict"
                ]
            }
        }
    },
    "typecats-master/typecats/__about__.py": {},
    "typecats-master/typecats/__init__.py": {}
}
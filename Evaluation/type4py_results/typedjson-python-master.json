{
    "typedjson-python-master/tests/test_annotation.py": {
        "test_can_obtain_args_of_generics": {
            "name": "test_can_obtain_args_of_generics",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_obtain_parameters_of_generics": {
            "name": "test_can_obtain_parameters_of_generics",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_obtain_origin_of_generics": {
            "name": "test_can_obtain_origin_of_generics",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_obtain_origin_of_tuple": {
            "name": "test_can_obtain_origin_of_tuple",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_obtain_origin_of_list": {
            "name": "test_can_obtain_origin_of_list",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_obtain_supertype_of_newtype": {
            "name": "test_can_obtain_supertype_of_newtype",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_obtain_args_of_raw_generics": {
            "name": "test_cannot_obtain_args_of_raw_generics",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_obtain_parameters_of_raw_generics": {
            "name": "test_cannot_obtain_parameters_of_raw_generics",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_obtain_origin_of_raw_generics": {
            "name": "test_cannot_obtain_origin_of_raw_generics",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_obtain_args_of_non_generics": {
            "name": "test_cannot_obtain_args_of_non_generics",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_obtain_parameters_of_non_generics": {
            "name": "test_cannot_obtain_parameters_of_non_generics",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_obtain_origin_of_non_generics": {
            "name": "test_cannot_obtain_origin_of_non_generics",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_obtain_supertype_of_non_newtype": {
            "name": "test_cannot_obtain_supertype_of_non_newtype",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typedjson-python-master/tests/test_decoding.py": {
        "test_can_decode_str": {
            "name": "test_can_decode_str",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_int": {
            "name": "test_can_decode_int",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_int_as_float": {
            "name": "test_can_decode_int_as_float",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_float": {
            "name": "test_can_decode_float",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_true": {
            "name": "test_can_decode_true",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_false": {
            "name": "test_can_decode_false",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_optional": {
            "name": "test_can_decode_optional",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_homogeneous_fixed_tuple": {
            "name": "test_can_decode_homogeneous_fixed_tuple",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_homogeneous_variable_tuple": {
            "name": "test_can_decode_homogeneous_variable_tuple",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_heterogeneous_fixed_tuple": {
            "name": "test_can_decode_heterogeneous_fixed_tuple",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_homogeneous_list": {
            "name": "test_can_decode_homogeneous_list",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_heterogeneous_list": {
            "name": "test_can_decode_heterogeneous_list",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_dataclass": {
            "name": "test_can_decode_dataclass",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_dataclass_with_redundancy": {
            "name": "test_can_decode_dataclass_with_redundancy",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_parameterized_dataclass": {
            "name": "test_can_decode_parameterized_dataclass",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_dataclass_with_optional": {
            "name": "test_can_decode_dataclass_with_optional",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_newtype": {
            "name": "test_can_decode_newtype",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_union": {
            "name": "test_can_decode_union",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_with_wrong_type": {
            "name": "test_cannot_decode_with_wrong_type",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_float_as_int": {
            "name": "test_cannot_decode_float_as_int",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_none": {
            "name": "test_cannot_decode_none",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannote_decode_tuple_with_incompatible": {
            "name": "test_cannote_decode_tuple_with_incompatible",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_none_as_tuple": {
            "name": "test_cannot_decode_none_as_tuple",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_none_as_list": {
            "name": "test_cannot_decode_none_as_list",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_fixed_tuple_with_short_sequence": {
            "name": "test_cannot_decode_fixed_tuple_with_short_sequence",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_generic_tuple": {
            "name": "test_cannot_decode_generic_tuple",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_generic_list": {
            "name": "test_cannot_decode_generic_list",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_homogeneous_list_with_incompatible": {
            "name": "test_cannot_decode_homogeneous_list_with_incompatible",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_heterogeneous_list_with_incompatible": {
            "name": "test_cannot_decode_heterogeneous_list_with_incompatible",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_generic_union": {
            "name": "test_cannot_decode_generic_union",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_dataclass_with_lack_of_property": {
            "name": "test_cannot_decode_dataclass_with_lack_of_property",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_parameterized_dataclass_with_wrong_parameter": {
            "name": "test_cannot_decode_parameterized_dataclass_with_wrong_parameter",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_raw_dataclass": {
            "name": "test_cannot_decode_raw_dataclass",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_decode_generic_dataclass": {
            "name": "test_cannot_decode_generic_dataclass",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typedjson-python-master/tests/test_dumping.py": {
        "test_dump": {
            "name": "test_dump",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dump_seq": {
            "name": "test_dump_seq",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps": {
            "name": "test_dumps",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps_seq": {
            "name": "test_dumps_seq",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps_int": {
            "name": "test_dumps_int",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps_float": {
            "name": "test_dumps_float",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps_str": {
            "name": "test_dumps_str",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps_bool": {
            "name": "test_dumps_bool",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps_none": {
            "name": "test_dumps_none",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps_newtype": {
            "name": "test_dumps_newtype",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps_tuple_of_name": {
            "name": "test_dumps_tuple_of_name",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dumps_list_of_name": {
            "name": "test_dumps_list_of_name",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typedjson-python-master/tests/test_loading.py": {
        "test_load": {
            "name": "test_load",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_loads": {
            "name": "test_loads",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "typedjson-python-master/typedjson/annotation.py": {
        "args_of": {
            "name": "args_of",
            "location": 9,
            "return": [
                "bool",
                "Optional[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Type",
                    "bool",
                    "dict"
                ]
            }
        },
        "hints_of": {
            "name": "hints_of",
            "location": 14,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "type_": []
            }
        },
        "origin_of": {
            "name": "origin_of",
            "location": 45,
            "return": [
                "List[Dict]",
                "List[int]",
                "str",
                "bool",
                "List[str]",
                "List[List[Any]]"
            ],
            "arguments": {
                "type_": [
                    "Type",
                    "str",
                    "bool",
                    "Union[str, 'Type']"
                ]
            }
        },
        "supertype_of": {
            "name": "supertype_of",
            "location": 61,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Type",
                    "Union[str, 'Type']",
                    "bool",
                    "Callable"
                ]
            }
        },
        "parameters_of": {
            "name": "parameters_of",
            "location": 65,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "type_": [
                    "Type",
                    "str",
                    "int",
                    "ForwardRef",
                    "IO",
                    "List[str]"
                ]
            }
        }
    },
    "typedjson-python-master/typedjson/decoding.py": {
        "decode": {
            "name": "decode",
            "location": 76,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "list",
                    "List[str]",
                    "dict"
                ],
                "json": [
                    "str",
                    "list",
                    "List[str]",
                    "dict"
                ],
                "path": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "decode_as_primitive": {
            "name": "decode_as_primitive",
            "location": 102,
            "return": [
                "Type[BaseException]",
                "str",
                "Optional[Type[BaseException]]"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Optional[List[int]]",
                    "bool",
                    "Type",
                    "Callable",
                    "Optional[str]"
                ],
                "json": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "float",
                    "type",
                    "int",
                    "Optional[float]"
                ],
                "path": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "float",
                    "type",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "decode_as_class": {
            "name": "decode_as_class",
            "location": 126,
            "return": [],
            "arguments": {
                "type_": [
                    "Union[Type, Tuple[Type, ...]]",
                    "str"
                ],
                "json": [
                    "Union[str, int]",
                    "Optional[List[Any]]",
                    "dict"
                ],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "decode_as_union": {
            "name": "decode_as_union",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "json": [
                    "str",
                    "dict",
                    "Optional[int]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "decode_as_tuple": {
            "name": "decode_as_tuple",
            "location": 171,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "type_": [
                    "bool",
                    "str",
                    "Type[Any]"
                ],
                "json": [
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "Type[T]",
                    "BinaryIO"
                ]
            }
        },
        "decode_as_list": {
            "name": "decode_as_list",
            "location": 216,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Literal",
                    "int",
                    "List[str]",
                    "dict",
                    "list"
                ],
                "json": [
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "FrozenSet[str]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "TypeMismatch.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TypeMismatch.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[str]",
                    "str",
                    "List[T]",
                    "list",
                    "List[Union[int, Any]]",
                    "Union[str, list]"
                ]
            }
        },
        "TypeMismatch.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeMismatch.path": {
            "name": "path",
            "location": 33,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsupportedDecoding.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "UnsupportedDecoding.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "Tuple[int, int]",
                    "dict",
                    "Callable[[None], bool]",
                    "Tuple[str]"
                ]
            }
        },
        "UnsupportedDecoding.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsupportedDecoding.path": {
            "name": "path",
            "location": 51,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodingError.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DecodingError.__eq__": {
            "name": "__eq__",
            "location": 62,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "DecodingError.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodingError.reason": {
            "name": "reason",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "decode_as_class._decode": {
            "name": "_decode",
            "location": 131,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "annotation": [
                    "int",
                    "Match",
                    "IO"
                ]
            }
        },
        "decode_as_tuple._required_length": {
            "name": "_required_length",
            "location": 177,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "decode_as_tuple._iter_args": {
            "name": "_iter_args",
            "location": 180,
            "return": [
                "typing.Iterator[typing.Type]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "typedjson-python-master/typedjson/dumping.py": {
        "_serialize": {
            "name": "_serialize",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "decoded": [
                    "Sequence",
                    "List[str]",
                    "bool",
                    "Callable",
                    "List[Dict]"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "decoded": [
                    "float",
                    "str"
                ],
                "file_": [
                    "IO[str]",
                    "Optional[int]",
                    "Sequence[str]",
                    "IO",
                    "str",
                    "FrozenSet[str]",
                    "Tuple[str, str]"
                ],
                "indent": [
                    "IO[str]",
                    "Optional[int]",
                    "Sequence[str]",
                    "IO",
                    "str",
                    "FrozenSet[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "decoded": [
                    "bool",
                    "int"
                ],
                "indent": [
                    "dict",
                    "str",
                    "T",
                    "Optional[int]"
                ]
            }
        }
    },
    "typedjson-python-master/typedjson/loading.py": {
        "load": {
            "name": "load",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Optional[int]"
                ],
                "file_": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str"
                ],
                "string": [
                    "str"
                ]
            }
        }
    },
    "typedjson-python-master/typedjson/__init__.py": {}
}
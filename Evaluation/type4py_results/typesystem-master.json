{
    "typesystem-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 13,
            "return": [
                "str",
                "bytes",
                "Tuple[int]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        },
        "get_packages": {
            "name": "get_packages",
            "location": 21,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "package": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "typesystem-master/examples/api/app.py": {},
    "typesystem-master/examples/form/app.py": {},
    "typesystem-master/tests/test_base.py": {
        "test_validation_result_repr": {
            "name": "test_validation_result_repr",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_error_repr": {
            "name": "test_validation_error_repr",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_error_str": {
            "name": "test_validation_error_str",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_message_repr": {
            "name": "test_validation_message_repr",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/tests/test_composites.py": {
        "test_never_match": {
            "name": "test_never_match",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_one_of": {
            "name": "test_one_of",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_all_of": {
            "name": "test_all_of",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_not": {
            "name": "test_not",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/tests/test_definitions.py": {
        "test_reference": {
            "name": "test_reference",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_definitions_as_mapping": {
            "name": "test_definitions_as_mapping",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_references": {
            "name": "test_string_references",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/tests/test_fields.py": {
        "test_string": {
            "name": "test_string",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_integer": {
            "name": "test_integer",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_float": {
            "name": "test_float",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_decimal": {
            "name": "test_decimal",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_number": {
            "name": "test_number",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_boolean": {
            "name": "test_boolean",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_choice": {
            "name": "test_choice",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_object": {
            "name": "test_object",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_array": {
            "name": "test_array",
            "location": 544,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_date": {
            "name": "test_date",
            "location": 645,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_time": {
            "name": "test_time",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_datetime": {
            "name": "test_datetime",
            "location": 689,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_uuid": {
            "name": "test_uuid",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union": {
            "name": "test_union",
            "location": 733,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_const": {
            "name": "test_const",
            "location": 780,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_errors_dict_interface": {
            "name": "test_errors_dict_interface",
            "location": 802,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_error_messages_interface": {
            "name": "test_error_messages_interface",
            "location": 827,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_error_is_hashable": {
            "name": "test_validation_error_is_hashable",
            "location": 836,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_email": {
            "name": "test_email",
            "location": 842,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_password": {
            "name": "test_password",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ipaddress": {
            "name": "test_ipaddress",
            "location": 858,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_url": {
            "name": "test_url",
            "location": 884,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/tests/test_forms.py": {
        "test_form_rendering": {
            "name": "test_form_rendering",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_password_rendering": {
            "name": "test_password_rendering",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_form_validation": {
            "name": "test_form_validation",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_form_html": {
            "name": "test_form_html",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_forms_from_directory": {
            "name": "test_forms_from_directory",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "Callable"
                ]
            }
        },
        "test_forms_with_directory_override": {
            "name": "test_forms_with_directory_override",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "Callable",
                    "float"
                ]
            }
        }
    },
    "typesystem-master/tests/test_json_schema.py": {
        "load_test_cases": {
            "name": "load_test_cases",
            "location": 50,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "test_json_schema": {
            "name": "test_json_schema",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Union[str, Dict[str, Any]]",
                    "str"
                ],
                "data": [
                    "str",
                    "bool"
                ],
                "is_valid": [
                    "List[str]",
                    "Optional[bool]"
                ],
                "description": [
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "test_json_schema_validator": {
            "name": "test_json_schema_validator",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Union[str, Dict[str, Any]]",
                    "str"
                ],
                "data": [
                    "List[str]",
                    "Optional[bool]"
                ],
                "is_valid": [
                    "List[str]",
                    "Optional[bool]"
                ],
                "description": [
                    "List[str]",
                    "Optional[bool]"
                ]
            }
        },
        "test_to_from_json_schema": {
            "name": "test_to_from_json_schema",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "is_valid": [
                    "Callable",
                    "Optional[Any]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ],
                "description": [
                    "Callable",
                    "Optional[Any]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_schema_to_json_schema": {
            "name": "test_schema_to_json_schema",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_to_json_schema_invalid_field": {
            "name": "test_to_json_schema_invalid_field",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_to_json_schema_complex_regular_expression": {
            "name": "test_to_json_schema_complex_regular_expression",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/tests/test_schemas.py": {
        "test_schema": {
            "name": "test_schema",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_required": {
            "name": "test_required",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_validation": {
            "name": "test_schema_validation",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_array_serialization": {
            "name": "test_schema_array_serialization",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_date_serialization": {
            "name": "test_schema_date_serialization",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_time_serialization": {
            "name": "test_schema_time_serialization",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_datetime_serialization": {
            "name": "test_schema_datetime_serialization",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_decimal_serialization": {
            "name": "test_schema_decimal_serialization",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_uuid_serialization": {
            "name": "test_schema_uuid_serialization",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_reference_serialization": {
            "name": "test_schema_reference_serialization",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_with_callable_default": {
            "name": "test_schema_with_callable_default",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nested_schema": {
            "name": "test_nested_schema",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nested_schema_array": {
            "name": "test_nested_schema_array",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nested_schema_to_json_schema": {
            "name": "test_nested_schema_to_json_schema",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_definitions_to_json_schema": {
            "name": "test_definitions_to_json_schema",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_email_serialization": {
            "name": "test_schema_email_serialization",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_ipaddress_serialization": {
            "name": "test_schema_ipaddress_serialization",
            "location": 528,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_url_serialization": {
            "name": "test_schema_url_serialization",
            "location": 539,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/tests/tokenize/test_tokenize_json.py": {
        "test_tokenize_object": {
            "name": "test_tokenize_object",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tokenize_list": {
            "name": "test_tokenize_list",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tokenize_floats": {
            "name": "test_tokenize_floats",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tokenize_whitespace": {
            "name": "test_tokenize_whitespace",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tokenize_parse_errors": {
            "name": "test_tokenize_parse_errors",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/tests/tokenize/test_tokenize_yaml.py": {
        "test_tokenize_object": {
            "name": "test_tokenize_object",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tokenize_list": {
            "name": "test_tokenize_list",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tokenize_floats": {
            "name": "test_tokenize_floats",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tokenize_parse_errors": {
            "name": "test_tokenize_parse_errors",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/tests/tokenize/test_validate_json.py": {
        "test_validate_json": {
            "name": "test_validate_json",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/tests/tokenize/test_validate_yaml.py": {
        "test_validate_yaml": {
            "name": "test_validate_yaml",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "typesystem-master/typesystem/base.py": {
        "Position.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line_no": [
                    "str",
                    "Optional[str]"
                ],
                "column_no": [
                    "str",
                    "int",
                    "bool"
                ],
                "char_index": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Position.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "list",
                    "T"
                ]
            }
        },
        "Position.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__eq__": {
            "name": "__eq__",
            "location": 77,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "Message.__hash__": {
            "name": "__hash__",
            "location": 86,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.messages": {
            "name": "messages",
            "location": 168,
            "return": [
                "Container[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__iter__": {
            "name": "__iter__",
            "location": 189,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__len__": {
            "name": "__len__",
            "location": 192,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__getitem__": {
            "name": "__getitem__",
            "location": 195,
            "return": [
                "str",
                "bool",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "BaseError.__eq__": {
            "name": "__eq__",
            "location": 198,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Sequence[Sequence[T]]",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "BaseError.__hash__": {
            "name": "__hash__",
            "location": 201,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__repr__": {
            "name": "__repr__",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseError.__str__": {
            "name": "__str__",
            "location": 212,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationResult.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationResult.__iter__": {
            "name": "__iter__",
            "location": 254,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationResult.__bool__": {
            "name": "__bool__",
            "location": 258,
            "return": [
                "Callable[..., None]",
                "bool",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationResult.__repr__": {
            "name": "__repr__",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typesystem-master/typesystem/composites.py": {
        "NeverMatch.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeverMatch.validate": {
            "name": "validate",
            "location": 19,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "OneOf.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "one_of": [
                    "int",
                    "str",
                    "AsyncIterator[T]"
                ]
            }
        },
        "OneOf.validate": {
            "name": "validate",
            "location": 41,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "AllOf.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_of": [
                    "str",
                    "Optional[dict]",
                    "bytes",
                    "float"
                ]
            }
        },
        "AllOf.validate": {
            "name": "validate",
            "location": 70,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "negated": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Not.validate": {
            "name": "validate",
            "location": 90,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "IfThenElse.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "if_clause": [
                    "int",
                    "bool",
                    "float"
                ],
                "then_clause": [
                    "Sequence[float]",
                    "Optional[Callable[[List], Any]]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int",
                    "List[str]",
                    "Iterable[T]"
                ],
                "else_clause": [
                    "str"
                ]
            }
        },
        "IfThenElse.validate": {
            "name": "validate",
            "location": 117,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "AnyStr",
                    "str"
                ]
            }
        }
    },
    "typesystem-master/typesystem/fields.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.validate": {
            "name": "validate",
            "location": 49,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Field.validate_or_error": {
            "name": "validate_or_error",
            "location": 52,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list",
                    "int",
                    "bool"
                ]
            }
        },
        "Field.serialize": {
            "name": "serialize",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Field.has_default": {
            "name": "has_default",
            "location": 62,
            "return": [
                "Callable",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.get_default_value": {
            "name": "get_default_value",
            "location": 65,
            "return": [
                "bool",
                "Dict[str, Tuple[int, int]]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.validation_error": {
            "name": "validation_error",
            "location": 71,
            "return": [
                "Callable[..., None]",
                "float",
                "bool",
                "int",
                "Sequence[Any]",
                "List[Dict[str, Any]]",
                "type"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Optional[str]",
                    "Type[Any]"
                ]
            }
        },
        "Field.get_error_text": {
            "name": "get_error_text",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "Field.__or__": {
            "name": "__or__",
            "location": 78,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "String.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.validate": {
            "name": "validate",
            "location": 142,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, bytes]",
                    "str",
                    "Union[None, str, bytes]",
                    "Optional[dict]",
                    "dict",
                    "Union[bool, str]",
                    "float"
                ]
            }
        },
        "String.serialize": {
            "name": "serialize",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.validate": {
            "name": "validate",
            "location": 239,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[object]",
                    "T",
                    "Union[type, Tuple[type, ...]]",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        },
        "Decimal.serialize": {
            "name": "serialize",
            "location": 313,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        },
        "Boolean.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.validate": {
            "name": "validate",
            "location": 336,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "float",
                    "Optional[object]",
                    "str"
                ]
            }
        },
        "Choice.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.validate": {
            "name": "validate",
            "location": 383,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[object]",
                    "str",
                    "Optional[Union[str, Any]]",
                    "bytes",
                    "float"
                ]
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.validate": {
            "name": "validate",
            "location": 453,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[T, Sequence[T]]",
                    "Optional[List]",
                    "str",
                    "Iterable",
                    "Optional[Dict[str, str]]",
                    "float"
                ]
            }
        },
        "Array.__init__": {
            "name": "__init__",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[Dict[str, Any]]",
                    "Dict[str, bool]",
                    "List[Dict]",
                    "List[str]",
                    "str",
                    "List[T]"
                ],
                "additional_items": [
                    "bool",
                    "Dict[str, Exception]",
                    "List[Dict]",
                    "Optional[List[Any]]",
                    "float"
                ],
                "min_items": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[Tuple[int, int]]",
                    "Optional[float]"
                ],
                "max_items": [
                    "int",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]",
                    "Union[int, str]"
                ],
                "exact_items": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "unique_items": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Array.validate": {
            "name": "validate",
            "location": 607,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[type, Tuple[type, ...]]",
                    "Optional[List]",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "Array.serialize": {
            "name": "serialize",
            "location": 666,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[Union[int, Any]]",
                    "dict",
                    "Optional[\"Outcome\"]",
                    "Optional[Union[str, Any, Any, Any]]",
                    "Optional[float]"
                ]
            }
        },
        "Text.__init__": {
            "name": "__init__",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.__init__": {
            "name": "__init__",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Time.__init__": {
            "name": "__init__",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTime.__init__": {
            "name": "__init__",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Union.__init__": {
            "name": "__init__",
            "location": 705,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "any_of": [
                    "float",
                    "List[str]"
                ]
            }
        },
        "Union.validate": {
            "name": "validate",
            "location": 712,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Optional[str]",
                    "Optional[object]",
                    "Optional[Union[str, Any]]",
                    "float",
                    "Union[None, int, float]",
                    "Optional[bool]"
                ]
            }
        },
        "Any.validate": {
            "name": "validate",
            "location": 746,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Const.__init__": {
            "name": "__init__",
            "location": 757,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "const": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Const.validate": {
            "name": "validate",
            "location": 762,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "int",
                    "bytes"
                ]
            }
        },
        "UUID.__init__": {
            "name": "__init__",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Email.__init__": {
            "name": "__init__",
            "location": 776,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Password.__init__": {
            "name": "__init__",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPAddress.__init__": {
            "name": "__init__",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.__init__": {
            "name": "__init__",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typesystem-master/typesystem/formats.py": {
        "BaseFormat.validation_error": {
            "name": "validation_error",
            "location": 46,
            "return": [
                "Callable[..., None]",
                "float",
                "bool",
                "int",
                "Sequence[Any]",
                "List[Dict[str, Any]]",
                "type"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ]
            }
        },
        "BaseFormat.is_native_type": {
            "name": "is_native_type",
            "location": 50,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "T",
                    "Pattern[str]",
                    "list"
                ]
            }
        },
        "BaseFormat.validate": {
            "name": "validate",
            "location": 53,
            "return": [
                "typing.Union[typing.Any, typesystem.base.ValidationError]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "BaseFormat.serialize": {
            "name": "serialize",
            "location": 56,
            "return": [
                "typing.Optional[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DateFormat.is_native_type": {
            "name": "is_native_type",
            "location": 66,
            "return": [
                "datetime.date",
                "int",
                "AnyStr",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.tzinfo",
                    "Optional[datetime.tzinfo]",
                    "Union[str, datetime.datetime]",
                    "datetime.datetime"
                ]
            }
        },
        "DateFormat.validate": {
            "name": "validate",
            "location": 69,
            "return": [
                "str",
                "datetime.date",
                "int",
                "Sequence[str]",
                "datetime.datetime",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "DateFormat.serialize": {
            "name": "serialize",
            "location": 80,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Tuple[datetime.datetime, datetime.datetime]",
                    "datetime.datetime",
                    "Optional[datetime.date]",
                    "str",
                    "Union[int, None]"
                ]
            }
        },
        "TimeFormat.is_native_type": {
            "name": "is_native_type",
            "location": 95,
            "return": [
                "bool",
                "Optional[datetime.date]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.timedelta",
                    "datetime.tzinfo",
                    "Optional[datetime.tzinfo]",
                    "Union[str, datetime.datetime]"
                ]
            }
        },
        "TimeFormat.validate": {
            "name": "validate",
            "location": 98,
            "return": [
                "int",
                "datetime.datetime",
                "str",
                "datetime.timedelta",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "Pattern[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "TimeFormat.serialize": {
            "name": "serialize",
            "location": 113,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Tuple[datetime.datetime, datetime.datetime]",
                    "Optional[datetime.timedelta]",
                    "str",
                    "Optional[datetime.date]",
                    "Union[int, None]",
                    "int",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "DateTimeFormat.is_native_type": {
            "name": "is_native_type",
            "location": 128,
            "return": [
                "bool",
                "datetime.date",
                "Optional[datetime.date]",
                "AnyStr",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.timedelta",
                    "datetime.tzinfo",
                    "Optional[datetime.tzinfo]",
                    "Union[str, datetime.datetime]"
                ]
            }
        },
        "DateTimeFormat.validate": {
            "name": "validate",
            "location": 131,
            "return": [
                "str",
                "int",
                "datetime.datetime",
                "Sequence[str]",
                "List[str]",
                "datetime.date"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "Pattern[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "DateTimeFormat.serialize": {
            "name": "serialize",
            "location": 159,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Tuple[datetime.datetime, datetime.datetime]",
                    "datetime.datetime",
                    "Optional[datetime.date]",
                    "Optional[datetime.datetime]",
                    "int",
                    "str",
                    "Union[int, None]",
                    "Optional[datetime.timedelta]"
                ]
            }
        },
        "UUIDFormat.is_native_type": {
            "name": "is_native_type",
            "location": 178,
            "return": [
                "int",
                "tuple",
                "str",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "UUIDFormat.validate": {
            "name": "validate",
            "location": 181,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "UUIDFormat.serialize": {
            "name": "serialize",
            "location": 188,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Any",
                    "Optional[IO[str]]",
                    "str",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "EmailFormat.is_native_type": {
            "name": "is_native_type",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "T",
                    "Pattern[str]",
                    "list"
                ]
            }
        },
        "EmailFormat.validate": {
            "name": "validate",
            "location": 203,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "Pattern[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "EmailFormat.serialize": {
            "name": "serialize",
            "location": 210,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ]
            }
        },
        "IPAddressFormat.is_native_type": {
            "name": "is_native_type",
            "location": 223,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "Union[str, bytes, int]"
                ]
            }
        },
        "IPAddressFormat.validate": {
            "name": "validate",
            "location": 226,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Iterable",
                    "bool",
                    "dict"
                ]
            }
        },
        "IPAddressFormat.serialize": {
            "name": "serialize",
            "location": 239,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[int]",
                    "Optional[uuid.UUID]",
                    "int"
                ]
            }
        },
        "URLFormat.is_native_type": {
            "name": "is_native_type",
            "location": 253,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "T",
                    "Pattern[str]",
                    "list"
                ]
            }
        },
        "URLFormat.validate": {
            "name": "validate",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "float",
                    "datetime.timedelta",
                    "int",
                    "datetime.date"
                ]
            }
        },
        "URLFormat.serialize": {
            "name": "serialize",
            "location": 263,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ]
            }
        }
    },
    "typesystem-master/typesystem/forms.py": {
        "Form.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.validate": {
            "name": "validate",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]",
                    "Dict[str, object]",
                    "int",
                    "bool"
                ]
            }
        },
        "Form.is_valid": {
            "name": "is_valid",
            "location": 53,
            "return": [
                "Callable[..., None]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.validated_data": {
            "name": "validated_data",
            "location": 58,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.render_fields": {
            "name": "render_fields",
            "location": 61,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.render_field": {
            "name": "render_field",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.template_for_field": {
            "name": "template_for_field",
            "location": 105,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "typesystem.fields.Field",
                    "str"
                ]
            }
        },
        "Form.input_type_for_field": {
            "name": "input_type_for_field",
            "location": 118,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Form.__str__": {
            "name": "__str__",
            "location": 124,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.__html__": {
            "name": "__html__",
            "location": 127,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jinja2Forms.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jinja2Forms.load_template_env": {
            "name": "load_template_env",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Jinja2Forms.create_form": {
            "name": "create_form",
            "location": 157,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "Union[str, int]",
                    "Union[int, Tuple[int, ...]]",
                    "str"
                ],
                "values": [
                    "int",
                    "Union[str, int]",
                    "Union[int, Tuple[int, ...]]",
                    "str"
                ]
            }
        }
    },
    "typesystem-master/typesystem/json_schema.py": {
        "from_json_schema": {
            "name": "from_json_schema",
            "location": 110,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "marshmallow.Schema"
                ],
                "definitions": [
                    "typesystem.schemas.Schema.Definitions",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "type_from_json_schema": {
            "name": "type_from_json_schema",
            "location": 150,
            "return": [
                "T",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "Optional[List[Any]]",
                    "Optional[int]"
                ],
                "definitions": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "get_valid_types": {
            "name": "get_valid_types",
            "location": 174,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Callable[[Any], str]",
                    "Optional[int]"
                ]
            }
        },
        "from_json_schema_type": {
            "name": "from_json_schema_type",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "type"
                ],
                "type_string": [
                    "str",
                    "float",
                    "int",
                    "AsyncContextManager[None]"
                ],
                "allow_null": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "type"
                ],
                "definitions": [
                    "int",
                    "typesystem.schemas.Schema.Definitions"
                ]
            }
        },
        "ref_from_json_schema": {
            "name": "ref_from_json_schema",
            "location": 339,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "definitions": [
                    "typesystem.schemas.Schema.Definitions",
                    "str",
                    "bytes",
                    "Union[None, int, str]"
                ]
            }
        },
        "enum_from_json_schema": {
            "name": "enum_from_json_schema",
            "location": 345,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "Sequence"
            ],
            "arguments": {
                "data": [
                    "dict"
                ],
                "definitions": [
                    "typesystem.schemas.Schema.Definitions",
                    "Dict[str, Any]",
                    "bytes",
                    "List[str]",
                    "dict",
                    "List[dict]",
                    "Mapping[str, Any]",
                    "Tuple[str]"
                ]
            }
        },
        "const_from_json_schema": {
            "name": "const_from_json_schema",
            "location": 351,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "Sequence"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str"
                ],
                "definitions": [
                    "typesystem.schemas.Schema.Definitions",
                    "Dict[str, Any]",
                    "bytes",
                    "List[str]",
                    "dict",
                    "List[dict]",
                    "Mapping[str, Any]",
                    "Tuple[str]"
                ]
            }
        },
        "all_of_from_json_schema": {
            "name": "all_of_from_json_schema",
            "location": 357,
            "return": [
                "int",
                "bool",
                "Callable[..., None]",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ],
                "definitions": [
                    "Union[int, str]",
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "Iterator[Any]"
                ]
            }
        },
        "any_of_from_json_schema": {
            "name": "any_of_from_json_schema",
            "location": 363,
            "return": [
                "Mapping[str, Sequence[str]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "definitions": [
                    "OrderedDict",
                    "\"DataFrame\"",
                    "str"
                ]
            }
        },
        "one_of_from_json_schema": {
            "name": "one_of_from_json_schema",
            "location": 369,
            "return": [
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "definitions": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "not_from_json_schema": {
            "name": "not_from_json_schema",
            "location": 375,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "Sequence"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "definitions": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "if_then_else_from_json_schema": {
            "name": "if_then_else_from_json_schema",
            "location": 381,
            "return": [
                "int",
                "Union[str, int, float]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "defaultdict"
                ],
                "definitions": [
                    "str",
                    "dict",
                    "bytes",
                    "defaultdict"
                ]
            }
        },
        "to_json_schema": {
            "name": "to_json_schema",
            "location": 402,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "arg": [
                    "Union[typesystem.fields.Field, Type[typesystem.schemas.Schema]]",
                    "List[Dict[str, Any]]"
                ],
                "_definitions": [
                    "Optional[complex]",
                    "Optional[str]",
                    "structs.Number",
                    "Type['Frame']",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_standard_properties": {
            "name": "get_standard_properties",
            "location": 579,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]",
                "Callable",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "field": [
                    "typesystem.fields.Field",
                    "rflx.model.Field",
                    "str",
                    "dataclasses.Field",
                    "dict"
                ]
            }
        }
    },
    "typesystem-master/typesystem/schemas.py": {
        "Schema.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "Optional[Any]",
                    "Union[int, bytes]",
                    "type",
                    "Dict[str, Any]"
                ]
            }
        },
        "Schema.validate": {
            "name": "validate",
            "location": 29,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Dict[str, str]]",
                    "T",
                    "str",
                    "bool"
                ]
            }
        },
        "Schema.serialize": {
            "name": "serialize",
            "location": 75,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[bytes]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Callable[[KT, VT], bool]"
                ]
            }
        },
        "Definitions.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definitions.__getitem__": {
            "name": "__getitem__",
            "location": 97,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "Definitions.__iter__": {
            "name": "__iter__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Definitions.__len__": {
            "name": "__len__",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Definitions.__setitem__": {
            "name": "__setitem__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Definitions.__delitem__": {
            "name": "__delitem__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "Reference.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "int",
                    "bool",
                    "bytes",
                    "str",
                    "Optional[int]"
                ],
                "definitions": [
                    "int",
                    "bool",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "Reference.target": {
            "name": "target",
            "location": 130,
            "return": [
                "eth.chains.base.MiningChain"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reference.validate": {
            "name": "validate",
            "location": 133,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[Union[str, Any]]",
                    "Optional[object]",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "str"
                ]
            }
        },
        "Reference.serialize": {
            "name": "serialize",
            "location": 141,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "typesystem-master/typesystem/unique.py": {
        "Uniqueness.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Type[Exception]"
                ]
            }
        },
        "Uniqueness.__contains__": {
            "name": "__contains__",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "Uniqueness.add": {
            "name": "add",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[Any]",
                    "Sequence[str]",
                    "bool",
                    "list"
                ]
            }
        },
        "Uniqueness.make_hashable": {
            "name": "make_hashable",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Iterable[\"BB\"]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "typesystem-master/typesystem/__init__.py": {},
    "typesystem-master/typesystem/tokenize/positional_validation.py": {
        "validate_with_positions": {
            "name": "validate_with_positions",
            "location": 9,
            "return": [
                "Dict[str, int]",
                "Optional[str]",
                "dict",
                "str"
            ],
            "arguments": {}
        }
    },
    "typesystem-master/typesystem/tokenize/tokenize_json.py": {
        "_TokenizingJSONObject": {
            "name": "_TokenizingJSONObject",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "s_and_end": [
                    "Tuple[str, int]",
                    "int",
                    "str"
                ],
                "strict": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "scan_once": [
                    "int",
                    "bool",
                    "Optional[Union[str, Any]]"
                ],
                "memo": [
                    "int",
                    "float",
                    "str"
                ],
                "content": [
                    "bool",
                    "int",
                    "Tuple[float, float]",
                    "Union[int, float]",
                    "list",
                    "List[str]"
                ],
                "_w": [
                    "str",
                    "list",
                    "Dict[str, str]",
                    "int"
                ],
                "_ws": [
                    "int",
                    "bool",
                    "Position",
                    "float"
                ]
            }
        },
        "_make_scanner": {
            "name": "_make_scanner",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "content": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "tokenize_json": {
            "name": "tokenize_json",
            "location": 165,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Optional[str]",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "content": [
                    "Union[str, bytes]",
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "validate_json": {
            "name": "validate_json",
            "location": 183,
            "return": [
                "dict"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "validator": [
                    "Union[typesystem.fields.Field, Type[typesystem.schemas.Schema]]",
                    "Union[str, bytes]",
                    "str",
                    "sqlparse.sql.Token",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "_make_scanner._scan_once": {
            "name": "_scan_once",
            "location": 110,
            "return": [
                "str",
                "lexer.Token",
                "Tuple[str, str]",
                "Union[str, Dict]",
                "int"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, str]"
                ],
                "idx": [
                    "str"
                ]
            }
        },
        "_make_scanner.scan_once": {
            "name": "scan_once",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int"
                ],
                "idx": [
                    "str",
                    "int"
                ]
            }
        },
        "_TokenizingDecoder.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "typesystem-master/typesystem/tokenize/tokenize_yaml.py": {
        "_get_position": {
            "name": "_get_position",
            "location": 17,
            "return": [
                "Dict[str, bool]",
                "str",
                "dict",
                "List[str]",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "content": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "tokenize_yaml": {
            "name": "tokenize_yaml",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "int",
                    "bytes",
                    "Union[str, bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "validate_yaml": {
            "name": "validate_yaml",
            "location": 114,
            "return": [
                "dict"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "validator": [
                    "Union[typesystem.fields.Field, Type[typesystem.schemas.Schema]]",
                    "Union[str, bytes]",
                    "str",
                    "sqlparse.sql.Token",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "tokenize_yaml.construct_mapping": {
            "name": "construct_mapping",
            "location": 41,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "Union[django.db.models.fields.Field, django.db.models.fields.reverse_related.ForeignObjectRel]",
                    "bool"
                ],
                "node": [
                    "yaml.Node",
                    "List[str]"
                ]
            }
        },
        "tokenize_yaml.construct_sequence": {
            "name": "construct_sequence",
            "location": 47,
            "return": [
                "str",
                "int",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "gen.Wappa.Token",
                    "dict",
                    "yaml.Loader",
                    "Optional[\"Node\"]"
                ],
                "node": [
                    "yaml.Node",
                    "List[str]"
                ]
            }
        },
        "tokenize_yaml.construct_scalar": {
            "name": "construct_scalar",
            "location": 53,
            "return": [
                "str",
                "lexer.Token",
                "int",
                "Union[str, Dict]"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "gen.Wappa.Token",
                    "dict",
                    "yaml.Loader",
                    "Optional[\"Node\"]"
                ],
                "node": [
                    "yaml.Node",
                    "List[str]"
                ]
            }
        },
        "tokenize_yaml.construct_int": {
            "name": "construct_int",
            "location": 59,
            "return": [
                "str",
                "lexer.Token",
                "int",
                "Union[str, Dict]"
            ],
            "arguments": {
                "loader": [
                    "str"
                ],
                "node": [
                    "yaml.Node"
                ]
            }
        },
        "tokenize_yaml.construct_float": {
            "name": "construct_float",
            "location": 65,
            "return": [
                "str",
                "lexer.Token",
                "int",
                "Union[str, Dict]"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "gen.Wappa.Token",
                    "dict",
                    "yaml.Loader",
                    "Optional[\"Node\"]"
                ],
                "node": [
                    "yaml.Node",
                    "List[str]"
                ]
            }
        },
        "tokenize_yaml.construct_bool": {
            "name": "construct_bool",
            "location": 71,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "yaml.Loader",
                    "Optional[\"Node\"]",
                    "dict"
                ],
                "node": [
                    "yaml.Node",
                    "List[str]"
                ]
            }
        },
        "tokenize_yaml.construct_null": {
            "name": "construct_null",
            "location": 77,
            "return": [
                "str",
                "lexer.Token",
                "int",
                "Union[str, Dict]"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "gen.Wappa.Token",
                    "dict",
                    "yaml.Loader",
                    "Optional[\"Node\"]"
                ],
                "node": [
                    "yaml.Node",
                    "List[str]"
                ]
            }
        }
    },
    "typesystem-master/typesystem/tokenize/tokens.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "dict",
                    "str",
                    "bool"
                ],
                "start_index": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "Tuple[int, int, int]",
                    "Dict[str, str]"
                ],
                "end_index": [
                    "int",
                    "float",
                    "bool",
                    "Optional[float]"
                ],
                "content": [
                    "str",
                    "dict",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Token._get_value": {
            "name": "_get_value",
            "location": 15,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token._get_child_token": {
            "name": "_get_child_token",
            "location": 18,
            "return": [
                "\"Token\""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "int",
                    "list"
                ]
            }
        },
        "Token._get_key_token": {
            "name": "_get_key_token",
            "location": 21,
            "return": [
                "\"Token\""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Token.string": {
            "name": "string",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.value": {
            "name": "value",
            "location": 29,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.start": {
            "name": "start",
            "location": 33,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.end": {
            "name": "end",
            "location": 37,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.lookup": {
            "name": "lookup",
            "location": 40,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Token.lookup_key": {
            "name": "lookup_key",
            "location": 49,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Token._get_position": {
            "name": "_get_position",
            "location": 56,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict",
                    "List[int]",
                    "str"
                ]
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "ScalarToken.__hash__": {
            "name": "__hash__",
            "location": 75,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalarToken._get_value": {
            "name": "_get_value",
            "location": 78,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictToken.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictToken._get_value": {
            "name": "_get_value",
            "location": 88,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictToken._get_child_token": {
            "name": "_get_child_token",
            "location": 94,
            "return": [
                "str",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ]
            }
        },
        "DictToken._get_key_token": {
            "name": "_get_key_token",
            "location": 97,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Optional[str]",
                    "Type[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "ListToken._get_value": {
            "name": "_get_value",
            "location": 102,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "str",
                "tuple",
                "List[Mapping[str, str]]",
                "List[cmk.base.api.agent_based.type_defs.CheckPlugin]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListToken._get_child_token": {
            "name": "_get_child_token",
            "location": 105,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "typesystem-master/typesystem/tokenize/__init__.py": {}
}
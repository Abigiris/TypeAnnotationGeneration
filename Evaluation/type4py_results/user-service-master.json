{
    "user-service-master/run.py": {},
    "user-service-master/app/controller.py": {
        "create_user": {
            "name": "create_user",
            "location": 23,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_user": {
            "name": "get_user",
            "location": 31,
            "return": [
                "bool",
                "robot_server.service.protocol.manager.ProtocolManager",
                "List[Dict[str, Any]]",
                "str",
                "\"User\"",
                "medtagger.database.models.Slice",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "transfer.models.TopicID"
                ]
            }
        },
        "delete_user": {
            "name": "delete_user",
            "location": 37,
            "return": [
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]",
                "robot_server.service.protocol.manager.ProtocolManager"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ]
            }
        },
        "login_user": {
            "name": "login_user",
            "location": 44,
            "return": [
                "List[str]",
                "int",
                "Optional[str]",
                "Dict[str, str]",
                "str",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {}
        },
        "renew_token": {
            "name": "renew_token",
            "location": 52,
            "return": [
                "dict",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "search_for_users": {
            "name": "search_for_users",
            "location": 60,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "List[Callable]",
                "dict"
            ],
            "arguments": {}
        },
        "check_health": {
            "name": "check_health",
            "location": 66,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "_assert_can_modify_user": {
            "name": "_assert_can_modify_user",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_client_info": {
            "name": "_get_client_info",
            "location": 79,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "user-service-master/app/routes.py": {
        "create_user": {
            "name": "create_user",
            "location": 12,
            "return": [
                "Tuple[float, float]",
                "bool",
                "Dict[str, Any]",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "get_user": {
            "name": "get_user",
            "location": 18,
            "return": [
                "str",
                "Optional[List[Any]]",
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "delete_user": {
            "name": "delete_user",
            "location": 24,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "search_for_users": {
            "name": "search_for_users",
            "location": 30,
            "return": [
                "bool",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "login_user": {
            "name": "login_user",
            "location": 35,
            "return": [
                "bool",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "renew_token": {
            "name": "renew_token",
            "location": 40,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {}
        },
        "check_health": {
            "name": "check_health",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "user-service-master/app/__init__.py": {
        "handle_request_error": {
            "name": "handle_request_error",
            "location": 38,
            "return": [
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "werkzeug.exceptions.NotFound",
                    "str",
                    "werkzeug.exceptions.Forbidden",
                    "bool",
                    "werkzeug.exceptions.InternalServerError"
                ]
            }
        },
        "handle_not_found": {
            "name": "handle_not_found",
            "location": 53,
            "return": [
                "bool",
                "Dict[str, str]",
                "dict",
                "core.models.User",
                "str"
            ],
            "arguments": {
                "err": [
                    "list",
                    "bool",
                    "int",
                    "str",
                    "BaseException"
                ]
            }
        },
        "handle_method_not_allowed": {
            "name": "handle_method_not_allowed",
            "location": 63,
            "return": [
                "bool",
                "dict",
                "core.models.User",
                "Dict[str, str]",
                "flask.Response",
                "Dict[str, Any]"
            ],
            "arguments": {
                "err": [
                    "bool",
                    "List[bytes]",
                    "str",
                    "dict",
                    "List[manager.models.language.Language]"
                ]
            }
        }
    },
    "user-service-master/app/config/logging.py": {},
    "user-service-master/app/config/util.py": {
        "get_dsn": {
            "name": "get_dsn",
            "location": 5,
            "return": [
                "str",
                "int",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "test_mode": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "user-service-master/app/config/__init__.py": {},
    "user-service-master/app/models/dto.py": {
        "NewUserRequest.fromdict": {
            "name": "fromdict",
            "location": 17,
            "return": [
                "str",
                "dict",
                "asyncworker.http.wrapper.RequestWrapper"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "raw": [
                    "Dict[str, Any]",
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "LoginRequest.fromdict": {
            "name": "fromdict",
            "location": 36,
            "return": [
                "str",
                "dict",
                "OrderedDict",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "raw": [
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "RenewRequest.fromdict": {
            "name": "fromdict",
            "location": 50,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List[Dict[str, str]]",
                    "Optional[str]"
                ],
                "raw": [
                    "Dict[str, Any]",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "LoginResponse.todict": {
            "name": "todict",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDTO.todict": {
            "name": "todict",
            "location": 78,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResponse.todict": {
            "name": "todict",
            "location": 90,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "user-service-master/app/models/__init__.py": {
        "AuthEvent.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenewToken.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "user-service-master/app/repository/auth_event_repo.py": {
        "save": {
            "name": "save",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "users.models.JustfixUser",
                    "services.ticketing.models.ticket_evenTicketEvent",
                    "dict"
                ]
            }
        }
    },
    "user-service-master/app/repository/renew_token_repo.py": {
        "save": {
            "name": "save",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "app.models.RenewToken",
                    "models.Token",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "find_active": {
            "name": "find_active",
            "location": 27,
            "return": [
                "int",
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "transfer.models.ListID"
                ],
                "token": [
                    "str",
                    "int",
                    "transfer.models.ListID"
                ]
            }
        }
    },
    "user-service-master/app/repository/user_repo.py": {
        "save": {
            "name": "save",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "app.models.User",
                    "http_quesuser.model.User",
                    "bool",
                    "readicomponents.User",
                    "asgard.models.user.User"
                ]
            }
        },
        "find_by_username": {
            "name": "find_by_username",
            "location": 28,
            "return": [
                "bool",
                "django.db.models.Model",
                "models.User",
                "app.models.GameMember",
                "app.models.course.Course"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "zerver.models.Realm"
                ]
            }
        },
        "find": {
            "name": "find",
            "location": 33,
            "return": [
                "str",
                "Optional[str]",
                "Sequence[str]",
                "audiopyle.lib.models.plugin.VampyPlugin",
                "dict"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "archive": {
            "name": "archive",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "app.models.User",
                    "int",
                    "str",
                    "datetime.datetime",
                    "zerver.models.UserProfile"
                ],
                "archive_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "search_by_username": {
            "name": "search_by_username",
            "location": 49,
            "return": [
                "bool",
                "Optional[app.models.User]",
                "list",
                "str",
                "Dict[str, List[str]]",
                "models.User"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "user-service-master/app/repository/util.py": {
        "handle_error": {
            "name": "handle_error",
            "location": 15,
            "return": [
                "Callable"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "Optional[Callable]",
                    "int",
                    "Callable[[], None]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "integrity_error_class": [
                    "logging.Logger",
                    "Optional[Callable]",
                    "int",
                    "Callable[[], None]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "_raise_database_error": {
            "name": "_raise_database_error",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "str",
                    "Optional[str]"
                ],
                "e": [
                    "str",
                    "urllib.error.HTTPError",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "sanitize_string": {
            "name": "sanitize_string",
            "location": 44,
            "return": [
                "str",
                "list",
                "Tuple[type]"
            ],
            "arguments": {
                "original": [
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ]
            }
        },
        "handle_error.handle_database_error": {
            "name": "handle_database_error",
            "location": 18,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "f": [
                    "Callable[[], None]",
                    "Iterable[T]",
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]"
                ]
            }
        },
        "handle_error.handle_database_error.decorated": {
            "name": "decorated",
            "location": 20,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "user-service-master/app/service/auth_log.py": {
        "record_login": {
            "name": "record_login",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "models.Course",
                    "zerver.models.Client",
                    "int",
                    "List[dict]",
                    "Union[server.models.User, int]"
                ],
                "client": [
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "models.Course",
                    "zerver.models.Client",
                    "int",
                    "List[dict]",
                    "Union[server.models.User, int]"
                ],
                "success": [
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "models.Course",
                    "zerver.models.Client",
                    "int",
                    "List[dict]",
                    "Union[server.models.User, int]"
                ]
            }
        },
        "record_renewal": {
            "name": "record_renewal",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "models.Course",
                    "zerver.models.Client",
                    "int",
                    "List[dict]",
                    "Union[server.models.User, int]"
                ],
                "client": [
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "models.Course",
                    "zerver.models.Client",
                    "int",
                    "List[dict]",
                    "Union[server.models.User, int]"
                ],
                "success": [
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "models.Course",
                    "zerver.models.Client",
                    "int",
                    "List[dict]",
                    "Union[server.models.User, int]"
                ]
            }
        },
        "record_signup": {
            "name": "record_signup",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "zerver.models.UserProfile",
                    "models.Course",
                    "zerver.models.Client",
                    "int",
                    "tildes.models.user.User",
                    "List[dict]"
                ],
                "client": [
                    "zerver.models.UserProfile",
                    "models.Course",
                    "zerver.models.Client",
                    "int",
                    "tildes.models.user.User",
                    "List[dict]"
                ]
            }
        }
    },
    "user-service-master/app/service/health.py": {
        "check": {
            "name": "check",
            "location": 17,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "_db_connected": {
            "name": "_db_connected",
            "location": 26,
            "return": [
                "bool",
                "Optional[Callable]",
                "str"
            ],
            "arguments": {}
        }
    },
    "user-service-master/app/service/renewal_service.py": {
        "create_token": {
            "name": "create_token",
            "location": 22,
            "return": [
                "int",
                "str",
                "Callable",
                "list"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "excars.models.locations.Location",
                    "transfer.models.ListID",
                    "str"
                ]
            }
        },
        "renew_token": {
            "name": "renew_token",
            "location": 34,
            "return": [
                "List[Dict[str, Any]]",
                "str",
                "Dict[str, Any]",
                "dict",
                "core.models.Recipe"
            ],
            "arguments": {
                "request": [
                    "app.models.dto.RenewRequest",
                    "django.http.HttpRequest"
                ],
                "client": [
                    "app.models.dto.ClientInfo",
                    "str",
                    "dict"
                ]
            }
        },
        "_find_user_and_token": {
            "name": "_find_user_and_token",
            "location": 47,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "dict",
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle"
                ]
            }
        },
        "_set_token_as_used": {
            "name": "_set_token_as_used",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "app.models.RenewToken",
                    "str",
                    "bytes",
                    "datetime.datetime",
                    "Optional[int]"
                ]
            }
        },
        "_generate_token": {
            "name": "_generate_token",
            "location": 63,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {}
        },
        "_hash": {
            "name": "_hash",
            "location": 67,
            "return": [
                "str",
                "bool",
                "Optional[datetime.datetime]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "user-service-master/app/service/user_service.py": {
        "create_user": {
            "name": "create_user",
            "location": 40,
            "return": [
                "bool",
                "core.models.User"
            ],
            "arguments": {
                "req": [
                    "bool",
                    "Optional[str]"
                ],
                "client": [
                    "app.models.dto.ClientInfo",
                    "str",
                    "TextIO"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 52,
            "return": [
                "str",
                "bool",
                "app.models.Tweet",
                "app.models.Position",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ]
            }
        },
        "archive_user": {
            "name": "archive_user",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "login_user": {
            "name": "login_user",
            "location": 65,
            "return": [
                "Dict[str, Any]",
                "app.domain.common.TimeWindow",
                "bool"
            ],
            "arguments": {
                "req": [
                    "int",
                    "bool",
                    "List[Tuple[str, Any]]"
                ],
                "client": [
                    "app.models.dto.ClientInfo",
                    "tracim.models.data.Content",
                    "Callable"
                ]
            }
        },
        "search_for_users": {
            "name": "search_for_users",
            "location": 81,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "Dict[str, Any]",
                "List[aw_core.models.Event]",
                "bytes"
            ],
            "arguments": {
                "query": [
                    "Optional[str]",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "validate_password": {
            "name": "validate_password",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "app.models.dto.NewUserRequest",
                    "User",
                    "Dict[str, str]",
                    "transfer.models.User",
                    "str"
                ]
            }
        },
        "verify_password": {
            "name": "verify_password",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes",
                    "User",
                    "int"
                ],
                "user": [
                    "str",
                    "bytes",
                    "User",
                    "int"
                ]
            }
        },
        "hash_password": {
            "name": "hash_password",
            "location": 102,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_salt_password": {
            "name": "_salt_password",
            "location": 109,
            "return": [
                "dict",
                "IO",
                "str",
                "Dict[str, List[str]]",
                "List[str]"
            ],
            "arguments": {
                "password": [
                    "str",
                    "Tuple[str, str]"
                ],
                "salt": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "_must_get_user": {
            "name": "_must_get_user",
            "location": 114,
            "return": [
                "str",
                "Callable",
                "Optional[\"Period\"]",
                "bool",
                "models.User",
                "int"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "float"
                ],
                "exception": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_user_to_dto": {
            "name": "_user_to_dto",
            "location": 123,
            "return": [
                "contenusers.User",
                "daylighdb.models.User"
            ],
            "arguments": {
                "user": [
                    "app.models.User",
                    "contenusers.User",
                    "str",
                    "Optional[Dict]",
                    "users.models.JustfixUser"
                ]
            }
        },
        "_new_id": {
            "name": "_new_id",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "user-service-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "user-service-master/migrations/versions/1267dcbe4747_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "user-service-master/migrations/versions/72e422541186_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "user-service-master/migrations/versions/938ef9c2af1e_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "user-service-master/tests/test_check_health.py": {
        "test_get_health": {
            "name": "test_get_health",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_health_fail": {
            "name": "test_get_health_fail",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "user-service-master/tests/test_create_user.py": {
        "test_create_user": {
            "name": "test_create_user",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_new_user_not_enough_info": {
            "name": "test_new_user_not_enough_info",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalid_password": {
            "name": "test_invalid_password",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_assert_renew_token": {
            "name": "_assert_renew_token",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "raw": [
                    "str",
                    "Optional[List[str]]",
                    "IO[Any]"
                ],
                "stored": [
                    "str"
                ]
            }
        }
    },
    "user-service-master/tests/test_delete_user.py": {
        "test_creaate_user": {
            "name": "test_creaate_user",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rbac_delete_user": {
            "name": "test_rbac_delete_user",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "user-service-master/tests/test_get_user.py": {
        "test_get_user": {
            "name": "test_get_user",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "user-service-master/tests/test_login_user.py": {
        "test_login_user": {
            "name": "test_login_user",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_login_user_incorrect_values": {
            "name": "test_login_user_incorrect_values",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_is_ipv4": {
            "name": "_is_ipv4",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip_address": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "user-service-master/tests/test_renew_token.py": {
        "test_renew_token": {
            "name": "test_renew_token",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_assert_renew_token": {
            "name": "_assert_renew_token",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "raw": [
                    "str",
                    "Optional[List[str]]",
                    "IO[Any]"
                ],
                "stored": [
                    "str"
                ]
            }
        }
    },
    "user-service-master/tests/test_search_user.py": {
        "test_search_user": {
            "name": "test_search_user",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "user-service-master/tests/test_version.py": {
        "test_version": {
            "name": "test_version",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "user-service-master/tests/__init__.py": {
        "new_id": {
            "name": "new_id",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "insert_items": {
            "name": "insert_items",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "List[app.db.Model]",
                    "List[str]",
                    "T",
                    "Callable",
                    "list"
                ]
            }
        },
        "headers": {
            "name": "headers",
            "location": 28,
            "return": [
                "str",
                "Type[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "role": [
                    "str",
                    "int"
                ]
            }
        },
        "TestEnvironment.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "TestEnvironment.__enter__": {
            "name": "__enter__",
            "location": 42,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironment.__exit__": {
            "name": "__exit__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        }
    }
}
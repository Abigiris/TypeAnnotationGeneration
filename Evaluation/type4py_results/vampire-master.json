{
    "vampire-master/environments/datasets.py": {},
    "vampire-master/environments/environments.py": {},
    "vampire-master/environments/random_search.py": {
        "RandomSearch.random_choice": {
            "name": "random_choice",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "RandomSearch.random_integer": {
            "name": "random_integer",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "low": [
                    "int",
                    "float",
                    "bool"
                ],
                "high": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RandomSearch.random_loguniform": {
            "name": "random_loguniform",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "low": [
                    "Optional[int]",
                    "List[int]"
                ],
                "high": [
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "RandomSearch.random_subset": {
            "name": "random_subset",
            "location": 25,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "RandomSearch.random_pair": {
            "name": "random_pair",
            "location": 33,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "RandomSearch.random_uniform": {
            "name": "random_uniform",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "low": [
                    "float",
                    "int"
                ],
                "high": [
                    "float",
                    "int"
                ]
            }
        },
        "HyperparameterSearch.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperparameterSearch.parse": {
            "name": "parse",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Mapping[str, Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "HyperparameterSearch.sample": {
            "name": "sample",
            "location": 76,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperparameterSearch.update_environment": {
            "name": "update_environment",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "vampire-master/environments/__init__.py": {},
    "vampire-master/scripts/preprocess_data.py": {
        "load_data": {
            "name": "load_data",
            "location": 19,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Generator"
            ],
            "arguments": {
                "data_path": [
                    "str",
                    "bool"
                ],
                "tokenize": [
                    "str",
                    "int",
                    "bool",
                    "BinaryIO"
                ],
                "tokenizer_type": [
                    "str",
                    "int",
                    "bool",
                    "BinaryIO"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "write_list_to_file": {
            "name": "write_list_to_file",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "ls": [
                    "int",
                    "bool",
                    "str"
                ],
                "save_path": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        }
    },
    "vampire-master/scripts/train.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main.append_seed_to_config": {
            "name": "append_seed_to_config",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "seed": [
                    "argparse.Namespace",
                    "Callable",
                    "Dict[str, Any]",
                    "Callable[..., None]"
                ],
                "serialization_dir": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "vampire-master/scripts/verify.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "arguments": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "vampire-master/scripts/__init__.py": {},
    "vampire-master/scripts/figures/curve_plot.py": {},
    "vampire-master/scripts/figures/misc.py": {},
    "vampire-master/scripts/figures/regplot.py": {},
    "vampire-master/vampire/__init__.py": {},
    "vampire-master/vampire/common/allennlp_bridge.py": {
        "ExtendedVocabulary.from_files": {
            "name": "from_files",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str",
                    "Optional[str]",
                    "Union[int, bytes]",
                    "Mapping[str, T]",
                    "Dict[str, Iterable[Any]]"
                ],
                "directory": [
                    "str"
                ]
            }
        },
        "ExtendedVocabulary.save_to_files": {
            "name": "save_to_files",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str"
                ]
            }
        },
        "VocabularyWithPretrainedVAE.from_params": {
            "name": "from_params",
            "location": 96,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "params": [
                    "allennlp.common.params.Params",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "instances": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "vampire-master/vampire/common/util.py": {
        "compute_background_log_frequency": {
            "name": "compute_background_log_frequency",
            "location": 13,
            "return": [
                "\"ImmutableSet[T]\"",
                "str",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "vocab": [
                    "numpy.ndarray",
                    "os.PathLike",
                    "Union[str, TextIO]"
                ],
                "vocab_namespace": [
                    "numpy.ndarray",
                    "os.PathLike",
                    "Union[str, TextIO]"
                ],
                "precomputed_bg_file": [
                    "Optional[str]",
                    "str",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "log_standard_categorical": {
            "name": "log_standard_categorical",
            "location": 40,
            "return": [
                "str",
                "numpy.ndarray",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float"
            ],
            "arguments": {
                "logits": [
                    "str",
                    "float"
                ]
            }
        },
        "separate_labeled_unlabeled_instances": {
            "name": "separate_labeled_unlabeled_instances",
            "location": 58,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]",
                "numpy.ndarray"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "classifier_text": [
                    "str",
                    "int",
                    "bytes"
                ],
                "label": [
                    "str",
                    "int"
                ],
                "metadata": [
                    "str",
                    "int"
                ]
            }
        },
        "schedule": {
            "name": "schedule",
            "location": 83,
            "return": [
                "float",
                "str",
                "torch.FloatTensor",
                "T"
            ],
            "arguments": {
                "batch_num": [
                    "str",
                    "float",
                    "Union[float, int]"
                ],
                "anneal_type": [
                    "bool",
                    "int",
                    "Callable[[int], Any]",
                    "Callable[[str], Any]",
                    "Optional[Any]"
                ]
            }
        },
        "makedirs": {
            "name": "makedirs",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "directory": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "write_to_json": {
            "name": "write_to_json",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "output_filename": [
                    "str",
                    "Union[bytes, str]"
                ],
                "indent": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "sort_keys": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "read_json": {
            "name": "read_json",
            "location": 109,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "input_filename": [
                    "str",
                    "List[str]",
                    "Callable[[str], str]",
                    "int"
                ]
            }
        },
        "read_jsonlist": {
            "name": "read_jsonlist",
            "location": 115,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "input_filename": [
                    "str",
                    "List[str]",
                    "Callable[[str], str]",
                    "int"
                ]
            }
        },
        "write_jsonlist": {
            "name": "write_jsonlist",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "list_of_json_objects": [
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "str"
                ],
                "output_filename": [
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "Union[int, str]"
                ],
                "sort_keys": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "Pattern"
                ]
            }
        },
        "pickle_data": {
            "name": "pickle_data",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Callable",
                    "int",
                    "Optional[bytes]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "output_filename": [
                    "str",
                    "int"
                ]
            }
        },
        "unpickle_data": {
            "name": "unpickle_data",
            "location": 134,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "input_filename": [
                    "str"
                ]
            }
        },
        "read_text": {
            "name": "read_text",
            "location": 140,
            "return": [
                "str",
                "Sequence[str]",
                "list"
            ],
            "arguments": {
                "input_filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "write_list_to_text": {
            "name": "write_list_to_text",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "lines": [
                    "str"
                ],
                "output_filename": [
                    "str",
                    "bool",
                    "float",
                    "Optional[List[str]]",
                    "Union[int, str]"
                ],
                "add_newlines": [
                    "int",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "str"
                ],
                "add_final_newline": [
                    "int",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "str"
                ]
            }
        },
        "save_sparse": {
            "name": "save_sparse",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "sparse_matrix": [
                    "int",
                    "bytes",
                    "torch.utils.data.DataLoader",
                    "bool",
                    "Iterable[Iterable]",
                    "Iterable"
                ],
                "output_filename": [
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "load_sparse": {
            "name": "load_sparse",
            "location": 173,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "input_filename": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "vampire-master/vampire/common/__init__.py": {},
    "vampire-master/vampire/common/testing/test_case.py": {
        "VAETestCase.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VAETestCase.set_up_model": {
            "name": "set_up_model",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "param_file": [
                    "str",
                    "pathlib.Path",
                    "Callable[[float], None]"
                ],
                "dataset_file": [
                    "int",
                    "pathlib.Path",
                    "bool",
                    "str"
                ]
            }
        },
        "VAETestCase.ensure_model_can_train_save_and_load": {
            "name": "ensure_model_can_train_save_and_load",
            "location": 75,
            "return": [
                "bool",
                "str",
                "torch.optim.Optimizer",
                "Model"
            ],
            "arguments": {
                "self": [],
                "param_file": [
                    "str",
                    "TextIO",
                    "Callable[[float], None]",
                    "Optional[pathlib.PurePosixPath]",
                    "Iterable[pathlib.Path]"
                ],
                "tolerance": [
                    "bool",
                    "dict",
                    "List[float]",
                    "_params.Params",
                    "str"
                ],
                "cuda_device": [
                    "str",
                    "List[str]"
                ],
                "gradients_to_ignore": [
                    "Optional[str]",
                    "allennlp.models.model.Model",
                    "Callable",
                    "tensorflow.keras.Model"
                ],
                "overrides": [
                    "List[str]",
                    "str",
                    "Callable[[float], None]",
                    "Container[str]",
                    "Optional[str]"
                ]
            }
        },
        "VAETestCase.assert_fields_equal": {
            "name": "assert_fields_equal",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field1": [
                    "str",
                    "float"
                ],
                "field2": [
                    "str",
                    "float"
                ],
                "name": [
                    "str",
                    "float"
                ],
                "tolerance": [
                    "str",
                    "float"
                ]
            }
        },
        "VAETestCase.check_model_computes_gradients_correctly": {
            "name": "check_model_computes_gradients_correctly",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict"
                ],
                "model_batch": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[dict]"
                ],
                "params_to_ignore": [
                    "str",
                    "bool",
                    "Callable",
                    "Exception",
                    "Tuple[bool]"
                ]
            }
        },
        "VAETestCase.ensure_batch_predictions_are_consistent": {
            "name": "ensure_batch_predictions_are_consistent",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "keys_to_ignore": [
                    "str",
                    "bool"
                ]
            }
        },
        "VAETestCase.tearDown": {
            "name": "tearDown",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vampire-master/vampire/common/testing/__init__.py": {},
    "vampire-master/vampire/data/__init__.py": {},
    "vampire-master/vampire/data/dataset_readers/semisupervised_text_classification_json.py": {
        "SemiSupervisedTextClassificationJsonReader.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_indexers": [
                    "bool",
                    "int",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "allennlp.data.tokenizers.Tokenizer",
                    "Dict[str, int]"
                ],
                "tokenizer": [
                    "bool",
                    "int",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "allennlp.data.tokenizers.Tokenizer",
                    "Dict[str, int]"
                ],
                "max_sequence_length": [
                    "bool",
                    "int",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "allennlp.data.tokenizers.Tokenizer",
                    "Dict[str, int]"
                ],
                "ignore_labels": [
                    "numpy.ndarray",
                    "str",
                    "Optional[float]",
                    "bool",
                    "List[numpy.ndarray]",
                    "List[str]"
                ],
                "sample": [
                    "application.domain.common.TenantProvider"
                ],
                "skip_label_indexing": [
                    "bool",
                    "int",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "allennlp.data.tokenizers.Tokenizer",
                    "Dict[str, int]"
                ],
                "lazy": [
                    "bool",
                    "int",
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "allennlp.data.tokenizers.Tokenizer",
                    "Dict[str, int]"
                ]
            }
        },
        "SemiSupervisedTextClassificationJsonReader._reservoir_sampling": {
            "name": "_reservoir_sampling",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "file_": [
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "sample": [
                    "int",
                    "bytes"
                ]
            }
        },
        "SemiSupervisedTextClassificationJsonReader._read": {
            "name": "_read",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "SemiSupervisedTextClassificationJsonReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 145,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "label": [
                    "str",
                    "Union[str, int]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "vampire-master/vampire/data/dataset_readers/vampire_reader.py": {
        "VampireReader.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "sample": [
                    "int",
                    "bool",
                    "float"
                ],
                "min_sequence_length": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "VampireReader._read": {
            "name": "_read",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "VampireReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 64,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "vec": [
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "list",
                    "str",
                    "List[int]",
                    "List[shromazdeni.reports.utils.Field]"
                ]
            }
        }
    },
    "vampire-master/vampire/data/dataset_readers/__init__.py": {},
    "vampire-master/vampire/models/classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "bool",
                    "allennlp.data.Vocabulary",
                    "int"
                ],
                "input_embedder": [
                    "int",
                    "bool",
                    "float"
                ],
                "encoder": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "initializer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Classifier.forward": {
            "name": "forward",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str"
                ],
                "label": [
                    "Collection[int]",
                    "torch.Tensor",
                    "Union[str, Callable[[], str]]"
                ]
            }
        },
        "Classifier.get_metrics": {
            "name": "get_metrics",
            "location": 108,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "str",
                    "dict",
                    "Optional[int]"
                ]
            }
        }
    },
    "vampire-master/vampire/models/vampire.py": {
        "VAMPIRE.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "int",
                    "str",
                    "bool",
                    "Union[Iterable[str], str]",
                    "float"
                ],
                "bow_embedder": [
                    "int",
                    "bool",
                    "float"
                ],
                "vae": [
                    "int",
                    "bool",
                    "float"
                ],
                "kl_weight_annealing": [
                    "str"
                ],
                "linear_scaling": [
                    "int",
                    "Union[float, int]",
                    "str",
                    "float",
                    "Union[str, type]",
                    "Union[float, Tuple[float, float]]",
                    "Tuple[int]"
                ],
                "sigmoid_weight_1": [
                    "int",
                    "Union[float, int]",
                    "str",
                    "float",
                    "Union[str, type]",
                    "Union[float, Tuple[float, float]]",
                    "Tuple[int]"
                ],
                "sigmoid_weight_2": [
                    "int",
                    "Union[float, int]",
                    "str",
                    "float",
                    "Union[str, type]",
                    "Union[float, Tuple[float, float]]",
                    "Tuple[int]"
                ],
                "reference_counts": [
                    "int"
                ],
                "reference_vocabulary": [
                    "int",
                    "str",
                    "Optional[IO[str]]"
                ],
                "background_data_path": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "update_background_freq": [
                    "List[List[int]]",
                    "bytes",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "track_topics": [
                    "int",
                    "bool",
                    "float"
                ],
                "track_npmi": [
                    "int",
                    "bool",
                    "float"
                ],
                "initializer": [
                    "int",
                    "bool",
                    "float"
                ],
                "regularizer": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "VAMPIRE.initialize_bg_from_file": {
            "name": "initialize_bg_from_file",
            "location": 148,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "file_": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "VAMPIRE.bow_reconstruction_loss": {
            "name": "bow_reconstruction_loss",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "reconstructed_bow": [
                    "str",
                    "bytes"
                ],
                "target_bow": [
                    "str",
                    "bool",
                    "Union[int, float]",
                    "Optional[str]"
                ]
            }
        },
        "VAMPIRE.update_kld_weight": {
            "name": "update_kld_weight",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch_num": [
                    "int",
                    "bool",
                    "Union[str, float]"
                ]
            }
        },
        "VAMPIRE.update_topics": {
            "name": "update_topics",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch_num": [
                    "int",
                    "bool",
                    "Union[str, float]"
                ]
            }
        },
        "VAMPIRE.update_npmi": {
            "name": "update_npmi",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VAMPIRE.extract_topics": {
            "name": "extract_topics",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "int",
                    "Sequence",
                    "common.SVGBoundaries",
                    "str"
                ],
                "k": [
                    "str",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "VAMPIRE.generate_npmi_vals": {
            "name": "generate_npmi_vals",
            "location": 295,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "interactions": [
                    "bool",
                    "numpy.matrix",
                    "int",
                    "list"
                ],
                "document_sums": [
                    "numpy.array",
                    "int",
                    "bool"
                ]
            }
        },
        "VAMPIRE.compute_npmi": {
            "name": "compute_npmi",
            "location": 324,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "int",
                    "gluonts.model.forecasForecast",
                    "numpy.ndarray"
                ],
                "num_words": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "VAMPIRE.freeze_weights": {
            "name": "freeze_weights",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VAMPIRE.forward": {
            "name": "forward",
            "location": 368,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "bool",
                    "dict"
                ],
                "epoch_num": [
                    "int",
                    "Dict[str, int]",
                    "float",
                    "Mapping[str, Any]",
                    "Tuple[int, int, int]",
                    "str"
                ]
            }
        },
        "VAMPIRE.get_metrics": {
            "name": "get_metrics",
            "location": 441,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "deoplete.util.UserContext",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "vampire-master/vampire/models/__init__.py": {},
    "vampire-master/vampire/modules/encoder.py": {
        "Encoder.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "architecture": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Encoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 24,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Encoder.forward": {
            "name": "forward",
            "location": 27,
            "return": [
                "torch.FloatTensor"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "architecture": [
                    "str",
                    "apps.common.coininfo.CoinInfo",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 38,
            "return": [
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxPoolEncoder.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_dim": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MaxPoolEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxPoolEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 51,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxPoolEncoder.forward": {
            "name": "forward",
            "location": 54,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[allennlp.data.tokenizers.token.Token]",
                    "str",
                    "int",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ],
                "mask": [
                    "str",
                    "int",
                    "allennlp.models.semantic_parsing.nlvr.nlvr_decoder_state.NlvrDecoderState",
                    "List[int]"
                ]
            }
        },
        "Seq2Vec.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "architecture": [
                    "str",
                    "apps.common.coininfo.CoinInfo",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "Seq2Vec.forward": {
            "name": "forward",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq2Seq.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "architecture": [
                    "str",
                    "apps.common.coininfo.CoinInfo",
                    "bytes",
                    "Iterable[str]"
                ],
                "aggregations": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Seq2Seq.get_output_dim": {
            "name": "get_output_dim",
            "location": 85,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seq2Seq.forward": {
            "name": "forward",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vampire-master/vampire/modules/pretrained_vae.py": {
        "_PretrainedVAE.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_archive": [
                    "str",
                    "list",
                    "Union[str, bytes]",
                    "int"
                ],
                "device": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "background_frequency": [
                    "str",
                    "bytes"
                ],
                "requires_grad": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "PretrainedVAE.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_archive": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "device": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "background_frequency": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "requires_grad": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "scalar_mix": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "dropout": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "PretrainedVAE.get_output_dim": {
            "name": "get_output_dim",
            "location": 68,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretrainedVAE.forward": {
            "name": "forward",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "str",
                    "torch.Tensor",
                    "models.characters.states.StatusEffect"
                ]
            }
        },
        "PretrainedVAE.from_params": {
            "name": "from_params",
            "location": 103,
            "return": [
                "str",
                "Union[str, Dict]"
            ],
            "arguments": {
                "cls": [
                    "allennlp.common.Params",
                    "Dict[str, Any]"
                ],
                "params": [
                    "Optional[str]",
                    "str",
                    "allennlp.common.params.Params",
                    "NamedTuple"
                ]
            }
        }
    },
    "vampire-master/vampire/modules/__init__.py": {},
    "vampire-master/vampire/modules/token_embedders/vampire_token_embedder.py": {
        "VampireTokenEmbedder.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_archive": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "device": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "background_frequency": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "scalar_mix": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "dropout": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "requires_grad": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "projection_dim": [
                    "List[int]",
                    "str"
                ],
                "expand_dim": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "VampireTokenEmbedder.get_output_dim": {
            "name": "get_output_dim",
            "location": 67,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "VampireTokenEmbedder.forward": {
            "name": "forward",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "torch.LongTensor",
                    "bytes",
                    "int",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "str",
                    "list"
                ]
            }
        },
        "VampireTokenEmbedder.from_params": {
            "name": "from_params",
            "location": 99,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "allennlp.common.Params",
                    "Dict[str, Any]"
                ],
                "vocab": [
                    "allennlp.data.Vocabulary",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "allennlp.common.Params"
                ],
                "params": [
                    "allennlp.common.params.Params",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "vampire-master/vampire/modules/token_embedders/__init__.py": {},
    "vampire-master/vampire/modules/vae/logistic_normal.py": {
        "LogisticNormal.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "bool",
                    "int"
                ],
                "encoder": [
                    "bool",
                    "Optional[Any]",
                    "Callable[[str], bool]",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ],
                "mean_projection": [
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "log_variance_projection": [
                    "str",
                    "bool",
                    "List[Dict]"
                ],
                "decoder": [
                    "Optional[float]",
                    "allennlp.modules.FeedForward"
                ],
                "kld_clamp": [
                    "bool",
                    "Optional[Any]",
                    "Callable[[str], bool]",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ],
                "z_dropout": [
                    "bool",
                    "Optional[Any]",
                    "Callable[[str], bool]",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ]
            }
        },
        "LogisticNormal.forward": {
            "name": "forward",
            "location": 35,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_repr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LogisticNormal.estimate_params": {
            "name": "estimate_params",
            "location": 56,
            "return": [
                "Callable",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "torch.nn.utils.rnn.PackedSequence",
                "torch.FloatTensor",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_repr": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "LogisticNormal.compute_negative_kld": {
            "name": "compute_negative_kld",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "LogisticNormal.generate_latent_code": {
            "name": "generate_latent_code",
            "location": 84,
            "return": [
                "Optional[str]",
                "str",
                "IO[Any]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "input_repr": [
                    "Optional[str]",
                    "str",
                    "IO[Any]",
                    "Callable"
                ]
            }
        },
        "LogisticNormal.encode": {
            "name": "encode",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_vector": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LogisticNormal.get_beta": {
            "name": "get_beta",
            "location": 129,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vampire-master/vampire/modules/vae/vae.py": {
        "VAE.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "VAE.estimate_params": {
            "name": "estimate_params",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_repr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "VAE.compute_negative_kld": {
            "name": "compute_negative_kld",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "VAE.generate_latent_code": {
            "name": "generate_latent_code",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_repr": [
                    "torch.Tensor",
                    "List[Tuple[int, int, str]]"
                ]
            }
        },
        "VAE.get_beta": {
            "name": "get_beta",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VAE.encode": {
            "name": "encode",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_vector": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "vampire-master/vampire/modules/vae/__init__.py": {},
    "vampire-master/vampire/tests/__init__.py": {},
    "vampire-master/vampire/tests/data/dataset_readers/semisupervised_text_classification_json_test.py": {
        "TestSemiSupervisedTextClassificationJsonReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemiSupervisedTextClassificationJsonReader.test_read_from_file_and_truncates_properly": {
            "name": "test_read_from_file_and_truncates_properly",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemiSupervisedTextClassificationJsonReader.test_samples_properly": {
            "name": "test_samples_properly",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemiSupervisedTextClassificationJsonReader.test_sampling_fails_when_sample_size_larger_than_file_size": {
            "name": "test_sampling_fails_when_sample_size_larger_than_file_size",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemiSupervisedTextClassificationJsonReader.test_samples_according_to_seed_properly": {
            "name": "test_samples_according_to_seed_properly",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSemiSupervisedTextClassificationJsonReader.test_ignores_label_properly": {
            "name": "test_ignores_label_properly",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vampire-master/vampire/tests/models/classifier_test.py": {
        "TestClassifiers.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiers.test_seq2seq_clf_with_vae_token_embedder_can_train_save_and_load": {
            "name": "test_seq2seq_clf_with_vae_token_embedder_can_train_save_and_load",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiers.test_seq2seq_clf_with_vae_token_embedder_batch_predictions_are_consistent": {
            "name": "test_seq2seq_clf_with_vae_token_embedder_batch_predictions_are_consistent",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiers.test_seq2vec_clf_with_vae_token_embedder_can_train_save_and_load": {
            "name": "test_seq2vec_clf_with_vae_token_embedder_can_train_save_and_load",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiers.test_seq2seq_clf_with_vae_token_embedder_forward_pass_runs_correctly": {
            "name": "test_seq2seq_clf_with_vae_token_embedder_forward_pass_runs_correctly",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassifiers.test_seq2vec_clf_with_vae_token_embedder_forward_pass_runs_correctly": {
            "name": "test_seq2vec_clf_with_vae_token_embedder_forward_pass_runs_correctly",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vampire-master/vampire/tests/models/vampire_test.py": {
        "TestVampire.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVampire.test_model_can_train_save_and_load_unsupervised": {
            "name": "test_model_can_train_save_and_load_unsupervised",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVampire.test_npmi_computed_correctly": {
            "name": "test_npmi_computed_correctly",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vampire-master/vampire/tests/modules/token_embedders/vampire_token_embedder_test.py": {
        "TestVampireTokenEmbedder.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVampireTokenEmbedder.test_forward_works_with_encoder_output_and_projection": {
            "name": "test_forward_works_with_encoder_output_and_projection",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVampireTokenEmbedder.test_forward_encoder_output_with_expansion_works": {
            "name": "test_forward_encoder_output_with_expansion_works",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVampireTokenEmbedder.test_projection_works_with_encoder_weight_representations": {
            "name": "test_projection_works_with_encoder_weight_representations",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVampireTokenEmbedder.test_forward_works_with_encoder_weight_and_projection": {
            "name": "test_forward_works_with_encoder_weight_and_projection",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVampireTokenEmbedder.test_forward_works_with_encoder_output_expand_and_projection": {
            "name": "test_forward_works_with_encoder_output_expand_and_projection",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
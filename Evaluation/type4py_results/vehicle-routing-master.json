{
    "vehicle-routing-master/vrp.py": {
        "cli": {
            "name": "cli",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "distance_matrix": {
            "name": "distance_matrix",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "app_key": [
                    "str",
                    "Tuple[int, int]",
                    "List[str]",
                    "Dict[str, Any]",
                    "tuple",
                    "Callable"
                ],
                "locations_json": [
                    "str",
                    "Tuple[int, int]",
                    "List[str]",
                    "Dict[str, Any]",
                    "tuple",
                    "Callable"
                ],
                "output_csv": [
                    "str",
                    "Tuple[int, int]",
                    "List[str]",
                    "Dict[str, Any]",
                    "tuple",
                    "Callable"
                ],
                "output_pickle": [
                    "str",
                    "Tuple[int, int]",
                    "List[str]",
                    "Dict[str, Any]",
                    "tuple",
                    "Callable"
                ]
            }
        },
        "scan_all": {
            "name": "scan_all",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "distance_matrix": [
                    "str",
                    "Optional[str]"
                ],
                "configuration": [
                    "str",
                    "Optional[str]"
                ],
                "vehicles": [
                    "str",
                    "Optional[str]"
                ],
                "output_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ortools": {
            "name": "ortools",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "distance_matrix": [
                    "str",
                    "Optional[str]"
                ],
                "configuration": [
                    "str",
                    "Optional[str]"
                ],
                "vehicles": [
                    "str",
                    "Optional[str]"
                ],
                "output_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "simulated_annealing": {
            "name": "simulated_annealing",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "distance_matrix": [
                    "str"
                ],
                "configuration": [
                    "str"
                ],
                "vehicles": [
                    "str"
                ],
                "output_file": [
                    "str"
                ]
            }
        },
        "genetic": {
            "name": "genetic",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "distance_matrix": [
                    "str",
                    "Optional[str]"
                ],
                "configuration": [
                    "str",
                    "Optional[str]"
                ],
                "vehicles": [
                    "str",
                    "Optional[str]"
                ],
                "output_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "simulation": {
            "name": "simulation",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "algorithm": [
                    "str",
                    "int",
                    "Optional[web3.types.Wei]",
                    "List[str]"
                ],
                "iterations": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "float"
                ],
                "distance_matrix": [
                    "str",
                    "int",
                    "Optional[web3.types.Wei]",
                    "List[str]"
                ],
                "configuration": [
                    "str",
                    "int",
                    "Optional[web3.types.Wei]",
                    "List[str]"
                ],
                "vehicles": [
                    "str",
                    "int",
                    "Optional[web3.types.Wei]",
                    "List[str]"
                ],
                "output_file": [
                    "str",
                    "int",
                    "Optional[web3.types.Wei]",
                    "List[str]"
                ]
            }
        },
        "comparison_chart": {
            "name": "comparison_chart",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "chart_title": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[Sequence[Any]]"
                ],
                "statistic_type": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[Sequence[Any]]"
                ],
                "output_filename": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "aggregation_type": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "scan_all": [
                    "str",
                    "bool",
                    "int"
                ],
                "ortools": [
                    "str",
                    "bool",
                    "int"
                ],
                "genetic": [
                    "str",
                    "bool",
                    "int"
                ],
                "simulated_annealing": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "aggregation_chart": {
            "name": "aggregation_chart",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "chart_title": [
                    "bool",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Callable",
                    "Callable[[T], Any]"
                ],
                "statistic_type": [
                    "bool",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Callable",
                    "Callable[[T], Any]"
                ],
                "algorithm": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "input_file": [
                    "str",
                    "bool"
                ],
                "aggregation_type": [
                    "str",
                    "Optional[str]",
                    "Optional[\"CustomerReference\"]",
                    "int"
                ],
                "output_filename": [
                    "str",
                    "Optional[str]",
                    "Optional[\"CustomerReference\"]",
                    "int"
                ]
            }
        },
        "custom_chart": {
            "name": "custom_chart",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "chart_title": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Type]"
                ],
                "statistic_type": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Type]"
                ],
                "output_filename": [
                    "str",
                    "bool",
                    "float",
                    "Optional[str]"
                ],
                "aggregation_type": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Type]"
                ],
                "input_file": [
                    "str",
                    "int",
                    "List[str]",
                    "AsyncContextManager[None]",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "vehicle-routing-master/algorithms/base.py": {
        "BaseSolver.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "distance_matrix_path": [
                    "str",
                    "Optional[str]"
                ],
                "configuration_path": [
                    "str",
                    "pathlib.Path"
                ],
                "vehicles_path": [
                    "str",
                    "pathlib.Path"
                ],
                "output_path": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "BaseSolver.solve": {
            "name": "solve",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSolver._solve": {
            "name": "_solve",
            "location": 49,
            "return": [
                "typing.Tuple[typing.Sequence, builtins.float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSolver._arc_cost": {
            "name": "_arc_cost",
            "location": 52,
            "return": [
                "Tuple[str, int, Dict[str, str]]",
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "from_node": [
                    "int",
                    "Optional[int]",
                    "Union[List[str], List[Any]]",
                    "Optional[Union[Any, Any]]"
                ],
                "to_node": [
                    "int",
                    "Optional[int]",
                    "Union[List[str], List[Any]]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "BaseSolver._get_sequence_cost": {
            "name": "_get_sequence_cost",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "List[List[int]]",
                    "list",
                    "List[Tuple[str, int, int]]",
                    "int",
                    "str"
                ]
            }
        },
        "BaseSolver._print_results": {
            "name": "_print_results",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "Sequence",
                    "List[str]",
                    "Optional[int]",
                    "int",
                    "bool",
                    "List[dict]",
                    "Callable",
                    "pathlib.Path"
                ],
                "sequence_cost": [
                    "float",
                    "int",
                    "List[float]",
                    "str"
                ],
                "execution_time": [
                    "float",
                    "int",
                    "List[float]",
                    "str"
                ]
            }
        },
        "BaseSolver._save_results": {
            "name": "_save_results",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "int",
                    "str"
                ],
                "sequence_cost": [
                    "int",
                    "str"
                ],
                "execution_time": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "vehicle-routing-master/algorithms/genetic.py": {
        "GeneticSolver.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "distance_matrix_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "configuration_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "vehicles_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "output_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ]
            }
        },
        "GeneticSolver._solve": {
            "name": "_solve",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneticSolver._generate_initial_population": {
            "name": "_generate_initial_population",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneticSolver._get_population_with_costs": {
            "name": "_get_population_with_costs",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneticSolver._select_elites": {
            "name": "_select_elites",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "population_with_costs": [
                    "Iterable",
                    "str",
                    "int",
                    "dict",
                    "bool"
                ]
            }
        },
        "GeneticSolver._perform_tournament_selection": {
            "name": "_perform_tournament_selection",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "selected_sequences": [
                    "List[List[int]]",
                    "list"
                ],
                "population_with_costs": [
                    "int",
                    "float",
                    "bytearray",
                    "str"
                ]
            }
        },
        "GeneticSolver._perform_crossing": {
            "name": "_perform_crossing",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "float",
                    "List[List[int]]",
                    "List[int]",
                    "str",
                    "Dict[str, str]",
                    "list",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "GeneticSolver._pmx_crossing": {
            "name": "_pmx_crossing",
            "location": 90,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "sequence_a": [
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "sequence_b": [
                    "float",
                    "int",
                    "random.Random",
                    "str"
                ]
            }
        },
        "GeneticSolver._get_pmx_crossed_sequence": {
            "name": "_get_pmx_crossed_sequence",
            "location": 108,
            "return": [
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "sequence_a": [
                    "bool",
                    "int"
                ],
                "sequence_b": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "Iterable[Any]"
                ],
                "part_from_a": [
                    "bytes",
                    "int",
                    "str"
                ],
                "part_from_b": [
                    "List[List[int]]",
                    "int",
                    "bool"
                ],
                "start_index": [
                    "int",
                    "float",
                    "bool"
                ],
                "end_index": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GeneticSolver._mutate_population": {
            "name": "_mutate_population",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "List[List[str]]",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "GeneticSolver._mutate_by_inversion": {
            "name": "_mutate_by_inversion",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "List[int]",
                    "int"
                ]
            }
        }
    },
    "vehicle-routing-master/algorithms/ortools_solution.py": {
        "OrtoolsSolver.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "distance_matrix_path": [
                    "str",
                    "bool"
                ],
                "configuration_path": [
                    "str",
                    "bool"
                ],
                "vehicles_path": [
                    "str",
                    "bool"
                ],
                "output_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "OrtoolsSolver._solve": {
            "name": "_solve",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrtoolsSolver._get_best_sequence": {
            "name": "_get_best_sequence",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "routing": [
                    "Optional[base.WhereSpec]",
                    "Optional[base.OrderSpec]",
                    "str"
                ],
                "assignment": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "float"
                ]
            }
        },
        "OrtoolsSolver._create_distance_callback": {
            "name": "_create_distance_callback",
            "location": 43,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vehicle-routing-master/algorithms/scan_all.py": {
        "ScanAllSolver.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "distance_matrix_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "configuration_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "vehicles_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "output_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ]
            }
        },
        "ScanAllSolver._solve": {
            "name": "_solve",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vehicle-routing-master/algorithms/simulated_annealing.py": {
        "SimulatedAnnealingSolver.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "distance_matrix_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]"
                ],
                "configuration_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]"
                ],
                "vehicles_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]"
                ],
                "output_path": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "SimulatedAnnealingSolver._solve": {
            "name": "_solve",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulatedAnnealingSolver._generate_initial_sequence": {
            "name": "_generate_initial_sequence",
            "location": 41,
            "return": [
                "float",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulatedAnnealingSolver._create_new_sequence": {
            "name": "_create_new_sequence",
            "location": 47,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "list",
                    "List[int]",
                    "int"
                ]
            }
        },
        "SimulatedAnnealingSolver.calculate_probability": {
            "name": "calculate_probability",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "iteration_number": [
                    "int",
                    "Callable",
                    "str"
                ],
                "cost": [
                    "float",
                    "List[int]",
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "SimulatedAnnealingSolver._calculate_temperature": {
            "name": "_calculate_temperature",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "iteration_number": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "vehicle-routing-master/algorithms/__init__.py": {},
    "vehicle-routing-master/data/summary.py": {},
    "vehicle-routing-master/data/charts/simulated_annealing_theory/simulated_annealing.py": {
        "calculate_temperature": {
            "name": "calculate_temperature",
            "location": 6,
            "return": [
                "int",
                "T",
                "str",
                "bool"
            ],
            "arguments": {
                "temperature_factor": [
                    "int"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "calculate_probability": {
            "name": "calculate_probability",
            "location": 10,
            "return": [
                "Optional[Union[str, Any]]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "delta": [
                    "float",
                    "str",
                    "int"
                ],
                "temperature": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "get_temperature_trace": {
            "name": "get_temperature_trace",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "iterations": [
                    "int",
                    "Collection[\"Issue\"]",
                    "List[float]",
                    "float"
                ],
                "N": [
                    "int",
                    "Collection[\"Issue\"]",
                    "List[float]",
                    "float"
                ],
                "color": [
                    "int",
                    "list"
                ]
            }
        },
        "get_probability_trace_const_N": {
            "name": "get_probability_trace_const_N",
            "location": 27,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "iterations": [
                    "int",
                    "numpy.ndarray",
                    "Collection[\"Issue\"]",
                    "List[list]"
                ],
                "N": [
                    "int",
                    "numpy.ndarray"
                ],
                "d": [
                    "int",
                    "Sequence",
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "color": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "Union[int, str]",
                    "Union[int, numpy.ndarray]",
                    "List[int]"
                ]
            }
        },
        "get_probability_trace_const_d": {
            "name": "get_probability_trace_const_d",
            "location": 42,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "iterations": [
                    "numpy.ndarray",
                    "int",
                    "Collection[\"Issue\"]"
                ],
                "N": [
                    "numpy.ndarray",
                    "int",
                    "Collection[\"Issue\"]"
                ],
                "d": [
                    "int",
                    "Optional[int]"
                ],
                "color": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "Dict[int, List[Any]]",
                    "numpy.int",
                    "bool"
                ]
            }
        }
    },
    "vehicle-routing-master/tests/test_genetic_algorithm.py": {
        "genetic_solver": {
            "name": "genetic_solver",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_select_elites": {
            "name": "test_select_elites",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "genetic_solver": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_perform_tournament_selection": {
            "name": "test_perform_tournament_selection",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "genetic_solver": [
                    "Callable"
                ]
            }
        },
        "test_get_pmx_crossed_sequence": {
            "name": "test_get_pmx_crossed_sequence",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "sequence_a": [],
                "sequence_b": [
                    "List[str]"
                ],
                "start_index": [
                    "int"
                ],
                "end_index": [
                    "int"
                ],
                "expected_result": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "vehicle-routing-master/tests/__init__.py": {},
    "vehicle-routing-master/tools/distance_matrix.py": {
        "DistanceMatrixManager.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_key": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "DistanceMatrixManager.create_distance_matrix": {
            "name": "create_distance_matrix",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locations_json_path": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Tuple[int, int]",
                    "int"
                ],
                "output_csv_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "output_pickle_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DistanceMatrixManager._extract_coordinates": {
            "name": "_extract_coordinates",
            "location": 36,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "locations": [
                    "List[dict]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "DistanceMatrixManager._compose_distance_matrix": {
            "name": "_compose_distance_matrix",
            "location": 43,
            "return": [
                "int",
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "coordinates": [
                    "str"
                ]
            }
        },
        "DistanceMatrixManager._get_coordinates_by_part_number": {
            "name": "_get_coordinates_by_part_number",
            "location": 72,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "coordinates": [
                    "list",
                    "str",
                    "Optional[str]"
                ],
                "part_number": [
                    "str",
                    "int"
                ]
            }
        },
        "DistanceMatrixManager._get_distance_matrix_from_gmaps": {
            "name": "_get_distance_matrix_from_gmaps",
            "location": 78,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "origins": [
                    "str",
                    "bytes",
                    "IO"
                ],
                "destinations": [
                    "str",
                    "bytes",
                    "IO"
                ]
            }
        },
        "DistanceMatrixManager._extract_raw_distance_matrix": {
            "name": "_extract_raw_distance_matrix",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "distance_matrix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DistanceMatrixManager._stack_matrixes": {
            "name": "_stack_matrixes",
            "location": 102,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "base_matrix": [
                    "Optional[numpy.ndarray]",
                    "Dict[int, Dict[str, str]]",
                    "numpy.ndarray",
                    "bool",
                    "int"
                ],
                "new_matrix": [
                    "Type",
                    "Optional[str]",
                    "dict",
                    "Dict[str, int]",
                    "str",
                    "Iterable[Any]"
                ],
                "stack_function": [
                    "Type",
                    "Optional[str]",
                    "dict",
                    "Dict[str, int]",
                    "str",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "vehicle-routing-master/tools/file_operations.py": {
        "load_from_pickle_file": {
            "name": "load_from_pickle_file",
            "location": 11,
            "return": [
                "bytes",
                "Callable",
                "Dict[str, Dict[str, str]]",
                "Mapping[int, str]",
                "dict"
            ],
            "arguments": {
                "path": [
                    "Union[pathlib.Path, str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_from_json_file": {
            "name": "load_from_json_file",
            "location": 17,
            "return": [
                "dict",
                "str",
                "pathlib.Path",
                "Optional[Dict[str, Any]]",
                "List[str]",
                "List[Dict[str, Any]]",
                "bytes",
                "List[List[str]]"
            ],
            "arguments": {
                "path": [
                    "Union[pathlib.Path, str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_json_and_validate": {
            "name": "load_json_and_validate",
            "location": 24,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "schema_path": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "Sequence[str]",
                    "Path"
                ],
                "file_path": [
                    "pathlib.Path",
                    "str",
                    "pathlib.PurePath"
                ]
            }
        },
        "save_to_pickle_file": {
            "name": "save_to_pickle_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "content": [
                    "bool",
                    "TextIO",
                    "List[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "save_to_csv_file": {
            "name": "save_to_csv_file",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "str",
                    "bytes",
                    "pathlib.PurePath",
                    "Optional[str]"
                ],
                "header": [
                    "Iterable[Any]",
                    "str",
                    "dict",
                    "bool"
                ],
                "rows": [
                    "Iterable[Any]",
                    "list",
                    "bool",
                    "str",
                    "List[pathlib.Path]"
                ],
                "delimiter": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "append_to_csv_file": {
            "name": "append_to_csv_file",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "Union[pathlib.Path, str]",
                    "str",
                    "pathlib.Path",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "Union[str, pathlib.Path]"
                ],
                "rows": [
                    "Iterable[Any]",
                    "list",
                    "str",
                    "List[pathlib.Path]",
                    "bool",
                    "Tuple[str]"
                ],
                "delimiter": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "list"
                ]
            }
        },
        "load_csv_file": {
            "name": "load_csv_file",
            "location": 55,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "delimiter": [
                    "str"
                ]
            }
        }
    },
    "vehicle-routing-master/tools/__init__.py": {},
    "vehicle-routing-master/tools/charts/aggregations.py": {
        "AggregationChart.build": {
            "name": "build",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "drawable_stats": [
                    "int",
                    "Optional[str]",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "aggregation_types": [
                    "Iterable",
                    "bool",
                    "str",
                    "MutableSequence[str]",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "vehicle-routing-master/tools/charts/base.py": {
        "BaseChart.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "statistic_type": [
                    "pyspark.sql.types.DataType",
                    "Type"
                ],
                "chart_tilte": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseChart._get_chart_data_from_csv_results": {
            "name": "_get_chart_data_from_csv_results",
            "location": 22,
            "return": [
                "dict",
                "str",
                "bool",
                "Optional[Dict[str, Any]]",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "csv_results": [
                    "List[dict]",
                    "bool",
                    "Callable[[List], None]"
                ]
            }
        },
        "BaseChart._get_aggregation_method": {
            "name": "_get_aggregation_method",
            "location": 38,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "aggregator": [
                    "tools.charts.types.AggregatorType",
                    "str"
                ]
            }
        },
        "BaseChart._get_data_to_plot": {
            "name": "_get_data_to_plot",
            "location": 50,
            "return": [
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "chart_data": [
                    "Dict[int, Dict]",
                    "dict"
                ],
                "aggregator": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[[Any], Awaitable[None]]"
                ]
            }
        },
        "BaseChart._plot_chart": {
            "name": "_plot_chart",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "figure_data": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[numpy.ndarray]",
                    "Tuple['cirq.Qid']",
                    "Union[Dict, List]"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseChart._get_color": {
            "name": "_get_color",
            "location": 75,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "scatter_number": [
                    "int",
                    "List[str]",
                    "bytearray"
                ]
            }
        }
    },
    "vehicle-routing-master/tools/charts/comparison.py": {
        "ComparisonChart.build": {
            "name": "build",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "drawable_stats": [
                    "List[dict]",
                    "str",
                    "bool",
                    "type",
                    "List[str]",
                    "MutableSequence[str]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "aggregation_type": [
                    "Type[T]",
                    "mypy.types.Type",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "vehicle-routing-master/tools/charts/custom.py": {
        "CustomChart.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "statistic_type": [
                    "str"
                ],
                "chart_tilte": [
                    "str"
                ],
                "aggregation_type": [
                    "str",
                    "Type",
                    "pyspark.sql.types.DataType"
                ]
            }
        },
        "CustomChart.build": {
            "name": "build",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "drawable_stats": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "list",
                    "dict"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "vehicle-routing-master/tools/charts/types.py": {
        "get_styles_for_aggregator": {
            "name": "get_styles_for_aggregator",
            "location": 17,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "aggregator": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "DrawableStats.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stats_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "DrawableStats.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomDrawableStats.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stats_path": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "vehicle-routing-master/tools/charts/__init__.py": {}
}
{
    "vkpore-master/setup.py": {},
    "vkpore-master/docs/conf.py": {},
    "vkpore-master/example/client.py": {},
    "vkpore-master/example/longpoll.py": {},
    "vkpore-master/tests/testing_tools.py": {
        "Session.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "int",
                    "bool"
                ],
                "execute_fail": [
                    "str",
                    "int",
                    "bool"
                ],
                "longpoll_failed": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "vkpore-master/tests/test_events.py": {
        "test_message_data_with_all_attachments": {
            "name": "test_message_data_with_all_attachments",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "vkpore-master/tests/test_vkclient.py": {},
    "vkpore-master/tests/test_vkpore.py": {
        "app": {
            "name": "app",
            "location": 11,
            "return": [],
            "arguments": {
                "event_loop": []
            }
        },
        "test_initialization": {
            "name": "test_initialization",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_no_clients": {
            "name": "test_no_clients",
            "location": 24,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "vkpore-master/tests/__init__.py": {},
    "vkpore-master/vkpore/events.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str"
                ],
                "group_id": [
                    "bool",
                    "Set[str]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "source": [
                    "str",
                    "IO",
                    "int",
                    "bool",
                    "Tuple[str, str]"
                ]
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.initialize": {
            "name": "initialize",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "callbacks": [
                    "str"
                ]
            }
        },
        "EventRaw.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, List[str]]",
                    "Optional[str]"
                ],
                "source": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "MessageData.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "group_id": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "source": [
                    "int",
                    "dict",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "MessageNew.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, List[str]]",
                    "Optional[str]"
                ],
                "source": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, List[str]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "vkpore-master/vkpore/objects.py": {
        "Attachment.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "TextIO",
                    "Optional[str]"
                ]
            }
        },
        "AttachmentContent.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "source": [
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "AttachmentContent.prepared": {
            "name": "prepared",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "dict",
                    "bytes",
                    "int",
                    "list"
                ]
            }
        },
        "Photo.uploaded_by_group": {
            "name": "uploaded_by_group",
            "location": 114,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhotoSize.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bytes",
                    "dict",
                    "Callable[[Any], str]",
                    "Dict[str, object]"
                ]
            }
        },
        "Video.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Exception",
                    "dict",
                    "Callable"
                ]
            }
        },
        "Audio.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Exception",
                    "Callable",
                    "str"
                ]
            }
        },
        "Doc.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "Link.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "dict",
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        },
        "Sticker.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bool",
                    "Union[int, str]",
                    "dict",
                    "bytes",
                    "List[str]",
                    "list"
                ]
            }
        },
        "StickerSize.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Sequence[Any]"
                ]
            }
        },
        "Gift.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "Wall.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "dict",
                    "bool",
                    "eth.abc.StateAPI",
                    "int",
                    "list",
                    "Dict[Tuple[int, ...], int]"
                ]
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "vkpore-master/vkpore/utils.py": {
        "read_only_properties": {
            "name": "read_only_properties",
            "location": 26,
            "return": [
                "str",
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "read_only_properties.decorator": {
            "name": "decorator",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        },
        "read_only_properties.decorator.modified_setattr": {
            "name": "modified_setattr",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "Sequence[str]",
                    "Iterable[str]"
                ],
                "name": [
                    "str",
                    "dict",
                    "bool"
                ],
                "value": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "vkpore-master/vkpore/vkclient.py": {
        "Request.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "bool"
                ],
                "arguments": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "List[int]"
                ]
            }
        },
        "VkClient.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "int"
                ],
                "session": [
                    "bytes",
                    "int",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.TokenNetworkID",
                    "Dict[str, Any]",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.Address"
                ],
                "loop": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "metrics_backend.utils.Address",
                    "bool",
                    "bytes",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "VkClient.group_id": {
            "name": "group_id",
            "location": 90,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VkClient.group_name": {
            "name": "group_name",
            "location": 95,
            "return": [
                "str",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VkClient.start": {
            "name": "start",
            "location": 123,
            "return": [
                "bool",
                "Callable",
                "List[int]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VkClient.longpoll": {
            "name": "longpoll",
            "location": 196,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "default_longpoll": [
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "vkpore-master/vkpore/vkpore.py": {
        "Vkpore.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ],
                "loop": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "metrics_backend.utils.Address",
                    "asyncio.AbstractEventLoop"
                ],
                "session": [
                    "Optional[str]",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "str",
                    "raiden.utils.TokenAddress",
                    "List[logging.Handler]",
                    "Optional[float]"
                ]
            }
        },
        "Vkpore.get_client": {
            "name": "get_client",
            "location": 36,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "IO[bytes]",
                    "str"
                ]
            }
        },
        "Vkpore._get_event_class": {
            "name": "_get_event_class",
            "location": 47,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "utils.types.JSON"
            ],
            "arguments": {
                "update_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "Vkpore.on": {
            "name": "on",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "widark.Event",
                    "homeassistancore.Event",
                    "Union[sched.Event, None]",
                    "str",
                    "evenevents.Event"
                ]
            }
        },
        "Vkpore.dispatch": {
            "name": "dispatch",
            "location": 144,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Event",
                    "Dict[str, Any]",
                    "widark.Event",
                    "homeassistancore.Event",
                    "events.Event"
                ]
            }
        },
        "Vkpore.run_until_complete": {
            "name": "run_until_complete",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "awaitable": [
                    "Coroutine",
                    "asyncio.AbstractEventLoop",
                    "str",
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "Vkpore.run": {
            "name": "run",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Vkpore.on.decorator": {
            "name": "decorator",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "function": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "vkpore-master/vkpore/__init__.py": {}
}
{
    "vldc-bot-master/bot/config.py": {
        "get_aoc_session": {
            "name": "get_aoc_session",
            "location": 5,
            "return": [
                "str",
                "Optional[Any]",
                "Container[\"Taxon\"]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_debug": {
            "name": "get_debug",
            "location": 10,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "bytes",
                "bool"
            ],
            "arguments": {}
        },
        "get_debugger": {
            "name": "get_debugger",
            "location": 15,
            "return": [
                "str",
                "IO",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_group_chat_id": {
            "name": "get_group_chat_id",
            "location": 20,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "get_token": {
            "name": "get_token",
            "location": 28,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "get_mongo_user": {
            "name": "get_mongo_user",
            "location": 36,
            "return": [
                "Iterable[str]",
                "set"
            ],
            "arguments": {}
        },
        "get_mongo_pass": {
            "name": "get_mongo_pass",
            "location": 43,
            "return": [
                "set",
                "bool",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 50,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "Sequence[str]"
            ],
            "arguments": {}
        }
    },
    "vldc-bot-master/bot/filters.py": {
        "TrustedDB.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TrustedDB.is_trusted": {
            "name": "is_trusted",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TrustedFilter.filter": {
            "name": "filter",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "telebotypes.Message",
                    "dict",
                    "bool"
                ]
            }
        },
        "AdminFilter.filter": {
            "name": "filter",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "Mapping[str, Any]",
                    "pymongo.database.Database"
                ]
            }
        },
        "UwuFilter.filter": {
            "name": "filter",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "OnlyAdminOnOthersFilter.filter": {
            "name": "filter",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "telegram.Message",
                    "float"
                ]
            }
        }
    },
    "vldc-bot-master/bot/main.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "vldc-bot-master/bot/mode.py": {
        "cleanup_queue_update": {
            "name": "cleanup_queue_update",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "queue": [
                    "bool",
                    "int",
                    "config.Config"
                ],
                "cmd": [
                    "str",
                    "Dict[str, Any]"
                ],
                "result": [
                    "list",
                    "dict",
                    "int",
                    "tuple",
                    "bool",
                    "message.header.Message",
                    "Dict[str, str]"
                ],
                "seconds": [
                    "bool",
                    "int",
                    "config.Config"
                ],
                "remove_cmd": [
                    "int",
                    "str",
                    "bool",
                    "Callable"
                ],
                "remove_reply": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "_remove_message_after": {
            "name": "_remove_message_after",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "int",
                    "telegram.Message",
                    "str",
                    "BaseException"
                ],
                "job_queue": [
                    "telegram.exJobQueue",
                    "discord.Message",
                    "telebotypes.Message",
                    "int"
                ],
                "seconds": [
                    "int",
                    "telegram.Message",
                    "str",
                    "BaseException"
                ]
            }
        },
        "Mode.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Mapping[str, Any]]"
                ],
                "default": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ],
                "pin_info_msg": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "dict"
                ],
                "off_callback": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ],
                "on_callback": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Mode._gen_chat_data_key": {
            "name": "_gen_chat_data_key",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "mode_name": [
                    "str"
                ]
            }
        },
        "Mode._get_mode_state": {
            "name": "_get_mode_state",
            "location": 51,
            "return": [
                "str",
                "T",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ]
            }
        },
        "Mode._set_mode": {
            "name": "_set_mode",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bool"
                ],
                "context": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "Mode._add_on_off_handlers": {
            "name": "_add_on_off_handlers",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode._remove_mode_handlers": {
            "name": "_remove_mode_handlers",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode._add_mode_handlers": {
            "name": "_add_mode_handlers",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mode._mode_on": {
            "name": "_mode_on",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "update": [
                    "telegram.Update",
                    "telegram.exCallbackContext",
                    "telegram.Bot"
                ],
                "context": [
                    "telegram.Update",
                    "telegram.exCallbackContext",
                    "telegram.update.Update"
                ]
            }
        },
        "Mode._mode_off": {
            "name": "_mode_off",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "update": [
                    "telegram.Update",
                    "telegram.exCallbackContext",
                    "telegram.exUpdater",
                    "Iterable[Dict[str, Any]]"
                ],
                "context": [
                    "telegram.Update"
                ]
            }
        },
        "Mode._mode_status": {
            "name": "_mode_status",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "update": [
                    "telegram.Update",
                    "telegram.exCallbackContext"
                ],
                "context": [
                    "telegram.Update",
                    "dict",
                    "T"
                ]
            }
        },
        "Mode.add": {
            "name": "add",
            "location": 145,
            "return": [
                "int",
                "telegram.exUpdater",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Mode.add.wrapper": {
            "name": "wrapper",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "upd": [
                    "float",
                    "Optional[str]",
                    "str",
                    "Callable[[dict], None]"
                ],
                "handlers_group": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "vldc-bot-master/bot/__init__.py": {},
    "vldc-bot-master/bot/db/mongo.py": {
        "get_db": {
            "name": "get_db",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "db_name": [
                    "str"
                ]
            }
        }
    },
    "vldc-bot-master/bot/db/__init__.py": {},
    "vldc-bot-master/bot/skills/aoc_mode.py": {
        "start_aoc_handlers": {
            "name": "start_aoc_handlers",
            "location": 57,
            "return": [],
            "arguments": {
                "queue": [],
                "bot": []
            }
        },
        "stop_aoc_handlers": {
            "name": "stop_aoc_handlers",
            "location": 67,
            "return": [],
            "arguments": {
                "queue": [],
                "bot": []
            }
        },
        "test": {
            "name": "test",
            "location": 73,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "add_aoc_mode": {
            "name": "add_aoc_mode",
            "location": 78,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "aoc_day_from_datetime": {
            "name": "aoc_day_from_datetime",
            "location": 82,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "aoc_time_since_day_start": {
            "name": "aoc_time_since_day_start",
            "location": 86,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "cmp": {
            "name": "cmp",
            "location": 90,
            "return": [],
            "arguments": {
                "_x": [],
                "_y": []
            }
        },
        "calculate_solved_by": {
            "name": "calculate_solved_by",
            "location": 108,
            "return": [],
            "arguments": {
                "members": [],
                "current_day": []
            }
        },
        "process_aoc_update": {
            "name": "process_aoc_update",
            "location": 135,
            "return": [],
            "arguments": {
                "data": [],
                "bot": []
            }
        },
        "update_aoc_data": {
            "name": "update_aoc_data",
            "location": 186,
            "return": [],
            "arguments": {
                "bot": [],
                "queue": []
            }
        },
        "DB.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "db_name": []
            }
        },
        "DB.update": {
            "name": "update",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DB.get": {
            "name": "get",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DB.remove_all": {
            "name": "remove_all",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cmp.inner_cmp": {
            "name": "inner_cmp",
            "location": 94,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "vldc-bot-master/bot/skills/at_least_70k.py": {
        "add_70k": {
            "name": "add_70k",
            "location": 15,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "_70k": {
            "name": "_70k",
            "location": 21,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/ban.py": {
        "add_ban": {
            "name": "add_ban",
            "location": 12,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "ban": {
            "name": "ban",
            "location": 18,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/banme.py": {
        "get_mute_minutes": {
            "name": "get_mute_minutes",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "add_banme": {
            "name": "add_banme",
            "location": 21,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "banme": {
            "name": "banme",
            "location": 27,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/coc.py": {
        "add_coc": {
            "name": "add_coc",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "upd": [
                    "int",
                    "telegram.exUpdater",
                    "Optional[str]"
                ],
                "handlers_group": [
                    "logging.Logger",
                    "List[Dict[str, float]]",
                    "logging.FileHandler",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "coc": {
            "name": "coc",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "update": [
                    "telegram.Update",
                    "telegram.exCallbackContext"
                ],
                "context": [
                    "telegram.Update",
                    "telegram.exCallbackContext"
                ]
            }
        }
    },
    "vldc-bot-master/bot/skills/core.py": {
        "add_core": {
            "name": "add_core",
            "location": 9,
            "return": [],
            "arguments": {
                "upd": [],
                "core_handlers_group": []
            }
        },
        "start": {
            "name": "start",
            "location": 16,
            "return": [],
            "arguments": {
                "update": [],
                "_": []
            }
        },
        "help_": {
            "name": "help_",
            "location": 22,
            "return": [],
            "arguments": {
                "update": [],
                "_": []
            }
        },
        "error": {
            "name": "error",
            "location": 53,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/covid_mode.py": {
        "add_covid_mode": {
            "name": "add_covid_mode",
            "location": 164,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "set_handlers": {
            "name": "set_handlers",
            "location": 235,
            "return": [],
            "arguments": {
                "queue": [],
                "bot": []
            }
        },
        "cure_all": {
            "name": "cure_all",
            "location": 254,
            "return": [],
            "arguments": {
                "queue": [],
                "bot": []
            }
        },
        "start_pandemic": {
            "name": "start_pandemic",
            "location": 288,
            "return": [],
            "arguments": {
                "queue": [],
                "bot": []
            }
        },
        "temp": {
            "name": "temp",
            "location": 294,
            "return": [],
            "arguments": {
                "update": []
            }
        },
        "stats": {
            "name": "stats",
            "location": 318,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "quarantine": {
            "name": "quarantine",
            "location": 354,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "test": {
            "name": "test",
            "location": 368,
            "return": [],
            "arguments": {
                "update": [],
                "_": []
            }
        },
        "cough": {
            "name": "cough",
            "location": 377,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "infect_admin": {
            "name": "infect_admin",
            "location": 415,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "random_cough": {
            "name": "random_cough",
            "location": 432,
            "return": [],
            "arguments": {
                "bot": [],
                "queue": []
            }
        },
        "random_fate": {
            "name": "random_fate",
            "location": 451,
            "return": [],
            "arguments": {
                "bot": []
            }
        },
        "get_single_user_photo": {
            "name": "get_single_user_photo",
            "location": 499,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "infect_user_masked_condition": {
            "name": "infect_user_masked_condition",
            "location": 515,
            "return": [],
            "arguments": {
                "user": [],
                "masked_probability": [],
                "unmasked_probability": [],
                "context": []
            }
        },
        "catch_message": {
            "name": "catch_message",
            "location": 544,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "hash_img": {
            "name": "hash_img",
            "location": 569,
            "return": [],
            "arguments": {
                "img": []
            }
        },
        "container_predict": {
            "name": "container_predict",
            "location": 573,
            "return": [],
            "arguments": {
                "img": [],
                "key": []
            }
        },
        "is_avatar_has_mask": {
            "name": "is_avatar_has_mask",
            "location": 596,
            "return": [],
            "arguments": {
                "img": [],
                "user": [],
                "context": []
            }
        },
        "daily_infection": {
            "name": "daily_infection",
            "location": 625,
            "return": [],
            "arguments": {
                "chat_id": [],
                "bot": []
            }
        },
        "DB.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "db_name": []
            }
        },
        "DB.find_all": {
            "name": "find_all",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DB.find": {
            "name": "find",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.add": {
            "name": "add",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "DB.infect": {
            "name": "infect",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.cure": {
            "name": "cure",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.is_user_infected": {
            "name": "is_user_infected",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.add_quarantine": {
            "name": "add_quarantine",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "since": [],
                "until": []
            }
        },
        "DB.add_lethality": {
            "name": "add_lethality",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "since": []
            }
        },
        "DB.is_lethaled": {
            "name": "is_lethaled",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.remove": {
            "name": "remove",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.remove_all": {
            "name": "remove_all",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "vldc-bot-master/bot/skills/fools.py": {
        "add_fools_mode": {
            "name": "add_fools_mode",
            "location": 19,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "mesa\u011da_traduko": {
            "name": "mesa\u011da_traduko",
            "location": 34,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "f": {
            "name": "f",
            "location": 60,
            "return": [],
            "arguments": {
                "text": [],
                "lingvo": []
            }
        },
        "_make_traduki": {
            "name": "_make_traduki",
            "location": 78,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "_make_traduki.tr": {
            "name": "tr",
            "location": 79,
            "return": [],
            "arguments": {
                "string": [],
                "lang": []
            }
        }
    },
    "vldc-bot-master/bot/skills/kozula.py": {
        "add_kozula": {
            "name": "add_kozula",
            "location": 18,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "_get_usd_rate": {
            "name": "_get_usd_rate",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "kozula": {
            "name": "kozula",
            "location": 39,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/length.py": {
        "add_length": {
            "name": "add_length",
            "location": 26,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "_length": {
            "name": "_length",
            "location": 74,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "_longest": {
            "name": "_longest",
            "location": 96,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "DB.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "db_name": []
            }
        },
        "DB.get_best_n": {
            "name": "get_best_n",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "DB.add": {
            "name": "add",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        }
    },
    "vldc-bot-master/bot/skills/mute.py": {
        "add_mute": {
            "name": "add_mute",
            "location": 20,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "_get_minutes": {
            "name": "_get_minutes",
            "location": 46,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "mute_user_for_time": {
            "name": "mute_user_for_time",
            "location": 56,
            "return": [],
            "arguments": {
                "update": [],
                "context": [],
                "user": [],
                "mute_duration": []
            }
        },
        "mute": {
            "name": "mute",
            "location": 83,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "mute_self": {
            "name": "mute_self",
            "location": 89,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "unmute_user": {
            "name": "unmute_user",
            "location": 111,
            "return": [],
            "arguments": {
                "update": [],
                "context": [],
                "user": []
            }
        },
        "unmute": {
            "name": "unmute",
            "location": 127,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/nastya_mode.py": {
        "add_nastya_mode": {
            "name": "add_nastya_mode",
            "location": 21,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "handle_voice": {
            "name": "handle_voice",
            "location": 33,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/nya.py": {
        "add_nya": {
            "name": "add_nya",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "upd": [
                    "int",
                    "telegram.exUpdater",
                    "Optional[str]"
                ],
                "handlers_group": [
                    "Dict[str, Callable[[], None]]",
                    "Tuple[float]",
                    "logging.LogRecord",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "nya": {
            "name": "nya",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "update": [
                    "telegram.Update",
                    "telegram.exCallbackContext",
                    "telegram.Bot",
                    "telegram.update.Update"
                ],
                "context": [
                    "Dict[str, Any]",
                    "telegram.Update",
                    "telegram.update.Update",
                    "str"
                ]
            }
        }
    },
    "vldc-bot-master/bot/skills/pr.py": {
        "add_pr": {
            "name": "add_pr",
            "location": 15,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "_pr": {
            "name": "_pr",
            "location": 21,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/prism.py": {
        "add_prism": {
            "name": "add_prism",
            "location": 49,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "extract_words": {
            "name": "extract_words",
            "location": 72,
            "return": [],
            "arguments": {
                "update": [],
                "_": []
            }
        },
        "_get_words": {
            "name": "_get_words",
            "location": 77,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "_normalize_words": {
            "name": "_normalize_words",
            "location": 81,
            "return": [],
            "arguments": {
                "words": []
            }
        },
        "_normalize_pred": {
            "name": "_normalize_pred",
            "location": 85,
            "return": [],
            "arguments": {
                "pred": []
            }
        },
        "_get_pred": {
            "name": "_get_pred",
            "location": 89,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "_eval_filter": {
            "name": "_eval_filter",
            "location": 93,
            "return": [],
            "arguments": {
                "words": [],
                "pred": []
            }
        },
        "show_top": {
            "name": "show_top",
            "location": 103,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "DB.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "db_name": []
            }
        },
        "DB.add_word": {
            "name": "add_word",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "DB.add_words": {
            "name": "add_words",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "DB.find_all": {
            "name": "find_all",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_eval_filter.inner_pred": {
            "name": "inner_pred",
            "location": 94,
            "return": [],
            "arguments": {
                "word": []
            }
        }
    },
    "vldc-bot-master/bot/skills/roll.py": {
        "add_roll": {
            "name": "add_roll",
            "location": 110,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "_reload": {
            "name": "_reload",
            "location": 161,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "get_miss_string": {
            "name": "get_miss_string",
            "location": 171,
            "return": [],
            "arguments": {
                "shots_remain": []
            }
        },
        "get_mute_minutes": {
            "name": "get_mute_minutes",
            "location": 180,
            "return": [],
            "arguments": {
                "shots_remain": []
            }
        },
        "_shot": {
            "name": "_shot",
            "location": 184,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "_get_username": {
            "name": "_get_username",
            "location": 201,
            "return": [],
            "arguments": {
                "h": []
            }
        },
        "_create_empty_image": {
            "name": "_create_empty_image",
            "location": 221,
            "return": [],
            "arguments": {
                "image_path": [],
                "limit": []
            }
        },
        "_add_text_to_image": {
            "name": "_add_text_to_image",
            "location": 240,
            "return": [],
            "arguments": {
                "text": [],
                "image_path": []
            }
        },
        "from_text_to_image": {
            "name": "from_text_to_image",
            "location": 260,
            "return": [],
            "arguments": {
                "text": [],
                "limit": []
            }
        },
        "show_hussars": {
            "name": "show_hussars",
            "location": 273,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "show_active_hussars": {
            "name": "show_active_hussars",
            "location": 345,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "roll": {
            "name": "roll",
            "location": 378,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "satisfy_GDPR": {
            "name": "satisfy_GDPR",
            "location": 428,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "wipe_hussars": {
            "name": "wipe_hussars",
            "location": 445,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "DB.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "db_name": []
            }
        },
        "DB.find_all": {
            "name": "find_all",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DB.find": {
            "name": "find",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.add": {
            "name": "add",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "DB.dead": {
            "name": "dead",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "mute_min": []
            }
        },
        "DB.miss": {
            "name": "miss",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.remove": {
            "name": "remove",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.remove_all": {
            "name": "remove_all",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "vldc-bot-master/bot/skills/since_mode.py": {
        "add_since_mode": {
            "name": "add_since_mode",
            "location": 24,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "_get_topic": {
            "name": "_get_topic",
            "location": 47,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "_get_delta_days": {
            "name": "_get_delta_days",
            "location": 58,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "_update_topic": {
            "name": "_update_topic",
            "location": 63,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "since_callback": {
            "name": "since_callback",
            "location": 73,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "_get_all_topics": {
            "name": "_get_all_topics",
            "location": 104,
            "return": [],
            "arguments": {
                "limit": []
            }
        },
        "since_list_callback": {
            "name": "since_list_callback",
            "location": 108,
            "return": [],
            "arguments": {
                "update": []
            }
        }
    },
    "vldc-bot-master/bot/skills/smile_mode.py": {
        "add_smile_mode": {
            "name": "add_smile_mode",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "upd": [
                    "telegram.exUpdater",
                    "str",
                    "bool"
                ],
                "handlers_group": [
                    "telegram.exDispatcher",
                    "float",
                    "str"
                ]
            }
        },
        "smile": {
            "name": "smile",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "update": [
                    "telegram.Update",
                    "telegram.exCallbackContext",
                    "telegram.update.Update",
                    "telegram.exUpdater"
                ],
                "context": [
                    "telegram.exCallbackContext",
                    "telegram.Update",
                    "telegram.update.Update"
                ]
            }
        }
    },
    "vldc-bot-master/bot/skills/still.py": {
        "add_still": {
            "name": "add_still",
            "location": 11,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "to_2k_year": {
            "name": "to_2k_year",
            "location": 17,
            "return": [],
            "arguments": {
                "year": []
            }
        },
        "still": {
            "name": "still",
            "location": 26,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/towel_mode.py": {
        "_is_time_gone": {
            "name": "_is_time_gone",
            "location": 82,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "_delete_user_rel_messages": {
            "name": "_delete_user_rel_messages",
            "location": 86,
            "return": [],
            "arguments": {
                "chat_id": [],
                "user_id": [],
                "context": []
            }
        },
        "add_towel_mode": {
            "name": "add_towel_mode",
            "location": 95,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "quarantine_user": {
            "name": "quarantine_user",
            "location": 129,
            "return": [],
            "arguments": {
                "user": [],
                "chat_id": [],
                "context": []
            }
        },
        "catch_new_user": {
            "name": "catch_new_user",
            "location": 168,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "catch_reply": {
            "name": "catch_reply",
            "location": 173,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "quarantine_filter": {
            "name": "quarantine_filter",
            "location": 196,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "i_am_a_bot_btn": {
            "name": "i_am_a_bot_btn",
            "location": 207,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "ban_user": {
            "name": "ban_user",
            "location": 220,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "DB.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "db_name": []
            }
        },
        "DB.add_user": {
            "name": "add_user",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.find_user": {
            "name": "find_user",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.find_all_users": {
            "name": "find_all_users",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DB.add_user_rel_message": {
            "name": "add_user_rel_message",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "message_id": []
            }
        },
        "DB.delete_user": {
            "name": "delete_user",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.delete_all_users": {
            "name": "delete_all_users",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "vldc-bot-master/bot/skills/tree.py": {
        "add_tree": {
            "name": "add_tree",
            "location": 11,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "tree": {
            "name": "tree",
            "location": 17,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/trusted_mode.py": {
        "add_trusted_mode": {
            "name": "add_trusted_mode",
            "location": 46,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "_get_user_and_admin": {
            "name": "_get_user_and_admin",
            "location": 71,
            "return": [],
            "arguments": {
                "update": []
            }
        },
        "trust_callback": {
            "name": "trust_callback",
            "location": 78,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "untrust_callback": {
            "name": "untrust_callback",
            "location": 91,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "DB.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "db_name": []
            }
        },
        "DB.get_user": {
            "name": "get_user",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "DB.trust": {
            "name": "trust",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "admin_id": []
            }
        },
        "DB.untrust": {
            "name": "untrust",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        }
    },
    "vldc-bot-master/bot/skills/uwu.py": {
        "add_uwu": {
            "name": "add_uwu",
            "location": 13,
            "return": [],
            "arguments": {
                "upd": [],
                "handlers_group": []
            }
        },
        "uwu": {
            "name": "uwu",
            "location": 19,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        }
    },
    "vldc-bot-master/bot/skills/__init__.py": {
        "_add_version": {
            "name": "_add_version",
            "location": 38,
            "return": [],
            "arguments": {
                "upd": [],
                "version_handlers_group": []
            }
        },
        "_get_version_from_pipfile": {
            "name": "_get_version_from_pipfile",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "_version": {
            "name": "_version",
            "location": 61,
            "return": [],
            "arguments": {
                "update": [],
                "context": []
            }
        },
        "_make_skill": {
            "name": "_make_skill",
            "location": 83,
            "return": [],
            "arguments": {
                "add_handlers": [],
                "name": [],
                "hint": []
            }
        },
        "_get_skills_hints": {
            "name": "_get_skills_hints",
            "location": 141,
            "return": [],
            "arguments": {
                "skills_list": []
            }
        }
    },
    "vldc-bot-master/bot/tests/get_conf_from_env_test.py": {
        "ConfigTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.test_get_config": {
            "name": "test_get_config",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "vldc-bot-master/bot/tests/utils_test.py": {
        "DurationParserTestCase.test_get_secs": {
            "name": "test_get_secs",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_get_mins": {
            "name": "test_get_mins",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_get_hours": {
            "name": "test_get_hours",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_get_days": {
            "name": "test_get_days",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_get_week": {
            "name": "test_get_week",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_get_mix": {
            "name": "test_get_mix",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_wrong_order": {
            "name": "test_wrong_order",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_get_default": {
            "name": "test_get_default",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_get_bad_raw_duration": {
            "name": "test_get_bad_raw_duration",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_get_duration_lt_10": {
            "name": "test_get_duration_lt_10",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_get_duration_with_dots": {
            "name": "test_get_duration_with_dots",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DurationParserTestCase.test_trailing_whitespace": {
            "name": "test_trailing_whitespace",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "vldc-bot-master/bot/tests/__init__.py": {},
    "vldc-bot-master/bot/utils/cache.py": {
        "timed_lru_cache": {
            "name": "timed_lru_cache",
            "location": 6,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "maxsize": [
                    "bool",
                    "int",
                    "float"
                ],
                "ttl": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "timed_lru_cache.decorator": {
            "name": "decorator",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "timed_lru_cache.decorator.wrapper": {
            "name": "wrapper",
            "location": 18,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "vldc-bot-master/bot/utils/time.py": {
        "get_duration": {
            "name": "get_duration",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "raw_duration": [
                    "str",
                    "Awaitable"
                ]
            }
        },
        "get_duration.f": {
            "name": "f",
            "location": 23,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "acc": [
                    "str",
                    "Sequence[int]",
                    "Union[float, int]",
                    "List[int]",
                    "float",
                    "bool"
                ],
                "el": [
                    "int",
                    "FrozenSet[int]"
                ]
            }
        }
    },
    "vldc-bot-master/bot/utils/voice_recognition.py": {
        "_get_audio_file_data": {
            "name": "_get_audio_file_data",
            "location": 42,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "file_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_binary_content": {
            "name": "_get_binary_content",
            "location": 53,
            "return": [
                "bool",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_send_binary_to_google_speech": {
            "name": "_send_binary_to_google_speech",
            "location": 77,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "bytes",
                "Dict[str, dict]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "_check_google_speech_response": {
            "name": "_check_google_speech_response",
            "location": 93,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "list"
            ],
            "arguments": {
                "response": [
                    "requests.Response",
                    "dict",
                    "requests.models.Response",
                    "str"
                ]
            }
        },
        "get_text_from_speech": {
            "name": "get_text_from_speech",
            "location": 103,
            "return": [
                "type",
                "str",
                "Optional[T]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "file_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "Dummy.__getattribute__": {
            "name": "__getattribute__",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Dummy.__getattribute__.funcoff": {
            "name": "funcoff",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "vldc-bot-master/bot/utils/__init__.py": {}
}
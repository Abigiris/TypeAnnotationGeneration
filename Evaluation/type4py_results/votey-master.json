{
    "votey-master/run.py": {},
    "votey-master/tests/command_parser_test.py": {
        "test_basic_command": {
            "name": "test_basic_command",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_secret": {
            "name": "test_secret",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "keyword": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_anonymous": {
            "name": "test_anonymous",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "keyword": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_emoji_option_command": {
            "name": "test_emoji_option_command",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_emoji_option_command_without_last_option": {
            "name": "test_emoji_option_command_without_last_option",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_emoji_option_command_without_first_option": {
            "name": "test_emoji_option_command_without_first_option",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_emoji_option_command_with_secret": {
            "name": "test_emoji_option_command_with_secret",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_emoji_option_command_with_anonymous": {
            "name": "test_emoji_option_command_with_anonymous",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_anonymous_with_voting_emoji": {
            "name": "test_anonymous_with_voting_emoji",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_secret_with_voting_emoji": {
            "name": "test_secret_with_voting_emoji",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "votey-master/tests/__init__.py": {},
    "votey-master/votey/exts.py": {},
    "votey-master/votey/models.py": {
        "Poll.poll_identifier": {
            "name": "poll_identifier",
            "location": 58,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "votey-master/votey/slack.py": {
        "slack": {
            "name": "slack",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "oauth": {
            "name": "oauth",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "generate_poll_markup": {
            "name": "generate_poll_markup",
            "location": 100,
            "return": [],
            "arguments": {
                "poll_id": []
            }
        },
        "handle_poll_creation": {
            "name": "handle_poll_creation",
            "location": 155,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "handle_button_interaction": {
            "name": "handle_button_interaction",
            "location": 220,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "handle_vote": {
            "name": "handle_vote",
            "location": 226,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "handle_poll_deletion": {
            "name": "handle_poll_deletion",
            "location": 255,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "thumbs": {
            "name": "thumbs",
            "location": 276,
            "return": [],
            "arguments": {
                "votes": [],
                "vote_emoji": []
            }
        },
        "names": {
            "name": "names",
            "location": 282,
            "return": [],
            "arguments": {
                "votes": []
            }
        },
        "is_slackmoji": {
            "name": "is_slackmoji",
            "location": 286,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "valid_request": {
            "name": "valid_request",
            "location": 290,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_command_from_req": {
            "name": "get_command_from_req",
            "location": 309,
            "return": [],
            "arguments": {
                "request": [],
                "workspace": []
            }
        },
        "send_ephemeral_message": {
            "name": "send_ephemeral_message",
            "location": 408,
            "return": [],
            "arguments": {
                "workspace": [],
                "channel": [],
                "user": [],
                "text": []
            }
        },
        "send_message": {
            "name": "send_message",
            "location": 421,
            "return": [],
            "arguments": {
                "workspace": [],
                "dest": [],
                "text": [],
                "attachments": []
            }
        }
    },
    "votey-master/votey/utils.py": {
        "batch": {
            "name": "batch",
            "location": 32,
            "return": [
                "typing.Iterable[typing.List[T]]"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "Union[float, List[float]]",
                    "Sequence"
                ],
                "n": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "get_footer": {
            "name": "get_footer",
            "location": 38,
            "return": [
                "bytes",
                "Optional[Mapping[str, Any]]",
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "anonymous": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "secret": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "rewrite_pg_url": {
            "name": "rewrite_pg_url",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "database_url": [
                    "str",
                    "bool",
                    "Callable",
                    "List[str]"
                ]
            }
        }
    },
    "votey-master/votey/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 16,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "config": [
                    "MutableMapping[str, Any]",
                    "dict"
                ]
            }
        },
        "register_extensions": {
            "name": "register_extensions",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    }
}
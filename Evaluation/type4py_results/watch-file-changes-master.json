{
    "watch-file-changes-master/run.py": {},
    "watch-file-changes-master/setup.py": {},
    "watch-file-changes-master/config/default.py": {},
    "watch-file-changes-master/config/development.py": {},
    "watch-file-changes-master/config/production.py": {},
    "watch-file-changes-master/config/__init__.py": {},
    "watch-file-changes-master/tests/common_util_fd_test.py": {
        "Test_TestCommonUtilWithDiskIO.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_TestCommonUtilWithDiskIO.tearDown": {
            "name": "tearDown",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_TestCommonUtilWithDiskIO.test_maxbackupnumber": {
            "name": "test_maxbackupnumber",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_TestCommonUtilWithDiskIO.test_backupdirectory": {
            "name": "test_backupdirectory",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/tests/common_util_test.py": {
        "two_add": {
            "name": "two_add",
            "location": 17,
            "return": [
                "float",
                "bytes",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str"
                ],
                "b": [
                    "int",
                    "float",
                    "str"
                ],
                "c": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TestCommonUtil.test_split_url": {
            "name": "test_split_url",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_static": {
            "name": "test_static",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_load_configfile": {
            "name": "test_load_configfile",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_os_walk": {
            "name": "test_os_walk",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_file_hash": {
            "name": "test_file_hash",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_config_wrapper": {
            "name": "test_config_wrapper",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_subprocess_call": {
            "name": "test_subprocess_call",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_partial": {
            "name": "test_partial",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_filehashes": {
            "name": "test_filehashes",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_diskfree": {
            "name": "test_diskfree",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_memoryfree": {
            "name": "test_memoryfree",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommonUtil.test_xml": {
            "name": "test_xml",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/tests/module_scope.py": {
        "set_i": {
            "name": "set_i",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "j": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "get_i": {
            "name": "get_i",
            "location": 18,
            "return": [
                "int",
                "str",
                "Union[int, str]",
                "tuple"
            ],
            "arguments": {}
        },
        "consume": {
            "name": "consume",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "db_file": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "start_work": {
            "name": "start_work",
            "location": 34,
            "return": [
                "bool",
                "str",
                "Union[bool, List[bool]]"
            ],
            "arguments": {
                "db_file": [
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "watch-file-changes-master/tests/p_lang_test.py": {
        "test_var_args": {
            "name": "test_var_args",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kw_var_args": {
            "name": "test_kw_var_args",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_call": {
            "name": "test_call",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_checkout_stderr": {
            "name": "test_checkout_stderr",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nt": {
            "name": "test_nt",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_namedtuple_inheritance": {
            "name": "test_namedtuple_inheritance",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ptn": {
            "name": "test_ptn",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ptn_1": {
            "name": "test_ptn_1",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_var_args.f": {
            "name": "f",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_kw_var_args.f": {
            "name": "f",
            "location": 23,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "watch-file-changes-master/tests/shared_fort.py": {
        "get_demo_config_file": {
            "name": "get_demo_config_file",
            "location": 17,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "tmppath": {
            "name": "tmppath",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "file_pair": {
            "name": "file_pair",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "py._path.local.LocalPath",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "vdb": {
            "name": "vdb",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "db_file_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "db_file_path": {
            "name": "db_file_path",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "py._path.local.LocalPath",
                    "pathlib.Path"
                ]
            }
        },
        "change_folder_path": {
            "name": "change_folder_path",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "py._path.local.LocalPath",
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "db_thread": {
            "name": "db_thread",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "db_file_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ],
                "change_folder_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "watch-file-changes-master/tests/test_apscheduler.py": {
        "Holder.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Holder.myfunc": {
            "name": "myfunc",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApSchedulerFunction.test_interval": {
            "name": "test_interval",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApSchedulerFunction.test_cron": {
            "name": "test_cron",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApSchedulerFunction.test_cron_1": {
            "name": "test_cron_1",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApSchedulerFunction.test_cron_parser": {
            "name": "test_cron_parser",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/tests/test_dir.py": {
        "TestDir.test_list_file": {
            "name": "test_list_file",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmppath": [
                    "pathlib.Path"
                ]
            }
        },
        "TestDir.test_list_file.custom_sort": {
            "name": "custom_sort",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "item": [
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "watch-file-changes-master/tests/test_filelock.py": {
        "TestFileLock.test_acquire": {
            "name": "test_acquire",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_pair": [
                    "Tuple[pathlib.Path, pathlib.Path]",
                    "List[str]",
                    "list",
                    "Sequence[pathlib.Path]",
                    "Iterator[str]"
                ]
            }
        },
        "TestFileLock.test_acquire.a_thread": {
            "name": "a_thread",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "watch-file-changes-master/tests/test_iter.py": {
        "TestMyIter.test_empty_iter": {
            "name": "test_empty_iter",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/tests/test_module_scope.py": {
        "test_module": {
            "name": "test_module",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_queue": {
            "name": "test_queue",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "py._path.local.LocalPath"
                ]
            }
        }
    },
    "watch-file-changes-master/tests/test_subprocess.py": {
        "TestSubprocesses.test_shell_false": {
            "name": "test_shell_false",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubprocesses.test_shell_true": {
            "name": "test_shell_true",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubprocesses.test_var_expand": {
            "name": "test_var_expand",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/tests/test_type.py": {
        "add1": {
            "name": "add1",
            "location": 21,
            "return": [
                "float",
                "T",
                "Tuple[float, float]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "Aclass.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "AbTuple.ab": {
            "name": "ab",
            "location": 30,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedDict.test_typed_dict": {
            "name": "test_typed_dict",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedDict.test_named_tuple": {
            "name": "test_named_tuple",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedDict.test_property": {
            "name": "test_property",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypedDict.test_a_class": {
            "name": "test_a_class",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/tests/test_vedis.py": {
        "TestVedisCommon.test_open_vedis": {
            "name": "test_open_vedis",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vdb": [
                    "vedis.Vedis",
                    "dict"
                ]
            }
        },
        "TestVedisCommon.test_pop_set": {
            "name": "test_pop_set",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vdb": [
                    "str"
                ]
            }
        },
        "TestVedisCommon.test_counter": {
            "name": "test_counter",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vdb": [
                    "vedis.Vedis",
                    "str",
                    "List[int]",
                    "Iterable[Any]"
                ]
            }
        },
        "TestVedisCommon.test_hash_get": {
            "name": "test_hash_get",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vdb": [
                    "int"
                ]
            }
        },
        "TestVedisCommon.test_db_key": {
            "name": "test_db_key",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vdb": [
                    "vedis.Vedis",
                    "str",
                    "Dict[str, float]",
                    "pathlib.Path"
                ]
            }
        },
        "TestVedisCommon.test_db_set": {
            "name": "test_db_set",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vdb": [
                    "vedis.Vedis",
                    "dict"
                ]
            }
        },
        "TestVedisCommon.test_file_change_equal": {
            "name": "test_file_change_equal",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_file_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "watch-file-changes-master/tests/test_watch_dog.py": {
        "dir_watcher": {
            "name": "dir_watcher",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "List[dict]",
                    "dict"
                ],
                "db_thread": [],
                "tmpdir": [
                    "py._path.local.LocalPath",
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestWatchDog.test_move_from_out_side": {
            "name": "test_move_from_out_side",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_watcher": [
                    "str",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestWatchDog.test_write_file_multiple": {
            "name": "test_write_file_multiple",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_watcher": [
                    "Tuple[wfc.my_vedis.DbThread, wfc.dir_watcher.dir_watcher_dog.DirWatchDog, int, List[Dict], pathlib.Path]",
                    "str",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "TestWatchDog.test_watch_db": {
            "name": "test_watch_db",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_watcher": [
                    "Tuple[wfc.my_vedis.DbThread, wfc.dir_watcher.dir_watcher_dog.DirWatchDog, int, List[Dict], pathlib.Path]",
                    "str"
                ]
            }
        },
        "TestWatchDog.test_archive_and_moving": {
            "name": "test_archive_and_moving",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_watcher": [
                    "Tuple[wfc.my_vedis.DbThread, wfc.dir_watcher.dir_watcher_dog.DirWatchDog, int, List[Dict], pathlib.Path]",
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "watch-file-changes-master/tests/test_yaml_usage.py": {
        "TestYaml.test_object_type": {
            "name": "test_object_type",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/tests/test_zip.py": {
        "TestZipFile.test_item_name": {
            "name": "test_item_name",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmppath": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        }
    },
    "watch-file-changes-master/tests/watch_values_test.py": {
        "TestWatchValues.test_watch_path": {
            "name": "test_watch_path",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchValues.test_property": {
            "name": "test_property",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmppath": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestWatchValues.test_vedis_value": {
            "name": "test_vedis_value",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchValues.test_file_change_eq": {
            "name": "test_file_change_eq",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWatchValues.test_file_change_to_str": {
            "name": "test_file_change_to_str",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/tests/__init__.py": {},
    "watch-file-changes-master/wfc/borg_server_side.py": {
        "usage": {
            "name": "usage",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "watch-file-changes-master/wfc/borg_task_invoker.py": {
        "BorgTaskInvoker.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "BorgTaskInvoker.main": {
            "name": "main",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "args_ary": [
                    "int",
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "BorgTaskInvoker.send_to_client": {
            "name": "send_to_client",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "int"
                ]
            }
        },
        "BorgTaskInvoker.get_openssl_publickey": {
            "name": "get_openssl_publickey",
            "location": 38,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BorgTaskInvoker.install_borg": {
            "name": "install_borg",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BorgTaskInvoker.new_borg_archive": {
            "name": "new_borg_archive",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BorgTaskInvoker.invoke_prune": {
            "name": "invoke_prune",
            "location": 71,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BorgTaskInvoker.init_borg_repo": {
            "name": "init_borg_repo",
            "location": 79,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/wfc/common_util.py": {
        "split_url": {
            "name": "split_url",
            "location": 30,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Callable"
                ],
                "parent": [
                    "bool",
                    "str",
                    "Type"
                ]
            }
        },
        "get_software_package_path": {
            "name": "get_software_package_path",
            "location": 49,
            "return": [
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {
                "package_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "softwares": [
                    "bool",
                    "Dict[int, bool]",
                    "Optional[str]",
                    "pathlib.Path",
                    "dict",
                    "str"
                ],
                "software_name": [
                    "dict",
                    "str",
                    "int",
                    "pathlib.Path",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_software_packages": {
            "name": "get_software_packages",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "target_dir": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "softwares": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Tuple[str, ...]]",
                    "path.Path"
                ]
            }
        },
        "get_filecontent_str": {
            "name": "get_filecontent_str",
            "location": 75,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config_file": [
                    "pathlib.Path",
                    "str",
                    "IO",
                    "Sequence[str]"
                ],
                "encoding": [
                    "pathlib.Path",
                    "str",
                    "IO",
                    "Sequence[str]"
                ]
            }
        },
        "get_filecontent_lines": {
            "name": "get_filecontent_lines",
            "location": 80,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "config_file": [
                    "pathlib.Path",
                    "str",
                    "IO[Any]",
                    "io.BytesIO",
                    "Union[str, pathlib.Path]"
                ],
                "encoding": [
                    "pathlib.Path",
                    "str",
                    "io.BytesIO",
                    "bool",
                    "pathlib.PurePath"
                ]
            }
        },
        "get_configuration_yml": {
            "name": "get_configuration_yml",
            "location": 94,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "int",
                "dict",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "config_file": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "encoding": [
                    "str",
                    "Optional[str]",
                    "Callable[[str], None]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_configration": {
            "name": "get_configration",
            "location": 107,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "config_file": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "bytes"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "get_filehashes": {
            "name": "get_filehashes",
            "location": 118,
            "return": [
                "Callable[[], bool]",
                "int",
                "List[Dict[str, str]]",
                "Dict[str, Tuple[str, str]]",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "files": [
                    "str",
                    "int",
                    "bool"
                ],
                "mode": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "get_one_filehash": {
            "name": "get_one_filehash",
            "location": 122,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "file_to_hash": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "Callable[[float], None]"
                ],
                "mode": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "get_dir_filehashes": {
            "name": "get_dir_filehashes",
            "location": 138,
            "return": [
                "Set[str]",
                "List[str]",
                "Dict[str, str]",
                "list",
                "Tuple[str]"
            ],
            "arguments": {
                "dir_to_hash": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]",
                    "Optional[pathlib.PurePosixPath]"
                ],
                "mode": [
                    "str",
                    "int"
                ]
            }
        },
        "send_lines_to_client": {
            "name": "send_lines_to_client",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "content": [
                    "str",
                    "bytes",
                    "pathlib.Path",
                    "Optional[str]",
                    "AnyStr"
                ]
            }
        },
        "get_diskfree": {
            "name": "get_diskfree",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "parse_pair": {
            "name": "parse_pair",
            "location": 189,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "pair_str": [
                    "str"
                ],
                "separator": [
                    "str"
                ]
            }
        },
        "get_memoryfree": {
            "name": "get_memoryfree",
            "location": 218,
            "return": [
                "int",
                "str",
                "IO[str]"
            ],
            "arguments": {}
        },
        "get_maxbackupnumber": {
            "name": "get_maxbackupnumber",
            "location": 231,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "List[str]",
                    "Union[str, List]"
                ]
            }
        },
        "get_next_backup": {
            "name": "get_next_backup",
            "location": 247,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_maxbackup": {
            "name": "get_maxbackup",
            "location": 252,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "backup_localdirectory": {
            "name": "backup_localdirectory",
            "location": 259,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "to_backup": [
                    "str",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "\"Path\"",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "keep_origin": [
                    "bool",
                    "Callable",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "get_file_frombase64": {
            "name": "get_file_frombase64",
            "location": 287,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "base64_str": [
                    "str",
                    "Optional[str]",
                    "IO[Any]",
                    "\"CharSource\""
                ],
                "out_file": [
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "un_protect_password_by_openssl_publickey": {
            "name": "un_protect_password_by_openssl_publickey",
            "location": 301,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "base64_str": [
                    "str",
                    "Optional[str]",
                    "\"CharSource\""
                ],
                "openssl": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "bool",
                    "List[str]"
                ],
                "private_key": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_lines": {
            "name": "get_lines",
            "location": 312,
            "return": [
                "str",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "path_or_lines": [
                    "pathlib.Path",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "get_block_config_value": {
            "name": "get_block_config_value",
            "location": 321,
            "return": [
                "Optional[List[str]]",
                "dict",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "path_or_lines": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Union[List[str], int]"
                ],
                "block_name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "key": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "update_block_config_file": {
            "name": "update_block_config_file",
            "location": 338,
            "return": [
                "str",
                "Hashable",
                "Type[BaseException]"
            ],
            "arguments": {
                "path_or_lines": [
                    "str",
                    "bool",
                    "bytes",
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "List[str]",
                    "int",
                    "pathlib.Path",
                    "List[Tuple[str, int]]"
                ],
                "value": [
                    "List[str]",
                    "str",
                    "int",
                    "dict",
                    "Set[str]",
                    "pathlib.Path",
                    "list",
                    "Dict[str, str]"
                ],
                "block_name": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "subprocess_checkout_print_error": {
            "name": "subprocess_checkout_print_error",
            "location": 395,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cmd_list": [
                    "List[str]",
                    "Dict[str, str]",
                    "str",
                    "bool",
                    "int"
                ],
                "env": [
                    "List[str]",
                    "Dict[str, str]",
                    "str",
                    "bool",
                    "int"
                ],
                "shell": [
                    "List[str]",
                    "Dict[str, str]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "clone_namedtuple": {
            "name": "clone_namedtuple",
            "location": 406,
            "return": [],
            "arguments": {
                "nt": [
                    "dict",
                    "bool"
                ]
            }
        },
        "common_action_handler": {
            "name": "common_action_handler",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": []
            }
        },
        "get_diskfree.format_result": {
            "name": "format_result",
            "location": 178,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_maxbackupnumber.sl": {
            "name": "sl",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "pathlib.Path",
                    "dict"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/constants.py": {},
    "watch-file-changes-master/wfc/custom_json_coder.py": {
        "CustomJSONEncoder.default": {
            "name": "default",
            "location": 13,
            "return": [
                "Mapping",
                "Dict[str, float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "Dict[str, Dict[str, int]]",
                    "int"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/dir_util.py": {
        "list_dir_order_by_digits": {
            "name": "list_dir_order_by_digits",
            "location": 8,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "target_dir": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "bool",
                    "Callable"
                ],
                "ext_no_dot": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "list_dir_order_by_digits.custom_sort": {
            "name": "custom_sort",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "item": [
                    "str",
                    "pathlib.Path",
                    "Iterator[str]",
                    "bytes"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/global_static.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dict_like": [
                    "dict",
                    "Optional[dict]"
                ]
            }
        },
        "Configuration.get_property": {
            "name": "get_property",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "pn": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "Configuration.get_property_if_need": {
            "name": "get_property_if_need",
            "location": 26,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "List[Dict[str, Any]]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Type[T]",
                    "List[str]",
                    "int"
                ],
                "pn": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "BorgConfiguration.borg_repo_path": {
            "name": "borg_repo_path",
            "location": 37,
            "return": [
                "str",
                "int",
                "pathlib.Path",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "dv": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "int"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/mysql_server_side.py": {
        "usage": {
            "name": "usage",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "watch-file-changes-master/wfc/mysql_task_invoker.py": {
        "MysqlTaskInvoker.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_file_path": [
                    "dict",
                    "str",
                    "AbstractSet[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "MysqlTaskInvoker.do_action": {
            "name": "do_action",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "args_ary": [
                    "str",
                    "Sequence[Any]",
                    "List[str]"
                ]
            }
        },
        "MysqlTaskInvoker.get_openssl_publickey": {
            "name": "get_openssl_publickey",
            "location": 51,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MysqlTaskInvoker.get_enabled_version": {
            "name": "get_enabled_version",
            "location": 59,
            "return": [
                "list",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "MysqlTaskInvoker.enable_repoversion": {
            "name": "enable_repoversion",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repo_file": [
                    "str",
                    "int",
                    "bool"
                ],
                "version": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Union[str, pathlib.Path]]"
                ]
            }
        },
        "MysqlTaskInvoker._enable_repoversion": {
            "name": "_enable_repoversion",
            "location": 79,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "repo_file": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Union[str, bytes]"
                ],
                "version": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "MysqlTaskInvoker.invoke_mysql_sql_command": {
            "name": "invoke_mysql_sql_command",
            "location": 102,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "MysqlTaskInvoker.get_mysql_variables": {
            "name": "get_mysql_variables",
            "location": 125,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "variable_names": [
                    "str",
                    "Iterable",
                    "Callable"
                ]
            }
        },
        "MysqlTaskInvoker.flushlogs_filehash": {
            "name": "flushlogs_filehash",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MysqlTaskInvoker.invoke_mysql_flushlogs": {
            "name": "invoke_mysql_flushlogs",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MysqlTaskInvoker.invoke_mysql_dump": {
            "name": "invoke_mysql_dump",
            "location": 176,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MysqlTaskInvoker.enable_logbin": {
            "name": "enable_logbin",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "mycnf_file": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "bool"
                ],
                "logbin_base_name": [
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "server_id": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "MysqlTaskInvoker.get_mycnf_file": {
            "name": "get_mycnf_file",
            "location": 206,
            "return": [
                "Set[str]",
                "Tuple[str, Any]",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MysqlTaskInvoker.flushlogs_filehash.to_file_desc": {
            "name": "to_file_desc",
            "location": 159,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "relative_file": [
                    "str",
                    "bool",
                    "int",
                    "Hashable",
                    "set",
                    "pathlib.Path"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/mysql_task_invoker_test.py": {
        "get_default_config": {
            "name": "get_default_config",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "TestMysqlInvoker.test_mysql_show_variables": {
            "name": "test_mysql_show_variables",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMysqlInvoker.test_enable_log_bin": {
            "name": "test_enable_log_bin",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMysqlInvoker.test_dump": {
            "name": "test_dump",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMysqlInvoker.test_flush": {
            "name": "test_flush",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/wfc/my_scheduler.py": {
        "init_app": {
            "name": "init_app",
            "location": 51,
            "return": [
                "str",
                "dict",
                "Callable",
                "bool"
            ],
            "arguments": {
                "app": [
                    "queue.Queue",
                    "Tuple[Callable, Callable]"
                ],
                "que": [
                    "queue.Queue",
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "ScheduleThread.archive_job": {
            "name": "archive_job",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleThread.pending_move_job": {
            "name": "pending_move_job",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleThread.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cease_event": [
                    "str",
                    "threading.Event",
                    "bool"
                ],
                "controll_queue": [],
                "schedule_dict": [
                    "int",
                    "MutableMapping",
                    "Dict[int, int]",
                    "bool"
                ]
            }
        },
        "ScheduleThread.run": {
            "name": "run",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/wfc/my_signal.py": {
        "signal_handler": {
            "name": "signal_handler",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "sig": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/my_vedis.py": {
        "init_app": {
            "name": "init_app",
            "location": 196,
            "return": [
                "bool",
                "str",
                "int",
                "Callable[[list], None]",
                "Callable"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "que": [
                    "flask.Flask",
                    "queue.Queue"
                ]
            }
        },
        "get_db": {
            "name": "get_db",
            "location": 204,
            "return": [
                "Callable[[list], None]",
                "Callable"
            ],
            "arguments": {}
        },
        "close_db": {
            "name": "close_db",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "e": [
                    "Dict[str, Any]",
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "DbThread.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_file": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[int, int]"
                ],
                "que": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[int, int]"
                ],
                "change_folder": [
                    "path.Path",
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "DbThread.delete_count_key": {
            "name": "delete_count_key",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "count_key": [
                    "str",
                    "bytes",
                    "Sequence[Sequence[Any]]"
                ]
            }
        },
        "DbThread.when_data_modified": {
            "name": "when_data_modified",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "IO",
                    "int",
                    "List[int]"
                ],
                "encoded_item": [
                    "str"
                ]
            }
        },
        "DbThread._insert_to_db": {
            "name": "_insert_to_db",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[TextIO]"
                ]
            }
        },
        "DbThread.insert_standard": {
            "name": "insert_standard",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "DbThread.get_archives": {
            "name": "get_archives",
            "location": 119,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbThread.get_pending_archives": {
            "name": "get_pending_archives",
            "location": 122,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbThread.process_pending_move": {
            "name": "process_pending_move",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DbThread.process_archive_action": {
            "name": "process_archive_action",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DbThread.run": {
            "name": "run",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/wfc/typed_value.py": {
        "get_current_app": {
            "name": "get_current_app",
            "location": 5,
            "return": [
                "dict",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "get_current_request": {
            "name": "get_current_request",
            "location": 9,
            "return": [
                "int",
                "float",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "get_current_args": {
            "name": "get_current_args",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "watch-file-changes-master/wfc/values.py": {
        "FileHash.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "Algorithm": [
                    "str",
                    "List[str]"
                ],
                "Hash": [
                    "str",
                    "List[str]"
                ],
                "Path": [
                    "str"
                ],
                "Length": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "DiskFree.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "Name": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "Used": [
                    "int",
                    "bytes",
                    "Union[int, str]",
                    "float",
                    "bool"
                ],
                "Free": [
                    "int",
                    "bytes",
                    "Union[int, str]",
                    "float",
                    "bool"
                ],
                "Percent": [
                    "str",
                    "bool"
                ],
                "FreeMegabyte": [
                    "str",
                    "bool"
                ],
                "UsedMegabyte": [
                    "str",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "MemoryFree.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "Used": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "Free": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "Percent": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "FreeMegabyte": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "UsedMegabyte": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "total": [
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/vedis_bp.py": {
        "get_hash_content": {
            "name": "get_hash_content",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "app": [
                    "str",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "Optional[str]"
                ],
                "table_name": [
                    "str"
                ],
                "length_only": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "get_set_content": {
            "name": "get_set_content",
            "location": 39,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "length_only": [
                    "bool",
                    "str",
                    "Union[str, List[Any]]"
                ]
            }
        },
        "get_list_content": {
            "name": "get_list_content",
            "location": 47,
            "return": [
                "str",
                "Optional[Mapping[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "int",
                    "Optional[str]"
                ],
                "table_name": [
                    "str"
                ],
                "length_only": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "list_list": {
            "name": "list_list",
            "location": 64,
            "return": [
                "int",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "list_list_base": {
            "name": "list_list_base",
            "location": 75,
            "return": [
                "Optional[int]",
                "int",
                "Generator",
                "str",
                "float",
                "Callable"
            ],
            "arguments": {}
        },
        "FileModifiedResponse.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "length": [
                    "List[Tuple[int, float]]",
                    "int",
                    "float",
                    "str"
                ],
                "values": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/__init__.py": {
        "find_data_file": {
            "name": "find_data_file",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 48,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "init_vedis": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]",
                    "dict"
                ],
                "init_watch_dog": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]",
                    "dict"
                ],
                "register_vedis": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "create_app.hello_world": {
            "name": "hello_world",
            "location": 66,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {}
        }
    },
    "watch-file-changes-master/wfc/dir_watcher/dir_watcher_cmd.py": {
        "usage": {
            "name": "usage",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Optional[pathlib.Path]",
                    "pathlib.Path",
                    "int"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/dir_watcher/dir_watcher_dog.py": {
        "DirWatchDog.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wc_or_paths": [
                    "str",
                    "Optional[str]",
                    "Optional['Directory']",
                    "Union[pathlib.Path, str]"
                ],
                "que": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "DirWatchDog.wait_seconds": {
            "name": "wait_seconds",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "DirWatchDog.watch": {
            "name": "watch",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initialize": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DirWatchDog.stop_watch": {
            "name": "stop_watch",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/wfc/dir_watcher/dir_watcher_test.py": {
        "vdb": {
            "name": "vdb",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "TestDirWatcher.test_true": {
            "name": "test_true",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vdb": [
                    "vedis.Vedis",
                    "str"
                ]
            }
        },
        "TestDirWatcher.test_open_close": {
            "name": "test_open_close",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "pathlib.Path",
                    "py._path.local.LocalPath",
                    "str"
                ]
            }
        },
        "TestDirWatcher.test_open": {
            "name": "test_open",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "pathlib.Path",
                    "py._path.local.LocalPath",
                    "str"
                ]
            }
        },
        "TestDirWatcher.test_true.to_run": {
            "name": "to_run",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "watch-file-changes-master/wfc/dir_watcher/selective_file_event_handler.py": {
        "LoggingSelectiveEventHandler.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_queue": [
                    "dict",
                    "Optional[int]",
                    "bool",
                    "Dict[str, Any]",
                    "\"Position\"",
                    "bytes"
                ],
                "wc": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "LoggingSelectiveEventHandler.dispatch": {
            "name": "dispatch",
            "location": 22,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "watchdog.events.FileSystemEvent"
                ]
            }
        },
        "LoggingSelectiveEventHandler.stat_tostring": {
            "name": "stat_tostring",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "a_path": [
                    "str"
                ]
            }
        },
        "LoggingSelectiveEventHandler.get_stat": {
            "name": "get_stat",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "LoggingSelectiveEventHandler.on_moved": {
            "name": "on_moved",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "LoggingSelectiveEventHandler.on_created": {
            "name": "on_created",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "LoggingSelectiveEventHandler.on_deleted": {
            "name": "on_deleted",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "LoggingSelectiveEventHandler.on_modified": {
            "name": "on_modified",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]"
                ]
            }
        }
    },
    "watch-file-changes-master/wfc/dir_watcher/watch_values.py": {
        "encode_file_change": {
            "name": "encode_file_change",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "fc": [
                    "str",
                    "pathlib.Path",
                    "IO[Any]",
                    "Dict[str, str]",
                    "bool",
                    "pathlib.PurePosixPath"
                ]
            }
        },
        "decode_file_change": {
            "name": "decode_file_change",
            "location": 152,
            "return": [
                "str",
                "Optional[List[str]]",
                "pathlib.Path"
            ],
            "arguments": {
                "bytes_repr": [
                    "str",
                    "bytes",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "WatchPath.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "bool"
                ],
                "regexes": [
                    "List[str]",
                    "str",
                    "pathlib.Path",
                    "IO[str]",
                    "int"
                ],
                "ignore_regexes": [
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "ignore_directories": [
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "case_sensitive": [
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "recursive": [
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "WatchPath.compile_re": {
            "name": "compile_re",
            "location": 33,
            "return": [
                "str",
                "Optional[bytearray]",
                "int",
                "Sequence[float]",
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WatchPath.ignored": {
            "name": "ignored",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "strpath": [
                    "str"
                ],
                "is_dir": [
                    "Callable[[], None]",
                    "int",
                    "str"
                ]
            }
        },
        "FileChange.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "Union[str, float]",
                    "bool",
                    "tuple"
                ],
                "ct": [
                    "int",
                    "Union[str, float]",
                    "bool",
                    "tuple"
                ],
                "mt": [
                    "int",
                    "Union[str, float]",
                    "bool",
                    "tuple"
                ],
                "size": [
                    "int",
                    "Union[str, float]",
                    "bool",
                    "tuple"
                ],
                "ts": [
                    "float",
                    "int",
                    "Tuple[float, float]"
                ],
                "cv": [
                    "int",
                    "Union[str, float]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "FileChange.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "str",
                "Union[int, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileChange.__eq__": {
            "name": "__eq__",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float"
                ]
            }
        },
        "FileChange.as_dict": {
            "name": "as_dict",
            "location": 115,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileChange.deep_equal": {
            "name": "deep_equal",
            "location": 123,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "WatchConfig.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watch_pathes": [
                    "dict"
                ]
            }
        },
        "WatchConfig.get_un_exists_paths": {
            "name": "get_un_exists_paths",
            "location": 135,
            "return": [
                "List[str]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "watch-file-changes-master/wfc/dir_watcher/__init__.py": {}
}
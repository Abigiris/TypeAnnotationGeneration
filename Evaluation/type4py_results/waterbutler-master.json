{
    "waterbutler-master/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 4,
            "return": [
                "List[str]",
                "List[T]"
            ],
            "arguments": {
                "requirements": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tasks.py": {
        "wheelhouse": {
            "name": "wheelhouse",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "develop": [
                    "str",
                    "BinaryIO"
                ],
                "pty": [
                    "str"
                ]
            }
        },
        "install": {
            "name": "install",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "develop": [
                    "str",
                    "BinaryIO"
                ],
                "pty": [
                    "str"
                ]
            }
        },
        "flake": {
            "name": "flake",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "mypy": {
            "name": "mypy",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool"
                ],
                "verbose": [
                    "str",
                    "bool",
                    "List[str]",
                    "int",
                    "List[int]"
                ],
                "types": [
                    "bool",
                    "Tuple[str]",
                    "str",
                    "Optional[Sequence[str]]"
                ],
                "nocov": [
                    "int",
                    "str"
                ],
                "provider": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "celery": {
            "name": "celery",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [],
                "loglevel": [
                    "TextIO",
                    "IO[str]",
                    "str",
                    "Exception",
                    "Callable"
                ],
                "hostname": [
                    "TextIO",
                    "IO[str]",
                    "str",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "rabbitmq": {
            "name": "rabbitmq",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "server": {
            "name": "server",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        },
        "clean": {
            "name": "clean",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "Optional[str]",
                    "TextIO"
                ],
                "verbose": []
            }
        },
        "newrelic_init": {
            "name": "newrelic_init",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "TextIO",
                    "bool",
                    "Optional[str]"
                ],
                "key": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "verbose": [
                    "bool",
                    "Tuple[str]",
                    "str"
                ]
            }
        },
        "newrelic_server": {
            "name": "newrelic_server",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "TextIO",
                    "List[int]"
                ],
                "config": [
                    "str",
                    "Optional[str]"
                ],
                "verbose": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "waterbutler-master/docs/conf.py": {},
    "waterbutler-master/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "pytest_runtest_teardown": {
            "name": "pytest_runtest_teardown",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ],
                "nextitem": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        }
    },
    "waterbutler-master/tests/utils.py": {
        "temp_files": {
            "name": "temp_files",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MockCoroutine.assert_awaited_once": {
            "name": "assert_awaited_once",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockFileMetadata.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockFolderMetadata.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockFileRevisionMetadata.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStream.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequestBody.__await__": {
            "name": "__await__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockProvider.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "Optional[asyncio.AbstractEventLoop]",
                    "str",
                    "int",
                    "core.common.Config",
                    "ezscrape.scraping.core.ScrapeConfig"
                ],
                "creds": [
                    "dict",
                    "Optional[asyncio.AbstractEventLoop]",
                    "str",
                    "int",
                    "core.common.Config",
                    "ezscrape.scraping.core.ScrapeConfig"
                ],
                "settings": [
                    "dict",
                    "Optional[asyncio.AbstractEventLoop]",
                    "str",
                    "int",
                    "core.common.Config",
                    "ezscrape.scraping.core.ScrapeConfig"
                ]
            }
        },
        "MockProvider1.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockProvider2.can_intra_move": {
            "name": "can_intra_move",
            "location": 150,
            "return": [
                "str",
                "Callable",
                "Union"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "MockProvider2.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 153,
            "return": [
                "str",
                "Callable",
                "Union"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "HandlerTestCase.setUp": {
            "name": "setUp",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandlerTestCase.tearDown": {
            "name": "tearDown",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandlerTestCase.get_app": {
            "name": "get_app",
            "location": 200,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "List[src.core.model.scripScript]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandlerTestCase.get_new_ioloop": {
            "name": "get_new_ioloop",
            "location": 203,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiProviderHandlerTestCase.setUp": {
            "name": "setUp",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiProviderHandlerTestCase.tearDown": {
            "name": "tearDown",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiProviderHandlerTestCase.payload": {
            "name": "payload",
            "location": 223,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempFilesContext.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TempFilesContext.add_file": {
            "name": "add_file",
            "location": 245,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "TempFilesContext.tear_down": {
            "name": "tear_down",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandlerTestCase.setUp.get_identity": {
            "name": "get_identity",
            "location": 167,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/__init__.py": {},
    "waterbutler-master/tests/auth/__init__.py": {},
    "waterbutler-master/tests/auth/osf/test_handler.py": {
        "TestOsfAuthHandler.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOsfAuthHandler.tearDown": {
            "name": "tearDown",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/auth/osf/__init__.py": {},
    "waterbutler-master/tests/core/test_exceptions.py": {
        "TestExceptionSerialization.test_tolerate_dumb_signature": {
            "name": "test_tolerate_dumb_signature",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exception_class": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tests/core/test_metadata.py": {
        "TestBaseMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMetadata.test_file_json_api_serialize": {
            "name": "test_file_json_api_serialize",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMetadata.test_folder_json_api_serialize": {
            "name": "test_folder_json_api_serialize",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMetadata.test_folder_json_api_size_serialize": {
            "name": "test_folder_json_api_size_serialize",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMetadata.test_file_revision_json_api_serialize": {
            "name": "test_file_revision_json_api_serialize",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/core/test_path.py": {
        "TestPath.test_name": {
            "name": "test_name",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPath.test_parent": {
            "name": "test_parent",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPath.test_ending_slash_is_folder": {
            "name": "test_ending_slash_is_folder",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPath.test_no_ending_slash_is_file": {
            "name": "test_no_ending_slash_is_file",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPath.test_is_root": {
            "name": "test_is_root",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPath.test_child": {
            "name": "test_child",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPath.test_rename": {
            "name": "test_rename",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidation.test_double_slash_is_invalid": {
            "name": "test_double_slash_is_invalid",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidation.test_must_start_with_slash": {
            "name": "test_must_start_with_slash",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidation.test_cant_be_empty": {
            "name": "test_cant_be_empty",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidation.test_cant_have_dotdot": {
            "name": "test_cant_have_dotdot",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/core/test_provider.py": {
        "provider1": {
            "name": "provider1",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "provider2": {
            "name": "provider2",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestBaseProvider.test_eq": {
            "name": "test_eq",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider1": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "provider2": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestBaseProvider.test_serialize": {
            "name": "test_serialize",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider1": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestBaseProvider.test_cant_intra_move": {
            "name": "test_cant_intra_move",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider1": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestBaseProvider.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider2": [
                    "supersemodels.core.Database",
                    "blurr.core.schema_loader.SchemaLoader",
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestMove.test_build_range_header": {
            "name": "test_build_range_header",
            "location": 479,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider1": [
                    "str",
                    "Optional[Union[bool, Any]]",
                    "dict"
                ]
            }
        }
    },
    "waterbutler-master/tests/core/test_remote_logging.py": {
        "TestScrubPayloadForKeen.test_flat_dict": {
            "name": "test_flat_dict",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScrubPayloadForKeen.test_flat_dict_needs_scrubbing": {
            "name": "test_flat_dict_needs_scrubbing",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScrubPayloadForKeen.test_scrub_and_rename": {
            "name": "test_scrub_and_rename",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScrubPayloadForKeen.test_scrub_and_loop_rename": {
            "name": "test_scrub_and_loop_rename",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScrubPayloadForKeen.test_max_iteration": {
            "name": "test_max_iteration",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/core/test_utils.py": {
        "TestAsyncRetry.test_docstring_survives": {
            "name": "test_docstring_survives",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentDisposition.test_strip_for_disposition": {
            "name": "test_strip_for_disposition",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "expected": []
            }
        },
        "TestContentDisposition.test_content_disposition": {
            "name": "test_content_disposition",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "expected": []
            }
        },
        "TestContentDisposition.test_disposition_encoding": {
            "name": "test_disposition_encoding",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "expected": []
            }
        }
    },
    "waterbutler-master/tests/core/__init__.py": {},
    "waterbutler-master/tests/core/streams/fixtures.py": {
        "mock_content": {
            "name": "mock_content",
            "location": 9,
            "return": [
                "dict",
                "mode.utils.Counter[faustypes.TP]",
                "cmk.utils.type_defs.EventRule",
                "Type[T]"
            ],
            "arguments": {}
        },
        "mock_content_eof": {
            "name": "mock_content_eof",
            "location": 13,
            "return": [
                "dict",
                "bytes",
                "cmk.utils.type_defs.EventRule",
                "Type[T]",
                "set"
            ],
            "arguments": {}
        },
        "mock_response_stream_reader": {
            "name": "mock_response_stream_reader",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "mock_response_stream_reader_no_size": {
            "name": "mock_response_stream_reader_no_size",
            "location": 44,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "mock_response_stream_reader_no_content": {
            "name": "mock_response_stream_reader_no_content",
            "location": 49,
            "return": [
                "Tuple[int, str]",
                "bool",
                "Optional[bytes]",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/core/streams/test_base64encodestream.py": {
        "TestBase64Stream.test_size": {
            "name": "test_size",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/core/streams/test_cutoffstream.py": {
        "blob": {
            "name": "blob",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestCutoffStream.test_no_cutoff_exception": {
            "name": "test_no_cutoff_exception",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "blob": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tests/core/streams/test_file.py": {},
    "waterbutler-master/tests/core/streams/test_formdatastream.py": {
        "boundary": {
            "name": "boundary",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TestFormDataStream.test_cant_add_after_finalize": {
            "name": "test_cant_add_after_finalize",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormDataStream.test_headers_calls_finalize": {
            "name": "test_headers_calls_finalize",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFormDataStream.test_finalize_empty": {
            "name": "test_finalize_empty",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/core/streams/test_http.py": {},
    "waterbutler-master/tests/core/streams/test_jsonstream.py": {},
    "waterbutler-master/tests/core/streams/test_multistream.py": {
        "blob": {
            "name": "blob",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/core/streams/test_stringstream.py": {
        "TestStringStream.test_size": {
            "name": "test_size",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringStream.test_must_be_str_or_bytes": {
            "name": "test_must_be_str_or_bytes",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/core/streams/test_zip.py": {},
    "waterbutler-master/tests/core/streams/__init__.py": {},
    "waterbutler-master/tests/providers/__init__.py": {},
    "waterbutler-master/tests/providers/bitbucket/metadata_fixtures.py": {
        "owner": {
            "name": "owner",
            "location": 5,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "repo": {
            "name": "repo",
            "location": 10,
            "return": [
                "dict",
                "Optional[Type]",
                "Iterable[Any]"
            ],
            "arguments": {}
        },
        "file_metadata": {
            "name": "file_metadata",
            "location": 15,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "folder_metadata": {
            "name": "folder_metadata",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "revision_metadata": {
            "name": "revision_metadata",
            "location": 31,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/bitbucket/provider_fixtures.py": {
        "repo_metadata": {
            "name": "repo_metadata",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "file_history_page_1": {
            "name": "file_history_page_1",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "file_history_page_2": {
            "name": "file_history_page_2",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "path_metadata_folder": {
            "name": "path_metadata_folder",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "path_metadata_file": {
            "name": "path_metadata_file",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "branch_metadata": {
            "name": "branch_metadata",
            "location": 41,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {}
        },
        "folder_contents_page_1": {
            "name": "folder_contents_page_1",
            "location": 48,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "folder_contents_page_2": {
            "name": "folder_contents_page_2",
            "location": 55,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "folder_full_contents_list": {
            "name": "folder_full_contents_list",
            "location": 62,
            "return": [
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/bitbucket/test_metadata.py": {
        "TestBitbucketMetadata.test_build_file_metadata": {
            "name": "test_build_file_metadata",
            "location": 17,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "file_metadata": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "owner": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Dict[str, str]"
                ],
                "repo": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Dict[str, str]"
                ]
            }
        },
        "TestBitbucketMetadata.test_build_folder_metadata": {
            "name": "test_build_folder_metadata",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "folder_metadata": [
                    "bool",
                    "str"
                ],
                "owner": [
                    "bool",
                    "str"
                ],
                "repo": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestBitbucketMetadata.test_build_revision_metadata": {
            "name": "test_build_revision_metadata",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "revision_metadata": [
                    "str",
                    "int",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/bitbucket/test_path.py": {
        "TestBitbucketPath.test_id_accessors": {
            "name": "test_id_accessors",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitbucketPath.test_id_accessors_no_sha": {
            "name": "test_id_accessors_no_sha",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitbucketPath.test_id_accessors_no_branch": {
            "name": "test_id_accessors_no_branch",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitbucketPath.test_child_inherits_id": {
            "name": "test_child_inherits_id",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitbucketPath.test_child_given_explicit_branch": {
            "name": "test_child_given_explicit_branch",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitbucketPath.test_update_commit_sha": {
            "name": "test_update_commit_sha",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/providers/bitbucket/test_provider.py": {
        "auth": {
            "name": "auth",
            "location": 24,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 32,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 37,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "provider": {
            "name": "provider",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "TestReadOnlyProvider.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 429,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestReadOnlyProvider.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestMisc.test_can_duplicate_name": {
            "name": "test_can_duplicate_name",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestMisc.test_path_from_metadata": {
            "name": "test_path_from_metadata",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "file_metadata": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, str]"
                ],
                "owner": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, str]"
                ],
                "repo": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/bitbucket/__init__.py": {},
    "waterbutler-master/tests/providers/box/fixtures.py": {
        "root_provider_fixtures": {
            "name": "root_provider_fixtures",
            "location": 7,
            "return": [
                "Callable[[Any], bool]",
                "str",
                "Dict[str, List[int]]",
                "Optional[float]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "revision_fixtures": {
            "name": "revision_fixtures",
            "location": 14,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "intra_fixtures": {
            "name": "intra_fixtures",
            "location": 20,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/box/test_metadata.py": {
        "TestBoxMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root_provider_fixtures": [
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "TestBoxMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "intra_fixtures": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestBoxMetadata.test_revision_metadata": {
            "name": "test_revision_metadata",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision_fixtures": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/box/test_provider.py": {
        "auth": {
            "name": "auth",
            "location": 25,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 33,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "other_credentials": {
            "name": "other_credentials",
            "location": 38,
            "return": [
                "str",
                "float",
                "bytes"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "provider": {
            "name": "provider",
            "location": 48,
            "return": [
                "bool",
                "str",
                "raiden.utils.signer.Signer"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "other_provider": {
            "name": "other_provider",
            "location": 53,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "auth": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "other_credentials": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "file_content": {
            "name": "file_content",
            "location": 58,
            "return": [
                "bytes",
                "str",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "file_sha_b64": {
            "name": "file_sha_b64",
            "location": 63,
            "return": [
                "int",
                "cmk.utils.type_defs.HostName",
                "recidiviz.utils.regions.Region",
                "bool"
            ],
            "arguments": {}
        },
        "file_like": {
            "name": "file_like",
            "location": 68,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 73,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "TestOperations.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 1130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestOperations.test_shares_storage_root": {
            "name": "test_shares_storage_root",
            "location": 1133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ],
                "other_provider": [
                    "Optional[str]",
                    "str",
                    "Tuple[str, str, str]",
                    "path.Path",
                    "tests.e2e.Helper"
                ]
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 1137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Callable",
                    "str"
                ],
                "other_provider": [
                    "lightbus.path.BusPath",
                    "str"
                ]
            }
        },
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 1141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Callable",
                    "str"
                ],
                "other_provider": [
                    "lightbus.path.BusPath",
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/box/__init__.py": {},
    "waterbutler-master/tests/providers/cloudfiles/test_metadata.py": {
        "file_header_metadata_txt": {
            "name": "file_header_metadata_txt",
            "location": 11,
            "return": [
                "str",
                "int",
                "core.D.VersionedIdentifier",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {}
        },
        "file_metadata": {
            "name": "file_metadata",
            "location": 26,
            "return": [
                "str",
                "Union[str, blurr.core.type.Type]",
                "int",
                "tartare.core.readers.CsvReader",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "TestCloudfilesMetadata.test_header_metadata": {
            "name": "test_header_metadata",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_header_metadata_txt": [
                    "str"
                ]
            }
        },
        "TestCloudfilesMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_metadata": [
                    "str",
                    "TextIO",
                    "dict",
                    "bytes"
                ]
            }
        },
        "TestCloudfilesMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/providers/cloudfiles/test_provider.py": {
        "auth": {
            "name": "auth",
            "location": 18,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 26,
            "return": [
                "int",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "provider": {
            "name": "provider",
            "location": 40,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "auth": [
                    "str",
                    "Tuple[List[str], List[str]]",
                    "List[str]"
                ],
                "credentials": [
                    "str",
                    "Tuple[List[str], List[str]]",
                    "List[str]"
                ],
                "settings": [
                    "str",
                    "Tuple[List[str], List[str]]",
                    "List[str]"
                ]
            }
        },
        "auth_json": {
            "name": "auth_json",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "token": {
            "name": "token",
            "location": 107,
            "return": [
                "bool",
                "int",
                "Dict[int, dict]"
            ],
            "arguments": {
                "auth_json": [
                    "dict",
                    "float",
                    "Callable[[str, str], bool]",
                    "str",
                    "bool"
                ]
            }
        },
        "endpoint": {
            "name": "endpoint",
            "location": 112,
            "return": [
                "str",
                "Optional[str]",
                "List[float]",
                "Optional[Any]"
            ],
            "arguments": {
                "auth_json": [
                    "str",
                    "dict",
                    "Sequence",
                    "relay.streams.Subscription",
                    "int"
                ]
            }
        },
        "temp_url_key": {
            "name": "temp_url_key",
            "location": 117,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "mock_auth": {
            "name": "mock_auth",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "auth_json": [
                    "bool"
                ]
            }
        },
        "mock_temp_key": {
            "name": "mock_temp_key",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "endpoint": [
                    "str"
                ],
                "temp_url_key": [
                    "str"
                ]
            }
        },
        "mock_time": {
            "name": "mock_time",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "pymatgen.core.structure.Structure"
                ]
            }
        },
        "connected_provider": {
            "name": "connected_provider",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Union[str, bytes]"
                ],
                "token": [
                    "str"
                ],
                "endpoint": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "temp_url_key": [
                    "str",
                    "Union[str, bytes]",
                    "bytes",
                    "Optional[Any]"
                ],
                "mock_time": [
                    "str",
                    "List[str]",
                    "Union[str, Iterable[str]]",
                    "bool"
                ]
            }
        },
        "file_content": {
            "name": "file_content",
            "location": 156,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "file_like": {
            "name": "file_like",
            "location": 161,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 166,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "file_metadata": {
            "name": "file_metadata",
            "location": 171,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "folder_root_empty": {
            "name": "folder_root_empty",
            "location": 196,
            "return": [
                "bool",
                "Callable",
                "List[dict]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "folder_root": {
            "name": "folder_root",
            "location": 201,
            "return": [
                "Type[Any]",
                "dict"
            ],
            "arguments": {}
        },
        "folder_root_level1": {
            "name": "folder_root_level1",
            "location": 238,
            "return": [
                "Type[Any]",
                "dict"
            ],
            "arguments": {}
        },
        "folder_root_level1_level2": {
            "name": "folder_root_level1_level2",
            "location": 254,
            "return": [
                "dict",
                "Set[str]",
                "MutableMapping[str, str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "file_root_level1_level2_file2_txt": {
            "name": "file_root_level1_level2_file2_txt",
            "location": 267,
            "return": [
                "str",
                "int",
                "bytes",
                "Any"
            ],
            "arguments": {}
        },
        "folder_root_level1_empty": {
            "name": "folder_root_level1_empty",
            "location": 282,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "file_root_similar": {
            "name": "file_root_similar",
            "location": 297,
            "return": [
                "str",
                "Any",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "file_root_similar_name": {
            "name": "file_root_similar_name",
            "location": 312,
            "return": [
                "str",
                "Iterable[int]",
                "bool",
                "core.D.VersionedIdentifier",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "TestOperations.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 724,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connected_provider": []
            }
        },
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connected_provider": [
                    "bool"
                ]
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 730,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connected_provider": [
                    "bool"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/cloudfiles/__init__.py": {},
    "waterbutler-master/tests/providers/dataverse/fixtures.py": {
        "auth": {
            "name": "auth",
            "location": 13,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 21,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "native_file_metadata": {
            "name": "native_file_metadata",
            "location": 35,
            "return": [
                "str",
                "frozenset[str]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "native_dataset_metadata": {
            "name": "native_dataset_metadata",
            "location": 41,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "empty_native_dataset_metadata": {
            "name": "empty_native_dataset_metadata",
            "location": 47,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "checksum_mismatch_dataset_metadata": {
            "name": "checksum_mismatch_dataset_metadata",
            "location": 53,
            "return": [
                "IO",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "dataset_metadata_object": {
            "name": "dataset_metadata_object",
            "location": 59,
            "return": [
                "Callable",
                "str",
                "list",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {}
        },
        "file_metadata_object": {
            "name": "file_metadata_object",
            "location": 69,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "revision_metadata_object": {
            "name": "revision_metadata_object",
            "location": 75,
            "return": [
                "str",
                "float",
                "bytes",
                "int"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/dataverse/test_metadata.py": {
        "TestDatasetMetadata.test_dataset_metadata": {
            "name": "test_dataset_metadata",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_metadata_object": [
                    "Optional[str]",
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]",
                    "tests.e2e.Helper"
                ]
            }
        },
        "TestRevisionMetadata.test_revision_metadata": {
            "name": "test_revision_metadata",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision_metadata_object": []
            }
        },
        "TestFileMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_metadata_object": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/dataverse/test_provider.py": {
        "provider": {
            "name": "provider",
            "location": 28,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "file_content": {
            "name": "file_content",
            "location": 33,
            "return": [
                "bytes",
                "str",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "file_like": {
            "name": "file_like",
            "location": 38,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 43,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "TestUtils.test_utils": {
            "name": "test_utils",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/dataverse/__init__.py": {},
    "waterbutler-master/tests/providers/dropbox/fixtures.py": {
        "auth": {
            "name": "auth",
            "location": 12,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 17,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "other_credentials": {
            "name": "other_credentials",
            "location": 22,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "provider_fixtures": {
            "name": "provider_fixtures",
            "location": 32,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "revision_fixtures": {
            "name": "revision_fixtures",
            "location": 39,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "error_fixtures": {
            "name": "error_fixtures",
            "location": 45,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]",
                "dict"
            ],
            "arguments": {}
        },
        "file_content": {
            "name": "file_content",
            "location": 51,
            "return": [
                "bytes",
                "str",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "file_like": {
            "name": "file_like",
            "location": 56,
            "return": [
                "str",
                "bytes",
                "os.DirEntry"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 61,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "provider": {
            "name": "provider",
            "location": 66,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "other_provider": {
            "name": "other_provider",
            "location": 71,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "auth": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "other_credentials": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/dropbox/test_exceptions.py": {
        "TestExceptionSerialization.test_tolerate_dumb_signature": {
            "name": "test_tolerate_dumb_signature",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exception_class": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/dropbox/test_metadata.py": {
        "TestDropboxMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_fixtures": [
                    "str"
                ]
            }
        },
        "TestDropboxMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_fixtures": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestDropboxMetadata.test_revision_metadata": {
            "name": "test_revision_metadata",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision_fixtures": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/dropbox/test_provider.py": {
        "build_folder_metadata_data": {
            "name": "build_folder_metadata_data",
            "location": 34,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 1040,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestOperations.test_can_intra_copy_other": {
            "name": "test_can_intra_copy_other",
            "location": 1043,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ],
                "other_provider": [
                    "str"
                ]
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 1046,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestOperations.test_cannot_intra_move_other": {
            "name": "test_cannot_intra_move_other",
            "location": 1049,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "lightbus.path.BusPath",
                    "str"
                ],
                "other_provider": [
                    "lightbus.path.BusPath",
                    "str"
                ]
            }
        },
        "TestOperations.test_conflict_error_handler_not_found": {
            "name": "test_conflict_error_handler_not_found",
            "location": 1052,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [],
                "error_fixtures": []
            }
        },
        "TestOperations.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 1061,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestOperations.test_shares_storage_root": {
            "name": "test_shares_storage_root",
            "location": 1064,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ],
                "other_provider": [
                    "Optional[str]",
                    "str",
                    "Tuple[str, str, str]",
                    "path.Path",
                    "tests.e2e.Helper"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/dropbox/__init__.py": {},
    "waterbutler-master/tests/providers/figshare/fixtures.py": {
        "root_provider_fixtures": {
            "name": "root_provider_fixtures",
            "location": 8,
            "return": [
                "Callable[[Any], bool]",
                "str",
                "Dict[str, List[int]]",
                "Optional[float]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "crud_fixtures": {
            "name": "crud_fixtures",
            "location": 14,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "error_fixtures": {
            "name": "error_fixtures",
            "location": 20,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]",
                "dict"
            ],
            "arguments": {}
        },
        "project_article_type_1_metadata": {
            "name": "project_article_type_1_metadata",
            "location": 26,
            "return": [
                "bool",
                "type",
                "Optional[str]",
                "str",
                "Type",
                "tuple",
                "int"
            ],
            "arguments": {}
        },
        "project_article_type_3_metadata": {
            "name": "project_article_type_3_metadata",
            "location": 35,
            "return": [
                "bool",
                "type",
                "Optional[str]",
                "str",
                "Type",
                "tuple",
                "int"
            ],
            "arguments": {}
        },
        "project_list_articles": {
            "name": "project_list_articles",
            "location": 44,
            "return": [
                "bytes",
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {}
        },
        "project_article_type_1_file_metadata": {
            "name": "project_article_type_1_file_metadata",
            "location": 53,
            "return": [
                "bool",
                "OrderedDict",
                "type",
                "Callable",
                "dict"
            ],
            "arguments": {}
        },
        "project_article_type_3_file_metadata": {
            "name": "project_article_type_3_file_metadata",
            "location": 64,
            "return": [
                "bool",
                "OrderedDict",
                "type",
                "Callable",
                "dict"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/figshare/test_metadata.py": {
        "TestFigshareFileMetadata.test_private_file_metadata": {
            "name": "test_private_file_metadata",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_article_type_1_metadata": [
                    "str"
                ]
            }
        },
        "TestFigshareFileMetadata.test_public_file_metadata": {
            "name": "test_public_file_metadata",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_article_type_1_metadata": []
            }
        },
        "TestFigshareFileMetadata.test_metadata_article_identifier": {
            "name": "test_metadata_article_identifier",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_article_type_1_metadata": [
                    "str"
                ]
            }
        },
        "TestFigshareFileMetadata.test_private_folder_metadata": {
            "name": "test_private_folder_metadata",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_article_type_3_metadata": [
                    "str",
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        },
        "TestFigshareFileMetadata.test_public_folder_metadata": {
            "name": "test_public_folder_metadata",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_article_type_3_metadata": [
                    "str",
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        },
        "TestFigshareFileMetadata.test_revision_metadata": {
            "name": "test_revision_metadata",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/providers/figshare/test_path.py": {
        "TestFigsharePath.test_folder_path": {
            "name": "test_folder_path",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFigsharePath.test_file_path": {
            "name": "test_file_path",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFigsharePath.test_root_path": {
            "name": "test_root_path",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFigsharePath.test_parent": {
            "name": "test_parent",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFigsharePath.test_child": {
            "name": "test_child",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/providers/figshare/test_provider.py": {
        "auth": {
            "name": "auth",
            "location": 25,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 35,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "project_settings": {
            "name": "project_settings",
            "location": 42,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "project_settings_2": {
            "name": "project_settings_2",
            "location": 50,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "article_settings": {
            "name": "article_settings",
            "location": 58,
            "return": [
                "str",
                "dict",
                "Union[int, float]",
                "List[int]",
                "List[str]"
            ],
            "arguments": {}
        },
        "project_provider": {
            "name": "project_provider",
            "location": 66,
            "return": [
                "dict",
                "tartare.core.contexContributorExportContext",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "auth": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "dict"
                ],
                "credentials": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "dict"
                ],
                "project_settings": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "dict"
                ]
            }
        },
        "project_provider_2": {
            "name": "project_provider_2",
            "location": 71,
            "return": [
                "dict",
                "tartare.core.contexContributorExportContext",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "auth": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "dict"
                ],
                "credentials": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "dict"
                ],
                "project_settings_2": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "dict"
                ]
            }
        },
        "article_provider": {
            "name": "article_provider",
            "location": 76,
            "return": [
                "str",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "article_settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "file_content": {
            "name": "file_content",
            "location": 81,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "file_like": {
            "name": "file_like",
            "location": 86,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 91,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "TestPolymorphism.test_project_provider": {
            "name": "test_project_provider",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_settings": [
                    "str"
                ],
                "project_provider": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "float",
                    "bool"
                ]
            }
        },
        "TestPolymorphism.test_article_provider": {
            "name": "test_article_provider",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "article_settings": [
                    "lightbus.path.BusPath"
                ],
                "article_provider": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestMisc.test_path_from_metadata_file": {
            "name": "test_path_from_metadata_file",
            "location": 1647,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_provider": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "List[List[str]]",
                    "Dict[str, cerulean.path.Path]"
                ],
                "root_provider_fixtures": [
                    "dict",
                    "str"
                ]
            }
        },
        "TestMisc.test_path_from_metadata_folder": {
            "name": "test_path_from_metadata_folder",
            "location": 1658,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_provider": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "root_provider_fixtures": [
                    "path.Path"
                ]
            }
        },
        "TestMisc.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 1703,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_provider": [
                    "str"
                ]
            }
        },
        "TestMisc.test_base_figshare_provider_fileset": {
            "name": "test_base_figshare_provider_fileset",
            "location": 1706,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [],
                "credentials": []
            }
        },
        "TestMisc.test_base_figshare_provider_invalid_setting": {
            "name": "test_base_figshare_provider_invalid_setting",
            "location": 1716,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [],
                "credentials": []
            }
        },
        "TestMisc.test_figshare_provider_invalid_setting": {
            "name": "test_figshare_provider_invalid_setting",
            "location": 1728,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "tests.conftesWorker"
                ],
                "credentials": [
                    "tests.conftesWorker"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/figshare/__init__.py": {},
    "waterbutler-master/tests/providers/filesystem/test_metadata.py": {
        "file_metadata": {
            "name": "file_metadata",
            "location": 10,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "root_metadata": {
            "name": "root_metadata",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "folder_metadata": {
            "name": "folder_metadata",
            "location": 26,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str"
            ],
            "arguments": {}
        },
        "subfolder_metadata": {
            "name": "subfolder_metadata",
            "location": 32,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str"
            ],
            "arguments": {}
        },
        "TestMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_metadata": [
                    "str",
                    "BinaryIO",
                    "IO[bytes]"
                ]
            }
        },
        "TestMetadata.test_root_metadata": {
            "name": "test_root_metadata",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root_metadata": [
                    "str"
                ]
            }
        },
        "TestMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder_metadata": [
                    "bytes",
                    "str"
                ]
            }
        },
        "TestMetadata.test_subfolder_metadata": {
            "name": "test_subfolder_metadata",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subfolder_metadata": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/filesystem/test_provider.py": {
        "auth": {
            "name": "auth",
            "location": 18,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, bool]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "provider": {
            "name": "provider",
            "location": 33,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "auth": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "set",
                    "float"
                ],
                "credentials": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "set",
                    "float"
                ],
                "settings": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "set",
                    "float"
                ]
            }
        },
        "setup_filesystem": {
            "name": "setup_filesystem",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "provider": [
                    "str",
                    "int"
                ]
            }
        },
        "TestOperations.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ]
            }
        },
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "float"
                ]
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/filesystem/__init__.py": {},
    "waterbutler-master/tests/providers/github/fixtures.py": {
        "provider_fixtures": {
            "name": "provider_fixtures",
            "location": 8,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "revision_fixtures": {
            "name": "revision_fixtures",
            "location": 15,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "crud_fixtures": {
            "name": "crud_fixtures",
            "location": 21,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "error_fixtures": {
            "name": "error_fixtures",
            "location": 27,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]",
                "dict"
            ],
            "arguments": {}
        },
        "metadata_fixtures": {
            "name": "metadata_fixtures",
            "location": 33,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/github/test_exceptions.py": {
        "TestExceptionSerialization.test_tolerate_dumb_signature": {
            "name": "test_tolerate_dumb_signature",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exception_class": [
                    "str"
                ]
            }
        },
        "TestExceptionSerialization.test_date_formatting": {
            "name": "test_date_formatting",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/providers/github/test_metadata.py": {
        "TestGitHubMetadata.test_build_file_metadata_from_tree": {
            "name": "test_build_file_metadata_from_tree",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata_fixtures": [
                    "bool",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "str",
                    "int"
                ]
            }
        },
        "TestGitHubMetadata.test_build_file_metadata_from_contents": {
            "name": "test_build_file_metadata_from_contents",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata_fixtures": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestGitHubMetadata.test_build_folder_metadata_from_tree": {
            "name": "test_build_folder_metadata_from_tree",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata_fixtures": [
                    "int"
                ]
            }
        },
        "TestGitHubMetadata.test_build_folder_metadata_from_content": {
            "name": "test_build_folder_metadata_from_content",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata_fixtures": [
                    "bool",
                    "Dict[str, Sequence[Any]]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ]
            }
        },
        "TestGitHubMetadata.test_file_metadata_with_ref": {
            "name": "test_file_metadata_with_ref",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata_fixtures": []
            }
        }
    },
    "waterbutler-master/tests/providers/github/test_path.py": {
        "TestGitHubPath.test_id_accessors": {
            "name": "test_id_accessors",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitHubPath.test_child_inherits_branch": {
            "name": "test_child_inherits_branch",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitHubPath.test_increment_name": {
            "name": "test_increment_name",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitHubPath.test_child_given_explicit_branch": {
            "name": "test_child_given_explicit_branch",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitHubPath.test_child_gets_branch": {
            "name": "test_child_gets_branch",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/providers/github/test_provider.py": {
        "auth": {
            "name": "auth",
            "location": 30,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "other_auth": {
            "name": "other_auth",
            "location": 38,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "tests.models.Customer"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 46,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "other_credentials": {
            "name": "other_credentials",
            "location": 51,
            "return": [
                "str",
                "Optional[str]",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 56,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "other_settings": {
            "name": "other_settings",
            "location": 64,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "file_content": {
            "name": "file_content",
            "location": 72,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "file_like": {
            "name": "file_like",
            "location": 77,
            "return": [
                "str",
                "bytes",
                "os.DirEntry"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 82,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "provider": {
            "name": "provider",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "provider_fixtures": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "other_provider": {
            "name": "other_provider",
            "location": 95,
            "return": [
                "str",
                "deque",
                "int"
            ],
            "arguments": {
                "other_auth": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "other_credentials": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "other_settings": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "provider_fixtures": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "rate_limit_provider": {
            "name": "rate_limit_provider",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "provider": [
                    "src.core.model.profile.Profile"
                ]
            }
        },
        "mock_time": {
            "name": "mock_time",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "pymatgen.core.structure.Structure"
                ]
            }
        },
        "TestHelpers.test_build_repo_url": {
            "name": "test_build_repo_url",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Callable"
                ],
                "settings": [
                    "str",
                    "tests.fixtures.cloud_uploader.Uploader"
                ]
            }
        },
        "TestHelpers.test_committer": {
            "name": "test_committer",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "tests.conftesWorker"
                ],
                "provider": [
                    "tests.conftesWorker"
                ]
            }
        },
        "TestRateLimit.test_add_tokens_min_rate": {
            "name": "test_add_tokens_min_rate",
            "location": 1393,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "mock.MagicMock",
                    "mock.Mock"
                ],
                "rate_limit_provider": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestRateLimit.test_add_tokens_min_rate_max_tokens": {
            "name": "test_add_tokens_min_rate_max_tokens",
            "location": 1399,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "mock.Mock",
                    "tests.async_mock.MagicMock",
                    "mock.MagicMock"
                ],
                "rate_limit_provider": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestRateLimit.test_add_tokens_variable_rate": {
            "name": "test_add_tokens_variable_rate",
            "location": 1406,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "mock.Mock",
                    "mock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "rate_limit_provider": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestRateLimit.test_add_tokens_variable_rate_max_tokens": {
            "name": "test_add_tokens_variable_rate_max_tokens",
            "location": 1412,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "tests.async_mock.MagicMock",
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "rate_limit_provider": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestRateLimit.test_add_tokens_reset_smaller_than_now": {
            "name": "test_add_tokens_reset_smaller_than_now",
            "location": 1419,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "mock.MagicMock"
                ],
                "rate_limit_provider": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestOperations.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 1651,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 1654,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Callable",
                    "str"
                ],
                "other_provider": [
                    "lightbus.path.BusPath",
                    "str"
                ]
            }
        },
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 1658,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Callable",
                    "str"
                ],
                "other_provider": [
                    "lightbus.path.BusPath",
                    "str"
                ]
            }
        },
        "TestUtilities.test__path_exists_in_tree": {
            "name": "test__path_exists_in_tree",
            "location": 1694,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "str"
                ],
                "provider_fixtures": [
                    "int",
                    "str"
                ]
            }
        },
        "TestUtilities.test__remove_path_from_tree": {
            "name": "test__remove_path_from_tree",
            "location": 1717,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "blurr.core.schema_loader.SchemaLoader"
                ],
                "provider_fixtures": [
                    "core.models.Grouping",
                    "tartare.core.contexContributorExportContext"
                ]
            }
        },
        "TestUtilities.test__reparent_blobs": {
            "name": "test__reparent_blobs",
            "location": 1771,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "blurr.core.schema_loader.SchemaLoader"
                ],
                "provider_fixtures": [
                    "int"
                ]
            }
        },
        "TestUtilities.test__prune_subtrees": {
            "name": "test__prune_subtrees",
            "location": 1804,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [],
                "provider_fixtures": []
            }
        },
        "TestUtilities.test__interpret_query_parameters_sha_priorities": {
            "name": "test__interpret_query_parameters_sha_priorities",
            "location": 1869,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "nanaimo.fixtures.Fixture"
                ]
            }
        },
        "TestUtilities.test__interpret_query_parameters_branch_priorities": {
            "name": "test__interpret_query_parameters_branch_priorities",
            "location": 1907,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "nanaimo.fixtures.Fixture"
                ]
            }
        },
        "TestUtilities.test__interpret_query_parameters_sha_vs_branch_priority": {
            "name": "test__interpret_query_parameters_sha_vs_branch_priority",
            "location": 1945,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": []
            }
        },
        "TestUtilities.test__interpret_query_parameters_multival": {
            "name": "test__interpret_query_parameters_multival",
            "location": 1983,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "int",
                    "float"
                ],
                "kwargs": [],
                "expected": [
                    "str"
                ]
            }
        },
        "TestUtilities.test__interpret_query_parameters_multival_error": {
            "name": "test__interpret_query_parameters_multival_error",
            "location": 1992,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ],
                "kwargs": []
            }
        },
        "TestUtilities.test__looks_like_sha": {
            "name": "test__looks_like_sha",
            "location": 2005,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "str",
                    "bool"
                ],
                "ref": [
                    "int",
                    "str",
                    "bool"
                ],
                "expected": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/github/__init__.py": {},
    "waterbutler-master/tests/providers/gitlab/fixtures.py": {
        "simple_tree": {
            "name": "simple_tree",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "gitlab_example_sub_project_tree": {
            "name": "gitlab_example_sub_project_tree",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "subfolder_tree": {
            "name": "subfolder_tree",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "simple_file_metadata": {
            "name": "simple_file_metadata",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "revisions_for_file": {
            "name": "revisions_for_file",
            "location": 113,
            "return": [
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {}
        },
        "default_branches": {
            "name": "default_branches",
            "location": 168,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[float]",
                "dict"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/gitlab/test_provider.py": {
        "auth": {
            "name": "auth",
            "location": 18,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 26,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 31,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "repo_metadata": {
            "name": "repo_metadata",
            "location": 41,
            "return": [
                "str",
                "List[str]",
                "topicdb.core.models.language.Language"
            ],
            "arguments": {}
        },
        "provider": {
            "name": "provider",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "auth": [
                    "bool",
                    "Optional[str]",
                    "Optional[List]",
                    "Callable",
                    "List[Dict]",
                    "str",
                    "int"
                ],
                "credentials": [
                    "bool",
                    "Optional[str]",
                    "Optional[List]",
                    "Callable",
                    "List[Dict]",
                    "str",
                    "int"
                ],
                "settings": [
                    "bool",
                    "Optional[str]",
                    "Optional[List]",
                    "Callable",
                    "List[Dict]",
                    "str",
                    "int"
                ],
                "repo_metadata": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[Tuple[str, int]]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "other": {
            "name": "other",
            "location": 59,
            "return": [
                "str",
                "deque",
                "int"
            ],
            "arguments": {
                "auth": [
                    "str",
                    "bool",
                    "List[Dict]"
                ],
                "credentials": [
                    "str",
                    "bool",
                    "List[Dict]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "List[Dict]"
                ],
                "repo_metadata": [
                    "bool",
                    "List[Tuple[str, int]]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestHelpers.test_build_repo_url": {
            "name": "test_build_repo_url",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "bool",
                    "str"
                ],
                "settings": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "bytes"
                ]
            }
        },
        "TestReadOnlyProvider.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestReadOnlyProvider.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 513,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestReadOnlyProvider.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 516,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/gitlab/__init__.py": {},
    "waterbutler-master/tests/providers/googlecloud/test_metadata.py": {
        "TestMetadataInitialization.test_metadata_from_dict": {
            "name": "test_metadata_from_dict",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "meta_file_parsed": [
                    "Callable[[str], str]",
                    "str"
                ]
            }
        },
        "TestMetadataInitialization.test_metadata_from_resp_headers": {
            "name": "test_metadata_from_resp_headers",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_obj_name": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "meta_file_raw": [
                    "bool"
                ]
            }
        },
        "TestMetadataInitialization.test_metadata_from_resp_headers_missing_object_name": {
            "name": "test_metadata_from_resp_headers_missing_object_name",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "meta_file_raw": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestMetadataInitialization.test_metadata_from_resp_headers_invalid_resp_headers": {
            "name": "test_metadata_from_resp_headers_invalid_resp_headers",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_obj_name": [
                    "str",
                    "int",
                    "dict"
                ],
                "meta_file_raw": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "TestMetadataInitialization.test_metadata_from_resp_headers_missing_resp_headers": {
            "name": "test_metadata_from_resp_headers_missing_resp_headers",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_obj_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestGoogleCloudFileMetadata.test_file_resp_headers": {
            "name": "test_file_resp_headers",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_obj_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "meta_file_raw": [
                    "dict",
                    "bool",
                    "Optional[Dict[str, dict]]"
                ],
                "meta_file_parsed": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestGoogleCloudFileMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ],
                "file_obj_name": [
                    "str",
                    "Optional[str]"
                ],
                "meta_file_parsed": [
                    "str",
                    "bool"
                ],
                "meta_file_extra": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestGoogleCloudFolderMetadata.test_folder_resp_headers": {
            "name": "test_folder_resp_headers",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder_obj_name": [
                    "str",
                    "bool"
                ],
                "meta_folder_raw": [
                    "Dict[str, List[str]]"
                ],
                "meta_folder_parsed": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestGoogleCloudFolderMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ],
                "folder_obj_name": [
                    "str"
                ],
                "meta_folder_parsed": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/googlecloud/test_provider.py": {
        "mock_provider": {
            "name": "mock_provider",
            "location": 38,
            "return": [
                "List[str]",
                "landshark.metadata.Training",
                "str",
                "bool",
                "List[src.main.core.models.window.Window]"
            ],
            "arguments": {
                "mock_auth": [
                    "mock.MagicMock"
                ],
                "mock_creds": [
                    "mock.MagicMock"
                ],
                "mock_settings": [
                    "mock.MagicMock"
                ]
            }
        },
        "mock_provider_2": {
            "name": "mock_provider_2",
            "location": 43,
            "return": [
                "List[str]",
                "landshark.metadata.Training",
                "str",
                "bool",
                "List[src.main.core.models.window.Window]"
            ],
            "arguments": {
                "mock_auth_2": [
                    "mock.MagicMock"
                ],
                "mock_creds_2": [
                    "mock.MagicMock"
                ],
                "mock_settings_2": [
                    "mock.MagicMock"
                ]
            }
        },
        "mock_time": {
            "name": "mock_time",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "pymatgen.core.structure.Structure"
                ]
            }
        },
        "file_stream_file": {
            "name": "file_stream_file",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "file_raw": [
                    "str",
                    "IO[bytes]",
                    "BinaryIO"
                ]
            }
        },
        "TestProviderInit.test_provider_init": {
            "name": "test_provider_init",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_provider": [
                    "meeshkan.core.api.Api"
                ],
                "mock_settings": [
                    "mock.MagicMock"
                ],
                "mock_creds": []
            }
        },
        "TestOperations.test_provider_equality": {
            "name": "test_provider_equality",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_provider": [],
                "mock_provider_2": []
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_provider": [],
                "mock_provider_2": [],
                "file_wb_path": [],
                "folder_wb_path": []
            }
        },
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_provider": [],
                "mock_provider_2": [],
                "file_wb_path": [],
                "folder_wb_path": []
            }
        },
        "TestOperations.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_provider": []
            }
        }
    },
    "waterbutler-master/tests/providers/googlecloud/test_utils.py": {
        "mock_provider": {
            "name": "mock_provider",
            "location": 31,
            "return": [
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "mock_auth": [
                    "mock.MagicMock"
                ],
                "mock_creds": [
                    "mock.MagicMock"
                ],
                "mock_settings": [
                    "mock.MagicMock"
                ]
            }
        },
        "mock_time": {
            "name": "mock_time",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str"
                ]
            }
        },
        "expires": {
            "name": "expires",
            "location": 42,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "TestPathAndNameForObjects.test_path_and_obj_name_for_file": {
            "name": "test_path_and_obj_name_for_file",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_obj_name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "file_wb_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestPathAndNameForObjects.test_path_and_obj_name_for_folder": {
            "name": "test_path_and_obj_name_for_folder",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder_obj_name": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial"
                ],
                "folder_wb_path": [
                    "str"
                ]
            }
        },
        "TestBuildAndSignURL.test_build_canonical_ext_headers_str": {
            "name": "test_build_canonical_ext_headers_str",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_provider": [
                    "str"
                ],
                "file_2_obj_name": [
                    "str"
                ]
            }
        },
        "TestBuildAndSignURL.test_build_and_sign_metadata_url": {
            "name": "test_build_and_sign_metadata_url",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "expires": [
                    "str"
                ],
                "mock_provider": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bool"
                ],
                "file_2_obj_name": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestBuildAndSignURL.test_build_and_sign_upload_url": {
            "name": "test_build_and_sign_upload_url",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "List[int]"
                ],
                "expires": [
                    "str"
                ],
                "mock_provider": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "file_2_obj_name": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestBuildAndSignURL.test_build_and_sign_download_url": {
            "name": "test_build_and_sign_download_url",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "expires": [
                    "str"
                ],
                "mock_provider": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bool"
                ],
                "file_2_obj_name": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestBuildAndSignURL.test_build_and_sign_delete_url": {
            "name": "test_build_and_sign_delete_url",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "expires": [
                    "str"
                ],
                "mock_provider": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "file_2_obj_name": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestBuildAndSignURL.test_build_and_sign_copy_url": {
            "name": "test_build_and_sign_copy_url",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "mock.MagicMock"
                ],
                "expires": [
                    "str"
                ],
                "mock_provider": [
                    "str",
                    "bool",
                    "bytes",
                    "dict"
                ],
                "file_2_obj_name": [
                    "str",
                    "Tuple[str, str, str]"
                ],
                "file_2_copy_obj_name": [
                    "Optional[str]",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestHash.test_get_multi_dict_from_json": {
            "name": "test_get_multi_dict_from_json",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "meta_file_raw": [
                    "str",
                    "Tuple[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestHash.test_verify_raw_google_hash_header": {
            "name": "test_verify_raw_google_hash_header",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHash.test_verify_bad_raw_google_hash_header": {
            "name": "test_verify_bad_raw_google_hash_header",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHash.test_decode_and_hexlify_hashes": {
            "name": "test_decode_and_hexlify_hashes",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/providers/googlecloud/__init__.py": {},
    "waterbutler-master/tests/providers/googlecloud/fixtures/files.py": {
        "file_wb_path": {
            "name": "file_wb_path",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "file_name": {
            "name": "file_name",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "file_obj_name": {
            "name": "file_obj_name",
            "location": 19,
            "return": [
                "str",
                "waterbutler.providers.github.path.GitHubPath"
            ],
            "arguments": {}
        },
        "meta_file_raw": {
            "name": "meta_file_raw",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "meta_file_parsed": {
            "name": "meta_file_parsed",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "meta_file_upload_raw": {
            "name": "meta_file_upload_raw",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "meta_file_copy_raw": {
            "name": "meta_file_copy_raw",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "meta_file_extra": {
            "name": "meta_file_extra",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "meta_file_resp_headers_raw": {
            "name": "meta_file_resp_headers_raw",
            "location": 54,
            "return": [
                "int",
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {}
        },
        "file_raw": {
            "name": "file_raw",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "file_2_wb_path": {
            "name": "file_2_wb_path",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "file_2_obj_name": {
            "name": "file_2_obj_name",
            "location": 71,
            "return": [
                "str",
                "waterbutler.providers.github.path.GitHubPath"
            ],
            "arguments": {}
        },
        "file_2_copy_obj_name": {
            "name": "file_2_copy_obj_name",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/googlecloud/fixtures/folders.py": {
        "folder_wb_path": {
            "name": "folder_wb_path",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "folder_name": {
            "name": "folder_name",
            "location": 14,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {}
        },
        "folder_obj_name": {
            "name": "folder_obj_name",
            "location": 19,
            "return": [
                "List[Tuple[int]]",
                "str",
                "List[str]",
                "List[T]",
                "List[int]",
                "Optional[Callable[[str], str]]"
            ],
            "arguments": {}
        },
        "meta_folder_raw": {
            "name": "meta_folder_raw",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "meta_folder_parsed": {
            "name": "meta_folder_parsed",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "meta_folder_resp_headers_raw": {
            "name": "meta_folder_resp_headers_raw",
            "location": 36,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/googlecloud/fixtures/providers.py": {
        "mock_auth": {
            "name": "mock_auth",
            "location": 5,
            "return": [
                "str",
                "Dict[str, Any]",
                "IO",
                "bool"
            ],
            "arguments": {}
        },
        "mock_auth_2": {
            "name": "mock_auth_2",
            "location": 10,
            "return": [
                "str",
                "Dict[str, Any]",
                "IO",
                "bool"
            ],
            "arguments": {}
        },
        "mock_creds": {
            "name": "mock_creds",
            "location": 15,
            "return": [
                "Callable",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "mock_creds_2": {
            "name": "mock_creds_2",
            "location": 35,
            "return": [
                "Callable",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "mock_settings": {
            "name": "mock_settings",
            "location": 55,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "mock_settings_2": {
            "name": "mock_settings_2",
            "location": 60,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/googlecloud/fixtures/__init__.py": {},
    "waterbutler-master/tests/providers/googledrive/fixtures.py": {
        "root_provider_fixtures": {
            "name": "root_provider_fixtures",
            "location": 7,
            "return": [
                "Callable[[Any], bool]",
                "str",
                "Dict[str, List[int]]",
                "Optional[float]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "revision_fixtures": {
            "name": "revision_fixtures",
            "location": 14,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "sharing_fixtures": {
            "name": "sharing_fixtures",
            "location": 20,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "error_fixtures": {
            "name": "error_fixtures",
            "location": 26,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]",
                "dict"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/googledrive/test_metadata.py": {
        "basepath": {
            "name": "basepath",
            "location": 20,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {}
        },
        "TestMetadata.test_file_metadata_drive": {
            "name": "test_file_metadata_drive",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basepath": [
                    "str"
                ],
                "root_provider_fixtures": [
                    "str"
                ]
            }
        },
        "TestMetadata.test_file_metadata_drive_slashes": {
            "name": "test_file_metadata_drive_slashes",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basepath": [
                    "str"
                ],
                "root_provider_fixtures": [
                    "str"
                ]
            }
        },
        "TestMetadata.test_file_metadata_docs": {
            "name": "test_file_metadata_docs",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "basepath": [
                    "str"
                ],
                "root_provider_fixtures": [
                    "str"
                ]
            }
        },
        "TestMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root_provider_fixtures": [
                    "str"
                ]
            }
        },
        "TestMetadata.test_folder_metadata_slash": {
            "name": "test_folder_metadata_slash",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root_provider_fixtures": [
                    "str"
                ]
            }
        },
        "TestMetadata.test_revision_metadata": {
            "name": "test_revision_metadata",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision_fixtures": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/googledrive/test_provider.py": {
        "file_content": {
            "name": "file_content",
            "location": 31,
            "return": [
                "bytes",
                "str",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "file_like": {
            "name": "file_like",
            "location": 36,
            "return": [
                "str",
                "bytes",
                "os.DirEntry"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 41,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "auth": {
            "name": "auth",
            "location": 46,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 54,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "other_credentials": {
            "name": "other_credentials",
            "location": 59,
            "return": [
                "str",
                "Dict[str, Any]",
                "Union[int, float]"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 64,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "provider": {
            "name": "provider",
            "location": 74,
            "return": [
                "str",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "other_provider": {
            "name": "other_provider",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "auth": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "other_credentials": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "search_for_file_response": {
            "name": "search_for_file_response",
            "location": 84,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "no_file_response": {
            "name": "no_file_response",
            "location": 93,
            "return": [
                "Dict[str, Any]",
                "str",
                "List[str]",
                "Container[str]",
                "int"
            ],
            "arguments": {}
        },
        "actual_file_response": {
            "name": "actual_file_response",
            "location": 100,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "type"
            ],
            "arguments": {}
        },
        "search_for_folder_response": {
            "name": "search_for_folder_response",
            "location": 109,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "no_folder_response": {
            "name": "no_folder_response",
            "location": 118,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Type",
                "list"
            ],
            "arguments": {}
        },
        "actual_folder_response": {
            "name": "actual_folder_response",
            "location": 125,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "make_unauthorized_file_access_error": {
            "name": "make_unauthorized_file_access_error",
            "location": 133,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "authorityspoke.io.schemas.RawFactor"
            ],
            "arguments": {
                "file_id": [
                    "str",
                    "int"
                ]
            }
        },
        "make_no_such_revision_error": {
            "name": "make_no_such_revision_error",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "revision_id": [
                    "int"
                ]
            }
        },
        "clean_query": {
            "name": "clean_query",
            "location": 172,
            "return": [
                "Callable[[KT], VT]",
                "str"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Union[os.PathLike, str]"
                ]
            }
        },
        "_build_title_search_query": {
            "name": "_build_title_search_query",
            "location": 178,
            "return": [
                "bool",
                "BaseException",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostName]"
                ],
                "entity_name": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostName]"
                ],
                "is_folder": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostName]"
                ]
            }
        },
        "generate_list": {
            "name": "generate_list",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "child_id": [
                    "str",
                    "int"
                ],
                "root_provider_fixtures": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestOperationsOrMisc.test_path_from_metadata": {
            "name": "test_path_from_metadata",
            "location": 1625,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "py.path.local",
                    "path.Path",
                    "tests.e2e.Helper"
                ],
                "root_provider_fixtures": []
            }
        }
    },
    "waterbutler-master/tests/providers/googledrive/__init__.py": {},
    "waterbutler-master/tests/providers/onedrive/fixtures.py": {
        "root_provider_fixtures": {
            "name": "root_provider_fixtures",
            "location": 7,
            "return": [
                "Callable[[Any], bool]",
                "str",
                "Dict[str, List[int]]",
                "Optional[float]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "subfolder_provider_fixtures": {
            "name": "subfolder_provider_fixtures",
            "location": 14,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "revision_fixtures": {
            "name": "revision_fixtures",
            "location": 21,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "download_fixtures": {
            "name": "download_fixtures",
            "location": 27,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "path_fixtures": {
            "name": "path_fixtures",
            "location": 33,
            "return": [
                "bytes",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "readwrite_fixtures": {
            "name": "readwrite_fixtures",
            "location": 39,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/onedrive/test_metadata.py": {
        "TestOneDriveMetadata.test_build_file_metadata": {
            "name": "test_build_file_metadata",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root_provider_fixtures": [
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "dict",
                    "FrozenSet[str]",
                    "src.pythonfinder.models.path.PathEntry",
                    "waterbutler.providers.bitbuckepath.BitbucketPath"
                ]
            }
        },
        "TestOneDriveMetadata.test_build_folder_metadata": {
            "name": "test_build_folder_metadata",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root_provider_fixtures": [
                    "str"
                ]
            }
        },
        "TestOneDriveMetadata.test_build_revision_metadata": {
            "name": "test_build_revision_metadata",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision_fixtures": [
                    "str",
                    "int",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/onedrive/test_path.py": {
        "TestNewFromResponseODPRootProvider.test_file_in_root": {
            "name": "test_file_in_root",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestNewFromResponseODPRootProvider.test_folder_in_root": {
            "name": "test_folder_in_root",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestNewFromResponseODPRootProvider.test_file_in_subdir": {
            "name": "test_file_in_subdir",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestNewFromResponseODPRootProvider.test_fails_without_base_folder_id": {
            "name": "test_fails_without_base_folder_id",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "List[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "TestNewFromResponseODPRootProvider.test_fails_with_wrong_base_folder_id": {
            "name": "test_fails_with_wrong_base_folder_id",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "List[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "TestNewFromResponseODPRootProvider.test_insert_zero_ids": {
            "name": "test_insert_zero_ids",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "Tuple[str]",
                    "str"
                ]
            }
        },
        "TestNewFromResponseOD4BRootProvider.test_file_in_root": {
            "name": "test_file_in_root",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestNewFromResponseOD4BRootProvider.test_folder_in_root": {
            "name": "test_folder_in_root",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestNewFromResponseOD4BRootProvider.test_file_in_subdir": {
            "name": "test_file_in_subdir",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestNewFromResponseOD4BRootProvider.test_fails_without_base_folder_id": {
            "name": "test_fails_without_base_folder_id",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "List[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "TestNewFromResponseOD4BRootProvider.test_fails_with_wrong_base_folder_id": {
            "name": "test_fails_with_wrong_base_folder_id",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "List[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "TestNewFromResponseOD4BRootProvider.test_insert_zero_ids": {
            "name": "test_insert_zero_ids",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "Tuple[str]",
                    "str"
                ]
            }
        },
        "TestNewFromResponseODPSubfolderProvider.test_file_in_root": {
            "name": "test_file_in_root",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestNewFromResponseODPSubfolderProvider.test_subfolder_base_is_folder": {
            "name": "test_subfolder_base_is_folder",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestNewFromResponseODPSubfolderProvider.test_file_in_subdir": {
            "name": "test_file_in_subdir",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestNewFromResponseOD4BSubfolderProvider.test_file_in_root": {
            "name": "test_file_in_root",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestNewFromResponseOD4BSubfolderProvider.test_subfolder_base_is_folder": {
            "name": "test_subfolder_base_is_folder",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestNewFromResponseOD4BSubfolderProvider.test_file_in_subdir": {
            "name": "test_file_in_subdir",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_fixtures": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/onedrive/test_provider.py": {
        "auth": {
            "name": "auth",
            "location": 25,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 33,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {}
        },
        "other_credentials": {
            "name": "other_credentials",
            "location": 38,
            "return": [
                "str",
                "float",
                "bytes"
            ],
            "arguments": {}
        },
        "subfolder_settings": {
            "name": "subfolder_settings",
            "location": 43,
            "return": [
                "cmk.utils.type_defs.HostName",
                "str",
                "int"
            ],
            "arguments": {
                "subfolder_provider_fixtures": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "subfolder_provider": {
            "name": "subfolder_provider",
            "location": 48,
            "return": [
                "str",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "subfolder_settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "root_settings": {
            "name": "root_settings",
            "location": 54,
            "return": [
                "dict",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "root_provider": {
            "name": "root_provider",
            "location": 59,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "auth": [
                    "str",
                    "Dict[str, Any]"
                ],
                "credentials": [
                    "str",
                    "Dict[str, Any]"
                ],
                "root_settings": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "provider": {
            "name": "provider",
            "location": 65,
            "return": [
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "root_provider": [
                    "Sequence[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "other_provider": {
            "name": "other_provider",
            "location": 70,
            "return": [
                "IO[str]",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "cmk.utils.type_defs.HostName",
                "bool",
                "str"
            ],
            "arguments": {
                "auth": [
                    "str"
                ],
                "other_credentials": [
                    "str"
                ],
                "root_settings": [
                    "str"
                ]
            }
        },
        "file_content": {
            "name": "file_content",
            "location": 75,
            "return": [
                "bytes",
                "str",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "file_like": {
            "name": "file_like",
            "location": 80,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 85,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "TestOperations.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 900,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "TestOperations.test_shares_storage_root": {
            "name": "test_shares_storage_root",
            "location": 903,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ],
                "other_provider": [
                    "Optional[str]",
                    "str",
                    "Tuple[str, str, str]",
                    "tests.e2e.Helper"
                ]
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 907,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Callable",
                    "str"
                ],
                "other_provider": [
                    "str"
                ]
            }
        },
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 911,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Callable",
                    "str"
                ],
                "other_provider": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/onedrive/__init__.py": {},
    "waterbutler-master/tests/providers/osfstorage/fixtures.py": {
        "auth": {
            "name": "auth",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 29,
            "return": [
                "str",
                "Mapping"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "settings_region_one": {
            "name": "settings_region_one",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "settings": [
                    "dict",
                    "Optional[Tuple[str, ...]]",
                    "List[float]",
                    "str"
                ]
            }
        },
        "settings_region_two": {
            "name": "settings_region_two",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "settings": [
                    "dict",
                    "Optional[Tuple[str, ...]]",
                    "List[float]",
                    "str"
                ]
            }
        },
        "mock_inner_provider": {
            "name": "mock_inner_provider",
            "location": 79,
            "return": [
                "str",
                "py.path.local",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "folder_children_metadata": {
            "name": "folder_children_metadata",
            "location": 94,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "download_response": {
            "name": "download_response",
            "location": 100,
            "return": [
                "Optional[str]",
                "List[str]",
                "dict",
                "Dict[str, str]",
                "Sequence[int]",
                "Dict[str, Union[int, str]]"
            ],
            "arguments": {}
        },
        "download_path": {
            "name": "download_path",
            "location": 106,
            "return": [
                "str",
                "path.ImportPath"
            ],
            "arguments": {
                "download_response": [
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "upload_response": {
            "name": "upload_response",
            "location": 112,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {}
        },
        "upload_path": {
            "name": "upload_path",
            "location": 118,
            "return": [
                "lightweighgeneration.path.GenPath",
                "path.ImportPath",
                "str"
            ],
            "arguments": {
                "upload_response": [
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str",
                    "cmk.utils.type_defs.HostKey"
                ]
            }
        },
        "folder_metadata": {
            "name": "folder_metadata",
            "location": 124,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "folder_lineage": {
            "name": "folder_lineage",
            "location": 130,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "folder_path": {
            "name": "folder_path",
            "location": 136,
            "return": [
                "str",
                "Optional[List[str]]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "folder_lineage": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "file_metadata": {
            "name": "file_metadata",
            "location": 143,
            "return": [
                "str",
                "List[List[str]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "file_lineage": {
            "name": "file_lineage",
            "location": 149,
            "return": [
                "str",
                "List[List[str]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "file_path": {
            "name": "file_path",
            "location": 155,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "file_lineage": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "revisions_metadata": {
            "name": "revisions_metadata",
            "location": 161,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "root_path": {
            "name": "root_path",
            "location": 167,
            "return": [
                "waterbutler.core.path.WaterButlerPath",
                "Optional[str]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "provider_one": [
                    "str",
                    "int",
                    "core.job.BaseJob",
                    "bytes"
                ]
            }
        },
        "file_metadata_object": {
            "name": "file_metadata_object",
            "location": 172,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "file_metadata": [
                    "str",
                    "waterbutler.core.path.WaterButlerPath",
                    "dict",
                    "Iterable[str]"
                ]
            }
        },
        "folder_metadata_object": {
            "name": "folder_metadata_object",
            "location": 178,
            "return": [
                "bytearray",
                "float",
                "str"
            ],
            "arguments": {
                "folder_metadata": [
                    "core.base.setup.Settings"
                ]
            }
        },
        "revision_metadata_object": {
            "name": "revision_metadata_object",
            "location": 184,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "str",
                "tuple"
            ],
            "arguments": {
                "revisions_metadata": [
                    "int",
                    "Callable[[Mapping], T]",
                    "str",
                    "List[List[str]]",
                    "tuple"
                ]
            }
        },
        "file_content": {
            "name": "file_content",
            "location": 189,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "file_like": {
            "name": "file_like",
            "location": 194,
            "return": [
                "str",
                "bytes",
                "os.DirEntry"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 199,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "provider_one": {
            "name": "provider_one",
            "location": 204,
            "return": [
                "str",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings_region_one": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "provider_two": {
            "name": "provider_two",
            "location": 209,
            "return": [
                "str",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings_region_two": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "provider_and_mock_one": {
            "name": "provider_and_mock_one",
            "location": 214,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[str]"
                ],
                "provider_one": [
                    "str",
                    "tests._TestServerFactory",
                    "bool",
                    "static_frame.core.util.DtypeSpecifier"
                ],
                "mock_inner_provider": [
                    "List[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "provider_and_mock_two": {
            "name": "provider_and_mock_two",
            "location": 222,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[str]"
                ],
                "provider_two": [
                    "str",
                    "tests._TestServerFactory",
                    "bool",
                    "static_frame.core.util.DtypeSpecifier"
                ],
                "mock_inner_provider": [
                    "List[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "mock_time": {
            "name": "mock_time",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "pymatgen.core.structure.Structure"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/osfstorage/test_exceptions.py": {
        "TestExceptionSerialization.test_tolerate_dumb_signature": {
            "name": "test_tolerate_dumb_signature",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exception_class": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/osfstorage/test_metadata.py": {
        "TestFileMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "file_metadata": [],
                "file_metadata_object": []
            }
        },
        "TestFileMetadata.test_file_metadata_modified_utc": {
            "name": "test_file_metadata_modified_utc",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "file_metadata_object": []
            }
        },
        "TestFileMetadata.test_file_metadata_created_utc": {
            "name": "test_file_metadata_created_utc",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "file_metadata_object": []
            }
        },
        "TestFolderMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "folder_metadata_object": []
            }
        },
        "TestRevisionMetadata.test_revision_metadata": {
            "name": "test_revision_metadata",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "revisions_metadata": [],
                "revision_metadata_object": []
            }
        }
    },
    "waterbutler-master/tests/providers/osfstorage/test_provider.py": {
        "build_signed_url_without_auth": {
            "name": "build_signed_url_without_auth",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "dict",
                    "OrderedDict",
                    "Callable",
                    "bytes"
                ],
                "method": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "build_signed_url_with_auth": {
            "name": "build_signed_url_with_auth",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "dict",
                    "OrderedDict",
                    "Callable"
                ],
                "method": [
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "TestUtils.test_is_same_region_true": {
            "name": "test_is_same_region_true",
            "location": 550,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_one": [
                    "tests.async_mock.Mock",
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "TestUtils.test_is_same_region_false": {
            "name": "test_is_same_region_false",
            "location": 553,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_one": [
                    "tests.async_mock.Mock",
                    "Dict[str, float]",
                    "str"
                ],
                "provider_two": [
                    "tests.async_mock.Mock",
                    "Dict[str, float]",
                    "str"
                ]
            }
        },
        "TestUtils.test_is_same_region_error": {
            "name": "test_is_same_region_error",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_one": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestUtils.test_can_intra_move_copy_true": {
            "name": "test_can_intra_move_copy_true",
            "location": 563,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_one": [
                    "dict",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestUtils.test_can_intra_move_copy_false_region_mismatch": {
            "name": "test_can_intra_move_copy_false_region_mismatch",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_one": [],
                "provider_two": []
            }
        },
        "TestUtils.test_can_intra_move_copy_false_class_mismatch": {
            "name": "test_can_intra_move_copy_false_class_mismatch",
            "location": 571,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_one": [
                    "int"
                ]
            }
        },
        "TestUtils.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 575,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_one": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestUploads.patch_uuid": {
            "name": "patch_uuid",
            "location": 778,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/osfstorage/__init__.py": {},
    "waterbutler-master/tests/providers/owncloud/fixtures.py": {
        "file_metadata_object": {
            "name": "file_metadata_object",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {}
        },
        "file_metadata_object_less_info": {
            "name": "file_metadata_object_less_info",
            "location": 23,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "folder_metadata_object": {
            "name": "folder_metadata_object",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "folder_metadata_object_less_info": {
            "name": "folder_metadata_object_less_info",
            "location": 42,
            "return": [
                "bool",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {}
        },
        "revision_metadata_object": {
            "name": "revision_metadata_object",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_metadata_object": [
                    "bool",
                    "Pattern[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "auth": {
            "name": "auth",
            "location": 55,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 63,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "credentials_2": {
            "name": "credentials_2",
            "location": 70,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "credentials_host_with_trailing_slash": {
            "name": "credentials_host_with_trailing_slash",
            "location": 77,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 84,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "provider": {
            "name": "provider",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "provider_different_credentials": {
            "name": "provider_different_credentials",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials_2": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "file_content": {
            "name": "file_content",
            "location": 99,
            "return": [
                "bytes",
                "str",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "moved_parent_folder_metadata": {
            "name": "moved_parent_folder_metadata",
            "location": 104,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "moved_folder_metadata": {
            "name": "moved_folder_metadata",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "folder_list": {
            "name": "folder_list",
            "location": 118,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {}
        },
        "folder_metadata": {
            "name": "folder_metadata",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "folder_contents_metadata": {
            "name": "folder_contents_metadata",
            "location": 130,
            "return": [
                "Callable[[bytes], None]",
                "str",
                "Iterable[str]",
                "bool",
                "Callable",
                "float"
            ],
            "arguments": {}
        },
        "file_metadata": {
            "name": "file_metadata",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "file_metadata_unparsable_response": {
            "name": "file_metadata_unparsable_response",
            "location": 143,
            "return": [
                "int",
                "str",
                "List[List[str]]"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/owncloud/test_metadata.py": {
        "TestFileMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_metadata_object": []
            }
        },
        "TestFileMetadata.test_file_metadata_less_info": {
            "name": "test_file_metadata_less_info",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_metadata_object_less_info": [
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "TestFolderMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder_metadata_object": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestFolderMetadata.test_folder_metadata_less_info": {
            "name": "test_folder_metadata_less_info",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder_metadata_object_less_info": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "TestRevisionMetadata.test_revision_metadata": {
            "name": "test_revision_metadata",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision_metadata_object": [
                    "Optional[str]"
                ]
            }
        },
        "TestRevisionMetadata.test_revision_from_metadata": {
            "name": "test_revision_from_metadata",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision_metadata_object": [
                    "cli_ui.tests.MessageRecorder"
                ],
                "file_metadata_object": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/owncloud/test_provider.py": {
        "file_like": {
            "name": "file_like",
            "location": 36,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 40,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "TestProviderConstruction.test_base_folder_no_slash": {
            "name": "test_base_folder_no_slash",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "List[blurr.core.record.Record]",
                    "antidote.providers.factory.FactoryProvider"
                ],
                "credentials": [
                    "List[blurr.core.record.Record]",
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        },
        "TestProviderConstruction.test_base_folder_with_slash": {
            "name": "test_base_folder_with_slash",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "List[blurr.core.record.Record]",
                    "antidote.providers.factory.FactoryProvider"
                ],
                "credentials": [
                    "List[blurr.core.record.Record]",
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        },
        "TestProviderConstruction.test_webdav_url_trailing_slash": {
            "name": "test_webdav_url_trailing_slash",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "str",
                    "antidote.providers.factory.FactoryProvider"
                ],
                "credentials_host_with_trailing_slash": [
                    "str",
                    "antidote.providers.factory.FactoryProvider"
                ],
                "provider": [
                    "int"
                ]
            }
        },
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "provider_different_credentials": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "provider_different_credentials": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestOperations.test_shares_storage_root": {
            "name": "test_shares_storage_root",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "pypi2nix.path.Path"
                ],
                "provider_different_credentials": [
                    "str",
                    "py.path.local"
                ]
            }
        },
        "TestOperations.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/owncloud/__init__.py": {},
    "waterbutler-master/tests/providers/s3/fixtures.py": {
        "auth": {
            "name": "auth",
            "location": 15,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "credentials": {
            "name": "credentials",
            "location": 23,
            "return": [
                "Dict[str, str]",
                "Dict[str, List[int]]",
                "Mapping",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 31,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "file_content": {
            "name": "file_content",
            "location": 39,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "folder_metadata": {
            "name": "folder_metadata",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "folder_single_item_metadata": {
            "name": "folder_single_item_metadata",
            "location": 50,
            "return": [
                "int",
                "float",
                "Iterable[Iterable[T]]",
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {}
        },
        "folder_item_metadata": {
            "name": "folder_item_metadata",
            "location": 57,
            "return": [
                "bool",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {}
        },
        "folder_and_contents": {
            "name": "folder_and_contents",
            "location": 64,
            "return": [
                "int",
                "bool",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "version_metadata": {
            "name": "version_metadata",
            "location": 71,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {}
        },
        "single_version_metadata": {
            "name": "single_version_metadata",
            "location": 78,
            "return": [
                "int",
                "list",
                "bytes",
                "List[str]"
            ],
            "arguments": {}
        },
        "folder_empty_metadata": {
            "name": "folder_empty_metadata",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "file_header_metadata": {
            "name": "file_header_metadata",
            "location": 92,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "file_metadata_headers_object": {
            "name": "file_metadata_headers_object",
            "location": 103,
            "return": [
                "str",
                "Optional[bool]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "file_header_metadata": [
                    "int",
                    "bytes"
                ]
            }
        },
        "file_metadata_object": {
            "name": "file_metadata_object",
            "location": 108,
            "return": [
                "str",
                "Union[str, TextIO]"
            ],
            "arguments": {}
        },
        "folder_key_metadata_object": {
            "name": "folder_key_metadata_object",
            "location": 119,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Iterable[str]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "folder_metadata_object": {
            "name": "folder_metadata_object",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "revision_metadata_object": {
            "name": "revision_metadata_object",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_session_resp": {
            "name": "create_session_resp",
            "location": 155,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "generic_http_404_resp": {
            "name": "generic_http_404_resp",
            "location": 162,
            "return": [
                "str",
                "int",
                "Sequence[float]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "generic_http_403_resp": {
            "name": "generic_http_403_resp",
            "location": 169,
            "return": [
                "str",
                "int",
                "Sequence[float]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "list_parts_resp_empty": {
            "name": "list_parts_resp_empty",
            "location": 176,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "list_parts_resp_not_empty": {
            "name": "list_parts_resp_not_empty",
            "location": 183,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "complete_upload_resp": {
            "name": "complete_upload_resp",
            "location": 190,
            "return": [
                "str",
                "Tuple[int, int, int]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "upload_parts_headers_list": {
            "name": "upload_parts_headers_list",
            "location": 197,
            "return": [
                "str",
                "list",
                "List[str]",
                "bytes",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/providers/s3/test_metadata.py": {
        "TestFileMetadataHeaders.test_file_metadata_headers": {
            "name": "test_file_metadata_headers",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_metadata_headers_object": [
                    "str",
                    "IO[Any]",
                    "List[str]"
                ],
                "file_header_metadata": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestFileMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_metadata_object": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestFolderMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder_metadata_object": [
                    "Union[int, float]",
                    "Sequence[Union[int, float]]"
                ]
            }
        },
        "TestFolderKeyMetadata.test_folder_key_metadata": {
            "name": "test_folder_key_metadata",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder_key_metadata_object": [
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "TestRevisionsMetadata.test_revisions_metadata": {
            "name": "test_revisions_metadata",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision_metadata_object": [
                    "Optional[str]"
                ]
            }
        },
        "TestRevisionsMetadata.test_revisions_metadata_not_lastest": {
            "name": "test_revisions_metadata_not_lastest",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "revision_metadata_object": [
                    "Union[int, float]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/s3/test_provider.py": {
        "mock_time": {
            "name": "mock_time",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "pymatgen.core.structure.Structure"
                ]
            }
        },
        "provider": {
            "name": "provider",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "auth": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ],
                "settings": [
                    "\"Step\"",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "file_like": {
            "name": "file_like",
            "location": 64,
            "return": [
                "str",
                "bytes",
                "os.DirEntry"
            ],
            "arguments": {
                "file_content": [
                    "dict",
                    "IO[str]",
                    "backuppy.io.IOIter",
                    "str"
                ]
            }
        },
        "file_stream": {
            "name": "file_stream",
            "location": 69,
            "return": [
                "str",
                "List[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "file_like": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ]
            }
        },
        "location_response": {
            "name": "location_response",
            "location": 73,
            "return": [
                "str",
                "Dict[str, Any]",
                "waterbutler.core.path.WaterButlerPath"
            ],
            "arguments": {
                "location": [
                    "str",
                    "Optional[List]",
                    "dict",
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "list_objects_response": {
            "name": "list_objects_response",
            "location": 81,
            "return": [
                "dict",
                "Optional[str]",
                "Dict[str, Any]",
                "List[dict]"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "VT",
                    "int",
                    "List[str]"
                ],
                "truncated": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "bulk_delete_body": {
            "name": "bulk_delete_body",
            "location": 100,
            "return": [
                "int",
                "Optional[Dict[str, Any]]",
                "dict",
                "Dict[str, str]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "VT"
                ]
            }
        },
        "list_upload_chunks_body": {
            "name": "list_upload_chunks_body",
            "location": 120,
            "return": [
                "Dict[str, Union[str, int]]",
                "Dict[str, str]",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]"
            ],
            "arguments": {
                "parts_metadata": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "build_folder_params": {
            "name": "build_folder_params",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 1331,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "bool"
                ]
            }
        },
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 1340,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "bool"
                ]
            }
        },
        "TestOperations.test_can_duplicate_names": {
            "name": "test_can_duplicate_names",
            "location": 1349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int"
                ]
            }
        }
    },
    "waterbutler-master/tests/providers/s3/__init__.py": {},
    "waterbutler-master/tests/server/test_utils.py": {
        "MockHandler.set_header": {
            "name": "set_header",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bytes",
                    "int"
                ],
                "cookies": [
                    "str",
                    "bytes",
                    "int"
                ],
                "headers": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestCORsMixin.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORsMixin.test_set_default_headers_options": {
            "name": "test_set_default_headers_options",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORsMixin.test_set_default_headers_options_no_cookie_but_auth_header": {
            "name": "test_set_default_headers_options_no_cookie_but_auth_header",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORsMixin.test_set_default_headers_options_has_cookie_and_auth_header": {
            "name": "test_set_default_headers_options_has_cookie_and_auth_header",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORsMixin.test_set_default_headers_options_has_cookie_no_auth_header": {
            "name": "test_set_default_headers_options_has_cookie_no_auth_header",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORsMixin.test_set_default_headers_cross_origin_with_cookie": {
            "name": "test_set_default_headers_cross_origin_with_cookie",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORsMixin.test_set_default_headers_cross_origin_no_cookie_no_auth_header": {
            "name": "test_set_default_headers_cross_origin_no_cookie_no_auth_header",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORsMixin.test_set_default_headers_cross_origin_has_cookie_and_auth_header": {
            "name": "test_set_default_headers_cross_origin_has_cookie_and_auth_header",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORsMixin.test_set_default_headers_cross_origin_no_cookie_but_auth_header": {
            "name": "test_set_default_headers_cross_origin_no_cookie_but_auth_header",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCORsMixin.test_no_origin_means_no_cors": {
            "name": "test_no_origin_means_no_cors",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRangeParsing.test_range_parsing": {
            "name": "test_range_parsing",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "range_header": [
                    "List[str]",
                    "Type[T]"
                ],
                "expected": [
                    "int"
                ]
            }
        }
    },
    "waterbutler-master/tests/server/__init__.py": {},
    "waterbutler-master/tests/server/api/v0/test_copy.py": {
        "TestCopyHandler.test_calls_copy": {
            "name": "test_calls_copy",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopyHandler.test_conflict": {
            "name": "test_conflict",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopyHandler.test_rename": {
            "name": "test_rename",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopyHandler.test_intra_makes_callback": {
            "name": "test_intra_makes_callback",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/server/api/v0/test_crud.py": {
        "TestCrudHandler.test_download_redirect": {
            "name": "test_download_redirect",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_download_stream": {
            "name": "test_download_stream",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_download_stream_range": {
            "name": "test_download_stream_range",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_download_content_type_switches": {
            "name": "test_download_content_type_switches",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_download_content_type_does_not_switch": {
            "name": "test_download_content_type_does_not_switch",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_download_accept_url_false": {
            "name": "test_download_accept_url_false",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_download_accept_url_default": {
            "name": "test_download_accept_url_default",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_download_accept_url_true": {
            "name": "test_download_accept_url_true",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_download_accept_url_invalid": {
            "name": "test_download_accept_url_invalid",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_download_not_found": {
            "name": "test_download_not_found",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_upload": {
            "name": "test_upload",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_delete": {
            "name": "test_delete",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrudHandler.test_create_folder": {
            "name": "test_create_folder",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/server/api/v0/test_move.py": {
        "TestMoveHandler.test_calls_move": {
            "name": "test_calls_move",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveHandler.test_conflict": {
            "name": "test_conflict",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveHandler.test_rename": {
            "name": "test_rename",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveHandler.test_intra_makes_callback": {
            "name": "test_intra_makes_callback",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/server/api/v0/test_revisions.py": {
        "TestRevisionHandler.test_get_coro": {
            "name": "test_get_coro",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRevisionHandler.test_get_not_coro": {
            "name": "test_get_not_coro",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRevisionHandler.test_get_empty": {
            "name": "test_get_empty",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/server/api/v0/test_status.py": {
        "TestStatusHandler.test_get_coro": {
            "name": "test_get_coro",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/server/api/v0/test_zip.py": {
        "TestZipHandler.test_download_stream": {
            "name": "test_download_stream",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/server/api/v0/__init__.py": {},
    "waterbutler-master/tests/server/api/v1/fixtures.py": {
        "http_request": {
            "name": "http_request",
            "location": 20,
            "return": [
                "str",
                "Dict[str, Sequence[Any]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "mock_stream": {
            "name": "mock_stream",
            "location": 34,
            "return": [
                "str",
                "py.path.local",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "mock_partial_stream": {
            "name": "mock_partial_stream",
            "location": 39,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "mock_file_metadata": {
            "name": "mock_file_metadata",
            "location": 47,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "mock_folder_metadata": {
            "name": "mock_folder_metadata",
            "location": 52,
            "return": [
                "str",
                "py.path.local",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "mock_revision_metadata": {
            "name": "mock_revision_metadata",
            "location": 57,
            "return": [
                "str",
                "dict",
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "mock_folder_children": {
            "name": "mock_folder_children",
            "location": 62,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "patch_auth_handler": {
            "name": "patch_auth_handler",
            "location": 67,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "aiohttp.web.Request",
                "str",
                "List[str]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "handler_auth": [
                    "str",
                    "bool",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "patch_make_provider_move_copy": {
            "name": "patch_make_provider_move_copy",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "patch_make_provider_core": {
            "name": "patch_make_provider_core",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "mock_intra": {
            "name": "mock_intra",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ],
                "request": [
                    "aiohttp.web.Request",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "mock_inter": {
            "name": "mock_inter",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "purplship.core.utils.Element",
                    "utils.clienClient"
                ],
                "request": [
                    "aiohttp.web.Request",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "mock_exc_info": {
            "name": "mock_exc_info",
            "location": 132,
            "return": [
                "str",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {}
        },
        "mock_exc_info_http": {
            "name": "mock_exc_info_http",
            "location": 140,
            "return": [
                "str",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {}
        },
        "mock_exc_info_202": {
            "name": "mock_exc_info_202",
            "location": 148,
            "return": [
                "str",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {}
        },
        "move_copy_args": {
            "name": "move_copy_args",
            "location": 156,
            "return": [
                "str",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "celery_src_copy_params": {
            "name": "celery_src_copy_params",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "celery_dest_copy_params": {
            "name": "celery_dest_copy_params",
            "location": 195,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "celery_dest_copy_params_root": {
            "name": "celery_dest_copy_params_root",
            "location": 209,
            "return": [
                "str",
                "bob_emploi.frontend.server.scoring_base.ScoringProject",
                "bool"
            ],
            "arguments": {}
        },
        "handler_auth": {
            "name": "handler_auth",
            "location": 223,
            "return": [
                "str",
                "bool",
                "dict",
                "bytes"
            ],
            "arguments": {}
        },
        "serialized_metadata": {
            "name": "serialized_metadata",
            "location": 229,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "serialized_request": {
            "name": "serialized_request",
            "location": 235,
            "return": [
                "Optional[str]",
                "List[str]",
                "str",
                "dict",
                "List[utils.models.Base]",
                "List[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/tests/server/api/v1/test_core.py": {
        "TestBaseHandler.test_write_error": {
            "name": "test_write_error",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "http_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_exc_info": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests._TestServerFactory"
                ]
            }
        },
        "TestBaseHandler.test_write_error_202": {
            "name": "test_write_error_202",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "http_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_exc_info_202": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests._TestServerFactory"
                ]
            }
        },
        "TestBaseHandler.test_log_exception_uncaught": {
            "name": "test_log_exception_uncaught",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_error": [],
                "http_request": [],
                "mock_exc_info": []
            }
        },
        "TestBaseHandler.test_log_exception_http_error": {
            "name": "test_log_exception_http_error",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_warning": [
                    "mock.Mock"
                ],
                "http_request": [
                    "mock.MagicMock"
                ],
                "mock_exc_info_http": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "waterbutler-master/tests/server/api/v1/test_create_mixin.py": {
        "TestValidatePut.test_invalid_kind": {
            "name": "test_invalid_kind",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "http_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "TestValidatePut.test_default_kind": {
            "name": "test_default_kind",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "http_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestValidatePut.test_length_required_for_files": {
            "name": "test_length_required_for_files",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "http_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "TestValidatePut.test_payload_with_folder": {
            "name": "test_payload_with_folder",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "http_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        },
        "TestValidatePut.test_payload_with_invalid_content_length": {
            "name": "test_payload_with_invalid_content_length",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "http_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        }
    },
    "waterbutler-master/tests/server/api/v1/test_fuzzing.py": {
        "TestServerFuzzing.test_head_no_auth_server": {
            "name": "test_head_no_auth_server",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFuzzing.test_movecopy_requires_contentlength": {
            "name": "test_movecopy_requires_contentlength",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFuzzing.test_large_body_copy_rejected": {
            "name": "test_large_body_copy_rejected",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFuzzing.test_options": {
            "name": "test_options",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFuzzingMocks.setUp": {
            "name": "setUp",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFuzzingMocks.tearDown": {
            "name": "tearDown",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFuzzingMocks.test_head": {
            "name": "test_head",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFuzzingMocks.test_head_with_folder": {
            "name": "test_head_with_folder",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerFuzzing.test_large_body_copy_rejected.body_producer": {
            "name": "body_producer",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "write": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "waterbutler-master/tests/server/api/v1/test_metadata_mixin.py": {},
    "waterbutler-master/tests/server/api/v1/test_movecopy.py": {
        "TestMoveOrCopy.test_build_args": {
            "name": "test_build_args",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "http_request": [
                    "str"
                ],
                "move_copy_args": [
                    "str",
                    "bool",
                    "cmk.utils.type_defs.TagGroups"
                ]
            }
        }
    },
    "waterbutler-master/tests/server/api/v1/test_provider.py": {
        "TestUtils.test_list_or_value": {
            "name": "test_list_or_value",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/server/api/v1/utils.py": {
        "mock_handler": {
            "name": "mock_handler",
            "location": 34,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "http_request": [
                    "Optional[Dict]"
                ]
            }
        },
        "ServerTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.get_url": {
            "name": "get_url",
            "location": 27,
            "return": [
                "str",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ServerTestCase.get_app": {
            "name": "get_app",
            "location": 30,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/tests/tasks/conftest.py": {
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "pytest_runtest_teardown": {
            "name": "pytest_runtest_teardown",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "log_to_keen": {
            "name": "log_to_keen",
            "location": 32,
            "return": [
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "monkeypatch": [
                    "bytes",
                    "Tuple[bytes]",
                    "TextIO",
                    "T"
                ]
            }
        },
        "callback": {
            "name": "callback",
            "location": 39,
            "return": [
                "float",
                "Optional[Exception]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "asyncio.StreamWriter",
                    "dict",
                    "Callable[[T], bool]"
                ]
            }
        },
        "FAKE_TIME": {
            "name": "FAKE_TIME",
            "location": 46,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "mock_time": {
            "name": "mock_time",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Union[str, int]",
                    "str"
                ],
                "FAKE_TIME": []
            }
        },
        "src_path": {
            "name": "src_path",
            "location": 57,
            "return": [
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {}
        },
        "dest_path": {
            "name": "dest_path",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "src_bundle": {
            "name": "src_bundle",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "src_path": [
                    "Union[str, bytes, int]",
                    "bool",
                    "waterbutler.core.path.WaterButlerPath",
                    "str"
                ]
            }
        },
        "dest_bundle": {
            "name": "dest_bundle",
            "location": 83,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Dict[str, Any]",
                "Tuple[str]"
            ],
            "arguments": {
                "dest_path": [
                    "str",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "bundles": {
            "name": "bundles",
            "location": 99,
            "return": [
                "bool",
                "int",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "src_bundle": [
                    "str",
                    "int",
                    "raiden.utils.BlockNumber",
                    "Dict[str, bool]"
                ],
                "dest_bundle": [
                    "str",
                    "int",
                    "raiden.utils.BlockNumber",
                    "Dict[str, bool]"
                ]
            }
        }
    },
    "waterbutler-master/tests/tasks/test_copy.py": {
        "patch_backend": {
            "name": "patch_backend",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "src_provider": {
            "name": "src_provider",
            "location": 25,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "dest_provider": {
            "name": "dest_provider",
            "location": 33,
            "return": [
                "float",
                "T",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "providers": {
            "name": "providers",
            "location": 41,
            "return": [
                "bool",
                "int",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "Tuple[int, int]",
                    "bool",
                    "float",
                    "str",
                    "bytearray"
                ],
                "src_provider": [
                    "int",
                    "str",
                    "bool"
                ],
                "dest_provider": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_copy_calls_copy": {
            "name": "test_copy_calls_copy",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "providers": [],
                "bundles": [
                    "str"
                ],
                "callback": [
                    "str"
                ]
            }
        },
        "test_is_task": {
            "name": "test_is_task",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_imputes_exceptions": {
            "name": "test_imputes_exceptions",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "providers": [
                    "Dict[str, Sequence[str]]"
                ],
                "bundles": [
                    "str"
                ],
                "callback": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_return_values": {
            "name": "test_return_values",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "providers": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "bundles": [
                    "str",
                    "bool",
                    "int"
                ],
                "callback": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "waterbutler.core.streams.BaseStream"
                ],
                "src_path": [
                    "str"
                ],
                "dest_path": [
                    "List[int]",
                    "str",
                    "Dict[str, Any]"
                ],
                "mock_time": [
                    "List[int]",
                    "str",
                    "Dict[str, Any]"
                ],
                "FAKE_TIME": [
                    "str",
                    "int"
                ]
            }
        },
        "test_starttime_override": {
            "name": "test_starttime_override",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "providers": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "bundles": [
                    "str",
                    "bool"
                ],
                "callback": [
                    "dict",
                    "Union[int, str]",
                    "int",
                    "str",
                    "bool",
                    "List[Tuple[str, Any]]"
                ],
                "mock_time": [
                    "bool",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]",
                    "int",
                    "str"
                ],
                "FAKE_TIME": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "providers.make_provider": {
            "name": "make_provider",
            "location": 42,
            "return": [
                "bool",
                "int",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "waterbutler-master/tests/tasks/test_move.py": {
        "patch_backend": {
            "name": "patch_backend",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "src_provider": {
            "name": "src_provider",
            "location": 25,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "dest_provider": {
            "name": "dest_provider",
            "location": 33,
            "return": [
                "float",
                "T",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "providers": {
            "name": "providers",
            "location": 41,
            "return": [
                "bool",
                "int",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "dict",
                    "Sequence[str]",
                    "bool",
                    "bytes",
                    "int"
                ],
                "src_provider": [
                    "int",
                    "str",
                    "bool"
                ],
                "dest_provider": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_move_calls_move": {
            "name": "test_move_calls_move",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "providers": [],
                "bundles": [
                    "str"
                ],
                "callback": [
                    "str"
                ]
            }
        },
        "test_is_task": {
            "name": "test_is_task",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_imputes_exceptions": {
            "name": "test_imputes_exceptions",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "providers": [
                    "Dict[str, Sequence[str]]"
                ],
                "bundles": [
                    "str"
                ],
                "callback": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_return_values": {
            "name": "test_return_values",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "providers": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "bundles": [
                    "str",
                    "bool",
                    "int"
                ],
                "callback": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "waterbutler.core.streams.BaseStream"
                ],
                "src_path": [
                    "str"
                ],
                "dest_path": [
                    "List[int]",
                    "str",
                    "Dict[str, Any]"
                ],
                "mock_time": [
                    "List[int]",
                    "str",
                    "Dict[str, Any]"
                ],
                "FAKE_TIME": [
                    "str",
                    "int"
                ]
            }
        },
        "test_starttime_override": {
            "name": "test_starttime_override",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "providers": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "bundles": [
                    "str",
                    "bool"
                ],
                "callback": [
                    "dict",
                    "Union[int, str]",
                    "int",
                    "str",
                    "bool",
                    "List[Tuple[str, Any]]"
                ],
                "mock_time": [
                    "bool",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]",
                    "int",
                    "str"
                ],
                "FAKE_TIME": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "providers.make_provider": {
            "name": "make_provider",
            "location": 42,
            "return": [
                "bool",
                "int",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/constants.py": {},
    "waterbutler-master/waterbutler/settings.py": {
        "child": {
            "name": "child",
            "location": 153,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "SettingsDict.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsDict.get": {
            "name": "get",
            "location": 41,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "SettingsDict.get_bool": {
            "name": "get_bool",
            "location": 49,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "int"
                ],
                "default": [
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "SettingsDict.get_nullable": {
            "name": "get_nullable",
            "location": 66,
            "return": [
                "Optional[List[Any]]",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "SettingsDict.get_object": {
            "name": "get_object",
            "location": 72,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "SettingsDict.full_key": {
            "name": "full_key",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "SettingsDict.child": {
            "name": "child",
            "location": 85,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/sizes.py": {},
    "waterbutler-master/waterbutler/version.py": {},
    "waterbutler-master/waterbutler/__init__.py": {},
    "waterbutler-master/waterbutler/auth/__init__.py": {},
    "waterbutler-master/waterbutler/auth/osf/handler.py": {
        "OsfAuthHandler.build_payload": {
            "name": "build_payload",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "BaseException",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "str",
                    "dict"
                ],
                "view_only": [
                    "bool"
                ],
                "cookie": [
                    "bool"
                ]
            }
        },
        "OsfAuthHandler._determine_actions": {
            "name": "_determine_actions",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "bool",
                    "Tuple[str]",
                    "str"
                ],
                "provider": [
                    "bool",
                    "Tuple[str]",
                    "str"
                ],
                "request": [
                    "dict",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ],
                "action": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "auth_type": [
                    "dict",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "path": [
                    "bool",
                    "str",
                    "list"
                ],
                "version": [
                    "bool",
                    "Tuple[str]",
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/auth/osf/settings.py": {},
    "waterbutler-master/waterbutler/auth/osf/__init__.py": {},
    "waterbutler-master/waterbutler/core/auth.py": {},
    "waterbutler-master/waterbutler/core/exceptions.py": {
        "WaterButlerError.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[Mapping[str, str]]",
                    "Mapping",
                    "dict",
                    "Optional[str]",
                    "Optional[int]",
                    "Mapping[str, Any]"
                ],
                "code": [
                    "bool",
                    "Optional[bool]"
                ],
                "log_message": [
                    "str",
                    "Type[object]"
                ],
                "is_user_error": [
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Iterable[bytes]"
                ]
            }
        },
        "WaterButlerError.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerError.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TooManyRequests.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Optional[Dict]",
                    "Union[None, Dict[str, Any], List[Any]]"
                ]
            }
        },
        "WaterButlerRedisError.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "redis_command": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "InvalidParameters.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "code": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "UnsupportedHTTPMethodError.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int"
                ],
                "supported": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "UnsupportedActionError.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "int"
                ],
                "supported": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "FolderNamingConflict.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "NamingConflict.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ],
                "extant": [
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ]
            }
        },
        "ProviderNotFound.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "UploadChecksumMismatchError.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Sequence]",
                    "Dict[str, str]"
                ],
                "code": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "UploadFailedError.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Sequence]",
                    "Dict[str, str]"
                ],
                "code": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "NotFoundError.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "code": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "is_user_error": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "InvalidPathError.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "bool",
                    "Callable"
                ],
                "code": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "bool",
                    "Callable"
                ],
                "is_user_error": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "bool",
                    "Callable"
                ]
            }
        },
        "OverwriteSelfError.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "UnsupportedOperationError.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "bool",
                    "Callable"
                ],
                "code": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "bool",
                    "Callable"
                ],
                "is_user_error": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ReadOnlyProviderError.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "Optional[int]"
                ],
                "code": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "UninitializedRepositoryError.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repo_name": [
                    "str",
                    "dict",
                    "Optional[int]"
                ],
                "is_user_error": [
                    "str",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "UnexportableFileTypeError.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "str",
                    "Dict[str, int]"
                ],
                "message": [
                    "str",
                    "Optional[str]"
                ],
                "is_user_error": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[float]"
                ]
            }
        },
        "InvalidProviderConfigError.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_name": [
                    "str"
                ],
                "message": [
                    "str",
                    "Optional[List[str]]",
                    "Type['Declared']",
                    "Optional[object]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/core/logging.py": {
        "MaskFormatter.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "int",
                    "bool"
                ],
                "datefmt": [
                    "str",
                    "int",
                    "bool"
                ],
                "style": [
                    "str",
                    "int",
                    "bool"
                ],
                "pattern": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "mask": [
                    "str",
                    "bool",
                    "Sequence"
                ]
            }
        },
        "MaskFormatter.format": {
            "name": "format",
            "location": 12,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/core/log_payload.py": {
        "LogPayload.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Iterator[int]",
                    "List[float]",
                    "str",
                    "int",
                    "Tuple[int]"
                ],
                "provider": [
                    "Iterator[int]",
                    "List[float]",
                    "str",
                    "int",
                    "Tuple[int]"
                ],
                "metadata": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Set[int]]"
                ]
            }
        },
        "LogPayload.serialize": {
            "name": "serialize",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogPayload.auth": {
            "name": "auth",
            "location": 61,
            "return": [
                "str",
                "bytes",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/core/metadata.py": {
        "BaseMetadata.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseMetadata.serialized": {
            "name": "serialized",
            "location": 33,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.json_api_serialized": {
            "name": "json_api_serialized",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "bool",
                    "str",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "BaseMetadata._json_api_links": {
            "name": "_json_api_links",
            "location": 74,
            "return": [
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "BaseMetadata._entity_url": {
            "name": "_entity_url",
            "location": 88,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "float",
                    "bool",
                    "Callable[[None], bool]"
                ]
            }
        },
        "BaseMetadata.build_path": {
            "name": "build_path",
            "location": 101,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BaseMetadata.is_folder": {
            "name": "is_folder",
            "location": 109,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.is_file": {
            "name": "is_file",
            "location": 117,
            "return": [
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.provider": {
            "name": "provider",
            "location": 126,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.kind": {
            "name": "kind",
            "location": 132,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.name": {
            "name": "name",
            "location": 138,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.path": {
            "name": "path",
            "location": 149,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.etag": {
            "name": "etag",
            "location": 163,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.materialized_path": {
            "name": "materialized_path",
            "location": 167,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.extra": {
            "name": "extra",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.__eq__": {
            "name": "__eq__",
            "location": 200,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[..., None]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BaseFileMetadata.serialized": {
            "name": "serialized",
            "location": 210,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Dict[str, int]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileMetadata._json_api_links": {
            "name": "_json_api_links",
            "location": 224,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Callable",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "BaseFileMetadata.kind": {
            "name": "kind",
            "location": 234,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileMetadata.content_type": {
            "name": "content_type",
            "location": 240,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileMetadata.modified": {
            "name": "modified",
            "location": 246,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileMetadata.modified_utc": {
            "name": "modified_utc",
            "location": 252,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 258,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileMetadata.size": {
            "name": "size",
            "location": 265,
            "return": [
                "typing.Union[builtins.int, builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileMetadata.size_as_int": {
            "name": "size_as_int",
            "location": 273,
            "return": [
                "List[int]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileRevisionMetadata.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseFileRevisionMetadata.serialized": {
            "name": "serialized",
            "location": 289,
            "return": [
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "type",
                "List[dict]",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileRevisionMetadata.json_api_serialized": {
            "name": "json_api_serialized",
            "location": 298,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileRevisionMetadata.modified": {
            "name": "modified",
            "location": 313,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileRevisionMetadata.modified_utc": {
            "name": "modified_utc",
            "location": 317,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileRevisionMetadata.version": {
            "name": "version",
            "location": 324,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileRevisionMetadata.version_identifier": {
            "name": "version_identifier",
            "location": 329,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileRevisionMetadata.extra": {
            "name": "extra",
            "location": 333,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileRevisionMetadata.__eq__": {
            "name": "__eq__",
            "location": 336,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[..., None]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BaseFolderMetadata.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BaseFolderMetadata.serialized": {
            "name": "serialized",
            "location": 352,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFolderMetadata.json_api_serialized": {
            "name": "json_api_serialized",
            "location": 364,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Union[str, int]",
                    "BaseException"
                ]
            }
        },
        "BaseFolderMetadata._json_api_links": {
            "name": "_json_api_links",
            "location": 375,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Callable",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "BaseFolderMetadata.children": {
            "name": "children",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kids": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseFolderMetadata.kind": {
            "name": "kind",
            "location": 403,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFolderMetadata.etag": {
            "name": "etag",
            "location": 408,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/core/metrics.py": {
        "_merge_dicts": {
            "name": "_merge_dicts",
            "location": 4,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, 'LabwareDefinition']",
                    "Set[str]"
                ],
                "b": [
                    "str",
                    "dict",
                    "Dict[str, 'LabwareDefinition']",
                    "Optional[str]",
                    "List[str]",
                    "Set[str]"
                ],
                "path": [
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "MetricsBase.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsBase.key": {
            "name": "key",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsBase.add": {
            "name": "add",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "MetricsBase.incr": {
            "name": "incr",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "MetricsBase.append": {
            "name": "append",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "new_value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MetricsBase.merge": {
            "name": "merge",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MetricsBase.serialize": {
            "name": "serialize",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsBase.manifesto": {
            "name": "manifesto",
            "location": 92,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsBase._get_dotted_key": {
            "name": "_get_dotted_key",
            "location": 99,
            "return": [
                "Optional[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "AnyStr"
                ]
            }
        },
        "MetricsBase._set_dotted_key": {
            "name": "_set_dotted_key",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "store": [
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "bytes",
                    "KT",
                    "int"
                ]
            }
        },
        "MetricsRecord.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "category": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MetricsRecord.key": {
            "name": "key",
            "location": 141,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsRecord.serialize": {
            "name": "serialize",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsRecord.new_subrecord": {
            "name": "new_subrecord",
            "location": 154,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "MetricsSubRecord.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "category": [
                    "Sequence[int]",
                    "bool",
                    "float"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "MetricsSubRecord.key": {
            "name": "key",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsSubRecord.new_subrecord": {
            "name": "new_subrecord",
            "location": 177,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/core/path.py": {
        "WaterButlerPathPart.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "part": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "WaterButlerPathPart.identifier": {
            "name": "identifier",
            "location": 31,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPathPart.value": {
            "name": "value",
            "location": 35,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPathPart.raw": {
            "name": "raw",
            "location": 41,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPathPart.original_value": {
            "name": "original_value",
            "location": 46,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPathPart.original_raw": {
            "name": "original_raw",
            "location": 50,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPathPart.ext": {
            "name": "ext",
            "location": 54,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "Deque[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPathPart.increment_name": {
            "name": "increment_name",
            "location": 57,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "_id": [
                    "str",
                    "int"
                ]
            }
        },
        "WaterButlerPathPart.renamed": {
            "name": "renamed",
            "location": 62,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "WaterButlerPathPart.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.generic_path_validation": {
            "name": "generic_path_validation",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "WaterButlerPath.validate_folder": {
            "name": "validate_folder",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "WaterButlerPath.from_parts": {
            "name": "from_parts",
            "location": 133,
            "return": [
                "Dict[str, float]",
                "tartare.core.contexContributorExportContext",
                "dict",
                "str",
                "bytes",
                "tartare.core.models.DataSource"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "dict",
                    "Mapping"
                ],
                "parts": [
                    "str"
                ],
                "folder": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "WaterButlerPath.from_metadata": {
            "name": "from_metadata",
            "location": 149,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "path_metadata": [
                    "str",
                    "Optional[str]",
                    "Literal"
                ]
            }
        },
        "WaterButlerPath.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "_ids": [
                    "Optional[str]",
                    "Sequence",
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "prepend": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "folder": [
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "WaterButlerPath.is_root": {
            "name": "is_root",
            "location": 187,
            "return": [
                "str",
                "bool",
                "IO",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.is_dir": {
            "name": "is_dir",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.is_folder": {
            "name": "is_folder",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.is_file": {
            "name": "is_file",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.kind": {
            "name": "kind",
            "location": 206,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.parts": {
            "name": "parts",
            "location": 211,
            "return": [
                "list",
                "str",
                "List[List[str]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.name": {
            "name": "name",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.identifier": {
            "name": "identifier",
            "location": 221,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.identifier_path": {
            "name": "identifier_path",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.ext": {
            "name": "ext",
            "location": 235,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.path": {
            "name": "path",
            "location": 240,
            "return": [
                "List[str]",
                "Optional[dict]",
                "str",
                "Tuple[int, int]",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.raw_path": {
            "name": "raw_path",
            "location": 250,
            "return": [
                "List[str]",
                "Optional[dict]",
                "str",
                "Tuple[int]",
                "List[Tuple[str, Any]]",
                "Sequence[str]",
                "List[Tuple[int, str, str]]",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.full_path": {
            "name": "full_path",
            "location": 258,
            "return": [
                "List[str]",
                "list",
                "str",
                "List[List[str]]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.materialized_path": {
            "name": "materialized_path",
            "location": 263,
            "return": [
                "List[str]",
                "list",
                "str",
                "List[List[str]]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.parent": {
            "name": "parent",
            "location": 268,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[Iterable[Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.extra": {
            "name": "extra",
            "location": 278,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.child": {
            "name": "child",
            "location": 282,
            "return": [
                "tuple",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "_id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "folder": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "WaterButlerPath.increment_name": {
            "name": "increment_name",
            "location": 294,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.rename": {
            "name": "rename",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "WaterButlerPath.__eq__": {
            "name": "__eq__",
            "location": 302,
            "return": [
                "str",
                "float",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "WaterButlerPath.__str__": {
            "name": "__str__",
            "location": 305,
            "return": [
                "str",
                "waterbutler.core.provider.BaseProvider",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerPath.__repr__": {
            "name": "__repr__",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/core/provider.py": {
        "throttle": {
            "name": "throttle",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "concurrency": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "interval": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "build_url": {
            "name": "build_url",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "base": [
                    "type",
                    "Callable[[T], T]",
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "throttle._throttle": {
            "name": "_throttle",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "BaseProvider.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "credentials": [
                    "bool",
                    "int"
                ],
                "settings": [
                    "bool",
                    "int"
                ],
                "retry_on": [
                    "bool",
                    "int"
                ],
                "is_celery_task": [
                    "Mapping[str, Any]",
                    "dict",
                    "List[dict]",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "BaseProvider.__del__": {
            "name": "__del__",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.NAME": {
            "name": "NAME",
            "location": 145,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.__eq__": {
            "name": "__eq__",
            "location": 148,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "BaseProvider.serialized": {
            "name": "serialized",
            "location": 157,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.build_url": {
            "name": "build_url",
            "location": 165,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.default_headers": {
            "name": "default_headers",
            "location": 175,
            "return": [
                "Tuple[bytes]",
                "str",
                "bytes",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.build_headers": {
            "name": "build_headers",
            "location": 181,
            "return": [
                "dict",
                "tuple",
                "Dict[str, float]",
                "Dict[str, bool]",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.get_or_create_session": {
            "name": "get_or_create_session",
            "location": 190,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict",
                "str",
                "aiohttp.ClientSession"
            ],
            "arguments": {
                "self": [],
                "connector": [
                    "cmk.utils.type_defs.UserId",
                    "str",
                    "asyncio.AbstractEventLoop",
                    "dict"
                ]
            }
        },
        "BaseProvider.request": {
            "name": "request",
            "location": 335,
            "return": [
                "int",
                "dict",
                "Dict[str, str]",
                "str",
                "Optional[Dict[str, Any]]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 552,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "BaseProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 566,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "BaseProvider.shares_storage_root": {
            "name": "shares_storage_root",
            "location": 702,
            "return": [
                "Dict[str, List[str]]",
                "IO",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 714,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.path_from_metadata": {
            "name": "path_from_metadata",
            "location": 817,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "waterbutler.providers.figshare.path.FigsharePath",
                "waterbutler.core.path.WaterButlerPath",
                "str",
                "path.ImportPath"
            ],
            "arguments": {
                "self": [],
                "parent_path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "Optional[str]",
                    "IO",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bytes"
                ],
                "meta_data": [
                    "waterbutler.core.path.WaterButlerPath",
                    "Optional[str]",
                    "IO",
                    "str",
                    "cerulean.path.AbstractPath",
                    "bytes"
                ]
            }
        },
        "BaseProvider._build_range_header": {
            "name": "_build_range_header",
            "location": 840,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "slice_tup": [
                    "Tuple[int, int]",
                    "int",
                    "bool",
                    "str",
                    "static_frame.core.util.DepthLevelSpecifier"
                ]
            }
        },
        "BaseProvider.__repr__": {
            "name": "__repr__",
            "location": 847,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/core/remote_logging.py": {
        "log_file_action": {
            "name": "log_file_action",
            "location": 218,
            "return": [
                "str",
                "IO",
                "Dict[str, str]",
                "int",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "action": [
                    "Optional[str]",
                    "Optional[int]",
                    "tracim.lib.core.contenContentApi"
                ],
                "source": [
                    "Optional[str]",
                    "Optional[int]",
                    "tracim.lib.core.contenContentApi"
                ],
                "api_version": [
                    "Optional[str]",
                    "Optional[int]",
                    "tracim.lib.core.contenContentApi"
                ],
                "destination": [
                    "Optional[str]",
                    "Optional[int]",
                    "tracim.lib.core.contenContentApi"
                ],
                "request": [
                    "Optional[str]",
                    "Optional[int]",
                    "tracim.lib.core.contenContentApi"
                ],
                "start_time": [
                    "Optional[str]",
                    "Optional[int]",
                    "tracim.lib.core.contenContentApi"
                ],
                "errors": [
                    "Optional[str]",
                    "Optional[int]",
                    "tracim.lib.core.contenContentApi"
                ],
                "bytes_downloaded": [
                    "Optional[str]",
                    "Optional[int]",
                    "tracim.lib.core.contenContentApi"
                ],
                "bytes_uploaded": [
                    "Optional[str]",
                    "Optional[int]",
                    "tracim.lib.core.contenContentApi"
                ]
            }
        },
        "_munge_file_metadata": {
            "name": "_munge_file_metadata",
            "location": 241,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "metadata": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bytes]",
                    "Optional[asyncio.AbstractEventLoop]",
                    "TextIO",
                    "List[str]"
                ]
            }
        },
        "_build_public_file_payload": {
            "name": "_build_public_file_payload",
            "location": 266,
            "return": [
                "str",
                "Type[Any]",
                "int"
            ],
            "arguments": {
                "action": [
                    "Optional[str]",
                    "apps.core.task.coretaskstate.TaskDefinition",
                    "bool"
                ],
                "request": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "file_metadata": [
                    "Optional[str]",
                    "bool",
                    "apps.core.task.coretaskstate.TaskDefinition",
                    "Dict[str, str]",
                    "recidiviz.utils.regions.Region"
                ]
            }
        },
        "_scrub_headers_for_keen": {
            "name": "_scrub_headers_for_keen",
            "location": 321,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "payload": [
                    "dict"
                ],
                "MAX_ITERATIONS": [
                    "int",
                    "float"
                ]
            }
        },
        "_serialize_request": {
            "name": "_serialize_request",
            "location": 341,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Optional[str]"
                ]
            }
        },
        "_format_bytes": {
            "name": "_format_bytes",
            "location": 374,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "nbr_bytes": [
                    "int",
                    "Optional[int]",
                    "Union[str, int, float]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/core/signing.py": {
        "order_recursive": {
            "name": "order_recursive",
            "location": 9,
            "return": [
                "str",
                "int",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Union[Dict, List]",
                    "Union[None, Dict[str, Any], List[Any]]"
                ]
            }
        },
        "serialize_payload": {
            "name": "serialize_payload",
            "location": 31,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "payload": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "unserialize_payload": {
            "name": "unserialize_payload",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "sign_data": {
            "name": "sign_data",
            "location": 69,
            "return": [
                "int",
                "float",
                "List[dict]"
            ],
            "arguments": {
                "signer": [
                    "int",
                    "str",
                    "Optional[Dict]",
                    "bool"
                ],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "str"
                ],
                "ttl": [
                    "bool",
                    "bytes",
                    "Optional[bytes]",
                    "int",
                    "dict"
                ]
            }
        },
        "Signer.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "bytes",
                    "List[str]",
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "List[Tuple[str, int]]"
                ],
                "digest": [
                    "str",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "Signer.sign_message": {
            "name": "sign_message",
            "location": 48,
            "return": [
                "bool",
                "str",
                "dict",
                "Sequence[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Signer.sign_payload": {
            "name": "sign_payload",
            "location": 55,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Signer.verify_message": {
            "name": "verify_message",
            "location": 60,
            "return": [
                "List[str]",
                "set",
                "str",
                "list",
                "Dict[str, Set[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "bytes",
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "message": [
                    "bytes",
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Signer.verify_payload": {
            "name": "verify_payload",
            "location": 64,
            "return": [
                "List[str]",
                "set",
                "str",
                "list",
                "Dict[str, Set[str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "bytes",
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "payload": [
                    "float",
                    "str",
                    "Sequence[Sequence[Any]]",
                    "List[str]",
                    "Sequence[Any]",
                    "list",
                    "int"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/core/utils.py": {
        "make_provider": {
            "name": "make_provider",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "auth": [
                    "str"
                ],
                "credentials": [
                    "str"
                ],
                "settings": [
                    "str"
                ]
            }
        },
        "as_task": {
            "name": "as_task",
            "location": 51,
            "return": [
                "bool",
                "str",
                "logging.LogRecord",
                "asyncio.Task[Any]",
                "deque",
                "float",
                "Callable[[bytes], None]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "idom.core.elemenElementConstructor"
                ]
            }
        },
        "async_retry": {
            "name": "async_retry",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "retries": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "backoff": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "exceptions": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "normalize_datetime": {
            "name": "normalize_datetime",
            "location": 120,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "date_string": [
                    "str",
                    "int",
                    "Optional[Collection[str]]"
                ]
            }
        },
        "strip_for_disposition": {
            "name": "strip_for_disposition",
            "location": 131,
            "return": [
                "str",
                "bool",
                "Tuple[str, str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "encode_for_disposition": {
            "name": "encode_for_disposition",
            "location": 148,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "List[Tuple[int, int, int, int]]"
                ]
            }
        },
        "make_disposition": {
            "name": "make_disposition",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "as_task.wrapped": {
            "name": "wrapped",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "async_retry._async_retry": {
            "name": "_async_retry",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "ZipStreamGenerator.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "parent_path": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "RequestHandlerContext.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_coro": [
                    "Dict[str, str]"
                ]
            }
        },
        "AsyncIterator.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/core/__init__.py": {},
    "waterbutler-master/waterbutler/core/streams/base.py": {
        "BaseStream.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.__aiter__": {
            "name": "__aiter__",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.size": {
            "name": "size",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.add_reader": {
            "name": "add_reader",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "reader": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseStream.remove_reader": {
            "name": "remove_reader",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BaseStream.add_writer": {
            "name": "add_writer",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "writer": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseStream.remove_writer": {
            "name": "remove_writer",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BaseStream.feed_eof": {
            "name": "feed_eof",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream.__aiter__": {
            "name": "__aiter__",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream.size": {
            "name": "size",
            "location": 104,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream.streams": {
            "name": "streams",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream.add_streams": {
            "name": "add_streams",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream._cycle": {
            "name": "_cycle",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CutoffStream.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "int"
                ],
                "cutoff": [
                    "str",
                    "int",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "CutoffStream.__aiter__": {
            "name": "__aiter__",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CutoffStream.size": {
            "name": "size",
            "location": 179,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStream.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "memoryview",
                    "dict"
                ]
            }
        },
        "StringStream.size": {
            "name": "size",
            "location": 216,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStream.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStream.size": {
            "name": "size",
            "location": 231,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStream.at_eof": {
            "name": "at_eof",
            "location": 234,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/core/streams/base64.py": {
        "Base64EncodeStream.calculate_encoded_size": {
            "name": "calculate_encoded_size",
            "location": 10,
            "return": [
                "int",
                "str",
                "List[float]",
                "float"
            ],
            "arguments": {
                "size": [
                    "int",
                    "bool"
                ]
            }
        },
        "Base64EncodeStream.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "T"
                ]
            }
        },
        "Base64EncodeStream.__aiter__": {
            "name": "__aiter__",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base64EncodeStream.size": {
            "name": "size",
            "location": 41,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base64EncodeStream.at_eof": {
            "name": "at_eof",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/core/streams/file.py": {
        "FileStreamReader.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_pointer": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "FileStreamReader.size": {
            "name": "size",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "str",
                "IO",
                "base.ConfigOptions",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStreamReader.close": {
            "name": "close",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialFileStreamReader.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_pointer": [
                    "int",
                    "str",
                    "float"
                ],
                "byte_range": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "PartialFileStreamReader.size": {
            "name": "size",
            "location": 61,
            "return": [
                "str",
                "dict",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialFileStreamReader.total_size": {
            "name": "total_size",
            "location": 65,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialFileStreamReader.partial": {
            "name": "partial",
            "location": 73,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialFileStreamReader.content_range": {
            "name": "content_range",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/core/streams/http.py": {
        "FormDataStream.make_boundary": {
            "name": "make_boundary",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "FormDataStream.make_header": {
            "name": "make_header",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "bytes",
                    "int"
                ],
                "disposition": [
                    "str",
                    "bytes",
                    "int"
                ],
                "additional_headers": [
                    "str",
                    "int",
                    "bytes",
                    "dict"
                ]
            }
        },
        "FormDataStream.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDataStream.end_boundary": {
            "name": "end_boundary",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDataStream.headers": {
            "name": "headers",
            "location": 75,
            "return": [
                "str",
                "List[src.autoks.core.gp_model.GPModel]",
                "Union[Callable, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDataStream.finalize": {
            "name": "finalize",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDataStream.add_fields": {
            "name": "add_fields",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDataStream.add_field": {
            "name": "add_field",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterator[str]",
                    "int"
                ],
                "value": [
                    "str",
                    "Iterator[str]",
                    "int"
                ]
            }
        },
        "FormDataStream.add_file": {
            "name": "add_file",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str"
                ],
                "file_stream": [
                    "str",
                    "int",
                    "tensorhive.core.ssh.Username"
                ],
                "file_name": [
                    "str"
                ],
                "mime": [
                    "str"
                ],
                "disposition": [
                    "str"
                ],
                "transcoding": [
                    "str"
                ]
            }
        },
        "FormDataStream._make_boundary_stream": {
            "name": "_make_boundary_stream",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStreamReader.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "float",
                    "str"
                ],
                "size": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[hexpy.base.JSONDict]"
                ],
                "name": [
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "ResponseStreamReader.partial": {
            "name": "partial",
            "location": 147,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStreamReader.content_type": {
            "name": "content_type",
            "location": 151,
            "return": [
                "str",
                "Dict[str, Any]",
                "sklearn.base.BaseEstimator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStreamReader.content_range": {
            "name": "content_range",
            "location": 155,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStreamReader.name": {
            "name": "name",
            "location": 159,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStreamReader.size": {
            "name": "size",
            "location": 163,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestStreamReader.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [],
                "inner": []
            }
        },
        "RequestStreamReader.size": {
            "name": "size",
            "location": 184,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestStreamReader.at_eof": {
            "name": "at_eof",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/core/streams/json.py": {
        "JSONStream.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/core/streams/metadata.py": {
        "HashStreamWriter.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hasher": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "HashStreamWriter.digest": {
            "name": "digest",
            "location": 8,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool",
                "List[int]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashStreamWriter.hexdigest": {
            "name": "hexdigest",
            "location": 12,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool",
                "List[int]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashStreamWriter.can_write_eof": {
            "name": "can_write_eof",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashStreamWriter.write": {
            "name": "write",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "HashStreamWriter.close": {
            "name": "close",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/core/streams/settings.py": {},
    "waterbutler-master/waterbutler/core/streams/zip.py": {
        "ZipLocalFileDataDescriptor.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "int",
                    "str",
                    "bool",
                    "logging.LogRecord",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        },
        "ZipLocalFileDataDescriptor.size": {
            "name": "size",
            "location": 59,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFileData.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "int",
                    "str",
                    "bool",
                    "logging.LogRecord",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ],
                "stream": [
                    "time",
                    "str",
                    "int",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "ZipLocalFileData.size": {
            "name": "size",
            "location": 86,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFile.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_tuple": [
                    "str"
                ]
            }
        },
        "ZipLocalFile.local_header": {
            "name": "local_header",
            "location": 190,
            "return": [
                "Dict[str, Any]",
                "str",
                "IO",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFile.directory_header": {
            "name": "directory_header",
            "location": 200,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFile.descriptor": {
            "name": "descriptor",
            "location": 276,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFile.total_bytes": {
            "name": "total_bytes",
            "location": 290,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipArchiveCentralDirectory.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "files": [
                    "int",
                    "str",
                    "bool",
                    "logging.LogRecord",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        },
        "ZipArchiveCentralDirectory.build_content": {
            "name": "build_content",
            "location": 317,
            "return": [
                "IO[bytes]",
                "Dict[str, Dict[str, str]]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipStreamReader.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream_gen": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict[str, Dict[Any, int]]",
                    "bool"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/core/streams/__init__.py": {},
    "waterbutler-master/waterbutler/providers/__init__.py": {},
    "waterbutler-master/waterbutler/providers/bitbucket/metadata.py": {
        "BaseBitbucketMetadata.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "path_obj": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "owner": [
                    "str",
                    "Iterable[Any]"
                ],
                "repo": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "BaseBitbucketMetadata.provider": {
            "name": "provider",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBitbucketMetadata.path": {
            "name": "path",
            "location": 32,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "waterbutler.providers.gitlab.path.GitLabPath",
                "str",
                "waterbutler.providers.github.path.GitHubPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBitbucketMetadata.name": {
            "name": "name",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBitbucketMetadata.commit_sha": {
            "name": "commit_sha",
            "location": 40,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBitbucketMetadata.branch_name": {
            "name": "branch_name",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBitbucketMetadata.extra": {
            "name": "extra",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBitbucketMetadata.build_path": {
            "name": "build_path",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBitbucketMetadata._json_api_links": {
            "name": "_json_api_links",
            "location": 57,
            "return": [
                "Iterable[str]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[List[str]]"
                ]
            }
        },
        "BitbucketFileMetadata.size": {
            "name": "size",
            "location": 81,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes",
                "raiden.utils.Secret"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketFileMetadata.modified": {
            "name": "modified",
            "location": 85,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 89,
            "return": [
                "Optional[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketFileMetadata.content_type": {
            "name": "content_type",
            "location": 93,
            "return": [
                "Optional[bool]",
                "Optional[List[str]]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketFileMetadata.etag": {
            "name": "etag",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketFileMetadata.extra": {
            "name": "extra",
            "location": 101,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketFileMetadata.last_commit_sha": {
            "name": "last_commit_sha",
            "location": 108,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketFileMetadata.web_view": {
            "name": "web_view",
            "location": 112,
            "return": [
                "int",
                "str",
                "dict",
                "IO",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketRevisionMetadata.version_identifier": {
            "name": "version_identifier",
            "location": 125,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketRevisionMetadata.modified": {
            "name": "modified",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketRevisionMetadata.modified_utc": {
            "name": "modified_utc",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketRevisionMetadata.version": {
            "name": "version",
            "location": 137,
            "return": [
                "utils.Node",
                "str",
                "List[int]",
                "int",
                "trezor.utils.Writer",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketRevisionMetadata.extra": {
            "name": "extra",
            "location": 141,
            "return": [
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Union[str, None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/bitbucket/path.py": {
        "BitbucketPathPart.increment_name": {
            "name": "increment_name",
            "location": 15,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "_id": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "BitbucketPath.commit_sha": {
            "name": "commit_sha",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketPath.branch_name": {
            "name": "branch_name",
            "location": 34,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketPath.ref": {
            "name": "ref",
            "location": 39,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketPath.extra": {
            "name": "extra",
            "location": 44,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketPath.child": {
            "name": "child",
            "location": 50,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ],
                "_id": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[IO[bytes]]"
                ],
                "folder": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "BitbucketPath.set_commit_sha": {
            "name": "set_commit_sha",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "commit_sha": [
                    "bool",
                    "Optional[bool]",
                    "Optional[Iterable[str]]",
                    "float"
                ]
            }
        },
        "BitbucketPath.path_tuple": {
            "name": "path_tuple",
            "location": 60,
            "return": [
                "list",
                "Optional[dict]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/bitbucket/provider.py": {
        "BitbucketProvider.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "int",
                    "IO[str]",
                    "bytes"
                ],
                "settings": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "BitbucketProvider.bitbucket_path_to_name": {
            "name": "bitbucket_path_to_name",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "folder_path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "BitbucketProvider.default_headers": {
            "name": "default_headers",
            "location": 63,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketProvider.path_from_metadata": {
            "name": "path_from_metadata",
            "location": 145,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "path.ImportPath",
                "waterbutler.providers.figshare.path.FigsharePath"
            ],
            "arguments": {
                "self": [],
                "parent_path": [
                    "waterbutler.providers.bitbuckepath.BitbucketPath",
                    "waterbutler.providers.gitlab.path.GitLabPath",
                    "str",
                    "Optional[path.Path]"
                ],
                "metadata": [
                    "waterbutler.providers.bitbuckepath.BitbucketPath",
                    "waterbutler.providers.gitlab.path.GitLabPath",
                    "str",
                    "Optional[path.Path]"
                ]
            }
        },
        "BitbucketProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitbucketProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "BitbucketProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "BitbucketProvider._build_v2_repo_url": {
            "name": "_build_v2_repo_url",
            "location": 256,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Union[Callable, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/bitbucket/settings.py": {},
    "waterbutler-master/waterbutler/providers/bitbucket/__init__.py": {},
    "waterbutler-master/waterbutler/providers/box/metadata.py": {
        "BaseBoxMetadata.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "Optional[List[str]]"
                ],
                "path_obj": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BaseBoxMetadata.provider": {
            "name": "provider",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBoxMetadata.materialized_path": {
            "name": "materialized_path",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFolderMetadata.name": {
            "name": "name",
            "location": 22,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFolderMetadata.path": {
            "name": "path",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFileMetadata.name": {
            "name": "name",
            "location": 33,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFileMetadata.path": {
            "name": "path",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFileMetadata.size": {
            "name": "size",
            "location": 41,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFileMetadata.modified": {
            "name": "modified",
            "location": 45,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 49,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFileMetadata.content_type": {
            "name": "content_type",
            "location": 53,
            "return": [
                "Optional[bool]",
                "Optional[List[str]]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFileMetadata.extra": {
            "name": "extra",
            "location": 57,
            "return": [
                "int",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxFileMetadata.etag": {
            "name": "etag",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxRevision.version": {
            "name": "version",
            "location": 73,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxRevision.version_identifier": {
            "name": "version_identifier",
            "location": 77,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxRevision.modified": {
            "name": "modified",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/box/provider.py": {
        "BoxProvider.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "int",
                    "IO[str]",
                    "bytes"
                ],
                "settings": [
                    "dict"
                ]
            }
        },
        "BoxProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxProvider.shares_storage_root": {
            "name": "shares_storage_root",
            "location": 186,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Awaitable[None]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "BoxProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 193,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "int",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "BoxProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 196,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "int",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "BoxProvider.default_headers": {
            "name": "default_headers",
            "location": 253,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxProvider._serialize_item": {
            "name": "_serialize_item",
            "location": 465,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "Set[str]",
                    "bytes"
                ],
                "path": [
                    "dict",
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "Set[str]",
                    "bytes"
                ]
            }
        },
        "BoxProvider._build_upload_url": {
            "name": "_build_upload_url",
            "location": 473,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/box/settings.py": {},
    "waterbutler-master/waterbutler/providers/box/__init__.py": {},
    "waterbutler-master/waterbutler/providers/cloudfiles/metadata.py": {
        "BaseCloudFilesMetadata.provider": {
            "name": "provider",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFileMetadata.name": {
            "name": "name",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFileMetadata.path": {
            "name": "path",
            "location": 20,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "waterbutler.providers.figshare.path.FigsharePath",
                "waterbutler.providers.github.path.GitHubPath",
                "Iterable[str]",
                "waterbutler.providers.gitlab.path.GitLabPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFileMetadata.size": {
            "name": "size",
            "location": 24,
            "return": [
                "str",
                "bytearray",
                "Dict[str, str]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFileMetadata.modified": {
            "name": "modified",
            "location": 28,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 32,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFileMetadata.content_type": {
            "name": "content_type",
            "location": 36,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFileMetadata.etag": {
            "name": "etag",
            "location": 40,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFileMetadata.extra": {
            "name": "extra",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesHeaderMetadata.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "Optional[List[str]]"
                ],
                "path": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "CloudFilesHeaderMetadata.name": {
            "name": "name",
            "location": 59,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesHeaderMetadata.path": {
            "name": "path",
            "location": 63,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesHeaderMetadata.size": {
            "name": "size",
            "location": 67,
            "return": [
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesHeaderMetadata.modified": {
            "name": "modified",
            "location": 71,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesHeaderMetadata.created_utc": {
            "name": "created_utc",
            "location": 75,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesHeaderMetadata.content_type": {
            "name": "content_type",
            "location": 79,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesHeaderMetadata.etag": {
            "name": "etag",
            "location": 83,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesHeaderMetadata.extra": {
            "name": "extra",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFolderMetadata.name": {
            "name": "name",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesFolderMetadata.path": {
            "name": "path",
            "location": 102,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "waterbutler.providers.gitlab.path.GitLabPath",
                "str",
                "waterbutler.providers.github.path.GitHubPath"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/cloudfiles/provider.py": {
        "ensure_connection": {
            "name": "ensure_connection",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "CloudFilesProvider.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "settings": [
                    "Dict[str, Any]"
                ]
            }
        },
        "CloudFilesProvider.default_headers": {
            "name": "default_headers",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesProvider.build_url": {
            "name": "build_url",
            "location": 198,
            "return": [
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "_endpoint": [
                    "bool",
                    "str",
                    "type"
                ]
            }
        },
        "CloudFilesProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 210,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "Iterable[str]",
                    "str",
                    "Iterator[str]"
                ],
                "path": [
                    "Iterable[str]",
                    "str",
                    "Iterator[str]"
                ]
            }
        },
        "CloudFilesProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 213,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "Iterable[str]",
                    "str",
                    "Iterator[str]"
                ],
                "path": [
                    "Iterable[str]",
                    "str",
                    "Iterator[str]"
                ]
            }
        },
        "CloudFilesProvider.sign_url": {
            "name": "sign_url",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "waterbutler.core.path.WaterButlerPath",
                    "int"
                ],
                "method": [
                    "str",
                    "dict"
                ],
                "endpoint": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "bool"
                ],
                "seconds": [
                    "int",
                    "Dict[int, str]",
                    "List[Dict[str, int]]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "CloudFilesProvider._extract_endpoints": {
            "name": "_extract_endpoints",
            "location": 272,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "CloudFilesProvider._serialize_folder_metadata": {
            "name": "_serialize_folder_metadata",
            "location": 378,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/cloudfiles/settings.py": {},
    "waterbutler-master/waterbutler/providers/cloudfiles/__init__.py": {},
    "waterbutler-master/waterbutler/providers/dataverse/metadata.py": {
        "BaseDataverseMetadata.provider": {
            "name": "provider",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ],
                "dataset_version": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "DataverseFileMetadata.file_id": {
            "name": "file_id",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.name": {
            "name": "name",
            "location": 26,
            "return": [
                "bool",
                "Optional[Type]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.path": {
            "name": "path",
            "location": 30,
            "return": [
                "str",
                "waterbutler.providers.bitbuckepath.BitbucketPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.materialized_path": {
            "name": "materialized_path",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.size": {
            "name": "size",
            "location": 38,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.content_type": {
            "name": "content_type",
            "location": 42,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.modified": {
            "name": "modified",
            "location": 46,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 50,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.etag": {
            "name": "etag",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseFileMetadata.extra": {
            "name": "extra",
            "location": 58,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseDatasetMetadata.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List[Any]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "doi": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "Callable",
                    "bool"
                ],
                "version": [
                    "List[str]",
                    "str",
                    "Callable[[str], str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "DataverseDatasetMetadata.name": {
            "name": "name",
            "location": 83,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseDatasetMetadata.path": {
            "name": "path",
            "location": 87,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "waterbutler.providers.gitlab.path.GitLabPath",
                "str",
                "waterbutler.providers.github.path.GitHubPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseRevision.version_identifier": {
            "name": "version_identifier",
            "location": 94,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseRevision.version": {
            "name": "version",
            "location": 98,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataverseRevision.modified": {
            "name": "modified",
            "location": 102,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/dataverse/provider.py": {
        "DataverseProvider.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "int",
                    "IO[str]",
                    "bytes",
                    "cmk.utils.type_defs.HostName"
                ],
                "settings": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "utils.config_generator.Configurations",
                    "str"
                ]
            }
        },
        "DataverseProvider.build_url": {
            "name": "build_url",
            "location": 112,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "list",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ConfigSerial",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DataverseProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/dataverse/settings.py": {},
    "waterbutler-master/waterbutler/providers/dataverse/__init__.py": {},
    "waterbutler-master/waterbutler/providers/dropbox/exceptions.py": {
        "DropboxUnhandledConflictError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error_data": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bytes"
                ]
            }
        },
        "DropboxNamingConflictError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/dropbox/metadata.py": {
        "BaseDropboxMetadata.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "folder": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseDropboxMetadata.provider": {
            "name": "provider",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDropboxMetadata.build_path": {
            "name": "build_path",
            "location": 16,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DropboxFolderMetadata.name": {
            "name": "name",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxFolderMetadata.path": {
            "name": "path",
            "location": 30,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxFileMetadata.name": {
            "name": "name",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxFileMetadata.path": {
            "name": "path",
            "location": 41,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxFileMetadata.size": {
            "name": "size",
            "location": 45,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxFileMetadata.modified": {
            "name": "modified",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 53,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxFileMetadata.content_type": {
            "name": "content_type",
            "location": 57,
            "return": [
                "Optional[bool]",
                "Optional[List[str]]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxFileMetadata.etag": {
            "name": "etag",
            "location": 61,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxFileMetadata.extra": {
            "name": "extra",
            "location": 65,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxRevision.version_identifier": {
            "name": "version_identifier",
            "location": 79,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxRevision.version": {
            "name": "version",
            "location": 83,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxRevision.modified": {
            "name": "modified",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxRevision.extra": {
            "name": "extra",
            "location": 91,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/dropbox/provider.py": {
        "DropboxProvider.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "int",
                    "IO[str]",
                    "bytes"
                ],
                "settings": [
                    "dict"
                ]
            }
        },
        "DropboxProvider.dropbox_conflict_error_handler": {
            "name": "dropbox_conflict_error_handler",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "List[purplship.core.models.Message]",
                    "memoryview"
                ],
                "error_path": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "DropboxProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxProvider.shares_storage_root": {
            "name": "shares_storage_root",
            "location": 151,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Awaitable[None]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "DropboxProvider.default_headers": {
            "name": "default_headers",
            "location": 159,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropboxProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 577,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "waterbutler.core.provider.BaseProvider",
                    "str",
                    "Tuple[type]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]",
                    "path.Path"
                ]
            }
        },
        "DropboxProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 581,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "bool",
                    "str",
                    "int"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]",
                    "path.Path"
                ]
            }
        },
        "DropboxProvider._build_content_url": {
            "name": "_build_content_url",
            "location": 585,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/dropbox/settings.py": {},
    "waterbutler-master/waterbutler/providers/dropbox/__init__.py": {},
    "waterbutler-master/waterbutler/providers/figshare/metadata.py": {
        "BaseFigshareMetadata.provider": {
            "name": "provider",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "raw_file": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "FigshareFileMetadata.id": {
            "name": "id",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.name": {
            "name": "name",
            "location": 26,
            "return": [
                "str",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.article_id": {
            "name": "article_id",
            "location": 30,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.article_name": {
            "name": "article_name",
            "location": 34,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.path": {
            "name": "path",
            "location": 40,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.materialized_path": {
            "name": "materialized_path",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.upload_path": {
            "name": "upload_path",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.content_type": {
            "name": "content_type",
            "location": 59,
            "return": [
                "Optional[bool]",
                "Optional[List[str]]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.size": {
            "name": "size",
            "location": 63,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.modified": {
            "name": "modified",
            "location": 67,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 71,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.etag": {
            "name": "etag",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.is_public": {
            "name": "is_public",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.web_view": {
            "name": "web_view",
            "location": 91,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.can_delete": {
            "name": "can_delete",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileMetadata.extra": {
            "name": "extra",
            "location": 110,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFolderMetadata.id": {
            "name": "id",
            "location": 131,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFolderMetadata.name": {
            "name": "name",
            "location": 135,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFolderMetadata.path": {
            "name": "path",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFolderMetadata.materialized_path": {
            "name": "materialized_path",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFolderMetadata.size": {
            "name": "size",
            "location": 147,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFolderMetadata.modified": {
            "name": "modified",
            "location": 151,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFolderMetadata.created_utc": {
            "name": "created_utc",
            "location": 155,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFolderMetadata.etag": {
            "name": "etag",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFolderMetadata.extra": {
            "name": "extra",
            "location": 163,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileRevisionMetadata.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileRevisionMetadata.modified": {
            "name": "modified",
            "location": 177,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileRevisionMetadata.modified_utc": {
            "name": "modified_utc",
            "location": 181,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileRevisionMetadata.version_identifier": {
            "name": "version_identifier",
            "location": 185,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareFileRevisionMetadata.version": {
            "name": "version",
            "location": 189,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/figshare/path.py": {
        "FigsharePath.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Mapping",
                    "Optional[AnyStr]"
                ],
                "folder": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Mapping",
                    "Optional[AnyStr]"
                ],
                "is_public": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]",
                    "bool",
                    "int"
                ],
                "parent_is_folder": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "_ids": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Mapping",
                    "Optional[AnyStr]"
                ],
                "prepend": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Mapping",
                    "Optional[AnyStr]"
                ]
            }
        },
        "FigsharePath.identifier_path": {
            "name": "identifier_path",
            "location": 17,
            "return": [
                "List[str]",
                "Optional[dict]",
                "str",
                "Tuple[int]",
                "List[Tuple[str, Any]]",
                "Sequence[str]",
                "List[Tuple[int, str, str]]",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigsharePath.parent": {
            "name": "parent",
            "location": 27,
            "return": [
                "Optional[Iterable[Any]]",
                "Type",
                "Callable",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigsharePath.child": {
            "name": "child",
            "location": 37,
            "return": [
                "str",
                "AsyncGenerator",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "Optional[Dict[str, str]]"
                ],
                "_id": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "Optional[Dict[str, str]]"
                ],
                "folder": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "Optional[Dict[str, str]]"
                ],
                "parent_is_folder": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Dict[str, str]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/figshare/provider.py": {
        "FigshareProvider.__new__": {
            "name": "__new__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict"
                ],
                "auth": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "credentials": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "settings": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "BaseFigshareProvider.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "int",
                    "IO[str]",
                    "bytes"
                ],
                "settings": [
                    "Optional[Iterable[str]]",
                    "core_lib.core.models.Event",
                    "dict",
                    "str"
                ]
            }
        },
        "BaseFigshareProvider.root_path_parts": {
            "name": "root_path_parts",
            "location": 119,
            "return": [
                "str",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFigshareProvider.default_headers": {
            "name": "default_headers",
            "location": 123,
            "return": [
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFigshareProvider.build_url": {
            "name": "build_url",
            "location": 128,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "is_public": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "BaseFigshareProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFigshareProvider._path_split": {
            "name": "_path_split",
            "location": 178,
            "return": [
                "List[str]",
                "str",
                "waterbutler.providers.github.path.GitHubPath"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BaseFigshareProvider.path_from_metadata": {
            "name": "path_from_metadata",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parent_path": [
                    "str",
                    "Optional[str]"
                ],
                "metadata": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FigshareProjectProvider.__init__": {
            "name": "__init__",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FigshareArticleProvider.__init__": {
            "name": "__init__",
            "location": 860,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "settings": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/figshare/settings.py": {},
    "waterbutler-master/waterbutler/providers/figshare/__init__.py": {},
    "waterbutler-master/waterbutler/providers/filesystem/metadata.py": {
        "BaseFileSystemMetadata.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "folder": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseFileSystemMetadata.provider": {
            "name": "provider",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFileSystemMetadata.build_path": {
            "name": "build_path",
            "location": 16,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FileSystemFolderMetadata.name": {
            "name": "name",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFolderMetadata.path": {
            "name": "path",
            "location": 30,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFileMetadata.name": {
            "name": "name",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFileMetadata.path": {
            "name": "path",
            "location": 41,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFileMetadata.size": {
            "name": "size",
            "location": 45,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFileMetadata.modified": {
            "name": "modified",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFileMetadata.modified_utc": {
            "name": "modified_utc",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 57,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFileMetadata.content_type": {
            "name": "content_type",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemFileMetadata.etag": {
            "name": "etag",
            "location": 65,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/filesystem/provider.py": {
        "FileSystemProvider.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "settings": [
                    "dict"
                ]
            }
        },
        "FileSystemProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemProvider._metadata_file": {
            "name": "_metadata_file",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "file_name": [
                    "str",
                    "os.PathLike",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "FileSystemProvider._metadata_folder": {
            "name": "_metadata_folder",
            "location": 129,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "folder_name": [
                    "str"
                ]
            }
        },
        "FileSystemProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 134,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "waterbutler.core.provider.BaseProvider",
                    "str",
                    "Tuple[type]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]",
                    "path.Path"
                ]
            }
        },
        "FileSystemProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 137,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "bool",
                    "str",
                    "int"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]",
                    "path.Path"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/filesystem/settings.py": {},
    "waterbutler-master/waterbutler/providers/filesystem/__init__.py": {},
    "waterbutler-master/waterbutler/providers/github/exceptions.py": {
        "GitHubUnsupportedRepoError.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "GitHubRateLimitExceededError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "str",
                    "Union[str, int]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/github/metadata.py": {
        "BaseGitHubMetadata.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "commit": [
                    "int",
                    "bool",
                    "Callable",
                    "Optional[float]"
                ],
                "ref": [
                    "int",
                    "bool",
                    "Callable",
                    "Optional[float]"
                ]
            }
        },
        "BaseGitHubMetadata.provider": {
            "name": "provider",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitHubMetadata.extra": {
            "name": "extra",
            "location": 27,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitHubMetadata.build_path": {
            "name": "build_path",
            "location": 35,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "django.core.files.storage.Storage"
                ]
            }
        },
        "BaseGitHubMetadata._json_api_links": {
            "name": "_json_api_links",
            "location": 38,
            "return": [
                "Iterable[str]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[List[str]]"
                ]
            }
        },
        "BaseGitHubFileMetadata.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "str"
                ],
                "commit": [
                    "int",
                    "str"
                ],
                "web_view": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "Optional[int]"
                ],
                "ref": [
                    "int",
                    "str"
                ]
            }
        },
        "BaseGitHubFileMetadata.path": {
            "name": "path",
            "location": 64,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitHubFileMetadata.modified": {
            "name": "modified",
            "location": 68,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitHubFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 74,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitHubFileMetadata.content_type": {
            "name": "content_type",
            "location": 78,
            "return": [
                "Optional[bool]",
                "Optional[List[str]]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitHubFileMetadata.size": {
            "name": "size",
            "location": 82,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitHubFileMetadata.etag": {
            "name": "etag",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitHubFileMetadata.extra": {
            "name": "extra",
            "location": 90,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "dict",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitHubFolderMetadata.path": {
            "name": "path",
            "location": 110,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubFileContentMetadata.name": {
            "name": "name",
            "location": 118,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubFolderContentMetadata.name": {
            "name": "name",
            "location": 126,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubFileTreeMetadata.name": {
            "name": "name",
            "location": 134,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubFolderTreeMetadata.name": {
            "name": "name",
            "location": 142,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubRevision.version_identifier": {
            "name": "version_identifier",
            "location": 150,
            "return": [
                "List[str]",
                "str",
                "Iterable[str]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubRevision.modified": {
            "name": "modified",
            "location": 154,
            "return": [
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubRevision.created_utc": {
            "name": "created_utc",
            "location": 158,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubRevision.version": {
            "name": "version",
            "location": 162,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubRevision.extra": {
            "name": "extra",
            "location": 166,
            "return": [
                "str",
                "Optional[Callable]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/github/path.py": {
        "GitHubPathPart.increment_name": {
            "name": "increment_name",
            "location": 5,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "GitHubPath.branch_ref": {
            "name": "branch_ref",
            "location": 20,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubPath.file_sha": {
            "name": "file_sha",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubPath.extra": {
            "name": "extra",
            "location": 30,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubPath.child": {
            "name": "child",
            "location": 36,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ],
                "_id": [
                    "Optional[bool]",
                    "Optional[str]",
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "folder": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/github/provider.py": {
        "GitHubProvider.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "int",
                    "IO[str]",
                    "bytes"
                ],
                "settings": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "GitHubProvider.path_from_metadata": {
            "name": "path_from_metadata",
            "location": 287,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "waterbutler.core.path.WaterButlerPath",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "parent_path": [
                    "str",
                    "Optional[str]"
                ],
                "metadata": [
                    "str",
                    "Optional[IO[str]]",
                    "bool",
                    "Optional[List]"
                ]
            }
        },
        "GitHubProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubProvider.default_headers": {
            "name": "default_headers",
            "location": 298,
            "return": [
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubProvider.committer": {
            "name": "committer",
            "location": 302,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubProvider.build_repo_url": {
            "name": "build_repo_url",
            "location": 308,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 312,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "GitHubProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 315,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Type[Any]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[Union[str, Any]]",
                    "bool",
                    "int"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "GitHubProvider._web_view": {
            "name": "_web_view",
            "location": 810,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "GitHubProvider._path_exists_in_tree": {
            "name": "_path_exists_in_tree",
            "location": 1037,
            "return": [
                "str",
                "bool",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "str",
                    "Optional[int]",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "GitHubProvider._remove_path_from_tree": {
            "name": "_remove_path_from_tree",
            "location": 1046,
            "return": [
                "List[str]",
                "int",
                "Optional[List[str]]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "IO[str]",
                    "Optional[int]",
                    "Callable[..., None]",
                    "Iterable[T]"
                ],
                "path": [
                    "IO[str]",
                    "Optional[int]",
                    "Callable[..., None]",
                    "Iterable[T]"
                ]
            }
        },
        "GitHubProvider._reparent_blobs": {
            "name": "_reparent_blobs",
            "location": 1064,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "blobs": [
                    "waterbutler.core.path.WaterButlerPath",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ],
                "src_path": [],
                "dest_path": [
                    "str"
                ]
            }
        },
        "GitHubProvider._prune_subtrees": {
            "name": "_prune_subtrees",
            "location": 1092,
            "return": [
                "List[str]",
                "list",
                "Optional[dict]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "dict",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "GitHubProvider._interpret_query_parameters": {
            "name": "_interpret_query_parameters",
            "location": 1135,
            "return": [
                "bool",
                "str",
                "int",
                "\"Project\"",
                "float",
                "dict",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubProvider._looks_like_sha": {
            "name": "_looks_like_sha",
            "location": 1230,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "List[Tuple[str, str]]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "GitHubProvider._rl_add_more_tokens": {
            "name": "_rl_add_more_tokens",
            "location": 1292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/github/settings.py": {},
    "waterbutler-master/waterbutler/providers/github/__init__.py": {},
    "waterbutler-master/waterbutler/providers/gitlab/metadata.py": {
        "BaseGitLabMetadata.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "Optional[List[str]]"
                ],
                "path": [
                    "waterbutler.core.provider.BaseProvider",
                    "str"
                ]
            }
        },
        "BaseGitLabMetadata.provider": {
            "name": "provider",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitLabMetadata.path": {
            "name": "path",
            "location": 23,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "waterbutler.providers.gitlab.path.GitLabPath",
                "str",
                "waterbutler.providers.github.path.GitHubPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitLabMetadata.name": {
            "name": "name",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitLabMetadata.branch_name": {
            "name": "branch_name",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitLabMetadata.commit_sha": {
            "name": "commit_sha",
            "location": 35,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitLabMetadata.extra": {
            "name": "extra",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitLabMetadata.build_path": {
            "name": "build_path",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGitLabMetadata._json_api_links": {
            "name": "_json_api_links",
            "location": 48,
            "return": [
                "Iterable[str]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[List[str]]"
                ]
            }
        },
        "GitLabFileMetadata.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "int",
                    "bool"
                ],
                "path": [
                    "str"
                ],
                "host": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "owner": [
                    "str",
                    "Iterable[Any]"
                ],
                "repo": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GitLabFileMetadata.modified": {
            "name": "modified",
            "location": 89,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 93,
            "return": [
                "Tuple[int, int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabFileMetadata.content_type": {
            "name": "content_type",
            "location": 100,
            "return": [
                "Type",
                "Type[Any]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabFileMetadata.size": {
            "name": "size",
            "location": 104,
            "return": [
                "str",
                "Optional[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabFileMetadata.etag": {
            "name": "etag",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabFileMetadata.extra": {
            "name": "extra",
            "location": 112,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabFileMetadata.web_view": {
            "name": "web_view",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabRevision.version_identifier": {
            "name": "version_identifier",
            "location": 130,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabRevision.modified": {
            "name": "modified",
            "location": 134,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabRevision.version": {
            "name": "version",
            "location": 138,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabRevision.extra": {
            "name": "extra",
            "location": 142,
            "return": [
                "str",
                "Tuple[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/gitlab/path.py": {
        "GitLabPath.commit_sha": {
            "name": "commit_sha",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabPath.branch_name": {
            "name": "branch_name",
            "location": 31,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabPath.ref": {
            "name": "ref",
            "location": 36,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabPath.extra": {
            "name": "extra",
            "location": 41,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabPath.child": {
            "name": "child",
            "location": 47,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ],
                "_id": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[IO[bytes]]"
                ],
                "folder": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "GitLabPath.set_commit_sha": {
            "name": "set_commit_sha",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "commit_sha": [
                    "bool",
                    "Optional[bool]",
                    "Optional[Iterable[str]]",
                    "float"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/gitlab/provider.py": {
        "GitLabProvider.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "int",
                    "IO[str]",
                    "bytes"
                ],
                "settings": [
                    "Optional[Iterable[str]]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "GitLabProvider.default_headers": {
            "name": "default_headers",
            "location": 67,
            "return": [
                "str",
                "int",
                "Tuple[str, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabProvider.path_from_metadata": {
            "name": "path_from_metadata",
            "location": 143,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "path.ImportPath",
                "waterbutler.providers.figshare.path.FigsharePath"
            ],
            "arguments": {
                "self": [],
                "parent_path": [
                    "waterbutler.providers.bitbuckepath.BitbucketPath",
                    "waterbutler.providers.gitlab.path.GitLabPath",
                    "str",
                    "Optional[path.Path]"
                ],
                "metadata": [
                    "waterbutler.providers.bitbuckepath.BitbucketPath",
                    "waterbutler.providers.gitlab.path.GitLabPath",
                    "str",
                    "Optional[path.Path]"
                ]
            }
        },
        "GitLabProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "GitLabProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "GitLabProvider._build_repo_url": {
            "name": "_build_repo_url",
            "location": 257,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLabProvider._build_file_url": {
            "name": "_build_file_url",
            "location": 267,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "waterbutler.providers.gitlab.path.GitLabPath",
                    "str"
                ],
                "raw": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/gitlab/settings.py": {},
    "waterbutler-master/waterbutler/providers/gitlab/__init__.py": {},
    "waterbutler-master/waterbutler/providers/googlecloud/metadata.py": {
        "BaseGoogleCloudMetadata.provider": {
            "name": "provider",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGoogleCloudMetadata.path": {
            "name": "path",
            "location": 31,
            "return": [
                "int",
                "Optional[str]",
                "bool",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGoogleCloudMetadata.get_metadata_from_resp_headers": {
            "name": "get_metadata_from_resp_headers",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Sequence[Sequence[str]]"
                ],
                "obj_name": [
                    "str",
                    "Dict[str, List[bytes]]"
                ],
                "resp_headers": [
                    "Type['Declared']",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "str",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "GoogleCloudFileMetadata.name": {
            "name": "name",
            "location": 134,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudFileMetadata.content_type": {
            "name": "content_type",
            "location": 138,
            "return": [
                "Type",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudFileMetadata.modified": {
            "name": "modified",
            "location": 142,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 146,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudFileMetadata.size": {
            "name": "size",
            "location": 151,
            "return": [
                "bool",
                "List[Callable]",
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudFileMetadata.etag": {
            "name": "etag",
            "location": 156,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "Iterable[T]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudFileMetadata.extra": {
            "name": "extra",
            "location": 160,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudFileMetadata.new_from_resp_headers": {
            "name": "new_from_resp_headers",
            "location": 164,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "obj_name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "resp_headers": [
                    "dict"
                ]
            }
        },
        "GoogleCloudFolderMetadata.name": {
            "name": "name",
            "location": 199,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudFolderMetadata.new_from_resp_headers": {
            "name": "new_from_resp_headers",
            "location": 203,
            "return": [
                "str",
                "Callable[[None, None], bool]",
                "Dict[str, int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "obj_name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "resp_headers": [
                    "dict"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/googlecloud/provider.py": {
        "GoogleCloudProvider.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict"
                ],
                "settings": [
                    "dict"
                ]
            }
        },
        "GoogleCloudProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 306,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "waterbutler.core.path.WaterButlerPath",
                    "waterbutler.core.provider.BaseProvider",
                    "str"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "waterbutler.core.provider.BaseProvider",
                    "str"
                ]
            }
        },
        "GoogleCloudProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 319,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "GoogleCloudProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 327,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudProvider._build_and_sign_url": {
            "name": "_build_and_sign_url",
            "location": 496,
            "return": [
                "str",
                "dict",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "http_method": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "obj_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Collection[str]"
                ],
                "content_md5": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "content_type": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "canonical_ext_headers": [
                    "Optional[Dict[str, str]]",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/googlecloud/settings.py": {},
    "waterbutler-master/waterbutler/providers/googlecloud/utils.py": {
        "get_obj_name": {
            "name": "get_obj_name",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "bool",
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "path.Path",
                    "bytes"
                ],
                "is_folder": [
                    "bool",
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "path.Path",
                    "bytes"
                ]
            }
        },
        "build_path": {
            "name": "build_path",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "obj_name": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "is_folder": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "validate_path_or_name": {
            "name": "validate_path_or_name",
            "location": 45,
            "return": [
                "str",
                "pypi2nix.path.Path"
            ],
            "arguments": {
                "path_or_name": [
                    "str",
                    "Sequence[str]"
                ],
                "is_folder": [
                    "bool",
                    "List[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "build_url": {
            "name": "build_url",
            "location": 61,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "dict",
                "Exception",
                "str"
            ],
            "arguments": {
                "base": [
                    "dict",
                    "str",
                    "Union[str, bytes]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "decode_and_hexlify_hashes": {
            "name": "decode_and_hexlify_hashes",
            "location": 98,
            "return": [
                "str",
                "bool",
                "bytes",
                "int"
            ],
            "arguments": {
                "hash_str": [
                    "str"
                ]
            }
        },
        "build_canonical_ext_headers_str": {
            "name": "build_canonical_ext_headers_str",
            "location": 112,
            "return": [
                "str",
                "Optional[Mapping[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "headers": [
                    "dict",
                    "bool"
                ]
            }
        },
        "verify_raw_google_hash_header": {
            "name": "verify_raw_google_hash_header",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "google_hash": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "int",
                    "core.ICanonicalStorage"
                ]
            }
        },
        "get_multi_dict_from_python_dict": {
            "name": "get_multi_dict_from_python_dict",
            "location": 157,
            "return": [
                "dict",
                "Dict[str, str]",
                "List[str]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "resp_headers_dict": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "werkzeug.datastructures.MultiDict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/googlecloud/__init__.py": {},
    "waterbutler-master/waterbutler/providers/googledrive/metadata.py": {
        "BaseGoogleDriveMetadata.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "Optional[List[str]]"
                ],
                "path": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "BaseGoogleDriveMetadata.provider": {
            "name": "provider",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGoogleDriveMetadata.extra": {
            "name": "extra",
            "location": 18,
            "return": [
                "str",
                "tuple",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFolderMetadata.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "int"
                ],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "GoogleDriveFolderMetadata.id": {
            "name": "id",
            "location": 36,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFolderMetadata.name": {
            "name": "name",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFolderMetadata.path": {
            "name": "path",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFolderMetadata.materialized_path": {
            "name": "materialized_path",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFolderMetadata.export_name": {
            "name": "export_name",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.id": {
            "name": "id",
            "location": 65,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.name": {
            "name": "name",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.path": {
            "name": "path",
            "location": 77,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.materialized_path": {
            "name": "materialized_path",
            "location": 85,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.size": {
            "name": "size",
            "location": 93,
            "return": [
                "abilian.core.models.subjects.User",
                "bool",
                "str",
                "List[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.modified": {
            "name": "modified",
            "location": 98,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 102,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.content_type": {
            "name": "content_type",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.etag": {
            "name": "etag",
            "location": 110,
            "return": [
                "Callable[[T], bool]",
                "List[Union[int, Any]]",
                "List[Union[int, str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.extra": {
            "name": "extra",
            "location": 114,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.is_google_doc": {
            "name": "is_google_doc",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata.export_name": {
            "name": "export_name",
            "location": 132,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileMetadata._file_title": {
            "name": "_file_title",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileRevisionMetadata.created_utc": {
            "name": "created_utc",
            "location": 157,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileRevisionMetadata.etag": {
            "name": "etag",
            "location": 161,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileRevisionMetadata.extra": {
            "name": "extra",
            "location": 165,
            "return": [
                "Sequence[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveFileRevisionMetadata._file_title": {
            "name": "_file_title",
            "location": 174,
            "return": [
                "str",
                "List[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveRevision.version_identifier": {
            "name": "version_identifier",
            "location": 181,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveRevision.version": {
            "name": "version",
            "location": 185,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveRevision.modified": {
            "name": "modified",
            "location": 189,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/googledrive/provider.py": {
        "clean_query": {
            "name": "clean_query",
            "location": 23,
            "return": [
                "Callable[[KT], VT]",
                "str"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Union[os.PathLike, str]"
                ]
            }
        },
        "GoogleDriveProvider.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "int",
                    "IO[str]",
                    "bytes",
                    "cmk.utils.type_defs.HostName"
                ],
                "settings": [
                    "dict"
                ]
            }
        },
        "GoogleDriveProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveProvider.default_headers": {
            "name": "default_headers",
            "location": 133,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 136,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "int",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "GoogleDriveProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 139,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "GoogleDriveProvider._build_query": {
            "name": "_build_query",
            "location": 315,
            "return": [
                "str",
                "bool",
                "MutableMapping[str, Any]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "folder_id": [
                    "int"
                ],
                "title": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GoogleDriveProvider.path_from_metadata": {
            "name": "path_from_metadata",
            "location": 410,
            "return": [
                "waterbutler.providers.bitbuckepath.BitbucketPath",
                "waterbutler.providers.figshare.path.FigsharePath"
            ],
            "arguments": {
                "self": [],
                "parent_path": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "metadata": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "GoogleDriveProvider._build_upload_url": {
            "name": "_build_upload_url",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDriveProvider._serialize_item": {
            "name": "_serialize_item",
            "location": 417,
            "return": [
                "str",
                "qutebrowser.utils.usertypes.Backend",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "dict"
                ],
                "item": [
                    "str",
                    "dict",
                    "tartare.core.models.Contributor",
                    "Callable",
                    "Tuple[int, int]"
                ],
                "raw": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "GoogleDriveProvider._build_upload_metadata": {
            "name": "_build_upload_metadata",
            "location": 427,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "folder_id": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/googledrive/settings.py": {},
    "waterbutler-master/waterbutler/providers/googledrive/utils.py": {
        "is_docs_file": {
            "name": "is_docs_file",
            "location": 34,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[int, Set[str]]"
            ],
            "arguments": {
                "metadata": [
                    "dict",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "get_mimetype_from_ext": {
            "name": "get_mimetype_from_ext",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "ext": [
                    "str",
                    "Union[str, bytes]",
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "get_format": {
            "name": "get_format",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_extension": {
            "name": "get_extension",
            "location": 52,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "metadata": [
                    "str"
                ]
            }
        },
        "get_download_extension": {
            "name": "get_download_extension",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "metadata": [
                    "str"
                ]
            }
        },
        "get_export_link": {
            "name": "get_export_link",
            "location": 62,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/googledrive/__init__.py": {},
    "waterbutler-master/waterbutler/providers/onedrive/metadata.py": {
        "BaseOneDriveMetadata.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "Optional[List[str]]"
                ],
                "path_obj": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BaseOneDriveMetadata.provider": {
            "name": "provider",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOneDriveMetadata.materialized_path": {
            "name": "materialized_path",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOneDriveMetadata.extra": {
            "name": "extra",
            "location": 24,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, float]",
                "cmk.utils.type_defs.EventRule",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFolderMetadata.name": {
            "name": "name",
            "location": 35,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFolderMetadata.path": {
            "name": "path",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFolderMetadata.etag": {
            "name": "etag",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFolderMetadata.extra": {
            "name": "extra",
            "location": 47,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFileMetadata.name": {
            "name": "name",
            "location": 60,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFileMetadata.path": {
            "name": "path",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFileMetadata.size": {
            "name": "size",
            "location": 68,
            "return": [
                "cmk.utils.type_defs.UserId",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFileMetadata.modified": {
            "name": "modified",
            "location": 72,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFileMetadata.content_type": {
            "name": "content_type",
            "location": 76,
            "return": [
                "str",
                "Iterable[cmk.utils.type_defs.SectionName]",
                "dict",
                "Optional[qutebrowser.utils.urlmatch.UrlPattern]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFileMetadata.etag": {
            "name": "etag",
            "location": 83,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 87,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveRevisionMetadata.version_identifier": {
            "name": "version_identifier",
            "location": 94,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveRevisionMetadata.version": {
            "name": "version",
            "location": 98,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveRevisionMetadata.modified": {
            "name": "modified",
            "location": 102,
            "return": [
                "str",
                "Optional[float]",
                "raiden.utils.BlockIdentifier"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/onedrive/path.py": {
        "OneDrivePath.new_from_response": {
            "name": "new_from_response",
            "location": 15,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "Optional[Union[int, str]]",
                    "Optional[int]"
                ],
                "response": [
                    "int",
                    "dict",
                    "Union[bool, str]",
                    "bool",
                    "Dict[str, str]",
                    "str"
                ],
                "base_folder_id": [
                    "str",
                    "MutableMapping",
                    "int"
                ],
                "base_folder_metadata": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/onedrive/provider.py": {
        "OneDriveProvider.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "str",
                    "bool"
                ],
                "credentials": [
                    "dict",
                    "str",
                    "int",
                    "IO[str]",
                    "bytes"
                ],
                "settings": [
                    "Optional[Callable]",
                    "core.models.Subtask"
                ]
            }
        },
        "OneDriveProvider.default_headers": {
            "name": "default_headers",
            "location": 69,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveProvider.has_real_root": {
            "name": "has_real_root",
            "location": 78,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "asyncio.AbstractEventLoop"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 321,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveProvider.shares_storage_root": {
            "name": "shares_storage_root",
            "location": 324,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Awaitable[None]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "OneDriveProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 331,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "int",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "OneDriveProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 334,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "int",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "OneDriveProvider._build_graph_url": {
            "name": "_build_graph_url",
            "location": 517,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveProvider._build_graph_drive_url": {
            "name": "_build_graph_drive_url",
            "location": 520,
            "return": [
                "str",
                "Tuple[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveProvider._build_graph_item_url": {
            "name": "_build_graph_item_url",
            "location": 523,
            "return": [
                "str",
                "List[str]",
                "List[src.core.model.scripScript]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneDriveProvider._construct_metadata": {
            "name": "_construct_metadata",
            "location": 526,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Union[str, dict]",
                    "Dict[str, str]",
                    "TextIO",
                    "Dict[str, cerulean.path.Path]",
                    "waterbutler.core.path.WaterButlerPath",
                    "bool",
                    "Tuple[int, int]",
                    "Optional[Container[str]]"
                ],
                "path": [
                    "str",
                    "AbstractSet[str]",
                    "waterbutler.core.path.WaterButlerPath",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "OneDriveProvider._intra_move_copy_metadata": {
            "name": "_intra_move_copy_metadata",
            "location": 545,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, str]",
                    "Tuple[int, int]",
                    "dict",
                    "List[int]"
                ],
                "path": [
                    "str",
                    "Union[str, BinaryIO]",
                    "List[Tuple[int, str]]",
                    "List[int]",
                    "Type['Model']"
                ]
            }
        },
        "OneDriveProvider._build_range_header_for_upload": {
            "name": "_build_range_header_for_upload",
            "location": 777,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Optional[Iterable[str]]",
                    "str",
                    "Optional[int]"
                ],
                "end": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "total": [
                    "Optional[int]",
                    "str",
                    "Union[None, int, str]",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/onedrive/settings.py": {},
    "waterbutler-master/waterbutler/providers/onedrive/__init__.py": {},
    "waterbutler-master/waterbutler/providers/osfstorage/exceptions.py": {
        "OsfStorageQuotaExceededError.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/osfstorage/metadata.py": {
        "BaseOsfStorageMetadata.provider": {
            "name": "provider",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStorageItemMetadata.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "materialized": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseOsfStorageItemMetadata.name": {
            "name": "name",
            "location": 20,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStorageItemMetadata.path": {
            "name": "path",
            "location": 24,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStorageItemMetadata.materialized_path": {
            "name": "materialized_path",
            "location": 28,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageFileMetadata.modified": {
            "name": "modified",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageFileMetadata.modified_utc": {
            "name": "modified_utc",
            "location": 39,
            "return": [
                "Optional[List[Any]]",
                "str",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageFileMetadata.created_utc": {
            "name": "created_utc",
            "location": 54,
            "return": [
                "bool",
                "float",
                "Callable[..., None]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageFileMetadata.size": {
            "name": "size",
            "location": 69,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageFileMetadata.content_type": {
            "name": "content_type",
            "location": 73,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageFileMetadata.etag": {
            "name": "etag",
            "location": 77,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageFileMetadata.extra": {
            "name": "extra",
            "location": 81,
            "return": [
                "Optional[str]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageRevisionMetadata.modified": {
            "name": "modified",
            "location": 120,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageRevisionMetadata.version_identifier": {
            "name": "version_identifier",
            "location": 124,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageRevisionMetadata.version": {
            "name": "version",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfStorageRevisionMetadata.extra": {
            "name": "extra",
            "location": 132,
            "return": [
                "bool",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/osfstorage/provider.py": {
        "OSFStorageProvider.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "settings": [
                    "Optional[Iterable[str]]",
                    "dict",
                    "str",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "OSFStorageProvider.make_provider": {
            "name": "make_provider",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "OSFStorageProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSFStorageProvider.is_same_region": {
            "name": "is_same_region",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "OSFStorageProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 160,
            "return": [
                "Dict[str, Any]",
                "Dict[str, int]",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "OSFStorageProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 163,
            "return": [
                "Dict[str, Any]",
                "Dict[str, int]",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "OSFStorageProvider.build_signed_url": {
            "name": "build_signed_url",
            "location": 176,
            "return": [
                "dict",
                "str",
                "Exception",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "int",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "bytes",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ],
                "data": [
                    "dict",
                    "Sequence",
                    "Mapping[str, Any]",
                    "Type['Declared']",
                    "str",
                    "MutableMapping"
                ],
                "params": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "int",
                    "Union[None, dict]",
                    "dict"
                ],
                "ttl": [
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/osfstorage/settings.py": {},
    "waterbutler-master/waterbutler/providers/osfstorage/__init__.py": {},
    "waterbutler-master/waterbutler/providers/owncloud/metadata.py": {
        "BaseOwnCloudMetadata.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "href": [
                    "int",
                    "bool",
                    "float"
                ],
                "folder": [
                    "int",
                    "bool",
                    "float"
                ],
                "attributes": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseOwnCloudMetadata.provider": {
            "name": "provider",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOwnCloudMetadata.name": {
            "name": "name",
            "location": 17,
            "return": [
                "int",
                "bytes",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOwnCloudMetadata.path": {
            "name": "path",
            "location": 21,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOwnCloudMetadata.size": {
            "name": "size",
            "location": 26,
            "return": [
                "str",
                "Optional[\"LocalizedString\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOwnCloudMetadata.etag": {
            "name": "etag",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOwnCloudMetadata.modified": {
            "name": "modified",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOwnCloudMetadata.created_utc": {
            "name": "created_utc",
            "location": 40,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnCloudFileMetadata.content_type": {
            "name": "content_type",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnCloudFolderMetadata.content_type": {
            "name": "content_type",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnCloudFileRevisionMetadata.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "modified": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OwnCloudFileRevisionMetadata.from_metadata": {
            "name": "from_metadata",
            "location": 68,
            "return": [
                "str",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "metadata": [
                    "bool",
                    "str",
                    "Tuple[List[str], List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "OwnCloudFileRevisionMetadata.version_identifier": {
            "name": "version_identifier",
            "location": 72,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnCloudFileRevisionMetadata.version": {
            "name": "version",
            "location": 76,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnCloudFileRevisionMetadata.modified": {
            "name": "modified",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/owncloud/provider.py": {
        "OwnCloudProvider.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "dict",
                    "str"
                ],
                "settings": [
                    "dict",
                    "str"
                ]
            }
        },
        "OwnCloudProvider.connector": {
            "name": "connector",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnCloudProvider._webdav_url_": {
            "name": "_webdav_url_",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnCloudProvider.shares_storage_root": {
            "name": "shares_storage_root",
            "location": 64,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Awaitable[None]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "OwnCloudProvider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnCloudProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 269,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "bool",
                    "str",
                    "int"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]",
                    "path.Path"
                ]
            }
        },
        "OwnCloudProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 272,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "bool",
                    "str",
                    "int"
                ],
                "path": [
                    "waterbutler.core.path.WaterButlerPath",
                    "str",
                    "bool",
                    "Optional[Tuple[str, ...]]",
                    "path.Path"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/owncloud/settings.py": {},
    "waterbutler-master/waterbutler/providers/owncloud/utils.py": {
        "strip_dav_path": {
            "name": "strip_dav_path",
            "location": 8,
            "return": [
                "str",
                "list",
                "List[Tuple[int]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/owncloud/__init__.py": {},
    "waterbutler-master/waterbutler/providers/s3/metadata.py": {
        "S3Metadata.provider": {
            "name": "provider",
            "location": 9,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Metadata.name": {
            "name": "name",
            "location": 13,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadataHeaders.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "headers": [
                    "bool",
                    "T",
                    "dict",
                    "str",
                    "Exception",
                    "Dict[int, Dict[int, Any]]"
                ]
            }
        },
        "S3FileMetadataHeaders.path": {
            "name": "path",
            "location": 26,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadataHeaders.size": {
            "name": "size",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadataHeaders.content_type": {
            "name": "content_type",
            "location": 34,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadataHeaders.modified": {
            "name": "modified",
            "location": 38,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadataHeaders.created_utc": {
            "name": "created_utc",
            "location": 42,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadataHeaders.etag": {
            "name": "etag",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadataHeaders.extra": {
            "name": "extra",
            "location": 50,
            "return": [
                "Optional[int]",
                "str",
                "dict",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadata.path": {
            "name": "path",
            "location": 64,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadata.size": {
            "name": "size",
            "location": 68,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadata.modified": {
            "name": "modified",
            "location": 72,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadata.created_utc": {
            "name": "created_utc",
            "location": 76,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadata.content_type": {
            "name": "content_type",
            "location": 80,
            "return": [
                "Optional[bool]",
                "Optional[List[str]]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadata.etag": {
            "name": "etag",
            "location": 84,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FileMetadata.extra": {
            "name": "extra",
            "location": 88,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FolderKeyMetadata.name": {
            "name": "name",
            "location": 101,
            "return": [
                "Callable[[str, Any], Tuple[bytes, int]]",
                "str",
                "dict",
                "Tuple[int, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FolderKeyMetadata.path": {
            "name": "path",
            "location": 105,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FolderMetadata.name": {
            "name": "name",
            "location": 112,
            "return": [
                "int",
                "bytes",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3FolderMetadata.path": {
            "name": "path",
            "location": 116,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Revision.version_identifier": {
            "name": "version_identifier",
            "location": 124,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Revision.version": {
            "name": "version",
            "location": 128,
            "return": [
                "str",
                "abilian.core.models.subjects.Principal",
                "int",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Revision.modified": {
            "name": "modified",
            "location": 134,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Revision.extra": {
            "name": "extra",
            "location": 138,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/providers/s3/provider.py": {
        "S3Provider.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "dict",
                    "relay.streams.Subscription",
                    "Optional[Dict[str, Any]]",
                    "relay.streams.Event"
                ],
                "credentials": [
                    "Optional[Iterable[str]]",
                    "dict",
                    "app.config.HealthCheckConfig"
                ],
                "settings": [
                    "Optional[Iterable[str]]",
                    "cerise.config.Config",
                    "config.Config",
                    "core.Config",
                    "str",
                    "backup.config.Config",
                    "dict"
                ]
            }
        },
        "S3Provider.can_duplicate_names": {
            "name": "can_duplicate_names",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Provider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 106,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "Iterable[str]",
                    "str",
                    "Iterator[str]"
                ],
                "path": [
                    "Iterable[str]",
                    "str",
                    "Iterator[str]"
                ]
            }
        },
        "S3Provider.can_intra_move": {
            "name": "can_intra_move",
            "location": 109,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "Iterable[str]",
                    "str",
                    "Iterator[str]"
                ],
                "path": [
                    "Iterable[str]",
                    "str",
                    "Iterator[str]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/providers/s3/settings.py": {},
    "waterbutler-master/waterbutler/providers/s3/__init__.py": {},
    "waterbutler-master/waterbutler/server/app.py": {
        "sig_handler": {
            "name": "sig_handler",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "sig": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "api_to_handlers": {
            "name": "api_to_handlers",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "api": [
                    "str",
                    "int"
                ]
            }
        },
        "make_app": {
            "name": "make_app",
            "location": 43,
            "return": [
                "\"App\""
            ],
            "arguments": {
                "debug": [
                    "dict",
                    "asyncio.AbstractEventLoop",
                    "bool"
                ]
            }
        },
        "serve": {
            "name": "serve",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sig_handler.stop_loop": {
            "name": "stop_loop",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "waterbutler-master/waterbutler/server/auth.py": {
        "AuthHandler.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/server/handlers.py": {
        "StatusHandler.get": {
            "name": "get",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/server/settings.py": {},
    "waterbutler-master/waterbutler/server/utils.py": {
        "parse_request_range": {
            "name": "parse_request_range",
            "location": 28,
            "return": [
                "bool",
                "dict",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "range_header": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CORsMixin._cross_origin_is_allowed": {
            "name": "_cross_origin_is_allowed",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CORsMixin.set_default_headers": {
            "name": "set_default_headers",
            "location": 84,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CORsMixin.options": {
            "name": "options",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilMixin.set_status": {
            "name": "set_status",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "reason": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/server/__init__.py": {},
    "waterbutler-master/waterbutler/server/api/__init__.py": {},
    "waterbutler-master/waterbutler/server/api/v0/copy.py": {},
    "waterbutler-master/waterbutler/server/api/v0/core.py": {
        "list_or_value": {
            "name": "list_or_value",
            "location": 21,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "str",
                "Optional[float]",
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "list",
                    "str",
                    "float",
                    "Union[list, str]",
                    "Union[str, list]",
                    "List[List[Any]]",
                    "List[int]"
                ]
            }
        },
        "BaseHandler.write_error": {
            "name": "write_error",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "str"
                ],
                "exc_info": [
                    "ToContainerType[static_frame.core.node_selector.TContainer]",
                    "bytes",
                    "Dict[int, dict]",
                    "Callable",
                    "Optional[int]"
                ]
            }
        },
        "BaseProviderHandler._send_hook": {
            "name": "_send_hook",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ],
                "metadata": [
                    "str",
                    "dict"
                ],
                "path": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseCrossProviderHandler.json": {
            "name": "json",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCrossProviderHandler._send_hook": {
            "name": "_send_hook",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "bool",
                    "float",
                    "tartare.core.contexContributorExportContext",
                    "List[str]"
                ],
                "metadata": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/server/api/v0/crud.py": {},
    "waterbutler-master/waterbutler/server/api/v0/metadata.py": {},
    "waterbutler-master/waterbutler/server/api/v0/move.py": {},
    "waterbutler-master/waterbutler/server/api/v0/revisions.py": {},
    "waterbutler-master/waterbutler/server/api/v0/zip.py": {},
    "waterbutler-master/waterbutler/server/api/v0/__init__.py": {},
    "waterbutler-master/waterbutler/server/api/v1/core.py": {
        "BaseHandler.as_entry": {
            "name": "as_entry",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Match[str]",
                    "Callable[[], Any]"
                ]
            }
        },
        "BaseHandler.write_error": {
            "name": "write_error",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "Union[int, float]",
                    "str"
                ],
                "exc_info": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseHandler.log_exception": {
            "name": "log_exception",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "T",
                    "werkzeug.exceptions.InternalServerError",
                    "bool"
                ],
                "value": [
                    "Callable[..., None]",
                    "Callable[..., T]",
                    "int",
                    "Callable"
                ],
                "tb": [
                    "str",
                    "T",
                    "werkzeug.exceptions.InternalServerError",
                    "bool"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/server/api/v1/__init__.py": {},
    "waterbutler-master/waterbutler/server/api/v1/provider/create.py": {
        "CreateMixin.prevalidate_put": {
            "name": "prevalidate_put",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/server/api/v1/provider/metadata.py": {},
    "waterbutler-master/waterbutler/server/api/v1/provider/movecopy.py": {
        "MoveCopyMixin.json": {
            "name": "json",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveCopyMixin.prevalidate_post": {
            "name": "prevalidate_post",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveCopyMixin.build_args": {
            "name": "build_args",
            "location": 43,
            "return": [
                "dict",
                "Iterable[str]",
                "Sequence[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "waterbutler-master/waterbutler/server/api/v1/provider/ratelimiting.py": {
        "RateLimitingMixin.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimitingMixin.rate_limit": {
            "name": "rate_limit",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimitingMixin.get_auth_naive": {
            "name": "get_auth_naive",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimitingMixin._obfuscate_creds": {
            "name": "_obfuscate_creds",
            "location": 122,
            "return": [
                "str",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "creds": [
                    "str"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/server/api/v1/provider/__init__.py": {
        "list_or_value": {
            "name": "list_or_value",
            "location": 29,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "str",
                "Optional[float]",
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "list",
                    "str",
                    "float",
                    "Union[list, str]",
                    "Union[str, list]",
                    "List[List[Any]]",
                    "List[int]"
                ]
            }
        },
        "ProviderHandler.on_finish": {
            "name": "on_finish",
            "location": 163,
            "return": [
                "core.models.Resource",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderHandler._send_hook": {
            "name": "_send_hook",
            "location": 206,
            "return": [
                "core.models.Resource",
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bool"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/tasks/app.py": {
        "register_signal": {
            "name": "register_signal",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "register_signal.process_failure_signal": {
            "name": "process_failure_signal",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "List[str]"
                ],
                "task_id": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/tasks/copy.py": {},
    "waterbutler-master/waterbutler/tasks/core.py": {
        "ensure_event_loop": {
            "name": "ensure_event_loop",
            "location": 16,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "__coroutine_unwrapper": {
            "name": "__coroutine_unwrapper",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "backgroundify": {
            "name": "backgroundify",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "adhoc_file_backend": {
            "name": "adhoc_file_backend",
            "location": 62,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "bytes",
                    "list"
                ],
                "was_bound": [
                    "bool",
                    "bytes",
                    "list"
                ],
                "basepath": [
                    "bool",
                    "bytes",
                    "list"
                ]
            }
        },
        "celery_task": {
            "name": "celery_task",
            "location": 84,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[T], bool]",
                    "T"
                ]
            }
        },
        "__coroutine_unwrapper.wrapped": {
            "name": "wrapped",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "adhoc_file_backend.wrapped": {
            "name": "wrapped",
            "location": 66,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Callable[[Any], bool]",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "waterbutler-master/waterbutler/tasks/exceptions.py": {},
    "waterbutler-master/waterbutler/tasks/move.py": {},
    "waterbutler-master/waterbutler/tasks/settings.py": {},
    "waterbutler-master/waterbutler/tasks/__init__.py": {}
}
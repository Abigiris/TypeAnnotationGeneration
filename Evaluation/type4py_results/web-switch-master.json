{
    "web-switch-master/setup.py": {},
    "web-switch-master/tests/client_test.py": {
        "get_server_fixture": {
            "name": "get_server_fixture",
            "location": 41,
            "return": [
                "str",
                "Tuple[str, str]",
                "Callable[[KT], VT]",
                "bool"
            ],
            "arguments": {
                "free_port": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_server_fixture.func": {
            "name": "func",
            "location": 42,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/tests/common.py": {
        "get_server_fixture": {
            "name": "get_server_fixture",
            "location": 33,
            "return": [
                "Callable[[], ChannelServerBase]"
            ],
            "arguments": {
                "free_port": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "filter_records": {
            "name": "filter_records",
            "location": 47,
            "return": [
                "str",
                "Optional[Any]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "records": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "name_pattern": [
                    "str"
                ],
                "msg_pattern": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "find_free_port": {
            "name": "find_free_port",
            "location": 65,
            "return": [
                "Callable",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "free_port": {
            "name": "free_port",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_client": {
            "name": "get_client",
            "location": 82,
            "return": [
                "bool",
                "BaseException",
                "int",
                "str"
            ],
            "arguments": {
                "free_port": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "ChannelServerBase.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "bool",
                    "str"
                ]
            }
        },
        "ChannelServerBase.__enter__": {
            "name": "__enter__",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelServerBase.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "get_client.func": {
            "name": "func",
            "location": 83,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "TimeBox.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "Tuple[List, List, List]",
                    "bool",
                    "dict",
                    "int"
                ],
                "slack": [
                    "str",
                    "Tuple[List, List, List]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "TimeBox.timelimit": {
            "name": "timelimit",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeBox.elapsed": {
            "name": "elapsed",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeBox.within_timelimit": {
            "name": "within_timelimit",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeBox.__enter__": {
            "name": "__enter__",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeBox.__exit__": {
            "name": "__exit__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "web-switch-master/tests/conftest.py": {},
    "web-switch-master/tests/server_test.py": {
        "get_server_fixture": {
            "name": "get_server_fixture",
            "location": 51,
            "return": [
                "str",
                "Tuple[str, str]",
                "Callable[[KT], VT]",
                "bool"
            ],
            "arguments": {
                "free_port": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "UniqueError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTestingServer.action_raise_unique_error": {
            "name": "action_raise_unique_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "ChannelClient",
                    "webswitch.channel_server.Conversation",
                    "bool"
                ]
            }
        },
        "ServerTestingServer.action_nonasync_return": {
            "name": "action_nonasync_return",
            "location": 41,
            "return": [
                "str",
                "OrderedDict",
                "list",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "ChannelClient",
                    "bool",
                    "str",
                    "int",
                    "webswitch.channel_server.Conversation"
                ]
            }
        },
        "get_server_fixture.func": {
            "name": "func",
            "location": 52,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {}
        },
        "test_response_dispatch_do_cancel.thread_main": {
            "name": "thread_main",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/tests/util_test.py": {
        "test_message_queue": {
            "name": "test_message_queue",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_map": {
            "name": "test_index_map",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/tests/__init__.py": {},
    "web-switch-master/webswitch/channel_server.py": {
        "cli_main": {
            "name": "cli_main",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ChannelServerError.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict"
                ]
            }
        },
        "ChannelServerActionError.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "ChannelServerResponseError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes"
                ],
                "response": [
                    "str",
                    "List[Callable]",
                    "List[str]",
                    "Sequence[str]",
                    "float",
                    "int"
                ],
                "orig_exc": [
                    "Optional[Exception]",
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[Dict]",
                    "List[List[int]]"
                ]
            }
        },
        "ChannelServerResponseError.set_guid": {
            "name": "set_guid",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "Optional[int]",
                    "Callable",
                    "dict",
                    "Optional[Exception]",
                    "Sequence[int]"
                ],
                "response": [
                    "Optional[int]",
                    "Callable",
                    "dict",
                    "Optional[Exception]",
                    "Sequence[int]"
                ]
            }
        },
        "ChannelClient.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_server": [
                    "int",
                    "Mapping[str, Any]",
                    "dict",
                    "str",
                    "Union[None, int]"
                ],
                "conn": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "ChannelClient.get_room_key": {
            "name": "get_room_key",
            "location": 76,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelClient.set_room_key": {
            "name": "set_room_key",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "ChannelClient.try_send": {
            "name": "try_send",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "message.Message",
                    "uuid.UUID",
                    "int"
                ],
                "response_id": [
                    "Optional[uuid.UUID]",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "ChannelClient.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelClient.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conversation.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ],
                "original": [
                    "str",
                    "float"
                ]
            }
        },
        "Conversation.get_await_dispatch": {
            "name": "get_await_dispatch",
            "location": 130,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ],
                "max_queue_size": [
                    "int",
                    "str"
                ]
            }
        },
        "ChannelServer.get_logger": {
            "name": "get_logger",
            "location": 197,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer.get_next_client_id": {
            "name": "get_next_client_id",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer._add_connection": {
            "name": "_add_connection",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "connection": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[Callable, str]"
                ],
                "room": [
                    "int",
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "Optional[List[str]]"
                ],
                "other_data": [
                    "str"
                ]
            }
        },
        "ChannelServer._remove_connection": {
            "name": "_remove_connection",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "dict"
                ]
            }
        },
        "ChannelServer._get_client": {
            "name": "_get_client",
            "location": 258,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "Union[bool, str]",
                    "int"
                ]
            }
        },
        "ChannelServer.argument_hook": {
            "name": "argument_hook",
            "location": 312,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Union[str, List]"
                ],
                "action": [
                    "logging.Logger",
                    "str",
                    "bool",
                    "List[Exception]"
                ]
            }
        },
        "ChannelServer.action_complete_handler": {
            "name": "action_complete_handler",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "List[str]"
                ],
                "action_name": [
                    "str"
                ],
                "result": [
                    "str"
                ],
                "response_id": [
                    "uuid.UUID",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ChannelServer.on_start": {
            "name": "on_start",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer.on_stop": {
            "name": "on_stop",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelServer.stop_serve": {
            "name": "stop_serve",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "ChannelServer.on_new": {
            "name": "on_new",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "Optional[str]",
                    "dict"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "ChannelServer.on_remove": {
            "name": "on_remove",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "int",
                    "argparse.Namespace"
                ]
            }
        },
        "ChannelServer.on_message": {
            "name": "on_message",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "bytes",
                    "Type",
                    "Type[T]",
                    "Union[dict, list]",
                    "int"
                ],
                "message": [
                    "starlette.types.Message"
                ]
            }
        },
        "ChannelServer.action_whoami": {
            "name": "action_whoami",
            "location": 466,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Callable",
                    "int"
                ]
            }
        },
        "ChannelServer.action_enum_clients": {
            "name": "action_enum_clients",
            "location": 481,
            "return": [
                "int",
                "\"Step\""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "web-switch-master/webswitch/client.py": {
        "TimestampedList.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.__delslice__": {
            "name": "__delslice__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "j": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "TimestampedList.__delitem__": {
            "name": "__delitem__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Optional[Union[str, Any]]",
                    "float",
                    "Union[int, slice]"
                ]
            }
        },
        "TimestampedList.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.append": {
            "name": "append",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "mypy.types.Instance",
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "TimestampedList.remove_old": {
            "name": "remove_old",
            "location": 44,
            "return": [
                "int",
                "str",
                "float",
                "Optional[int]",
                "slice",
                "Union[int, List]"
            ],
            "arguments": {
                "self": [],
                "max_age": [
                    "int"
                ]
            }
        },
        "TimestampedList.get": {
            "name": "get",
            "location": 55,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.oldest_ts": {
            "name": "oldest_ts",
            "location": 60,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.__getitem__": {
            "name": "__getitem__",
            "location": 66,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "Optional[Union[str, Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "TimestampedList.__len__": {
            "name": "__len__",
            "location": 69,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.__bool__": {
            "name": "__bool__",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampedList.get_list_copy": {
            "name": "get_list_copy",
            "location": 75,
            "return": [
                "List[str]",
                "str",
                "list",
                "types.ModuleType"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageQueues.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_count": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "max_message_age": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "MessageQueues.count": {
            "name": "count",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageQueues._remove_oldest_by_count": {
            "name": "_remove_oldest_by_count",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "str",
                    "Callable[[T], bool]"
                ]
            }
        },
        "MessageQueues.remove_oldest": {
            "name": "remove_oldest",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_age": [
                    "int",
                    "dict"
                ]
            }
        },
        "MessageQueues.add": {
            "name": "add",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "guid": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "message": [
                    "message.Message",
                    "float",
                    "mypy.types.Instance",
                    "int"
                ]
            }
        },
        "MessageQueues.get": {
            "name": "get",
            "location": 130,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Optional[mypy.types.Type]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "guid": [
                    "int",
                    "Dict[str, bool]",
                    "apistar.types.WSGIEnviron",
                    "str"
                ]
            }
        },
        "MessageQueues.get_messages": {
            "name": "get_messages",
            "location": 145,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[mypy.types.Type]",
                "bool",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "guid": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "MessageQueues.get_guids": {
            "name": "get_guids",
            "location": 151,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws_url": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "max_queued_messages": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Client.id": {
            "name": "id",
            "location": 185,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.client_id": {
            "name": "client_id",
            "location": 189,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.url": {
            "name": "url",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client._extract_guid": {
            "name": "_extract_guid",
            "location": 228,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "message": [
                    "int",
                    "message.Message",
                    "str",
                    "bytes",
                    "asyncio.streams.StreamWriter"
                ]
            }
        },
        "Client.get_message": {
            "name": "get_message",
            "location": 292,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "guid": [
                    "str",
                    "apistar.types.WSGIEnviron",
                    "Optional[str]"
                ]
            }
        },
        "Client.convo": {
            "name": "convo",
            "location": 296,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Convo.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "telethon.tl.types.Channel",
                    "str",
                    "Dict[str, Any]"
                ],
                "client": [
                    "str"
                ]
            }
        },
        "Convo.id": {
            "name": "id",
            "location": 338,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Convo.guid": {
            "name": "guid",
            "location": 342,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Convo.action": {
            "name": "action",
            "location": 346,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Convo.cancel_expects": {
            "name": "cancel_expects",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnrequitedException.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ResponseException.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "ResponseException.__repr__": {
            "name": "__repr__",
            "location": 464,
            "return": [
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseException.__str__": {
            "name": "__str__",
            "location": 468,
            "return": [
                "str",
                "Optional[int]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "web-switch-master/webswitch/dispatch.py": {
        "add_action": {
            "name": "add_action",
            "location": 812,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "action_name": [
                    "bool",
                    "str",
                    "int"
                ],
                "exclusive_async": [
                    "bool",
                    "str",
                    "int"
                ],
                "params": [
                    "bool",
                    "str",
                    "int"
                ],
                "intrinsic_params": [
                    "bool",
                    "str",
                    "int"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ParameterSet.all": {
            "name": "all",
            "location": 34,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveAction.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "bool",
                    "float"
                ],
                "provider": [
                    "Optional[\"Environment\"]",
                    "Optional[int]"
                ],
                "action_future": [
                    "Optional[str]",
                    "Optional[int]",
                    "T",
                    "str"
                ]
            }
        },
        "ActiveAction.get_ad_future": {
            "name": "get_ad_future",
            "location": 57,
            "return": [
                "Optional[int]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveAction.cancel_all": {
            "name": "cancel_all",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Callable",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "common_params": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Hashable",
                    "str"
                ],
                "exception_handler": [
                    "str",
                    "bool",
                    "int"
                ],
                "complete_handler": [
                    "str",
                    "bool",
                    "int"
                ],
                "argument_hook": [
                    "bool",
                    "int",
                    "pypi2nix.logger.Logger",
                    "list"
                ],
                "common_async_params": [
                    "Iterable[T]",
                    "bool",
                    "int",
                    "Hashable",
                    "str"
                ]
            }
        },
        "ResponseDispatcher.__repr__": {
            "name": "__repr__",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher.__str__": {
            "name": "__str__",
            "location": 209,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher.start": {
            "name": "start",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher.stop": {
            "name": "stop",
            "location": 224,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Dict[int, dict]",
                    "Type"
                ]
            }
        },
        "ResponseDispatcher.cancel_action_by_source": {
            "name": "cancel_action_by_source",
            "location": 308,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Literal"
                ]
            }
        },
        "ResponseDispatcher._build_actions": {
            "name": "_build_actions",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDispatcher._add_active_action": {
            "name": "_add_active_action",
            "location": 379,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "action": [
                    "Dict[str, str]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ],
                "provider": [
                    "Dict[str, str]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "ResponseDispatcher.remove_active_by_action": {
            "name": "remove_active_by_action",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "guid": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "ResponseDispatcher.remove_active_action": {
            "name": "remove_active_action",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active_action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ResponseDispatcher._try_get_await_dispatch": {
            "name": "_try_get_await_dispatch",
            "location": 429,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "bool"
                ],
                "guid": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ResponseDispatcher._validate_param_set": {
            "name": "_validate_param_set",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Iterable[str]",
                    "str",
                    "tuple"
                ],
                "param_set": [
                    "Dict[str, str]",
                    "bool",
                    "Tuple[List[int], List[int]]",
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "ResponseDispatcher._verify_exposed_arguments": {
            "name": "_verify_exposed_arguments",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "action": [
                    "Callable",
                    "T"
                ],
                "args": []
            }
        },
        "ResponseDispatcher._verify_full_arguments": {
            "name": "_verify_full_arguments",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterator[str]"
                ],
                "action_name": [
                    "str"
                ],
                "params": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[int, List[int]]",
                    "Tuple[int, str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "args": []
            }
        },
        "ResponseDispatcher.await_dispatch": {
            "name": "await_dispatch",
            "location": 488,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "await_dispatch": [
                    "str",
                    "int",
                    "asyncio.AbstractEventLoop",
                    "List[int]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "params": [
                    "str",
                    "int",
                    "asyncio.AbstractEventLoop",
                    "List[int]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "timeout": [
                    "str",
                    "int",
                    "asyncio.AbstractEventLoop",
                    "List[int]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "ResponseDispatcher._ensure_exclusive": {
            "name": "_ensure_exclusive",
            "location": 540,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "source": [
                    "str",
                    "bool"
                ]
            }
        },
        "ResponseDispatcher.dispatch": {
            "name": "dispatch",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "action_name": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "args": [],
                "response_id": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "add_action.decorator": {
            "name": "decorator",
            "location": 833,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "dict",
                    "T"
                ]
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "func": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "func_params": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "params": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "intrinsic_params": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "is_coro": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "has_kwargs": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "exclusive_async": [
                    "float",
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "timeout": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Action.get_exposed_params": {
            "name": "get_exposed_params",
            "location": 927,
            "return": [
                "bool",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.clone": {
            "name": "clone",
            "location": 930,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.get_func_params": {
            "name": "get_func_params",
            "location": 933,
            "return": [
                "str",
                "Dict[str, Any]",
                "Tuple[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.__repr__": {
            "name": "__repr__",
            "location": 936,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.__str__": {
            "name": "__str__",
            "location": 939,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAwaitDispatch.get_await_dispatch": {
            "name": "get_await_dispatch",
            "location": 948,
            "return": [
                "'AwaitDispatch'"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAwaitDispatch.__call__": {
            "name": "__call__",
            "location": 951,
            "return": [
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bytes",
                    "Callable"
                ],
                "timeout": [
                    "bytes",
                    "Callable"
                ]
            }
        },
        "AwaitDispatch.__init__": {
            "name": "__init__",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "Optional[str]",
                    "str",
                    "Sequence[int]",
                    "int",
                    "bool"
                ],
                "source": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "action_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "default_params": [
                    "Optional[str]",
                    "str",
                    "Sequence[int]",
                    "int",
                    "bool"
                ],
                "guid": [
                    "Optional[str]",
                    "str",
                    "Sequence[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "AwaitDispatch.mark_removed": {
            "name": "mark_removed",
            "location": 978,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.remove_and_cancel_timeout": {
            "name": "remove_and_cancel_timeout",
            "location": 981,
            "return": [
                "int",
                "Union[int, slice]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.cancel_timeout": {
            "name": "cancel_timeout",
            "location": 991,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.set_timeout_future": {
            "name": "set_timeout_future",
            "location": 996,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "str",
                    "int",
                    "List[List[int]]",
                    "Callable"
                ]
            }
        },
        "AwaitDispatch.set": {
            "name": "set",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": [
                    "bool",
                    "float"
                ],
                "params": [
                    "bool",
                    "float"
                ]
            }
        },
        "AwaitDispatch.get_current_future": {
            "name": "get_current_future",
            "location": 1003,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.get_current_params": {
            "name": "get_current_params",
            "location": 1006,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.__call__": {
            "name": "__call__",
            "location": 1009,
            "return": [
                "str",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Optional[float]",
                    "bool",
                    "Optional[dict]",
                    "Sequence[str]",
                    "str"
                ],
                "timeout": [
                    "bytes",
                    "Callable"
                ]
            }
        },
        "AwaitDispatch.__repr__": {
            "name": "__repr__",
            "location": 1013,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.__str__": {
            "name": "__str__",
            "location": 1016,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitDispatch.get_await_dispatch": {
            "name": "get_await_dispatch",
            "location": 1019,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DispatchError.__init__": {
            "name": "__init__",
            "location": 1024,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DispatchError.__str__": {
            "name": "__str__",
            "location": 1027,
            "return": [
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DispatchArgumentError.__init__": {
            "name": "__init__",
            "location": 1048,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument_name": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "DispatchMissingArgumentError.__init__": {
            "name": "__init__",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "ResponseDispatcher.cancel_action_by_source.callback": {
            "name": "callback",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher.await_dispatch.create_timeout_callback": {
            "name": "create_timeout_callback",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher.dispatch.done_callback": {
            "name": "done_callback",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "event_manager": [
                    "bool",
                    "bytes",
                    "str",
                    "int"
                ],
                "done_future": []
            }
        },
        "ResponseDispatcher.dispatch.remove_await_callback": {
            "name": "remove_await_callback",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher.dispatch.remove_active_callback": {
            "name": "remove_active_callback",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher.dispatch.set_future_result_callback": {
            "name": "set_future_result_callback",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ResponseDispatcher._ensure_exclusive.cancel_callback": {
            "name": "cancel_callback",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/webswitch/event_loop.py": {
        "EventLoopManager.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_async_func": [
                    "Type",
                    "Callable[..., Awaitable]",
                    "bool"
                ],
                "shutdown_async_func": [
                    "Type",
                    "Callable[..., Awaitable]",
                    "bool"
                ],
                "loop": [
                    "bool",
                    "Optional[asyncio.AbstractEventLoop]",
                    "float",
                    "Iterable"
                ],
                "executor": [
                    "bool",
                    "Optional[asyncio.AbstractEventLoop]",
                    "float",
                    "Iterable"
                ]
            }
        },
        "EventLoopManager.run": {
            "name": "run",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventLoopManager.join": {
            "name": "join",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "EventLoopManager.wait_result": {
            "name": "wait_result",
            "location": 143,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventLoopManager.shutdown_loop": {
            "name": "shutdown_loop",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventLoopManager.run_coroutine_threadsafe": {
            "name": "run_coroutine_threadsafe",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "coro": [
                    "str",
                    "Coroutine",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "EventLoopManager.call_soon_threadsafe": {
            "name": "call_soon_threadsafe",
            "location": 189,
            "return": [
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "logging.LogRecord",
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "web-switch-master/webswitch/index_map.py": {
        "IndexMap.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.add": {
            "name": "add",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T",
                    "Iterable[T]",
                    "Union[int, slice]",
                    "str",
                    "dict"
                ]
            }
        },
        "IndexMap.__len__": {
            "name": "__len__",
            "location": 37,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.__bool__": {
            "name": "__bool__",
            "location": 40,
            "return": [
                "bool",
                "str",
                "Sequence",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.remove": {
            "name": "remove",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T",
                    "List[T]",
                    "Sequence[str]",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "IndexMap.lookup": {
            "name": "lookup",
            "location": 58,
            "return": [
                "Set[str]",
                "List[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.lookup_one": {
            "name": "lookup_one",
            "location": 84,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "Union[List, Tuple]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.try_lookup_one": {
            "name": "try_lookup_one",
            "location": 94,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexMap.__iter__": {
            "name": "__iter__",
            "location": 104,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "web-switch-master/webswitch/logger.py": {},
    "web-switch-master/webswitch/message.py": {
        "MessageJSONEncoder.default": {
            "name": "default",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Optional[Dict]",
                    "Optional[Dict[str, Any]]"
                ],
                "success": [
                    "bool",
                    "Optional[bool]",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "Callable"
                ],
                "error": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "dict"
                ],
                "error_data": [
                    "Optional[Dict]",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "Message.load": {
            "name": "load",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Sequence",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Message.verify_reserved_use": {
            "name": "verify_reserved_use",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Message.error_from_exc": {
            "name": "error_from_exc",
            "location": 65,
            "return": [
                "int",
                "Tuple[str, str]",
                "Callable[..., None]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "Union[int, bytes]"
                ],
                "exc": [
                    "BaseException",
                    "str",
                    "Type['Declared']"
                ]
            }
        },
        "Message._render_tags": {
            "name": "_render_tags",
            "location": 86,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.extend": {
            "name": "extend",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.clone": {
            "name": "clone",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.json": {
            "name": "json",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "web-switch-master/webswitch/__init__.py": {},
    "web-switch-master/webswitch/router/connection.py": {
        "ConnectionList.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.generate_id": {
            "name": "generate_id",
            "location": 18,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.add": {
            "name": "add",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "List[str]",
                    "list",
                    "bytes",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "ConnectionList.remove": {
            "name": "remove",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ConnectionList.__bool__": {
            "name": "__bool__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.copy": {
            "name": "copy",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionList.close": {
            "name": "close",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "str",
                    "Optional[str]",
                    "IO[Any]"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn_list": [
                    "str"
                ],
                "event_loop": [
                    "asyncio.AbstractEventLoop",
                    "Coroutine[Any, Any, Any]",
                    "aioquic.asyncio.QuicConnectionProtocol",
                    "asyncio.Task",
                    "Optional[float]"
                ],
                "ws": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "Connection.close_issued": {
            "name": "close_issued",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.copy_to_subclass": {
            "name": "copy_to_subclass",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subclassed_object": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Connection.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 124,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "reason": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Connection.close.callback": {
            "name": "callback",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "web-switch-master/webswitch/router/errors.py": {
        "RouterError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_types": [
                    "bool",
                    "Type[T]"
                ],
                "message": [
                    "int",
                    "bool",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "Sequence"
                ]
            }
        },
        "RouterError.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterError.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterResponseError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[dict]"
                ]
            }
        },
        "RouterConnectionError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "RouterServerError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        }
    },
    "web-switch-master/webswitch/router/router.py": {
        "_route_thread": {
            "name": "_route_thread",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "message_callback": [
                    "str",
                    "bool",
                    "int"
                ],
                "conn_list": [
                    "bool",
                    "str",
                    "Callable",
                    "Union[str, Tuple[str, str]]",
                    "tuple"
                ],
                "receive_queue": [
                    "str",
                    "List[bool]"
                ],
                "logger": [
                    "logging.Logger",
                    "str",
                    "bool",
                    "starfish.core.util.logging.Log",
                    "Optional[str]"
                ]
            }
        },
        "Router.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "Union[None, int]"
                ],
                "port": [
                    "int",
                    "Union[None, int]"
                ],
                "max_queue_size": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Router.get_logger": {
            "name": "get_logger",
            "location": 92,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.serve": {
            "name": "serve",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.stop_serve": {
            "name": "stop_serve",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router._serve_forever": {
            "name": "_serve_forever",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router._is_closed": {
            "name": "_is_closed",
            "location": 226,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router._set_closed": {
            "name": "_set_closed",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router._handle_message": {
            "name": "_handle_message",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "dict",
                    "Dict[str, List[Any]]"
                ],
                "data": []
            }
        },
        "Router.try_send_messages": {
            "name": "try_send_messages",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipients": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Router.on_stop": {
            "name": "on_stop",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.on_start": {
            "name": "on_start",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.on_new": {
            "name": "on_new",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "bool",
                    "str"
                ],
                "path": [
                    "bool",
                    "str"
                ]
            }
        },
        "Router.on_message": {
            "name": "on_message",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Router.on_remove": {
            "name": "on_remove",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "web-switch-master/webswitch/router/__init__.py": {}
}
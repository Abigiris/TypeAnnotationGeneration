{
    "setup.py": {},
    "docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 32,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "tests/test_array_io.py": {
        "test_array_io.test_read_example": {
            "name": "test_read_example",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_array_io.test_write_seq": {
            "name": "test_write_seq",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_array_io.test_fail": {
            "name": "test_fail",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_array_io.test_read_fasta": {
            "name": "test_read_fasta",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_cli.py": {
        "_exec": {
            "name": "_exec",
            "location": 10,
            "return": [],
            "arguments": {
                "args": [],
                "outputtext": [],
                "returncode": [],
                "stdin": []
            }
        },
        "test_malformed_options": {
            "name": "test_malformed_options",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_help_option": {
            "name": "test_help_option",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_default_build": {
            "name": "test_default_build",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_width": {
            "name": "test_width",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_height": {
            "name": "test_height",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_stacks_per_line": {
            "name": "test_stacks_per_line",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_title": {
            "name": "test_title",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_annotate": {
            "name": "test_annotate",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_color": {
            "name": "test_color",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_reverse_complement": {
            "name": "test_reverse_complement",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_formats": {
            "name": "test_formats",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_formats_svg": {
            "name": "test_formats_svg",
            "location": 106,
            "return": [],
            "arguments": {}
        }
    },
    "tests/test_clustal_io.py": {
        "test_clustal_parser.test_parse_clustal": {
            "name": "test_parse_clustal",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_clustal2_newline": {
            "name": "test_parse_clustal2_newline",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_headerless": {
            "name": "test_parse_headerless",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_error": {
            "name": "test_parse_error",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_clustal181": {
            "name": "test_parse_clustal181",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_clustal_glualign": {
            "name": "test_parse_clustal_glualign",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_clustalw182": {
            "name": "test_parse_clustalw182",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_fasta_fail": {
            "name": "test_parse_fasta_fail",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_fasta_fail2": {
            "name": "test_parse_fasta_fail2",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_clustal_example": {
            "name": "test_parse_clustal_example",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_write": {
            "name": "test_write",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_parse_table_fail": {
            "name": "test_parse_table_fail",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_clustal_parser.test_iterseq": {
            "name": "test_iterseq",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_data.py": {
        "test_data.test_amino_acid_composition": {
            "name": "test_amino_acid_composition",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_data.test_resources": {
            "name": "test_resources",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_fasta_io.py": {
        "test_fasta_io.test_read": {
            "name": "test_read",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_read_fail": {
            "name": "test_read_fail",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_parse_globin": {
            "name": "test_parse_globin",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_parse_clustal_fail": {
            "name": "test_parse_clustal_fail",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_parse_plain_fail": {
            "name": "test_parse_plain_fail",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_write_seq": {
            "name": "test_write_seq",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_write_with_header": {
            "name": "test_write_with_header",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_read_comments": {
            "name": "test_read_comments",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_write_comments": {
            "name": "test_write_comments",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_read_headerless": {
            "name": "test_read_headerless",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_read_empty": {
            "name": "test_read_empty",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_isaligned": {
            "name": "test_isaligned",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_fasta_io.test_read_with_blank_line": {
            "name": "test_read_with_blank_line",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_genbank_io.py": {
        "examples": {
            "name": "examples",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_genbank_io.test_parse": {
            "name": "test_parse",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_genbank_io.test_read": {
            "name": "test_read",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_intelligenetics_io.py": {
        "test_read": {
            "name": "test_read",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_read2": {
            "name": "test_read2",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_write_seq": {
            "name": "test_write_seq",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_read_fail": {
            "name": "test_read_fail",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_write_seq_fail": {
            "name": "test_write_seq_fail",
            "location": 69,
            "return": [],
            "arguments": {}
        }
    },
    "tests/test_matrix.py": {
        "test_AlphabeticArray.test_create": {
            "name": "test_create",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Motif.test_read_transfac_alphabet_superset": {
            "name": "test_read_transfac_alphabet_superset",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Motif.test_read_transfac": {
            "name": "test_read_transfac",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Motif.test_reindex": {
            "name": "test_reindex",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Motif.test_reverse": {
            "name": "test_reverse",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Motif.test_complement": {
            "name": "test_complement",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Motif.test_reverse_complement": {
            "name": "test_reverse_complement",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_msf_io.py": {
        "test_msf_io.test_parse_msf": {
            "name": "test_parse_msf",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_msf_io.test_parse_msf2": {
            "name": "test_parse_msf2",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_msf_io.test_parse_1beo": {
            "name": "test_parse_1beo",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_msf_io.test_parse_error": {
            "name": "test_parse_error",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_msf_io.test_parse_fasta_fail2": {
            "name": "test_parse_fasta_fail2",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_msf_io.test_parse_plain_fail": {
            "name": "test_parse_plain_fail",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_msf_io.test_parse_phylip_fail": {
            "name": "test_parse_phylip_fail",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_msf_io.test_iter": {
            "name": "test_iter",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_nbrf_io.py": {
        "test_nbrf_io.test_parse_cox2": {
            "name": "test_parse_cox2",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nbrf_io.test_parse_crab": {
            "name": "test_parse_crab",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nbrf_io.test_parse_dna": {
            "name": "test_parse_dna",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nbrf_io.test_parse_examples": {
            "name": "test_parse_examples",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nbrf_io.test_parse_protein": {
            "name": "test_parse_protein",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nbrf_io.test_parse_clustal_fail": {
            "name": "test_parse_clustal_fail",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nbrf_io.test_parse_plain_fail": {
            "name": "test_parse_plain_fail",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nbrf_io.test_pir_file_from_clustal": {
            "name": "test_pir_file_from_clustal",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nbrf_io.test_parse_examples_alphabet": {
            "name": "test_parse_examples_alphabet",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_nexus.py": {
        "test_nexus.test_create": {
            "name": "test_create",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nexus.test_parse_f0": {
            "name": "test_parse_f0",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nexus.test_parse_protein": {
            "name": "test_parse_protein",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nexus.test_parse_dna": {
            "name": "test_parse_dna",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_nexus.test_TreeTest1": {
            "name": "test_TreeTest1",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_nexus_io.py": {
        "test_read": {
            "name": "test_read",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_parse_StringIO": {
            "name": "test_parse_StringIO",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_parse_fasta_fail": {
            "name": "test_parse_fasta_fail",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_parse_clustal_fail": {
            "name": "test_parse_clustal_fail",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_parse_plain_fail": {
            "name": "test_parse_plain_fail",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_iterseq": {
            "name": "test_iterseq",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_read_alphabet": {
            "name": "test_read_alphabet",
            "location": 56,
            "return": [],
            "arguments": {}
        }
    },
    "tests/test_null_io.py": {
        "test_read": {
            "name": "test_read",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_write": {
            "name": "test_write",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_iterseq": {
            "name": "test_iterseq",
            "location": 47,
            "return": [],
            "arguments": {}
        }
    },
    "tests/test_phylip_io.py": {
        "test_phylip_io.test_read": {
            "name": "test_read",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_iterseq": {
            "name": "test_iterseq",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_parse_plain_fail": {
            "name": "test_parse_plain_fail",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_parse_phylip_test_2": {
            "name": "test_parse_phylip_test_2",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_parse_clustal_fail": {
            "name": "test_parse_clustal_fail",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_parse_phylip_test_3": {
            "name": "test_parse_phylip_test_3",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_parse_phylip_test_4": {
            "name": "test_parse_phylip_test_4",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_parse_phylip_test_5": {
            "name": "test_parse_phylip_test_5",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_parse_wrong_phylip_codes_1": {
            "name": "test_parse_wrong_phylip_codes_1",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_parse_wrong_phylip_codes_2": {
            "name": "test_parse_wrong_phylip_codes_2",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_phylip_io.test_parse_phylip_dna": {
            "name": "test_parse_phylip_dna",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_plain_io.py": {
        "test_read_example": {
            "name": "test_read_example",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_write_seq": {
            "name": "test_write_seq",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_parse_fasta_fail": {
            "name": "test_parse_fasta_fail",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "tests/test_seq.py": {
        "test_bad_mask": {
            "name": "test_bad_mask",
            "location": 471,
            "return": [],
            "arguments": {}
        },
        "test_alphabet.test_create_alphabet": {
            "name": "test_create_alphabet",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_alphabet_alphabetic": {
            "name": "test_alphabet_alphabetic",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_alphabet_ord": {
            "name": "test_alphabet_ord",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_alphabet_chr": {
            "name": "test_alphabet_chr",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_alphabet_ords": {
            "name": "test_alphabet_ords",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_alphabet_chrs": {
            "name": "test_alphabet_chrs",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_none": {
            "name": "test_none",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_create_from_alphabet": {
            "name": "test_create_from_alphabet",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_repr": {
            "name": "test_repr",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_str": {
            "name": "test_str",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_letters": {
            "name": "test_letters",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_normalize": {
            "name": "test_normalize",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_alt": {
            "name": "test_alt",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_alphabet.test_which_alphabet": {
            "name": "test_which_alphabet",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_create_seq": {
            "name": "test_create_seq",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_std_alphabets": {
            "name": "test_std_alphabets",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_ords": {
            "name": "test_ords",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_tally": {
            "name": "test_tally",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_tally_nonalphabetic": {
            "name": "test_tally_nonalphabetic",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_words": {
            "name": "test_words",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_words2": {
            "name": "test_words2",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_getslice": {
            "name": "test_getslice",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_create_annotated": {
            "name": "test_create_annotated",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_add": {
            "name": "test_add",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_join": {
            "name": "test_join",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_repr": {
            "name": "test_repr",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_str": {
            "name": "test_str",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_tostring": {
            "name": "test_tostring",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_reverse": {
            "name": "test_reverse",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_translate": {
            "name": "test_translate",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_reverse_complement": {
            "name": "test_reverse_complement",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_ungap": {
            "name": "test_ungap",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_mask": {
            "name": "test_mask",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_shortcuts": {
            "name": "test_shortcuts",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_casechange": {
            "name": "test_casechange",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq.test_slice": {
            "name": "test_slice",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seqlist.test_create": {
            "name": "test_create",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seqlist.test_create_annotated": {
            "name": "test_create_annotated",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seqlist.test_ords": {
            "name": "test_ords",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seqlist.test_isaligned": {
            "name": "test_isaligned",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seqlist.test_profile": {
            "name": "test_profile",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seqlist.test_tally": {
            "name": "test_tally",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seqlist.test_create_empty": {
            "name": "test_create_empty",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seqlist.test_repr": {
            "name": "test_repr",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seqlist.test_str": {
            "name": "test_str",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_seq_io.py": {
        "test_seq_io.test_attr": {
            "name": "test_attr",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_parse_clustal": {
            "name": "test_parse_clustal",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_parse_error": {
            "name": "test_parse_error",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_parse_clustal181": {
            "name": "test_parse_clustal181",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_parse_clustal_glualign": {
            "name": "test_parse_clustal_glualign",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_parse_clustalw182": {
            "name": "test_parse_clustalw182",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_read_example_array": {
            "name": "test_read_example_array",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_read_fasta": {
            "name": "test_read_fasta",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_parse_globin_fasta": {
            "name": "test_parse_globin_fasta",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_parser_extensions": {
            "name": "test_parser_extensions",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_parser_names": {
            "name": "test_parser_names",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_seq_io.test_parsers": {
            "name": "test_parsers",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_stockholm_io.py": {
        "test_stockholm_io.test_parse1": {
            "name": "test_parse1",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_stockholm_io.test_parse2": {
            "name": "test_parse2",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_stockholm_io.test_iterseq": {
            "name": "test_iterseq",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_stockholm_io.test_parse3": {
            "name": "test_parse3",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_stockholm_io.test_parse_error": {
            "name": "test_parse_error",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_stockholm_io.test_parse_fasta_fail": {
            "name": "test_parse_fasta_fail",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_stockholm_io.test_parse_alphabet_fail": {
            "name": "test_parse_alphabet_fail",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_stockholm_io.test_parse_fasta_fail2": {
            "name": "test_parse_fasta_fail2",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_stockholm_io.test_parse_fail": {
            "name": "test_parse_fail",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_table_io.py": {
        "test_table_io.test_read": {
            "name": "test_read",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_table_io.test_read_fail": {
            "name": "test_read_fail",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_table_io.test_write_seq": {
            "name": "test_write_seq",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_transform.py": {
        "test_mask_low_complexity.test_segging": {
            "name": "test_segging",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_mask_low_complexity.test_seg_invalid": {
            "name": "test_seg_invalid",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_transform.test_transform": {
            "name": "test_transform",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_transform.test_reduced_protein_alphabets": {
            "name": "test_reduced_protein_alphabets",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_geneticcode.test_repr": {
            "name": "test_repr",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_geneticcode.test_translate_std": {
            "name": "test_translate_std",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_geneticcode.test_translate": {
            "name": "test_translate",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_geneticcode.test_back_translate": {
            "name": "test_back_translate",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_transformseq.py": {
        "_exec": {
            "name": "_exec",
            "location": 8,
            "return": [],
            "arguments": {
                "args": [],
                "outputtext": [],
                "returncode": [],
                "stdin": []
            }
        },
        "test_malformed_options": {
            "name": "test_malformed_options",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_help_option": {
            "name": "test_help_option",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_version_option": {
            "name": "test_version_option",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_clustal": {
            "name": "test_clustal",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_reverse": {
            "name": "test_reverse",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_complement": {
            "name": "test_complement",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_seg": {
            "name": "test_seg",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_subsample": {
            "name": "test_subsample",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "tests/test_utils.py": {
        "test_utils.test_isfloat": {
            "name": "test_isfloat",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_isint": {
            "name": "test_isint",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_remove_whitespace": {
            "name": "test_remove_whitespace",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_isblank": {
            "name": "test_isblank",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_group_count": {
            "name": "test_group_count",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_token": {
            "name": "test_token",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_invert_dict": {
            "name": "test_invert_dict",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_crc64": {
            "name": "test_crc64",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_crc32": {
            "name": "test_crc32",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_ArgumentValueError": {
            "name": "test_ArgumentValueError",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_utils.test_resource": {
            "name": "test_resource",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/test_weblogo.py": {
        "data_stream": {
            "name": "data_stream",
            "location": 67,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_logoformat_errors": {
            "name": "test_logoformat_errors",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_logoformats": {
            "name": "test_logoformats",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "test_parse_prior_error": {
            "name": "test_parse_prior_error",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "mean": {
            "name": "mean",
            "location": 721,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "var": {
            "name": "var",
            "location": 725,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "integrate": {
            "name": "integrate",
            "location": 729,
            "return": [],
            "arguments": {
                "f": [],
                "a": [],
                "b": [],
                "n": []
            }
        },
        "test_logoformat.test_options": {
            "name": "test_options",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ghostscript.test_version": {
            "name": "test_version",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_parse_prior.test_parse_prior_none": {
            "name": "test_parse_prior_none",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_parse_prior.test_parse_prior_equiprobable": {
            "name": "test_parse_prior_equiprobable",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_parse_prior.test_parse_prior_percentage": {
            "name": "test_parse_prior_percentage",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_parse_prior.test_parse_prior_float": {
            "name": "test_parse_prior_float",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_parse_prior.test_auto": {
            "name": "test_auto",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_parse_prior.test_weight": {
            "name": "test_weight",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_parse_prior.test_explicit": {
            "name": "test_explicit",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_logooptions.test_create": {
            "name": "test_create",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_colorscheme.test_symbol_color": {
            "name": "test_symbol_color",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_colorscheme.test_index_color": {
            "name": "test_index_color",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_colorscheme.test_ref_seq_color": {
            "name": "test_ref_seq_color",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_colorscheme.test_colorscheme": {
            "name": "test_colorscheme",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_names": {
            "name": "test_color_names",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_components": {
            "name": "test_color_components",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_from_rgb": {
            "name": "test_color_from_rgb",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_from_hsl": {
            "name": "test_color_from_hsl",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_by_name": {
            "name": "test_color_by_name",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_from_invalid_name": {
            "name": "test_color_from_invalid_name",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_clipping": {
            "name": "test_color_clipping",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_fail_on_mixed_type": {
            "name": "test_color_fail_on_mixed_type",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_red": {
            "name": "test_color_red",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_from_string": {
            "name": "test_color_from_string",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_color.test_color_equality": {
            "name": "test_color_equality",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_gamma.test_create": {
            "name": "test_create",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_gamma.test_mean_variance": {
            "name": "test_mean_variance",
            "location": 492,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_gamma.test_from_shape_scale": {
            "name": "test_from_shape_scale",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_gamma.test_invalid_args": {
            "name": "test_invalid_args",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_gamma.test_sample": {
            "name": "test_sample",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_gamma.test_pdf": {
            "name": "test_pdf",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_gamma.test_cdf": {
            "name": "test_cdf",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_gamma.test_inverse_cdf": {
            "name": "test_inverse_cdf",
            "location": 569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Dirichlet.test_init": {
            "name": "test_init",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Dirichlet.test_random": {
            "name": "test_random",
            "location": 598,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Dirichlet.test_mean": {
            "name": "test_mean",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Dirichlet.test_covariance": {
            "name": "test_covariance",
            "location": 645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Dirichlet.test_mean_x": {
            "name": "test_mean_x",
            "location": 653,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Dirichlet.test_variance_x": {
            "name": "test_variance_x",
            "location": 667,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Dirichlet.test_relative_entropy": {
            "name": "test_relative_entropy",
            "location": 682,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_from_URL_fileopen_Tests.test_URLscheme": {
            "name": "test_URLscheme",
            "location": 713,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_gamma.test_pdf.fx": {
            "name": "fx",
            "location": 537,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_gamma.test_pdf.fx2": {
            "name": "fx2",
            "location": 543,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_Dirichlet.test_random.do_test": {
            "name": "do_test",
            "location": 599,
            "return": [],
            "arguments": {
                "alpha": [],
                "samples": []
            }
        }
    },
    "tests/__init__.py": {
        "data_string": {
            "name": "data_string",
            "location": 8,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "data_stream": {
            "name": "data_stream",
            "location": 12,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "data_filename": {
            "name": "data_filename",
            "location": 16,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "weblogo/color.py": {
        "Color.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "red": [],
                "green": [],
                "blue": []
            }
        },
        "Color.names": {
            "name": "names",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "Color.from_rgb": {
            "name": "from_rgb",
            "location": 74,
            "return": [],
            "arguments": {
                "cls": [],
                "r": [],
                "g": [],
                "b": []
            }
        },
        "Color.from_hsl": {
            "name": "from_hsl",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [],
                "hue_angle": [],
                "saturation": [],
                "lightness": []
            }
        },
        "Color.by_name": {
            "name": "by_name",
            "location": 120,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "Color.from_string": {
            "name": "from_string",
            "location": 128,
            "return": [],
            "arguments": {
                "cls": [],
                "string": []
            }
        },
        "Color.__eq__": {
            "name": "__eq__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Color.__repr__": {
            "name": "__repr__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Color.from_hsl.hue_to_rgb": {
            "name": "hue_to_rgb",
            "location": 79,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": [],
                "vH": []
            }
        },
        "Color.from_string.to_frac": {
            "name": "to_frac",
            "location": 129,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "weblogo/colorscheme.py": {
        "ColorRule.symbol_color": {
            "name": "symbol_color",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "seq_index": [],
                "symbol": [],
                "rank": []
            }
        },
        "ColorScheme.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "rules": [],
                "title": [],
                "description": [],
                "default_color": [],
                "alphabet": []
            }
        },
        "ColorScheme.symbol_color": {
            "name": "symbol_color",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "seq_index": [],
                "symbol": [],
                "rank": []
            }
        },
        "SymbolColor.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": [],
                "color": [],
                "description": []
            }
        },
        "SymbolColor.symbol_color": {
            "name": "symbol_color",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "seq_index": [],
                "symbol": [],
                "rank": []
            }
        },
        "IndexColor.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "indices": [],
                "color": [],
                "description": []
            }
        },
        "IndexColor.symbol_color": {
            "name": "symbol_color",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "seq_index": [],
                "symbol": [],
                "rank": []
            }
        },
        "RefSeqColor.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "ref_seq": [],
                "color": [],
                "description": []
            }
        },
        "RefSeqColor.symbol_color": {
            "name": "symbol_color",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "seq_index": [],
                "symbol": [],
                "rank": []
            }
        }
    },
    "weblogo/data.py": {
        "data_string": {
            "name": "data_string",
            "location": 183,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "data_stream": {
            "name": "data_stream",
            "location": 189,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "data_filename": {
            "name": "data_filename",
            "location": 195,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "weblogo/logo.py": {
        "cgi": {
            "name": "cgi",
            "location": 127,
            "return": [],
            "arguments": {
                "htdocs_directory": []
            }
        },
        "parse_prior": {
            "name": "parse_prior",
            "location": 644,
            "return": [],
            "arguments": {
                "composition": [],
                "alphabet": [],
                "weight": []
            }
        },
        "base_distribution": {
            "name": "base_distribution",
            "location": 740,
            "return": [],
            "arguments": {
                "percentCG": []
            }
        },
        "equiprobable_distribution": {
            "name": "equiprobable_distribution",
            "location": 748,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "_seq_formats": {
            "name": "_seq_formats",
            "location": 752,
            "return": [],
            "arguments": {}
        },
        "_seq_names": {
            "name": "_seq_names",
            "location": 763,
            "return": [],
            "arguments": {}
        },
        "read_seq_data": {
            "name": "read_seq_data",
            "location": 771,
            "return": [],
            "arguments": {
                "fin": [],
                "input_parser": [],
                "alphabet": [],
                "ignore_lower_case": [],
                "max_file_size": []
            }
        },
        "_from_URL_fileopen": {
            "name": "_from_URL_fileopen",
            "location": 965,
            "return": [],
            "arguments": {
                "target_url": []
            }
        },
        "LogoOptions.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogoOptions.__repr__": {
            "name": "__repr__",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogoFormat.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "logodata": [],
                "logooptions": []
            }
        },
        "LogoData.__init__": {
            "name": "__init__",
            "location": 831,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "alphabet": [],
                "counts": [],
                "entropy": [],
                "entropy_interval": [],
                "weight": []
            }
        },
        "LogoData.from_counts": {
            "name": "from_counts",
            "location": 849,
            "return": [],
            "arguments": {
                "cls": [],
                "alphabet": [],
                "counts": [],
                "prior": []
            }
        },
        "LogoData.from_seqs": {
            "name": "from_seqs",
            "location": 898,
            "return": [],
            "arguments": {
                "cls": [],
                "seqs": [],
                "prior": []
            }
        },
        "LogoData.__str__": {
            "name": "__str__",
            "location": 922,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "weblogo/logomath.py": {
        "Dirichlet.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "Dirichlet.sample": {
            "name": "sample",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dirichlet.mean": {
            "name": "mean",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dirichlet.covariance": {
            "name": "covariance",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dirichlet.mean_x": {
            "name": "mean_x",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Dirichlet.variance_x": {
            "name": "variance_x",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Dirichlet.mean_entropy": {
            "name": "mean_entropy",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dirichlet.variance_entropy": {
            "name": "variance_entropy",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dirichlet.mean_relative_entropy": {
            "name": "mean_relative_entropy",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "pvec": []
            }
        },
        "Dirichlet.variance_relative_entropy": {
            "name": "variance_relative_entropy",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "pvec": []
            }
        },
        "Dirichlet.interval_relative_entropy": {
            "name": "interval_relative_entropy",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "pvec": [],
                "frac": []
            }
        },
        "Gamma.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": [],
                "beta": []
            }
        },
        "Gamma.from_shape_scale": {
            "name": "from_shape_scale",
            "location": 270,
            "return": [],
            "arguments": {
                "cls": [],
                "shape": [],
                "scale": []
            }
        },
        "Gamma.from_mean_variance": {
            "name": "from_mean_variance",
            "location": 274,
            "return": [],
            "arguments": {
                "cls": [],
                "mean": [],
                "variance": []
            }
        },
        "Gamma.mean": {
            "name": "mean",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gamma.variance": {
            "name": "variance",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gamma.sample": {
            "name": "sample",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gamma.pdf": {
            "name": "pdf",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Gamma.cdf": {
            "name": "cdf",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Gamma.inverse_cdf": {
            "name": "inverse_cdf",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Gamma.inverse_cdf.rootof": {
            "name": "rootof",
            "location": 299,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "weblogo/logo_formatter.py": {
        "pdf_formatter": {
            "name": "pdf_formatter",
            "location": 44,
            "return": [],
            "arguments": {
                "logodata": [],
                "logoformat": []
            }
        },
        "_bitmap_formatter": {
            "name": "_bitmap_formatter",
            "location": 53,
            "return": [],
            "arguments": {
                "logodata": [],
                "logoformat": [],
                "device": []
            }
        },
        "jpeg_formatter": {
            "name": "jpeg_formatter",
            "location": 65,
            "return": [],
            "arguments": {
                "logodata": [],
                "logoformat": []
            }
        },
        "svg_formatter": {
            "name": "svg_formatter",
            "location": 70,
            "return": [],
            "arguments": {
                "logodata": [],
                "logoformat": []
            }
        },
        "png_formatter": {
            "name": "png_formatter",
            "location": 103,
            "return": [],
            "arguments": {
                "logodata": [],
                "logoformat": []
            }
        },
        "png_print_formatter": {
            "name": "png_print_formatter",
            "location": 108,
            "return": [],
            "arguments": {
                "logodata": [],
                "logoformat": []
            }
        },
        "txt_formatter": {
            "name": "txt_formatter",
            "location": 114,
            "return": [],
            "arguments": {
                "logodata": [],
                "logoformat": []
            }
        },
        "eps_formatter": {
            "name": "eps_formatter",
            "location": 119,
            "return": [],
            "arguments": {
                "logodata": [],
                "logoformat": []
            }
        },
        "eps_formatter.format_color": {
            "name": "format_color",
            "location": 183,
            "return": [],
            "arguments": {
                "color": []
            }
        },
        "GhostscriptAPI.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "GhostscriptAPI.version": {
            "name": "version",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GhostscriptAPI.convert": {
            "name": "convert",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "format": [],
                "postscript": [],
                "width": [],
                "height": [],
                "resolution": []
            }
        }
    },
    "weblogo/matrix.py": {
        "AlphabeticArray.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "alphabets": [],
                "values": [],
                "dtype": []
            }
        },
        "AlphabeticArray.__getitem__": {
            "name": "__getitem__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "AlphabeticArray.__setitem__": {
            "name": "__setitem__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "AlphabeticArray._ordkey": {
            "name": "_ordkey",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "AlphabeticArray.index": {
            "name": "index",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "AlphabeticArray.reindex": {
            "name": "reindex",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "new_alphabet": []
            }
        },
        "AlphabeticArray.__getattr__": {
            "name": "__getattr__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AlphabeticArray.__setattr__": {
            "name": "__setattr__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Motif.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "alphabet": [],
                "array": [],
                "dtype": [],
                "name": [],
                "description": [],
                "scale": []
            }
        },
        "Motif.alphabet": {
            "name": "alphabet",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Motif.reindex": {
            "name": "reindex",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "alphabet": []
            }
        },
        "Motif.reverse": {
            "name": "reverse",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Motif.complement": {
            "name": "complement",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Motif.reverse_complement": {
            "name": "reverse_complement",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Motif.read_transfac": {
            "name": "read_transfac",
            "location": 319,
            "return": [],
            "arguments": {
                "cls": [],
                "fin": [],
                "alphabet": []
            }
        },
        "AlphabeticArray._ordkey.norm": {
            "name": "norm",
            "location": 176,
            "return": [],
            "arguments": {
                "key": [],
                "alpha": []
            }
        },
        "AlphabeticArray.__init__.NullAlphabet.ord": {
            "name": "ord",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "AlphabeticArray.__init__.NullAlphabet.ords": {
            "name": "ords",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        }
    },
    "weblogo/seq.py": {
        "dna": {
            "name": "dna",
            "location": 763,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "rna": {
            "name": "rna",
            "location": 768,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "protein": {
            "name": "protein",
            "location": 773,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "Alphabet.__new__": {
            "name": "__new__",
            "location": 174,
            "return": [],
            "arguments": {
                "cls": [],
                "letters": [],
                "alternatives": []
            }
        },
        "Alphabet.alphabetic": {
            "name": "alphabetic",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Alphabet.chr": {
            "name": "chr",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Alphabet.ord": {
            "name": "ord",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "Alphabet.chrs": {
            "name": "chrs",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "sequence_of_ints": []
            }
        },
        "Alphabet.ords": {
            "name": "ords",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Alphabet.normalize": {
            "name": "normalize",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Alphabet.letters": {
            "name": "letters",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alphabet.__repr__": {
            "name": "__repr__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alphabet.__str__": {
            "name": "__str__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alphabet.__len__": {
            "name": "__len__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alphabet.__eq__": {
            "name": "__eq__",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Alphabet.__ne__": {
            "name": "__ne__",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Alphabet.__iter__": {
            "name": "__iter__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alphabet.__getitem__": {
            "name": "__getitem__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Alphabet.__hash__": {
            "name": "__hash__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alphabet.which": {
            "name": "which",
            "location": 346,
            "return": [],
            "arguments": {
                "seqs": [],
                "alphabets": []
            }
        },
        "Seq.__new__": {
            "name": "__new__",
            "location": 439,
            "return": [],
            "arguments": {
                "cls": [],
                "obj": [],
                "alphabet": [],
                "name": [],
                "description": []
            }
        },
        "Seq.alphabet": {
            "name": "alphabet",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.ords": {
            "name": "ords",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.tally": {
            "name": "tally",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "alphabet": []
            }
        },
        "Seq.__getitem__": {
            "name": "__getitem__",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Seq.__add__": {
            "name": "__add__",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Seq.__radd__": {
            "name": "__radd__",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Seq.join": {
            "name": "join",
            "location": 518,
            "return": [],
            "arguments": {
                "self": [],
                "str_list": []
            }
        },
        "Seq.__eq__": {
            "name": "__eq__",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Seq.__ne__": {
            "name": "__ne__",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Seq.tostring": {
            "name": "tostring",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.reverse": {
            "name": "reverse",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.ungap": {
            "name": "ungap",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.remove": {
            "name": "remove",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "delchars": []
            }
        },
        "Seq.lower": {
            "name": "lower",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.upper": {
            "name": "upper",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.mask": {
            "name": "mask",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "letters": [],
                "mask": []
            }
        },
        "Seq.translate": {
            "name": "translate",
            "location": 589,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.back_translate": {
            "name": "back_translate",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.reverse_complement": {
            "name": "reverse_complement",
            "location": 609,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.complement": {
            "name": "complement",
            "location": 615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.words": {
            "name": "words",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "alphabet": []
            }
        },
        "Seq.word_count": {
            "name": "word_count",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "alphabet": []
            }
        },
        "SeqList.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [],
            "arguments": {
                "self": [],
                "alist": [],
                "alphabet": [],
                "name": [],
                "description": []
            }
        },
        "SeqList.isaligned": {
            "name": "isaligned",
            "location": 681,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeqList.ords": {
            "name": "ords",
            "location": 697,
            "return": [],
            "arguments": {
                "self": [],
                "alphabet": []
            }
        },
        "SeqList.tally": {
            "name": "tally",
            "location": 708,
            "return": [],
            "arguments": {
                "self": [],
                "alphabet": []
            }
        },
        "SeqList.profile": {
            "name": "profile",
            "location": 725,
            "return": [],
            "arguments": {
                "self": [],
                "alphabet": []
            }
        }
    },
    "weblogo/transform.py": {
        "mask_low_complexity": {
            "name": "mask_low_complexity",
            "location": 113,
            "return": [],
            "arguments": {
                "seq": [],
                "width": [],
                "trigger": [],
                "extension": [],
                "mask": []
            }
        },
        "Transform.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "target": [],
                "name": [],
                "description": []
            }
        },
        "Transform.__call__": {
            "name": "__call__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "GeneticCode.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "description": [],
                "amino_acid": [],
                "start": [],
                "base1": [],
                "base2": [],
                "base3": []
            }
        },
        "GeneticCode.std_list": {
            "name": "std_list",
            "location": 306,
            "return": [],
            "arguments": {}
        },
        "GeneticCode.std": {
            "name": "std",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "GeneticCode.by_name": {
            "name": "by_name",
            "location": 334,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "GeneticCode.table": {
            "name": "table",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneticCode.back_table": {
            "name": "back_table",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneticCode._create_table": {
            "name": "_create_table",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneticCode.translate": {
            "name": "translate",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "seq": [],
                "frame": []
            }
        },
        "GeneticCode.back_translate": {
            "name": "back_translate",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "GeneticCode.__repr__": {
            "name": "__repr__",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneticCode.__str__": {
            "name": "__str__",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "weblogo/_cgi.py": {
        "resource_string": {
            "name": "resource_string",
            "location": 60,
            "return": [],
            "arguments": {
                "resource": [],
                "basefilename": []
            }
        },
        "string_or_none": {
            "name": "string_or_none",
            "location": 145,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "truth": {
            "name": "truth",
            "location": 151,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "int_or_none": {
            "name": "int_or_none",
            "location": 157,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "float_or_none": {
            "name": "float_or_none",
            "location": 163,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "main": {
            "name": "main",
            "location": 169,
            "return": [],
            "arguments": {
                "htdocs_directory": []
            }
        },
        "send_form": {
            "name": "send_form",
            "location": 491,
            "return": [],
            "arguments": {
                "controls": [],
                "errors": [],
                "htdocs_directory": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "default": [],
                "conversion": [],
                "options": [],
                "errmsg": []
            }
        },
        "Field.get_value": {
            "name": "get_value",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "weblogo/_cli.py": {
        "main": {
            "name": "main",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "httpd_serve_forever": {
            "name": "httpd_serve_forever",
            "location": 109,
            "return": [],
            "arguments": {
                "port": []
            }
        },
        "_build_logodata": {
            "name": "_build_logodata",
            "location": 156,
            "return": [],
            "arguments": {
                "options": []
            }
        },
        "_build_logoformat": {
            "name": "_build_logoformat",
            "location": 225,
            "return": [],
            "arguments": {
                "logodata": [],
                "opts": []
            }
        },
        "_build_option_parser": {
            "name": "_build_option_parser",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "httpd_serve_forever.__HTTPRequestHandler.is_cgi": {
            "name": "is_cgi",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "httpd_serve_forever.__HTTPRequestHandler.is_python": {
            "name": "is_python",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "weblogo/_transformseq.py": {
        "main": {
            "name": "main",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "_build_option_parser": {
            "name": "_build_option_parser",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "weblogo/__init__.py": {},
    "weblogo/seq_io/array_io.py": {
        "read": {
            "name": "read",
            "location": 64,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "iterseq": {
            "name": "iterseq",
            "location": 79,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "write": {
            "name": "write",
            "location": 117,
            "return": [],
            "arguments": {
                "afile": [],
                "seqs": []
            }
        },
        "writeseq": {
            "name": "writeseq",
            "location": 128,
            "return": [],
            "arguments": {
                "afile": [],
                "seq": []
            }
        }
    },
    "weblogo/seq_io/clustal_io.py": {
        "iterseq": {
            "name": "iterseq",
            "location": 89,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "read": {
            "name": "read",
            "location": 95,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "_scan": {
            "name": "_scan",
            "location": 140,
            "return": [],
            "arguments": {
                "fin": []
            }
        },
        "write": {
            "name": "write",
            "location": 209,
            "return": [],
            "arguments": {
                "fout": [],
                "seqs": []
            }
        }
    },
    "weblogo/seq_io/fasta_io.py": {
        "read": {
            "name": "read",
            "location": 99,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "readseq": {
            "name": "readseq",
            "location": 117,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "iterseq": {
            "name": "iterseq",
            "location": 123,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "write": {
            "name": "write",
            "location": 188,
            "return": [],
            "arguments": {
                "fout": [],
                "seqs": []
            }
        },
        "writeseq": {
            "name": "writeseq",
            "location": 202,
            "return": [],
            "arguments": {
                "afile": [],
                "seq": []
            }
        },
        "iterseq.build_seq": {
            "name": "build_seq",
            "location": 141,
            "return": [],
            "arguments": {
                "seqs": [],
                "alphabet": [],
                "header": [],
                "header_lineno": [],
                "comments": []
            }
        }
    },
    "weblogo/seq_io/genbank_io.py": {
        "read": {
            "name": "read",
            "location": 19,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "iterseq": {
            "name": "iterseq",
            "location": 36,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        }
    },
    "weblogo/seq_io/intelligenetics_io.py": {
        "read": {
            "name": "read",
            "location": 82,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "iterseq": {
            "name": "iterseq",
            "location": 97,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "write": {
            "name": "write",
            "location": 163,
            "return": [],
            "arguments": {
                "fout": [],
                "seqs": []
            }
        },
        "writeseq": {
            "name": "writeseq",
            "location": 176,
            "return": [],
            "arguments": {
                "fout": [],
                "seq": []
            }
        },
        "iterseq.build_seq": {
            "name": "build_seq",
            "location": 115,
            "return": [],
            "arguments": {
                "seqs": [],
                "alphabet": [],
                "name": [],
                "comments": [],
                "lineno": []
            }
        }
    },
    "weblogo/seq_io/msf_io.py": {
        "iterseq": {
            "name": "iterseq",
            "location": 89,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "read": {
            "name": "read",
            "location": 95,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "_line_is": {
            "name": "_line_is",
            "location": 126,
            "return": [],
            "arguments": {
                "fin": []
            }
        }
    },
    "weblogo/seq_io/nbrf_io.py": {
        "read": {
            "name": "read",
            "location": 97,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "iterseq": {
            "name": "iterseq",
            "location": 113,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        }
    },
    "weblogo/seq_io/nexus_io.py": {
        "iterseq": {
            "name": "iterseq",
            "location": 46,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "read": {
            "name": "read",
            "location": 52,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        }
    },
    "weblogo/seq_io/null_io.py": {
        "read": {
            "name": "read",
            "location": 41,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "iterseq": {
            "name": "iterseq",
            "location": 48,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "write": {
            "name": "write",
            "location": 56,
            "return": [],
            "arguments": {
                "fout": [],
                "seqs": []
            }
        },
        "writeseq": {
            "name": "writeseq",
            "location": 62,
            "return": [],
            "arguments": {
                "fout": [],
                "seq": []
            }
        }
    },
    "weblogo/seq_io/phylip_io.py": {
        "iterseq": {
            "name": "iterseq",
            "location": 74,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "read": {
            "name": "read",
            "location": 81,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        }
    },
    "weblogo/seq_io/plain_io.py": {
        "read": {
            "name": "read",
            "location": 63,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "iterseq": {
            "name": "iterseq",
            "location": 78,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "write": {
            "name": "write",
            "location": 111,
            "return": [],
            "arguments": {
                "afile": [],
                "seqs": []
            }
        },
        "writeseq": {
            "name": "writeseq",
            "location": 122,
            "return": [],
            "arguments": {
                "afile": [],
                "seq": []
            }
        }
    },
    "weblogo/seq_io/stockholm_io.py": {
        "iterseq": {
            "name": "iterseq",
            "location": 80,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "read": {
            "name": "read",
            "location": 86,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "_scan": {
            "name": "_scan",
            "location": 115,
            "return": [],
            "arguments": {
                "fin": []
            }
        }
    },
    "weblogo/seq_io/table_io.py": {
        "read": {
            "name": "read",
            "location": 55,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "iterseq": {
            "name": "iterseq",
            "location": 70,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        },
        "write": {
            "name": "write",
            "location": 97,
            "return": [],
            "arguments": {
                "fout": [],
                "seqs": []
            }
        },
        "writeseq": {
            "name": "writeseq",
            "location": 108,
            "return": [],
            "arguments": {
                "fout": [],
                "seq": []
            }
        }
    },
    "weblogo/seq_io/__init__.py": {
        "format_names": {
            "name": "format_names",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "format_extensions": {
            "name": "format_extensions",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "_get_parsers": {
            "name": "_get_parsers",
            "location": 241,
            "return": [],
            "arguments": {
                "fin": []
            }
        },
        "read": {
            "name": "read",
            "location": 264,
            "return": [],
            "arguments": {
                "fin": [],
                "alphabet": []
            }
        }
    },
    "weblogo/seq_io/_nexus/Nodes.py": {
        "Chain.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chain._get_id": {
            "name": "_get_id",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chain.all_ids": {
            "name": "all_ids",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chain.add": {
            "name": "add",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "prev": []
            }
        },
        "Chain.collapse": {
            "name": "collapse",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Chain.kill": {
            "name": "kill",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Chain.unlink": {
            "name": "unlink",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Chain.link": {
            "name": "link",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "child": []
            }
        },
        "Chain.is_parent_of": {
            "name": "is_parent_of",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "grandchild": []
            }
        },
        "Chain.trace": {
            "name": "trace",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "finish": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Node.set_id": {
            "name": "set_id",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Node.get_id": {
            "name": "get_id",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.get_succ": {
            "name": "get_succ",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.get_prev": {
            "name": "get_prev",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.add_succ": {
            "name": "add_succ",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Node.remove_succ": {
            "name": "remove_succ",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Node.set_succ": {
            "name": "set_succ",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "new_succ": []
            }
        },
        "Node.set_prev": {
            "name": "set_prev",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Node.get_data": {
            "name": "get_data",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.set_data": {
            "name": "set_data",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "weblogo/seq_io/_nexus/Trees.py": {
        "consensus": {
            "name": "consensus",
            "location": 906,
            "return": [],
            "arguments": {
                "trees": [],
                "threshold": [],
                "outgroup": []
            }
        },
        "NodeData.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "taxon": [],
                "branchlength": [],
                "support": [],
                "comment": []
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "weight": [],
                "rooted": [],
                "name": [],
                "data": [],
                "values_are_support": [],
                "max_support": []
            }
        },
        "Tree._parse": {
            "name": "_parse",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Tree._add_subtree": {
            "name": "_add_subtree",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "parent_id": [],
                "tree": []
            }
        },
        "Tree._add_nodedata": {
            "name": "_add_nodedata",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "nd": [],
                "st": []
            }
        },
        "Tree._get_values": {
            "name": "_get_values",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Tree._walk": {
            "name": "_walk",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Tree.node": {
            "name": "node",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "node_id": []
            }
        },
        "Tree.split": {
            "name": "split",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "parent_id": [],
                "n": [],
                "branchlength": []
            }
        },
        "Tree.search_taxon": {
            "name": "search_taxon",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "taxon": []
            }
        },
        "Tree.prune": {
            "name": "prune",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "taxon": []
            }
        },
        "Tree.get_taxa": {
            "name": "get_taxa",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "node_id": []
            }
        },
        "Tree.get_terminals": {
            "name": "get_terminals",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.is_terminal": {
            "name": "is_terminal",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Tree.is_internal": {
            "name": "is_internal",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Tree.is_preterminal": {
            "name": "is_preterminal",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Tree.count_terminals": {
            "name": "count_terminals",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Tree.collapse_genera": {
            "name": "collapse_genera",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "space_equals_underscore": []
            }
        },
        "Tree.sum_branchlength": {
            "name": "sum_branchlength",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "node": []
            }
        },
        "Tree.set_subtree": {
            "name": "set_subtree",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Tree.is_identical": {
            "name": "is_identical",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "tree2": []
            }
        },
        "Tree.is_compatible": {
            "name": "is_compatible",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "tree2": [],
                "threshold": [],
                "strict": []
            }
        },
        "Tree.common_ancestor": {
            "name": "common_ancestor",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "node1": [],
                "node2": []
            }
        },
        "Tree.distance": {
            "name": "distance",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "node1": [],
                "node2": []
            }
        },
        "Tree.is_monophyletic": {
            "name": "is_monophyletic",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "taxon_list": []
            }
        },
        "Tree.is_bifurcating": {
            "name": "is_bifurcating",
            "location": 503,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Tree.branchlength2support": {
            "name": "branchlength2support",
            "location": 524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.convert_absolute_support": {
            "name": "convert_absolute_support",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "nrep": []
            }
        },
        "Tree.has_support": {
            "name": "has_support",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Tree.randomize": {
            "name": "randomize",
            "location": 553,
            "return": [],
            "arguments": {
                "self": [],
                "ntax": [],
                "taxon_list": [],
                "branchlength": [],
                "branchlength_sd": [],
                "bifurcate": []
            }
        },
        "Tree.display": {
            "name": "display",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.to_string": {
            "name": "to_string",
            "location": 641,
            "return": [],
            "arguments": {
                "self": [],
                "support_as_branchlengths": [],
                "branchlengths_only": [],
                "plain": [],
                "plain_newick": [],
                "ladderize": [],
                "ignore_comments": []
            }
        },
        "Tree.__str__": {
            "name": "__str__",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.unroot": {
            "name": "unroot",
            "location": 746,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.root_with_outgroup": {
            "name": "root_with_outgroup",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "outgroup": []
            }
        },
        "Tree.merge_with_support": {
            "name": "merge_with_support",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "bstrees": [],
                "constree": [],
                "threshold": [],
                "outgroup": []
            }
        },
        "Tree.to_string.make_info_string": {
            "name": "make_info_string",
            "location": 659,
            "return": [],
            "arguments": {
                "data": [],
                "terminal": []
            }
        },
        "Tree.to_string.ladderize_nodes": {
            "name": "ladderize_nodes",
            "location": 693,
            "return": [],
            "arguments": {
                "nodes": [],
                "ladderize": []
            }
        },
        "Tree.to_string.newickize": {
            "name": "newickize",
            "location": 709,
            "return": [],
            "arguments": {
                "node": [],
                "ladderize": []
            }
        },
        "Tree.unroot._get_branches": {
            "name": "_get_branches",
            "location": 751,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "Tree.root_with_outgroup._connect_subtree": {
            "name": "_connect_subtree",
            "location": 788,
            "return": [],
            "arguments": {
                "parent": [],
                "child": []
            }
        }
    },
    "weblogo/seq_io/_nexus/__init__.py": {
        "as_handle": {
            "name": "as_handle",
            "location": 64,
            "return": [],
            "arguments": {
                "handleish": [],
                "mode": []
            }
        },
        "_get_command_lines": {
            "name": "_get_command_lines",
            "location": 74,
            "return": [],
            "arguments": {
                "file_contents": []
            }
        },
        "safename": {
            "name": "safename",
            "location": 289,
            "return": [],
            "arguments": {
                "name": [],
                "mrbayes": []
            }
        },
        "quotestrip": {
            "name": "quotestrip",
            "location": 308,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "get_start_end": {
            "name": "get_start_end",
            "location": 319,
            "return": [],
            "arguments": {
                "sequence": [],
                "skiplist": []
            }
        },
        "_sort_keys_by_values": {
            "name": "_sort_keys_by_values",
            "location": 339,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "_make_unique": {
            "name": "_make_unique",
            "location": 344,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "_unique_label": {
            "name": "_unique_label",
            "location": 349,
            "return": [],
            "arguments": {
                "previous_labels": [],
                "label": []
            }
        },
        "_seqmatrix2strmatrix": {
            "name": "_seqmatrix2strmatrix",
            "location": 363,
            "return": [],
            "arguments": {
                "matrix": []
            }
        },
        "_compact4nexus": {
            "name": "_compact4nexus",
            "location": 368,
            "return": [],
            "arguments": {
                "orig_list": []
            }
        },
        "combine": {
            "name": "combine",
            "location": 402,
            "return": [],
            "arguments": {
                "matrices": []
            }
        },
        "_kill_comments_and_break_lines": {
            "name": "_kill_comments_and_break_lines",
            "location": 491,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "_adjust_lines": {
            "name": "_adjust_lines",
            "location": 565,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "_replace_parenthesized_ambigs": {
            "name": "_replace_parenthesized_ambigs",
            "location": 585,
            "return": [],
            "arguments": {
                "seq": [],
                "rev_ambig_values": []
            }
        },
        "CharBuffer.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "CharBuffer.peek": {
            "name": "peek",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharBuffer.peek_nonwhitespace": {
            "name": "peek_nonwhitespace",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharBuffer.__next__": {
            "name": "__next__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharBuffer.next_nonwhitespace": {
            "name": "next_nonwhitespace",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharBuffer.skip_whitespace": {
            "name": "skip_whitespace",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharBuffer.next_until": {
            "name": "next_until",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "CharBuffer.peek_word": {
            "name": "peek_word",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "CharBuffer.next_word": {
            "name": "next_word",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharBuffer.rest": {
            "name": "rest",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StepMatrix.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": [],
                "gap": []
            }
        },
        "StepMatrix.set": {
            "name": "set",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "value": []
            }
        },
        "StepMatrix.add": {
            "name": "add",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "value": []
            }
        },
        "StepMatrix.sum": {
            "name": "sum",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StepMatrix.transformation": {
            "name": "transformation",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StepMatrix.weighting": {
            "name": "weighting",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StepMatrix.smprint": {
            "name": "smprint",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Commandline.__init__": {
            "name": "__init__",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "title": []
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 647,
            "return": [],
            "arguments": {
                "self": [],
                "title": []
            }
        },
        "Nexus.__init__": {
            "name": "__init__",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "Nexus.get_original_taxon_order": {
            "name": "get_original_taxon_order",
            "location": 697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Nexus.set_original_taxon_order": {
            "name": "set_original_taxon_order",
            "location": 701,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Nexus.read": {
            "name": "read",
            "location": 707,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "Nexus._get_nexus_block": {
            "name": "_get_nexus_block",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "file_contents": []
            }
        },
        "Nexus._unknown_nexus_block": {
            "name": "_unknown_nexus_block",
            "location": 770,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "contents": []
            }
        },
        "Nexus._parse_nexus_block": {
            "name": "_parse_nexus_block",
            "location": 776,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "contents": []
            }
        },
        "Nexus._title": {
            "name": "_title",
            "location": 789,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._link": {
            "name": "_link",
            "location": 792,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._dimensions": {
            "name": "_dimensions",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._format": {
            "name": "_format",
            "location": 801,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._set": {
            "name": "_set",
            "location": 896,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._options": {
            "name": "_options",
            "location": 899,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._eliminate": {
            "name": "_eliminate",
            "location": 902,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._taxlabels": {
            "name": "_taxlabels",
            "location": 905,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._check_taxlabels": {
            "name": "_check_taxlabels",
            "location": 922,
            "return": [],
            "arguments": {
                "self": [],
                "taxon": []
            }
        },
        "Nexus._charlabels": {
            "name": "_charlabels",
            "location": 930,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._charstatelabels": {
            "name": "_charstatelabels",
            "location": 950,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._statelabels": {
            "name": "_statelabels",
            "location": 954,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._matrix": {
            "name": "_matrix",
            "location": 959,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._translate": {
            "name": "_translate",
            "location": 1068,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._utree": {
            "name": "_utree",
            "location": 1088,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._tree": {
            "name": "_tree",
            "location": 1092,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._apply_block_structure": {
            "name": "_apply_block_structure",
            "location": 1134,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "lines": []
            }
        },
        "Nexus._taxset": {
            "name": "_taxset",
            "location": 1141,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._charset": {
            "name": "_charset",
            "location": 1145,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._taxpartition": {
            "name": "_taxpartition",
            "location": 1149,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._codonposset": {
            "name": "_codonposset",
            "location": 1176,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._codeset": {
            "name": "_codeset",
            "location": 1192,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._charpartition": {
            "name": "_charpartition",
            "location": 1195,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._get_indices": {
            "name": "_get_indices",
            "location": 1221,
            "return": [],
            "arguments": {
                "self": [],
                "options": [],
                "set_type": [],
                "separator": []
            }
        },
        "Nexus._name_n_vector": {
            "name": "_name_n_vector",
            "location": 1234,
            "return": [],
            "arguments": {
                "self": [],
                "opts": [],
                "separator": []
            }
        },
        "Nexus._parse_list": {
            "name": "_parse_list",
            "location": 1256,
            "return": [],
            "arguments": {
                "self": [],
                "options_buffer": [],
                "set_type": []
            }
        },
        "Nexus._resolve": {
            "name": "_resolve",
            "location": 1312,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "set_type": []
            }
        },
        "Nexus._stateset": {
            "name": "_stateset",
            "location": 1370,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._changeset": {
            "name": "_changeset",
            "location": 1374,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._treeset": {
            "name": "_treeset",
            "location": 1378,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus._treepartition": {
            "name": "_treepartition",
            "location": 1382,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Nexus.write_nexus_data_partitions": {
            "name": "write_nexus_data_partitions",
            "location": 1386,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": [],
                "filename": [],
                "blocksize": [],
                "interleave": [],
                "exclude": [],
                "delete": [],
                "charpartition": [],
                "comment": [],
                "mrbayes": []
            }
        },
        "Nexus.write_nexus_data": {
            "name": "write_nexus_data",
            "location": 1452,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "matrix": [],
                "exclude": [],
                "delete": [],
                "blocksize": [],
                "interleave": [],
                "interleave_by_partition": [],
                "comment": [],
                "omit_NEXUS": [],
                "append_sets": [],
                "mrbayes": [],
                "codons_block": []
            }
        },
        "Nexus.append_sets": {
            "name": "append_sets",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": [],
                "exclude": [],
                "delete": [],
                "mrbayes": [],
                "include_codons": [],
                "codons_only": []
            }
        },
        "Nexus.export_fasta": {
            "name": "export_fasta",
            "location": 1727,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "width": []
            }
        },
        "Nexus.export_phylip": {
            "name": "export_phylip",
            "location": 1746,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Nexus.constant": {
            "name": "constant",
            "location": 1767,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": [],
                "delete": [],
                "exclude": []
            }
        },
        "Nexus.cstatus": {
            "name": "cstatus",
            "location": 1827,
            "return": [],
            "arguments": {
                "self": [],
                "site": [],
                "delete": [],
                "narrow": []
            }
        },
        "Nexus.weighted_stepmatrix": {
            "name": "weighted_stepmatrix",
            "location": 1851,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "exclude": [],
                "delete": []
            }
        },
        "Nexus.crop_matrix": {
            "name": "crop_matrix",
            "location": 1865,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": [],
                "delete": [],
                "exclude": []
            }
        },
        "Nexus.bootstrap": {
            "name": "bootstrap",
            "location": 1891,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": [],
                "delete": [],
                "exclude": []
            }
        },
        "Nexus.add_sequence": {
            "name": "add_sequence",
            "location": 1917,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "sequence": []
            }
        },
        "Nexus.insert_gap": {
            "name": "insert_gap",
            "location": 1944,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "n": [],
                "leftgreedy": []
            }
        },
        "Nexus._adjust_charlabels": {
            "name": "_adjust_charlabels",
            "location": 1993,
            "return": [],
            "arguments": {
                "self": [],
                "exclude": [],
                "insert": []
            }
        },
        "Nexus.invert": {
            "name": "invert",
            "location": 2022,
            "return": [],
            "arguments": {
                "self": [],
                "charlist": []
            }
        },
        "Nexus.gaponly": {
            "name": "gaponly",
            "location": 2026,
            "return": [],
            "arguments": {
                "self": [],
                "include_missing": []
            }
        },
        "Nexus.terminal_gap_to_missing": {
            "name": "terminal_gap_to_missing",
            "location": 2034,
            "return": [],
            "arguments": {
                "self": [],
                "missing": [],
                "skip_n": []
            }
        },
        "CharBuffer.next": {
            "name": "next",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Nexus.insert_gap._adjust": {
            "name": "_adjust",
            "location": 1951,
            "return": [],
            "arguments": {
                "set": [],
                "x": [],
                "d": [],
                "leftgreedy": []
            }
        }
    },
    "weblogo/utils/deoptparse.py": {
        "_copyright_callback": {
            "name": "_copyright_callback",
            "location": 52,
            "return": [],
            "arguments": {
                "option": [],
                "opt": [],
                "value": [],
                "parser": []
            }
        },
        "_doc_callback": {
            "name": "_doc_callback",
            "location": 62,
            "return": [],
            "arguments": {
                "option": [],
                "opt": [],
                "value": [],
                "parser": []
            }
        },
        "_check_file_in": {
            "name": "_check_file_in",
            "location": 106,
            "return": [],
            "arguments": {
                "option": [],
                "opt": [],
                "value": []
            }
        },
        "_check_file_out": {
            "name": "_check_file_out",
            "location": 115,
            "return": [],
            "arguments": {
                "option": [],
                "opt": [],
                "value": []
            }
        },
        "_check_boolean": {
            "name": "_check_boolean",
            "location": 124,
            "return": [],
            "arguments": {
                "option": [],
                "opt": [],
                "value": []
            }
        },
        "_check_dict": {
            "name": "_check_dict",
            "location": 145,
            "return": [],
            "arguments": {
                "option": [],
                "opt": [],
                "value": []
            }
        },
        "DeHelpFormatter.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "indent_increment": [],
                "max_help_position": [],
                "width": [],
                "short_first": []
            }
        },
        "DeHelpFormatter.format_option_strings": {
            "name": "format_option_strings",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "option": []
            }
        },
        "DeOption._new_check_choice": {
            "name": "_new_check_choice",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeOptionParser.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "usage": [],
                "option_list": [],
                "option_class": [],
                "version": [],
                "conflict_handler": [],
                "description": [],
                "long_description": [],
                "formatter": [],
                "add_help_option": [],
                "prog": [],
                "copyright": [],
                "add_verbose_options": []
            }
        }
    },
    "weblogo/utils/__init__.py": {
        "isblank": {
            "name": "isblank",
            "location": 54,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "isfloat": {
            "name": "isfloat",
            "location": 65,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "isint": {
            "name": "isint",
            "location": 74,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "ischar": {
            "name": "ischar",
            "location": 83,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "remove_whitespace": {
            "name": "remove_whitespace",
            "location": 90,
            "return": [],
            "arguments": {
                "astring": []
            }
        },
        "invert_dict": {
            "name": "invert_dict",
            "location": 96,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "stdrepr": {
            "name": "stdrepr",
            "location": 105,
            "return": [],
            "arguments": {
                "obj": [],
                "attributes": [],
                "name": []
            }
        },
        "group_count": {
            "name": "group_count",
            "location": 121,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "crc32": {
            "name": "crc32",
            "location": 162,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "crc64": {
            "name": "crc64",
            "location": 172,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "resource_string": {
            "name": "resource_string",
            "location": 245,
            "return": [],
            "arguments": {
                "modulename": [],
                "resource": [],
                "basefilename": []
            }
        },
        "resource_stream": {
            "name": "resource_stream",
            "location": 252,
            "return": [],
            "arguments": {
                "modulename": [],
                "resource": [],
                "basefilename": []
            }
        },
        "resource_filename": {
            "name": "resource_filename",
            "location": 259,
            "return": [],
            "arguments": {
                "modulename": [],
                "resource": [],
                "basefilename": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "typeof": [],
                "data": [],
                "lineno": [],
                "offset": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentError.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "key": [],
                "value": []
            }
        }
    }
}
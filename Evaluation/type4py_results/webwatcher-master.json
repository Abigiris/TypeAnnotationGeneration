{
    "webwatcher-master/setup.py": {
        "load_requirements": {
            "name": "load_requirements",
            "location": 7,
            "return": [
                "str",
                "Optional[str]",
                "Optional[\"LocalizedString\"]"
            ],
            "arguments": {}
        }
    },
    "webwatcher-master/src/webwatcher/diffa.py": {
        "_do_diff_on_screenshots": {
            "name": "_do_diff_on_screenshots",
            "location": 45,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "old_screenshot": [
                    "str",
                    "int"
                ],
                "new_screenshot": [
                    "str",
                    "bool",
                    "Sequence[T]"
                ]
            }
        },
        "ComparisonFailureException.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "PageDiff.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "availability": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool"
                ],
                "screenshot_diff": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool"
                ],
                "content_diff": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PageDiff.differences": {
            "name": "differences",
            "location": 23,
            "return": [
                "dict",
                "Set[str]",
                "Dict[int, Dict[int, Any]]",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenshotDiff.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "old": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int"
                ],
                "new": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int"
                ],
                "diff_file": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "ScreenshotDiff.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diffa.diff": {
            "name": "diff",
            "location": 67,
            "return": [
                "str",
                "Tuple[str, float]",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "new_observation": [
                    "Optional[float]",
                    "Optional[Any]",
                    "int",
                    "str"
                ],
                "old_observation": [
                    "Optional[Callable]",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "webwatcher-master/src/webwatcher/environment.py": {
        "cache_folder": {
            "name": "cache_folder",
            "location": 14,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "data_folder": {
            "name": "data_folder",
            "location": 20,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]",
                "int",
                "Union[Dict, str]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "_ensure_exists": {
            "name": "_ensure_exists",
            "location": 26,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "folder": [
                    "pathlib.Path",
                    "bool",
                    "Callable",
                    "Callable[[], T]",
                    "bytes",
                    "Callable[..., None]"
                ]
            }
        },
        "_appdir_with_override": {
            "name": "_appdir_with_override",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "env_var_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable"
                ],
                "default_app_dir": [
                    "str",
                    "Optional[str]",
                    "Path"
                ]
            }
        },
        "_data_root": {
            "name": "_data_root",
            "location": 57,
            "return": [
                "MutableMapping[str, Any]",
                "Callable[[str, Any], Tuple[bytes, int]]",
                "str",
                "MutableMapping[str, List[str]]"
            ],
            "arguments": {}
        },
        "_cache_root": {
            "name": "_cache_root",
            "location": 62,
            "return": [
                "bool",
                "Sequence[int]"
            ],
            "arguments": {}
        }
    },
    "webwatcher-master/src/webwatcher/filehash.py": {
        "_read_file_chunks": {
            "name": "_read_file_chunks",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "fileobject": [
                    "Union[str, IO]",
                    "IO[str]"
                ]
            }
        },
        "file_hash": {
            "name": "file_hash",
            "location": 12,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "webwatcher-master/src/webwatcher/http_session.py": {},
    "webwatcher-master/src/webwatcher/main.py": {
        "get_previous_observation": {
            "name": "get_previous_observation",
            "location": 43,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "storage": [
                    "str"
                ],
                "page": [
                    "str"
                ]
            }
        },
        "_raise_first": {
            "name": "_raise_first",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "errors": [
                    "Optional[Exception]",
                    "BaseException",
                    "str",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "observe_the_web": {
            "name": "observe_the_web",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "diffa": [
                    "int",
                    "Callable",
                    "str"
                ],
                "storage": [
                    "int",
                    "Callable",
                    "float"
                ],
                "watcher": [
                    "int",
                    "Callable",
                    "str"
                ],
                "under_observation": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "run_web_watcher": {
            "name": "run_web_watcher",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Observer.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "screenshotter": [
                    "int",
                    "bool",
                    "float"
                ],
                "webfetcher": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Observer.observe": {
            "name": "observe",
            "location": 75,
            "return": [
                "str",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "webwatcher-master/src/webwatcher/observation.py": {
        "Screenshot.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content_hash": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "content_path": [
                    "str"
                ]
            }
        },
        "Screenshot.__hash__": {
            "name": "__hash__",
            "location": 9,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screenshot.__eq__": {
            "name": "__eq__",
            "location": 12,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "Screenshot.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageObservation.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "MutableMapping[str, Any]"
                ],
                "observation_time": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple[int, int, int]",
                    "datetime.timedelta"
                ],
                "availability": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "MutableMapping[str, Any]"
                ],
                "screenshot": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "MutableMapping[str, Any]"
                ],
                "raw_content_location": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "PageObservation.artefacts": {
            "name": "artefacts",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageObservation.get_meta_info": {
            "name": "get_meta_info",
            "location": 44,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "webwatcher-master/src/webwatcher/screenshotter.py": {
        "_call_quietly": {
            "name": "_call_quietly",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "timeout": [
                    "float",
                    "int",
                    "Callable",
                    "Union[bool, str]",
                    "Optional[dict]"
                ]
            }
        },
        "_download_firefox_package": {
            "name": "_download_firefox_package",
            "location": 73,
            "return": [
                "str",
                "int",
                "deque"
            ],
            "arguments": {}
        },
        "_path_to_modern_firefox": {
            "name": "_path_to_modern_firefox",
            "location": 113,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {}
        },
        "Screenshotter.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temp_storage": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Screenshotter.take_screenshot_of": {
            "name": "take_screenshot_of",
            "location": 46,
            "return": [
                "Optional[int]",
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, str]",
                    "List[Union[str, Any]]",
                    "List[str]"
                ]
            }
        }
    },
    "webwatcher-master/src/webwatcher/storage.py": {
        "_de_jsonsafe": {
            "name": "_de_jsonsafe",
            "location": 133,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "jsonsafe_data": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "_filter_match": {
            "name": "_filter_match",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "filters": [
                    "Dict[str, Any]",
                    "Dict[bytes, bytes]",
                    "Dict[str, str]",
                    "Dict[str, float]",
                    "Dict[str, Dict]"
                ],
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "MutableMapping",
                    "Dict[str, object]"
                ]
            }
        },
        "_json_safe": {
            "name": "_json_safe",
            "location": 154,
            "return": [
                "bool",
                "int",
                "list"
            ],
            "arguments": {
                "v": [
                    "bool",
                    "str",
                    "Tuple[str]",
                    "Match",
                    "int"
                ]
            }
        },
        "_read_file_chunks": {
            "name": "_read_file_chunks",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "fileobject": [
                    "Union[str, IO]",
                    "IO[str]",
                    "os.PathLike"
                ]
            }
        },
        "_storage_filename_for": {
            "name": "_storage_filename_for",
            "location": 174,
            "return": [
                "str",
                "IO"
            ],
            "arguments": {
                "existing_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "Persistable.artefacts": {
            "name": "artefacts",
            "location": 17,
            "return": [
                "typing.Dict[builtins.str, builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Persistable.get_meta_info": {
            "name": "get_meta_info",
            "location": 20,
            "return": [
                "typing.Dict[builtins.str, builtins.object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StorageFailureException.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "Storage.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "storage_root": [
                    "str",
                    "Optional[Any]",
                    "Optional[IO[str]]",
                    "bool",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Storage.persist": {
            "name": "persist",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "persistable": [
                    "dict",
                    "Dict[str, Any]",
                    "Type['Model']"
                ]
            }
        },
        "Storage.find": {
            "name": "find",
            "location": 66,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FromPersistence.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "FromPersistence.__getitem__": {
            "name": "__getitem__",
            "location": 74,
            "return": [
                "str",
                "dict",
                "Optional[List[str]]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "FromPersistence.fetch_local": {
            "name": "fetch_local",
            "location": 77,
            "return": [
                "Optional[float]",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "int",
                    "bytes"
                ]
            }
        },
        "StorageQuery.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backing_storage": [
                    "int",
                    "float",
                    "str"
                ],
                "filter_args": [
                    "\"Sequence\""
                ]
            }
        },
        "StorageQuery.having": {
            "name": "having",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StorageQuery.order_by": {
            "name": "order_by",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StorageQuery.fetch": {
            "name": "fetch",
            "location": 105,
            "return": [
                "Set[int]",
                "list",
                "str",
                "Optional[dict]",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "webwatcher-master/src/webwatcher/temporarystorage.py": {
        "temporary_storage": {
            "name": "temporary_storage",
            "location": 45,
            "return": [
                "typing.Iterator[TemporaryStorage]"
            ],
            "arguments": {}
        },
        "TemporaryDirectory.__enter__": {
            "name": "__enter__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.__exit__": {
            "name": "__exit__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "TemporaryStorage.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "bool",
                    "str",
                    "type",
                    "List[str]"
                ]
            }
        },
        "TemporaryStorage.new_file": {
            "name": "new_file",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "leave_open": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TemporaryStorage.new_folder": {
            "name": "new_folder",
            "location": 36,
            "return": [
                "int",
                "bytes",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AttachedTemporaryDirectory.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "_AttachedTemporaryDirectory.__enter__": {
            "name": "__enter__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AttachedTemporaryDirectory.__exit__": {
            "name": "__exit__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "webwatcher-master/src/webwatcher/watchconfiguration.py": {
        "_if_exists_or_none": {
            "name": "_if_exists_or_none",
            "location": 20,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "_find_wach_confguration_path": {
            "name": "_find_wach_confguration_path",
            "location": 27,
            "return": [],
            "arguments": {
                "config_path": []
            }
        },
        "_config_to_page_specification": {
            "name": "_config_to_page_specification",
            "location": 41,
            "return": [],
            "arguments": {
                "sites": []
            }
        },
        "_print_err": {
            "name": "_print_err",
            "location": 52,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "print_config_template": {
            "name": "print_config_template",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "watched_pages": {
            "name": "watched_pages",
            "location": 62,
            "return": [],
            "arguments": {
                "config_path": []
            }
        },
        "PageUnderObsevation.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "webwatcher-master/src/webwatcher/webfetcher.py": {
        "WebFetcher.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temp": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WebFetcher.fetch": {
            "name": "fetch",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "webwatcher-master/src/webwatcher/__init__.py": {},
    "webwatcher-master/tests/filehash/test_files.py": {
        "test_can_hash_empty_file": {
            "name": "test_can_hash_empty_file",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_can_hash_file_with_content": {
            "name": "test_can_hash_file_with_content",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "webwatcher-master/tests/storage/conftest.py": {
        "local_storage": {
            "name": "local_storage",
            "location": 9,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "webwatcher-master/tests/storage/mocking.py": {
        "MockPersistable.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "artefacts": [
                    "int",
                    "bool",
                    "float"
                ],
                "meta": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MockPersistable.artefacts": {
            "name": "artefacts",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPersistable.get_meta_info": {
            "name": "get_meta_info",
            "location": 11,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "webwatcher-master/tests/storage/test_persistence.py": {
        "test_empty_thing_can_persist": {
            "name": "test_empty_thing_can_persist",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "local_storage": [
                    "str",
                    "float"
                ]
            }
        },
        "test_can_retrieve_thing_from_storage": {
            "name": "test_can_retrieve_thing_from_storage",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "local_storage": [
                    "pathlib.Path"
                ],
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "webwatcher-master/tests/storage/test_queries.py": {
        "test_can_query_by_meta_attributes": {
            "name": "test_can_query_by_meta_attributes",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "local_storage": [
                    "dict"
                ]
            }
        },
        "test_query_ordering": {
            "name": "test_query_ordering",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "local_storage": [
                    "Dict[str, float]",
                    "str",
                    "int"
                ]
            }
        },
        "_persisted_thing": {
            "name": "_persisted_thing",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "has": {
            "name": "has",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "target": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "dict"
                ],
                "under_test": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    }
}
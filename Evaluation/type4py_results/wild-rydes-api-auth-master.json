{
    "wild-rydes-api-auth-master/handlers/authorizer.py": {
        "_on_exception": {
            "name": "_on_exception",
            "location": 18,
            "return": [
                "Type",
                "Optional[List[str]]",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "str",
                    "bool",
                    "Optional[list]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_create_policy": {
            "name": "_create_policy",
            "location": 23,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "arn": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[int]"
                ],
                "effect": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[int]"
                ]
            }
        },
        "_check_authorization_token_event": {
            "name": "_check_authorization_token_event",
            "location": 44,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "_get_api_keys": {
            "name": "_get_api_keys",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "apig_name": [
                    "str"
                ]
            }
        },
        "_get_apig_name_from_rest_id": {
            "name": "_get_apig_name_from_rest_id",
            "location": 71,
            "return": [
                "str",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "rest_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_rest_id_from_arn": {
            "name": "_get_rest_id_from_arn",
            "location": 76,
            "return": [
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "arn": [
                    "str"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event": [
                    "Mapping[str, Any]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "wild-rydes-api-auth-master/handlers/create_api_key.py": {
        "_get_api_key_from_event": {
            "name": "_get_api_key_from_event",
            "location": 13,
            "return": [
                "str",
                "Dict[str, Any]",
                "Exception",
                "bool",
                "int"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "_get_api_key_id_from_event_params": {
            "name": "_get_api_key_id_from_event_params",
            "location": 28,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "_get_api_key_id_from_event_body": {
            "name": "_get_api_key_id_from_event_body",
            "location": 38,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "event": [
                    "str",
                    "dict"
                ]
            }
        },
        "_check_key_exists": {
            "name": "_check_key_exists",
            "location": 48,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "apik_id": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "_create_api_key": {
            "name": "_create_api_key",
            "location": 61,
            "return": [
                "Optional[int]",
                "str",
                "Callable"
            ],
            "arguments": {
                "apik_id": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_write_key_to_ddb": {
            "name": "_write_key_to_ddb",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "apik": [
                    "bool",
                    "str",
                    "bytes",
                    "list",
                    "IO",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 82,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "wild-rydes-api-auth-master/handlers/delete_api_key.py": {
        "_delete_api_key": {
            "name": "_delete_api_key",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "apik_id": [
                    "int",
                    "str"
                ]
            }
        },
        "_delete_api_key_by_timestamp": {
            "name": "_delete_api_key_by_timestamp",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "apik_id": [
                    "int",
                    "str"
                ],
                "timestamp": [
                    "int",
                    "str"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 26,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "logging.Logger"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "wild-rydes-api-auth-master/handlers/get_api_key.py": {
        "_get_api_key": {
            "name": "_get_api_key",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "apik_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_api_key_by_timestamp": {
            "name": "_get_api_key_by_timestamp",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "apik_id": [
                    "str",
                    "int"
                ],
                "timestamp": [
                    "str",
                    "int"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 26,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "logging.Logger"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "wild-rydes-api-auth-master/handlers/update_api_key.py": {
        "_get_id_from_event": {
            "name": "_get_id_from_event",
            "location": 13,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "_get_timestamp_from_event": {
            "name": "_get_timestamp_from_event",
            "location": 18,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "str",
                    "list"
                ]
            }
        },
        "_get_attribute_from_event": {
            "name": "_get_attribute_from_event",
            "location": 23,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "str",
                    "list"
                ]
            }
        },
        "_update_key_ttl": {
            "name": "_update_key_ttl",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "keyid": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "bytes"
                ],
                "ttl": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "_update_key_active": {
            "name": "_update_key_active",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "keyid": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "_update_key_inactive": {
            "name": "_update_key_inactive",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "keyid": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 46,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "logging.Logger"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "wild-rydes-api-auth-master/src/api_key.py": {
        "_genrate_api_key": {
            "name": "_genrate_api_key",
            "location": 21,
            "return": [
                "str",
                "List[str]",
                "List[bytes]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "bytes",
                    "List[bytes]",
                    "bool"
                ],
                "secret": [
                    "str",
                    "bytes",
                    "List[bytes]",
                    "bool"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 26,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "int",
                    "Callable[[int], None]",
                    "Sequence[str]"
                ]
            }
        },
        "get_from_ddb_item": {
            "name": "get_from_ddb_item",
            "location": 31,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, object]"
                ]
            }
        },
        "ApiKey.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "str",
                    "MutableMapping[str, Any]",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "List[str]",
                    "dict"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "bool"
                ],
                "date_time": [
                    "List[str]",
                    "datetime.date",
                    "Optional[str]",
                    "datetime.datetime",
                    "float",
                    "int",
                    "bool",
                    "Optional[datetime.datetime]"
                ],
                "active": [
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "str",
                    "MutableMapping[str, Any]",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "List[str]",
                    "dict"
                ],
                "ttl": [
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "str",
                    "MutableMapping[str, Any]",
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "ApiKey._get_date_time_timestamp": {
            "name": "_get_date_time_timestamp",
            "location": 55,
            "return": [
                "datetime.datetime",
                "int",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.active": {
            "name": "active",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.date_time": {
            "name": "date_time",
            "location": 65,
            "return": [
                "Optional[str]",
                "str",
                "Tuple[str, str]",
                "int",
                "Sequence[str]",
                "bool",
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.identity": {
            "name": "identity",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.key": {
            "name": "key",
            "location": 75,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.ttl": {
            "name": "ttl",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.get_ddb_item": {
            "name": "get_ddb_item",
            "location": 84,
            "return": [
                "str",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "wild-rydes-api-auth-master/src/ddb.py": {
        "DynamoDBTableCheckItemError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "DynamoDBTableGetItemError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "DynamoDBTablePutItemError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "DynamoDBTableQueryItemError.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "DynamoDBTable.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "hash_key": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ],
                "range_key": [
                    "str",
                    "bool",
                    "Dict[Hashable, Any]",
                    "List[T]",
                    "type"
                ]
            }
        },
        "DynamoDBTable.table_name": {
            "name": "table_name",
            "location": 64,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoDBTable.hash_key": {
            "name": "hash_key",
            "location": 69,
            "return": [
                "str",
                "int",
                "bytes",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoDBTable.range_key": {
            "name": "range_key",
            "location": 74,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamoDBTable.check_item_exists": {
            "name": "check_item_exists",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "DynamoDBTable.get_item": {
            "name": "get_item",
            "location": 91,
            "return": [
                "Optional[Dict[str, Any]]",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "range_value": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "consistent_read": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "DynamoDBTable.put_item": {
            "name": "put_item",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Optional[List[\"DeliveryItem\"]]",
                    "Dict[str, List]"
                ]
            }
        },
        "DynamoDBTable.query_by_item_id": {
            "name": "query_by_item_id",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "list"
                ],
                "start_key": [
                    "dict",
                    "str",
                    "bool",
                    "Union[str, int]"
                ]
            }
        }
    },
    "wild-rydes-api-auth-master/src/errors.py": {
        "apig_responder": {
            "name": "apig_responder",
            "location": 15,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "e": [
                    "BaseException",
                    "Exception",
                    "int",
                    "str",
                    "T",
                    "bool",
                    "logging.Logger"
                ]
            }
        },
        "ApiAuthSvcBaseError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "ApiAuthSvcBaseError.get_dict": {
            "name": "get_dict",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthSvcBaseError.get_json": {
            "name": "get_json",
            "location": 37,
            "return": [
                "str",
                "dict",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthSvcRequestError.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "identity": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ApiAuthSvcRequestError.get_dict": {
            "name": "get_dict",
            "location": 51,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthSvcRequestError.get_apig_response": {
            "name": "get_apig_response",
            "location": 57,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthSvcInvalidRequestData.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiAuthSvcDuplicateApiKeyError.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "bool"
                ]
            }
        },
        "ApiAuthSvcApiKeyDoesNotExistError.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "bool"
                ]
            }
        },
        "ApiAuthSvcCreateApiKeyFailedError.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "bool"
                ]
            }
        },
        "ApiAuthSvcGetApiKeyFailedError.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "bool"
                ]
            }
        },
        "ApiAuthSvcUpdateApiKeyFailedError.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "bool"
                ]
            }
        },
        "ApiAuthSvcDeleteApiKeyFailedError.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "wild-rydes-api-auth-master/src/logging.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "wild-rydes-api-auth-master/src/__init__.py": {}
}
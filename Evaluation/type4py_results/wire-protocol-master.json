{
    "wire-protocol-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 27,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "wire-protocol-master/adbwp/consts.py": {},
    "wire-protocol-master/adbwp/enums.py": {
        "CommandResponse.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemType.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "wire-protocol-master/adbwp/exceptions.py": {},
    "wire-protocol-master/adbwp/header.py": {
        "new": {
            "name": "new",
            "location": 125,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "command": [
                    "hints.Int",
                    "int",
                    "Union[Iterable, str]",
                    "str",
                    "bool"
                ],
                "arg0": [
                    "hints.Int",
                    "int",
                    "Union[Iterable, str]",
                    "str",
                    "bool"
                ],
                "arg1": [
                    "hints.Int",
                    "int",
                    "Union[Iterable, str]",
                    "str",
                    "bool"
                ],
                "data_length": [
                    "hints.Int",
                    "int",
                    "Union[Iterable, str]",
                    "str",
                    "bool"
                ],
                "data_checksum": [
                    "hints.Int",
                    "int",
                    "Union[Iterable, str]",
                    "str",
                    "bool"
                ],
                "magic": [
                    "hints.Int",
                    "int",
                    "Union[Iterable, str]",
                    "str",
                    "bool"
                ]
            }
        },
        "magic": {
            "name": "magic",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "to_bytes": {
            "name": "to_bytes",
            "location": 161,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "header": [
                    "Dict[str, List[str]]",
                    "Mapping",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "from_bytes": {
            "name": "from_bytes",
            "location": 177,
            "return": [
                "Type[object]",
                "Tuple[int, int, int, int]",
                "Optional[\"Outcome\"]"
            ],
            "arguments": {
                "header": [
                    "hints.Bytes",
                    "Dict[str, Any]",
                    "Union[str, bytes]",
                    "List[dict]",
                    "dict"
                ]
            }
        },
        "Header.connect": {
            "name": "connect",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.auth": {
            "name": "auth",
            "location": 44,
            "return": [
                "str",
                "dict",
                "bool",
                "IO[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.open": {
            "name": "open",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.ready": {
            "name": "ready",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.write": {
            "name": "write",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.close": {
            "name": "close",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.sync": {
            "name": "sync",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.okay": {
            "name": "okay",
            "location": 104,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.fail": {
            "name": "fail",
            "location": 114,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "wire-protocol-master/adbwp/hints.py": {},
    "wire-protocol-master/adbwp/message.py": {
        "new": {
            "name": "new",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, str]",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "command": [
                    "int",
                    "bytes",
                    "Hashable"
                ],
                "arg0": [
                    "int",
                    "bytes",
                    "Hashable"
                ],
                "arg1": [
                    "int",
                    "bytes",
                    "Hashable"
                ],
                "data": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "from_header": {
            "name": "from_header",
            "location": 53,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "header": [
                    "dict"
                ],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 79,
            "return": [
                "Callable",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "serial": [
                    "str",
                    "bool",
                    "int",
                    "Iterable[int]"
                ],
                "banner": [
                    "str",
                    "bool",
                    "int",
                    "Iterable[int]"
                ],
                "system_type": [
                    "str",
                    "bool",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "auth_signature": {
            "name": "auth_signature",
            "location": 97,
            "return": [
                "int",
                "str",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "signature": [
                    "str",
                    "AbstractSet[str]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "auth_rsa_public_key": {
            "name": "auth_rsa_public_key",
            "location": 111,
            "return": [
                "Callable",
                "bool",
                "dict",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]"
            ],
            "arguments": {
                "public_key": [
                    "str",
                    "dict",
                    "bool",
                    "bytes"
                ]
            }
        },
        "open": {
            "name": "open",
            "location": 125,
            "return": [
                "str",
                "Callable[[T], T]",
                "T"
            ],
            "arguments": {
                "local_id": [
                    "str"
                ],
                "destination": [
                    "str"
                ]
            }
        },
        "ready": {
            "name": "ready",
            "location": 144,
            "return": [
                "Sequence['cirq.Qid']",
                "Callable[[T], T]",
                "T"
            ],
            "arguments": {
                "local_id": [
                    "str",
                    "int"
                ],
                "remote_id": [
                    "str",
                    "int"
                ]
            }
        },
        "write": {
            "name": "write",
            "location": 166,
            "return": [
                "Sequence['cirq.Qid']",
                "Callable[[T], T]",
                "T"
            ],
            "arguments": {
                "local_id": [
                    "str",
                    "Dict[str, str]"
                ],
                "remote_id": [
                    "str",
                    "Dict[str, str]"
                ],
                "data": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "close": {
            "name": "close",
            "location": 187,
            "return": [
                "Sequence['cirq.Qid']",
                "Callable[[T], T]",
                "T"
            ],
            "arguments": {
                "local_id": [
                    "str",
                    "int"
                ],
                "remote_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "wire-protocol-master/adbwp/payload.py": {
        "checksum": {
            "name": "checksum",
            "location": 10,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "hints.Buffer",
                    "bytes",
                    "Union[bytes, str]",
                    "str",
                    "int"
                ]
            }
        },
        "null_terminate": {
            "name": "null_terminate",
            "location": 22,
            "return": [
                "int",
                "bool",
                "Dict[str, List[str]]",
                "List[Dict[str, Any]]",
                "AbstractSet[T_co]",
                "MutableSet[T]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]",
                    "hints.Buffer"
                ]
            }
        },
        "as_bytes": {
            "name": "as_bytes",
            "location": 34,
            "return": [
                "dict",
                "Union[Dict, str]",
                "int"
            ],
            "arguments": {
                "data": [
                    "hints.Buffer",
                    "bytes",
                    "dict",
                    "Union[str, bytes]",
                    "Mapping[str, Union[int, slice]]"
                ],
                "encoding": [
                    "hints.Str",
                    "str",
                    "bytes",
                    "int"
                ],
                "errors": [
                    "hints.Str",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "system_identity_string": {
            "name": "system_identity_string",
            "location": 58,
            "return": [
                "str",
                "Type",
                "bytes"
            ],
            "arguments": {
                "system_type": [
                    "hints.Str",
                    "str",
                    "int"
                ],
                "serial": [
                    "hints.Str",
                    "str",
                    "int"
                ],
                "banner": [
                    "hints.Str",
                    "str",
                    "int"
                ]
            }
        }
    },
    "wire-protocol-master/adbwp/__init__.py": {},
    "wire-protocol-master/docs/conf.py": {},
    "wire-protocol-master/tests/conftest.py": {
        "command_type": {
            "name": "command_type",
            "location": 18,
            "return": [
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable"
                ]
            }
        },
        "system_type": {
            "name": "system_type",
            "location": 26,
            "return": [
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable"
                ]
            }
        },
        "auth_type": {
            "name": "auth_type",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "valid_payload": {
            "name": "valid_payload",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "valid_payload_bytes": {
            "name": "valid_payload_bytes",
            "location": 61,
            "return": [
                "str",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "valid_payload": [
                    "str",
                    "bytes"
                ]
            }
        },
        "invalid_payload_type": {
            "name": "invalid_payload_type",
            "location": 75,
            "return": [
                "int",
                "str",
                "Optional[Type[BaseException]]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "bytes_larger_than_maxdata": {
            "name": "bytes_larger_than_maxdata",
            "location": 83,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {}
        },
        "bytes_larger_than_connect_auth_max_data": {
            "name": "bytes_larger_than_connect_auth_max_data",
            "location": 91,
            "return": [
                "Callable[[None, None], bool]",
                "IO[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {}
        },
        "str_larger_than_connect_auth_max_data": {
            "name": "str_larger_than_connect_auth_max_data",
            "location": 99,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "random_header": {
            "name": "random_header",
            "location": 107,
            "return": [
                "str",
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "Exception"
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "bool"
                ],
                "random_arg0": [
                    "str",
                    "bool"
                ],
                "random_arg1": [
                    "str",
                    "bool"
                ],
                "random_data_length": [
                    "str",
                    "bool"
                ],
                "random_data_checksum": [
                    "str",
                    "bool"
                ],
                "command_type_magic": [
                    "str",
                    "bool"
                ]
            }
        },
        "random_header_bytes": {
            "name": "random_header_bytes",
            "location": 118,
            "return": [
                "str",
                "Union[str, dict]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "random_header": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "command_type_magic": {
            "name": "command_type_magic",
            "location": 126,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "T",
                "Type",
                "Optional[int]"
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "type"
                ]
            }
        },
        "random_arg0": {
            "name": "random_arg0",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "random_arg1": {
            "name": "random_arg1",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "random_data_length": {
            "name": "random_data_length",
            "location": 150,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {}
        },
        "random_data_checksum": {
            "name": "random_data_checksum",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "random_serial": {
            "name": "random_serial",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "random_banner": {
            "name": "random_banner",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "random_signature": {
            "name": "random_signature",
            "location": 190,
            "return": [
                "str",
                "bytearray",
                "Union[bytes, bytearray]",
                "int",
                "List[int]"
            ],
            "arguments": {}
        },
        "random_rsa_public_key": {
            "name": "random_rsa_public_key",
            "location": 198,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "random_local_id": {
            "name": "random_local_id",
            "location": 206,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "random_remote_id": {
            "name": "random_remote_id",
            "location": 214,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "random_destination": {
            "name": "random_destination",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "random_bytes": {
            "name": "random_bytes",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "random_hex_str": {
            "name": "random_hex_str",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str"
                ]
            }
        },
        "random_str": {
            "name": "random_str",
            "location": 243,
            "return": [
                "str",
                "int",
                "ForwardRef",
                "List[str]"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str"
                ],
                "alphabet": [
                    "int",
                    "str"
                ]
            }
        },
        "random_int": {
            "name": "random_int",
            "location": 250,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "low": [
                    "int",
                    "float",
                    "List[str]",
                    "numpy.random.RandomState",
                    "Sequence[int]"
                ],
                "high": [
                    "int",
                    "float",
                    "List[str]",
                    "numpy.random.RandomState",
                    "Sequence[int]"
                ]
            }
        }
    },
    "wire-protocol-master/tests/test_enums.py": {
        "test_command_values_unchanged": {
            "name": "test_command_values_unchanged",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "enum_value": [
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "Callable",
                    "Tuple[int, int]"
                ],
                "int_value": [
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "Callable",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_auth_type_values_unchanged": {
            "name": "test_auth_type_values_unchanged",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "enum_value": [
                    "Callable"
                ],
                "int_value": [
                    "Callable"
                ]
            }
        },
        "test_command_response_str_returns_value": {
            "name": "test_command_response_str_returns_value",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "enum_value": [
                    "int",
                    "str",
                    "bool"
                ],
                "str_value": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_system_type_str_returns_value": {
            "name": "test_system_type_str_returns_value",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "enum_value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "str_value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ]
            }
        }
    },
    "wire-protocol-master/tests/test_header.py": {
        "property_name_with_command": {
            "name": "property_name_with_command",
            "location": 26,
            "return": [
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "property_name_with_command_response": {
            "name": "property_name_with_command_response",
            "location": 35,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "invalid_field_value": {
            "name": "invalid_field_value",
            "location": 51,
            "return": [
                "Optional[int]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "invalid_bytes_too_few": {
            "name": "invalid_bytes_too_few",
            "location": 60,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "invalid_bytes_too_many": {
            "name": "invalid_bytes_too_many",
            "location": 68,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_header_property_check_matches_command_type": {
            "name": "test_header_property_check_matches_command_type",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "property_name_with_command": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_header_property_check_matches_command_response_type": {
            "name": "test_header_property_check_matches_command_response_type",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "property_name_with_command_response": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_header_new_supports_default_values": {
            "name": "test_header_new_supports_default_values",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_header_new_assigns_fields": {
            "name": "test_header_new_assigns_fields",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "bool",
                    "Optional[dict]"
                ],
                "random_arg0": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "random_arg1": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "random_data_length": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "random_data_checksum": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[dict]",
                    "List[str]"
                ]
            }
        },
        "test_header_magic_computes_command_xor": {
            "name": "test_header_magic_computes_command_xor",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "Hashable",
                    "Type[Any]"
                ]
            }
        },
        "test_header_to_bytes_returns_24_bytes": {
            "name": "test_header_to_bytes_returns_24_bytes",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "random_header": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "test_header_to_bytes_raises_on_header_with_invalid_field_type": {
            "name": "test_header_to_bytes_raises_on_header_with_invalid_field_type",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "bytes",
                    "str",
                    "Callable[[str], int]"
                ],
                "invalid_field_value": [
                    "bytes",
                    "str",
                    "Callable[[str], int]"
                ]
            }
        },
        "test_header_to_bytes_raises_on_header_with_integer_overflow": {
            "name": "test_header_to_bytes_raises_on_header_with_integer_overflow",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "bytes"
                ]
            }
        },
        "test_header_from_bytes_raises_on_less_than_24_bytes": {
            "name": "test_header_from_bytes_raises_on_less_than_24_bytes",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_bytes_too_few": [
                    "str",
                    "AnyStr",
                    "bytes"
                ]
            }
        },
        "test_header_from_bytes_raises_on_more_than_24_bytes": {
            "name": "test_header_from_bytes_raises_on_more_than_24_bytes",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_bytes_too_many": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "AnyStr"
                ]
            }
        },
        "test_header_from_bytes_converts_command_to_enum": {
            "name": "test_header_from_bytes_converts_command_to_enum",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "random_header_bytes": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_header_converts_to_from_bytes": {
            "name": "test_header_converts_to_from_bytes",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "random_header": [
                    "bytes",
                    "int",
                    "Dict[str, str]"
                ],
                "random_header_bytes": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "wire-protocol-master/tests/test_message.py": {
        "test_new_computes_header_data_length_based_on_data_payload": {
            "name": "test_new_computes_header_data_length_based_on_data_payload",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Type"
                ],
                "valid_payload_bytes": [
                    "Dict[str, str]",
                    "Hashable",
                    "int",
                    "Optional[Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_new_computes_header_data_checksum_based_on_data_payload": {
            "name": "test_new_computes_header_data_checksum_based_on_data_payload",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "bool",
                    "int",
                    "Optional[golem_messages.message.tasks.SubtaskResultsRejected]",
                    "Optional[golem_messages.message.tasks.SubtaskResultsAccepted]"
                ],
                "valid_payload_bytes": [
                    "str",
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_new_computes_header_magic_based_on_data_payload": {
            "name": "test_new_computes_header_magic_based_on_data_payload",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_new_supports_default_values": {
            "name": "test_new_supports_default_values",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str"
                ]
            }
        },
        "test_new_assigns_field_values": {
            "name": "test_new_assigns_field_values",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "Optional[str]",
                    "Dict[str, List[str]]",
                    "Dict[str, float]"
                ],
                "random_arg0": [
                    "int"
                ],
                "random_arg1": [
                    "int"
                ],
                "valid_payload_bytes": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_new_raises_on_incorrect_payload_type": {
            "name": "test_new_raises_on_incorrect_payload_type",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "Type[Any]",
                    "type"
                ],
                "invalid_payload_type": [
                    "str",
                    "Type[Any]",
                    "type"
                ]
            }
        },
        "test_new_raises_on_data_payload_too_large": {
            "name": "test_new_raises_on_data_payload_too_large",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "bytes_larger_than_maxdata": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_from_header_assigns_header": {
            "name": "test_from_header_assigns_header",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "int"
                ],
                "random_arg0": [],
                "random_arg1": []
            }
        },
        "test_from_header_raises_on_header_with_incorrect_payload_type": {
            "name": "test_from_header_raises_on_header_with_incorrect_payload_type",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "Dict[str, Optional[str]]"
                ],
                "invalid_payload_type": [
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "test_from_header_raises_on_data_payload_too_large": {
            "name": "test_from_header_raises_on_data_payload_too_large",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "command_type": [
                    "str",
                    "dict",
                    "bool",
                    "bytes"
                ],
                "bytes_larger_than_maxdata": [
                    "str",
                    "dict",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_connect_assigns_correct_header_field_values": {
            "name": "test_connect_assigns_correct_header_field_values",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_connect_sets_system_identity_string_data_payload": {
            "name": "test_connect_sets_system_identity_string_data_payload",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "random_serial": [],
                "random_banner": [],
                "system_type": []
            }
        },
        "test_connect_raises_on_system_identity_too_large": {
            "name": "test_connect_raises_on_system_identity_too_large",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "random_serial": [
                    "Optional[str]",
                    "str"
                ],
                "system_type": [
                    "Optional[str]",
                    "str"
                ],
                "str_larger_than_connect_auth_max_data": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_auth_signature_assigns_correct_header_field_values": {
            "name": "test_auth_signature_assigns_correct_header_field_values",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_auth_signature_sets_signature_data_payload": {
            "name": "test_auth_signature_sets_signature_data_payload",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "random_signature": [
                    "bytes",
                    "str",
                    "Iterator[str]",
                    "Union[bytes, str, None]"
                ]
            }
        },
        "test_auth_signature_raises_on_signature_too_large": {
            "name": "test_auth_signature_raises_on_signature_too_large",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "bytes_larger_than_connect_auth_max_data": [
                    "bytes",
                    "str",
                    "bool",
                    "email.message.EmailMessage"
                ]
            }
        },
        "test_auth_rsa_public_key_assigns_correct_header_field_values": {
            "name": "test_auth_rsa_public_key_assigns_correct_header_field_values",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_auth_rsa_public_key_sets_public_key_data_payload": {
            "name": "test_auth_rsa_public_key_sets_public_key_data_payload",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "random_rsa_public_key": [
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "test_auth_rsa_public_key_raises_on_public_key_too_large": {
            "name": "test_auth_rsa_public_key_raises_on_public_key_too_large",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "bytes_larger_than_connect_auth_max_data": [
                    "str",
                    "int",
                    "Dict[str, Dict[Any, int]]",
                    "bytes"
                ]
            }
        },
        "test_open_assigns_correct_header_field_values": {
            "name": "test_open_assigns_correct_header_field_values",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "int",
                    "str"
                ]
            }
        },
        "test_open_sets_destination_data_payload": {
            "name": "test_open_sets_destination_data_payload",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "str"
                ],
                "random_destination": []
            }
        },
        "test_open_raises_on_zero_local_id": {
            "name": "test_open_raises_on_zero_local_id",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "random_destination": []
            }
        },
        "test_open_raises_on_destination_too_large": {
            "name": "test_open_raises_on_destination_too_large",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "str",
                    "bytes",
                    "Tuple[str, str, str]"
                ],
                "bytes_larger_than_maxdata": [
                    "str",
                    "bytes",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "test_ready_assigns_correct_header_field_values": {
            "name": "test_ready_assigns_correct_header_field_values",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "Iterable"
                ],
                "random_remote_id": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "Iterable"
                ]
            }
        },
        "test_ready_assigns_empty_data_payload": {
            "name": "test_ready_assigns_empty_data_payload",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "random_remote_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_ready_raises_on_zero_local_id": {
            "name": "test_ready_raises_on_zero_local_id",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "random_remote_id": [
                    "str",
                    "int"
                ]
            }
        },
        "test_ready_raises_on_zero_remote_id": {
            "name": "test_ready_raises_on_zero_remote_id",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "str",
                    "int"
                ]
            }
        },
        "test_write_assigns_correct_header_field_values": {
            "name": "test_write_assigns_correct_header_field_values",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "random_remote_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "valid_payload": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Iterable"
                ]
            }
        },
        "test_write_assigns_given_data_payload": {
            "name": "test_write_assigns_given_data_payload",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "Optional[int]",
                    "bytes",
                    "str"
                ],
                "random_remote_id": [
                    "Optional[int]",
                    "bytes",
                    "str"
                ],
                "valid_payload": [
                    "Optional[int]",
                    "bytes",
                    "str"
                ],
                "valid_payload_bytes": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "Optional[int]"
                ]
            }
        },
        "test_write_raises_on_empty_data_payload": {
            "name": "test_write_raises_on_empty_data_payload",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "random_remote_id": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "test_write_raises_on_data_payload_too_large": {
            "name": "test_write_raises_on_data_payload_too_large",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "random_remote_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "bytes_larger_than_maxdata": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "test_close_assigns_correct_header_field_values": {
            "name": "test_close_assigns_correct_header_field_values",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "str"
                ],
                "random_remote_id": [
                    "str"
                ]
            }
        },
        "test_close_assigns_no_data_payload": {
            "name": "test_close_assigns_no_data_payload",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "random_remote_id": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "test_close_raises_on_zero_remote_id": {
            "name": "test_close_raises_on_zero_remote_id",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "random_local_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "wire-protocol-master/tests/test_payload.py": {
        "test_checksum_computes_sum_bitwse_and_mask": {
            "name": "test_checksum_computes_sum_bitwse_and_mask",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "valid_payload_bytes": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_null_terminate_adds_zero_byte": {
            "name": "test_null_terminate_adds_zero_byte",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "valid_payload": [
                    "Callable",
                    "bool",
                    "int"
                ],
                "valid_payload_bytes": [
                    "Callable",
                    "bool",
                    "int"
                ]
            }
        },
        "test_null_terminate_raises_on_incorrect_payload_type": {
            "name": "test_null_terminate_raises_on_incorrect_payload_type",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_payload_type": [
                    "List[Tuple[bool, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "test_as_bytes_converts_supported_types_to_bytes": {
            "name": "test_as_bytes_converts_supported_types_to_bytes",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "valid_payload": [
                    "int",
                    "str"
                ]
            }
        },
        "test_as_bytes_raises_on_incorrect_payload_type": {
            "name": "test_as_bytes_raises_on_incorrect_payload_type",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_payload_type": [
                    "bytes",
                    "str",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "test_system_identity_string_colon_delimites_values": {
            "name": "test_system_identity_string_colon_delimites_values",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "system_type": [
                    "str",
                    "Type[Any]",
                    "type"
                ],
                "random_serial": [
                    "str",
                    "Type[Any]",
                    "type"
                ],
                "random_banner": [
                    "str",
                    "Type[Any]",
                    "type"
                ]
            }
        },
        "test_system_identity_string_null_terminates": {
            "name": "test_system_identity_string_null_terminates",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "system_type": [
                    "str",
                    "Type[Any]",
                    "type"
                ],
                "random_serial": [
                    "str",
                    "Type[Any]",
                    "type"
                ],
                "random_banner": [
                    "str",
                    "Type[Any]",
                    "type"
                ]
            }
        }
    }
}
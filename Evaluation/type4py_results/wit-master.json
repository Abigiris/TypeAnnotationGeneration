{
    "wit-master/lib/setup.py": {},
    "wit-master/lib/wit/common.py": {
        "error": {
            "name": "error",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "print_errors": {
            "name": "print_errors",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "errors": [
                    "str",
                    "Dict[str, Optional[str]]",
                    "Optional[str]",
                    "Callable[[str], bool]",
                    "type"
                ]
            }
        }
    },
    "wit-master/lib/wit/dependency.py": {
        "sources_conflict_check": {
            "name": "sources_conflict_check",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "dep": [
                    "str",
                    "Callable"
                ],
                "source_map": [
                    "str",
                    "bytes",
                    "list",
                    "Tuple[str]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "parse_dependency_tag": {
            "name": "parse_dependency_tag",
            "location": 181,
            "return": [
                "str",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "DependeeNewerThanDepender.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "depender": [
                    "int",
                    "bool",
                    "float"
                ],
                "dependee": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DependeeNewerThanDepender.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "bool",
                    "Callable"
                ],
                "source": [
                    "Optional[str]",
                    "str",
                    "Sequence[Sequence[Any]]",
                    "Iterable[str]"
                ],
                "specified_revision": [
                    "str",
                    "bool",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "int",
                    "Callable"
                ],
                "message": [
                    "str",
                    "bool",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "int",
                    "Callable"
                ]
            }
        },
        "Dependency.resolve_deps": {
            "name": "resolve_deps",
            "location": 39,
            "return": [
                "Optional[BaseException]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "wsroot": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "int"
                ],
                "repo_paths": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "int"
                ],
                "download": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "int"
                ],
                "source_map": [
                    "int",
                    "bytes"
                ],
                "packages": [
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "queue": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[Tuple[Any, Any]]",
                    "List[str]"
                ],
                "jobs": [
                    "str"
                ]
            }
        },
        "Dependency._parallel_clone": {
            "name": "_parallel_clone",
            "location": 69,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "deps": [
                    "str",
                    "bool",
                    "float"
                ],
                "wsroot": [
                    "bool",
                    "List[pathlib.Path]",
                    "str",
                    "Path"
                ],
                "repo_paths": [
                    "bool",
                    "List[pathlib.Path]",
                    "str",
                    "Path"
                ],
                "download": [
                    "bool",
                    "List[pathlib.Path]",
                    "str",
                    "Path"
                ],
                "jobs": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "Dependency.__key": {
            "name": "__key",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.__hash__": {
            "name": "__hash__",
            "location": 87,
            "return": [
                "int",
                "dict",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.__eq__": {
            "name": "__eq__",
            "location": 90,
            "return": [
                "bytes",
                "Optional[BaseException]",
                "FrozenSet[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "Set[VT]"
                ]
            }
        },
        "Dependency.infer_name": {
            "name": "infer_name",
            "location": 94,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "pathlib.Path",
                    "Callable[[str], str]"
                ]
            }
        },
        "Dependency.load": {
            "name": "load",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "str",
                    "List[str]",
                    "Union[pathlib.Path, str]"
                ],
                "repo_paths": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Union[str, pathlib.Path]"
                ],
                "wsroot": [
                    "pathlib.Path",
                    "str",
                    "FrozenSet[str]",
                    "dict",
                    "Literal",
                    "list"
                ],
                "download": [
                    "pathlib.Path",
                    "str",
                    "FrozenSet[str]",
                    "dict",
                    "Literal",
                    "list"
                ]
            }
        },
        "Dependency.add_dependent": {
            "name": "add_dependent",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dependent": []
            }
        },
        "Dependency.get_commit_time": {
            "name": "get_commit_time",
            "location": 112,
            "return": [
                "datetime.date",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.to_repo_entry": {
            "name": "to_repo_entry",
            "location": 116,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.from_repo_entry": {
            "name": "from_repo_entry",
            "location": 120,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "Dict[str, Any]",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "Dependency.resolved": {
            "name": "resolved",
            "location": 124,
            "return": [
                "str",
                "List[str]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency._is_bound": {
            "name": "_is_bound",
            "location": 128,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.resolved_rev": {
            "name": "resolved_rev",
            "location": 131,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.__repr__": {
            "name": "__repr__",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.short_revision": {
            "name": "short_revision",
            "location": 139,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.id": {
            "name": "id",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.get_id": {
            "name": "get_id",
            "location": 149,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.crawl_dep_tree": {
            "name": "crawl_dep_tree",
            "location": 152,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "wsroot": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "repo_paths": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "packages": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Dependency._parallel_clone.do": {
            "name": "do",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "dep": [
                    "str",
                    "int",
                    "Optional[int]",
                    "datetime.datetime"
                ]
            }
        }
    },
    "wit-master/lib/wit/env.py": {},
    "wit-master/lib/wit/gitrepo.py": {
        "BadSource.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "source": []
            }
        },
        "BadSource.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "wsroot": []
            }
        },
        "GitRepo._known_hash": {
            "name": "_known_hash",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo._add_known_hash": {
            "name": "_add_known_hash",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo.is_bad_source": {
            "name": "is_bad_source",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "GitRepo.download": {
            "name": "download",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "name": []
            }
        },
        "GitRepo.clone": {
            "name": "clone",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "name": []
            }
        },
        "GitRepo._git_reference_options": {
            "name": "_git_reference_options",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.fetch": {
            "name": "fetch",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "name": []
            }
        },
        "GitRepo.get_head_commit": {
            "name": "get_head_commit",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo._get_commit_cached": {
            "name": "_get_commit_cached",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo._get_commit_impl": {
            "name": "_get_commit_impl",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo.get_commit": {
            "name": "get_commit",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo._get_shortened_rev_cached": {
            "name": "_get_shortened_rev_cached",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo._get_shortened_rev_impl": {
            "name": "_get_shortened_rev_impl",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo.get_shortened_rev": {
            "name": "get_shortened_rev",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo.is_hash": {
            "name": "is_hash",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "GitRepo.is_tag": {
            "name": "is_tag",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "GitRepo.has_commit": {
            "name": "has_commit",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo.have_common_ancestor": {
            "name": "have_common_ancestor",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "commits": []
            }
        },
        "GitRepo.get_remote": {
            "name": "get_remote",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.set_origin": {
            "name": "set_origin",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "GitRepo.clean": {
            "name": "clean",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.modified": {
            "name": "modified",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.untracked": {
            "name": "untracked",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.modified_manifest": {
            "name": "modified_manifest",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo._commit_to_time_cached": {
            "name": "_commit_to_time_cached",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "hash": []
            }
        },
        "GitRepo._commit_to_time_impl": {
            "name": "_commit_to_time_impl",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "hash": []
            }
        },
        "GitRepo.commit_to_time": {
            "name": "commit_to_time",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "hash": []
            }
        },
        "GitRepo.is_ancestor": {
            "name": "is_ancestor",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "ancestor": [],
                "current": []
            }
        },
        "GitRepo.repo_entries_from_commit": {
            "name": "repo_entries_from_commit",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "revision": []
            }
        },
        "GitRepo._read_manifest_from_commit": {
            "name": "_read_manifest_from_commit",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "revision": []
            }
        },
        "GitRepo._read_submodules_from_commit": {
            "name": "_read_submodules_from_commit",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "revision": []
            }
        },
        "GitRepo._should_ignore_submodule": {
            "name": "_should_ignore_submodule",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "gitconfig": []
            }
        },
        "GitRepo._get_submodule_pointer": {
            "name": "_get_submodule_pointer",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "revision": [],
                "path": []
            }
        },
        "GitRepo.checkout": {
            "name": "checkout",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "revision": []
            }
        },
        "GitRepo.manifest": {
            "name": "manifest",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "revision": []
            }
        },
        "GitRepo._git_command": {
            "name": "_git_command",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo._git_check": {
            "name": "_git_check",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "proc": []
            }
        },
        "GitRepo.path_to_name": {
            "name": "path_to_name",
            "location": 411,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "GitRepo.is_git_repo": {
            "name": "is_git_repo",
            "location": 423,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "GitRepo.__repr__": {
            "name": "__repr__",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "wit-master/lib/wit/inspect.py": {
        "inspect_tree": {
            "name": "inspect_tree",
            "location": 8,
            "return": [],
            "arguments": {
                "ws": [],
                "args": []
            }
        },
        "_deduplicate_tree": {
            "name": "_deduplicate_tree",
            "location": 30,
            "return": [],
            "arguments": {
                "tree": [],
                "seen": []
            }
        },
        "_print_dot_tree": {
            "name": "_print_dot_tree",
            "location": 46,
            "return": [],
            "arguments": {
                "ws": [],
                "packages_dict": []
            }
        },
        "_print_generic_tree": {
            "name": "_print_generic_tree",
            "location": 94,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_recur_print_generic_tree": {
            "name": "_recur_print_generic_tree",
            "location": 100,
            "return": [],
            "arguments": {
                "depth": [],
                "data": [],
                "done_cols": []
            }
        },
        "_print_dot_tree.draw_connection": {
            "name": "draw_connection",
            "location": 60,
            "return": [],
            "arguments": {
                "from_id": [],
                "to_id": [],
                "dotted": []
            }
        },
        "_print_dot_tree.print_dep": {
            "name": "print_dep",
            "location": 68,
            "return": [],
            "arguments": {
                "pkg": [],
                "dep": []
            }
        },
        "_recur_print_generic_tree.print_indent": {
            "name": "print_indent",
            "location": 102,
            "return": [],
            "arguments": {
                "depth": []
            }
        }
    },
    "wit-master/lib/wit/lock.py": {
        "LockFile.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "str",
                    "bool",
                    "Dict[int, bool]",
                    "int"
                ]
            }
        },
        "LockFile.get_package": {
            "name": "get_package",
            "location": 19,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "List[Dict[str, Any]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "LockFile.contains_package": {
            "name": "contains_package",
            "location": 25,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "LockFile.add_package": {
            "name": "add_package",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package": [
                    "str",
                    "Optional[str]",
                    "AnyStr",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "LockFile.write": {
            "name": "write",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "LockFile.read": {
            "name": "read",
            "location": 37,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "wit-master/lib/wit/main.py": {
        "main": {
            "name": "main",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "foreach": {
            "name": "foreach",
            "location": 120,
            "return": [],
            "arguments": {
                "ws": [],
                "args": []
            }
        },
        "parse_repo_path": {
            "name": "parse_repo_path",
            "location": 147,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create": {
            "name": "create",
            "location": 151,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "restore_from_lock": {
            "name": "restore_from_lock",
            "location": 168,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "add_pkg": {
            "name": "add_pkg",
            "location": 208,
            "return": [],
            "arguments": {
                "ws": [],
                "args": []
            }
        },
        "update_pkg": {
            "name": "update_pkg",
            "location": 213,
            "return": [],
            "arguments": {
                "ws": [],
                "args": []
            }
        },
        "dependency_from_tag": {
            "name": "dependency_from_tag",
            "location": 217,
            "return": [],
            "arguments": {
                "wsroot": [],
                "tag": [],
                "message": []
            }
        },
        "check_submodule_only": {
            "name": "check_submodule_only",
            "location": 235,
            "return": [],
            "arguments": {
                "repo_path": []
            }
        },
        "add_dep": {
            "name": "add_dep",
            "location": 245,
            "return": [],
            "arguments": {
                "ws": [],
                "args": []
            }
        },
        "update_dep": {
            "name": "update_dep",
            "location": 287,
            "return": [],
            "arguments": {
                "ws": [],
                "args": []
            }
        },
        "status": {
            "name": "status",
            "location": 328,
            "return": [],
            "arguments": {
                "ws": [],
                "args": []
            }
        },
        "update": {
            "name": "update",
            "location": 395,
            "return": [],
            "arguments": {
                "ws": [],
                "args": []
            }
        },
        "version": {
            "name": "version",
            "location": 404,
            "return": [],
            "arguments": {}
        },
        "get_git_version": {
            "name": "get_git_version",
            "location": 411,
            "return": [],
            "arguments": {}
        },
        "get_dist_version": {
            "name": "get_dist_version",
            "location": 422,
            "return": [],
            "arguments": {}
        }
    },
    "wit-master/lib/wit/manifest.py": {
        "Manifest.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dependencies": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Manifest.get_dependency": {
            "name": "get_dependency",
            "location": 21,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Manifest.contains_dependency": {
            "name": "contains_dependency",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Manifest.add_dependency": {
            "name": "add_dependency",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Manifest.replace_dependency": {
            "name": "replace_dependency",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": [
                    "str",
                    "Optional[str]",
                    "type",
                    "int"
                ]
            }
        },
        "Manifest.write": {
            "name": "write",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "Manifest.read_manifest": {
            "name": "read_manifest",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Sequence[str]",
                    "bytes",
                    "bool"
                ],
                "safe": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "wit-master/lib/wit/package.py": {
        "Package.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "repo_paths": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "Package.set_source": {
            "name": "set_source",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Set[str]",
                    "str",
                    "dict",
                    "Optional[\"Node\"]",
                    "List[int]",
                    "Callable",
                    "list",
                    "List[List[int]]"
                ]
            }
        },
        "Package.short_revision": {
            "name": "short_revision",
            "location": 44,
            "return": [
                "bool",
                "str",
                "Optional[bytes]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.__key": {
            "name": "__key",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.__hash__": {
            "name": "__hash__",
            "location": 54,
            "return": [
                "int",
                "dict",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.__eq__": {
            "name": "__eq__",
            "location": 57,
            "return": [
                "bytes",
                "Optional[BaseException]",
                "FrozenSet[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "Set[VT]"
                ]
            }
        },
        "Package.add_dependent": {
            "name": "add_dependent",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dep": []
            }
        },
        "Package.load": {
            "name": "load",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "wsroot": [
                    "str",
                    "List[str]"
                ],
                "download": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "source": [
                    "str",
                    "Dict[str, str]"
                ],
                "revision": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "path.Path"
                ]
            }
        },
        "Package.is_ancestor": {
            "name": "is_ancestor",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_commit": [
                    "bool"
                ]
            }
        },
        "Package.resolve_source": {
            "name": "resolve_source",
            "location": 104,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Iterable[Union[str, os.PathLike]]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Package.get_dependencies": {
            "name": "get_dependencies",
            "location": 111,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.to_repo_entry": {
            "name": "to_repo_entry",
            "location": 119,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.from_repo_entry": {
            "name": "from_repo_entry",
            "location": 123,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Package.add_dependency": {
            "name": "add_dependency",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.checkout": {
            "name": "checkout",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wsroot": [
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "str",
                    "type"
                ]
            }
        },
        "Package.find_matching_dependent": {
            "name": "find_matching_dependent",
            "location": 155,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.dependents_have_common_ancestor": {
            "name": "dependents_have_common_ancestor",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.move_to_root": {
            "name": "move_to_root",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wsroot": [
                    "pathlib.Path",
                    "str",
                    "Generator[str, None, None]",
                    "Sequence"
                ]
            }
        },
        "Package.__repr__": {
            "name": "__repr__",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.id": {
            "name": "id",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.get_id": {
            "name": "get_id",
            "location": 180,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.status": {
            "name": "status",
            "location": 183,
            "return": [
                "bool",
                "Tuple[float, float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "lock": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        }
    },
    "wit-master/lib/wit/parser.py": {
        "chdir": {
            "name": "chdir",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "chdir.err": {
            "name": "err",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "List[str]",
                    "Type[Any]",
                    "int"
                ]
            }
        }
    },
    "wit-master/lib/wit/repo_entries.py": {
        "Format.from_path": {
            "name": "from_path",
            "location": 18,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "int"
                ]
            }
        },
        "RepoEntry.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checkout_path": [
                    "str",
                    "pathlib.Path"
                ],
                "revision": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "remote_url": [
                    "str",
                    "Iterable[Any]",
                    "dict",
                    "Optional[str]",
                    "List[Union[Any, Any]]"
                ],
                "message": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "RepoEntry.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginalEntry.to_dict": {
            "name": "to_dict",
            "location": 51,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "Exception",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "Union[str, bytes]",
                    "bool",
                    "int"
                ]
            }
        },
        "OriginalEntry.from_dict": {
            "name": "from_dict",
            "location": 62,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "Dict[str, Union[str, Set]]",
                "Dict[str, Any]",
                "Type['Declared']",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict"
                ]
            }
        },
        "RepoEntries.write": {
            "name": "write",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "pathlib2.Path",
                    "pathlib.Path",
                    "bool"
                ],
                "entries": [
                    "dict",
                    "List[str]",
                    "bool",
                    "str",
                    "Tuple[str, float]"
                ]
            }
        },
        "RepoEntries.read": {
            "name": "read",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Sequence[str]"
                ]
            }
        },
        "RepoEntries.parse": {
            "name": "parse",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ],
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "rev": [
                    "str",
                    "Iterable[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "wit-master/lib/wit/version.py": {},
    "wit-master/lib/wit/witlogger.py": {
        "getLogger": {
            "name": "getLogger",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "WitFormatter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WitFormatter.format": {
            "name": "format",
            "location": 30,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "WitLogger.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "WitLogger.getLevelName": {
            "name": "getLevelName",
            "location": 56,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WitLogger.verbose": {
            "name": "verbose",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "bool",
                    "Optional[BaseException]",
                    "Union[str, Tuple[str, ...]]",
                    "str",
                    "Type[BaseException]"
                ]
            }
        },
        "WitLogger.trace": {
            "name": "trace",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WitLogger.spam": {
            "name": "spam",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WitLogger.output": {
            "name": "output",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        }
    },
    "wit-master/lib/wit/workspace.py": {
        "NotAncestorError.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "orig_child": [],
                "old_child": []
            }
        },
        "NotAncestorError.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSpace.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "repo_paths": [],
                "jobs": []
            }
        },
        "WorkSpace.id": {
            "name": "id",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSpace.get_id": {
            "name": "get_id",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSpace.create": {
            "name": "create",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "repo_paths": [],
                "jobs": []
            }
        },
        "WorkSpace.restore": {
            "name": "restore",
            "location": 113,
            "return": [],
            "arguments": {
                "cls": [],
                "root": []
            }
        },
        "WorkSpace._load_manifest": {
            "name": "_load_manifest",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSpace._load_lockfile": {
            "name": "_load_lockfile",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSpace._manifest_path": {
            "name": "_manifest_path",
            "location": 149,
            "return": [],
            "arguments": {
                "cls": [],
                "root": []
            }
        },
        "WorkSpace.manifest_path": {
            "name": "manifest_path",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSpace._lockfile_path": {
            "name": "_lockfile_path",
            "location": 156,
            "return": [],
            "arguments": {
                "cls": [],
                "path": []
            }
        },
        "WorkSpace.lockfile_path": {
            "name": "lockfile_path",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSpace.find": {
            "name": "find",
            "location": 163,
            "return": [],
            "arguments": {
                "start": [],
                "repo_paths": [],
                "jobs": []
            }
        },
        "WorkSpace.resolve": {
            "name": "resolve",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "download": []
            }
        },
        "WorkSpace.resolve_deps": {
            "name": "resolve_deps",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "wsroot": [],
                "repo_paths": [],
                "download": [],
                "source_map": [],
                "packages": [],
                "queue": []
            }
        },
        "WorkSpace.checkout": {
            "name": "checkout",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "packages": []
            }
        },
        "WorkSpace.add_dependency": {
            "name": "add_dependency",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "WorkSpace.update_dependency": {
            "name": "update_dependency",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "WorkSpace.__repr__": {
            "name": "__repr__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSpace.restore.do_clone": {
            "name": "do_clone",
            "location": 117,
            "return": [],
            "arguments": {
                "pkg": [],
                "root": [],
                "errors": []
            }
        }
    },
    "wit-master/lib/wit/__init__.py": {},
    "wit-master/lib/wit/__main__.py": {}
}
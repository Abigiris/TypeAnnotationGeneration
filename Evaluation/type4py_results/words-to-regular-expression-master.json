{
    "words-to-regular-expression-master/setup.py": {},
    "words-to-regular-expression-master/tests/__init__.py": {},
    "words-to-regular-expression-master/tests/helpers/hypothesis.py": {},
    "words-to-regular-expression-master/tests/helpers/__init__.py": {},
    "words-to-regular-expression-master/tests/unit/test_command_line_w2re.py": {
        "Main.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.test_it_can_print_help": {
            "name": "test_it_can_print_help",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_stdout": []
            }
        },
        "Main.test_it_uses_python_formatter_by_default": {
            "name": "test_it_uses_python_formatter_by_default",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.test_it_accepts_valid_formatters": {
            "name": "test_it_accepts_valid_formatters",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.test_it_refuses_unknown_formatters": {
            "name": "test_it_refuses_unknown_formatters",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.test_it_opens_custom_file": {
            "name": "test_it_opens_custom_file",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.test_it_uses_stdin_as_input_by_default": {
            "name": "test_it_uses_stdin_as_input_by_default",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.test_it_prints_out_version": {
            "name": "test_it_prints_out_version",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainIntegration.test_it_converts_stream_to_regular_expression": {
            "name": "test_it_converts_stream_to_regular_expression",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_stdout": [
                    "Tuple[str, mock.Mock]"
                ]
            }
        }
    },
    "words-to-regular-expression-master/tests/unit/test_formatters.py": {
        "BaseFormatterTestCase.assert_method_raises": {
            "name": "assert_method_raises",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Callable",
                    "Optional[str]"
                ],
                "exception_class": [
                    "bool",
                    "str",
                    "int",
                    "Set[str]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "BaseFormatterTestCase.test_it_asserts_description": {
            "name": "test_it_asserts_description",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFormatterTestCase.test_it_asserts_code": {
            "name": "test_it_asserts_code",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFormatterTestCase.test_it_abstracts_wrap_regexp": {
            "name": "test_it_abstracts_wrap_regexp",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OtherFormattersTestCase.test_formatters_are_listed": {
            "name": "test_formatters_are_listed",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OtherFormattersTestCase.assert_method_returns_non_empty_string": {
            "name": "assert_method_returns_non_empty_string",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "OtherFormattersTestCase.test_it_has_description": {
            "name": "test_it_has_description",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OtherFormattersTestCase.test_it_has_code": {
            "name": "test_it_has_code",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.setUp": {
            "name": "setUp",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.check_formatter_output": {
            "name": "check_formatter_output",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected_strings": [
                    "str",
                    "List[str]"
                ],
                "delimiter": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseTestCase.check_formatter_output_matches_empty_string": {
            "name": "check_formatter_output_matches_empty_string",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonFormatterTest.test_it_generates_regexps_that_can_match_special_characters": {
            "name": "test_it_generates_regexps_that_can_match_special_characters",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonFormatterTest.test_it_generates_regexp_that_can_match_input_strings": {
            "name": "test_it_generates_regexp_that_can_match_input_strings",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "strings": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "PythonFormatterTest.test_it_generates_regexp_that_can_match_empty_input": {
            "name": "test_it_generates_regexp_that_can_match_empty_input",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonWordMatchingFormatterTest.test_it_generates_regexp_that_can_match_input_words": {
            "name": "test_it_generates_regexp_that_can_match_input_words",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "words": [
                    "cli_ui.tests.MessageRecorder",
                    "str",
                    "bool"
                ],
                "delimiter": [
                    "cli_ui.tests.MessageRecorder",
                    "str",
                    "bool"
                ]
            }
        },
        "PythonWordMatchingFormatterTest.test_it_generates_regexp_that_can_match_empty_input": {
            "name": "test_it_generates_regexp_that_can_match_empty_input",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "words-to-regular-expression-master/tests/unit/test_setup.py": {
        "cleanup_build_artefacts": {
            "name": "cleanup_build_artefacts",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "BuildProcess.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildProcess.tearDown": {
            "name": "tearDown",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildProcess.test_it_builds_sources": {
            "name": "test_it_builds_sources",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildProcess.assert_file_is_build": {
            "name": "assert_file_is_build",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "str",
                    "bool"
                ]
            }
        },
        "BuildProcess.test_it_creates_whl_file": {
            "name": "test_it_creates_whl_file",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildProcess.test_it_creates_tar_file": {
            "name": "test_it_creates_tar_file",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "words-to-regular-expression-master/tests/unit/test_utils.py": {
        "IterableToRegexp.test_generates_correct_regexp_from_iterable_of_strings": {
            "name": "test_generates_correct_regexp_from_iterable_of_strings",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected_strings": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "Type[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "IterableToRegexp.test_it_ignores_empty_strings": {
            "name": "test_it_ignores_empty_strings",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IterableToRegexp.test_it_defaults_to_python_formatter": {
            "name": "test_it_defaults_to_python_formatter",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "words-to-regular-expression-master/tests/unit/__init__.py": {},
    "words-to-regular-expression-master/tests/unit/prefix_tree/test_letter_range_utils.py": {
        "CollapseLettersIntoRangesTest.assert_collapses_letters_into": {
            "name": "assert_collapses_letters_into",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "input_letters": [],
                "expected_output": []
            }
        },
        "CollapseLettersIntoRangesTest.test_one_letter_is_not_collapsed": {
            "name": "test_one_letter_is_not_collapsed",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollapseLettersIntoRangesTest.test_no_range_is_not_collapsed_and_sorted": {
            "name": "test_no_range_is_not_collapsed_and_sorted",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollapseLettersIntoRangesTest.test_two_consecutive_are_not_collapsed": {
            "name": "test_two_consecutive_are_not_collapsed",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollapseLettersIntoRangesTest.test_three_consecutive_are_collapsed": {
            "name": "test_three_consecutive_are_collapsed",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollapseLettersIntoRangesTest.test_three_consecutive_non_alphanumeric_are_not_collapsed": {
            "name": "test_three_consecutive_non_alphanumeric_are_not_collapsed",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollapseLettersIntoRangesTest.test_hyphen_is_first": {
            "name": "test_hyphen_is_first",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollapseLettersIntoRangesTest.test_special_characters_are_escaped": {
            "name": "test_special_characters_are_escaped",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollapseLettersIntoRangesTest.test_unfinished_alnum_ranges": {
            "name": "test_unfinished_alnum_ranges",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "words-to-regular-expression-master/tests/unit/prefix_tree/test_primitives.py": {
        "Compress.test_compresses_strings_correctly": {
            "name": "test_compresses_strings_correctly",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "words-to-regular-expression-master/tests/unit/prefix_tree/test_tree.py": {
        "assert_strings_can_be_matched": {
            "name": "assert_strings_can_be_matched",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "List[str]"
                ],
                "regexp": [
                    "str",
                    "List[str]",
                    "List[bytes]",
                    "Callable"
                ],
                "expected_strings": [
                    "str",
                    "List[str]",
                    "List[bytes]",
                    "Callable"
                ]
            }
        },
        "PrefixTreeTest.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixTreeTest.test_correctly_encodes_strings_with_special_characters": {
            "name": "test_correctly_encodes_strings_with_special_characters",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixTreeTest.test_accepts_individual_strings": {
            "name": "test_accepts_individual_strings",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected_strings": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "PrefixTreeTest.test_accepts_iterable_of_strings": {
            "name": "test_accepts_iterable_of_strings",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected_strings": [
                    "str"
                ]
            }
        },
        "PrefixTreeTest.test_can_be_instantiated_with_initial_iterable_of_strings": {
            "name": "test_can_be_instantiated_with_initial_iterable_of_strings",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected_strings": []
            }
        },
        "PrefixTreeTest.test_it_ignores_empty_strings": {
            "name": "test_it_ignores_empty_strings",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "words-to-regular-expression-master/tests/unit/prefix_tree/__init__.py": {},
    "words-to-regular-expression-master/w2re/command_line_w2re.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "mock_args": [
                    "str",
                    "bool",
                    "Iterable[Any]",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        }
    },
    "words-to-regular-expression-master/w2re/formatters.py": {
        "BaseFormatter.wrap_regexp": {
            "name": "wrap_regexp",
            "location": 9,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "root_node": [
                    "w2re.prefix_tree.primitives.PrefixTreeNode",
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "BaseFormatter.description": {
            "name": "description",
            "location": 13,
            "return": [
                "str",
                "Callable",
                "dict",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List['Query']",
                    "Optional[Dict]"
                ]
            }
        },
        "BaseFormatter.code": {
            "name": "code",
            "location": 18,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "Tuple[str, str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ]
            }
        },
        "PythonFormatter.wrap_regexp": {
            "name": "wrap_regexp",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "root_node": [
                    "Callable[..., None]"
                ]
            }
        },
        "PythonWordMatchFormatter.wrap_regexp": {
            "name": "wrap_regexp",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "root_node": [
                    "Callable[..., None]"
                ]
            }
        }
    },
    "words-to-regular-expression-master/w2re/utils.py": {
        "stream_to_regexp": {
            "name": "stream_to_regexp",
            "location": 13,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "formatter": [
                    "Type[w2re.formatters.BaseFormatter]",
                    "Iterable[str]",
                    "str",
                    "list"
                ]
            }
        },
        "iterable_to_regexp": {
            "name": "iterable_to_regexp",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "Type[w2re.formatters.BaseFormatter]",
                    "Iterable[str]",
                    "str",
                    "list"
                ],
                "formatter": [
                    "Type[w2re.formatters.BaseFormatter]",
                    "Iterable[str]",
                    "str",
                    "list"
                ]
            }
        }
    },
    "words-to-regular-expression-master/w2re/__init__.py": {},
    "words-to-regular-expression-master/w2re/prefix_tree/letter_range_utils.py": {
        "escape_char_in_square_brackets": {
            "name": "escape_char_in_square_brackets",
            "location": 8,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "character": [
                    "str",
                    "int",
                    "dict",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "_formatted_letter_range": {
            "name": "_formatted_letter_range",
            "location": 12,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "first_letter": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "last_letter": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_is_next_letter": {
            "name": "_is_next_letter",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "first_letter": [
                    "str",
                    "int"
                ],
                "second_letter": [
                    "str",
                    "int"
                ]
            }
        },
        "collapse_letter_ranges": {
            "name": "collapse_letter_ranges",
            "location": 34,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "letters": [
                    "FrozenSet[int]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "words-to-regular-expression-master/w2re/prefix_tree/primitives.py": {
        "get_stop_index": {
            "name": "get_stop_index",
            "location": 6,
            "return": [
                "bytes",
                "str",
                "Set[str]",
                "Callable[[bytes], bytes]"
            ],
            "arguments": {
                "word": [
                    "bytes",
                    "int",
                    "str",
                    "List[Tuple[Any, Dict]]"
                ],
                "sliding_window_length": [
                    "bytes",
                    "int",
                    "str",
                    "List[Tuple[Any, Dict]]"
                ]
            }
        },
        "add_brackets_around_string": {
            "name": "add_brackets_around_string",
            "location": 17,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "list",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "compress": {
            "name": "compress",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "word": [
                    "Tuple[int, int, bytearray]",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "bytes"
                ],
                "sliding_window_len": [
                    "bytes",
                    "Tuple[int, int, bytearray]",
                    "int"
                ]
            }
        },
        "PrefixTreeNode.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "terminal_node": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ]
            }
        },
        "PrefixTreeNode.add": {
            "name": "add",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "word": [
                    "bool",
                    "dict"
                ],
                "new_node": [
                    "str"
                ]
            }
        },
        "PrefixTreeNode._non_matching_brackets": {
            "name": "_non_matching_brackets",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[int]"
                ]
            }
        },
        "PrefixTreeNode._add_me": {
            "name": "_add_me",
            "location": 120,
            "return": [
                "str",
                "Tuple[float, float]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "Optional[str]"
                ],
                "add_brackets": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PrefixTreeNode.to_regexp": {
            "name": "to_regexp",
            "location": 126,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefixTreeEdge.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bool",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "terminal": [
                    "bool",
                    "Callable[[str], None]",
                    "Optional[str]"
                ],
                "new_node": [
                    "bool",
                    "Callable[[str], None]",
                    "Optional[str]"
                ]
            }
        },
        "PrefixTreeEdge._split": {
            "name": "_split",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "Callable[[T], bool]",
                    "str",
                    "List[Tuple]",
                    "bool"
                ],
                "position": [
                    "str"
                ]
            }
        },
        "PrefixTreeEdge._branch": {
            "name": "_branch",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "Callable"
                ],
                "position": [
                    "Dict[int, int]",
                    "bool"
                ]
            }
        },
        "PrefixTreeEdge.add": {
            "name": "add",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "word": [
                    "list",
                    "float",
                    "List[float]",
                    "Tuple[int, int, int]",
                    "List[Tuple[int, Any]]",
                    "int"
                ]
            }
        },
        "PrefixTreeEdge.to_regexp": {
            "name": "to_regexp",
            "location": 203,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Callable",
                "Dict[str, Any]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "words-to-regular-expression-master/w2re/prefix_tree/tree.py": {
        "PrefixTree.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "PrefixTree.add": {
            "name": "add",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "VT"
                ]
            }
        },
        "PrefixTree.extend": {
            "name": "extend",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "words": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PrefixTree.to_regexp": {
            "name": "to_regexp",
            "location": 21,
            "return": [
                "dict",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "formatter": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "words-to-regular-expression-master/w2re/prefix_tree/__init__.py": {}
}
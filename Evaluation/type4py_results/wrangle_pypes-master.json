{
    "wrangle_pypes-master/setup.py": {},
    "wrangle_pypes-master/wrangle_pypes/pipeline.py": {
        "Pipeline.create": {
            "name": "create",
            "location": 35,
            "return": [
                "Mapping[str, Any]",
                "List[str]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "dict",
                    "tuple",
                    "Callable"
                ],
                "data": [
                    "dict",
                    "tuple",
                    "Callable"
                ]
            }
        },
        "Pipeline.create_multiple": {
            "name": "create_multiple",
            "location": 43,
            "return": [
                "bool",
                "Callable[[], bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "List[Dict]",
                    "Sequence[str]"
                ],
                "data": [
                    "List[Dict]",
                    "Sequence[str]"
                ]
            }
        },
        "Pipeline.get_or_create": {
            "name": "get_or_create",
            "location": 53,
            "return": [
                "bool",
                "int",
                "Hashable",
                "Optional[int]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "MutableMapping",
                    "Optional[Any]",
                    "bool",
                    "Dict[str, str]",
                    "\"Event\""
                ],
                "data": [
                    "MutableMapping",
                    "Optional[Any]",
                    "bool",
                    "Dict[str, str]",
                    "\"Event\""
                ]
            }
        },
        "Pipeline.get_or_create_multiple": {
            "name": "get_or_create_multiple",
            "location": 85,
            "return": [
                "Union[int, float, complex]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "int",
                    "Dict[str, Callable[[], Any]]",
                    "Tuple[str, str, str]",
                    "Tuple[str, str, int]"
                ],
                "data": [
                    "str",
                    "int",
                    "Dict[str, Callable[[], Any]]",
                    "Tuple[str, str, str]",
                    "Tuple[str, str, int]"
                ]
            }
        },
        "Pipeline.build_kwargs": {
            "name": "build_kwargs",
            "location": 106,
            "return": [
                "bytes",
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Dict[str, Any]"
                ],
                "data": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Pipeline.build_kwarg": {
            "name": "build_kwarg",
            "location": 119,
            "return": [
                "int",
                "Callable[[None, None], bool]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ],
                "kwarg": [
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Transformation.apply": {
            "name": "apply",
            "location": 139,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ]
            }
        },
        "Transformation.__call__": {
            "name": "__call__",
            "location": 142,
            "return": [
                "str",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pipeline": [],
                "data": []
            }
        },
        "Transformation.__or__": {
            "name": "__or__",
            "location": 150,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Chain.apply": {
            "name": "apply",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "Callable[..., str]",
                    "dict"
                ],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "Chain.__or__": {
            "name": "__or__",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[int, \"BitVec\"]",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        }
    },
    "wrangle_pypes-master/wrangle_pypes/transformations.py": {
        "Id.apply": {
            "name": "apply",
            "location": 52,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ]
            }
        },
        "Constant.apply": {
            "name": "apply",
            "location": 60,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ]
            }
        },
        "Cast.apply": {
            "name": "apply",
            "location": 68,
            "return": [
                "int",
                "bool",
                "Optional[int]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "Custom.apply": {
            "name": "apply",
            "location": 76,
            "return": [
                "int",
                "Optional[int]",
                "Union[int, List]",
                "slice"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "Callable[..., str]",
                    "dict",
                    "list",
                    "str"
                ],
                "data": [
                    "Callable[..., str]",
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "Default.apply": {
            "name": "apply",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "Get.apply": {
            "name": "apply",
            "location": 102,
            "return": [
                "bool",
                "MutableMapping[str, Any]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Attr.apply": {
            "name": "apply",
            "location": 115,
            "return": [
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "dict",
                    "str",
                    "type",
                    "T",
                    "bytes"
                ]
            }
        },
        "Filter.apply": {
            "name": "apply",
            "location": 123,
            "return": [
                "List[str]",
                "str",
                "List[Tuple[str, str]]",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "int",
                    "dict",
                    "Optional[bool]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "Map.apply": {
            "name": "apply",
            "location": 131,
            "return": [
                "str",
                "int",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        },
        "ForEach.apply": {
            "name": "apply",
            "location": 139,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "str",
                    "dict",
                    "Match"
                ],
                "data": [
                    "str",
                    "dict",
                    "Match"
                ]
            }
        },
        "Flatten.apply": {
            "name": "apply",
            "location": 150,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "Gather.apply": {
            "name": "apply",
            "location": 163,
            "return": [
                "bool",
                "dict",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "str",
                    "Dict[str, List[str]]",
                    "List[Match]",
                    "dict"
                ]
            }
        },
        "FoldInKeys.apply": {
            "name": "apply",
            "location": 173,
            "return": [
                "dict",
                "Dict[str, Type[Any]]",
                "int",
                "List[str]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "FoldInValue.apply": {
            "name": "apply",
            "location": 184,
            "return": [
                "str",
                "bool",
                "Mapping",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "Dict[str, Any]",
                    "Type",
                    "Mapping",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "GetKeys.apply": {
            "name": "apply",
            "location": 196,
            "return": [
                "str",
                "int",
                "IO",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "str",
                    "Sequence['cirq.Qid']",
                    "dict"
                ]
            }
        },
        "GetValues.apply": {
            "name": "apply",
            "location": 204,
            "return": [
                "List[str]",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str"
                ],
                "data": [
                    "Mapping[str, object]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "If.apply": {
            "name": "apply",
            "location": 216,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "Callable[..., str]",
                    "dict",
                    "str",
                    "Callable",
                    "list"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "Create.apply": {
            "name": "apply",
            "location": 229,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "Callable[..., str]",
                    "dict",
                    "Callable",
                    "list"
                ],
                "data": [
                    "Callable[..., str]",
                    "dict",
                    "Callable",
                    "list"
                ]
            }
        },
        "CreateMultiple.apply": {
            "name": "apply",
            "location": 237,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "tuple",
                "list",
                "Optional[List[str]]",
                "Union[List, Tuple]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "Callable[..., str]",
                    "dict",
                    "list"
                ],
                "data": [
                    "Callable[..., str]",
                    "dict",
                    "list"
                ]
            }
        },
        "GetOrCreate.apply": {
            "name": "apply",
            "location": 248,
            "return": [
                "str",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "Exception",
                    "Optional[BaseException]",
                    "bool"
                ],
                "data": [
                    "Exception",
                    "Optional[BaseException]",
                    "bool"
                ]
            }
        },
        "GetOrCreateMultiple.apply": {
            "name": "apply",
            "location": 259,
            "return": [
                "str",
                "Callable",
                "Optional[str]",
                "Tuple[int, int]",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "Exception"
                ],
                "data": [
                    "Exception"
                ]
            }
        }
    },
    "wrangle_pypes-master/wrangle_pypes/__init__.py": {},
    "wrangle_pypes-master/wrangle_pypes/async/pipeline.py": {
        "AsyncTransformation.__or__": {
            "name": "__or__",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "AsyncChain.__or__": {
            "name": "__or__",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[int, \"BitVec\"]",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        }
    },
    "wrangle_pypes-master/wrangle_pypes/async/transformations.py": {},
    "wrangle_pypes-master/wrangle_pypes/async/__init__.py": {}
}
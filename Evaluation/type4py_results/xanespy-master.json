{
    "xanespy-master/setup.py": {
        "read": {
            "name": "read",
            "location": 6,
            "return": [
                "str",
                "Tuple[str]",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "xanespy-master/docs/conf.py": {
        "read": {
            "name": "read",
            "location": 25,
            "return": [
                "str",
                "Tuple[str]",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "xanespy-master/tests/cases.py": {
        "XanespyTestCase.run": {
            "name": "run",
            "location": 11,
            "return": [
                "Optional[str]",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XanespyTestCase.assertApproximatelyEqual": {
            "name": "assertApproximatelyEqual",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "Dict[str, str]",
                    "int",
                    "bool",
                    "Tuple[str]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ],
                "tolerance": [
                    "int",
                    "bytes"
                ],
                "msg": [
                    "str",
                    "Dict[str, Any]",
                    "Union[int, str]"
                ]
            }
        }
    },
    "xanespy-master/tests/test_all.py": {},
    "xanespy-master/tests/test_beamlines.py": {
        "ZoneplateTest.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZoneplateTest.test_constructor": {
            "name": "test_constructor",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZoneplateTest.test_z_from_energy": {
            "name": "test_z_from_energy",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZoneplateTest.test_position": {
            "name": "test_position",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLScriptTest.setUp": {
            "name": "setUp",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLScriptTest.tearDown": {
            "name": "tearDown",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLScriptTest.test_bad_arguments": {
            "name": "test_bad_arguments",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLScriptTest.test_scaninfo_generation": {
            "name": "test_scaninfo_generation",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLScriptTest.test_script_generation": {
            "name": "test_script_generation",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.setUp": {
            "name": "setUp",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.tear_down": {
            "name": "tear_down",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.test_file_created": {
            "name": "test_file_created",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.test_binning": {
            "name": "test_binning",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.test_exposure": {
            "name": "test_exposure",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.test_energy_approach": {
            "name": "test_energy_approach",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.test_first_frame": {
            "name": "test_first_frame",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.test_second_location": {
            "name": "test_second_location",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.test_multiple_iterations": {
            "name": "test_multiple_iterations",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApsScriptTest.test_file_list": {
            "name": "test_file_list",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/tests/test_fitting.py": {
        "FittingTestCase.test_base_curve": {
            "name": "test_base_curve",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_line": {
            "name": "test_line",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_linear_combination": {
            "name": "test_linear_combination",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_gaussian": {
            "name": "test_gaussian",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_L3_curve": {
            "name": "test_L3_curve",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_K_curve": {
            "name": "test_K_curve",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_guess_kedge_params": {
            "name": "test_guess_kedge_params",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_prepare_p0": {
            "name": "test_prepare_p0",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_guess_p0": {
            "name": "test_guess_p0",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_find_whiteline": {
            "name": "test_find_whiteline",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_fit_spectra": {
            "name": "test_fit_spectra",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_fit_spectra_with_bounds": {
            "name": "test_fit_spectra_with_bounds",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_distance_to_bounds": {
            "name": "test_distance_to_bounds",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_is_out_of_bounds": {
            "name": "test_is_out_of_bounds",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_fit_sources": {
            "name": "test_fit_sources",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_error_function": {
            "name": "test_error_function",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittingTestCase.test_error_function.func": {
            "name": "func",
            "location": 300,
            "return": [],
            "arguments": {
                "scale": [],
                "offset": []
            }
        }
    },
    "xanespy-master/tests/test_frameset.py": {
        "_line": {
            "name": "_line",
            "location": 128,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "x": []
            }
        },
        "XrayEdgeTest.setUp": {
            "name": "setUp",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XrayEdgeTest.test_energies": {
            "name": "test_energies",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMDatasetTest.store": {
            "name": "store",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMDatasetTest.test_setter": {
            "name": "test_setter",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.dummy_frame_data": {
            "name": "dummy_frame_data",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "XanesFramesetTest.create_frameset": {
            "name": "create_frameset",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "store": [],
                "edge": []
            }
        },
        "XanesFramesetTest.test_init": {
            "name": "test_init",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_timestamps": {
            "name": "test_timestamps",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_calculate_clusters": {
            "name": "test_calculate_clusters",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_segment_materials": {
            "name": "test_segment_materials",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_plot_map": {
            "name": "test_plot_map",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_plot_histogram": {
            "name": "test_plot_histogram",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_lc_fitting": {
            "name": "test_lc_fitting",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_median_filter": {
            "name": "test_median_filter",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_fit_kedge": {
            "name": "test_fit_kedge",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_fit_spectra": {
            "name": "test_fit_spectra",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_fit_spectra_defaults": {
            "name": "test_fit_spectra_defaults",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_particle_series": {
            "name": "test_particle_series",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_subtract_surroundings": {
            "name": "test_subtract_surroundings",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_edge_mask": {
            "name": "test_edge_mask",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_line_spectra": {
            "name": "test_line_spectra",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_spectrum": {
            "name": "test_spectrum",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_nonenergy_spectrum": {
            "name": "test_nonenergy_spectrum",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_fork_group": {
            "name": "test_fork_group",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_crop_frames": {
            "name": "test_crop_frames",
            "location": 526,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_align_frames": {
            "name": "test_align_frames",
            "location": 546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_align_frames_invalid": {
            "name": "test_align_frames_invalid",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_label_particle": {
            "name": "test_label_particle",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_store_accessors": {
            "name": "test_store_accessors",
            "location": 617,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_components": {
            "name": "test_components",
            "location": 657,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_mean_frame": {
            "name": "test_mean_frame",
            "location": 661,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_map_data": {
            "name": "test_map_data",
            "location": 675,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_frames": {
            "name": "test_frames",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_energies": {
            "name": "test_energies",
            "location": 709,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_extent": {
            "name": "test_extent",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_extent_array": {
            "name": "test_extent_array",
            "location": 737,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_active_path": {
            "name": "test_active_path",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_switch_groups": {
            "name": "test_switch_groups",
            "location": 779,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_repr": {
            "name": "test_repr",
            "location": 786,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_str": {
            "name": "test_str",
            "location": 792,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_frame_mask": {
            "name": "test_frame_mask",
            "location": 797,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldXanesFramesetTest.setUp": {
            "name": "setUp",
            "location": 825,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldXanesFramesetTest.tearDown": {
            "name": "tearDown",
            "location": 832,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OldXanesFramesetTest.test_deferred_transformations": {
            "name": "test_deferred_transformations",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFramesetTest.test_fit_kedge.get_dataset": {
            "name": "get_dataset",
            "location": 336,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "xanespy-master/tests/test_importers.py": {
        "APS32IDCImportTest.setUp": {
            "name": "setUp",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS32IDCImportTest.tearDown": {
            "name": "tearDown",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS32IDCImportTest.test_default_file_naming": {
            "name": "test_default_file_naming",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS32IDCImportTest.test_default_group_name": {
            "name": "test_default_group_name",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS32IDCImportTest.test_imported_hdf": {
            "name": "test_imported_hdf",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS32IDCImportTest.test_exclude_frames": {
            "name": "test_exclude_frames",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS32IDCImportTest.test_limited_dark_flat": {
            "name": "test_limited_dark_flat",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS32IDCImportTest.test_import_multiple_hdfs": {
            "name": "test_import_multiple_hdfs",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS32IDCImportTest.test_import_second_hdf": {
            "name": "test_import_second_hdf",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicTest.tearDown": {
            "name": "tearDown",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicTest.test_import_partial_data": {
            "name": "test_import_partial_data",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicTest.test_import_cosmic_data": {
            "name": "test_import_cosmic_data",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.setUp": {
            "name": "setUp",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_hdr_filenames": {
            "name": "test_hdr_filenames",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_cxi_filenames": {
            "name": "test_cxi_filenames",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_cxi_image_data": {
            "name": "test_cxi_image_data",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_cxi_image_shape": {
            "name": "test_cxi_image_shape",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_cxi_energies": {
            "name": "test_cxi_energies",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_cxi_pixel_size": {
            "name": "test_cxi_pixel_size",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_hdr_pixel_size": {
            "name": "test_hdr_pixel_size",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_hdr_image_data": {
            "name": "test_hdr_image_data",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_hdr_image_shape": {
            "name": "test_hdr_image_shape",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_hdr_energies": {
            "name": "test_hdr_energies",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CosmicFileTest.test_specific_hdr_files": {
            "name": "test_specific_hdr_files",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XradiaTest.test_pixel_size": {
            "name": "test_pixel_size",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XradiaTest.test_timestamp_from_xrm": {
            "name": "test_timestamp_from_xrm",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XradiaTest.test_mosaic": {
            "name": "test_mosaic",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XradiaTest.test_str_and_repr": {
            "name": "test_str_and_repr",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XradiaTest.test_binning": {
            "name": "test_binning",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XradiaTest.test_frame_stack": {
            "name": "test_frame_stack",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XradiaTest.test_num_images": {
            "name": "test_num_images",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XradiaTest.test_starttimes": {
            "name": "test_starttimes",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PtychographyImportTest.setUp": {
            "name": "setUp",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PtychographyImportTest.tearDown": {
            "name": "tearDown",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PtychographyImportTest.test_directory_names": {
            "name": "test_directory_names",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PtychographyImportTest.test_imported_hdf": {
            "name": "test_imported_hdf",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PtychographyImportTest.test_frame_shape": {
            "name": "test_frame_shape",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PtychographyImportTest.test_partial_import": {
            "name": "test_partial_import",
            "location": 525,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PtychographyImportTest.test_exclude_re": {
            "name": "test_exclude_re",
            "location": 541,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PtychographyImportTest.test_multiple_import": {
            "name": "test_multiple_import",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMFileImportTest.setUp": {
            "name": "setUp",
            "location": 589,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMFileImportTest.tearDown": {
            "name": "tearDown",
            "location": 594,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMFileImportTest.test_imported_hdf": {
            "name": "test_imported_hdf",
            "location": 598,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMDirImportTest.setUp": {
            "name": "setUp",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMDirImportTest.tearDown": {
            "name": "tearDown",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMDirImportTest.test_import_empty_directory": {
            "name": "test_import_empty_directory",
            "location": 646,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMDirImportTest.test_imported_references": {
            "name": "test_imported_references",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMDirImportTest.test_groupname_kwarg": {
            "name": "test_groupname_kwarg",
            "location": 668,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMDirImportTest.test_imported_hdf": {
            "name": "test_imported_hdf",
            "location": 678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMDirImportTest.test_params_from_aps": {
            "name": "test_params_from_aps",
            "location": 715,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APS8BMDirImportTest.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLImportTest.setUp": {
            "name": "setUp",
            "location": 760,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLImportTest.tearDown": {
            "name": "tearDown",
            "location": 765,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLImportTest.test_minimum_shape": {
            "name": "test_minimum_shape",
            "location": 769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLImportTest.test_rebin_image": {
            "name": "test_rebin_image",
            "location": 785,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLImportTest.test_imported_hdf": {
            "name": "test_imported_hdf",
            "location": 796,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLImportTest.test_params_from_ssrl": {
            "name": "test_params_from_ssrl",
            "location": 838,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLImportTest.test_magnification_correction": {
            "name": "test_magnification_correction",
            "location": 892,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRLImportTest.test_bad_file": {
            "name": "test_bad_file",
            "location": 917,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmFileTestCase.test_header": {
            "name": "test_header",
            "location": 941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmImportTestCase.tearDown": {
            "name": "tearDown",
            "location": 957,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmImportTestCase.test_hdf_file": {
            "name": "test_hdf_file",
            "location": 961,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmImportTestCase.test_file_list": {
            "name": "test_file_list",
            "location": 1015,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilitiesTestCase.test_open_files": {
            "name": "test_open_files",
            "location": 1046,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilitiesTestCase.DummyOpener.__init__": {
            "name": "__init__",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": [],
                "paths": []
            }
        },
        "UtilitiesTestCase.DummyOpener.energies": {
            "name": "energies",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilitiesTestCase.DummyOpener.close": {
            "name": "close",
            "location": 1043,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/tests/test_math.py": {
        "add_one": {
            "name": "add_one",
            "location": 56,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "XanesMathTest.setUp": {
            "name": "setUp",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.coins": {
            "name": "coins",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_resample_image": {
            "name": "test_resample_image",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_crop_image": {
            "name": "test_crop_image",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_downsample_array": {
            "name": "test_downsample_array",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_mosiac_reference": {
            "name": "test_mosiac_reference",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_register_correlation": {
            "name": "test_register_correlation",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_register_template": {
            "name": "test_register_template",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_frame_pool": {
            "name": "test_frame_pool",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_apply_internal_reference": {
            "name": "test_apply_internal_reference",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_transformation_matrices": {
            "name": "test_transformation_matrices",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_iter_indices": {
            "name": "test_iter_indices",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_apply_references": {
            "name": "test_apply_references",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_direct_whiteline": {
            "name": "test_direct_whiteline",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_particle_labels": {
            "name": "test_particle_labels",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_edge_jump": {
            "name": "test_edge_jump",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_k_edge_mask": {
            "name": "test_k_edge_mask",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_l_edge_mask": {
            "name": "test_l_edge_mask",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_transform_images": {
            "name": "test_transform_images",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_extract_signals_nmf": {
            "name": "test_extract_signals_nmf",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_extract_signals_pca": {
            "name": "test_extract_signals_pca",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesMathTest.test_contrast_mask": {
            "name": "test_contrast_mask",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/tests/test_plots.py": {
        "PlotSpectrumTest.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotSpectrumTest.tearDown": {
            "name": "tearDown",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotSpectrumTest.test_basic_plot": {
            "name": "test_basic_plot",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotSpectrumTest.test_pandas_index": {
            "name": "test_pandas_index",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotSpectrumTest.test_colors": {
            "name": "test_colors",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScaleNormalizerTest.test_scale_none": {
            "name": "test_scale_none",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScaleNormalizerTest.test_scale_partial_normalizer": {
            "name": "test_scale_partial_normalizer",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/tests/test_qt.py": {
        "dummy_frame_data": {
            "name": "dummy_frame_data",
            "location": 69,
            "return": [],
            "arguments": {
                "shape": []
            }
        },
        "MockFrameset": {
            "name": "MockFrameset",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "MockFramesetPresenter.launch": {
            "name": "launch",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockFramesetPresenter.prepare_ui": {
            "name": "prepare_ui",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesViewerTestCase.test_xanes_viewer": {
            "name": "test_xanes_viewer",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesViewerTestCase.test_parse_args": {
            "name": "test_parse_args",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtTestCase.create_presenter": {
            "name": "create_presenter",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "frame_view": [],
                "frameset": [],
                "map_view": []
            }
        },
        "QtTestCase.dummy_map_data": {
            "name": "dummy_map_data",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "FrameViewTestCase.test_move_slier": {
            "name": "test_move_slier",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameViewTestCase.test_update_figure_pixel": {
            "name": "test_update_figure_pixel",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameViewTestCase.test_status_metadata": {
            "name": "test_status_metadata",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameViewTestCase.test_busy_mode": {
            "name": "test_busy_mode",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameViewTestCase.test_toggle_controls": {
            "name": "test_toggle_controls",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapViewTestCase.test_keyboard_nav": {
            "name": "test_keyboard_nav",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapViewTestCase.test_mouse_in_canvas": {
            "name": "test_mouse_in_canvas",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapViewTestCase.test_mouse_clicked": {
            "name": "test_mouse_clicked",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapViewTestCase.test_update_crosshairs": {
            "name": "test_update_crosshairs",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapViewTestCase.test_update_cursor_labels": {
            "name": "test_update_cursor_labels",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapViewTestCase.test_set_cmap_list": {
            "name": "test_set_cmap_list",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapViewTestCase.test_map_limits": {
            "name": "test_map_limits",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_hover_frame_pixel": {
            "name": "test_hover_frame_pixel",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_change_hdf_group": {
            "name": "test_change_hdf_group",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_clear_hdf_group": {
            "name": "test_clear_hdf_group",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_play_frames": {
            "name": "test_play_frames",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_build_hdf_tree": {
            "name": "test_build_hdf_tree",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_prepare_ui": {
            "name": "test_prepare_ui",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_change_cmap": {
            "name": "test_change_cmap",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_set_timestep": {
            "name": "test_set_timestep",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_set_frame_range": {
            "name": "test_set_frame_range",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_change_active_frame": {
            "name": "test_change_active_frame",
            "location": 582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_next_frame": {
            "name": "test_next_frame",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_previous_frame": {
            "name": "test_previous_frame",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_first_frame": {
            "name": "test_first_frame",
            "location": 629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_last_frame": {
            "name": "test_last_frame",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_active_map": {
            "name": "test_active_map",
            "location": 649,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_hover_map_pixel": {
            "name": "test_hover_map_pixel",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_spectrum_fit": {
            "name": "test_spectrum_fit",
            "location": 687,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_click_map_pixel": {
            "name": "test_click_map_pixel",
            "location": 707,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_move_map_pixel": {
            "name": "test_move_map_pixel",
            "location": 727,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_map_data_changed": {
            "name": "test_map_data_changed",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_refresh_frames": {
            "name": "test_refresh_frames",
            "location": 777,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_map_data_cleared": {
            "name": "test_map_data_cleared",
            "location": 801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_update_spectra": {
            "name": "test_update_spectra",
            "location": 823,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_change_map_limits": {
            "name": "test_change_map_limits",
            "location": 849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_map_data_caching": {
            "name": "test_map_data_caching",
            "location": 867,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_change_map_cmap": {
            "name": "test_change_map_cmap",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_reset_map_range": {
            "name": "test_reset_map_range",
            "location": 909,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameSourceTestCase.test_add_callback": {
            "name": "test_add_callback",
            "location": 937,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameSourceTestCase.test_remove_callback_with_args": {
            "name": "test_remove_callback_with_args",
            "location": 953,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameSourceTestCase.test_remove_callback_without_args": {
            "name": "test_remove_callback_without_args",
            "location": 964,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameSourceTestCase.test_start_stop": {
            "name": "test_start_stop",
            "location": 975,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PresenterTestCase.test_change_hdf_group.item_text": {
            "name": "item_text",
            "location": 418,
            "return": [],
            "arguments": {
                "pos": []
            }
        },
        "PresenterTestCase.test_clear_hdf_group.item_text": {
            "name": "item_text",
            "location": 447,
            "return": [],
            "arguments": {
                "pos": []
            }
        },
        "PresenterTestCase.test_clear_hdf_group.no_frames": {
            "name": "no_frames",
            "location": 456,
            "return": [],
            "arguments": {}
        },
        "PresenterTestCase.test_hover_map_pixel.no_data": {
            "name": "no_data",
            "location": 680,
            "return": [],
            "arguments": {}
        },
        "PresenterTestCase.test_map_data_changed.item_text": {
            "name": "item_text",
            "location": 758,
            "return": [],
            "arguments": {
                "pos": []
            }
        },
        "PresenterTestCase.test_map_data_cleared.no_data": {
            "name": "no_data",
            "location": 808,
            "return": [],
            "arguments": {}
        }
    },
    "xanespy-master/tests/test_store.py": {
        "TXMStoreTest.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.tearDown": {
            "name": "tearDown",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.store": {
            "name": "store",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "TXMStoreTest.test_getters": {
            "name": "test_getters",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_map_names": {
            "name": "test_map_names",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_frameset_names": {
            "name": "test_frameset_names",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_data_group": {
            "name": "test_data_group",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_fork_group": {
            "name": "test_fork_group",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_data_tree": {
            "name": "test_data_tree",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_data_name": {
            "name": "test_data_name",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_setters": {
            "name": "test_setters",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_delete": {
            "name": "test_delete",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_merge_stores": {
            "name": "test_merge_stores",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStoreTest.test_validate_parent_group": {
            "name": "test_validate_parent_group",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/tests/test_utilities.py": {
        "add_one": {
            "name": "add_one",
            "location": 39,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "UtilitiesTest.test_nproc": {
            "name": "test_nproc",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilitiesTest.mp_map": {
            "name": "mp_map",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilitiesTest.test_broadcast_reverse": {
            "name": "test_broadcast_reverse",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilitiesTest.test_interpret_complex": {
            "name": "test_interpret_complex",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilitiesTest.test_xy_to_pixel": {
            "name": "test_xy_to_pixel",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilitiesTest.test_pixel_to_xy": {
            "name": "test_pixel_to_xy",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/xanespy/beamlines.py": {
        "write_scaninfo_header": {
            "name": "write_scaninfo_header",
            "location": 99,
            "return": [],
            "arguments": {
                "f": [],
                "abba_mode": [],
                "repetitions": [],
                "ref_repetitions": []
            }
        },
        "ssrl6_xanes_script": {
            "name": "ssrl6_xanes_script",
            "location": 121,
            "return": [],
            "arguments": {
                "dest": [],
                "edge": [],
                "zoneplate": [],
                "positions": [],
                "reference_position": [],
                "iterations": [],
                "iteration_rest": [],
                "frame_rest": [],
                "binning": [],
                "exposure": [],
                "repetitions": [],
                "ref_repetitions": [],
                "abba_mode": []
            }
        },
        "sector8_xanes_script": {
            "name": "sector8_xanes_script",
            "location": 274,
            "return": [],
            "arguments": {
                "dest": [],
                "edge": [],
                "zoneplate": [],
                "detector": [],
                "sample_positions": [],
                "names": [],
                "iterations": [],
                "binning": [],
                "exposure": [],
                "abba_mode": []
            }
        },
        "monitor_sector8": {
            "name": "monitor_sector8",
            "location": 385,
            "return": [],
            "arguments": {
                "tsv_filename": []
            }
        },
        "Zoneplate.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "x_step": [],
                "y_step": [],
                "z_step": [],
                "end": []
            }
        },
        "Zoneplate.position": {
            "name": "position",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "energy": []
            }
        }
    },
    "xanespy-master/xanespy/edges.py": {
        "Edge.all_energies": {
            "name": "all_energies",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Edge.mask": {
            "name": "mask",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "Edge.normalize": {
            "name": "normalize",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "spectrum": [],
                "energies": []
            }
        },
        "Edge.annotate_spectrum": {
            "name": "annotate_spectrum",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "ax": []
            }
        },
        "LEdge.annotate_spectrum": {
            "name": "annotate_spectrum",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "ax": []
            }
        },
        "LEdge.mask": {
            "name": "mask",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KEdge.annotate_spectrum": {
            "name": "annotate_spectrum",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "ax": []
            }
        },
        "KEdge.mask": {
            "name": "mask",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KEdge.normalize": {
            "name": "normalize",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "spectrum": [],
                "energies": []
            }
        }
    },
    "xanespy-master/xanespy/exceptions.py": {},
    "xanespy-master/xanespy/fitting.py": {
        "guess_p0": {
            "name": "guess_p0",
            "location": 42,
            "return": [],
            "arguments": {
                "func": [],
                "spectra": [],
                "edge": [],
                "quiet": [],
                "ncore": []
            }
        },
        "prepare_p0": {
            "name": "prepare_p0",
            "location": 80,
            "return": [],
            "arguments": {
                "p0": [],
                "frame_shape": [],
                "num_timesteps": []
            }
        },
        "is_out_of_bounds": {
            "name": "is_out_of_bounds",
            "location": 100,
            "return": [],
            "arguments": {
                "params": [],
                "bounds": []
            }
        },
        "distance_to_bounds": {
            "name": "distance_to_bounds",
            "location": 114,
            "return": [],
            "arguments": {
                "params": [],
                "bounds": []
            }
        },
        "error": {
            "name": "error",
            "location": 124,
            "return": [],
            "arguments": {
                "guess": [],
                "obs": [],
                "func": [],
                "bounds": []
            }
        },
        "_fit_sources": {
            "name": "_fit_sources",
            "location": 171,
            "return": [],
            "arguments": {
                "inputs": [],
                "func": [],
                "nonnegative": [],
                "bounds": []
            }
        },
        "find_whiteline": {
            "name": "find_whiteline",
            "location": 208,
            "return": [],
            "arguments": {
                "params": [],
                "curve": []
            }
        },
        "fit_spectra": {
            "name": "fit_spectra",
            "location": 214,
            "return": [],
            "arguments": {
                "observations": [],
                "func": [],
                "p0": [],
                "nonnegative": [],
                "bounds": [],
                "quiet": [],
                "ncore": []
            }
        },
        "Curve.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Curve.guess_params": {
            "name": "guess_params",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "intensities": [],
                "edge": [],
                "named_tuple": []
            }
        },
        "Curve.NamedTuple": {
            "name": "NamedTuple",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.guess_params": {
            "name": "guess_params",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "intensities": [],
                "edge": [],
                "named_tuple": []
            }
        },
        "Line.__call__": {
            "name": "__call__",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "m": [],
                "b": []
            }
        },
        "LinearCombination.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "sources": []
            }
        },
        "LinearCombination.__call__": {
            "name": "__call__",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearCombination.param_names": {
            "name": "param_names",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gaussian.__call__": {
            "name": "__call__",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "height": [],
                "center": [],
                "width": []
            }
        },
        "L3Curve.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "num_peaks": []
            }
        },
        "L3Curve.__call__": {
            "name": "__call__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "L3Curve.param_names": {
            "name": "param_names",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KCurve.guess_params": {
            "name": "guess_params",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "intensities": [],
                "edge": [],
                "named_tuple": []
            }
        },
        "KCurve.__call__": {
            "name": "__call__",
            "location": 525,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/xanespy/importers.py": {
        "import_aps4idc_sxstm_files": {
            "name": "import_aps4idc_sxstm_files",
            "location": 61,
            "return": [],
            "arguments": {
                "filenames": [],
                "hdf_filename": [],
                "hdf_groupname": [],
                "shape": [],
                "energies": [],
                "flux_correction": []
            }
        },
        "_average_frames": {
            "name": "_average_frames",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "import_aps32idc_xanes_files": {
            "name": "import_aps32idc_xanes_files",
            "location": 244,
            "return": [],
            "arguments": {
                "filenames": [],
                "hdf_filename": [],
                "hdf_groupname": []
            }
        },
        "import_aps32idc_xanes_file": {
            "name": "import_aps32idc_xanes_file",
            "location": 271,
            "return": [],
            "arguments": {
                "filename": [],
                "hdf_filename": [],
                "hdf_groupname": [],
                "timeidx": [],
                "total_timesteps": [],
                "append": [],
                "downsample": [],
                "square": [],
                "exclude": [],
                "median_filter_size": [],
                "dark_idx": []
            }
        },
        "read_metadata": {
            "name": "read_metadata",
            "location": 446,
            "return": [],
            "arguments": {
                "filenames": [],
                "flavor": [],
                "quiet": []
            }
        },
        "open_files": {
            "name": "open_files",
            "location": 518,
            "return": [],
            "arguments": {
                "paths": [],
                "opener": []
            }
        },
        "load_cosmic_files": {
            "name": "load_cosmic_files",
            "location": 552,
            "return": [],
            "arguments": {
                "files": [],
                "store": [],
                "median_filter_size": []
            }
        },
        "import_cosmic_frameset": {
            "name": "import_cosmic_frameset",
            "location": 607,
            "return": [],
            "arguments": {
                "hdf_filename": [],
                "stxm_hdr": [],
                "ptycho_cxi": [],
                "hdf_groupname": [],
                "energy_difference": []
            }
        },
        "import_nanosurveyor_frameset": {
            "name": "import_nanosurveyor_frameset",
            "location": 699,
            "return": [],
            "arguments": {
                "directory": [],
                "quiet": [],
                "hdf_filename": [],
                "hdf_groupname": [],
                "energy_range": [],
                "exclude_re": [],
                "append": [],
                "frame_shape": []
            }
        },
        "import_stxm_frameset": {
            "name": "import_stxm_frameset",
            "location": 905,
            "return": [],
            "arguments": {
                "directory": [],
                "quiet": [],
                "hdf_filename": [],
                "hdf_groupname": [],
                "energy_range": [],
                "exclude_re": [],
                "append": []
            }
        },
        "_average_ssrl_files": {
            "name": "_average_ssrl_files",
            "location": 1083,
            "return": [],
            "arguments": {
                "files": []
            }
        },
        "magnification_correction": {
            "name": "magnification_correction",
            "location": 1105,
            "return": [],
            "arguments": {
                "frames": [],
                "pixel_sizes": []
            }
        },
        "import_ssrl_xanes_dir": {
            "name": "import_ssrl_xanes_dir",
            "location": 1137,
            "return": [],
            "arguments": {
                "directory": [],
                "hdf_filename": [],
                "groupname": []
            }
        },
        "minimum_shape": {
            "name": "minimum_shape",
            "location": 1175,
            "return": [],
            "arguments": {
                "shapes": []
            }
        },
        "rebin_image": {
            "name": "rebin_image",
            "location": 1215,
            "return": [],
            "arguments": {
                "image": [],
                "new_shape": []
            }
        },
        "decode_ssrl_params": {
            "name": "decode_ssrl_params",
            "location": 1245,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "decode_aps_params": {
            "name": "decode_aps_params",
            "location": 1273,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "import_aps8bm_xanes_file": {
            "name": "import_aps8bm_xanes_file",
            "location": 1302,
            "return": [],
            "arguments": {
                "filename": [],
                "ref_filename": [],
                "hdf_filename": [],
                "groupname": [],
                "quiet": []
            }
        },
        "import_aps8bm_xanes_dir": {
            "name": "import_aps8bm_xanes_dir",
            "location": 1388,
            "return": [],
            "arguments": {
                "directories": [],
                "hdf_filename": [],
                "groupname": []
            }
        },
        "import_frameset": {
            "name": "import_frameset",
            "location": 1401,
            "return": [],
            "arguments": {
                "directories": [],
                "flavor": [],
                "hdf_filename": [],
                "groupname": [],
                "return_val": [],
                "quiet": []
            }
        },
        "load_cosmic_files.do_crop": {
            "name": "do_crop",
            "location": 588,
            "return": [],
            "arguments": {
                "img": [],
                "new_shape": []
            }
        },
        "import_nanosurveyor_frameset.replace_ds": {
            "name": "replace_ds",
            "location": 843,
            "return": [],
            "arguments": {
                "name": [],
                "parent": []
            }
        },
        "import_stxm_frameset.replace_ds": {
            "name": "replace_ds",
            "location": 1020,
            "return": [],
            "arguments": {
                "name": [],
                "parent": []
            }
        },
        "import_aps4idc_sxstm_files.fix_flux": {
            "name": "fix_flux",
            "location": 217,
            "return": [],
            "arguments": {
                "ds": []
            }
        }
    },
    "xanespy-master/xanespy/nanosurveyor.py": {
        "CXIFile.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "mode": []
            }
        },
        "CXIFile.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.__enter__": {
            "name": "__enter__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.__exit__": {
            "name": "__exit__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.close": {
            "name": "close",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.filenames": {
            "name": "filenames",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.image_frames": {
            "name": "image_frames",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.image_shape": {
            "name": "image_shape",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.num_images": {
            "name": "num_images",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.energies": {
            "name": "energies",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CXIFile.pixel_size": {
            "name": "pixel_size",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "HDRFile.__enter__": {
            "name": "__enter__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.__exit__": {
            "name": "__exit__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.close": {
            "name": "close",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.filenames": {
            "name": "filenames",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.image_shape": {
            "name": "image_shape",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.energies": {
            "name": "energies",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.num_images": {
            "name": "num_images",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.image_frames": {
            "name": "image_frames",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile._image_metadata": {
            "name": "_image_metadata",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.scan_metadata": {
            "name": "scan_metadata",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDRFile.pixel_size": {
            "name": "pixel_size",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/xanespy/plots.py": {
        "latexify": {
            "name": "latexify",
            "location": 34,
            "return": [],
            "arguments": {
                "styles": [],
                "preamble": []
            }
        },
        "remove_extra_spines": {
            "name": "remove_extra_spines",
            "location": 80,
            "return": [],
            "arguments": {
                "ax": []
            }
        },
        "set_axes_color": {
            "name": "set_axes_color",
            "location": 89,
            "return": [],
            "arguments": {
                "ax": [],
                "color": []
            }
        },
        "set_outside_ticks": {
            "name": "set_outside_ticks",
            "location": 108,
            "return": [],
            "arguments": {
                "ax": []
            }
        },
        "new_axes": {
            "name": "new_axes",
            "location": 116,
            "return": [],
            "arguments": {
                "height": [],
                "width": []
            }
        },
        "new_image_axes": {
            "name": "new_image_axes",
            "location": 131,
            "return": [],
            "arguments": {
                "height": [],
                "width": []
            }
        },
        "big_axes": {
            "name": "big_axes",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "make_subplots": {
            "name": "make_subplots",
            "location": 142,
            "return": [],
            "arguments": {
                "n_plots": [],
                "n_cols": [],
                "ax_width": [],
                "vmin": [],
                "vmax": [],
                "cmap": []
            }
        },
        "dual_axes": {
            "name": "dual_axes",
            "location": 192,
            "return": [],
            "arguments": {
                "fig": [],
                "longdim": [],
                "shortdim": [],
                "orientation": []
            }
        },
        "draw_histogram_colorbar": {
            "name": "draw_histogram_colorbar",
            "location": 222,
            "return": [],
            "arguments": {
                "ax": []
            }
        },
        "draw_colorbar": {
            "name": "draw_colorbar",
            "location": 250,
            "return": [],
            "arguments": {
                "ax": [],
                "cmap": [],
                "norm": [],
                "energies": [],
                "orientation": []
            }
        },
        "plot_pixel_spectra": {
            "name": "plot_pixel_spectra",
            "location": 289,
            "return": [],
            "arguments": {
                "pixels": [],
                "extent": [],
                "spectra": [],
                "energies": [],
                "map_ax": [],
                "spectra_ax": [],
                "step_size": []
            }
        },
        "plot_kedge_fit": {
            "name": "plot_kedge_fit",
            "location": 382,
            "return": [],
            "arguments": {
                "energies": [],
                "params": []
            }
        },
        "scale_normalizer": {
            "name": "scale_normalizer",
            "location": 404,
            "return": [],
            "arguments": {
                "norm": [],
                "values": []
            }
        },
        "plot_spectrum": {
            "name": "plot_spectrum",
            "location": 424,
            "return": [],
            "arguments": {
                "spectrum": [],
                "energies": [],
                "norm": [],
                "show_fit": [],
                "ax": [],
                "ax2": [],
                "linestyle": [],
                "color": [],
                "cmap": [],
                "polar_coords": []
            }
        },
        "plot_composite_map": {
            "name": "plot_composite_map",
            "location": 538,
            "return": [],
            "arguments": {
                "data": [],
                "ax": [],
                "origin": []
            }
        },
        "plot_txm_map": {
            "name": "plot_txm_map",
            "location": 550,
            "return": [],
            "arguments": {
                "data": [],
                "norm": [],
                "ax": [],
                "cmap": [],
                "origin": [],
                "vmin": [],
                "vmax": []
            }
        },
        "plot_txm_histogram": {
            "name": "plot_txm_histogram",
            "location": 579,
            "return": [],
            "arguments": {
                "data": [],
                "ax": [],
                "norm": [],
                "bins": [],
                "cmap": [],
                "add_cbar": []
            }
        },
        "plot_spectra": {
            "name": "plot_spectra",
            "location": 658,
            "return": [],
            "arguments": {
                "spectra": [],
                "energies": [],
                "ax": []
            }
        },
        "plot_spectra_as_map": {
            "name": "plot_spectra_as_map",
            "location": 691,
            "return": [],
            "arguments": {
                "spectra": [],
                "energies": [],
                "ax": [],
                "extent": []
            }
        },
        "plot_txm_intermediates": {
            "name": "plot_txm_intermediates",
            "location": 724,
            "return": [],
            "arguments": {
                "images": []
            }
        }
    },
    "xanespy-master/xanespy/qt_frameset_presenter.py": {
        "QtFramesetPresenter.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "frameset": []
            }
        },
        "QtFramesetPresenter.add_frame_view": {
            "name": "add_frame_view",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "threaded": []
            }
        },
        "QtFramesetPresenter.add_map_view": {
            "name": "add_map_view",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "threaded": []
            }
        },
        "QtFramesetPresenter.toggle_spectrum_fit": {
            "name": "toggle_spectrum_fit",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "QtFramesetPresenter.toggle_edge_mask": {
            "name": "toggle_edge_mask",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "QtFramesetPresenter.prepare_ui": {
            "name": "prepare_ui",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "expand_tree": []
            }
        },
        "QtFramesetPresenter.update_timestep_list": {
            "name": "update_timestep_list",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.create_app": {
            "name": "create_app",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.launch": {
            "name": "launch",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.set_timestep": {
            "name": "set_timestep",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "new_timestep": []
            }
        },
        "QtFramesetPresenter.set_frame_vrange": {
            "name": "set_frame_vrange",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "vmin": [],
                "vmax": []
            }
        },
        "QtFramesetPresenter.set_map_vmin": {
            "name": "set_map_vmin",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "QtFramesetPresenter.set_map_vmax": {
            "name": "set_map_vmax",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "QtFramesetPresenter.update_map_limits": {
            "name": "update_map_limits",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.reset_frame_range": {
            "name": "reset_frame_range",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.reset_map_range": {
            "name": "reset_map_range",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.set_map_cursor": {
            "name": "set_map_cursor",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "QtFramesetPresenter.set_map_pixel": {
            "name": "set_map_pixel",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "QtFramesetPresenter.move_map_pixel": {
            "name": "move_map_pixel",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "vert": [],
                "horiz": []
            }
        },
        "QtFramesetPresenter.frame_norm": {
            "name": "frame_norm",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.map_norm": {
            "name": "map_norm",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.change_active_frame": {
            "name": "change_active_frame",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "new_idx": []
            }
        },
        "QtFramesetPresenter.change_frame_component": {
            "name": "change_frame_component",
            "location": 450,
            "return": [],
            "arguments": {
                "self": [],
                "new_comp": []
            }
        },
        "QtFramesetPresenter.change_map_component": {
            "name": "change_map_component",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "new_comp": []
            }
        },
        "QtFramesetPresenter.change_frame_cmap": {
            "name": "change_frame_cmap",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "new_cmap": []
            }
        },
        "QtFramesetPresenter.change_map_cmap": {
            "name": "change_map_cmap",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "new_cmap": []
            }
        },
        "QtFramesetPresenter.build_hdf_tree": {
            "name": "build_hdf_tree",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "expand_tree": []
            }
        },
        "QtFramesetPresenter.refresh_frames": {
            "name": "refresh_frames",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.active_frames": {
            "name": "active_frames",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.active_map": {
            "name": "active_map",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.hover_frame_pixel": {
            "name": "hover_frame_pixel",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "xy": []
            }
        },
        "QtFramesetPresenter.play_frames": {
            "name": "play_frames",
            "location": 568,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "QtFramesetPresenter.set_play_speed": {
            "name": "set_play_speed",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "new_speed": []
            }
        },
        "QtFramesetPresenter.next_frame": {
            "name": "next_frame",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.previous_frame": {
            "name": "previous_frame",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.first_frame": {
            "name": "first_frame",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.last_frame": {
            "name": "last_frame",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.change_hdf_file": {
            "name": "change_hdf_file",
            "location": 620,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "QtFramesetPresenter.change_hdf_group": {
            "name": "change_hdf_group",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "new_item": [],
                "old_item": []
            }
        },
        "QtFramesetPresenter.update_spectra": {
            "name": "update_spectra",
            "location": 667,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtFramesetPresenter.update_maps": {
            "name": "update_maps",
            "location": 711,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/xanespy/qt_frame_view.py": {
        "FrameAnimation.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fig": [
                    "numpy.ndarray",
                    "str",
                    "List[float]"
                ],
                "artists": [
                    "numpy.ndarray",
                    "str",
                    "List[float]"
                ]
            }
        },
        "FrameAnimation._step": {
            "name": "_step",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "current_idx": [
                    "str",
                    "int"
                ]
            }
        },
        "FrameAnimation.stop": {
            "name": "stop",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameChangeSource.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FrameChangeSource.add_callback": {
            "name": "add_callback",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "int",
                    "tuple",
                    "list",
                    "Dict[str, Any]",
                    "dict",
                    "List[Type]"
                ]
            }
        },
        "FrameChangeSource.remove_callback": {
            "name": "remove_callback",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Type"
                ]
            }
        },
        "FrameChangeSource.start": {
            "name": "start",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameChangeSource.stop": {
            "name": "stop",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameChangeSource._on_change": {
            "name": "_on_change",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_idx": [
                    "Callable",
                    "Callable[..., None]",
                    "IO",
                    "tuple",
                    "Callable[..., T]",
                    "Set[str]"
                ]
            }
        },
        "QtFrameView.build_hdf_tree": {
            "name": "build_hdf_tree",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "QtFrameView.add_hdf_tree_item": {
            "name": "add_hdf_tree_item",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Mapping[str, Any]",
                    "Optional[TextIO]"
                ]
            }
        },
        "QtFrameView.select_active_hdf_item": {
            "name": "select_active_hdf_item",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[\"transaction_model.TransactionModel\"]",
                    "List[Callable]",
                    "dict"
                ]
            }
        },
        "QtFrameView.setup_ui": {
            "name": "setup_ui",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.request_new_vrange": {
            "name": "request_new_vrange",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bool": [
                    "dict",
                    "Type[T]",
                    "str",
                    "T"
                ]
            }
        },
        "QtFrameView.create_status_bar": {
            "name": "create_status_bar",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.create_canvas": {
            "name": "create_canvas",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.connect_presenter": {
            "name": "connect_presenter",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "presenter": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ]
            }
        },
        "QtFrameView.connect_signals": {
            "name": "connect_signals",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "presenter": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "QtFrameView.open_hdf_file": {
            "name": "open_hdf_file",
            "location": 287,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.status_labels": {
            "name": "status_labels",
            "location": 296,
            "return": [
                "str",
                "bytes",
                "set",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.frame_controls": {
            "name": "frame_controls",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.frame_labels": {
            "name": "frame_labels",
            "location": 314,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "Callable[[str], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.plotting_controls": {
            "name": "plotting_controls",
            "location": 320,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.plotting_labels": {
            "name": "plotting_labels",
            "location": 328,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "Callable[[str], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.move_slider": {
            "name": "move_slider",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "QtFrameView.toggle_controls": {
            "name": "toggle_controls",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List[T]",
                    "List[int]",
                    "numpy.ndarray",
                    "List[List[Any]]",
                    "dict"
                ],
                "energies": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "norm": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "cmap": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "QtFrameView.set_busy_mode": {
            "name": "set_busy_mode",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "float",
                    "Union[int, float, str]",
                    "logging.Formatter",
                    "Optional[str]"
                ]
            }
        },
        "QtFrameView.animate_frames": {
            "name": "animate_frames",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "int",
                    "Callable",
                    "str"
                ],
                "energies": [
                    "int",
                    "Callable",
                    "str"
                ],
                "norm": [
                    "int",
                    "Callable",
                    "str"
                ],
                "cmap": [
                    "int",
                    "Callable",
                    "str"
                ],
                "extent": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "QtFrameView.draw_spectrum": {
            "name": "draw_spectrum",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spectrum": [
                    "List[List[int]]",
                    "List[Tuple]",
                    "List[float]",
                    "int",
                    "dict",
                    "Optional[Any]"
                ],
                "fitted_spectrum": [
                    "bool",
                    "str",
                    "list",
                    "Optional[bool]"
                ],
                "norm": [
                    "List[List[int]]",
                    "List[Tuple]",
                    "List[float]",
                    "int",
                    "dict",
                    "Optional[Any]"
                ],
                "cmap": [
                    "List[List[int]]",
                    "List[Tuple]",
                    "List[float]",
                    "int",
                    "dict",
                    "Optional[Any]"
                ],
                "edge_range": [
                    "str",
                    "bool",
                    "Optional[Tuple[float, float]]",
                    "Optional[str]"
                ]
            }
        },
        "QtFrameView.draw_histogram": {
            "name": "draw_histogram",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ],
                "energies": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "norm": [
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ],
                "cmap": [
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "QtFrameView.clear_axes": {
            "name": "clear_axes",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QtFrameView.set_slider_max": {
            "name": "set_slider_max",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float",
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "QtFrameView.update_figure_pixel": {
            "name": "update_figure_pixel",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xy": [
                    "numpy.array",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Union[int, None]"
                ],
                "xy_unit": [
                    "bool",
                    "float",
                    "Union[int, Tuple[int, ...]]",
                    "Optional[float]",
                    "int"
                ],
                "px": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "value": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "QtFrameView.change_vrange": {
            "name": "change_vrange",
            "location": 483,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vmin": [
                    "str",
                    "int",
                    "bool",
                    "IO[str]"
                ],
                "vmax": [
                    "str",
                    "int",
                    "bool",
                    "IO[str]"
                ],
                "step": [
                    "tuple",
                    "str"
                ],
                "decimals": [
                    "tuple",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "QtFrameView.set_cmap_list": {
            "name": "set_cmap_list",
            "location": 497,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmap_list": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "QtFrameView.set_component_list": {
            "name": "set_component_list",
            "location": 502,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "component_list": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "QtFrameView.set_timestep_list": {
            "name": "set_timestep_list",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timestep_list": [
                    "str",
                    "Union[str, List[str]]",
                    "List[Exception]",
                    "logging.Logger",
                    "Exception"
                ]
            }
        },
        "QtFrameView.set_timestep": {
            "name": "set_timestep",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "bool",
                    "List[bytes]",
                    "int",
                    "Type"
                ]
            }
        },
        "QtFrameView.show_status_message": {
            "name": "show_status_message",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]",
                    "int",
                    "bytearray"
                ]
            }
        },
        "QtFrameView.set_status_metadata": {
            "name": "set_status_metadata",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "slice"
                ],
                "energies": [
                    "T",
                    "List[dict]",
                    "str",
                    "Iterable[Sequence[str]]"
                ],
                "norm": [
                    "T",
                    "List[dict]",
                    "str",
                    "Iterable[Sequence[str]]"
                ],
                "cmap": [
                    "T",
                    "List[dict]",
                    "str",
                    "Iterable[Sequence[str]]"
                ],
                "extent": [
                    "T",
                    "List[dict]",
                    "str",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "QtFrameView.set_status_index": {
            "name": "set_status_index",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "QtFrameView.set_status_energy": {
            "name": "set_status_energy",
            "location": 526,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "energy": [
                    "str",
                    "int"
                ]
            }
        },
        "QtFrameView.set_status_unit": {
            "name": "set_status_unit",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "QtFrameView.set_window_title": {
            "name": "set_window_title",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_path": [
                    "str",
                    "float"
                ]
            }
        },
        "QtFrameView.build_hdf_tree.tree_item": {
            "name": "tree_item",
            "location": 126,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "Callable"
                ],
                "parent": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "QtFrameView.setup_ui.hover_frame": {
            "name": "hover_frame",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "int",
                    "PySide2.QtGui.QResizeEvent"
                ]
            }
        }
    },
    "xanespy-master/xanespy/qt_map_view.py": {
        "QtMapView.setup_ui": {
            "name": "setup_ui",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QtMapView.keyboard_nav": {
            "name": "keyboard_nav",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "QtMapView.mouse_in_canvas": {
            "name": "mouse_in_canvas",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mouse_event": [
                    "Tuple[int, int]"
                ]
            }
        },
        "QtMapView.mouse_clicked_canvas": {
            "name": "mouse_clicked_canvas",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mouse_event": [
                    "str"
                ]
            }
        },
        "QtMapView.update_cursor_labels": {
            "name": "update_cursor_labels",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xy": [
                    "Optional[str]",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "VT",
                    "Iterator[T]",
                    "Optional[Any]"
                ],
                "pixel": [
                    "Optional[str]",
                    "str",
                    "Type"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "set",
                    "VT",
                    "Iterator[T]"
                ]
            }
        },
        "QtMapView.update_crosshair_labels": {
            "name": "update_crosshair_labels",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xy": [
                    "Optional[str]",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "VT",
                    "Iterator[T]",
                    "Optional[Any]"
                ],
                "pixel": [
                    "Optional[str]",
                    "str",
                    "Type"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "set",
                    "VT",
                    "Iterator[T]"
                ]
            }
        },
        "QtMapView.redraw_crosshairs": {
            "name": "redraw_crosshairs",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xy": [
                    "bool",
                    "int",
                    "Optional[complex]"
                ]
            }
        },
        "QtMapView.show": {
            "name": "show",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QtMapView.hide": {
            "name": "hide",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QtMapView.redraw_canvas": {
            "name": "redraw_canvas",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QtMapView.plot_map_data": {
            "name": "plot_map_data",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "map_data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict"
                ],
                "norm": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "cmap": [
                    "str",
                    "List[int]",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "extent": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "QtMapView.plot_histogram_data": {
            "name": "plot_histogram_data",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "map_data": [
                    "List[str]"
                ],
                "norm": [
                    "List[str]"
                ],
                "cmap": [
                    "List[str]"
                ],
                "extent": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "QtMapView.update_spectrum_ui": {
            "name": "update_spectrum_ui",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spectrum": [
                    "bool",
                    "int"
                ],
                "fitted_spectrum": [
                    "bool",
                    "int"
                ],
                "norm": [
                    "bool",
                    "int"
                ],
                "cmap": [
                    "bool",
                    "int"
                ],
                "edge_range": [
                    "Optional[bool]",
                    "Optional[Exception]",
                    "Optional[List[Any]]",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "QtMapView.plot_spectrum": {
            "name": "plot_spectrum",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spectrum": [
                    "Optional[float]",
                    "Dict[int, Dict[int, Any]]",
                    "bool"
                ],
                "fitted_spectrum": [
                    "Optional[int]",
                    "int",
                    "float",
                    "Union[str, Tuple[str, str]]",
                    "Union[int, None]"
                ],
                "norm": [
                    "Optional[float]",
                    "Dict[int, Dict[int, Any]]",
                    "bool"
                ],
                "cmap": [
                    "Optional[float]",
                    "Dict[int, Dict[int, Any]]",
                    "bool"
                ],
                "edge_range": [
                    "bool",
                    "str",
                    "list",
                    "Optional[bool]"
                ]
            }
        },
        "QtMapView.connect_presenter": {
            "name": "connect_presenter",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "presenter": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "QtMapView.create_canvas": {
            "name": "create_canvas",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QtMapView.set_cmap_list": {
            "name": "set_cmap_list",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_list": [
                    "bool",
                    "Sequence[str]",
                    "int",
                    "list",
                    "List[Tuple[float, str]]",
                    "Optional[int]"
                ]
            }
        },
        "QtMapView.set_component_list": {
            "name": "set_component_list",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_list": [
                    "str",
                    "List[int]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "QtMapView.set_map_limits": {
            "name": "set_map_limits",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vmin": [
                    "str"
                ],
                "vmax": [
                    "str"
                ],
                "step": [
                    "str",
                    "Dict[str, object]",
                    "Optional[logging.Logger]",
                    "bool",
                    "int"
                ],
                "decimals": [
                    "str",
                    "Dict[str, object]",
                    "Optional[logging.Logger]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "xanespy-master/xanespy/sxstm.py": {
        "SxstmDataFile.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "SxstmDataFile.header_lines": {
            "name": "header_lines",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmDataFile.dataframe": {
            "name": "dataframe",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmDataFile.channels": {
            "name": "channels",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmDataFile.num_points": {
            "name": "num_points",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmDataFile.close": {
            "name": "close",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmDataFile.__enter__": {
            "name": "__enter__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SxstmDataFile.__exit__": {
            "name": "__exit__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/xanespy/txmstore.py": {
        "merge_stores": {
            "name": "merge_stores",
            "location": 37,
            "return": [],
            "arguments": {
                "base_store": [],
                "new_store": [],
                "destination": [],
                "energy_difference": [],
                "upsample": []
            }
        },
        "TXMDataset.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "context": [],
                "dtype": []
            }
        },
        "TXMDataset.__get__": {
            "name": "__get__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "store": [],
                "type": []
            }
        },
        "TXMDataset.__set__": {
            "name": "__set__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "store": [],
                "value": []
            }
        },
        "TXMDataset.__delete__": {
            "name": "__delete__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "store": []
            }
        },
        "TXMStore.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "hdf_filename": [],
                "parent_name": [],
                "data_name": [],
                "mode": []
            }
        },
        "TXMStore.__str__": {
            "name": "__str__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStore.__repr__": {
            "name": "__repr__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStore.__enter__": {
            "name": "__enter__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStore.__exit__": {
            "name": "__exit__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "TXMStore.frameset_names": {
            "name": "frameset_names",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStore.map_names": {
            "name": "map_names",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStore.open_file": {
            "name": "open_file",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "mode": []
            }
        },
        "TXMStore.close": {
            "name": "close",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStore.data_tree": {
            "name": "data_tree",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStore.fork_data_group": {
            "name": "fork_data_group",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "dest": [],
                "src": []
            }
        },
        "TXMStore.latest_data_name": {
            "name": "latest_data_name",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TXMStore.validate_parent_group": {
            "name": "validate_parent_group",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TXMStore.parent_group": {
            "name": "parent_group",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStore.data_group": {
            "name": "data_group",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXMStore.replace_dataset": {
            "name": "replace_dataset",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "data": [],
                "context": [],
                "attrs": [],
                "compression": []
            }
        },
        "TXMStore.get_dataset": {
            "name": "get_dataset",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TXMStore.has_dataset": {
            "name": "has_dataset",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TXMStore.frame_source": {
            "name": "frame_source",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TXMStore.get_frames": {
            "name": "get_frames",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TXMStore.relative_positions": {
            "name": "relative_positions",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TXMStore.pixel_unit": {
            "name": "pixel_unit",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TXMStore.signal_method": {
            "name": "signal_method",
            "location": 532,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TXMStore.timestamps": {
            "name": "timestamps",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TXMStore.filenames": {
            "name": "filenames",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TXMStore.fit_parameters": {
            "name": "fit_parameters",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TXMStore.data_tree.walk_groups": {
            "name": "walk_groups",
            "location": 271,
            "return": [],
            "arguments": {
                "parent": [],
                "level": []
            }
        }
    },
    "xanespy-master/xanespy/utilities.py": {
        "nproc": {
            "name": "nproc",
            "location": 54,
            "return": [],
            "arguments": {
                "ncore": []
            }
        },
        "mp_map": {
            "name": "mp_map",
            "location": 73,
            "return": [],
            "arguments": {
                "func": [],
                "iterable": [],
                "ncore": [],
                "chunksize": []
            }
        },
        "foreach": {
            "name": "foreach",
            "location": 111,
            "return": [],
            "arguments": {
                "f": [],
                "l": [],
                "threads": [],
                "return_": []
            }
        },
        "parallel_map": {
            "name": "parallel_map",
            "location": 174,
            "return": [],
            "arguments": {
                "f": [],
                "l": [],
                "threads": []
            }
        },
        "xy_to_pixel": {
            "name": "xy_to_pixel",
            "location": 178,
            "return": [],
            "arguments": {
                "xy": [],
                "extent": [],
                "shape": []
            }
        },
        "pixel_to_xy": {
            "name": "pixel_to_xy",
            "location": 192,
            "return": [],
            "arguments": {
                "pixel": [],
                "extent": [],
                "shape": []
            }
        },
        "broadcast_reverse": {
            "name": "broadcast_reverse",
            "location": 203,
            "return": [],
            "arguments": {
                "array": [],
                "shape": []
            }
        },
        "get_component": {
            "name": "get_component",
            "location": 225,
            "return": [],
            "arguments": {
                "data": [],
                "name": []
            }
        },
        "is_kernel": {
            "name": "is_kernel",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "prog": {
            "name": "prog",
            "location": 277,
            "return": [],
            "arguments": {
                "iterable": [],
                "leave": [],
                "dynamic_ncols": [],
                "smoothing": []
            }
        },
        "broadcast_reverse.reverse_axes": {
            "name": "reverse_axes",
            "location": 210,
            "return": [],
            "arguments": {
                "array": []
            }
        },
        "foreach.runall": {
            "name": "runall",
            "location": 126,
            "return": [],
            "arguments": {}
        }
    },
    "xanespy-master/xanespy/xanes_frameset.py": {
        "XanesFrameset.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "hdf_filename": [],
                "edge": [],
                "groupname": []
            }
        },
        "XanesFrameset.__str__": {
            "name": "__str__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.__repr__": {
            "name": "__repr__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.hdf_path": {
            "name": "hdf_path",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "representation": []
            }
        },
        "XanesFrameset.has_representation": {
            "name": "has_representation",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "representation": []
            }
        },
        "XanesFrameset.data_name": {
            "name": "data_name",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "XanesFrameset.data_tree": {
            "name": "data_tree",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.store": {
            "name": "store",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "XanesFrameset.clear_caches": {
            "name": "clear_caches",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.starttime": {
            "name": "starttime",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "timeidx": []
            }
        },
        "XanesFrameset.endtime": {
            "name": "endtime",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "timeidx": []
            }
        },
        "XanesFrameset.components": {
            "name": "components",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.fork_data_group": {
            "name": "fork_data_group",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "dest": [],
                "src": []
            }
        },
        "XanesFrameset.apply_transformations": {
            "name": "apply_transformations",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "crop": [],
                "commit": [],
                "quiet": []
            }
        },
        "XanesFrameset.stage_transformations": {
            "name": "stage_transformations",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "translations": [],
                "rotations": [],
                "center": [],
                "scales": []
            }
        },
        "XanesFrameset.align_frames": {
            "name": "align_frames",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "reference_frame": [],
                "method": [],
                "template": [],
                "passes": [],
                "median_filter_size": [],
                "commit": [],
                "component": [],
                "plot_results": [],
                "results_ax": [],
                "quiet": []
            }
        },
        "XanesFrameset.crop_frames": {
            "name": "crop_frames",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "slices": []
            }
        },
        "XanesFrameset.apply_median_filter": {
            "name": "apply_median_filter",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "representation": []
            }
        },
        "XanesFrameset.segment_materials": {
            "name": "segment_materials",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "thresholds": [],
                "representation": [],
                "component": []
            }
        },
        "XanesFrameset.label_particles": {
            "name": "label_particles",
            "location": 656,
            "return": [],
            "arguments": {
                "self": [],
                "min_distance": []
            }
        },
        "XanesFrameset.particle_series": {
            "name": "particle_series",
            "location": 682,
            "return": [],
            "arguments": {
                "self": [],
                "map_name": []
            }
        },
        "XanesFrameset.particle_regions": {
            "name": "particle_regions",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "intensity_image": [],
                "labels": []
            }
        },
        "XanesFrameset.plot_mean_frame": {
            "name": "plot_mean_frame",
            "location": 730,
            "return": [],
            "arguments": {
                "self": [],
                "ax": [],
                "component": [],
                "representation": [],
                "cmap": [],
                "timeidx": []
            }
        },
        "XanesFrameset.mean_frame": {
            "name": "mean_frame",
            "location": 776,
            "return": [],
            "arguments": {
                "self": [],
                "representation": []
            }
        },
        "XanesFrameset.frame_shape": {
            "name": "frame_shape",
            "location": 788,
            "return": [],
            "arguments": {
                "self": [],
                "representation": []
            }
        },
        "XanesFrameset.pixel_size": {
            "name": "pixel_size",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "representation": [],
                "timeidx": []
            }
        },
        "XanesFrameset.pixel_unit": {
            "name": "pixel_unit",
            "location": 803,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.spectra": {
            "name": "spectra",
            "location": 809,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.line_spectra": {
            "name": "line_spectra",
            "location": 821,
            "return": [],
            "arguments": {
                "self": [],
                "xy0": [],
                "xy1": [],
                "representation": [],
                "timeidx": [],
                "frame_filter": [],
                "frame_filter_kw": []
            }
        },
        "XanesFrameset.fitting_param_names": {
            "name": "fitting_param_names",
            "location": 872,
            "return": [],
            "arguments": {
                "self": [],
                "representation": []
            }
        },
        "XanesFrameset.spectrum": {
            "name": "spectrum",
            "location": 881,
            "return": [],
            "arguments": {
                "self": [],
                "pixel": [],
                "frame_filter": [],
                "frame_filter_kw": [],
                "normalize": [],
                "representation": [],
                "index": [],
                "derivative": []
            }
        },
        "XanesFrameset.plot_spectrum": {
            "name": "plot_spectrum",
            "location": 966,
            "return": [],
            "arguments": {
                "self": [],
                "ax": [],
                "pixel": [],
                "norm_range": [],
                "normalize": [],
                "representation": [],
                "show_fit": [],
                "frame_filter": [],
                "frame_filter_kw": [],
                "linestyle": [],
                "timeidx": [],
                "voffset": []
            }
        },
        "XanesFrameset.edge_mask": {
            "name": "edge_mask",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.frame_mask": {
            "name": "frame_mask",
            "location": 1027,
            "return": [],
            "arguments": {
                "self": [],
                "mask_type": [],
                "sensitivity": [],
                "min_size": [],
                "frame_idx": [],
                "representation": []
            }
        },
        "XanesFrameset.fit_linear_combinations": {
            "name": "fit_linear_combinations",
            "location": 1084,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [],
                "component": [],
                "name": [],
                "representation": []
            }
        },
        "XanesFrameset.fit_kedge": {
            "name": "fit_kedge",
            "location": 1131,
            "return": [],
            "arguments": {
                "self": [],
                "quiet": [],
                "ncore": []
            }
        },
        "XanesFrameset.fit_spectra": {
            "name": "fit_spectra",
            "location": 1174,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "p0": [],
                "pnames": [],
                "name": [],
                "frame_filter": [],
                "frame_filter_kw": [],
                "nonnegative": [],
                "component": [],
                "representation": [],
                "dtype": [],
                "quiet": [],
                "ncore": []
            }
        },
        "XanesFrameset.calculate_whitelines": {
            "name": "calculate_whitelines",
            "location": 1314,
            "return": [],
            "arguments": {
                "self": [],
                "edge_mask": []
            }
        },
        "XanesFrameset.calculate_maps": {
            "name": "calculate_maps",
            "location": 1340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.calculate_mean_frames": {
            "name": "calculate_mean_frames",
            "location": 1354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.plot_signals": {
            "name": "plot_signals",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": [],
                "cmap": []
            }
        },
        "XanesFrameset.plot_signal_map": {
            "name": "plot_signal_map",
            "location": 1417,
            "return": [],
            "arguments": {
                "self": [],
                "ax": [],
                "signals_idx": [],
                "interpolation": []
            }
        },
        "XanesFrameset.calculate_signals": {
            "name": "calculate_signals",
            "location": 1452,
            "return": [],
            "arguments": {
                "self": [],
                "n_components": [],
                "method": [],
                "frame_source": [],
                "frame_filter": [],
                "frame_filter_kw": []
            }
        },
        "XanesFrameset.map_data": {
            "name": "map_data",
            "location": 1567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.timestamps": {
            "name": "timestamps",
            "location": 1603,
            "return": [],
            "arguments": {
                "self": [],
                "relative": [],
                "t0": []
            }
        },
        "XanesFrameset.frames": {
            "name": "frames",
            "location": 1646,
            "return": [],
            "arguments": {
                "self": [],
                "representation": [],
                "timeidx": []
            }
        },
        "XanesFrameset.energies": {
            "name": "energies",
            "location": 1672,
            "return": [],
            "arguments": {
                "self": [],
                "timeidx": []
            }
        },
        "XanesFrameset.subtract_surroundings": {
            "name": "subtract_surroundings",
            "location": 1685,
            "return": [],
            "arguments": {
                "self": [],
                "sensitivity": []
            }
        },
        "XanesFrameset.extent": {
            "name": "extent",
            "location": 1718,
            "return": [],
            "arguments": {
                "self": [],
                "representation": [],
                "idx": []
            }
        },
        "XanesFrameset.plot_frame": {
            "name": "plot_frame",
            "location": 1754,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "ax": [],
                "cmap": [],
                "representation": [],
                "component": []
            }
        },
        "XanesFrameset.num_timesteps": {
            "name": "num_timesteps",
            "location": 1788,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.timestep_names": {
            "name": "timestep_names",
            "location": 1794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.num_energies": {
            "name": "num_energies",
            "location": 1801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.plot_map": {
            "name": "plot_map",
            "location": 1806,
            "return": [],
            "arguments": {
                "self": [],
                "ax": [],
                "map_name": [],
                "timeidx": [],
                "vmin": [],
                "vmax": [],
                "v0": [],
                "median_size": [],
                "component": [],
                "edge_filter": [],
                "edge_filter_kw": []
            }
        },
        "XanesFrameset.plot_map_pixel_spectra": {
            "name": "plot_map_pixel_spectra",
            "location": 1870,
            "return": [],
            "arguments": {
                "self": [],
                "pixels": [],
                "map_ax": [],
                "spectra_ax": [],
                "map_name": [],
                "timeidx": [],
                "step_size": []
            }
        },
        "XanesFrameset.plot_histogram": {
            "name": "plot_histogram",
            "location": 1919,
            "return": [],
            "arguments": {
                "self": [],
                "plotter": [],
                "timeidx": [],
                "ax": [],
                "vmin": [],
                "vmax": [],
                "goodness_filter": [],
                "representation": [],
                "component": [],
                "active_pixel": [],
                "bins": []
            }
        },
        "XanesFrameset.gui_viewer": {
            "name": "gui_viewer",
            "location": 1948,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.apply_internal_reference": {
            "name": "apply_internal_reference",
            "location": 1968,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XanesFrameset.particle_series.particle_value": {
            "name": "particle_value",
            "location": 694,
            "return": [],
            "arguments": {
                "particle": []
            }
        }
    },
    "xanespy-master/xanespy/xanes_math.py": {
        "crop_image": {
            "name": "crop_image",
            "location": 103,
            "return": [],
            "arguments": {
                "img": [],
                "shape": [],
                "center": []
            }
        },
        "resample_image": {
            "name": "resample_image",
            "location": 160,
            "return": [],
            "arguments": {
                "img": [],
                "new_shape": [],
                "src_dims": [],
                "new_dims": []
            }
        },
        "iter_indices": {
            "name": "iter_indices",
            "location": 210,
            "return": [],
            "arguments": {
                "data": [],
                "leftover_dims": [],
                "desc": [],
                "quiet": []
            }
        },
        "downsample_array": {
            "name": "downsample_array",
            "location": 239,
            "return": [],
            "arguments": {
                "arr": [],
                "factor": [],
                "method": [],
                "axis": []
            }
        },
        "apply_mosaic_reference": {
            "name": "apply_mosaic_reference",
            "location": 335,
            "return": [],
            "arguments": {
                "intensity": [],
                "reference": []
            }
        },
        "_apply_internal_reference": {
            "name": "_apply_internal_reference",
            "location": 360,
            "return": [],
            "arguments": {
                "frame": []
            }
        },
        "apply_internal_reference": {
            "name": "apply_internal_reference",
            "location": 391,
            "return": [],
            "arguments": {
                "intensities": [],
                "desc": []
            }
        },
        "extract_signals_nmf": {
            "name": "extract_signals_nmf",
            "location": 419,
            "return": [],
            "arguments": {
                "spectra": [],
                "n_components": [],
                "extra_kwargs": [],
                "mask": []
            }
        },
        "extract_signals_pca": {
            "name": "extract_signals_pca",
            "location": 461,
            "return": [],
            "arguments": {
                "spectra": [],
                "n_components": [],
                "extra_kwargs": [],
                "mask": []
            }
        },
        "apply_references": {
            "name": "apply_references",
            "location": 500,
            "return": [],
            "arguments": {
                "intensities": [],
                "references": [],
                "out": [],
                "quiet": []
            }
        },
        "l_edge_mask": {
            "name": "l_edge_mask",
            "location": 541,
            "return": [],
            "arguments": {
                "frames": [],
                "energies": [],
                "edge": [],
                "sensitivity": [],
                "frame_dims": [],
                "min_size": [],
                "return_correlation": []
            }
        },
        "k_edge_mask": {
            "name": "k_edge_mask",
            "location": 639,
            "return": [],
            "arguments": {
                "frames": [],
                "energies": [],
                "edge": [],
                "sensitivity": [],
                "min_size": []
            }
        },
        "is_in_energy_range": {
            "name": "is_in_energy_range",
            "location": 693,
            "return": [],
            "arguments": {
                "energies": [],
                "energy_range": []
            }
        },
        "normalize_k_edge": {
            "name": "normalize_k_edge",
            "location": 707,
            "return": [],
            "arguments": {
                "spectrum": [],
                "energies": [],
                "edge": []
            }
        },
        "k_edge_jump": {
            "name": "k_edge_jump",
            "location": 719,
            "return": [],
            "arguments": {
                "frames": [],
                "energies": [],
                "edge": []
            }
        },
        "particle_labels": {
            "name": "particle_labels",
            "location": 735,
            "return": [],
            "arguments": {
                "frames": [],
                "energies": [],
                "edge": [],
                "min_distance": []
            }
        },
        "direct_whitelines": {
            "name": "direct_whitelines",
            "location": 766,
            "return": [],
            "arguments": {
                "spectra": [],
                "energies": [],
                "edge": [],
                "quiet": []
            }
        },
        "transform_images": {
            "name": "transform_images",
            "location": 815,
            "return": [],
            "arguments": {
                "data": [],
                "transformations": [],
                "out": [],
                "mode": [],
                "quiet": []
            }
        },
        "transformation_matrices": {
            "name": "transformation_matrices",
            "location": 913,
            "return": [],
            "arguments": {
                "translations": [],
                "rotations": [],
                "scales": [],
                "center": []
            }
        },
        "_correlation_translation": {
            "name": "_correlation_translation",
            "location": 1001,
            "return": [],
            "arguments": {
                "frame": [],
                "reference": [],
                "upsample_factor": [],
                "median_filter_size": []
            }
        },
        "register_correlations": {
            "name": "register_correlations",
            "location": 1012,
            "return": [],
            "arguments": {
                "frames": [],
                "reference": [],
                "upsample_factor": [],
                "desc": [],
                "median_filter_size": []
            }
        },
        "_template_translation": {
            "name": "_template_translation",
            "location": 1060,
            "return": [],
            "arguments": {
                "frame": [],
                "template": [],
                "ref_center": [],
                "median_filter_size": []
            }
        },
        "register_template": {
            "name": "register_template",
            "location": 1070,
            "return": [],
            "arguments": {
                "frames": [],
                "reference": [],
                "template": [],
                "desc": [],
                "median_filter_size": []
            }
        },
        "contrast_mask": {
            "name": "contrast_mask",
            "location": 1131,
            "return": [],
            "arguments": {
                "frames": [],
                "sensitivity": [],
                "min_size": [],
                "frame_idx": []
            }
        },
        "FramesPool.map": {
            "name": "map",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "frames": [],
                "spatial_dims": [],
                "chunksize": [],
                "desc": []
            }
        },
        "apply_references.calc": {
            "name": "calc",
            "location": 532,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "direct_whitelines.get_whiteline": {
            "name": "get_whiteline",
            "location": 804,
            "return": [],
            "arguments": {
                "frame_idx": []
            }
        },
        "transform_images.apply_transform": {
            "name": "apply_transform",
            "location": 857,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "transform_images.apply_transform.do_transform": {
            "name": "do_transform",
            "location": 864,
            "return": [],
            "arguments": {
                "a": [],
                "transformation": []
            }
        },
        "downsample_array.subshape": {
            "name": "subshape",
            "location": 305,
            "return": [],
            "arguments": {
                "arr": [],
                "bs": [],
                "axis": []
            }
        },
        "downsample_array.tmpshape": {
            "name": "tmpshape",
            "location": 317,
            "return": [],
            "arguments": {
                "arr": [],
                "bs": [],
                "axis": []
            }
        }
    },
    "xanespy-master/xanespy/xanes_viewer.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 18,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Sequence[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "launch_viewer": {
            "name": "launch_viewer",
            "location": 42,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Sequence[str]",
                    "str"
                ],
                "Presenter": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 84,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "xanespy-master/xanespy/xradia.py": {
        "XRMProperty.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "fmt": [],
                "as_array": []
            }
        },
        "XRMProperty.__get__": {
            "name": "__get__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "XRMFile.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "flavor": []
            }
        },
        "XRMFile.__enter__": {
            "name": "__enter__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.__exit__": {
            "name": "__exit__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "XRMFile.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.__repr__": {
            "name": "__repr__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.close": {
            "name": "close",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.um_per_pixel": {
            "name": "um_per_pixel",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.ole_value": {
            "name": "ole_value",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "fmt": [],
                "as_array": []
            }
        },
        "XRMFile.print_ole": {
            "name": "print_ole",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.endtime": {
            "name": "endtime",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.starttimes": {
            "name": "starttimes",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.num_images": {
            "name": "num_images",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.starttime": {
            "name": "starttime",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.energy": {
            "name": "energy",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.is_valid": {
            "name": "is_valid",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.image_data": {
            "name": "image_data",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "XRMFile.sample_position": {
            "name": "sample_position",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.binning": {
            "name": "binning",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.image_dtype": {
            "name": "image_dtype",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XRMFile.image_shape": {
            "name": "image_shape",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXRMFile.image_stack": {
            "name": "image_stack",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TXRMFile.energies": {
            "name": "energies",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xanespy-master/xanespy/__init__.py": {}
}
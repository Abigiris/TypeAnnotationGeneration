{
    "xcrun-develop/inlinecss.py": {
        "inline": {
            "name": "inline",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str"
                ]
            }
        }
    },
    "xcrun-develop/test.py": {},
    "xcrun-develop/isim/base_types.py": {
        "SimulatorControlType.list_key": {
            "name": "list_key",
            "location": 38,
            "return": [
                "str",
                "Dict[str, str]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulatorControlBase.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_info": [
                    "dict",
                    "bool",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "simctl_type": [
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "SimulatorControlBase._run_command": {
            "name": "_run_command",
            "location": 59,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int"
                ]
            }
        },
        "SimulatorControlBase.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "SimulatorControlBase.__ne__": {
            "name": "__ne__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "SimulatorControlBase.run_command": {
            "name": "run_command",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "command": [
                    "Union[str, int, List[int]]",
                    "Callable",
                    "Optional[Any]",
                    "Union[str, List]",
                    "List[str]"
                ]
            }
        },
        "SimulatorControlBase.list_type": {
            "name": "list_type",
            "location": 94,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "item": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "xcrun-develop/isim/device.py": {
        "Device.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_info": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "Optional[int]"
                ],
                "runtime_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Device.refresh_state": {
            "name": "refresh_state",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.runtime": {
            "name": "runtime",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.device_type": {
            "name": "device_type",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Device.get_app_container": {
            "name": "get_app_container",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "app_identifier": [
                    "str"
                ],
                "container": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Device.get_data_directory": {
            "name": "get_data_directory",
            "location": 101,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "app_identifier": [
                    "dict",
                    "str"
                ]
            }
        },
        "Device.openurl": {
            "name": "openurl",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "Device.logverbose": {
            "name": "logverbose",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Device.icloud_sync": {
            "name": "icloud_sync",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.getenv": {
            "name": "getenv",
            "location": 166,
            "return": [
                "bytes",
                "Dict[str, Set[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "variable_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Device.addmedia": {
            "name": "addmedia",
            "location": 175,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "Union[str, os.PathLike]",
                    "str"
                ]
            }
        },
        "Device.terminate": {
            "name": "terminate",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_identifier": [
                    "str"
                ]
            }
        },
        "Device.install": {
            "name": "install",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Device.uninstall": {
            "name": "uninstall",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_identifier": [
                    "str"
                ]
            }
        },
        "Device.delete": {
            "name": "delete",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.rename": {
            "name": "rename",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Device.boot": {
            "name": "boot",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.boot_status": {
            "name": "boot_status",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.shutdown": {
            "name": "shutdown",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.erase": {
            "name": "erase",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.upgrade": {
            "name": "upgrade",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runtime": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "Device.clone": {
            "name": "clone",
            "location": 244,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "new_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Device.pair": {
            "name": "pair",
            "location": 254,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other_device": [
                    "bool",
                    "Mapping[str, str]",
                    "dict",
                    "Sequence[T]",
                    "Callable[[T], bool]"
                ]
            }
        },
        "Device.screenshot": {
            "name": "screenshot",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_path": [
                    "str"
                ]
            }
        },
        "Device.spawn": {
            "name": "spawn",
            "location": 290,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "executable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Device.launch": {
            "name": "launch",
            "location": 295,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Device.__str__": {
            "name": "__str__",
            "location": 300,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.__repr__": {
            "name": "__repr__",
            "location": 304,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.from_simctl_info": {
            "name": "from_simctl_info",
            "location": 309,
            "return": [
                "str",
                "type",
                "Tuple[str]"
            ],
            "arguments": {
                "info": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "Device.from_identifier": {
            "name": "from_identifier",
            "location": 322,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int"
                ]
            }
        },
        "Device.from_name": {
            "name": "from_name",
            "location": 332,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ],
                "runtime": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "Device.create": {
            "name": "create",
            "location": 374,
            "return": [
                "int",
                "Optional[Dict]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "device_type": [
                    "str"
                ],
                "runtime": [
                    "str"
                ]
            }
        },
        "Device.delete_unavailable": {
            "name": "delete_unavailable",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Device.delete_all": {
            "name": "delete_all",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Device.erase_all": {
            "name": "erase_all",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Device.list_all": {
            "name": "list_all",
            "location": 406,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "Device.list_all_raw": {
            "name": "list_all_raw",
            "location": 412,
            "return": [
                "tuple",
                "Type[Any]",
                "Type"
            ],
            "arguments": {}
        }
    },
    "xcrun-develop/isim/device_pair.py": {
        "DevicePair.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_pair_identifier": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "Union[float, Tuple[float, float]]",
                    "float"
                ],
                "device_pair_info": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "DevicePair.watch": {
            "name": "watch",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicePair.phone": {
            "name": "phone",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicePair.unpair": {
            "name": "unpair",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicePair.activate": {
            "name": "activate",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicePair.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicePair.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicePair.from_simctl_info": {
            "name": "from_simctl_info",
            "location": 55,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "info": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "DevicePair.list_all": {
            "name": "list_all",
            "location": 63,
            "return": [
                "List[str]",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "xcrun-develop/isim/device_type.py": {
        "DeviceType.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device_type_info": [
                    "Dict[str, str]",
                    "dict",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "DeviceType.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.from_simctl_info": {
            "name": "from_simctl_info",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "info": [
                    "List[Dict[str, Any]]",
                    "List[Dict[str, str]]",
                    "bool",
                    "Callable[[], bool]",
                    "List[List[Any]]",
                    "List[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "DeviceType.from_id": {
            "name": "from_id",
            "location": 48,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "identifier": [
                    "str"
                ]
            }
        },
        "DeviceType.from_name": {
            "name": "from_name",
            "location": 56,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "DeviceType.list_all": {
            "name": "list_all",
            "location": 68,
            "return": [
                "Type",
                "int"
            ],
            "arguments": {}
        }
    },
    "xcrun-develop/isim/runtime.py": {
        "Runtime.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runtime_info": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Runtime.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runtime.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runtime.from_simctl_info": {
            "name": "from_simctl_info",
            "location": 50,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "info": [
                    "List[Dict[str, Any]]",
                    "List[Dict[str, str]]",
                    "bool",
                    "Callable[[], bool]",
                    "List[List[Any]]",
                    "List[Tuple[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "Runtime.from_id": {
            "name": "from_id",
            "location": 58,
            "return": [
                "int",
                "deque",
                "str"
            ],
            "arguments": {
                "identifier": [
                    "str"
                ]
            }
        },
        "Runtime.from_name": {
            "name": "from_name",
            "location": 68,
            "return": [
                "Type[Any]",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Runtime.list_all": {
            "name": "list_all",
            "location": 77,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "xcrun-develop/isim/__init__.py": {
        "diagnose": {
            "name": "diagnose",
            "location": 53,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "xcrun-develop/tests/test_devices.py": {
        "TestDevice.setUpClass": {
            "name": "setUpClass",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "TestDevice.run_device_test": {
            "name": "run_device_test",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "available_device_type": [
                    "Union[type, Tuple[type, object]]",
                    "list",
                    "bool"
                ],
                "available_runtime": [
                    "bool"
                ]
            }
        },
        "TestDevice.test_installed_devicess": {
            "name": "test_installed_devicess",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDevice.test_lifecycle": {
            "name": "test_lifecycle",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xcrun-develop/tests/test_device_types.py": {
        "TestDeviceTypes.test_installed_device_types": {
            "name": "test_installed_device_types",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeviceTypes.test_from_info": {
            "name": "test_from_info",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeviceTypes.test_from_identifier": {
            "name": "test_from_identifier",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeviceTypes.test_from_name": {
            "name": "test_from_name",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeviceTypes.test_invalid_identifier": {
            "name": "test_invalid_identifier",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeviceTypes.test_invalid_name": {
            "name": "test_invalid_name",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeviceTypes.test_equality": {
            "name": "test_equality",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeviceTypes.test_string_representations": {
            "name": "test_string_representations",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xcrun-develop/tests/test_runtimes.py": {
        "TestRuntime.test_from_info": {
            "name": "test_from_info",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_installed_runtimes": {
            "name": "test_installed_runtimes",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_from_identifier": {
            "name": "test_from_identifier",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_from_name": {
            "name": "test_from_name",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_invalid_identifier": {
            "name": "test_invalid_identifier",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_invalid_name": {
            "name": "test_invalid_name",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_equality": {
            "name": "test_equality",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_string_representations": {
            "name": "test_string_representations",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xcrun-develop/tests/__init__.py": {}
}
{
    "xotl.crdt-main/setup.py": {},
    "xotl.crdt-main/docs/source/conf.py": {},
    "xotl.crdt-main/tests/test_counter.py": {},
    "xotl.crdt-main/tests/test_registers.py": {},
    "xotl.crdt-main/tests/test_sets.py": {},
    "xotl.crdt-main/tests/test_vclock.py": {
        "clocks": {
            "name": "clocks",
            "location": 24,
            "return": [],
            "arguments": {
                "draw": []
            }
        },
        "test_equality_implies_hash": {
            "name": "test_equality_implies_hash",
            "location": 31,
            "return": [],
            "arguments": {
                "c1": [],
                "c2": []
            }
        },
        "test_descend_regression1": {
            "name": "test_descend_regression1",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_descend_regression2": {
            "name": "test_descend_regression2",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_descend_regression3": {
            "name": "test_descend_regression3",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_missing_present_dots_regression": {
            "name": "test_missing_present_dots_regression",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_eq_of_empties1": {
            "name": "test_eq_of_empties1",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_concurrence": {
            "name": "test_concurrence",
            "location": 79,
            "return": [],
            "arguments": {}
        }
    },
    "xotl.crdt-main/xotl/__init__.py": {},
    "xotl.crdt-main/xotl/crdt/base.py": {
        "get_state": {
            "name": "get_state",
            "location": 95,
            "return": [],
            "arguments": {
                "crdt": []
            }
        },
        "from_state": {
            "name": "from_state",
            "location": 104,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "Process.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "order": []
            }
        },
        "Process.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.__eq__": {
            "name": "__eq__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CvRDT.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CvRDT.init": {
            "name": "init",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CvRDT.merge": {
            "name": "merge",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CvRDT.value": {
            "name": "value",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CvRDT.reset": {
            "name": "reset",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CvRDT.__le__": {
            "name": "__le__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CvRDT.__eq__": {
            "name": "__eq__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "xotl.crdt-main/xotl/crdt/clocks.py": {
        "index": {
            "name": "index",
            "location": 175,
            "return": [],
            "arguments": {
                "a": [],
                "x": [],
                "key": []
            }
        },
        "VClock.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "dots": []
            }
        },
        "VClock.__ge__": {
            "name": "__ge__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VClock.__eq__": {
            "name": "__eq__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VClock.__hash__": {
            "name": "__hash__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VClock.__floordiv__": {
            "name": "__floordiv__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VClock.__le__": {
            "name": "__le__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VClock.__gt__": {
            "name": "__gt__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VClock.__lt__": {
            "name": "__lt__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VClock.__bool__": {
            "name": "__bool__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VClock.merge": {
            "name": "merge",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VClock.__add__": {
            "name": "__add__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VClock.bump": {
            "name": "bump",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "process": []
            }
        },
        "VClock.find": {
            "name": "find",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "process": []
            }
        },
        "VClock.reset": {
            "name": "reset",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xotl.crdt-main/xotl/crdt/counter.py": {
        "GCounter.init": {
            "name": "init",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GCounter.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GCounter.incr": {
            "name": "incr",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GCounter.value": {
            "name": "value",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GCounter.merge": {
            "name": "merge",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GCounter.__le__": {
            "name": "__le__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GCounter.reset": {
            "name": "reset",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GCounter.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PNCounter.init": {
            "name": "init",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PNCounter.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PNCounter.incr": {
            "name": "incr",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PNCounter.decr": {
            "name": "decr",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PNCounter.value": {
            "name": "value",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PNCounter.merge": {
            "name": "merge",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PNCounter.__le__": {
            "name": "__le__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PNCounter.__eq__": {
            "name": "__eq__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PNCounter.reset": {
            "name": "reset",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xotl.crdt-main/xotl/crdt/register.py": {
        "LWWRegister.init": {
            "name": "init",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LWWRegister.value": {
            "name": "value",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LWWRegister.dot": {
            "name": "dot",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LWWRegister.set": {
            "name": "set",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LWWRegister.__le__": {
            "name": "__le__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "LWWRegister.__eq__": {
            "name": "__eq__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "LWWRegister.__lt__": {
            "name": "__lt__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "LWWRegister.__gt__": {
            "name": "__gt__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "LWWRegister.__ge__": {
            "name": "__ge__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "LWWRegister.__floordiv__": {
            "name": "__floordiv__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "LWWRegister.__lshift__": {
            "name": "__lshift__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "LWWRegister.merge": {
            "name": "merge",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "LWWRegister.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LWWRegister.reset": {
            "name": "reset",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "xotl.crdt-main/xotl/crdt/release.py": {},
    "xotl.crdt-main/xotl/crdt/sets.py": {
        "GSet.init": {
            "name": "init",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GSet.value": {
            "name": "value",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GSet.__le__": {
            "name": "__le__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GSet.__eq__": {
            "name": "__eq__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GSet.merge": {
            "name": "merge",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GSet.add": {
            "name": "add",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "GSet.reset": {
            "name": "reset",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "TwoPhaseSet.init": {
            "name": "init",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TwoPhaseSet.value": {
            "name": "value",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TwoPhaseSet.__le__": {
            "name": "__le__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TwoPhaseSet.__eq__": {
            "name": "__eq__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TwoPhaseSet.merge": {
            "name": "merge",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TwoPhaseSet.add": {
            "name": "add",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TwoPhaseSet.remove": {
            "name": "remove",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TwoPhaseSet.reset": {
            "name": "reset",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "USet.init": {
            "name": "init",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "USet.value": {
            "name": "value",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "USet.__le__": {
            "name": "__le__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "USet.__eq__": {
            "name": "__eq__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "USet.merge": {
            "name": "merge",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "USet.add": {
            "name": "add",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "USet.remove": {
            "name": "remove",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "USet.__repr__": {
            "name": "__repr__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "USet.reset": {
            "name": "reset",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "ORSet.init": {
            "name": "init",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORSet.__le__": {
            "name": "__le__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ORSet.__eq__": {
            "name": "__eq__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ORSet.merge": {
            "name": "merge",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ORSet.value": {
            "name": "value",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORSet.dot": {
            "name": "dot",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORSet.dot_counter": {
            "name": "dot_counter",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORSet.add": {
            "name": "add",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ORSet.remove": {
            "name": "remove",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ORSet.__repr__": {
            "name": "__repr__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORSet.reset": {
            "name": "reset",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        }
    },
    "xotl.crdt-main/xotl/crdt/__init__.py": {},
    "xotl.crdt-main/xotl/crdt/testing/base.py": {
        "BaseCRDTMachine.replica": {
            "name": "replica",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BaseCRDTMachine.from_state_get_state": {
            "name": "from_state_get_state",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "crdt": []
            }
        },
        "BaseCRDTMachine.create_subjects": {
            "name": "create_subjects",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "ModelBasedCRDTMachine.reset_all_replicas": {
            "name": "reset_all_replicas",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelBasedCRDTMachine.run_synchronize": {
            "name": "run_synchronize",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "receiver": []
            }
        },
        "SyncBasedCRDTMachine.reset_all_replicas": {
            "name": "reset_all_replicas",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncBasedCRDTMachine.run_synchronize": {
            "name": "run_synchronize",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncBasedCRDTMachine.teardown": {
            "name": "teardown",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xotl.crdt-main/xotl/crdt/testing/counters.py": {
        "ModelCounter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelCounter.reset": {
            "name": "reset",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelCounter.incr": {
            "name": "incr",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelCounter.decr": {
            "name": "decr",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelCounter.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CounterMachine.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CounterMachine.run_incr": {
            "name": "run_incr",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "replica": []
            }
        },
        "GCounterMachine.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PNCounterMachine.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PNCounterMachine.run_decr": {
            "name": "run_decr",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "replica": []
            }
        }
    },
    "xotl.crdt-main/xotl/crdt/testing/registers.py": {
        "Register.reset": {
            "name": "reset",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register.set": {
            "name": "set",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "timestamp": [],
                "process": []
            }
        },
        "LWWRegisterMachine.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LWWRegisterMachine.run_set": {
            "name": "run_set",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [],
                "value": []
            }
        },
        "LWWRegisterConcurrentMachine.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LWWRegisterConcurrentMachine.run_possibly_concurrent_set": {
            "name": "run_possibly_concurrent_set",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [],
                "value": []
            }
        },
        "LWWRegisterConcurrentMachine.tick": {
            "name": "tick",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LWWRegisterConcurrentMachine.teardown": {
            "name": "teardown",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xotl.crdt-main/xotl/crdt/testing/sets.py": {
        "Set.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Set.reset": {
            "name": "reset",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Set.add": {
            "name": "add",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "GSetMachine.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GSetMachine.add_item": {
            "name": "add_item",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [],
                "item": []
            }
        },
        "GSetMachine.reset_all_replicas_with_item": {
            "name": "reset_all_replicas_with_item",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TPSetMachine.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TPSetMachine.generate_item": {
            "name": "generate_item",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TPSetMachine.add_item": {
            "name": "add_item",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [],
                "item": []
            }
        },
        "TPSetMachine.remove_item": {
            "name": "remove_item",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [],
                "item": []
            }
        },
        "TPSetMachine.reset_all_replicas_with_item": {
            "name": "reset_all_replicas_with_item",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Item.__repr__": {
            "name": "__repr__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncBasedSetMachine.generate_item": {
            "name": "generate_item",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SyncBasedSetMachine.reset_all_replicas_with_item": {
            "name": "reset_all_replicas_with_item",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "USetMachine.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "USetMachine.add_item": {
            "name": "add_item",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [],
                "item": []
            }
        },
        "USetMachine.remove_item": {
            "name": "remove_item",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [],
                "item": []
            }
        },
        "USetMachine.teardown": {
            "name": "teardown",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORSetMachine.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORSetMachine.add_item": {
            "name": "add_item",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [],
                "item": []
            }
        },
        "ORSetMachine.remove_item": {
            "name": "remove_item",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "replica": [],
                "item": []
            }
        },
        "ORSetMachine.simulate_concurrent_add_remove": {
            "name": "simulate_concurrent_add_remove",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "replica1": [],
                "replica2": [],
                "item": []
            }
        },
        "ORSetMachine.teardown": {
            "name": "teardown",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xotl.crdt-main/xotl/crdt/testing/__init__.py": {}
}
{
    "xray_teeth_detection-master/.vscode/.ropeproject/config.py": {
        "set_prefs": {
            "name": "set_prefs",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "prefs": [
                    "str"
                ]
            }
        },
        "project_opened": {
            "name": "project_opened",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "project": [
                    "Set[str]",
                    "bool"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/active_shape_model.py": {
        "ActiveShapeModel.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean_shape": [
                    "int",
                    "bool",
                    "float"
                ],
                "eigenvectors": [
                    "int",
                    "bool",
                    "float"
                ],
                "eigenvalues": [
                    "int",
                    "bool",
                    "float"
                ],
                "profiles": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ActiveShapeModel.__len__": {
            "name": "__len__",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModel.match_target": {
            "name": "match_target",
            "location": 50,
            "return": [
                "IO[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "target_shape": [
                    "int",
                    "bytes"
                ],
                "shape_params": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "ActiveShapeModel.create_shape": {
            "name": "create_shape",
            "location": 77,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "shape_parameters": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "ActiveShapeModel.update_shape_parameters": {
            "name": "update_shape_parameters",
            "location": 90,
            "return": [
                "str",
                "Callable[[KT, VT], bool]"
            ],
            "arguments": {
                "self": [],
                "target_shape": [
                    "int"
                ]
            }
        },
        "ActiveShapeModel.fit_to_image": {
            "name": "fit_to_image",
            "location": 100,
            "return": [
                "int",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "initial_imgshp": [
                    "image_shape.ImageShape",
                    "numpy.ndarray",
                    "list",
                    "int",
                    "Union[str, bool, None]",
                    "str"
                ]
            }
        },
        "ActiveShapeModel.check_convergence": {
            "name": "check_convergence",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array_1": [
                    "numpy.ndarray",
                    "int",
                    "list",
                    "AsyncIterator[T]",
                    "float"
                ],
                "array_2": [
                    "numpy.ndarray",
                    "int",
                    "list",
                    "AsyncIterator[T]",
                    "float"
                ],
                "max_delta": [
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "ActiveShapeModel.from_image_shapes": {
            "name": "from_image_shapes",
            "location": 144,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[str]",
                    "tuple"
                ],
                "image_shapes": [
                    "List[str]",
                    "dict",
                    "Callable[[], None]",
                    "str",
                    "type"
                ],
                "des_expvar_ratio": [
                    "str",
                    "int",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "ActiveShapeModel.propose_shape": {
            "name": "propose_shape",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "image_shape": [
                    "image_shape.ImageShape",
                    "numpy.ndarray",
                    "bool",
                    "int",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/active_shape_model_test.py": {
        "ActiveShapeModelTest.test_from_image_shapes": {
            "name": "test_from_image_shapes",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModelTest.test_align_shapes": {
            "name": "test_align_shapes",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModelTest.test_match_target": {
            "name": "test_match_target",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModelTest.test_propose_shape": {
            "name": "test_propose_shape",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModelTest.test_fit_to_image": {
            "name": "test_fit_to_image",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/auto_initializator.py": {
        "AutoInitializator.initialize": {
            "name": "initialize",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/data_preprocessing.py": {
        "Preprocessor.apply": {
            "name": "apply",
            "location": 17,
            "return": [
                "str",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "pipeline": [
                    "numpy.ndarray",
                    "str",
                    "bool"
                ],
                "images": [
                    "numpy.ndarray",
                    "str",
                    "bool"
                ]
            }
        },
        "Preprocessor.bilateral": {
            "name": "bilateral",
            "location": 30,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "image": [
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "list"
                ],
                "diameter": [
                    "int",
                    "List[int]",
                    "List[float]"
                ],
                "sigma_color": [
                    "int",
                    "List[int]",
                    "List[float]"
                ],
                "sigma_space": [
                    "int",
                    "List[int]",
                    "List[float]"
                ],
                "times": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ]
            }
        },
        "Preprocessor.median_filter": {
            "name": "median_filter",
            "location": 39,
            "return": [
                "str",
                "Mapping[str, Sequence[str]]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str",
                    "Callable[..., Awaitable]",
                    "bool",
                    "Optional[bool]",
                    "T",
                    "int"
                ],
                "img": [
                    "Dict[int, Dict[str, Any]]",
                    "Optional[Dict[str, Any]]",
                    "Tuple[numpy.ndarray]",
                    "str",
                    "Callable"
                ],
                "ksize": [
                    "int",
                    "str"
                ],
                "times": [
                    "int",
                    "str"
                ]
            }
        },
        "Preprocessor.errosion": {
            "name": "errosion",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "img": [
                    "Type",
                    "numpy.array",
                    "float",
                    "type"
                ],
                "ksize": [
                    "Type",
                    "numpy.array",
                    "float",
                    "type"
                ]
            }
        },
        "Preprocessor.dilatation": {
            "name": "dilatation",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "img": [
                    "Type",
                    "numpy.array",
                    "float",
                    "type"
                ],
                "ksize": [
                    "Type",
                    "numpy.array",
                    "float",
                    "type"
                ]
            }
        },
        "Preprocessor.top_hat_processing": {
            "name": "top_hat_processing",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "img": [
                    "Type",
                    "numpy.array",
                    "float",
                    "type"
                ],
                "ksize": [
                    "str"
                ]
            }
        },
        "Preprocessor.laplacian": {
            "name": "laplacian",
            "location": 59,
            "return": [
                "numpy.ndarray",
                "str",
                "bytearray",
                "float",
                "Dict[str, int]",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "img": [
                    "Type",
                    "numpy.array",
                    "float",
                    "type"
                ]
            }
        },
        "Preprocessor.show_image": {
            "name": "show_image",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, str]",
                    "memoryview",
                    "bool"
                ],
                "img": [
                    "Type",
                    "numpy.array",
                    "float",
                    "type"
                ]
            }
        },
        "Preprocessor.sobel": {
            "name": "sobel",
            "location": 68,
            "return": [
                "bool",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "img": [
                    "int",
                    "Callable",
                    "str"
                ],
                "scale": [
                    "int",
                    "Callable",
                    "str"
                ],
                "delta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Preprocessor.apply_scharr": {
            "name": "apply_scharr",
            "location": 80,
            "return": [
                "bool",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "img": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ],
                "scale": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ],
                "delta": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "Preprocessor.apply.apply_fn": {
            "name": "apply_fn",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fun": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/evaluator.py": {
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "int",
                    "float"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "Tuple[float, float]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "printable": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Evaluator.quantitative_eval": {
            "name": "quantitative_eval",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator.root_mean_squared_error": {
            "name": "root_mean_squared_error",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "actual": [
                    "image_shape.ImageShape",
                    "bool"
                ],
                "expected": [
                    "image_shape.ImageShape",
                    "bool"
                ]
            }
        },
        "Evaluator.qualitative_eval": {
            "name": "qualitative_eval",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator.save_image_shape": {
            "name": "save_image_shape",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_shape": [
                    "image_shape.ImageShape",
                    "bool",
                    "str",
                    "int",
                    "List[Dict]",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/gray_level_profile.py": {
        "GrayLevelProfile.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean_profile": [
                    "bool",
                    "Tuple[numpy.dtype]",
                    "float"
                ],
                "covariance": [
                    "int",
                    "str"
                ],
                "half_sampling_size": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Tuple[str, int, int]]",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "GrayLevelProfile.mahalanobis_distance": {
            "name": "mahalanobis_distance",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "Tuple[str, str]",
                "Dict[str, str]",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GrayLevelProfile.point_pos_from_profiles_list": {
            "name": "point_pos_from_profiles_list",
            "location": 34,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "profile_index": [
                    "int",
                    "numpy.ndarray"
                ],
                "profiles_count": [
                    "int",
                    "float"
                ],
                "original_point": [
                    "Set[str]",
                    "Tuple[str]",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "direction_vector": [
                    "Set[str]",
                    "Tuple[str]",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ]
            }
        },
        "GrayLevelProfile.point_pos_from_single_profile": {
            "name": "point_pos_from_single_profile",
            "location": 64,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "elem_idx": [
                    "list",
                    "int",
                    "List[str]"
                ],
                "elem_count": [
                    "int",
                    "Callable",
                    "bool",
                    "dict"
                ],
                "original_point": [
                    "int",
                    "Callable",
                    "bool",
                    "dict"
                ],
                "direction_vector": [
                    "int",
                    "Callable",
                    "bool",
                    "dict"
                ]
            }
        },
        "GrayLevelProfile.from_image_shapes": {
            "name": "from_image_shapes",
            "location": 87,
            "return": [
                "int",
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[Sequence[int]]",
                    "Optional[numpy.ndarray]",
                    "List[int]",
                    "numpy.ndarray",
                    "int"
                ],
                "images": [
                    "List[image_shape.ImageShape]",
                    "int",
                    "List[int]"
                ],
                "half_sampling_size": [
                    "Optional[Sequence[int]]",
                    "Optional[numpy.ndarray]",
                    "List[int]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "GrayLevelProfile.sliding_profiles": {
            "name": "sliding_profiles",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "T",
                    "str",
                    "Tuple[int]",
                    "Sequence[str]"
                ],
                "image": [
                    "bool",
                    "Iterable[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "float"
                ],
                "center_point": [
                    "bool",
                    "Iterable[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "float"
                ],
                "direction_vector": [
                    "bool",
                    "Iterable[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "float"
                ],
                "half_sampling_size": [
                    "int",
                    "Dict[str, int]",
                    "Optional[int]"
                ],
                "profile_count": [
                    "float",
                    "int",
                    "Union[int, float]",
                    "Optional[int]"
                ],
                "processing_fn": [
                    "Optional[numpy.ndarray]",
                    "str",
                    "Sequence[str]",
                    "Optional[Exception]",
                    "bool"
                ]
            }
        },
        "GrayLevelProfile.normalize": {
            "name": "normalize",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "samples": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GrayLevelProfile.rotate_and_center_image": {
            "name": "rotate_and_center_image",
            "location": 164,
            "return": [
                "float",
                "str",
                "IO[Any]",
                "Iterable[T]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "numpy.ndarray"
                ],
                "center_point": [
                    "str",
                    "numpy.ndarray",
                    "float",
                    "Dict[str, Any]"
                ],
                "direction_vector": [
                    "str",
                    "float",
                    "numpy.ndarray",
                    "int"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/gray_level_profile_test.py": {
        "GrayLevelProfileTest.test_rotate_and_center_image": {
            "name": "test_rotate_and_center_image",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GrayLevelProfileTest.test_all_from_image_shapes": {
            "name": "test_all_from_image_shapes",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GrayLevelProfileTest.test_sliding_profiles": {
            "name": "test_sliding_profiles",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GrayLevelProfileTest.test_point_pos_from_profiles_list": {
            "name": "test_point_pos_from_profiles_list",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/image_shape.py": {},
    "xray_teeth_detection-master/src/imgutils.py": {
        "load_images": {
            "name": "load_images",
            "location": 9,
            "return": [
                "Optional[List[str]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "indices": [
                    "str",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "extra_text": [
                    "str",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "flags": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "apply_median_blur": {
            "name": "apply_median_blur",
            "location": 21,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "images": [
                    "float",
                    "bool"
                ],
                "kernel_size": [
                    "float",
                    "bool"
                ],
                "times": [
                    "numpy.ndarray"
                ]
            }
        },
        "top_hat_processing": {
            "name": "top_hat_processing",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "images": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "ksize": [
                    "str",
                    "int"
                ]
            }
        },
        "apply_sobel": {
            "name": "apply_sobel",
            "location": 33,
            "return": [
                "Optional[int]",
                "str",
                "int",
                "Callable",
                "numpy.ndarray",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "images": [
                    "numpy.ndarray",
                    "int"
                ],
                "scale": [
                    "int",
                    "numpy.ndarray"
                ],
                "delta": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "_apply_sobel_single_img": {
            "name": "_apply_sobel_single_img",
            "location": 41,
            "return": [
                "bool",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "image": [
                    "numpy.ndarray"
                ],
                "scale": [
                    "numpy.ndarray"
                ],
                "delta": [
                    "numpy.ndarray"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/incisors.py": {
        "Incisors.active_shape_models": {
            "name": "active_shape_models",
            "location": 19,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "list"
                ],
                "images": [
                    "float",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "incisors": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/main.py": {
        "preprocess": {
            "name": "preprocess",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "evaluate": {
            "name": "evaluate",
            "location": 46,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "auto": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/manual_initializator.py": {
        "Initializator.initialize": {
            "name": "initialize",
            "location": 19,
            "return": [
                "ImageShapesDict"
            ],
            "arguments": {
                "self": [],
                "asm_dict": [
                    "List[numpy.ndarray]",
                    "float",
                    "bool",
                    "Optional[float]"
                ],
                "images": [
                    "List[numpy.ndarray]",
                    "float",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "ManualInitializator.initialize": {
            "name": "initialize",
            "location": 160,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "numpy.ndarray",
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "asm_dict": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "images": [
                    "numpy.ndarray",
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "ManualInitializator.find_image_shapes": {
            "name": "find_image_shapes",
            "location": 170,
            "return": [
                "int",
                "Optional[List[str]]",
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "incisor": [
                    "float",
                    "str"
                ],
                "asm_dict": [
                    "bytes",
                    "Dict[str, Any]"
                ],
                "images": [
                    "List[numpy.ndarray]",
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "List[List[str]]",
                    "str"
                ]
            }
        },
        "ManualInitializator._min_hardcoded_length": {
            "name": "_min_hardcoded_length",
            "location": 182,
            "return": [
                "int",
                "str",
                "Sequence[Any]",
                "Optional[dict]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "\"Flow\"",
                    "int"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/point.py": {
        "Point.add_noise": {
            "name": "add_noise",
            "location": 14,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.round": {
            "name": "round",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__add__": {
            "name": "__add__",
            "location": 27,
            "return": [
                "str",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Point.__sub__": {
            "name": "__sub__",
            "location": 30,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Point.__truediv__": {
            "name": "__truediv__",
            "location": 33,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "xray_teeth_detection-master/src/point_test.py": {
        "PointTest.test_add_noise": {
            "name": "test_add_noise",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/shape.py": {
        "Shape.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "numpy.ndarray",
                    "Union[numpy.ndarray, numpy.void]",
                    "str",
                    "int"
                ],
                "gray_level_profiles": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Shape.__len__": {
            "name": "__len__",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.norm": {
            "name": "norm",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.as_vector": {
            "name": "as_vector",
            "location": 26,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.as_point_list": {
            "name": "as_point_list",
            "location": 31,
            "return": [
                "List[int]",
                "str",
                "int",
                "Tuple[int, int]",
                "Set[str]",
                "List[Tuple[int, str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.x_vector": {
            "name": "x_vector",
            "location": 35,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.y_vector": {
            "name": "y_vector",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.align": {
            "name": "align",
            "location": 44,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "original_ref_shape": [
                    "bool"
                ],
                "modify": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Optional[bool]"
                ]
            }
        },
        "Shape.conform_to_rect": {
            "name": "conform_to_rect",
            "location": 99,
            "return": [
                "dict",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "bottom_left": [
                    "numpy.ndarray"
                ],
                "top_right": [
                    "numpy.ndarray"
                ]
            }
        },
        "Shape.axis_means": {
            "name": "axis_means",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.translate_to_origin": {
            "name": "translate_to_origin",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.translated_to_point": {
            "name": "translated_to_point",
            "location": 126,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "numpy.ndarray",
                    "Union[numpy.ndarray, numpy.void]"
                ]
            }
        },
        "Shape.translated_to_origin": {
            "name": "translated_to_origin",
            "location": 130,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.get_orthogonal_vectors": {
            "name": "get_orthogonal_vectors",
            "location": 135,
            "return": [
                "List[str]",
                "List[Dict]",
                "Union[str, List[Any]]",
                "List[int]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "with_tck": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Shape.apply_procrustes": {
            "name": "apply_procrustes",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "numpy.array",
                    "float",
                    "type"
                ],
                "shapes": [
                    "bytes",
                    "AsyncGenerator",
                    "Tuple[dict, dict]"
                ]
            }
        },
        "Shape.mean_from_many": {
            "name": "mean_from_many",
            "location": 186,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "AnyStr",
                    "int",
                    "str"
                ],
                "shapes": [
                    "bytes",
                    "Optional[Iterable[T]]",
                    "dict",
                    "bool",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "Shape.translate_all_to_origin": {
            "name": "translate_all_to_origin",
            "location": 192,
            "return": [
                "int",
                "List[int]",
                "str",
                "Union[int, float]",
                "Union[str, int, float]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[Exception]",
                    "Iterable[T]"
                ],
                "shapes": [
                    "str",
                    "bool",
                    "Type[Exception]",
                    "Iterable[T]"
                ]
            }
        },
        "Shape.align_many": {
            "name": "align_many",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "int",
                    "Callable[[None], \"Expr\"]",
                    "T",
                    "list"
                ],
                "ref_shape": [
                    "int",
                    "bytes",
                    "list",
                    "bool",
                    "Iterable[str]"
                ],
                "shapes": [
                    "Callable",
                    "int",
                    "Callable[[None], \"Expr\"]",
                    "T",
                    "list"
                ]
            }
        },
        "Shape.from_vector": {
            "name": "from_vector",
            "location": 206,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "vector": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Shape.copy": {
            "name": "copy",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[..., None]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "source": [
                    "str",
                    "Callable[..., None]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Shape.from_file": {
            "name": "from_file",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "image_index": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "Mapping[str, int]"
                ],
                "incisor_index": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "Mapping[str, int]"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/shapeutils.py": {
        "plot_shape": {
            "name": "plot_shape",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "shapes": [
                    "int",
                    "Iterable[float]",
                    "str",
                    "List[T]",
                    "List[str]"
                ],
                "overlay_image": [
                    "bool",
                    "numpy.ndarray"
                ],
                "display": [
                    "int",
                    "bool",
                    "List[numpy.ndarray]"
                ],
                "dots": [
                    "int",
                    "bool",
                    "List[numpy.ndarray]"
                ]
            }
        },
        "plot_point": {
            "name": "plot_point",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "points": [
                    "int",
                    "Callable",
                    "str"
                ],
                "display": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "plot_vecs": {
            "name": "plot_vecs",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "vectors": [
                    "str",
                    "numpy.array",
                    "int"
                ],
                "points": [
                    "numpy.array",
                    "List[Tuple[int, int, str]]",
                    "List[List[Any]]"
                ],
                "display": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "plot_interpol": {
            "name": "plot_interpol",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "tck": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "display": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "plot_rectangle": {
            "name": "plot_rectangle",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "bottom_left": [
                    "int",
                    "numpy.random.RandomState",
                    "str",
                    "float"
                ],
                "top_right": [
                    "int",
                    "str",
                    "float"
                ],
                "display": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "plot_profile": {
            "name": "plot_profile",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "profiles": [
                    "int",
                    "Callable",
                    "str"
                ],
                "display": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "plot_image_shape": {
            "name": "plot_image_shape",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "image_shapes": [
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "Mapping[str, Callable[[], object]]",
                    "List[Tuple[numpy.ndarray, str]]"
                ],
                "display": [
                    "numpy.ndarray"
                ],
                "dots": [
                    "numpy.ndarray",
                    "Tuple[numpy.ndarray, float]"
                ],
                "interpol": [
                    "int"
                ],
                "vecs": [
                    "numpy.ndarray",
                    "int",
                    "numpy.array",
                    "str",
                    "Tuple[int, int, int]",
                    "float"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/shapeutils_test.py": {
        "ShapeutilsTest.test_plot_vecs": {
            "name": "test_plot_vecs",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeutilsTest.test_interpol": {
            "name": "test_interpol",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeutilsTest.test_plot_image_shape": {
            "name": "test_plot_image_shape",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeutilsTest.test_plot_profile": {
            "name": "test_plot_profile",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/shape_test.py": {
        "ShapeTest.test_translate_all_to_origin": {
            "name": "test_translate_all_to_origin",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_align_shapes": {
            "name": "test_align_shapes",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_get_orthogonal_vectors": {
            "name": "test_get_orthogonal_vectors",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_as_point_list": {
            "name": "test_as_point_list",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_x_vector": {
            "name": "test_x_vector",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_y_vector": {
            "name": "test_y_vector",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_conform_to_rect": {
            "name": "test_conform_to_rect",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_apply_procrustes": {
            "name": "test_apply_procrustes",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/testing.py": {},
    "xray_teeth_detection-master/src/testutils.py": {
        "create_diagonal_test_image": {
            "name": "create_diagonal_test_image",
            "location": 17,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "l": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_circle_at_origin": {
            "name": "create_circle_at_origin",
            "location": 27,
            "return": [
                "int",
                "tuple",
                "str"
            ],
            "arguments": {
                "l": [
                    "int"
                ],
                "r": [
                    "int"
                ],
                "m": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "load_incisor": {
            "name": "load_incisor",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "incisor": [
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "set"
                ],
                "extra_text": [
                    "str"
                ],
                "blur": [
                    "str"
                ],
                "sobel": [
                    "str"
                ]
            }
        },
        "image_shape_with_noise": {
            "name": "image_shape_with_noise",
            "location": 84,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "image_shape": [
                    "numpy.ndarray",
                    "\"ImageStack\"",
                    "image_shape.ImageShape"
                ]
            }
        },
        "ShapeAssertions.assert_shape_equal": {
            "name": "assert_shape_equal",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "shape.Shape",
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "desired": [
                    "shape.Shape",
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ShapeAssertions.assert_shape_approx_equal": {
            "name": "assert_shape_approx_equal",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "shape.Shape",
                    "list",
                    "List[int]",
                    "List[str]"
                ],
                "desired": [
                    "shape.Shape",
                    "list",
                    "List[int]",
                    "List[str]"
                ],
                "significant": [
                    "shape.Shape",
                    "list",
                    "List[int]",
                    "List[str]"
                ]
            }
        }
    },
    "xray_teeth_detection-master/src/ui.py": {}
}
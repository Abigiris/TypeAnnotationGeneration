{
    "yaml-dataclass-config-master/setup.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "yaml-dataclass-config-master/tasks.py": {
        "_delete_file": {
            "name": "_delete_file",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "IO",
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Union[str, pathlib3x.Path, IO[str]]"
                ]
            }
        },
        "style": {
            "name": "style",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "check": [
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "isort": {
            "name": "isort",
            "location": 51,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "pipenv_setup": {
            "name": "pipenv_setup",
            "location": 57,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bytes",
                    "bool",
                    "Union[Sequence[str], Sequence[int]]",
                    "Iterable[str]"
                ],
                "check": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 63,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "lint_flake8": {
            "name": "lint_flake8",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_pylint": {
            "name": "lint_pylint",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_mypy": {
            "name": "lint_mypy",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "radon_cc": {
            "name": "radon_cc",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon_mi": {
            "name": "radon_mi",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon": {
            "name": "radon",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "xenon": {
            "name": "xenon",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 141,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "publish": [
                    "Union[List, set]",
                    "Iterator[str]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ],
                "xml": [
                    "Union[List, set]",
                    "Iterator[str]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "clean_build": {
            "name": "clean_build",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "clean_python": {
            "name": "clean_python",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "Path",
                    "int",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "clean_tests": {
            "name": "clean_tests",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "_context": [
                    "runners.TestRunner",
                    "bool",
                    "Callable[[], bytes]",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "dist": {
            "name": "dist",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "yaml-dataclass-config-master/myproduct/config.py": {},
    "yaml-dataclass-config-master/myproduct/my_project.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "yaml-dataclass-config-master/myproduct/__init__.py": {},
    "yaml-dataclass-config-master/tests/conftest.py": {},
    "yaml-dataclass-config-master/tests/test_config.py": {
        "TestYamlDataClassConfig.test_scenario_readme": {
            "name": "test_scenario_readme",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "float"
                ]
            }
        },
        "TestYamlDataClassConfig.test_config_success": {
            "name": "test_config_success",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestYamlDataClassConfig.test_config_success_specify_file_path_argument": {
            "name": "test_config_success_specify_file_path_argument",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_to_yaml": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestYamlDataClassConfig.test_config_success_specify_file_path_property": {
            "name": "test_config_success_specify_file_path_property",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlDataClassConfig.assert_that_config_a_is_loaded": {
            "name": "assert_that_config_a_is_loaded",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "app.config.HealthCheckConfig",
                    "sphinx.config.Config",
                    "Dict[str, str]",
                    "config.Config"
                ]
            }
        },
        "TestYamlDataClassConfig.test_config_success_specify_absolute_file_path_argument": {
            "name": "test_config_success_specify_absolute_file_path_argument",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_to_yaml": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "Optional[str]",
                    "virgene.config.Config"
                ]
            }
        },
        "TestYamlDataClassConfig.test_config_success_specify_absolute_file_path_property": {
            "name": "test_config_success_specify_absolute_file_path_property",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlDataClassConfig.assert_that_config_b_is_loaded": {
            "name": "assert_that_config_b_is_loaded",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "dict",
                    "hub2labhook.config.FailFastConfig"
                ]
            }
        },
        "TestYamlDataClassConfig.check_part_config_a": {
            "name": "check_part_config_a",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "TestYamlDataClassConfig.test_config_fail": {
            "name": "test_config_fail",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "yaml-dataclass-config-master/tests/test_config_handler_pytest.py": {
        "TestConfigHandlerPytest.test_config_handler_pytest": {
            "name": "test_config_handler_pytest",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "yaml_config": [
                    "Callable"
                ]
            }
        }
    },
    "yaml-dataclass-config-master/tests/test_config_handler_unittest.py": {
        "TestConfigHandlerUnittest.test_config_handler_unittest": {
            "name": "test_config_handler_unittest",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "yaml-dataclass-config-master/tests/test___init__.py": {
        "TestFunctions.test_create_file_path_field": {
            "name": "test_create_file_path_field",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestFunctions.test_build_path_relative": {
            "name": "test_build_path_relative",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "argument": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "str",
                    "List[str]"
                ],
                "expected": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestFunctions.test_build_path_absolute": {
            "name": "test_build_path_absolute",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "argument": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "str",
                    "Optional[pathlib.Path]"
                ],
                "expected": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "yaml-dataclass-config-master/tests/__init__.py": {},
    "yaml-dataclass-config-master/yamldataclassconfig/config.py": {
        "YamlDataClassConfig.load": {
            "name": "load",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "int",
                    "str"
                ],
                "path_is_absolute": [
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "str",
                    "bytes",
                    "bool",
                    "lib.Path"
                ]
            }
        }
    },
    "yaml-dataclass-config-master/yamldataclassconfig/utility.py": {
        "create_file_path_field": {
            "name": "create_file_path_field",
            "location": 12,
            "return": [
                "List[str]",
                "Tuple[Any, Any, Any]",
                "Tuple[Dict, Dict]",
                "Dict[str, str]",
                "Set[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bytes",
                    "Union[pathlib.Path, str]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "path_is_absolute": [
                    "str",
                    "bytes",
                    "Union[pathlib.Path, str]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "build_path": {
            "name": "build_path",
            "location": 25,
            "return": [
                "pathlib.Path",
                "str",
                "Union[pathlib.Path, str]"
            ],
            "arguments": {
                "path": [
                    "Union[pathlib.Path, str]",
                    "str",
                    "pathlib.Path"
                ],
                "path_is_absolute": [
                    "bool",
                    "int",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "yaml-dataclass-config-master/yamldataclassconfig/__init__.py": {},
    "yaml-dataclass-config-master/yourproduct/config.py": {},
    "yaml-dataclass-config-master/yourproduct/pytest_context.py": {
        "yaml_config": {
            "name": "yaml_config",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_something": {
            "name": "test_something",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "yaml_config": []
            }
        }
    },
    "yaml-dataclass-config-master/yourproduct/unittest_context.py": {
        "ConfigurableTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurableTestCase.doCleanups": {
            "name": "doCleanups",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "yaml-dataclass-config-master/yourproduct/__init__.py": {}
}
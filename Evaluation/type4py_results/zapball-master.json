{
    "zapball-master/manage.py": {},
    "zapball-master/matches/admin.py": {},
    "zapball-master/matches/apps.py": {},
    "zapball-master/matches/models.py": {
        "Game.__unicode__": {
            "name": "__unicode__",
            "location": 10,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.__unicode__": {
            "name": "__unicode__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchPlayer.__unicode__": {
            "name": "__unicode__",
            "location": 42,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zapball-master/matches/slack_integration.py": {
        "match_description_message": {
            "name": "match_description_message",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "match": [
                    "Dict[str, Any]",
                    "List[dict]",
                    "requests.models.Response",
                    "dict",
                    "asgard.models.spec.container.ContainerSpec"
                ]
            }
        },
        "match_started_message": {
            "name": "match_started_message",
            "location": 35,
            "return": [
                "bytes",
                "List[str]",
                "int",
                "str",
                "dict",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "match": [
                    "str",
                    "Match",
                    "Match[bytes]"
                ]
            }
        }
    },
    "zapball-master/matches/utils.py": {
        "create_match": {
            "name": "create_match",
            "location": 9,
            "return": [
                "bool",
                "str",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "game": [
                    "str",
                    "django.contrib.auth.models.User",
                    "List[int]",
                    "int",
                    "database.Game",
                    "database.User",
                    "List[str]"
                ],
                "user": [
                    "str",
                    "django.contrib.auth.models.User",
                    "List[int]",
                    "int",
                    "database.Game",
                    "database.User",
                    "List[str]"
                ],
                "msg": [
                    "str",
                    "django.contrib.auth.models.User",
                    "List[int]",
                    "int",
                    "database.Game",
                    "database.User",
                    "List[str]"
                ]
            }
        },
        "prepare_match": {
            "name": "prepare_match",
            "location": 16,
            "return": [
                "str",
                "bool",
                "OrderedDict",
                "int"
            ],
            "arguments": {
                "game": [
                    "str",
                    "Optional[str]",
                    "int",
                    "django.db.models.Model",
                    "list",
                    "salon.models.Stylist"
                ],
                "msg": [
                    "str",
                    "List[Dict[str, Any]]",
                    "dict",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "join_match": {
            "name": "join_match",
            "location": 27,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "match": [
                    "models.Match",
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "Iterable[contests.models.User]",
                    "models.User"
                ],
                "user": [
                    "django.contrib.auth.models.User",
                    "str",
                    "app.models.user.User",
                    "List[Dict[str, Any]]",
                    "app.models.user.UserInDB",
                    "int"
                ]
            }
        },
        "get_match_users": {
            "name": "get_match_users",
            "location": 32,
            "return": [
                "tracim.models.auth.User",
                "zerver.models.UserProfile",
                "Iterable[str]",
                "metaswitch_tinder.database.models.User",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "match": [
                    "models.Match",
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "is_team_full": {
            "name": "is_team_full",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "team": [
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "is_match_full": {
            "name": "is_match_full",
            "location": 42,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "match": [
                    "models.Match",
                    "int",
                    "str",
                    "Match[bytes]",
                    "Pattern[str]",
                    "Pattern[bytes]"
                ]
            }
        },
        "get_users_from_teams": {
            "name": "get_users_from_teams",
            "location": 51,
            "return": [
                "core.models.User",
                "abilian.core.models.subjects.User",
                "core.models.UserPreferences",
                "aiolambda.Maybe[auth.user.User]",
                "database.User",
                "Dict[str, Any]",
                "Optional[User]"
            ],
            "arguments": {
                "teams": [
                    "purplship.core.models.ShipmentRequest",
                    "Sequence[int]",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "join_random_team": {
            "name": "join_random_team",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "django.contrib.auth.models.User",
                    "server.models.User",
                    "core.models.User",
                    "accounts.models.KippoOrganization"
                ],
                "teams": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "models.scenes.scenes_base.Scene"
                ]
            }
        }
    },
    "zapball-master/matches/views.py": {
        "start_match": {
            "name": "start_match",
            "location": 15,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "actions": {
            "name": "actions",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, dict]",
                "Dict[str, Any]",
                "Iterable[Tuple[str, int]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "zapball-master/matches/__init__.py": {},
    "zapball-master/matches/migrations/0001_initial.py": {},
    "zapball-master/matches/migrations/__init__.py": {},
    "zapball-master/slack/admin.py": {},
    "zapball-master/slack/apps.py": {},
    "zapball-master/slack/models.py": {},
    "zapball-master/slack/tests.py": {},
    "zapball-master/slack/utils.py": {
        "is_slack_token_valid": {
            "name": "is_slack_token_valid",
            "location": 8,
            "return": [
                "int",
                "dict",
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "token": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "format_user_mention": {
            "name": "format_user_mention",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "django.contrib.auth.models.User",
                    "server.models.User",
                    "User",
                    "tracim.models.auth.User",
                    "arxiv.users.domain.User",
                    "str"
                ]
            }
        },
        "get_or_create_slack_user": {
            "name": "get_or_create_slack_user",
            "location": 16,
            "return": [
                "str",
                "bool",
                "Optional[app.models.User]",
                "bytes",
                "List[zerver.models.UserProfile]"
            ],
            "arguments": {
                "team": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "username": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "zapball-master/slack/views.py": {},
    "zapball-master/slack/__init__.py": {},
    "zapball-master/slack/migrations/0001_initial.py": {},
    "zapball-master/slack/migrations/__init__.py": {},
    "zapball-master/tests/test_matches.py": {
        "foosball_game": {
            "name": "foosball_game",
            "location": 8,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "user_a": {
            "name": "user_a",
            "location": 14,
            "return": [
                "raiden.utils.List[raiden.raiden_service.RaidenService]",
                "core.models.Recipe",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "django_user_model": [
                    "str",
                    "List[Dict[str, Any]]",
                    "models.User",
                    "models.Dominion"
                ]
            }
        },
        "user_b": {
            "name": "user_b",
            "location": 21,
            "return": [
                "str",
                "core.models.Recipe",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "django_user_model": [
                    "models.user.User",
                    "List[Dict[str, Any]]",
                    "core.models.Recipe",
                    "models.characters.ai_base.AI",
                    "str"
                ]
            }
        },
        "user_c": {
            "name": "user_c",
            "location": 28,
            "return": [
                "raiden.utils.List[raiden.raiden_service.RaidenService]",
                "Mapping[str, Any]",
                "core.models.Recipe"
            ],
            "arguments": {
                "django_user_model": [
                    "str",
                    "abilian.core.models.subjects.User",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "user_d": {
            "name": "user_d",
            "location": 35,
            "return": [
                "raiden.utils.List[raiden.raiden_service.RaidenService]",
                "Mapping[str, Any]",
                "core.models.Recipe",
                "str"
            ],
            "arguments": {
                "django_user_model": [
                    "str",
                    "List[Dict[str, Any]]",
                    "abilian.core.models.subjects.User"
                ]
            }
        },
        "user_e": {
            "name": "user_e",
            "location": 42,
            "return": [
                "Mapping[str, Any]",
                "core.models.Recipe",
                "str",
                "raiden.utils.List[raiden.raiden_service.RaidenService]"
            ],
            "arguments": {
                "django_user_model": [
                    "str",
                    "List[Dict[str, Any]]",
                    "abilian.core.models.subjects.User"
                ]
            }
        },
        "test_prepare_match": {
            "name": "test_prepare_match",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "foosball_game": []
            }
        },
        "test_is_team_full": {
            "name": "test_is_team_full",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "foosball_game": [
                    "int",
                    "bool",
                    "float",
                    "bytes"
                ],
                "user_a": [
                    "bool",
                    "str",
                    "int"
                ],
                "user_b": [
                    "int",
                    "raiden.utils.Address",
                    "Optional[int]",
                    "models.JournalEntryOrigin"
                ]
            }
        },
        "test_join_random_team": {
            "name": "test_join_random_team",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "foosball_game": [
                    "int",
                    "Sequence[float]",
                    "List[int]",
                    "float",
                    "bytes"
                ],
                "user_a": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.Address"
                ],
                "user_b": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.Address"
                ],
                "user_c": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.Address"
                ],
                "user_d": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.Address"
                ],
                "user_e": [
                    "bool",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "zapball-master/tests/__init__.py": {},
    "zapball-master/zapball/settings.py": {},
    "zapball-master/zapball/urls.py": {},
    "zapball-master/zapball/wsgi.py": {},
    "zapball-master/zapball/__init__.py": {}
}
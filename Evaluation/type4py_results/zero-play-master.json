{
    "zero-play-master/setup.py": {},
    "zero-play-master/tests/conftest.py": {
        "pixmap_differ": {
            "name": "pixmap_differ",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/tests/test_log_display.py": {
        "test_record_move": {
            "name": "test_record_move",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_analyse_move": {
            "name": "test_analyse_move",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_analyse_move_other_player": {
            "name": "test_analyse_move_other_player",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_analyse_move_both_players": {
            "name": "test_analyse_move_both_players",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_analyse_only_move": {
            "name": "test_analyse_only_move",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "dict",
                    "Optional[str]"
                ],
                "expected_comment": [
                    "str",
                    "float",
                    "dict",
                    "Optional[Exception]"
                ]
            }
        },
        "test_analyze_bad_move": {
            "name": "test_analyze_bad_move",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rewind": {
            "name": "test_rewind",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/tests/test_mcts_player.py": {
        "test_repr": {
            "name": "test_repr",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_board": {
            "name": "test_default_board",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_select_leaf_self": {
            "name": "test_select_leaf_self",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_select_first_child": {
            "name": "test_select_first_child",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_select_second_child": {
            "name": "test_select_second_child",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_select_grandchild": {
            "name": "test_select_grandchild",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_select_good_grandchild": {
            "name": "test_select_good_grandchild",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_select_no_children": {
            "name": "test_select_no_children",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_choose_move": {
            "name": "test_choose_move",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_choose_move_in_pool": {
            "name": "test_choose_move_in_pool",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_choose_moves_at_random": {
            "name": "test_choose_moves_at_random",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_choose_move_no_iterations": {
            "name": "test_choose_move_no_iterations",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_analyse_finished_game": {
            "name": "test_analyse_finished_game",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_manager_reuses_node": {
            "name": "test_search_manager_reuses_node",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_search_manager_with_opponent": {
            "name": "test_search_manager_with_opponent",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_annotate": {
            "name": "test_annotate",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_training_data": {
            "name": "test_create_training_data",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_win_scores_one": {
            "name": "test_win_scores_one",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_choose_move_sets_current_node": {
            "name": "test_choose_move_sets_current_node",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "FirstChoiceHeuristic.get_summary": {
            "name": "get_summary",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirstChoiceHeuristic.analyse": {
            "name": "analyse",
            "location": 19,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "Optional[bool]",
                    "Optional[int]",
                    "List[int]",
                    "str",
                    "django.db.migrations.state.StateApps"
                ]
            }
        },
        "FirstChoiceHeuristic.get_policy": {
            "name": "get_policy",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "zero_play.game_state.GameState",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "EarlyChoiceHeuristic.get_summary": {
            "name": "get_summary",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyChoiceHeuristic.get_policy": {
            "name": "get_policy",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "zero_play.game_state.GameState",
                    "Union[str, int]",
                    "str"
                ]
            }
        }
    },
    "zero-play-master/tests/test_pixmap_differ.py": {
        "create_blue_green_rect": {
            "name": "create_blue_green_rect",
            "location": 14,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "test_diff_found": {
            "name": "test_diff_found",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_encode_image": {
            "name": "test_encode_image",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_decode_image": {
            "name": "test_decode_image",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "zero-play-master/tests/test_playout.py": {
        "test_simulate_finished_game": {
            "name": "test_simulate_finished_game",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simulate_finished_game_for_o_player": {
            "name": "test_simulate_finished_game_for_o_player",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simulate_wins": {
            "name": "test_simulate_wins",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simulate_wins_and_losses": {
            "name": "test_simulate_wins_and_losses",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_two_moves_per_turn": {
            "name": "test_two_moves_per_turn",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_long_simulation": {
            "name": "test_long_simulation",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TakeOneTwiceGame.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ],
                "move_count": [
                    "int",
                    "List[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "TakeOneTwiceGame.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TakeOneTwiceGame.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "TakeOneTwiceGame.get_valid_moves": {
            "name": "get_valid_moves",
            "location": 31,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TakeOneTwiceGame.display": {
            "name": "display",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "show_coordinates": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "TakeOneTwiceGame.display_move": {
            "name": "display_move",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TakeOneTwiceGame.get_move_count": {
            "name": "get_move_count",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TakeOneTwiceGame.get_spaces": {
            "name": "get_spaces",
            "location": 44,
            "return": [
                "str",
                "Union[str, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TakeOneTwiceGame.parse_move": {
            "name": "parse_move",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TakeOneTwiceGame.make_move": {
            "name": "make_move",
            "location": 50,
            "return": [
                "str",
                "bool",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray",
                    "Dict[str, str]"
                ]
            }
        },
        "TakeOneTwiceGame.calculate_player": {
            "name": "calculate_player",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "move_count": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TakeOneTwiceGame.is_win": {
            "name": "is_win",
            "location": 58,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "TakeOneTwiceGame.get_active_player": {
            "name": "get_active_player",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/tests/test_play_controller.py": {
        "test_play_one_first_wins": {
            "name": "test_play_one_first_wins",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_play_one_second_wins": {
            "name": "test_play_one_second_wins",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_play_one_tie": {
            "name": "test_play_one_tie",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_play_two": {
            "name": "test_play_two",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_play_two_flip": {
            "name": "test_play_two_flip",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_display": {
            "name": "test_display",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "test_player_results": {
            "name": "test_player_results",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "FirstPlayerWinsGame.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board_height": [
                    "int",
                    "str",
                    "Callable[[int], None]"
                ],
                "board_width": [
                    "int",
                    "str",
                    "Callable[[int], None]"
                ],
                "spaces": [
                    "int",
                    "str",
                    "Callable[[int], None]"
                ]
            }
        },
        "FirstPlayerWinsGame.is_win": {
            "name": "is_win",
            "location": 18,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "str",
                    "Union[str, int, float]"
                ]
            }
        },
        "SecondPlayerWinsGame.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board_height": [
                    "int",
                    "str",
                    "Callable[[int], None]"
                ],
                "board_width": [
                    "int",
                    "str",
                    "Callable[[int], None]"
                ],
                "spaces": [
                    "int",
                    "str",
                    "Callable[[int], None]"
                ]
            }
        },
        "NoPlayerWinsGame.is_win": {
            "name": "is_win",
            "location": 41,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "str",
                    "Callable[[], T]",
                    "bool"
                ]
            }
        }
    },
    "zero-play-master/tests/test_rules_formatter.py": {
        "test_basic_markdown": {
            "name": "test_basic_markdown",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_title": {
            "name": "test_title",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/tests/test_scaled_label.py": {
        "test_text": {
            "name": "test_text",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_pixmap": {
            "name": "test_pixmap",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_pixmap_vertical": {
            "name": "test_pixmap_vertical",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        }
    },
    "zero-play-master/tests/test_scaled_radio_button.py": {
        "test_text": {
            "name": "test_text",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_icon": {
            "name": "test_icon",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        }
    },
    "zero-play-master/tests/test_strength_adjuster.py": {
        "test_first_loss": {
            "name": "test_first_loss",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_first_win": {
            "name": "test_first_win",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_second_game_win": {
            "name": "test_second_game_win",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_second_win_in_a_row": {
            "name": "test_second_win_in_a_row",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_third_win_in_a_row": {
            "name": "test_third_win_in_a_row",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/tests/__init__.py": {},
    "zero-play-master/tests/connect4/test_connect4_display.py": {
        "draw_grid": {
            "name": "draw_grid",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "float",
                    "bool",
                    "Union[str, bool, None]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "test_pieces": {
            "name": "test_pieces",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_clicked": {
            "name": "test_clicked",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        }
    },
    "zero-play-master/tests/connect4/test_connect4_game.py": {
        "test_create_board": {
            "name": "test_create_board",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_board_from_text": {
            "name": "test_create_board_from_text",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_board_with_coordinates": {
            "name": "test_create_board_with_coordinates",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_display": {
            "name": "test_display",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_display_coordinates": {
            "name": "test_display_coordinates",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_valid_moves": {
            "name": "test_get_valid_moves",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_move": {
            "name": "test_parse_move",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict"
                ],
                "expected_move": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "test_parse_move_fails": {
            "name": "test_parse_move_fails",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "expected_message": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "test_display_player_x": {
            "name": "test_display_player_x",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_display_player_o": {
            "name": "test_display_player_o",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_move": {
            "name": "test_make_move",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_move_o": {
            "name": "test_make_move_o",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_active_player_o": {
            "name": "test_get_active_player_o",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_active_player_x": {
            "name": "test_get_active_player_x",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_winner": {
            "name": "test_no_winner",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_horizontal_winner": {
            "name": "test_horizontal_winner",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_horizontal_end_winner": {
            "name": "test_horizontal_end_winner",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_longer_winner": {
            "name": "test_longer_winner",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vertical_winner": {
            "name": "test_vertical_winner",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diagonal1_winner": {
            "name": "test_diagonal1_winner",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diagonal2_winner": {
            "name": "test_diagonal2_winner",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diagonal2_bottom_winner": {
            "name": "test_diagonal2_bottom_winner",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diagonal2_left_winner": {
            "name": "test_diagonal2_left_winner",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_valid_moves_after_win": {
            "name": "test_valid_moves_after_win",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/tests/connect4/test_connect4_neural_net.py": {
        "test_end_game_value": {
            "name": "test_end_game_value",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train": {
            "name": "test_train",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/tests/othello/test_othello_display.py": {
        "test_piece_click_invalid": {
            "name": "test_piece_click_invalid",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_piece_click_valid": {
            "name": "test_piece_click_valid",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_piece_click_then_pass": {
            "name": "test_piece_click_then_pass",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_invalid_hover_enter": {
            "name": "test_invalid_hover_enter",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_piece_count": {
            "name": "test_piece_count",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_piece_count_after_update": {
            "name": "test_piece_count_after_update",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": []
            }
        }
    },
    "zero-play-master/tests/othello/test_othello_game.py": {
        "test_create_board": {
            "name": "test_create_board",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_board_from_text": {
            "name": "test_create_board_from_text",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_board_with_coordinates": {
            "name": "test_create_board_with_coordinates",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_display": {
            "name": "test_display",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_display_coordinates": {
            "name": "test_display_coordinates",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_valid_moves": {
            "name": "test_get_valid_moves",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_valid_moves_with_gap": {
            "name": "test_get_valid_moves_with_gap",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_no_valid_moves": {
            "name": "test_get_no_valid_moves",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_move": {
            "name": "test_parse_move",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict"
                ],
                "expected_move": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "test_display_move": {
            "name": "test_display_move",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "move": [
                    "str",
                    "int"
                ],
                "expected_text": [
                    "str"
                ]
            }
        },
        "test_parse_move_fails": {
            "name": "test_parse_move_fails",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "expected_message": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "test_make_move": {
            "name": "test_make_move",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_move_pass": {
            "name": "test_make_move_pass",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_move_o": {
            "name": "test_make_move_o",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_active_player_o": {
            "name": "test_get_active_player_o",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_active_player_x": {
            "name": "test_get_active_player_x",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_winner_not_ended": {
            "name": "test_no_winner_not_ended",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_winner_tie": {
            "name": "test_no_winner_tie",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_winner_x": {
            "name": "test_winner_x",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_winner_o": {
            "name": "test_winner_o",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_playout": {
            "name": "test_playout",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pass_is_not_win": {
            "name": "test_pass_is_not_win",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_moves_for_either": {
            "name": "test_no_moves_for_either",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_from_array": {
            "name": "test_create_from_array",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_training_data": {
            "name": "test_training_data",
            "location": 466,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/tests/tictactoe/test_tictactoe_display.py": {
        "draw_square_grid": {
            "name": "draw_square_grid",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "List[str]"
                ]
            }
        },
        "test_start_square": {
            "name": "test_start_square",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_start_wide": {
            "name": "test_start_wide",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_start_tall": {
            "name": "test_start_tall",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "set_font_size": {
            "name": "set_font_size",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "painter": [
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "size": [
                    "int",
                    "str",
                    "Callable[..., None]"
                ]
            }
        },
        "draw_text": {
            "name": "draw_text",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "str",
                    "bool",
                    "List[object]"
                ],
                "x": [
                    "int",
                    "float",
                    "str",
                    "bytes"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "bytes"
                ],
                "text": [
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "test_pieces": {
            "name": "test_pieces",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_piece_hover_enter": {
            "name": "test_piece_hover_enter",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_piece_hover_enter_mcts": {
            "name": "test_piece_hover_enter_mcts",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_piece_hover_leave": {
            "name": "test_piece_hover_leave",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_piece_hover_existing": {
            "name": "test_piece_hover_existing",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_piece_click": {
            "name": "test_piece_click",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_winner": {
            "name": "test_winner",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_draw": {
            "name": "test_draw",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        },
        "test_coordinates": {
            "name": "test_coordinates",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "pixmap_differ": [
                    "zero_play.pixmap_differ.PixmapDiffer"
                ]
            }
        }
    },
    "zero-play-master/tests/tictactoe/test_tictactoe_game.py": {
        "test_create_board": {
            "name": "test_create_board",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_board_from_text": {
            "name": "test_create_board_from_text",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_board_with_coordinates": {
            "name": "test_create_board_with_coordinates",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_display": {
            "name": "test_display",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_display_coordinates": {
            "name": "test_display_coordinates",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_valid_moves": {
            "name": "test_get_valid_moves",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_valid_moves_after_win": {
            "name": "test_get_valid_moves_after_win",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_move": {
            "name": "test_parse_move",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict"
                ],
                "expected_move": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "test_parse_move_fails": {
            "name": "test_parse_move_fails",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "expected_message": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "test_display_player_x": {
            "name": "test_display_player_x",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_display_player_o": {
            "name": "test_display_player_o",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_move": {
            "name": "test_make_move",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_move_o": {
            "name": "test_make_move_o",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_active_player_o": {
            "name": "test_get_active_player_o",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_active_player_x": {
            "name": "test_get_active_player_x",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_winner": {
            "name": "test_no_winner",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_horizontal_winner": {
            "name": "test_horizontal_winner",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vertical_winner": {
            "name": "test_vertical_winner",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diagonal_winner": {
            "name": "test_diagonal_winner",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_not_ended": {
            "name": "test_not_ended",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_winner_ended": {
            "name": "test_winner_ended",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_draw_ended": {
            "name": "test_draw_ended",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/zero_play/about_dialog.py": {
        "Ui_Dialog.setupUi": {
            "name": "setupUi",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "Dialog": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Ui_Dialog.retranslateUi": {
            "name": "retranslateUi",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "Dialog": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "zero-play-master/zero_play/diagram_writer.py": {
        "main": {
            "name": "main",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "DiagramWriter.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "display": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "width": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "height": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ]
            }
        },
        "DiagramWriter.draw": {
            "name": "draw",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "painter": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "DiagramWriter.create_painter": {
            "name": "create_painter",
            "location": 33,
            "return": [
                "typing.Iterator[PySide6.QtGui.QPainter]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiagramWriter.demo": {
            "name": "demo",
            "location": 43,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiagramWriter.write": {
            "name": "write",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "List[pathlib.Path]",
                    "path.Path"
                ]
            }
        },
        "TictactoeDiagram.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TictactoeDiagram.draw": {
            "name": "draw",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "painter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Connect4Diagram.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect4Diagram.draw": {
            "name": "draw",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "painter": [
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "zero-play-master/zero_play/game_display.py": {
        "center_text_item": {
            "name": "center_text_item",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "dict",
                    "List[List[str]]",
                    "Union[Dict, List]",
                    "Optional[List]",
                    "List[T]"
                ],
                "x": [
                    "float",
                    "list",
                    "int"
                ],
                "y": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "list"
                ]
            }
        },
        "GameDisplay.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_state": [
                    "zero_play.game_state.GameState",
                    "zero_play.game_state.GridGameState"
                ]
            }
        },
        "GameDisplay.show_coordinates": {
            "name": "show_coordinates",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Union[str]",
                    "T",
                    "Union[str, bytes]"
                ]
            }
        },
        "GameDisplay.mcts_players": {
            "name": "mcts_players",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "players": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GameDisplay.get_player": {
            "name": "get_player",
            "location": 71,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "player_number": [
                    "int",
                    "dict"
                ]
            }
        },
        "GameDisplay.update_board": {
            "name": "update_board",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "GameDisplay.resizeEvent": {
            "name": "resizeEvent",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "GameDisplay.credit_pairs": {
            "name": "credit_pairs",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameDisplay.choose_active_text": {
            "name": "choose_active_text",
            "location": 97,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameDisplay.make_move": {
            "name": "make_move",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "move": [
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "GameDisplay.get_forced_move": {
            "name": "get_forced_move",
            "location": 120,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameDisplay.analyse_move": {
            "name": "analyse_move",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "bool"
                ],
                "analysing_player": [
                    "bool"
                ],
                "move_probabilities": [
                    "bool"
                ]
            }
        },
        "GameDisplay.request_move": {
            "name": "request_move",
            "location": 141,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "Iterator[Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameDisplay.close": {
            "name": "close",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameDisplay.stop_workers": {
            "name": "stop_workers",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameDisplay.can_move": {
            "name": "can_move",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/game_state.py": {
        "GameState.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.game_name": {
            "name": "game_name",
            "location": 20,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "GameState.get_valid_moves": {
            "name": "get_valid_moves",
            "location": 28,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.is_ended": {
            "name": "is_ended",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.display": {
            "name": "display",
            "location": 44,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "show_coordinates": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "GameState.display_move": {
            "name": "display_move",
            "location": 54,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GameState.get_players": {
            "name": "get_players",
            "location": 62,
            "return": [
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.get_move_count": {
            "name": "get_move_count",
            "location": 66,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.get_spaces": {
            "name": "get_spaces",
            "location": 70,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.parse_move": {
            "name": "parse_move",
            "location": 77,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "GameState.display_player": {
            "name": "display_player",
            "location": 85,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GameState.get_active_player": {
            "name": "get_active_player",
            "location": 91,
            "return": [
                "Type[T]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.make_move": {
            "name": "make_move",
            "location": 105,
            "return": [
                "'GameState'"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GameState.get_winner": {
            "name": "get_winner",
            "location": 112,
            "return": [
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.is_win": {
            "name": "is_win",
            "location": 125,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "str",
                    "Callable[[], T]",
                    "bool"
                ]
            }
        },
        "GridGameState.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board_height": [
                    "int",
                    "float"
                ],
                "board_width": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "text": [
                    "str"
                ],
                "lines": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ],
                "spaces": [
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "Optional[Union[int, abc.Iterable]]",
                    "Optional[List[int]]",
                    "Optional[Tuple[float, float]]",
                    "Tuple[str, int]"
                ],
                "extra_count": [
                    "int",
                    "bool"
                ]
            }
        },
        "GridGameState.__repr__": {
            "name": "__repr__",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridGameState.__eq__": {
            "name": "__eq__",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool"
                ]
            }
        },
        "GridGameState.get_move_count": {
            "name": "get_move_count",
            "location": 172,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, Any]]",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridGameState.get_spaces": {
            "name": "get_spaces",
            "location": 175,
            "return": [
                "bool",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridGameState.get_valid_moves": {
            "name": "get_valid_moves",
            "location": 180,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridGameState.display": {
            "name": "display",
            "location": 185,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "show_coordinates": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "GridGameState.display_move": {
            "name": "display_move",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int",
                    "Tuple[int, int]",
                    "Tuple[int, int, int]",
                    "numpy.matrix",
                    "str",
                    "Dict[int, numpy.ndarray]"
                ]
            }
        },
        "GridGameState.parse_move": {
            "name": "parse_move",
            "location": 207,
            "return": [
                "int",
                "dict",
                "bool",
                "List[float]",
                "Dict[int, numpy.ndarray]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "GridGameState.make_move": {
            "name": "make_move",
            "location": 222,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "float",
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "int"
                ]
            }
        }
    },
    "zero-play-master/zero_play/grid_controls_ui.py": {
        "Ui_GridControls.setupUi": {
            "name": "setupUi",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "GridControls": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Ui_GridControls.retranslateUi": {
            "name": "retranslateUi",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "GridControls": [
                    "float",
                    "Optional[\"Outcome\"]",
                    "PyQt5.QtWidgets.QWidget"
                ]
            }
        }
    },
    "zero-play-master/zero_play/grid_display.py": {
        "GraphicsPieceItem.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "Optional[int]"
                ],
                "column": [
                    "int",
                    "Tuple[int, int]"
                ],
                "hover_listener": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "GraphicsPieceItem.hoverEnterEvent": {
            "name": "hoverEnterEvent",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PySide2.QtWidgets.QGraphicsSceneHoverEvent",
                    "List[dict]",
                    "Optional[Tuple]"
                ]
            }
        },
        "GraphicsPieceItem.hoverLeaveEvent": {
            "name": "hoverLeaveEvent",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PySide2.QtWidgets.QGraphicsSceneHoverEvent",
                    "List[dict]",
                    "Optional[Tuple]"
                ]
            }
        },
        "GraphicsPieceItem.mousePressEvent": {
            "name": "mousePressEvent",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PySide2.QtWidgets.QGraphicsSceneHoverEvent",
                    "List[dict]",
                    "Optional[Tuple]"
                ]
            }
        },
        "GridDisplay.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_state": [
                    "zero_play.game_state.GridGameState",
                    "zero_play.game_state.GameState",
                    "int"
                ]
            }
        },
        "GridDisplay.resizeEvent": {
            "name": "resizeEvent",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "PySide2.QtGui.QResizeEvent",
                    "PyQt5.QtGui.QKeyEvent"
                ]
            }
        },
        "GridDisplay.scene": {
            "name": "scene",
            "location": 134,
            "return": [
                "int",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridDisplay.create_icon": {
            "name": "create_icon",
            "location": 138,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "player_colour": [
                    "int",
                    "str",
                    "PyQt5.QtGui.QPixmap"
                ]
            }
        },
        "GridDisplay.update_board": {
            "name": "update_board",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "zero_play.game_state.GameState"
                ]
            }
        },
        "GridDisplay.get_player_brush": {
            "name": "get_player_brush",
            "location": 193,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "GridDisplay.get_player_icon": {
            "name": "get_player_icon",
            "location": 198,
            "return": [
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "str",
                    "Optional[bytes]",
                    "Dict[int, dict]"
                ]
            }
        },
        "GridDisplay.update_move_text": {
            "name": "update_move_text",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "GridDisplay.on_hover_enter": {
            "name": "on_hover_enter",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "piece_item": [
                    "Sequence['cirq.Qid']",
                    "str",
                    "float"
                ]
            }
        },
        "GridDisplay.on_hover_leave": {
            "name": "on_hover_leave",
            "location": 223,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "piece_item": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "GridDisplay.on_click": {
            "name": "on_click",
            "location": 230,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "piece_item": [
                    "str",
                    "int",
                    "BinaryIO"
                ]
            }
        },
        "GridDisplay.calculate_move": {
            "name": "calculate_move",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "str"
                ],
                "column": [
                    "int",
                    "str"
                ]
            }
        },
        "GridDisplay.is_piece_played": {
            "name": "is_piece_played",
            "location": 242,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "piece_item": [
                    "str"
                ]
            }
        },
        "GridDisplay.close": {
            "name": "close",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/heuristic.py": {
        "Heuristic.get_summary": {
            "name": "get_summary",
            "location": 11,
            "return": [
                "typing.Sequence[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heuristic.analyse": {
            "name": "analyse",
            "location": 15,
            "return": [
                "typing.Tuple[builtins.float, numpy.ndarray]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Heuristic.create_even_policy": {
            "name": "create_even_policy",
            "location": 26,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "board": [
                    "zero_play.game_state.GameState",
                    "int",
                    "Callable[[str], None]"
                ]
            }
        },
        "Heuristic.analyse_end_game": {
            "name": "analyse_end_game",
            "location": 39,
            "return": [
                "str",
                "bool",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "bytearray"
                ]
            }
        }
    },
    "zero-play-master/zero_play/log_display.py": {
        "LogItem.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogItem.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Match[str]"
                ]
            }
        },
        "LogDisplay.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LogDisplay.record_move": {
            "name": "record_move",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "zero_play.game_state.GameState"
                ],
                "move": [
                    "int",
                    "zero_play.game_state.GameState"
                ]
            }
        },
        "LogDisplay.analyse_move": {
            "name": "analyse_move",
            "location": 46,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "zero_play.game_state.GameState"
                ],
                "analysing_player": [
                    "list",
                    "Tuple[int, int]",
                    "List[int]",
                    "int"
                ],
                "move_probabilities": [
                    "list",
                    "Tuple[int, int]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "LogDisplay.rewind_to": {
            "name": "rewind_to",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "step": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "zero-play-master/zero_play/main_window.py": {
        "Ui_MainWindow.setupUi": {
            "name": "setupUi",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "MainWindow": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "Type[T]",
                    "Dict[str, Iterable[Any]]"
                ]
            }
        },
        "Ui_MainWindow.retranslateUi": {
            "name": "retranslateUi",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "MainWindow": [
                    "str",
                    "bool",
                    "TextIO",
                    "Callable",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "zero-play-master/zero_play/mcts_player.py": {
        "SearchNode.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes",
                    "List[bytes]",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "parent": [
                    "Dict[str, Union[str, Any]]",
                    "str",
                    "Tuple[List[str], Optional[Any]]"
                ],
                "move": [
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Tuple[str, str]"
                ]
            }
        },
        "SearchNode.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchNode.__eq__": {
            "name": "__eq__",
            "location": 43,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "numpy.ndarray",
                    "AbstractSet[T]"
                ]
            }
        },
        "SearchNode.select_leaf": {
            "name": "select_leaf",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchNode.find_all_children": {
            "name": "find_all_children",
            "location": 70,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchNode.record_value": {
            "name": "record_value",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str",
                    "List[str]",
                    "dict"
                ],
                "child_predictions": [
                    "Optional[str]",
                    "bool",
                    "Optional[IO[bytes]]",
                    "str"
                ]
            }
        },
        "SearchNode.evaluate": {
            "name": "evaluate",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "heuristic": [
                    "zero_play.heuristic.Heuristic",
                    "int",
                    "Tuple['cirq.Qid']",
                    "Set[str]"
                ]
            }
        },
        "SearchNode.choose_child": {
            "name": "choose_child",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "temperature": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SearchNode.rank_children": {
            "name": "rank_children",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "children": [
                    "numpy.ndarray",
                    "float"
                ],
                "temperature": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "SearchNode.find_best_children": {
            "name": "find_best_children",
            "location": 125,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchManager.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_state": [
                    "bool",
                    "List[int]",
                    "zero_play.game_state.GameState"
                ],
                "heuristic": [
                    "bool",
                    "List[str]",
                    "Sequence",
                    "str",
                    "Optional[str]"
                ],
                "process_count": [
                    "int"
                ]
            }
        },
        "SearchManager.reset": {
            "name": "reset",
            "location": 153,
            "return": [
                "float",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchManager.find_node": {
            "name": "find_node",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "zero_play.game_state.GameState",
                    "defaultdict"
                ]
            }
        },
        "SearchManager.search": {
            "name": "search",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "list",
                    "str"
                ],
                "iterations": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "SearchManager.check_tasks": {
            "name": "check_tasks",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Sequence[Union[str, int]]",
                    "Sequence[str]",
                    "bool",
                    "type",
                    "Callable",
                    "T"
                ],
                "return_when": [
                    "Sequence[Union[str, int]]",
                    "Sequence[str]",
                    "bool",
                    "type",
                    "Callable",
                    "T"
                ]
            }
        },
        "SearchManager.get_best_move": {
            "name": "get_best_move",
            "location": 201,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchManager.choose_weighted_move": {
            "name": "choose_weighted_move",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchManager.get_move_probabilities": {
            "name": "get_move_probabilities",
            "location": 213,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "numpy.ndarray",
                    "pygame.math.Vector2",
                    "zero_play.game_state.GameState"
                ],
                "limit": [
                    "int",
                    "creatures.players.Player",
                    "numpy.ndarray",
                    "bool",
                    "str"
                ]
            }
        },
        "SearchManager.create_training_data": {
            "name": "create_training_data",
            "location": 246,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "iterations": [
                    "zero_play.game_state.GameState",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ],
                "data_size": [
                    "int",
                    "bytes"
                ]
            }
        },
        "MctsPlayer.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_state": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "player_number": [
                    "int",
                    "str",
                    "bool"
                ],
                "iteration_count": [
                    "int",
                    "Dict[str, int]",
                    "List[int]",
                    "List[str]"
                ],
                "heuristic": [
                    "int",
                    "zero_play.game_state.GameState",
                    "Optional[float]"
                ],
                "process_count": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "MctsPlayer.heuristic": {
            "name": "heuristic",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Union[bytes, str]"
                ]
            }
        },
        "MctsPlayer.end_game": {
            "name": "end_game",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "numpy.ndarray",
                    "Player",
                    "List[str]",
                    "float",
                    "Optional[Any]",
                    "list",
                    "List[Tuple[str, str]]"
                ],
                "opponent": [
                    "numpy.ndarray",
                    "Player",
                    "List[str]",
                    "float",
                    "Optional[Any]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "MctsPlayer.choose_move": {
            "name": "choose_move",
            "location": 331,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "str"
                ]
            }
        },
        "MctsPlayer.get_move_probabilities": {
            "name": "get_move_probabilities",
            "location": 342,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Dict[str, Any]"
                ]
            }
        },
        "MctsPlayer.get_summary": {
            "name": "get_summary",
            "location": 353,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/mcts_worker.py": {
        "MctsWorker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "Callable",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "parent": [
                    "PySide2.QtCore.QObject",
                    "PyQt5.QtCore.QObject",
                    "PyQt5.QtWidgets.QWidget"
                ]
            }
        },
        "MctsWorker.choose_move": {
            "name": "choose_move",
            "location": 20,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "active_player": [
                    "bool",
                    "str",
                    "list"
                ],
                "game_state": [
                    "int"
                ]
            }
        },
        "MctsWorker.analyse_move": {
            "name": "analyse_move",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "zero_play.game_state.GameState"
                ]
            }
        }
    },
    "zero-play-master/zero_play/pixmap_differ.py": {
        "display_diff": {
            "name": "display_diff",
            "location": 15,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "actual_image": [
                    "int"
                ],
                "diff_image": [
                    "int"
                ],
                "expected_image": [
                    "int"
                ],
                "diff_count": [
                    "int",
                    "List[int]",
                    "float",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "encode_image": {
            "name": "encode_image",
            "location": 198,
            "return": [
                "str",
                "int",
                "bytearray",
                "bool",
                "bytes"
            ],
            "arguments": {
                "image": [
                    "PySide2.QtGui.QImage",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "decode_image": {
            "name": "decode_image",
            "location": 211,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "render_display": {
            "name": "render_display",
            "location": 218,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "display": [
                    "int",
                    "Tuple[int]",
                    "tuple",
                    "str",
                    "float"
                ],
                "painter": [
                    "int",
                    "Optional[Union[int, str]]",
                    "Optional[float]"
                ],
                "is_closed": [
                    "bool",
                    "dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "find_display_size": {
            "name": "find_display_size",
            "location": 262,
            "return": [
                "float",
                "int",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "display": [
                    "int"
                ],
                "view": [],
                "target_size": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "PixmapDiffer.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PixmapDiffer.create_painters": {
            "name": "create_painters",
            "location": 72,
            "return": [
                "typing.Iterator[typing.Tuple[PySide6.QtGui.QPainter, PySide6.QtGui.QPainter]]"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "bool",
                    "str"
                ],
                "height": [
                    "int",
                    "bool",
                    "str"
                ],
                "name": [
                    "int",
                    "bool",
                    "str"
                ],
                "max_diff": [
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "PixmapDiffer.start": {
            "name": "start",
            "location": 85,
            "return": [
                "str",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "str",
                    "Sequence"
                ],
                "height": [
                    "int",
                    "str",
                    "Sequence"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "PixmapDiffer.end": {
            "name": "end",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PixmapDiffer.assert_equal": {
            "name": "assert_equal",
            "location": 116,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PixmapDiffer.diff_colour": {
            "name": "diff_colour",
            "location": 166,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[int]",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": [],
                "actual_colour": [
                    "int"
                ],
                "expected_colour": [
                    "int"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "float",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        }
    },
    "zero-play-master/zero_play/player.py": {
        "get_player_argument": {
            "name": "get_player_argument",
            "location": 9,
            "return": [
                "str",
                "Tuple[str, List[str], List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "values": [
                    "Sequence",
                    "int",
                    "List[str]",
                    "str",
                    "float",
                    "bool"
                ],
                "player_number": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "player_number": [
                    "int",
                    "bool",
                    "float"
                ],
                "heuristic": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "Player.heuristic": {
            "name": "heuristic",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Player.choose_move": {
            "name": "choose_move",
            "location": 39,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "float",
                    "Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Player.end_game": {
            "name": "end_game",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "List[str]",
                    "float",
                    "Optional[Any]",
                    "list",
                    "List[Tuple[str, str]]"
                ],
                "opponent": [
                    "List[str]",
                    "float",
                    "Optional[Any]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Player.get_summary": {
            "name": "get_summary",
            "location": 55,
            "return": [
                "typing.Sequence[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/playout.py": {
        "Playout.get_summary": {
            "name": "get_summary",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Playout.analyse": {
            "name": "analyse",
            "location": 13,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "Playout.simulate": {
            "name": "simulate",
            "location": 18,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "start_state": [
                    "numpy.ndarray",
                    "int",
                    "List[int]",
                    "zero_play.game_state.GameState"
                ]
            }
        }
    },
    "zero-play-master/zero_play/play_controller.py": {
        "PlayerResults.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "player": [
                    "Optional[bool]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "PlayerResults.get_summary": {
            "name": "get_summary",
            "location": 15,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayController.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_state": [
                    "zero_play.game_state.GameState",
                    "zero_play.game_state.GridGameState"
                ],
                "players": [
                    "int"
                ]
            }
        },
        "PlayController.start_game": {
            "name": "start_game",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayController.take_turn": {
            "name": "take_turn",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayController.get_player_results": {
            "name": "get_player_results",
            "location": 62,
            "return": [
                "int",
                "bool",
                "Union[int, float, complex]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "PlayController.play": {
            "name": "play",
            "location": 68,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "games": [
                    "str",
                    "Player"
                ],
                "flip": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[Any]"
                ],
                "display": [
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "zero-play-master/zero_play/plot_canvas.py": {
        "PlotCanvas.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "List[int]",
                    "int",
                    "Optional[str]"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "dpi": [
                    "int"
                ]
            }
        },
        "PlotCanvas.requery": {
            "name": "requery",
            "location": 31,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "db_session": [
                    "int",
                    "Optional[int]",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ]
            }
        }
    },
    "zero-play-master/zero_play/plot_canvas_dummy.py": {
        "PlotCanvasDummy.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "PlotCanvasDummy.requery": {
            "name": "requery",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_session": [
                    "bytes",
                    "str",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "list",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "Iterable"
                ]
            }
        }
    },
    "zero-play-master/zero_play/plot_perf.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/zero_play/rules_formatter.py": {
        "convert_markdown": {
            "name": "convert_markdown",
            "location": 8,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "raw_markdown": [
                    "int",
                    "Iterable[T]"
                ]
            }
        }
    },
    "zero-play-master/zero_play/scaled_label.py": {
        "ScaledLabel.resizeEvent": {
            "name": "resizeEvent",
            "location": 7,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ScaledLabel.update_margins": {
            "name": "update_margins",
            "location": 44,
            "return": [
                "str",
                "Sequence[str]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/scaled_radio_button.py": {
        "ScaledRadioButton.resizeEvent": {
            "name": "resizeEvent",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "zero-play-master/zero_play/strength_adjuster.py": {
        "StrengthAdjuster.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "strength": [
                    "List[float]",
                    "int",
                    "str"
                ],
                "game_count": [
                    "List[str]",
                    "int",
                    "List[\"SqlFile\"]"
                ],
                "last_score": [
                    "List[float]",
                    "int",
                    "str"
                ],
                "streak_length": [
                    "List[float]",
                    "int",
                    "str"
                ]
            }
        },
        "StrengthAdjuster.record_score": {
            "name": "record_score",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "score": [
                    "List['cirq.Qid']",
                    "float"
                ]
            }
        }
    },
    "zero-play-master/zero_play/zero_perf.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 9,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/zero_play/zero_play.py": {
        "get_settings": {
            "name": "get_settings",
            "location": 70,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "game_state": [
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "get_database_url": {
            "name": "get_database_url",
            "location": 79,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "database_path": [
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "str",
                    "pathlib.Path",
                    "Optional[Union[str, pathlib.Path]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 553,
            "return": [
                "bool",
                "django.db.models.QuerySet",
                "Callable",
                "float",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "AboutDialog.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "credit_pairs": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "parent": [
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "ZeroPlayWindow.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.get_collection_name": {
            "name": "get_collection_name",
            "location": 144,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "datetime.timedelta"
            ],
            "arguments": {}
        },
        "ZeroPlayWindow.filter_games": {
            "name": "filter_games",
            "location": 148,
            "return": [
                "typing.Generator[pkg_resources.EntryPoint, None, None]"
            ],
            "arguments": {
                "entries": [
                    "bool",
                    "Exception",
                    "Optional[Callable]"
                ]
            }
        },
        "ZeroPlayWindow.db_session": {
            "name": "db_session",
            "location": 155,
            "return": [
                "Optional[str]",
                "Optional[dict]",
                "numpy.ndarray",
                "dict",
                "Optional[List[Any]]",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_about": {
            "name": "on_about",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.load_game_list": {
            "name": "load_game_list",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_layout": [
                    "Callable"
                ]
            }
        },
        "ZeroPlayWindow.on_toggle_review": {
            "name": "on_toggle_review",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_resume_here": {
            "name": "on_resume_here",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_move_history": {
            "name": "on_move_history",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item_index": [
                    "T",
                    "Iterable[T]",
                    "Callable"
                ]
            }
        },
        "ZeroPlayWindow.on_new_game": {
            "name": "on_new_game",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.show_game": {
            "name": "show_game",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "display": [
                    "int",
                    "List[str]",
                    "models.Name",
                    "float",
                    "str"
                ]
            }
        },
        "ZeroPlayWindow.on_player_changed": {
            "name": "on_player_changed",
            "location": 316,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "onboarding.models.OnboardingInfo",
                    "bool",
                    "int"
                ],
                "new_index": [
                    "int",
                    "numpy.ndarray",
                    "Dict[int, dict]",
                    "bool"
                ]
            }
        },
        "ZeroPlayWindow.load_heuristics": {
            "name": "load_heuristics",
            "location": 342,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "ZeroPlayWindow.on_cancel": {
            "name": "on_cancel",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_network1": {
            "name": "on_network1",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_start": {
            "name": "on_start",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_view_game": {
            "name": "on_view_game",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_view_coordinates": {
            "name": "on_view_coordinates",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_checked": [
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool",
                    "Callable[[recidiviz.persistence.database.session.Session], bool]"
                ]
            }
        },
        "ZeroPlayWindow.on_plot": {
            "name": "on_plot",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.requery_plot": {
            "name": "requery_plot",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_searches_changed": {
            "name": "on_searches_changed",
            "location": 423,
            "return": [
                "Union[tuple, list]",
                "app.models.move.Coordinate",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "search_count": [
                    "str",
                    "Optional[bool]",
                    "Iterable[int]",
                    "float"
                ]
            }
        },
        "ZeroPlayWindow.on_game_ended": {
            "name": "on_game_ended",
            "location": 433,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "dict",
                    "Union[Dict, str]",
                    "Dict[str, Union[int, bool]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ZeroPlayWindow.on_lock_changed": {
            "name": "on_lock_changed",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_checked": [
                    "Optional[str]",
                    "int",
                    "Optional[float]",
                    "bool",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "ZeroPlayWindow.on_rules": {
            "name": "on_rules",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "display": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ZeroPlayWindow.on_close_rules": {
            "name": "on_close_rules",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_new_db": {
            "name": "on_new_db",
            "location": 529,
            "return": [
                "app.models.Article",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroPlayWindow.on_open_db": {
            "name": "on_open_db",
            "location": 549,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/zero_play_images_rc.py": {
        "qInitResources": {
            "name": "qInitResources",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "qCleanupResources": {
            "name": "qCleanupResources",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/zero_play/zero_play_rcc.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/zero_play/zero_play_rules_rc.py": {
        "qInitResources": {
            "name": "qInitResources",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "qCleanupResources": {
            "name": "qCleanupResources",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/zero_play/__init__.py": {},
    "zero-play-master/zero_play/connect4/display.py": {
        "Connect4Display.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect4Display.calculate_move": {
            "name": "calculate_move",
            "location": 13,
            "return": [
                "int",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "column": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Connect4Display.on_click": {
            "name": "on_click",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "piece_item": [
                    "Optional[bool]",
                    "str",
                    "int"
                ]
            }
        },
        "Connect4Display.credit_pairs": {
            "name": "credit_pairs",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/connect4/game.py": {
        "Connect4State.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]"
                ],
                "board_height": [
                    "int",
                    "str",
                    "bool"
                ],
                "board_width": [
                    "str",
                    "int",
                    "bool"
                ],
                "spaces": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Connect4State.get_valid_moves": {
            "name": "get_valid_moves",
            "location": 23,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect4State.display": {
            "name": "display",
            "location": 29,
            "return": [
                "dict",
                "int",
                "str",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "show_coordinates": [
                    "str",
                    "int",
                    "bool",
                    "IO[str]",
                    "Callable",
                    "dict",
                    "Type"
                ]
            }
        },
        "Connect4State.parse_move": {
            "name": "parse_move",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "float"
                ]
            }
        },
        "Connect4State.make_move": {
            "name": "make_move",
            "location": 39,
            "return": [
                "Callable",
                "int",
                "bool",
                "Optional[List[int]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "List[str]",
                    "int",
                    "Optional[numpy.ndarray]",
                    "bool",
                    "set"
                ]
            }
        },
        "Connect4State.is_win": {
            "name": "is_win",
            "location": 47,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Connect4State.is_horizontal_win": {
            "name": "is_horizontal_win",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "player_pieces": [
                    "int",
                    "float"
                ],
                "win_count": [
                    "int",
                    "Iterable[Any]",
                    "Optional[float]"
                ]
            }
        }
    },
    "zero-play-master/zero_play/connect4/neural_net.py": {
        "NeuralNet.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_state": [
                    "zero_play.game_state.GameState",
                    "str"
                ]
            }
        },
        "NeuralNet.get_summary": {
            "name": "get_summary",
            "location": 70,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralNet.analyse": {
            "name": "analyse",
            "location": 73,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "numpy.ndarray",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "models.User",
                    "Dict[int, Any]"
                ]
            }
        },
        "NeuralNet.get_path": {
            "name": "get_path",
            "location": 88,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "Optional[str]",
                    "Optional['Directory']",
                    "list",
                    "Callable[[numpy.ndarray], numpy.ndarray]"
                ]
            }
        },
        "NeuralNet.save_checkpoint": {
            "name": "save_checkpoint",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "pathlib.Path",
                    "pypi2nix.path.Path",
                    "Union[pathlib.Path, str]"
                ],
                "filename": [
                    "str",
                    "dict",
                    "Path",
                    "pathlib.Path"
                ]
            }
        },
        "NeuralNet.load_checkpoint": {
            "name": "load_checkpoint",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "int"
                ],
                "filename": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "NeuralNet.train": {
            "name": "train",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "boards": [
                    "str",
                    "int",
                    "models.Profile"
                ],
                "outputs": [
                    "str",
                    "int",
                    "models.Profile"
                ],
                "log_dir": [
                    "Optional[pathlib.Path]",
                    "str",
                    "Path",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "zero-play-master/zero_play/connect4/__init__.py": {},
    "zero-play-master/zero_play/db/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/zero_play/db/versions/62b4dd973a0f_first_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zero-play-master/zero_play/models/game.py": {
        "GameRecord.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameRecord.find_or_create": {
            "name": "find_or_create",
            "location": 20,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "db_session": [
                    "sqlalchemy.orm.Session",
                    "Mapping"
                ],
                "game_state": [
                    "dict",
                    "int",
                    "sqlalchemy.orm.Session",
                    "str"
                ]
            }
        }
    },
    "zero-play-master/zero_play/models/match.py": {
        "MatchRecord.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/models/match_note.py": {
        "MatchNoteRecord.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/models/match_player.py": {
        "MatchPlayerRecord.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/models/player.py": {
        "PlayerRecord.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/models/__init__.py": {},
    "zero-play-master/zero_play/othello/display.py": {
        "OthelloDisplay.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board_height": [
                    "int"
                ],
                "board_width": [
                    "int"
                ]
            }
        },
        "OthelloDisplay.update_count_text": {
            "name": "update_count_text",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OthelloDisplay.update_board": {
            "name": "update_board",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "zero_play.game_state.GameState",
                    "Optional[Tuple[int, ...]]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "OthelloDisplay.get_forced_move": {
            "name": "get_forced_move",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OthelloDisplay.credit_pairs": {
            "name": "credit_pairs",
            "location": 36,
            "return": [
                "int",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/othello/game.py": {
        "OthelloState.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "board_height": [
                    "int",
                    "str"
                ],
                "board_width": [
                    "int",
                    "str"
                ],
                "spaces": [
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "OthelloState.get_valid_moves": {
            "name": "get_valid_moves",
            "location": 47,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OthelloState.find_moves": {
            "name": "find_moves",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spaces": [
                    "int",
                    "str",
                    "float"
                ],
                "player": [
                    "int",
                    "bool",
                    "List[Tuple[int, int]]",
                    "float"
                ]
            }
        },
        "OthelloState.find_moves_from_space": {
            "name": "find_moves_from_space",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spaces": [
                    "bool",
                    "int",
                    "List[int]",
                    "str",
                    "Optional[Callable]"
                ],
                "start_row": [
                    "Optional[int]",
                    "Union[int, Sequence[int]]",
                    "Optional['InstrumentBase']",
                    "List[int]",
                    "Callable[[], Iterable[float]]",
                    "Union[int, float]",
                    "int",
                    "List[str]"
                ],
                "start_column": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "player": [
                    "dict",
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "OthelloState.display": {
            "name": "display",
            "location": 92,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "show_coordinates": [
                    "list",
                    "str",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        },
        "OthelloState.display_move": {
            "name": "display_move",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int"
                ]
            }
        },
        "OthelloState.parse_move": {
            "name": "parse_move",
            "location": 102,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "OthelloState.make_move": {
            "name": "make_move",
            "location": 108,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "float",
                    "int",
                    "Optional[float]",
                    "List[str]"
                ]
            }
        },
        "OthelloState.get_active_player": {
            "name": "get_active_player",
            "location": 142,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OthelloState.is_ended": {
            "name": "is_ended",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OthelloState.get_winner": {
            "name": "get_winner",
            "location": 154,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OthelloState.get_piece_count": {
            "name": "get_piece_count",
            "location": 164,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "bool"
                ]
            }
        },
        "OthelloState.is_win": {
            "name": "is_win",
            "location": 167,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "str",
                    "Union[str, int, float]"
                ]
            }
        }
    },
    "zero-play-master/zero_play/othello/__init__.py": {},
    "zero-play-master/zero_play/tictactoe/display.py": {
        "TicTacToeDisplay.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TicTacToeDisplay.credit_pairs": {
            "name": "credit_pairs",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zero-play-master/zero_play/tictactoe/state.py": {
        "TicTacToeState.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "spaces": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "board_height": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "board_width": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "TicTacToeState.is_win": {
            "name": "is_win",
            "location": 19,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "zero-play-master/zero_play/tictactoe/__init__.py": {}
}
{
    "zlmdb-master/setup.py": {},
    "zlmdb-master/docs/conf.py": {
        "use_tx": {
            "name": "use_tx",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "use_aio": {
            "name": "use_aio",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zlmdb-master/docs/gen.py": {
        "print_tables": {
            "name": "print_tables",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "tables": [
                    "List[Type]",
                    "int",
                    "List[Dict[str, str]]",
                    "Optional[Union[str, Any]]"
                ],
                "prefix": [
                    "str",
                    "int",
                    "Union[None, int, str]"
                ],
                "inherit": [
                    "str",
                    "list",
                    "Callable"
                ]
            }
        }
    },
    "zlmdb-master/flatbuffers/builder.py": {
        "vtableEqual": {
            "name": "vtableEqual",
            "location": 756,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "dict",
                    "bool"
                ],
                "objectStart": [
                    "int",
                    "Tuple[int, int, int]",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "Builder.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "initialSize": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Builder.Output": {
            "name": "Output",
            "location": 138,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.StartObject": {
            "name": "StartObject",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "numfields": [
                    "BaseException"
                ]
            }
        },
        "Builder.WriteVtable": {
            "name": "WriteVtable",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.EndObject": {
            "name": "EndObject",
            "location": 267,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.growByteBuffer": {
            "name": "growByteBuffer",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.Head": {
            "name": "Head",
            "location": 288,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.Offset": {
            "name": "Offset",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.Pad": {
            "name": "Pad",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Builder.Prep": {
            "name": "Prep",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "additionalBytes": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "Builder.PrependSOffsetTRelative": {
            "name": "PrependSOffsetTRelative",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "off": [
                    "bool",
                    "dict",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Builder.PrependUOffsetTRelative": {
            "name": "PrependUOffsetTRelative",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "off": [
                    "float",
                    "tuple",
                    "str"
                ]
            }
        },
        "Builder.StartVector": {
            "name": "StartVector",
            "location": 363,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "elemSize": [
                    "int"
                ],
                "numElems": [
                    "int",
                    "float"
                ],
                "alignment": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "Builder.EndVector": {
            "name": "EndVector",
            "location": 380,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.CreateString": {
            "name": "CreateString",
            "location": 392,
            "return": [
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "ImportError"
                ],
                "encoding": [
                    "str",
                    "Optional[str]"
                ],
                "errors": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Builder.CreateByteVector": {
            "name": "CreateByteVector",
            "location": 419,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "AbstractSet[\"OntologyNode\"]"
                ]
            }
        },
        "Builder.CreateNumpyVector": {
            "name": "CreateNumpyVector",
            "location": 441,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Union[int, float]",
                    "Tuple[int, int]"
                ]
            }
        },
        "Builder.assertNested": {
            "name": "assertNested",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.assertNotNested": {
            "name": "assertNotNested",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.assertStructIsInline": {
            "name": "assertStructIsInline",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Builder.Slot": {
            "name": "Slot",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slotnum": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Builder.__Finish": {
            "name": "__Finish",
            "location": 518,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rootTable": [
                    "bool"
                ],
                "sizePrefix": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "list",
                    "Sequence[str]"
                ],
                "file_identifier": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "Builder.Finish": {
            "name": "Finish",
            "location": 548,
            "return": [
                "bool",
                "List[Dict]",
                "TextIO"
            ],
            "arguments": {
                "self": [],
                "rootTable": [
                    "str",
                    "int",
                    "Dict[Tuple[Any, str], int]"
                ],
                "file_identifier": [
                    "str",
                    "int",
                    "Dict[Tuple[Any, str], int]"
                ]
            }
        },
        "Builder.FinishSizePrefixed": {
            "name": "FinishSizePrefixed",
            "location": 552,
            "return": [],
            "arguments": {
                "self": [],
                "rootTable": [
                    "int",
                    "Optional[bool]",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "file_identifier": [
                    "int",
                    "Optional[bool]",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Builder.Prepend": {
            "name": "Prepend",
            "location": 560,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "str",
                    "Dict[str, str]",
                    "Mapping",
                    "MutableMapping"
                ],
                "off": [
                    "Type[object]",
                    "str"
                ]
            }
        },
        "Builder.PrependSlot": {
            "name": "PrependSlot",
            "location": 564,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "int"
                ],
                "o": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "x": [
                    "int",
                    "str",
                    "bytes"
                ],
                "d": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "Builder.PrependBoolSlot": {
            "name": "PrependBoolSlot",
            "location": 571,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependByteSlot": {
            "name": "PrependByteSlot",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependUint8Slot": {
            "name": "PrependUint8Slot",
            "location": 575,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependUint16Slot": {
            "name": "PrependUint16Slot",
            "location": 577,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependUint32Slot": {
            "name": "PrependUint32Slot",
            "location": 579,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependUint64Slot": {
            "name": "PrependUint64Slot",
            "location": 581,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependInt8Slot": {
            "name": "PrependInt8Slot",
            "location": 583,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependInt16Slot": {
            "name": "PrependInt16Slot",
            "location": 585,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependInt32Slot": {
            "name": "PrependInt32Slot",
            "location": 587,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependInt64Slot": {
            "name": "PrependInt64Slot",
            "location": 589,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependFloat32Slot": {
            "name": "PrependFloat32Slot",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependFloat64Slot": {
            "name": "PrependFloat64Slot",
            "location": 594,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.PrependUOffsetTRelativeSlot": {
            "name": "PrependUOffsetTRelativeSlot",
            "location": 597,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int"
                ],
                "x": [
                    "str",
                    "List[str]"
                ],
                "d": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Builder.PrependStructSlot": {
            "name": "PrependStructSlot",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "float",
                    "Sequence[float]",
                    "int",
                    "str",
                    "tuple"
                ],
                "x": [
                    "Dict[str, str]",
                    "List[float]"
                ],
                "d": [
                    "float",
                    "int"
                ]
            }
        },
        "Builder.PrependBool": {
            "name": "PrependBool",
            "location": 622,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "Builder.PrependByte": {
            "name": "PrependByte",
            "location": 629,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "dict"
                ]
            }
        },
        "Builder.PrependUint8": {
            "name": "PrependUint8",
            "location": 636,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.PrependUint16": {
            "name": "PrependUint16",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.PrependUint32": {
            "name": "PrependUint32",
            "location": 650,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.PrependUint64": {
            "name": "PrependUint64",
            "location": 657,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.PrependInt8": {
            "name": "PrependInt8",
            "location": 664,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.PrependInt16": {
            "name": "PrependInt16",
            "location": 671,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.PrependInt32": {
            "name": "PrependInt32",
            "location": 678,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.PrependInt64": {
            "name": "PrependInt64",
            "location": 685,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.PrependFloat32": {
            "name": "PrependFloat32",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.PrependFloat64": {
            "name": "PrependFloat64",
            "location": 699,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Builder.ForceDefaults": {
            "name": "ForceDefaults",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "forceDefaults": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "Builder.PrependVOffsetT": {
            "name": "PrependVOffsetT",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "Builder.Place": {
            "name": "Place",
            "location": 720,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "dict",
                    "Tuple[str, int]",
                    "float"
                ],
                "flags": [
                    "List[int]"
                ]
            }
        },
        "Builder.PlaceVOffsetT": {
            "name": "PlaceVOffsetT",
            "location": 730,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bytes",
                    "int",
                    "Union[float, str]"
                ]
            }
        },
        "Builder.PlaceSOffsetT": {
            "name": "PlaceSOffsetT",
            "location": 738,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Tuple[int, int, int]",
                    "Tuple[str, int]"
                ]
            }
        },
        "Builder.PlaceUOffsetT": {
            "name": "PlaceUOffsetT",
            "location": 746,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        }
    },
    "zlmdb-master/flatbuffers/compat.py": {
        "import_numpy": {
            "name": "import_numpy",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "zlmdb-master/flatbuffers/encode.py": {
        "Get": {
            "name": "Get",
            "location": 24,
            "return": [
                "str",
                "Optional[Type[BaseException]]",
                "Type[BaseException]"
            ],
            "arguments": {
                "packer_type": [
                    "str"
                ],
                "buf": [
                    "str"
                ],
                "head": [
                    "str"
                ]
            }
        },
        "GetVectorAsNumpy": {
            "name": "GetVectorAsNumpy",
            "location": 29,
            "return": [
                "Type[Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "numpy_type": [
                    "str",
                    "int",
                    "FrozenSet[Any]"
                ],
                "buf": [
                    "str",
                    "int",
                    "FrozenSet[Any]"
                ],
                "count": [
                    "str",
                    "int",
                    "FrozenSet[Any]"
                ],
                "offset": [
                    "str",
                    "int",
                    "FrozenSet[Any]"
                ]
            }
        },
        "Write": {
            "name": "Write",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "packer_type": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "buf": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "head": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "n": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "zlmdb-master/flatbuffers/flexbuffers.py": {
        "_Unpack": {
            "name": "_Unpack",
            "location": 97,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "fmt": [
                    "bytes",
                    "List[Tuple[int, int]]",
                    "int",
                    "Dict[int, bool]",
                    "str",
                    "Tuple[bool]",
                    "List[str]",
                    "List[int]"
                ],
                "buf": [
                    "bytes",
                    "List[Tuple[int, int]]",
                    "int",
                    "Dict[int, bool]",
                    "str",
                    "Tuple[bool]",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "_UnpackVector": {
            "name": "_UnpackVector",
            "location": 101,
            "return": [
                "numpy.array",
                "Iterable[str]",
                "str",
                "int"
            ],
            "arguments": {
                "fmt": [
                    "List[int]",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "buf": [
                    "int",
                    "list",
                    "List[str]",
                    "dict",
                    "bytes",
                    "List[Dict]"
                ],
                "length": [
                    "int",
                    "list",
                    "List[str]",
                    "dict",
                    "bytes",
                    "List[Dict]"
                ]
            }
        },
        "_Pack": {
            "name": "_Pack",
            "location": 106,
            "return": [
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "fmt": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "value": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "byte_width": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "_PackVector": {
            "name": "_PackVector",
            "location": 110,
            "return": [
                "int",
                "Tuple[float, float, float]",
                "str"
            ],
            "arguments": {
                "fmt": [
                    "int",
                    "Tuple[str, str]",
                    "List[str]",
                    "Optional[Sequence[str]]"
                ],
                "values": [
                    "int",
                    "Tuple[str, str]",
                    "List[str]",
                    "Optional[Sequence[str]]"
                ],
                "byte_width": [
                    "int",
                    "Tuple[str, str]",
                    "List[str]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "_Mutate": {
            "name": "_Mutate",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "fmt": [
                    "int"
                ],
                "buf": [
                    "int"
                ],
                "value": [
                    "int"
                ],
                "byte_width": [
                    "int",
                    "Sequence[int]"
                ],
                "value_bit_width": [
                    "int",
                    "Union[int, float]",
                    "Optional[int]"
                ]
            }
        },
        "_PaddingBytes": {
            "name": "_PaddingBytes",
            "location": 124,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "buf_size": [
                    "int",
                    "Iterable[int]",
                    "bool"
                ],
                "scalar_size": [
                    "int",
                    "Iterable[int]",
                    "bool"
                ]
            }
        },
        "_ShiftSlice": {
            "name": "_ShiftSlice",
            "location": 129,
            "return": [
                "str",
                "\"Pipeline\""
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Hashable",
                    "Union[List, Tuple]",
                    "Union[str, int, float]",
                    "Optional[AnyStr]",
                    "int"
                ],
                "offset": [
                    "Optional[str]",
                    "Optional[int]",
                    "Union[List, Tuple]",
                    "Optional[AnyStr]",
                    "str",
                    "Hashable",
                    "Union[str, int, float]",
                    "int"
                ],
                "length": [
                    "Optional[str]",
                    "Optional[AnyStr]",
                    "str",
                    "Set[int]",
                    "Optional[int]",
                    "Set[Tuple[int, Any, Any]]",
                    "Union[List, Tuple]"
                ]
            }
        },
        "_LowerBound": {
            "name": "_LowerBound",
            "location": 136,
            "return": [
                "int",
                "str",
                "Sequence[float]",
                "List[int]"
            ],
            "arguments": {
                "values": [
                    "bool",
                    "Optional[int]",
                    "Optional[Union[int, Any]]",
                    "int",
                    "Set[str]",
                    "List[str]",
                    "List[int]",
                    "bytes",
                    "bytearray"
                ],
                "value": [
                    "str",
                    "float",
                    "bool"
                ],
                "pred": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "_BinarySearch": {
            "name": "_BinarySearch",
            "location": 154,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "values": [
                    "float",
                    "List[str]",
                    "Iterable[Any]",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "float",
                    "List[str]",
                    "Iterable[Any]",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "pred": [
                    "float",
                    "List[str]",
                    "Iterable[Any]",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_IsIterable": {
            "name": "_IsIterable",
            "location": 839,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "InMap": {
            "name": "InMap",
            "location": 924,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "Dict[str, str]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "InMapForString": {
            "name": "InMapForString",
            "location": 934,
            "return": [
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "int",
                    "Union[Set[str], List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "GetRoot": {
            "name": "GetRoot",
            "location": 1509,
            "return": [
                "bool",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "buf": [
                    "bytes",
                    "list"
                ]
            }
        },
        "Dumps": {
            "name": "Dumps",
            "location": 1518,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "Loads": {
            "name": "Loads",
            "location": 1525,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "buf": [
                    "Union[str, IO]"
                ]
            }
        },
        "BitWidth.U": {
            "name": "U",
            "location": 45,
            "return": [
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "BitWidth.I": {
            "name": "I",
            "location": 61,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "List[str]",
                "numpy.array"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "BitWidth.F": {
            "name": "F",
            "location": 76,
            "return": [
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "BitWidth.B": {
            "name": "B",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "byte_width": [
                    "int",
                    "str"
                ]
            }
        },
        "Type.Pack": {
            "name": "Pack",
            "location": 204,
            "return": [
                "str",
                "Callable[..., T]",
                "Type[Any]",
                "ClassVar"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Tuple[type]"
                ],
                "bit_width": [
                    "str",
                    "Tuple[type]"
                ]
            }
        },
        "Type.Unpack": {
            "name": "Unpack",
            "location": 208,
            "return": [
                "bool",
                "Type"
            ],
            "arguments": {
                "packed_type": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Type.IsInline": {
            "name": "IsInline",
            "location": 212,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "type_": [
                    "Union[str, List]",
                    "str",
                    "Tuple[Type]",
                    "Collection",
                    "Callable"
                ]
            }
        },
        "Type.IsTypedVector": {
            "name": "IsTypedVector",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": []
            }
        },
        "Type.IsTypedVectorElementType": {
            "name": "IsTypedVectorElementType",
            "location": 221,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "Type.ToTypedVectorElementType": {
            "name": "ToTypedVectorElementType",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "Type[Any]"
                ]
            }
        },
        "Type.IsFixedTypedVector": {
            "name": "IsFixedTypedVector",
            "location": 232,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "type_": [
                    "str"
                ]
            }
        },
        "Type.IsFixedTypedVectorElementType": {
            "name": "IsFixedTypedVectorElementType",
            "location": 236,
            "return": [],
            "arguments": {
                "type_": [
                    "str",
                    "Type",
                    "Tuple[str]"
                ]
            }
        },
        "Type.ToFixedTypedVectorElementType": {
            "name": "ToFixedTypedVectorElementType",
            "location": 240,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "Type.ToTypedVector": {
            "name": "ToTypedVector",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "element_type": [
                    "Type"
                ],
                "fixed_len": [
                    "str"
                ]
            }
        },
        "Buf.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "int"
                ],
                "offset": [
                    "int",
                    "bytearray",
                    "Dict[str, Any]",
                    "List[float]",
                    "str"
                ]
            }
        },
        "Buf.__getitem__": {
            "name": "__getitem__",
            "location": 288,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[Optional[Any]]",
                    "slice"
                ]
            }
        },
        "Buf.__setitem__": {
            "name": "__setitem__",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "dict",
                    "bytes",
                    "float"
                ],
                "value": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, str]",
                    "Hashable"
                ]
            }
        },
        "Buf.__repr__": {
            "name": "__repr__",
            "location": 304,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Buf.Find": {
            "name": "Find",
            "location": 307,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "sub": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "Buf.Slice": {
            "name": "Slice",
            "location": 311,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "Buf.Indirect": {
            "name": "Indirect",
            "location": 315,
            "return": [
                "bytearray",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ],
                "byte_width": [
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "int",
                    "Union[str, float]",
                    "Dict[str, Any]"
                ],
                "byte_width": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "Object.ByteWidth": {
            "name": "ByteWidth",
            "location": 329,
            "return": [
                "bool",
                "str",
                "Union[str, int]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sized.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "int",
                    "Optional[int]",
                    "Callable"
                ],
                "byte_width": [
                    "int",
                    "Optional[int]",
                    "Callable"
                ],
                "size": [
                    "int",
                    "Union[str, float]",
                    "str"
                ]
            }
        },
        "Sized.SizeBytes": {
            "name": "SizeBytes",
            "location": 345,
            "return": [
                "float",
                "bool",
                "type",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sized.__len__": {
            "name": "__len__",
            "location": 348,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.Bytes": {
            "name": "Bytes",
            "location": 357,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.__repr__": {
            "name": "__repr__",
            "location": 360,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.Bytes": {
            "name": "Bytes",
            "location": 369,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.Mutate": {
            "name": "Mutate",
            "location": 372,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "SupportsBytes",
                    "Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "String.__str__": {
            "name": "__str__",
            "location": 392,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.__repr__": {
            "name": "__repr__",
            "location": 395,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.__init__": {
            "name": "__init__",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "byte_width": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Key.Bytes": {
            "name": "Bytes",
            "location": 408,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.__len__": {
            "name": "__len__",
            "location": 411,
            "return": [
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.__str__": {
            "name": "__str__",
            "location": 414,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.__repr__": {
            "name": "__repr__",
            "location": 417,
            "return": [
                "str",
                "Callable[[Dict], Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.__getitem__": {
            "name": "__getitem__",
            "location": 425,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[T]",
                    "Callable[[], float]",
                    "list",
                    "str",
                    "bool"
                ]
            }
        },
        "Vector.Value": {
            "name": "Value",
            "location": 435,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.__repr__": {
            "name": "__repr__",
            "location": 439,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedVector.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "byte_width": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "element_type": [
                    "str",
                    "int",
                    "Sequence[Tuple[float, Any]]",
                    "Callable"
                ],
                "size": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "TypedVector.Bytes": {
            "name": "Bytes",
            "location": 463,
            "return": [
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedVector.ElementType": {
            "name": "ElementType",
            "location": 467,
            "return": [
                "int",
                "Tuple[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedVector.__getitem__": {
            "name": "__getitem__",
            "location": 470,
            "return": [
                "bool",
                "list",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bytes",
                    "Sequence[T]",
                    "Callable[[], float]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "TypedVector.Value": {
            "name": "Value",
            "location": 479,
            "return": [
                "str",
                "dict",
                "list",
                "List[str]",
                "Union[int, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypedVector.__repr__": {
            "name": "__repr__",
            "location": 499,
            "return": [
                "str",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.CompareKeys": {
            "name": "CompareKeys",
            "location": 508,
            "return": [
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "b": [
                    "dict",
                    "bytes",
                    "Callable[[str], int]",
                    "Tuple[int, int, bytearray]"
                ]
            }
        },
        "Map.__getitem__": {
            "name": "__getitem__",
            "location": 515,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "Map.Keys": {
            "name": "Keys",
            "location": 526,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.Values": {
            "name": "Values",
            "location": 532,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.Value": {
            "name": "Value",
            "location": 536,
            "return": [
                "Set[str]",
                "dict",
                "Dict[int, Dict[int, Any]]",
                "Type[T]",
                "Callable",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.__repr__": {
            "name": "__repr__",
            "location": 539,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.PackedType": {
            "name": "PackedType",
            "location": 548,
            "return": [
                "bool",
                "str",
                "Type",
                "Set[Type]"
            ],
            "arguments": {
                "buf": [
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "parent_width": [
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "packed_type": [
                    "bool",
                    "str",
                    "int",
                    "Union[str, float]"
                ]
            }
        },
        "Ref.__init__": {
            "name": "__init__",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Optional[bool]"
                ],
                "parent_width": [
                    "int",
                    "float",
                    "str"
                ],
                "byte_width": [
                    "int",
                    "bool",
                    "float"
                ],
                "type_": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "Ref.__repr__": {
            "name": "__repr__",
            "location": 558,
            "return": [
                "int",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref._Bytes": {
            "name": "_Bytes",
            "location": 563,
            "return": [
                "bool",
                "Optional[BaseException]",
                "str",
                "Callable[..., Awaitable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref._ConvertError": {
            "name": "_ConvertError",
            "location": 566,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_type": [
                    "str",
                    "List[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "Ref._Indirect": {
            "name": "_Indirect",
            "location": 569,
            "return": [
                "str",
                "List[List[str]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.IsNull": {
            "name": "IsNull",
            "location": 573,
            "return": [
                "bool",
                "Type",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.IsBool": {
            "name": "IsBool",
            "location": 577,
            "return": [
                "Type",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsBool": {
            "name": "AsBool",
            "location": 581,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.MutateBool": {
            "name": "MutateBool",
            "location": 587,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "bytes",
                    "List[str]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Ref.IsNumeric": {
            "name": "IsNumeric",
            "location": 600,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.IsInt": {
            "name": "IsInt",
            "location": 604,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsInt": {
            "name": "AsInt",
            "location": 609,
            "return": [
                "bool",
                "Dict[str, str]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.MutateInt": {
            "name": "MutateInt",
            "location": 638,
            "return": [
                "str",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "Sequence[Any]",
                    "T"
                ]
            }
        },
        "Ref.IsFloat": {
            "name": "IsFloat",
            "location": 662,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsFloat": {
            "name": "AsFloat",
            "location": 666,
            "return": [
                "int",
                "dict",
                "Mapping[Any, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.MutateFloat": {
            "name": "MutateFloat",
            "location": 689,
            "return": [
                "int",
                "List[int]",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "Ref.IsKey": {
            "name": "IsKey",
            "location": 709,
            "return": [
                "str",
                "IO",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsKeyBytes": {
            "name": "AsKeyBytes",
            "location": 713,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List[int]",
                "Mapping[int, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsKey": {
            "name": "AsKey",
            "location": 720,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.IsString": {
            "name": "IsString",
            "location": 727,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsString": {
            "name": "AsString",
            "location": 731,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.MutateString": {
            "name": "MutateString",
            "location": 739,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "List[int]",
                    "Optional[int]"
                ]
            }
        },
        "Ref.IsBlob": {
            "name": "IsBlob",
            "location": 743,
            "return": [
                "bool",
                "Type",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsBlob": {
            "name": "AsBlob",
            "location": 747,
            "return": [
                "Dict[str, int]",
                "int",
                "Generator",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.IsAnyVector": {
            "name": "IsAnyVector",
            "location": 754,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.IsVector": {
            "name": "IsVector",
            "location": 758,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsVector": {
            "name": "AsVector",
            "location": 762,
            "return": [
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.IsTypedVector": {
            "name": "IsTypedVector",
            "location": 769,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsTypedVector": {
            "name": "AsTypedVector",
            "location": 773,
            "return": [
                "str",
                "tuple",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.IsFixedTypedVector": {
            "name": "IsFixedTypedVector",
            "location": 781,
            "return": [
                "Type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsFixedTypedVector": {
            "name": "AsFixedTypedVector",
            "location": 785,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.IsMap": {
            "name": "IsMap",
            "location": 793,
            "return": [
                "bool",
                "Type",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.AsMap": {
            "name": "AsMap",
            "location": 797,
            "return": [
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ref.Value": {
            "name": "Value",
            "location": 804,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.Null": {
            "name": "Null",
            "location": 851,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "Value.Bool": {
            "name": "Bool",
            "location": 855,
            "return": [
                "int",
                "bool",
                "bytes",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Sequence",
                    "Dict[str, Any]"
                ]
            }
        },
        "Value.Int": {
            "name": "Int",
            "location": 859,
            "return": [
                "int",
                "str",
                "bytes",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "Callable[[str], float]",
                    "float"
                ],
                "bit_width": [
                    "Callable[[str], float]",
                    "float"
                ]
            }
        },
        "Value.UInt": {
            "name": "UInt",
            "location": 863,
            "return": [
                "int",
                "str",
                "bytes",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "Optional[List[str]]",
                    "Mapping",
                    "Optional[Tuple[str, str]]",
                    "str"
                ],
                "bit_width": [
                    "bool",
                    "Optional[List[str]]",
                    "Mapping",
                    "Optional[Tuple[str, str]]",
                    "str"
                ]
            }
        },
        "Value.Float": {
            "name": "Float",
            "location": 867,
            "return": [
                "int",
                "str",
                "bytes",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "bool",
                    "str",
                    "Optional[float]",
                    "list",
                    "List[Tuple]",
                    "Type"
                ],
                "bit_width": [
                    "float",
                    "bool",
                    "str",
                    "Optional[float]",
                    "list",
                    "List[Tuple]",
                    "Type"
                ]
            }
        },
        "Value.Key": {
            "name": "Key",
            "location": 871,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Any]",
                "bytes",
                "Pattern[bytes]"
            ],
            "arguments": {
                "offset": [
                    "int",
                    "bool",
                    "List[Tuple[int, float, float]]"
                ]
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 874,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "T",
                    "bytes"
                ],
                "type_": [
                    "int",
                    "float",
                    "Callable",
                    "str"
                ],
                "min_bit_width": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "Value.Value": {
            "name": "Value",
            "location": 882,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.Type": {
            "name": "Type",
            "location": 886,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Value.MinBitWidth": {
            "name": "MinBitWidth",
            "location": 890,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.StoredPackedType": {
            "name": "StoredPackedType",
            "location": 893,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent_bit_width": [
                    "bool",
                    "Optional[Callable[..., Any]]"
                ]
            }
        },
        "Value.ElemWidth": {
            "name": "ElemWidth",
            "location": 901,
            "return": [
                "int",
                "float",
                "List[int]",
                "bool",
                "Union[complex, float, int]"
            ],
            "arguments": {
                "self": [],
                "buf_size": [
                    "int",
                    "bool"
                ],
                "elem_index": [
                    "int",
                    "bool"
                ]
            }
        },
        "Value.StoredWidth": {
            "name": "StoredWidth",
            "location": 912,
            "return": [
                "bool",
                "float",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "parent_bit_width": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Value.__repr__": {
            "name": "__repr__",
            "location": 917,
            "return": [
                "bool",
                "int",
                "type",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.__str__": {
            "name": "__str__",
            "location": 920,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMap.wrapper": {
            "name": "wrapper",
            "location": 925,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InMapForString.wrapper": {
            "name": "wrapper",
            "location": 935,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "Optional[Sequence]",
                    "int",
                    "bool",
                    "Hashable"
                ]
            }
        },
        "Pool.__init__": {
            "name": "__init__",
            "location": 949,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.FindOrInsert": {
            "name": "FindOrInsert",
            "location": 952,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "str",
                    "int"
                ],
                "offset": [
                    "int",
                    "bytes",
                    "Union[List[str], str]"
                ]
            }
        },
        "Pool.Clear": {
            "name": "Clear",
            "location": 961,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.Elements": {
            "name": "Elements",
            "location": 965,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.__init__": {
            "name": "__init__",
            "location": 972,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "share_strings": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "share_keys": [
                    "int",
                    "dict",
                    "bool",
                    "Tuple[str, str, str]"
                ],
                "force_min_bit_width": [
                    "int",
                    "Tuple[int, int]",
                    "Union[int, float]",
                    "Optional[int]"
                ]
            }
        },
        "Builder.__len__": {
            "name": "__len__",
            "location": 987,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.StringPool": {
            "name": "StringPool",
            "location": 991,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.KeyPool": {
            "name": "KeyPool",
            "location": 995,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.Clear": {
            "name": "Clear",
            "location": 998,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.Finish": {
            "name": "Finish",
            "location": 1005,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._ReadKey": {
            "name": "_ReadKey",
            "location": 1026,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "int"
                ]
            }
        },
        "Builder._Align": {
            "name": "_Align",
            "location": 1030,
            "return": [
                "float",
                "type",
                "Callable",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "alignment": [
                    "int",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "Builder._Write": {
            "name": "_Write",
            "location": 1035,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "Callable",
                    "Sequence[str]",
                    "Tuple[bytes, bytes]"
                ],
                "value": [
                    "str",
                    "Callable",
                    "Sequence[str]",
                    "Tuple[bytes, bytes]"
                ],
                "byte_width": [
                    "str",
                    "Callable",
                    "Sequence[str]",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "Builder._WriteVector": {
            "name": "_WriteVector",
            "location": 1038,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "int",
                    "Union[str, dict]"
                ],
                "values": [
                    "str",
                    "int",
                    "Union[str, dict]"
                ],
                "byte_width": [
                    "str",
                    "int",
                    "Union[str, dict]"
                ]
            }
        },
        "Builder._WriteOffset": {
            "name": "_WriteOffset",
            "location": 1041,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "Optional[T]",
                    "Sequence[T]",
                    "Sized",
                    "str"
                ],
                "byte_width": [
                    "int"
                ]
            }
        },
        "Builder._WriteAny": {
            "name": "_WriteAny",
            "location": 1046,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "byte_width": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "Builder._WriteBlob": {
            "name": "_WriteBlob",
            "location": 1055,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bool",
                    "list",
                    "str"
                ],
                "append_zero": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence"
                ],
                "type_": [
                    "List[str]",
                    "int",
                    "str",
                    "List[List[Any]]",
                    "List[Union[int, float]]",
                    "list"
                ]
            }
        },
        "Builder._WriteScalarVector": {
            "name": "_WriteScalarVector",
            "location": 1066,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "element_type": [
                    "Collection"
                ],
                "byte_width": [
                    "int",
                    "str",
                    "dict",
                    "Optional[Sequence[int]]"
                ],
                "elements": [
                    "str",
                    "tuple",
                    "bool"
                ],
                "fixed": [
                    "List[str]",
                    "bool",
                    "Type",
                    "Optional[Callable]",
                    "Type[T]"
                ]
            }
        },
        "Builder._CreateVector": {
            "name": "_CreateVector",
            "location": 1090,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "int",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "typed": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "fixed": [
                    "str",
                    "List[str]"
                ],
                "keys": [
                    "int",
                    "Optional[int]",
                    "set"
                ]
            }
        },
        "Builder._PushIndirect": {
            "name": "_PushIndirect",
            "location": 1148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "dict"
                ],
                "type_": [
                    "str",
                    "Optional[str]",
                    "frozenset",
                    "Union[int, float, None]",
                    "bool"
                ],
                "bit_width": [
                    "bool",
                    "int",
                    "List['Product']",
                    "List[str]"
                ]
            }
        },
        "Builder.String": {
            "name": "String",
            "location": 1160,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[float]",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "Builder.Blob": {
            "name": "Blob",
            "location": 1174,
            "return": [
                "float",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Type"
                ]
            }
        },
        "Builder.Key": {
            "name": "Key",
            "location": 1185,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "Union[bytes, str]",
                    "str"
                ]
            }
        },
        "Builder.Null": {
            "name": "Null",
            "location": 1215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Builder.Bool": {
            "name": "Bool",
            "location": 1222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list",
                    "dict",
                    "float",
                    "str",
                    "Union[str, list]",
                    "int"
                ]
            }
        },
        "Builder.Int": {
            "name": "Int",
            "location": 1231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float"
                ],
                "byte_width": [
                    "int",
                    "float"
                ]
            }
        },
        "Builder.IndirectInt": {
            "name": "IndirectInt",
            "location": 1242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "byte_width": [
                    "int",
                    "float"
                ]
            }
        },
        "Builder.UInt": {
            "name": "UInt",
            "location": 1253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float"
                ],
                "byte_width": [
                    "int",
                    "float"
                ]
            }
        },
        "Builder.IndirectUInt": {
            "name": "IndirectUInt",
            "location": 1264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "byte_width": [
                    "int",
                    "float"
                ]
            }
        },
        "Builder.Float": {
            "name": "Float",
            "location": 1275,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "byte_width": [
                    "int",
                    "float"
                ]
            }
        },
        "Builder.IndirectFloat": {
            "name": "IndirectFloat",
            "location": 1286,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "byte_width": [
                    "int",
                    "float"
                ]
            }
        },
        "Builder._StartVector": {
            "name": "_StartVector",
            "location": 1296,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._EndVector": {
            "name": "_EndVector",
            "location": 1300,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "int"
                ],
                "typed": [
                    "str",
                    "int"
                ],
                "fixed": [
                    "str",
                    "int"
                ]
            }
        },
        "Builder.Vector": {
            "name": "Vector",
            "location": 1308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Builder.VectorFromElements": {
            "name": "VectorFromElements",
            "location": 1319,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Callable",
                    "str",
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "List[\"transaction_model.TransactionModel\"]",
                    "List[dict]"
                ]
            }
        },
        "Builder.TypedVector": {
            "name": "TypedVector",
            "location": 1330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "Union[Callable[[Dict], Hashable], str]"
                ]
            }
        },
        "Builder.TypedVectorFromElements": {
            "name": "TypedVectorFromElements",
            "location": 1341,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "set",
                    "Union[Sequence[int], Sequence[dict]]",
                    "slice",
                    "list",
                    "T",
                    "int",
                    "Callable"
                ],
                "element_type": [
                    "Match",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "Builder.FixedTypedVectorFromElements": {
            "name": "FixedTypedVectorFromElements",
            "location": 1369,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "bool"
                ],
                "element_type": [
                    "int",
                    "str"
                ],
                "byte_width": [
                    "str",
                    "Type[object]"
                ]
            }
        },
        "Builder._StartMap": {
            "name": "_StartMap",
            "location": 1410,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder._EndMap": {
            "name": "_EndMap",
            "location": 1414,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Builder.Map": {
            "name": "Map",
            "location": 1442,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Builder.MapFromElements": {
            "name": "MapFromElements",
            "location": 1452,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Optional[Any]]",
                    "dict",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "Builder.Adder": {
            "name": "Adder",
            "location": 1459,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Tuple[int]",
                    "Optional[Type[BaseException]]",
                    "Optional[BaseException]",
                    "bool"
                ]
            }
        },
        "Builder.Add": {
            "name": "Add",
            "location": 1474,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[type, Tuple[type, ...]]",
                    "Optional[str]",
                    "Optional[Any]",
                    "T",
                    "float",
                    "str",
                    "Iterable",
                    "Optional[dict]"
                ]
            }
        },
        "Builder.LastValue": {
            "name": "LastValue",
            "location": 1501,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Builder.ReuseValue": {
            "name": "ReuseValue",
            "location": 1505,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "List[T]",
                    "T"
                ]
            }
        }
    },
    "zlmdb-master/flatbuffers/number_types.py": {
        "valid_number": {
            "name": "valid_number",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "flags": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "enforce_number": {
            "name": "enforce_number",
            "location": 146,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "bool"
                ],
                "flags": [
                    "int",
                    "Optional[int]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "float32_to_uint32": {
            "name": "float32_to_uint32",
            "location": 153,
            "return": [
                "str",
                "int",
                "tuple"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "uint32_to_float32": {
            "name": "uint32_to_float32",
            "location": 159,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "float64_to_uint64": {
            "name": "float64_to_uint64",
            "location": 165,
            "return": [
                "str",
                "int",
                "tuple"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "uint64_to_float64": {
            "name": "uint64_to_float64",
            "location": 171,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "to_numpy_type": {
            "name": "to_numpy_type",
            "location": 177,
            "return": [],
            "arguments": {
                "number_type": [
                    "str",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type"
                ]
            }
        }
    },
    "zlmdb-master/flatbuffers/packer.py": {},
    "zlmdb-master/flatbuffers/table.py": {
        "Table.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "int",
                    "bool",
                    "float"
                ],
                "pos": [
                    "int",
                    "bool"
                ]
            }
        },
        "Table.Offset": {
            "name": "Offset",
            "location": 32,
            "return": [
                "bool",
                "Optional[Type]"
            ],
            "arguments": {
                "self": [],
                "vtableOffset": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[Tuple[int, ...], float]"
                ]
            }
        },
        "Table.Indirect": {
            "name": "Indirect",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "off": [
                    "str"
                ]
            }
        },
        "Table.String": {
            "name": "String",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "off": [
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "Table.VectorLen": {
            "name": "VectorLen",
            "location": 56,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "off": [
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "Table.Vector": {
            "name": "Vector",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "off": [
                    "int",
                    "str"
                ]
            }
        },
        "Table.Union": {
            "name": "Union",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t2": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "Union[dict, list]"
                ],
                "off": [
                    "str",
                    "Sequence[Mapping]",
                    "Dict[str, Any]",
                    "Optional[Iterable[T]]",
                    "bool",
                    "Match"
                ]
            }
        },
        "Table.Get": {
            "name": "Get",
            "location": 87,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "off": [
                    "str",
                    "AsyncGenerator",
                    "bytes"
                ]
            }
        },
        "Table.GetSlot": {
            "name": "GetSlot",
            "location": 95,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "d": [
                    "int",
                    "bool",
                    "float"
                ],
                "validator_flags": [
                    "Optional[int]",
                    "int",
                    "Optional[AbstractSet]",
                    "Dict[str, Any]",
                    "float",
                    "T"
                ]
            }
        },
        "Table.GetVectorAsNumpy": {
            "name": "GetVectorAsNumpy",
            "location": 104,
            "return": [
                "Optional[str]",
                "bytes",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "str",
                    "Optional[Type]",
                    "bool"
                ],
                "off": [
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "Table.GetVOffsetTSlot": {
            "name": "GetVOffsetTSlot",
            "location": 116,
            "return": [
                "str",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "int",
                    "bytes",
                    "Optional[int]"
                ],
                "d": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "zlmdb-master/flatbuffers/util.py": {
        "GetSizePrefix": {
            "name": "GetSizePrefix",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "buf": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Dict[str, str]"
                ],
                "offset": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "GetBufferIdentifier": {
            "name": "GetBufferIdentifier",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "buf": [
                    "int",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "bool",
                    "Optional[bool]"
                ],
                "size_prefixed": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "BufferHasIdentifier": {
            "name": "BufferHasIdentifier",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "buf": [
                    "int",
                    "float",
                    "Callable[[int, int], None]",
                    "Optional[int]",
                    "str"
                ],
                "offset": [
                    "int",
                    "float",
                    "Callable[[int, int], None]",
                    "Optional[int]",
                    "str"
                ],
                "file_identifier": [
                    "str",
                    "bool"
                ],
                "size_prefixed": [
                    "int",
                    "float",
                    "Callable[[int, int], None]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "RemoveSizePrefix": {
            "name": "RemoveSizePrefix",
            "location": 38,
            "return": [],
            "arguments": {
                "buf": [
                    "BaseException",
                    "Callable[[KT], VT]",
                    "str",
                    "Tuple[str, str]"
                ],
                "offset": [
                    "BaseException",
                    "Callable[[KT], VT]",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "zlmdb-master/flatbuffers/_version.py": {},
    "zlmdb-master/flatbuffers/__init__.py": {},
    "zlmdb-master/flatbuffers/reflection/AdvancedFeatures.py": {},
    "zlmdb-master/flatbuffers/reflection/BaseType.py": {},
    "zlmdb-master/flatbuffers/reflection/Enum.py": {
        "EnumStart": {
            "name": "EnumStart",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 135,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "EnumAddName": {
            "name": "EnumAddName",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ],
                "name": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 138,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ],
                "name": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "EnumAddValues": {
            "name": "EnumAddValues",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Union[Any, Any]]",
                    "Sequence[str]",
                    "List[str]"
                ],
                "values": [
                    "str",
                    "bool",
                    "List[Union[Any, Any]]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "AddValues": {
            "name": "AddValues",
            "location": 141,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "bool",
                "Optional[T]"
            ],
            "arguments": {
                "builder": [
                    "Dict[str, Any]",
                    "str"
                ],
                "values": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "EnumStartValuesVector": {
            "name": "EnumStartValuesVector",
            "location": 143,
            "return": [
                "Type",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "numElems": [
                    "str"
                ]
            }
        },
        "StartValuesVector": {
            "name": "StartValuesVector",
            "location": 144,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int",
                    "Hashable"
                ],
                "numElems": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "EnumAddIsUnion": {
            "name": "EnumAddIsUnion",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "dict",
                    "Callable",
                    "Sequence[str]",
                    "str"
                ],
                "isUnion": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "dict",
                    "Callable",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "AddIsUnion": {
            "name": "AddIsUnion",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Optional[\"Scope\"]",
                    "list",
                    "List[str]"
                ],
                "isUnion": [
                    "bool",
                    "str",
                    "Optional[\"Scope\"]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "EnumAddUnderlyingType": {
            "name": "EnumAddUnderlyingType",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "bool",
                    "Callable[..., T]",
                    "float"
                ],
                "underlyingType": [
                    "Callable",
                    "bool",
                    "Callable[..., T]",
                    "float"
                ]
            }
        },
        "AddUnderlyingType": {
            "name": "AddUnderlyingType",
            "location": 150,
            "return": [
                "bool",
                "Optional[Type]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "Union[str, 'Type']",
                    "str",
                    "Type",
                    "dict"
                ],
                "underlyingType": [
                    "Union[str, 'Type']",
                    "str",
                    "Type",
                    "dict"
                ]
            }
        },
        "EnumAddAttributes": {
            "name": "EnumAddAttributes",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "attributes": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 153,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "EnumStartAttributesVector": {
            "name": "EnumStartAttributesVector",
            "location": 155,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "EnumAddDocumentation": {
            "name": "EnumAddDocumentation",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "documentation": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 159,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "EnumStartDocumentationVector": {
            "name": "EnumStartDocumentationVector",
            "location": 161,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "EnumAddDeclarationFile": {
            "name": "EnumAddDeclarationFile",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ],
                "declarationFile": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "AddDeclarationFile": {
            "name": "AddDeclarationFile",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "declarationFile": [
                    "str"
                ]
            }
        },
        "EnumEnd": {
            "name": "EnumEnd",
            "location": 167,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 168,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Enum.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Enum.GetRootAsEnum": {
            "name": "GetRootAsEnum",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "Enum.EnumBufferHasIdentifier": {
            "name": "EnumBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Enum.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Enum.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.Values": {
            "name": "Values",
            "location": 39,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "int",
                    "tuple"
                ]
            }
        },
        "Enum.ValuesLength": {
            "name": "ValuesLength",
            "location": 52,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.ValuesIsNone": {
            "name": "ValuesIsNone",
            "location": 59,
            "return": [
                "dict",
                "str",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.IsUnion": {
            "name": "IsUnion",
            "location": 64,
            "return": [
                "Optional[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.UnderlyingType": {
            "name": "UnderlyingType",
            "location": 71,
            "return": [
                "type",
                "Optional[T]",
                "Optional[Callable[[bool], None]]",
                "Tuple[List[str], Optional[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.Attributes": {
            "name": "Attributes",
            "location": 82,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Enum.AttributesLength": {
            "name": "AttributesLength",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 102,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.Documentation": {
            "name": "Documentation",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "Enum.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 122,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.DeclarationFile": {
            "name": "DeclarationFile",
            "location": 128,
            "return": [
                "str",
                "float",
                "Tuple[str, str]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/EnumVal.py": {
        "EnumValStart": {
            "name": "EnumValStart",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "int",
                    "Set[T]"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 77,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "builder": [
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        },
        "EnumValAddName": {
            "name": "EnumValAddName",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 80,
            "return": [
                "str",
                "Container[\"Taxon\"]",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]"
                ],
                "name": [
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "EnumValAddValue": {
            "name": "EnumValAddValue",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Union[Set[str], List[str]]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Union[Set[str], List[str]]"
                ]
            }
        },
        "AddValue": {
            "name": "AddValue",
            "location": 83,
            "return": [
                "Tuple[float, float]",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "Dict[str, Any]",
                    "str"
                ],
                "value": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "EnumValAddUnionType": {
            "name": "EnumValAddUnionType",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "Callable[..., T]",
                    "bool",
                    "dict"
                ],
                "unionType": [
                    "Callable",
                    "Callable[..., T]",
                    "bool",
                    "dict"
                ]
            }
        },
        "AddUnionType": {
            "name": "AddUnionType",
            "location": 86,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "Union[str, 'Type']",
                    "dict",
                    "Type",
                    "Callable"
                ],
                "unionType": [
                    "Union[str, 'Type']",
                    "dict",
                    "Type",
                    "Callable"
                ]
            }
        },
        "EnumValAddDocumentation": {
            "name": "EnumValAddDocumentation",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "list",
                    "Optional[Callable]",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "documentation": [
                    "Callable",
                    "list",
                    "Optional[Callable]",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 89,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool"
                ],
                "documentation": [
                    "str",
                    "bool"
                ]
            }
        },
        "EnumValStartDocumentationVector": {
            "name": "EnumValStartDocumentationVector",
            "location": 91,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "bool",
                    "Callable",
                    "Callable[[], object]"
                ],
                "numElems": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "bool",
                    "Callable",
                    "Callable[[], object]"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 92,
            "return": [
                "Optional[int]",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Callable",
                    "Type",
                    "Dict[str, str]"
                ],
                "numElems": [
                    "str",
                    "Callable",
                    "Type",
                    "Dict[str, str]"
                ]
            }
        },
        "EnumValEnd": {
            "name": "EnumValEnd",
            "location": 94,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 95,
            "return": [
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "EnumVal.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "EnumVal.GetRootAsEnumVal": {
            "name": "GetRootAsEnumVal",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "EnumVal.EnumValBufferHasIdentifier": {
            "name": "EnumValBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "EnumVal.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "EnumVal.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.Value": {
            "name": "Value",
            "location": 39,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Optional[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.UnionType": {
            "name": "UnionType",
            "location": 46,
            "return": [
                "type",
                "Optional[T]",
                "Optional[Callable[[bool], None]]",
                "Tuple[List[str], Optional[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.Documentation": {
            "name": "Documentation",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "EnumVal.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 72,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/Field.py": {
        "FieldStart": {
            "name": "FieldStart",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "int",
                    "list"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 159,
            "return": [
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "FieldAddName": {
            "name": "FieldAddName",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 162,
            "return": [
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ],
                "name": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "FieldAddType": {
            "name": "FieldAddType",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ],
                "type": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "AddType": {
            "name": "AddType",
            "location": 165,
            "return": [
                "str",
                "Optional[Type]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type[Any]"
                ],
                "type": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "FieldAddId": {
            "name": "FieldAddId",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "List[str]",
                    "List[int]",
                    "MutableMapping",
                    "str"
                ],
                "id": [
                    "bool",
                    "int",
                    "List[str]",
                    "List[int]",
                    "MutableMapping",
                    "str"
                ]
            }
        },
        "AddId": {
            "name": "AddId",
            "location": 168,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "FieldAddOffset": {
            "name": "FieldAddOffset",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "offset": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddOffset": {
            "name": "AddOffset",
            "location": 171,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "offset": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldAddDefaultInteger": {
            "name": "FieldAddDefaultInteger",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "defaultInteger": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "AddDefaultInteger": {
            "name": "AddDefaultInteger",
            "location": 174,
            "return": [
                "bool",
                "\"Task\"",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "Callable[[], None]",
                    "Awaitable",
                    "str",
                    "Optional[bytes]"
                ],
                "defaultInteger": [
                    "Callable[[], None]",
                    "Awaitable",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "FieldAddDefaultReal": {
            "name": "FieldAddDefaultReal",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "defaultReal": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "AddDefaultReal": {
            "name": "AddDefaultReal",
            "location": 177,
            "return": [
                "bool",
                "\"Task\"",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "Callable[[], None]",
                    "Awaitable",
                    "str",
                    "Optional[bytes]"
                ],
                "defaultReal": [
                    "Callable[[], None]",
                    "Awaitable",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "FieldAddDeprecated": {
            "name": "FieldAddDeprecated",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddDeprecated": {
            "name": "AddDeprecated",
            "location": 180,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldAddRequired": {
            "name": "FieldAddRequired",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "required": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddRequired": {
            "name": "AddRequired",
            "location": 183,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "required": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldAddKey": {
            "name": "FieldAddKey",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Set[str]",
                    "Optional[bool]",
                    "int"
                ],
                "key": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Set[str]",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "AddKey": {
            "name": "AddKey",
            "location": 186,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "bytes",
                "Dict[str, str]",
                "str",
                "Exception",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Union[Callable[[Dict], Hashable], str]",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "Union[Callable[[Dict], Hashable], str]",
                    "List[str]"
                ]
            }
        },
        "FieldAddAttributes": {
            "name": "FieldAddAttributes",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 189,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldStartAttributesVector": {
            "name": "FieldStartAttributesVector",
            "location": 191,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ],
                "numElems": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 192,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FieldAddDocumentation": {
            "name": "FieldAddDocumentation",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 195,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldStartDocumentationVector": {
            "name": "FieldStartDocumentationVector",
            "location": 197,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ],
                "numElems": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 198,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FieldAddOptional": {
            "name": "FieldAddOptional",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "optional": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddOptional": {
            "name": "AddOptional",
            "location": 201,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "optional": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldAddPadding": {
            "name": "FieldAddPadding",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "padding": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddPadding": {
            "name": "AddPadding",
            "location": 204,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "padding": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldEnd": {
            "name": "FieldEnd",
            "location": 206,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "List[Dict[str, Any]]",
                    "Union[Set[str], List[str]]",
                    "bool",
                    "str"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 207,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Field.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Field.GetRootAsField": {
            "name": "GetRootAsField",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "buf": [
                    "str"
                ],
                "offset": [
                    "str"
                ]
            }
        },
        "Field.FieldBufferHasIdentifier": {
            "name": "FieldBufferHasIdentifier",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[object]",
                    "T",
                    "List[int]",
                    "str"
                ],
                "buf": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "List[int]"
                ],
                "offset": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "List[int]"
                ],
                "size_prefixed": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "List[int]"
                ]
            }
        },
        "Field.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Field.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Type": {
            "name": "Type",
            "location": 39,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Id": {
            "name": "Id",
            "location": 50,
            "return": [
                "Optional[str]",
                "str",
                "dict",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Offset": {
            "name": "Offset",
            "location": 57,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.DefaultInteger": {
            "name": "DefaultInteger",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.DefaultReal": {
            "name": "DefaultReal",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Deprecated": {
            "name": "Deprecated",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Required": {
            "name": "Required",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Key": {
            "name": "Key",
            "location": 92,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Attributes": {
            "name": "Attributes",
            "location": 99,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Field.AttributesLength": {
            "name": "AttributesLength",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 119,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Documentation": {
            "name": "Documentation",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "Field.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 139,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Optional": {
            "name": "Optional",
            "location": 144,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Padding": {
            "name": "Padding",
            "location": 152,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/KeyValue.py": {
        "KeyValueStart": {
            "name": "KeyValueStart",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 46,
            "return": [
                "bool",
                "List[str]",
                "Optional[int]",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool"
                ]
            }
        },
        "KeyValueAddKey": {
            "name": "KeyValueAddKey",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "dict",
                    "int",
                    "list",
                    "bool"
                ],
                "key": [
                    "str",
                    "dict",
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "AddKey": {
            "name": "AddKey",
            "location": 49,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Hashable"
                ],
                "key": [
                    "str",
                    "Hashable"
                ]
            }
        },
        "KeyValueAddValue": {
            "name": "KeyValueAddValue",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "List[str]",
                    "Union[Set[str], List[str]]"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "List[str]",
                    "Union[Set[str], List[str]]"
                ]
            }
        },
        "AddValue": {
            "name": "AddValue",
            "location": 52,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Dict[str, Any]",
                    "Type['Model']",
                    "type",
                    "Sequence[type]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Type['Model']",
                    "type",
                    "Sequence[type]"
                ]
            }
        },
        "KeyValueEnd": {
            "name": "KeyValueEnd",
            "location": 54,
            "return": [
                "str",
                "Callable[[], None]",
                "Dict[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "bool"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 55,
            "return": [
                "bool",
                "Optional[str]",
                "dict",
                "Sequence"
            ],
            "arguments": {
                "builder": [
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "Iterable[int]",
                    "Set[str]"
                ]
            }
        },
        "KeyValue.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "KeyValue.GetRootAsKeyValue": {
            "name": "GetRootAsKeyValue",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes"
                ],
                "buf": [
                    "str",
                    "bytes"
                ],
                "offset": [
                    "str",
                    "bytes"
                ]
            }
        },
        "KeyValue.KeyValueBufferHasIdentifier": {
            "name": "KeyValueBufferHasIdentifier",
            "location": 24,
            "return": [
                "str",
                "Optional[Dict]",
                "float",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "buf": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ],
                "offset": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ],
                "size_prefixed": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "KeyValue.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "KeyValue.Key": {
            "name": "Key",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValue.Value": {
            "name": "Value",
            "location": 39,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/Object.py": {
        "ObjectStart": {
            "name": "ObjectStart",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 138,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ObjectAddName": {
            "name": "ObjectAddName",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ],
                "name": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 141,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ],
                "name": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "ObjectAddFields": {
            "name": "ObjectAddFields",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Iterable[str]",
                    "Dict[str, Tuple[str, str]]",
                    "list"
                ],
                "fields": [
                    "List[Tuple[str, str]]",
                    "Iterable[str]",
                    "Dict[str, Tuple[str, str]]",
                    "list"
                ]
            }
        },
        "AddFields": {
            "name": "AddFields",
            "location": 144,
            "return": [
                "bool",
                "int",
                "Callable[..., None]",
                "Sequence[str]"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "fields": [
                    "str"
                ]
            }
        },
        "ObjectStartFieldsVector": {
            "name": "ObjectStartFieldsVector",
            "location": 146,
            "return": [
                "Type",
                "str",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "dict"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "StartFieldsVector": {
            "name": "StartFieldsVector",
            "location": 147,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[Type]",
                    "Callable"
                ],
                "numElems": [
                    "str",
                    "Optional[Type]",
                    "Callable"
                ]
            }
        },
        "ObjectAddIsStruct": {
            "name": "ObjectAddIsStruct",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "dict",
                    "Callable",
                    "Sequence[str]",
                    "str"
                ],
                "isStruct": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "dict",
                    "Callable",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "AddIsStruct": {
            "name": "AddIsStruct",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Optional[\"Scope\"]",
                    "list",
                    "List[str]"
                ],
                "isStruct": [
                    "bool",
                    "str",
                    "Optional[\"Scope\"]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "ObjectAddMinalign": {
            "name": "ObjectAddMinalign",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "minalign": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddMinalign": {
            "name": "AddMinalign",
            "location": 153,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "minalign": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ObjectAddBytesize": {
            "name": "ObjectAddBytesize",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "bytesize": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddBytesize": {
            "name": "AddBytesize",
            "location": 156,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "bytesize": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ObjectAddAttributes": {
            "name": "ObjectAddAttributes",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "attributes": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 159,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ObjectStartAttributesVector": {
            "name": "ObjectStartAttributesVector",
            "location": 161,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ObjectAddDocumentation": {
            "name": "ObjectAddDocumentation",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "documentation": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 165,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ObjectStartDocumentationVector": {
            "name": "ObjectStartDocumentationVector",
            "location": 167,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ObjectAddDeclarationFile": {
            "name": "ObjectAddDeclarationFile",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ],
                "declarationFile": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "AddDeclarationFile": {
            "name": "AddDeclarationFile",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "declarationFile": [
                    "str"
                ]
            }
        },
        "ObjectEnd": {
            "name": "ObjectEnd",
            "location": 173,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 174,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Object.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Object.GetRootAsObject": {
            "name": "GetRootAsObject",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "Object.ObjectBufferHasIdentifier": {
            "name": "ObjectBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Object.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Object.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Fields": {
            "name": "Fields",
            "location": 39,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "int"
                ]
            }
        },
        "Object.FieldsLength": {
            "name": "FieldsLength",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.FieldsIsNone": {
            "name": "FieldsIsNone",
            "location": 59,
            "return": [
                "float",
                "str",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.IsStruct": {
            "name": "IsStruct",
            "location": 64,
            "return": [
                "Optional[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Minalign": {
            "name": "Minalign",
            "location": 71,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Bytesize": {
            "name": "Bytesize",
            "location": 78,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Attributes": {
            "name": "Attributes",
            "location": 85,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Object.AttributesLength": {
            "name": "AttributesLength",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 105,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Documentation": {
            "name": "Documentation",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "Object.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 125,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.DeclarationFile": {
            "name": "DeclarationFile",
            "location": 131,
            "return": [
                "str",
                "float",
                "Tuple[str, str]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/RPCCall.py": {
        "RPCCallStart": {
            "name": "RPCCallStart",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "UnicodeError"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 106,
            "return": [
                "tuple"
            ],
            "arguments": {
                "builder": [
                    "float",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "RPCCallAddName": {
            "name": "RPCCallAddName",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Type",
                    "str",
                    "Type['Signature']",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "Type",
                    "str",
                    "Type['Signature']",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 109,
            "return": [
                "Type",
                "IO",
                "bool",
                "Callable[[str], None]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[str]",
                    "Union[dict, str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Union[dict, str]"
                ]
            }
        },
        "RPCCallAddRequest": {
            "name": "RPCCallAddRequest",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ],
                "request": [
                    "bool",
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "AddRequest": {
            "name": "AddRequest",
            "location": 112,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "builder": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "str"
                ],
                "request": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "str"
                ]
            }
        },
        "RPCCallAddResponse": {
            "name": "RPCCallAddResponse",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[bytes]",
                    "Type"
                ],
                "response": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[bytes]",
                    "Type"
                ]
            }
        },
        "AddResponse": {
            "name": "AddResponse",
            "location": 115,
            "return": [],
            "arguments": {
                "builder": [
                    "dict",
                    "Optional[str]",
                    "Set[str]"
                ],
                "response": [
                    "dict",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "RPCCallAddAttributes": {
            "name": "RPCCallAddAttributes",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "list",
                    "Callable",
                    "int",
                    "str"
                ],
                "attributes": [
                    "list",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 118,
            "return": [
                "Container[T]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "attributes": [
                    "str"
                ]
            }
        },
        "RPCCallStartAttributesVector": {
            "name": "RPCCallStartAttributesVector",
            "location": 120,
            "return": [
                "str",
                "Callable[[None], None]",
                "Tuple[str]",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]"
                ],
                "numElems": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 121,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable"
                ],
                "numElems": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "RPCCallAddDocumentation": {
            "name": "RPCCallAddDocumentation",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "list",
                    "Callable",
                    "int",
                    "str"
                ],
                "documentation": [
                    "list",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 124,
            "return": [
                "Container[T]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "documentation": [
                    "str"
                ]
            }
        },
        "RPCCallStartDocumentationVector": {
            "name": "RPCCallStartDocumentationVector",
            "location": 126,
            "return": [
                "str",
                "Callable[[None], None]",
                "Tuple[str]",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]"
                ],
                "numElems": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 127,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable"
                ],
                "numElems": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "RPCCallEnd": {
            "name": "RPCCallEnd",
            "location": 129,
            "return": [
                "Optional[Iterable[Any]]",
                "Callable",
                "bool",
                "Optional[str]",
                "AsyncGenerator"
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "Callable[..., T]",
                    "float",
                    "Exception"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 130,
            "return": [
                "str",
                "bool",
                "Callable",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Callable[[Union, Union], Tuple[Any, ...],]",
                    "Callable"
                ]
            }
        },
        "RPCCall.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "RPCCall.GetRootAsRPCCall": {
            "name": "GetRootAsRPCCall",
            "location": 20,
            "return": [
                "str",
                "Dict[str, Union[str, int]]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "buf": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "offset": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "RPCCall.RPCCallBufferHasIdentifier": {
            "name": "RPCCallBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Optional[List[str]]",
                "Callable"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "int",
                    "float",
                    "Dict[str, int]",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "List[float]"
                ],
                "offset": [
                    "int",
                    "float",
                    "Dict[str, int]",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "List[float]"
                ],
                "size_prefixed": [
                    "int",
                    "float",
                    "Dict[str, int]",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "RPCCall.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "RPCCall.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.Request": {
            "name": "Request",
            "location": 39,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.Response": {
            "name": "Response",
            "location": 50,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.Attributes": {
            "name": "Attributes",
            "location": 61,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "RPCCall.AttributesLength": {
            "name": "AttributesLength",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 81,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.Documentation": {
            "name": "Documentation",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "RPCCall.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 101,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/Schema.py": {
        "SchemaStart": {
            "name": "SchemaStart",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 166,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "SchemaAddObjects": {
            "name": "SchemaAddObjects",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "objects": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddObjects": {
            "name": "AddObjects",
            "location": 169,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Dict[str, Any]"
                ],
                "objects": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "SchemaStartObjectsVector": {
            "name": "SchemaStartObjectsVector",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartObjectsVector": {
            "name": "StartObjectsVector",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SchemaAddEnums": {
            "name": "SchemaAddEnums",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "enums": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddEnums": {
            "name": "AddEnums",
            "location": 175,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "enums": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "SchemaStartEnumsVector": {
            "name": "SchemaStartEnumsVector",
            "location": 177,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartEnumsVector": {
            "name": "StartEnumsVector",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SchemaAddFileIdent": {
            "name": "SchemaAddFileIdent",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Iterable[str]",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "fileIdent": [
                    "Iterable[str]",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "AddFileIdent": {
            "name": "AddFileIdent",
            "location": 181,
            "return": [
                "str",
                "Set[str]",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "int",
                    "Union[str, List[str]]"
                ],
                "fileIdent": [
                    "bool",
                    "str",
                    "int",
                    "Union[str, List[str]]"
                ]
            }
        },
        "SchemaAddFileExt": {
            "name": "SchemaAddFileExt",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "BinaryIO",
                    "Iterable[Optional[Any]]",
                    "Iterable[str]",
                    "Sequence[str]",
                    "List[str]"
                ],
                "fileExt": [
                    "BinaryIO",
                    "Iterable[Optional[Any]]",
                    "Iterable[str]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "AddFileExt": {
            "name": "AddFileExt",
            "location": 184,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "dict",
                    "IO[bytes]",
                    "str"
                ],
                "fileExt": [
                    "bool",
                    "int",
                    "dict",
                    "IO[bytes]",
                    "str"
                ]
            }
        },
        "SchemaAddRootTable": {
            "name": "SchemaAddRootTable",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "int"
                ],
                "rootTable": [
                    "int"
                ]
            }
        },
        "AddRootTable": {
            "name": "AddRootTable",
            "location": 187,
            "return": [],
            "arguments": {
                "builder": [
                    "int",
                    "dict",
                    "T"
                ],
                "rootTable": [
                    "int",
                    "dict",
                    "T"
                ]
            }
        },
        "SchemaAddServices": {
            "name": "SchemaAddServices",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "services": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddServices": {
            "name": "AddServices",
            "location": 190,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "services": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "SchemaStartServicesVector": {
            "name": "SchemaStartServicesVector",
            "location": 192,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartServicesVector": {
            "name": "StartServicesVector",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SchemaAddAdvancedFeatures": {
            "name": "SchemaAddAdvancedFeatures",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "advancedFeatures": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddAdvancedFeatures": {
            "name": "AddAdvancedFeatures",
            "location": 196,
            "return": [
                "bool",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "advancedFeatures": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "SchemaAddFbsFiles": {
            "name": "SchemaAddFbsFiles",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ],
                "fbsFiles": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "AddFbsFiles": {
            "name": "AddFbsFiles",
            "location": 199,
            "return": [
                "str",
                "List[str]",
                "Tuple[str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "fbsFiles": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "SchemaStartFbsFilesVector": {
            "name": "SchemaStartFbsFilesVector",
            "location": 201,
            "return": [
                "bool",
                "str",
                "Tuple[str, Optional[str]]"
            ],
            "arguments": {
                "builder": [
                    "int",
                    "str",
                    "Type[Exception]",
                    "List[str]"
                ],
                "numElems": [
                    "int",
                    "str",
                    "Type[Exception]",
                    "List[str]"
                ]
            }
        },
        "StartFbsFilesVector": {
            "name": "StartFbsFilesVector",
            "location": 202,
            "return": [
                "bool",
                "Callable[[dict], None]",
                "Optional[Callable[[dict], None]]",
                "Optional[Callable[[], None]]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "Optional[List[int]]",
                    "str",
                    "Optional[str]"
                ],
                "numElems": [
                    "Optional[List[int]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SchemaEnd": {
            "name": "SchemaEnd",
            "location": 204,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 205,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Schema.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Schema.GetRootAsSchema": {
            "name": "GetRootAsSchema",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "Schema.SchemaBufferHasIdentifier": {
            "name": "SchemaBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Schema.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Schema.Objects": {
            "name": "Objects",
            "location": 32,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Schema.ObjectsLength": {
            "name": "ObjectsLength",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.ObjectsIsNone": {
            "name": "ObjectsIsNone",
            "location": 52,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.Enums": {
            "name": "Enums",
            "location": 57,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Schema.EnumsLength": {
            "name": "EnumsLength",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.EnumsIsNone": {
            "name": "EnumsIsNone",
            "location": 77,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.FileIdent": {
            "name": "FileIdent",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.FileExt": {
            "name": "FileExt",
            "location": 89,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.RootTable": {
            "name": "RootTable",
            "location": 96,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Iterable[T]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.Services": {
            "name": "Services",
            "location": 107,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Schema.ServicesLength": {
            "name": "ServicesLength",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.ServicesIsNone": {
            "name": "ServicesIsNone",
            "location": 127,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.AdvancedFeatures": {
            "name": "AdvancedFeatures",
            "location": 132,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.FbsFiles": {
            "name": "FbsFiles",
            "location": 141,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[bool]",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Schema.FbsFilesLength": {
            "name": "FbsFilesLength",
            "location": 154,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.FbsFilesIsNone": {
            "name": "FbsFilesIsNone",
            "location": 161,
            "return": [
                "str",
                "int",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/SchemaFile.py": {
        "SchemaFileStart": {
            "name": "SchemaFileStart",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "Optional[List]",
                    "bool"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 64,
            "return": [
                "T",
                "List[str]",
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "builder": [
                    "dict",
                    "IO",
                    "Mapping",
                    "type",
                    "Dict[str, str]"
                ]
            }
        },
        "SchemaFileAddFilename": {
            "name": "SchemaFileAddFilename",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "dict",
                    "list",
                    "List[str]",
                    "Tuple[float, float]",
                    "bool",
                    "Iterable[bytes]",
                    "List[Dict]"
                ],
                "filename": [
                    "str",
                    "dict",
                    "list",
                    "List[str]",
                    "Tuple[float, float]",
                    "bool",
                    "Iterable[bytes]",
                    "List[Dict]"
                ]
            }
        },
        "AddFilename": {
            "name": "AddFilename",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "dict",
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "dict",
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SchemaFileAddIncludedFilenames": {
            "name": "SchemaFileAddIncludedFilenames",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Set[str]",
                    "List[str]"
                ],
                "includedFilenames": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "AddIncludedFilenames": {
            "name": "AddIncludedFilenames",
            "location": 70,
            "return": [
                "bool",
                "List[Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "includedFilenames": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "SchemaFileStartIncludedFilenamesVector": {
            "name": "SchemaFileStartIncludedFilenamesVector",
            "location": 72,
            "return": [
                "bool",
                "List[str]",
                "type",
                "Type"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str"
                ],
                "numElems": [
                    "bool",
                    "str"
                ]
            }
        },
        "StartIncludedFilenamesVector": {
            "name": "StartIncludedFilenamesVector",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[Pattern]",
                    "dict"
                ],
                "numElems": [
                    "str",
                    "Optional[Pattern]",
                    "dict"
                ]
            }
        },
        "SchemaFileEnd": {
            "name": "SchemaFileEnd",
            "location": 75,
            "return": [
                "bool",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "float",
                    "List[str]",
                    "list",
                    "Iterable[Tuple[str, Any]]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 76,
            "return": [
                "bool",
                "Sequence[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Mapping",
                    "Optional[int]",
                    "Set[str]"
                ]
            }
        },
        "SchemaFile.GetRootAs": {
            "name": "GetRootAs",
            "location": 16,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "SchemaFile.GetRootAsSchemaFile": {
            "name": "GetRootAsSchemaFile",
            "location": 23,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "buf": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "offset": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SchemaFile.SchemaFileBufferHasIdentifier": {
            "name": "SchemaFileBufferHasIdentifier",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "BinaryIO"
                ],
                "buf": [
                    "int",
                    "bool"
                ],
                "offset": [
                    "int",
                    "bool"
                ],
                "size_prefixed": [
                    "int",
                    "bool"
                ]
            }
        },
        "SchemaFile.Init": {
            "name": "Init",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "SchemaFile.Filename": {
            "name": "Filename",
            "location": 36,
            "return": [
                "str",
                "bool",
                "Tuple[str, List[str], List[str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaFile.IncludedFilenames": {
            "name": "IncludedFilenames",
            "location": 44,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str"
                ]
            }
        },
        "SchemaFile.IncludedFilenamesLength": {
            "name": "IncludedFilenamesLength",
            "location": 52,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaFile.IncludedFilenamesIsNone": {
            "name": "IncludedFilenamesIsNone",
            "location": 59,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/Service.py": {
        "ServiceStart": {
            "name": "ServiceStart",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 117,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ServiceAddName": {
            "name": "ServiceAddName",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ],
                "name": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 120,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ],
                "name": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "ServiceAddCalls": {
            "name": "ServiceAddCalls",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Optional[Dict]"
                ],
                "calls": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Optional[Dict]"
                ]
            }
        },
        "AddCalls": {
            "name": "AddCalls",
            "location": 123,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "list",
                    "str"
                ],
                "calls": [
                    "list",
                    "str"
                ]
            }
        },
        "ServiceStartCallsVector": {
            "name": "ServiceStartCallsVector",
            "location": 125,
            "return": [
                "str",
                "Callable[[None], None]",
                "Tuple[str]",
                "Iterable[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "StartCallsVector": {
            "name": "StartCallsVector",
            "location": 126,
            "return": [],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "Hashable"
                ],
                "numElems": [
                    "bool",
                    "int",
                    "Hashable"
                ]
            }
        },
        "ServiceAddAttributes": {
            "name": "ServiceAddAttributes",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "attributes": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 129,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ServiceStartAttributesVector": {
            "name": "ServiceStartAttributesVector",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ServiceAddDocumentation": {
            "name": "ServiceAddDocumentation",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "documentation": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 135,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ServiceStartDocumentationVector": {
            "name": "ServiceStartDocumentationVector",
            "location": 137,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ServiceAddDeclarationFile": {
            "name": "ServiceAddDeclarationFile",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ],
                "declarationFile": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "AddDeclarationFile": {
            "name": "AddDeclarationFile",
            "location": 141,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "declarationFile": [
                    "str"
                ]
            }
        },
        "ServiceEnd": {
            "name": "ServiceEnd",
            "location": 143,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 144,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Service.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Service.GetRootAsService": {
            "name": "GetRootAsService",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "Service.ServiceBufferHasIdentifier": {
            "name": "ServiceBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Service.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Service.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.Calls": {
            "name": "Calls",
            "location": 39,
            "return": [
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "tuple",
                    "bool",
                    "str"
                ]
            }
        },
        "Service.CallsLength": {
            "name": "CallsLength",
            "location": 52,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.CallsIsNone": {
            "name": "CallsIsNone",
            "location": 59,
            "return": [
                "str",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.Attributes": {
            "name": "Attributes",
            "location": 64,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Service.AttributesLength": {
            "name": "AttributesLength",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 84,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.Documentation": {
            "name": "Documentation",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "Service.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 104,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.DeclarationFile": {
            "name": "DeclarationFile",
            "location": 110,
            "return": [
                "str",
                "float",
                "Tuple[str, str]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/Type.py": {
        "TypeStart": {
            "name": "TypeStart",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "Optional[List]",
                    "type"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 76,
            "return": [
                "tuple"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TypeAddBaseType": {
            "name": "TypeAddBaseType",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable"
                ],
                "baseType": [
                    "Callable"
                ]
            }
        },
        "AddBaseType": {
            "name": "AddBaseType",
            "location": 79,
            "return": [],
            "arguments": {
                "builder": [
                    "bool"
                ],
                "baseType": [
                    "bool"
                ]
            }
        },
        "TypeAddElement": {
            "name": "TypeAddElement",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "bool",
                    "Type[\"DataFrame\"]"
                ],
                "element": [
                    "Callable",
                    "bool",
                    "Type[\"DataFrame\"]"
                ]
            }
        },
        "AddElement": {
            "name": "AddElement",
            "location": 82,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "dict",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "element": [
                    "Callable",
                    "dict",
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "TypeAddIndex": {
            "name": "TypeAddIndex",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Optional[List]",
                    "bool",
                    "dict"
                ],
                "index": [
                    "Optional[List]",
                    "bool",
                    "dict"
                ]
            }
        },
        "AddIndex": {
            "name": "AddIndex",
            "location": 85,
            "return": [
                "bool",
                "Type",
                "int"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "index": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "TypeAddFixedLength": {
            "name": "TypeAddFixedLength",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Optional[List]",
                    "bool",
                    "dict"
                ],
                "fixedLength": [
                    "Optional[List]",
                    "bool",
                    "dict"
                ]
            }
        },
        "AddFixedLength": {
            "name": "AddFixedLength",
            "location": 88,
            "return": [
                "str",
                "Callable",
                "Type"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "fixedLength": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TypeAddBaseSize": {
            "name": "TypeAddBaseSize",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[Tuple[str]]",
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "baseSize": [
                    "str",
                    "Optional[Tuple[str]]",
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "AddBaseSize": {
            "name": "AddBaseSize",
            "location": 91,
            "return": [
                "bool",
                "Callable",
                "int"
            ],
            "arguments": {
                "builder": [
                    "int",
                    "str",
                    "Optional[str]",
                    "type"
                ],
                "baseSize": [
                    "int",
                    "str",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "TypeAddElementSize": {
            "name": "TypeAddElementSize",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Set[Tuple[str, Any]]",
                    "List[Dict[str, Any]]"
                ],
                "elementSize": [
                    "Set[Tuple[str, Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AddElementSize": {
            "name": "AddElementSize",
            "location": 94,
            "return": [
                "str",
                "Mapping[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int"
                ],
                "elementSize": [
                    "str",
                    "int"
                ]
            }
        },
        "TypeEnd": {
            "name": "TypeEnd",
            "location": 96,
            "return": [
                "Optional[str]",
                "str",
                "Optional[BaseException]",
                "Optional[Iterable[Any]]",
                "Callable",
                "Type"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 97,
            "return": [
                "Type",
                "str",
                "int"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Type.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Type.GetRootAsType": {
            "name": "GetRootAsType",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "IO[bytes]",
                    "Union[str, bytes]",
                    "Tuple[bytes]",
                    "dict"
                ],
                "buf": [
                    "str",
                    "Dict[str, Any]",
                    "IO[bytes]",
                    "Union[str, bytes]",
                    "Tuple[bytes]",
                    "dict"
                ],
                "offset": [
                    "str",
                    "Dict[str, Any]",
                    "IO[bytes]",
                    "Union[str, bytes]",
                    "Tuple[bytes]",
                    "dict"
                ]
            }
        },
        "Type.TypeBufferHasIdentifier": {
            "name": "TypeBufferHasIdentifier",
            "location": 24,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "type",
                    "float",
                    "str"
                ],
                "buf": [
                    "int",
                    "bool"
                ],
                "offset": [
                    "int",
                    "bool"
                ],
                "size_prefixed": [
                    "int",
                    "bool"
                ]
            }
        },
        "Type.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Type.BaseType": {
            "name": "BaseType",
            "location": 32,
            "return": [
                "Tuple[str]",
                "Set[str]",
                "Union[str, List[str]]",
                "Callable[[str], str]",
                "Optional[str]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.Element": {
            "name": "Element",
            "location": 39,
            "return": [
                "Optional[str]",
                "str",
                "dict",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.Index": {
            "name": "Index",
            "location": 46,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.FixedLength": {
            "name": "FixedLength",
            "location": 53,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.BaseSize": {
            "name": "BaseSize",
            "location": 61,
            "return": [
                "str",
                "Tuple[int, List[str]]",
                "bool",
                "List[str]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.ElementSize": {
            "name": "ElementSize",
            "location": 69,
            "return": [
                "str",
                "tuple",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/flatbuffers/reflection/__init__.py": {},
    "zlmdb-master/tests/test_cbor.py": {
        "test": {
            "name": "test",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "User.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.marshal": {
            "name": "marshal",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.parse": {
            "name": "parse",
            "location": 61,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "zlmdb-master/tests/test_fbs_reflection.py": {},
    "zlmdb-master/tests/test_flatbuffers.py": {
        "test": {
            "name": "test",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zlmdb-master/tests/test_new.py": {
        "Foo.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "oid": [
                    "List[Tuple[int, float]]",
                    "int",
                    "str",
                    "float"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]"
                ],
                "msg": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "Foo.unmarshal": {
            "name": "unmarshal",
            "location": 17,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Foo.marshal": {
            "name": "marshal",
            "location": 20,
            "return": [
                "int",
                "str",
                "dict",
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/tests/test_ops.py": {
        "test_insert1": {
            "name": "test_insert1",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_insert2": {
            "name": "test_insert2",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_insert3": {
            "name": "test_insert3",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_by_auth": {
            "name": "test_by_auth",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_by_email": {
            "name": "test_by_email",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_truncate_index": {
            "name": "test_truncate_index",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "zlmdb-master/tests/test_pickle.py": {
        "test": {
            "name": "test",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "User.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/tests/test_zlmdb.py": {
        "response": {
            "name": "response",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_content": {
            "name": "test_content",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "List[str]",
                    "dict"
                ]
            }
        },
        "test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zlmdb-master/tests/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.marshal": {
            "name": "marshal",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.parse": {
            "name": "parse",
            "location": 41,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "zlmdb-master/tests/user_typed.py": {
        "User.marshal": {
            "name": "marshal",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.parse": {
            "name": "parse",
            "location": 40,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "zlmdb-master/tests/zdb/test_zdb_df.py": {
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "reactor": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "_DataFrameValuesMixin.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "marshal": [
                    "int",
                    "bool",
                    "float"
                ],
                "unmarshal": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_DataFrameValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 28,
            "return": [
                "Dict[str, int]",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "_DataFrameValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 31,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "MapStringDataFrame.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MySchema.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/tests/zdb/test_zdb_dyn.py": {
        "main": {
            "name": "main",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "reactor": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "User.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[str]",
                    "Hashable"
                ]
            }
        },
        "User.__ne__": {
            "name": "__ne__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.marshal": {
            "name": "marshal",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.parse": {
            "name": "parse",
            "location": 87,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.create_test_user": {
            "name": "create_test_user",
            "location": 106,
            "return": [
                "bool",
                "set"
            ],
            "arguments": {
                "oid": [
                    "Optional[int]",
                    "Dict[str, Any]",
                    "datetime.timedelta"
                ]
            }
        }
    },
    "zlmdb-master/tests/zdb/test_zdb_etcd.py": {
        "main": {
            "name": "main",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "reactor": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "MySchema.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "main.on_change": {
            "name": "on_change",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "kv": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "zlmdb-master/tests/zdb/test_zdb_fbs.py": {
        "main2": {
            "name": "main2",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "reactor": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "UsersSchema.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/tests/zdb/_schema_fbs.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "from_fbs": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "User.name": {
            "name": "name",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "User.authid": {
            "name": "authid",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.uuid": {
            "name": "uuid",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.email": {
            "name": "email",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "User.birthday": {
            "name": "birthday",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.is_friendly": {
            "name": "is_friendly",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Union[str, uuid.UUID]",
                    "List[str]",
                    "float",
                    "Callable[[object], Any]"
                ]
            }
        },
        "User.ratings": {
            "name": "ratings",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.friends": {
            "name": "friends",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.referred_by": {
            "name": "referred_by",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.build": {
            "name": "build",
            "location": 140,
            "return": [
                "bool",
                "str",
                "arxiv.users.domain.User"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "Callable",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.cast": {
            "name": "cast",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "buf": []
            }
        },
        "User.create_test_user": {
            "name": "create_test_user",
            "location": 189,
            "return": [
                "User",
                "core.models.User",
                "bool",
                "app.models.User",
                "set"
            ],
            "arguments": {
                "oid": [
                    "Optional[int]",
                    "Dict[str, Any]",
                    "datetime.timedelta"
                ]
            }
        }
    },
    "zlmdb-master/tests/_gen/crossbarfx/Date.py": {
        "CreateDate": {
            "name": "CreateDate",
            "location": 21,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "builder": [
                    "float",
                    "TypeError",
                    "Optional[str]",
                    "Callable[[None], None]",
                    "Union[List[Any], List[Any]]"
                ],
                "year": [
                    "List[str]",
                    "Iterable[str]",
                    "str",
                    "Optional[int]"
                ],
                "month": [
                    "List[str]",
                    "Iterable[str]",
                    "str",
                    "Optional[int]"
                ],
                "day": [
                    "List[str]",
                    "Iterable[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Date.Init": {
            "name": "Init",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Date.Year": {
            "name": "Year",
            "location": 15,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.Month": {
            "name": "Month",
            "location": 17,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.Day": {
            "name": "Day",
            "location": 19,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/tests/_gen/crossbarfx/Rating.py": {
        "RatingStart": {
            "name": "RatingStart",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "RatingAddName": {
            "name": "RatingAddName",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ],
                "name": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ]
            }
        },
        "RatingAddRating": {
            "name": "RatingAddRating",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "rating": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "RatingEnd": {
            "name": "RatingEnd",
            "location": 38,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "Rating.GetRootAsRating": {
            "name": "GetRootAsRating",
            "location": 11,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Rating.Init": {
            "name": "Init",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Rating.Name": {
            "name": "Name",
            "location": 22,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rating.Rating": {
            "name": "Rating",
            "location": 29,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/tests/_gen/crossbarfx/Tag.py": {},
    "zlmdb-master/tests/_gen/crossbarfx/User.py": {
        "UserStart": {
            "name": "UserStart",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "List[bool]"
                ]
            }
        },
        "UserAddName": {
            "name": "UserAddName",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ],
                "name": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "UserAddAuthid": {
            "name": "UserAddAuthid",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "ClassVar",
                    "bool",
                    "List[Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ],
                "authid": [
                    "Callable",
                    "ClassVar",
                    "bool",
                    "List[Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "UserAddEmail": {
            "name": "UserAddEmail",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "dict"
                ],
                "email": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "UserAddBirthday": {
            "name": "UserAddBirthday",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "ClassVar",
                    "bool",
                    "List[Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ],
                "birthday": [
                    "Callable",
                    "ClassVar",
                    "bool",
                    "List[Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "UserAddIsFriendly": {
            "name": "UserAddIsFriendly",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "isFriendly": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "UserAddTags": {
            "name": "UserAddTags",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "tags": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "UserStartTagsVector": {
            "name": "UserStartTagsVector",
            "location": 109,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "numElems": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "UserAddRatings": {
            "name": "UserAddRatings",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "ClassVar",
                    "bool",
                    "List[Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ],
                "ratings": [
                    "Callable",
                    "ClassVar",
                    "bool",
                    "List[Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "UserStartRatingsVector": {
            "name": "UserStartRatingsVector",
            "location": 111,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "float",
                    "bool",
                    "str"
                ],
                "numElems": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "UserEnd": {
            "name": "UserEnd",
            "location": 112,
            "return": [
                "Callable[[List, bool], None]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "User.GetRootAsUser": {
            "name": "GetRootAsUser",
            "location": 11,
            "return": [
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Union[str, bytes]"
                ],
                "buf": [
                    "bytes",
                    "bytearray",
                    "str",
                    "bool",
                    "int"
                ],
                "offset": [
                    "bytes",
                    "bytearray",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "User.Init": {
            "name": "Init",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "User.Name": {
            "name": "Name",
            "location": 22,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.Authid": {
            "name": "Authid",
            "location": 29,
            "return": [
                "str",
                "int",
                "AnyStr",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.Email": {
            "name": "Email",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.Birthday": {
            "name": "Birthday",
            "location": 43,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.IsFriendly": {
            "name": "IsFriendly",
            "location": 54,
            "return": [
                "Optional[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.Tags": {
            "name": "Tags",
            "location": 61,
            "return": [
                "str",
                "IO",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "User.TagsAsNumpy": {
            "name": "TagsAsNumpy",
            "location": 69,
            "return": [
                "int",
                "bool",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.TagsLength": {
            "name": "TagsLength",
            "location": 76,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.Ratings": {
            "name": "Ratings",
            "location": 83,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "User.RatingsLength": {
            "name": "RatingsLength",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/tests/_gen/crossbarfx/__init__.py": {},
    "zlmdb-master/zlmdb/cli.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "zlmdb-master/zlmdb/_database.py": {
        "ConfigurationElement.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "oid": [
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "str",
                    "type"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[object]"
                ],
                "description": [
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "str",
                    "type"
                ],
                "tags": [
                    "Optional[str]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "ConfigurationElement.__eq__": {
            "name": "__eq__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "T_co"
                ]
            }
        },
        "ConfigurationElement.__ne__": {
            "name": "__ne__",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "ConfigurationElement.oid": {
            "name": "oid",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationElement.name": {
            "name": "name",
            "location": 102,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationElement.description": {
            "name": "description",
            "location": 106,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationElement.tags": {
            "name": "tags",
            "location": 110,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationElement.marshal": {
            "name": "marshal",
            "location": 113,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationElement.parse": {
            "name": "parse",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Slot.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "oid": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Union[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "name": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Union[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "description": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Union[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "tags": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Union[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "slot": [
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "str",
                    "type"
                ],
                "creator": [
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "str",
                    "type"
                ]
            }
        },
        "Slot.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.creator": {
            "name": "creator",
            "location": 147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.slot": {
            "name": "slot",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.marshal": {
            "name": "marshal",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.parse": {
            "name": "parse",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "int",
                    "bool",
                    "float"
                ],
                "slots": [
                    "int",
                    "bool",
                    "float"
                ],
                "slots_byname": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Schema.__str__": {
            "name": "__str__",
            "location": 186,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.__getitem__": {
            "name": "__getitem__",
            "location": 189,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Schema.__setitem__": {
            "name": "__setitem__",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Schema.__delitem__": {
            "name": "__delitem__",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Schema.__len__": {
            "name": "__len__",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.__iter__": {
            "name": "__iter__",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.parse": {
            "name": "parse",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "klassmap": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dbpath": [
                    "bool",
                    "int",
                    "bytes",
                    "List[int]",
                    "List[float]"
                ],
                "maxsize": [
                    "bool",
                    "int",
                    "bytes",
                    "List[int]",
                    "List[float]"
                ],
                "readonly": [
                    "bool",
                    "int",
                    "bytes",
                    "List[int]",
                    "List[float]"
                ],
                "lock": [
                    "bool",
                    "int",
                    "bytes",
                    "List[int]",
                    "List[float]"
                ],
                "sync": [
                    "bool",
                    "int",
                    "bytes",
                    "List[int]",
                    "List[float]"
                ],
                "create": [
                    "bool",
                    "int",
                    "bytes",
                    "List[int]",
                    "List[float]"
                ],
                "open_now": [
                    "bool",
                    "int",
                    "bytes",
                    "List[int]",
                    "List[float]"
                ],
                "context": [
                    "int",
                    "bool",
                    "list"
                ],
                "log": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.__enter__": {
            "name": "__enter__",
            "location": 352,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.__exit__": {
            "name": "__exit__",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "Database.context": {
            "name": "context",
            "location": 423,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.dbpath": {
            "name": "dbpath",
            "location": 427,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.maxsize": {
            "name": "maxsize",
            "location": 431,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.is_sync": {
            "name": "is_sync",
            "location": 435,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.is_readonly": {
            "name": "is_readonly",
            "location": 439,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.is_open": {
            "name": "is_open",
            "location": 443,
            "return": [
                "bool",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.scratch": {
            "name": "scratch",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "dbpath": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Database.begin": {
            "name": "begin",
            "location": 454,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "write": [
                    "str"
                ],
                "buffers": [
                    "str",
                    "int"
                ],
                "stats": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.sync": {
            "name": "sync",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Database.config": {
            "name": "config",
            "location": 468,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.stats": {
            "name": "stats",
            "location": 482,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "include_slots": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Database._cache_slots": {
            "name": "_cache_slots",
            "location": 537,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database._get_slots": {
            "name": "_get_slots",
            "location": 565,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cached": [
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "Database._get_free_slot": {
            "name": "_get_free_slot",
            "location": 575,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database._set_slot": {
            "name": "_set_slot",
            "location": 587,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot_index": [
                    "int",
                    "str",
                    "List[int]",
                    "float",
                    "Sequence[int]"
                ],
                "slot": [
                    "Optional[bool]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Database.attach_table": {
            "name": "attach_table",
            "location": 625,
            "return": [
                "int",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "klass": [
                    "Iterable[Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Database._attach_slot": {
            "name": "_attach_slot",
            "location": 663,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "oid": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[str]"
                ],
                "klass": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "marshal": [
                    "str",
                    "Optional[str]",
                    "Union[str, bool]",
                    "Optional[TextIO]",
                    "TextIO",
                    "Optional[Callable[[str], str]]",
                    "bool"
                ],
                "parse": [
                    "Optional[str]",
                    "Optional[TextIO]",
                    "Union[str, bool]",
                    "Optional[Callable[[str], str]]"
                ],
                "build": [
                    "str",
                    "Optional[str]",
                    "Union[str, bool]",
                    "TextIO",
                    "Optional[TextIO]",
                    "Optional[Callable[[str], str]]"
                ],
                "cast": [
                    "str",
                    "Optional[str]",
                    "Union[str, bool]",
                    "Optional[TextIO]",
                    "TextIO",
                    "Optional[Callable[[str], str]]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "bool"
                ],
                "create": [
                    "str",
                    "bool",
                    "Optional[Mapping]"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Union[str, IO]"
                ],
                "description": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "qual": {
            "name": "qual",
            "location": 51,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "klass": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "zlmdb-master/zlmdb/_errors.py": {},
    "zlmdb-master/zlmdb/_meta.py": {},
    "zlmdb-master/zlmdb/_pmap.py": {
        "is_null": {
            "name": "is_null",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "T",
                    "Sequence[float]",
                    "Set[str]",
                    "List[\"Variable\"]"
                ]
            }
        },
        "qual": {
            "name": "qual",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "list",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "Index.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "Optional[List[str]]"
                ],
                "fkey": [
                    "bool",
                    "str"
                ],
                "pmap": [
                    "bool",
                    "str"
                ],
                "nullable": [
                    "bool",
                    "str"
                ],
                "unique": [
                    "bool",
                    "str"
                ]
            }
        },
        "Index.name": {
            "name": "name",
            "location": 81,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.fkey": {
            "name": "fkey",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.pmap": {
            "name": "pmap",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.nullable": {
            "name": "nullable",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.unique": {
            "name": "unique",
            "location": 122,
            "return": [
                "str",
                "int",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "Union[int, str]",
                    "Optional[int]",
                    "int",
                    "dict",
                    "float"
                ],
                "compress": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "PersistentMap.indexes": {
            "name": "indexes",
            "location": 200,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.is_index": {
            "name": "is_index",
            "location": 207,
            "return": [
                "str",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.attach_index": {
            "name": "attach_index",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "FrozenSet[str]",
                    "bool",
                    "Hashable"
                ],
                "pmap": [
                    "str",
                    "Tuple[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "fkey": [
                    "bool",
                    "str",
                    "int"
                ],
                "nullable": [
                    "bool",
                    "str",
                    "int"
                ],
                "unique": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "PersistentMap.detach_index": {
            "name": "detach_index",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Callable",
                    "Iterable[str]"
                ]
            }
        },
        "PersistentMap._serialize_key": {
            "name": "_serialize_key",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "KT",
                    "list",
                    "bytes"
                ]
            }
        },
        "PersistentMap._deserialize_key": {
            "name": "_deserialize_key",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Mapping[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PersistentMap._serialize_value": {
            "name": "_serialize_value",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "PersistentMap._deserialize_value": {
            "name": "_deserialize_value",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "PersistentMap.__contains__": {
            "name": "__contains__",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "txn_key": [
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "abc.graph.EdgeKeyType"
                ]
            }
        },
        "PersistentMap.__getitem__": {
            "name": "__getitem__",
            "location": 275,
            "return": [
                "bool",
                "float",
                "Dict[str, \"Module\"]",
                "Optional[DefaultDict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "txn_key": [
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "abc.graph.EdgeKeyType"
                ]
            }
        },
        "PersistentMap.__setitem__": {
            "name": "__setitem__",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txn_key": [
                    "bool",
                    "\"VersionedAnalyzer\"",
                    "set",
                    "dict",
                    "str"
                ],
                "value": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "PersistentMap.__delitem__": {
            "name": "__delitem__",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txn_key": [
                    "str",
                    "int",
                    "Callable",
                    "bytes",
                    "MutableMapping[Any, Any]"
                ]
            }
        },
        "PersistentMap.__len__": {
            "name": "__len__",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.__iter__": {
            "name": "__iter__",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMap.select": {
            "name": "select",
            "location": 378,
            "return": [
                "Optional[int]",
                "str",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "txn": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "List[str]"
                ],
                "from_key": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "List[str]"
                ],
                "to_key": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "List[str]"
                ],
                "return_keys": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "return_values": [
                    "str",
                    "bool"
                ],
                "reverse": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[str]"
                ],
                "limit": [
                    "Optional[str]",
                    "Optional[Sequence[int]]",
                    "bytes"
                ]
            }
        },
        "PersistentMap.count": {
            "name": "count",
            "location": 419,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "txn": [
                    "int",
                    "Callable",
                    "str"
                ],
                "prefix": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "dict",
                    "Iterable",
                    "type"
                ]
            }
        },
        "PersistentMap.count_range": {
            "name": "count_range",
            "location": 452,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "txn": [
                    "str"
                ],
                "from_key": [
                    "dict",
                    "T",
                    "data_platform.datasource.abc.doc.DocKeyPair",
                    "str"
                ],
                "to_key": [
                    "str",
                    "dict",
                    "bytes",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "PersistentMap.truncate": {
            "name": "truncate",
            "location": 481,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "txn": [
                    "float",
                    "bool",
                    "Optional[List[str]]"
                ],
                "rebuild_indexes": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "PersistentMap.rebuild_indexes": {
            "name": "rebuild_indexes",
            "location": 508,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "txn": [
                    "str",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "PersistentMap.rebuild_index": {
            "name": "rebuild_index",
            "location": 524,
            "return": [
                "int",
                "Sequence[int]",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "txn": [
                    "str",
                    "int",
                    "dict",
                    "Union[int, str]"
                ],
                "name": [
                    "Sequence[str]",
                    "str",
                    "Dict[Hashable, Any]"
                ]
            }
        },
        "PersistentMapIterator.__init__": {
            "name": "__init__",
            "location": 565,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txn": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ],
                "pmap": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "from_key": [
                    "bytes",
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "to_key": [
                    "bytes",
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "return_keys": [
                    "str",
                    "Optional[str]",
                    "_types.URLTypes"
                ],
                "return_values": [
                    "str",
                    "bool"
                ],
                "reverse": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ],
                "limit": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "PersistentMapIterator.__iter__": {
            "name": "__iter__",
            "location": 610,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistentMapIterator.__next__": {
            "name": "__next__",
            "location": 631,
            "return": [
                "str",
                "Callable",
                "bytes",
                "Dict[str, Set[str]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapSlotUuidUuid.__init__": {
            "name": "__init__",
            "location": 691,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidString.__init__": {
            "name": "__init__",
            "location": 699,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidOid.__init__": {
            "name": "__init__",
            "location": 707,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidUuid.__init__": {
            "name": "__init__",
            "location": 715,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidUuidCbor.__init__": {
            "name": "__init__",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapUuidTimestampBytes32.__init__": {
            "name": "__init__",
            "location": 732,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUint64TimestampUuid.__init__": {
            "name": "__init__",
            "location": 740,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidUuidUuid.__init__": {
            "name": "__init__",
            "location": 748,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidTimestampUuid.__init__": {
            "name": "__init__",
            "location": 756,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidStringUuid.__init__": {
            "name": "__init__",
            "location": 764,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidUuidStringUuid.__init__": {
            "name": "__init__",
            "location": 772,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidUuidUuidStringUuid.__init__": {
            "name": "__init__",
            "location": 780,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidUuidUuidUuid.__init__": {
            "name": "__init__",
            "location": 788,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidUuidUuidUuidUuid.__init__": {
            "name": "__init__",
            "location": 796,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidStringOid.__init__": {
            "name": "__init__",
            "location": 804,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidUuidSet.__init__": {
            "name": "__init__",
            "location": 812,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidJson.__init__": {
            "name": "__init__",
            "location": 820,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapUuidCbor.__init__": {
            "name": "__init__",
            "location": 829,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapUuidPickle.__init__": {
            "name": "__init__",
            "location": 838,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapUuidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 846,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidTimestampFlatBuffers.__init__": {
            "name": "__init__",
            "location": 855,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapTimestampFlatBuffers.__init__": {
            "name": "__init__",
            "location": 864,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapTimestampUuidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 873,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidTimestampUuidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 883,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUint16UuidTimestampFlatBuffers.__init__": {
            "name": "__init__",
            "location": 893,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidBytes20Uint8FlatBuffers.__init__": {
            "name": "__init__",
            "location": 902,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidBytes20Uint8UuidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 912,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidBytes20Bytes20Uint8UuidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 922,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapTimestampUuidStringFlatBuffers.__init__": {
            "name": "__init__",
            "location": 932,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapTimestampBytes32FlatBuffers.__init__": {
            "name": "__init__",
            "location": 941,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapTimestampStringFlatBuffers.__init__": {
            "name": "__init__",
            "location": 950,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidTimestampCbor.__init__": {
            "name": "__init__",
            "location": 959,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapTimestampUuidCbor.__init__": {
            "name": "__init__",
            "location": 968,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapStringTimestampCbor.__init__": {
            "name": "__init__",
            "location": 977,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapTimestampStringCbor.__init__": {
            "name": "__init__",
            "location": 986,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapStringString.__init__": {
            "name": "__init__",
            "location": 1000,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapStringOid.__init__": {
            "name": "__init__",
            "location": 1008,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapStringOidOid.__init__": {
            "name": "__init__",
            "location": 1016,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapStringUuid.__init__": {
            "name": "__init__",
            "location": 1024,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapStringStringUuid.__init__": {
            "name": "__init__",
            "location": 1032,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapStringStringStringUuid.__init__": {
            "name": "__init__",
            "location": 1040,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapStringJson.__init__": {
            "name": "__init__",
            "location": 1048,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapStringCbor.__init__": {
            "name": "__init__",
            "location": 1057,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapStringPickle.__init__": {
            "name": "__init__",
            "location": 1066,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapStringFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1074,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapOidString.__init__": {
            "name": "__init__",
            "location": 1088,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapOidOid.__init__": {
            "name": "__init__",
            "location": 1096,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapOidUuid.__init__": {
            "name": "__init__",
            "location": 1104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapOidJson.__init__": {
            "name": "__init__",
            "location": 1112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapOidCbor.__init__": {
            "name": "__init__",
            "location": 1121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "marshal": [
                    "bool",
                    "int"
                ],
                "unmarshal": [
                    "bool",
                    "int"
                ]
            }
        },
        "MapOidPickle.__init__": {
            "name": "__init__",
            "location": 1130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapOidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapOidOidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapOid3FlatBuffers.__init__": {
            "name": "__init__",
            "location": 1156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapOidOidSet.__init__": {
            "name": "__init__",
            "location": 1165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapOidStringOid.__init__": {
            "name": "__init__",
            "location": 1173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapOidOidOid.__init__": {
            "name": "__init__",
            "location": 1181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapOidTimestampOid.__init__": {
            "name": "__init__",
            "location": 1189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapOidTimestampFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapOidTimestampStringOid.__init__": {
            "name": "__init__",
            "location": 1206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes32Uuid.__init__": {
            "name": "__init__",
            "location": 1220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes32Timestamp.__init__": {
            "name": "__init__",
            "location": 1228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes32Bytes32.__init__": {
            "name": "__init__",
            "location": 1236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes32FlatBuffers.__init__": {
            "name": "__init__",
            "location": 1244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapBytes32UuidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidBytes32FlatBuffers.__init__": {
            "name": "__init__",
            "location": 1262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidUuidStringFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidUuidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapUuidStringFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapBytes32Bytes32FlatBuffers.__init__": {
            "name": "__init__",
            "location": 1298,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapBytes32StringFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapBytes20Bytes20.__init__": {
            "name": "__init__",
            "location": 1322,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes20Bytes20Timestamp.__init__": {
            "name": "__init__",
            "location": 1330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes20TimestampBytes20.__init__": {
            "name": "__init__",
            "location": 1338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes20TimestampUuid.__init__": {
            "name": "__init__",
            "location": 1346,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes20Uuid.__init__": {
            "name": "__init__",
            "location": 1354,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes20Bytes16.__init__": {
            "name": "__init__",
            "location": 1362,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes20FlatBuffers.__init__": {
            "name": "__init__",
            "location": 1370,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapBytes16FlatBuffers.__init__": {
            "name": "__init__",
            "location": 1379,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapBytes16TimestampUuid.__init__": {
            "name": "__init__",
            "location": 1388,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "compress": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "MapBytes16TimestampUuidFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1397,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapBytes20Bytes20FlatBuffers.__init__": {
            "name": "__init__",
            "location": 1406,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "MapBytes20StringFlatBuffers.__init__": {
            "name": "__init__",
            "location": 1415,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "compress": [
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "build": [
                    "bool",
                    "str",
                    "float"
                ],
                "cast": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        }
    },
    "zlmdb-master/zlmdb/_schema.py": {
        "Slot.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ],
                "pmap": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.slot": {
            "name": "slot",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "slot_index": [
                    "bool"
                ],
                "marshal": [
                    "bool"
                ],
                "unmarshal": [
                    "bool"
                ],
                "build": [
                    "bool"
                ],
                "cast": [
                    "bool"
                ],
                "compress": [
                    "bool"
                ]
            }
        },
        "Schema.slot.decorate": {
            "name": "decorate",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "o": [
                    "Hashable",
                    "float",
                    "type"
                ]
            }
        }
    },
    "zlmdb-master/zlmdb/_transaction.py": {
        "TransactionStats.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionStats.started": {
            "name": "started",
            "location": 45,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionStats.duration": {
            "name": "duration",
            "location": 53,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionStats.reset": {
            "name": "reset",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]"
                ],
                "write": [
                    "Set[str]"
                ],
                "buffers": [
                    "Set[str]"
                ],
                "stats": [
                    "Set[str]"
                ]
            }
        },
        "Transaction.__enter__": {
            "name": "__enter__",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__exit__": {
            "name": "__exit__",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "Type[Exception]",
                    "Type[BaseException]",
                    "BaseException"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "Transaction.id": {
            "name": "id",
            "location": 125,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.get": {
            "name": "get",
            "location": 134,
            "return": [
                "str",
                "int",
                "Optional[float]",
                "Optional[str]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Transaction.put": {
            "name": "put",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes"
                ],
                "data": [
                    "bytes",
                    "str"
                ],
                "overwrite": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Transaction.delete": {
            "name": "delete",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "zlmdb-master/zlmdb/_types.py": {
        "_random_string": {
            "name": "_random_string",
            "location": 60,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "dt_to_bytes": {
            "name": "dt_to_bytes",
            "location": 75,
            "return": [
                "numpy.ndarray",
                "Sequence",
                "str"
            ],
            "arguments": {
                "dt": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "bytes_to_dt": {
            "name": "bytes_to_dt",
            "location": 90,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "_OidKeysMixin.new_key": {
            "name": "new_key",
            "location": 124,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "secure": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "_OidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 134,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "KT",
                    "dict",
                    "Sequence[Hashable]"
                ]
            }
        },
        "_OidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 139,
            "return": [
                "int",
                "bool",
                "IO"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Iterable",
                    "Iterable[T]"
                ]
            }
        },
        "_OidOidKeysMixin.new_key": {
            "name": "new_key",
            "location": 145,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "secure": [
                    "Optional[List[Any]]",
                    "str",
                    "Optional[List[Dict]]",
                    "dict",
                    "bool"
                ]
            }
        },
        "_OidOidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 148,
            "return": [
                "str",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "_OidOidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 158,
            "return": [
                "int",
                "bool",
                "IO"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ]
            }
        },
        "_Oid3KeysMixin.new_key": {
            "name": "new_key",
            "location": 165,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "secure": [
                    "dict",
                    "Optional[List[Any]]",
                    "Optional[List[Dict]]",
                    "bool"
                ]
            }
        },
        "_Oid3KeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 169,
            "return": [
                "str",
                "bool",
                "IO[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_Oid3KeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 181,
            "return": [
                "int",
                "bool",
                "IO"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ]
            }
        },
        "_OidTimestampKeysMixin.new_key": {
            "name": "new_key",
            "location": 188,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "secure": [
                    "str",
                    "bool"
                ]
            }
        },
        "_OidTimestampKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 191,
            "return": [
                "str",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "_OidTimestampKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 200,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "List[Tuple]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "_OidTimestampStringKeysMixin.new_key": {
            "name": "new_key",
            "location": 209,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "secure": [
                    "str",
                    "bool"
                ]
            }
        },
        "_OidTimestampStringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 212,
            "return": [
                "str",
                "numpy.ndarray",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_OidTimestampStringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 222,
            "return": [
                "int",
                "bool",
                "dict",
                "Union[int, float, complex]",
                "Dict[str, Any]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "list",
                    "numpy.ndarray"
                ]
            }
        },
        "_OidStringKeysMixin.new_key": {
            "name": "new_key",
            "location": 234,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "secure": [
                    "str",
                    "bool"
                ]
            }
        },
        "_OidStringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 237,
            "return": [
                "str",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_OidStringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 246,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "_StringOidKeysMixin.new_key": {
            "name": "new_key",
            "location": 257,
            "return": [
                "str",
                "bytes",
                "Sequence[Sequence[Any]]"
            ],
            "arguments": {
                "secure": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "_StringOidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 260,
            "return": [
                "str",
                "int",
                "Callable",
                "List[List[int]]",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_StringOidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 269,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "_StringKeysMixin.new_key": {
            "name": "new_key",
            "location": 280,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_StringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 283,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "_StringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 288,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List[int]",
                    "Union[str, bytes]"
                ]
            }
        },
        "_StringStringKeysMixin.new_key": {
            "name": "new_key",
            "location": 296,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "_StringStringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 299,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_StringStringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 308,
            "return": [
                "dict",
                "str",
                "int",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "numpy.ndarray",
                    "List[int]",
                    "Mapping[str, Union[int, slice]]",
                    "int"
                ]
            }
        },
        "_StringStringStringKeysMixin.new_key": {
            "name": "new_key",
            "location": 318,
            "return": [
                "str",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "_StringStringStringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 321,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "_StringStringStringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 331,
            "return": [
                "str",
                "Callable",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "numpy.ndarray",
                    "List[int]",
                    "Mapping[str, Union[int, slice]]",
                    "int"
                ]
            }
        },
        "_UuidKeysMixin.new_key": {
            "name": "new_key",
            "location": 341,
            "return": [
                "int",
                "str",
                "Tuple[str, int]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "_UuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 346,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_UuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 353,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "_UuidUuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 360,
            "return": [
                "Mapping[int, str]",
                "str",
                "Dict[int, str]",
                "bytes",
                "OrderedDict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_UuidUuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 374,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_UuidUuidUuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 383,
            "return": [
                "str",
                "Mapping[str, Any]",
                "dict",
                "int",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "_UuidUuidUuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 400,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "MutableMapping",
                    "int",
                    "Mapping[str, Union[int, slice]]"
                ]
            }
        },
        "_UuidUuidUuidUuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 409,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int",
                "Mapping",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3_key4": [
                    "str",
                    "List[str]",
                    "Union[str, int]",
                    "Optional[bytes]"
                ]
            }
        },
        "_UuidUuidUuidUuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 429,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[Any]",
                    "List[str]"
                ]
            }
        },
        "_Uint16UuidTimestampKeysMixin.new_key": {
            "name": "new_key",
            "location": 439,
            "return": [
                "dict",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "_Uint16UuidTimestampKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 442,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "_Uint16UuidTimestampKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 459,
            "return": [
                "int",
                "bool",
                "IO",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "MutableMapping",
                    "int",
                    "Mapping[str, Union[int, slice]]"
                ]
            }
        },
        "_UuidBytes20Uint8KeysMixin.new_key": {
            "name": "new_key",
            "location": 468,
            "return": [
                "int",
                "str",
                "Tuple[str, int]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "_UuidBytes20Uint8KeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 471,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "_UuidBytes20Uint8KeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 492,
            "return": [
                "str",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "MutableMapping",
                    "int",
                    "Mapping[str, Union[int, slice]]"
                ]
            }
        },
        "_UuidBytes20Uint8UuidKeysMixin.new_key": {
            "name": "new_key",
            "location": 501,
            "return": [
                "int",
                "str",
                "Tuple[str, int]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "_UuidBytes20Uint8UuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 504,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3_key4": [
                    "str",
                    "List[str]",
                    "Union[str, int]",
                    "Optional[bytes]"
                ]
            }
        },
        "_UuidBytes20Uint8UuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 524,
            "return": [
                "str",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[Any]",
                    "List[str]"
                ]
            }
        },
        "_UuidBytes20Bytes20Uint8UuidKeysMixin.new_key": {
            "name": "new_key",
            "location": 533,
            "return": [
                "str",
                "numpy.ndarray"
            ],
            "arguments": {}
        },
        "_UuidBytes20Bytes20Uint8UuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 536,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[int, str]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3_key4_key5": [
                    "str"
                ]
            }
        },
        "_UuidBytes20Bytes20Uint8UuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 559,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, str]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "_TimestampKeysMixin.new_key": {
            "name": "new_key",
            "location": 568,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "_TimestampKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 571,
            "return": [
                "bool",
                "str",
                "Dict[str, str]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "key1": [
                    "str",
                    "List[bytes]",
                    "Tuple[str, str, str]",
                    "int",
                    "bool"
                ]
            }
        },
        "_TimestampKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 576,
            "return": [
                "str",
                "Optional[Dict[str, bytes]]",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List[int]",
                    "int"
                ]
            }
        },
        "_TimestampUuidKeysMixin.new_key": {
            "name": "new_key",
            "location": 585,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "_TimestampUuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 588,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_TimestampUuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 602,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_UuidTimestampUuidKeysMixin.new_key": {
            "name": "new_key",
            "location": 615,
            "return": [
                "dict",
                "int",
                "str",
                "float",
                "Iterable[int]"
            ],
            "arguments": {}
        },
        "_UuidTimestampUuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 618,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "_UuidTimestampUuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 635,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "MutableMapping",
                    "int",
                    "Mapping[str, Union[int, slice]]"
                ]
            }
        },
        "_TimestampUuidStringKeysMixin.new_key": {
            "name": "new_key",
            "location": 649,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "_TimestampUuidStringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 652,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "_TimestampUuidStringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 669,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "MutableMapping",
                    "int",
                    "Mapping[str, Union[int, slice]]"
                ]
            }
        },
        "_TimestampBytes32KeysMixin.new_key": {
            "name": "new_key",
            "location": 683,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "_TimestampBytes32KeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 686,
            "return": [
                "str",
                "Mapping",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_TimestampBytes32KeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 701,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[int]"
                ]
            }
        },
        "_TimestampStringKeysMixin.new_key": {
            "name": "new_key",
            "location": 714,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "_TimestampStringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 717,
            "return": [
                "str",
                "Mapping",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_TimestampStringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 731,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_StringTimestampKeysMixin.new_key": {
            "name": "new_key",
            "location": 743,
            "return": [
                "str",
                "dict",
                "List[Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "_StringTimestampKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 746,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_StringTimestampKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 760,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List[int]",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "_UuidTimestampKeysMixin.new_key": {
            "name": "new_key",
            "location": 773,
            "return": [
                "str",
                "Iterable[int]",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "_UuidTimestampKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 776,
            "return": [
                "Mapping[str, Any]",
                "str",
                "dict",
                "Mapping",
                "Dict[str, Union[str, int]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_UuidTimestampKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 790,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_Uint64TimestampKeysMixin.new_key": {
            "name": "new_key",
            "location": 802,
            "return": [
                "str",
                "Iterable[int]",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "_Uint64TimestampKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 805,
            "return": [
                "List[Callable]",
                "bool",
                "Optional[Callable[[str], bool]]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_Uint64TimestampKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 819,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_UuidStringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 830,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_UuidStringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 846,
            "return": [
                "str",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List[int]",
                    "Mapping[str, Union[int, slice]]",
                    "Tuple[int, int]",
                    "Dict[str, str]"
                ]
            }
        },
        "_SlotUuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 858,
            "return": [
                "str",
                "int",
                "Callable[[Dict], Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_SlotUuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 868,
            "return": [
                "int",
                "bool",
                "IO",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_Bytes32KeysMixin.new_key": {
            "name": "new_key",
            "location": 878,
            "return": [
                "int",
                "str",
                "Tuple[str, int]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "_Bytes32KeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 881,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, int]",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        },
        "_Bytes32KeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 887,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "_Bytes32Bytes32KeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 895,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_Bytes32Bytes32KeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 907,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_Bytes32UuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 916,
            "return": [
                "str",
                "bytes",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_Bytes32UuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 927,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_UuidBytes32KeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 936,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_UuidBytes32KeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 947,
            "return": [
                "str",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_Bytes32StringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 956,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_Bytes32StringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 968,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_UuidUuidStringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 977,
            "return": [
                "bool",
                "int",
                "str",
                "Mapping",
                "List[Dict[str, Any]]",
                "Dict[int, str]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "_UuidUuidStringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 987,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "MutableMapping",
                    "int",
                    "Mapping[str, Union[int, slice]]"
                ]
            }
        },
        "_UuidUuidUuidStringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 996,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int",
                "Mapping",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key1_key2_key3_key4": [
                    "str",
                    "List[str]",
                    "Union[str, int]",
                    "Optional[bytes]"
                ]
            }
        },
        "_UuidUuidUuidStringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 1007,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[Any]",
                    "List[str]"
                ]
            }
        },
        "_Bytes20KeysMixin.new_key": {
            "name": "new_key",
            "location": 1017,
            "return": [
                "int",
                "str",
                "Tuple[str, int]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "_Bytes20KeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 1020,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Union[str, int]",
                    "list"
                ]
            }
        },
        "_Bytes20KeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 1025,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[int]"
                ]
            }
        },
        "_Bytes16KeysMixin.new_key": {
            "name": "new_key",
            "location": 1033,
            "return": [
                "int",
                "str",
                "Tuple[str, int]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "_Bytes16KeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 1036,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Union[str, int]",
                    "list"
                ]
            }
        },
        "_Bytes16KeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 1041,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[int]"
                ]
            }
        },
        "_Bytes20Bytes20KeysMixin.new_key": {
            "name": "new_key",
            "location": 1049,
            "return": [
                "str",
                "List[str]",
                "IO"
            ],
            "arguments": {}
        },
        "_Bytes20Bytes20KeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 1052,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_Bytes20Bytes20KeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 1064,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_Bytes20StringKeysMixin.new_key": {
            "name": "new_key",
            "location": 1074,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_Bytes20StringKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 1077,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "key1_key2": [
                    "str",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_Bytes20StringKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 1089,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Mapping[str, Union[int, slice]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "_Bytes20TimestampKeysMixin.new_key": {
            "name": "new_key",
            "location": 1099,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_Bytes20TimestampKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 1102,
            "return": [
                "dict",
                "int",
                "bool",
                "str",
                "Mapping",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str"
                ]
            }
        },
        "_Bytes20TimestampKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 1116,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[str, bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_Bytes16TimestampKeysMixin.new_key": {
            "name": "new_key",
            "location": 1131,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_Bytes16TimestampKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 1134,
            "return": [
                "dict",
                "int",
                "bool",
                "str",
                "Mapping",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str"
                ]
            }
        },
        "_Bytes16TimestampKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 1148,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[str, bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_Bytes16TimestampUuidKeysMixin.new_key": {
            "name": "new_key",
            "location": 1163,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_Bytes16TimestampUuidKeysMixin._serialize_key": {
            "name": "_serialize_key",
            "location": 1166,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str"
                ]
            }
        },
        "_Bytes16TimestampUuidKeysMixin._deserialize_key": {
            "name": "_deserialize_key",
            "location": 1181,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[bytes, str]",
                    "Dict[str, Any]",
                    "Union[str, bytes]"
                ]
            }
        },
        "_StringValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1202,
            "return": [
                "str",
                "Type[T]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "str",
                    "T",
                    "Optional[Union[str, Any]]",
                    "Optional[T]",
                    "Union[None, float, int, str]"
                ]
            }
        },
        "_StringValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1210,
            "return": [
                "dict",
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "_StringSetValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1218,
            "return": [
                "str",
                "Union[bytes, bytearray]",
                "int",
                "bytes",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "value_set": [
                    "str",
                    "Union[str, Callable]"
                ]
            }
        },
        "_StringSetValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1225,
            "return": [
                "bool",
                "str",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Iterable[Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[bytes, bytearray, memoryview]",
                    "Optional[bytes]",
                    "Union[int, numpy.ndarray]",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "_OidValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1231,
            "return": [
                "int",
                "tuple",
                "List[int]",
                "str",
                "Dict[str, Any]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "dict",
                    "int",
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "_OidValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1237,
            "return": [
                "Callable",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "_OidSetValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1242,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value_set": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "_OidSetValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1248,
            "return": [
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "numpy.ndarray",
                    "bytes",
                    "Sequence[T]",
                    "List[float]",
                    "int",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "_UuidValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1256,
            "return": [
                "bool",
                "Union[int, Tuple[int, ...]]",
                "int",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "_UuidValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1266,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "dict",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "_TimestampValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1276,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "int",
                    "Optional[numpy.ndarray]",
                    "Dict[str, Any]",
                    "Optional[float]",
                    "bool",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "_TimestampValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1284,
            "return": [
                "bool",
                "int",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "_Bytes32ValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1294,
            "return": [
                "int",
                "Type[T]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "Union[bytes, str, None]",
                    "list"
                ]
            }
        },
        "_Bytes32ValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1301,
            "return": [
                "Optional[int]",
                "Optional[Iterable[Any]]",
                "Callable",
                "Optional[T]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[str, bytes]",
                    "str"
                ]
            }
        },
        "_Bytes20ValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1310,
            "return": [
                "int",
                "Type[T]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "Union[bytes, str, None]",
                    "list"
                ]
            }
        },
        "_Bytes20ValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1317,
            "return": [
                "Optional[int]",
                "Optional[Iterable[Any]]",
                "Callable",
                "Optional[T]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[str, bytes]",
                    "str"
                ]
            }
        },
        "_Bytes20TimestampValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1326,
            "return": [
                "bool",
                "str",
                "int",
                "Sequence[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "List[int]",
                    "list",
                    "tuple",
                    "Union[str, list]",
                    "int",
                    "float",
                    "T",
                    "str"
                ]
            }
        },
        "_Bytes20TimestampValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1339,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "_Bytes16ValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1353,
            "return": [
                "int",
                "Type[T]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "Union[bytes, str, None]",
                    "list"
                ]
            }
        },
        "_Bytes16ValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1360,
            "return": [
                "Optional[int]",
                "Optional[Iterable[Any]]",
                "Callable",
                "Optional[T]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[str, bytes]",
                    "str"
                ]
            }
        },
        "_UuidSetValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1369,
            "return": [
                "Optional[Any]",
                "Tuple[int, int]",
                "List[str]",
                "tuple",
                "int"
            ],
            "arguments": {
                "self": [],
                "value_set": [
                    "str",
                    "List[dict]"
                ]
            }
        },
        "_UuidSetValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1373,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "T"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "numpy.ndarray",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "_JsonValuesMixin.__init__": {
            "name": "__init__",
            "location": 1381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "marshal": [
                    "int",
                    "bool",
                    "float"
                ],
                "unmarshal": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_JsonValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1398,
            "return": [
                "int",
                "tuple",
                "List[int]",
                "str",
                "Dict[str, Any]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[List[str]]",
                    "str",
                    "Union[bool, str]",
                    "float"
                ]
            }
        },
        "_JsonValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1402,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "_CborValuesMixin.__init__": {
            "name": "__init__",
            "location": 1407,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "marshal": [
                    "int",
                    "bool",
                    "float"
                ],
                "unmarshal": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_CborValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1424,
            "return": [
                "int",
                "tuple",
                "List[int]",
                "str",
                "Dict[str, Any]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable",
                    "dict"
                ]
            }
        },
        "_CborValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1427,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Callable",
                    "Union[Dict, List]",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "_PickleValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1436,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "Iterable[numpy.dtype]",
                "Callable[[Mapping], T]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "_PickleValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1439,
            "return": [
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "T"
                ]
            }
        },
        "_FlatBuffersValuesMixin.__init__": {
            "name": "__init__",
            "location": 1444,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "build": [
                    "dict",
                    "bytes"
                ],
                "cast": [
                    "str"
                ]
            }
        },
        "_FlatBuffersValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1448,
            "return": [
                "str",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "IO"
                ]
            }
        },
        "_FlatBuffersValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1455,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "T",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "_Pickle5ValuesMixin._serialize_value": {
            "name": "_serialize_value",
            "location": 1473,
            "return": [
                "str",
                "Union[bytes, bytearray]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Union[float, int]",
                    "float",
                    "int"
                ]
            }
        },
        "_Pickle5ValuesMixin._deserialize_value": {
            "name": "_deserialize_value",
            "location": 1484,
            "return": [
                "Optional[float]",
                "dict",
                "str",
                "IO[bytes]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "zlmdb-master/zlmdb/_version.py": {},
    "zlmdb-master/zlmdb/__init__.py": {
        "table": {
            "name": "table",
            "location": 271,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "oid": [
                    "bool"
                ],
                "marshal": [
                    "bool"
                ],
                "parse": [
                    "bool"
                ],
                "build": [
                    "bool"
                ],
                "cast": [
                    "bool"
                ],
                "compress": [
                    "bool"
                ]
            }
        },
        "table.decorate": {
            "name": "decorate",
            "location": 282,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "o": [
                    "str",
                    "BinaryIO",
                    "int"
                ]
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/__init__.py": {},
    "zlmdb-master/zlmdb/flatbuffers/reflection/AdvancedFeatures.py": {},
    "zlmdb-master/zlmdb/flatbuffers/reflection/BaseType.py": {},
    "zlmdb-master/zlmdb/flatbuffers/reflection/Enum.py": {
        "EnumStart": {
            "name": "EnumStart",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 135,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "EnumAddName": {
            "name": "EnumAddName",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ],
                "name": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 138,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ],
                "name": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "EnumAddValues": {
            "name": "EnumAddValues",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Union[Any, Any]]",
                    "Sequence[str]",
                    "List[str]"
                ],
                "values": [
                    "str",
                    "bool",
                    "List[Union[Any, Any]]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "AddValues": {
            "name": "AddValues",
            "location": 141,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "bool",
                "Optional[T]"
            ],
            "arguments": {
                "builder": [
                    "Dict[str, Any]",
                    "str"
                ],
                "values": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "EnumStartValuesVector": {
            "name": "EnumStartValuesVector",
            "location": 143,
            "return": [
                "Type",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "numElems": [
                    "str"
                ]
            }
        },
        "StartValuesVector": {
            "name": "StartValuesVector",
            "location": 144,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int",
                    "Hashable"
                ],
                "numElems": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "EnumAddIsUnion": {
            "name": "EnumAddIsUnion",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "dict",
                    "Callable",
                    "Sequence[str]",
                    "str"
                ],
                "isUnion": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "dict",
                    "Callable",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "AddIsUnion": {
            "name": "AddIsUnion",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Optional[\"Scope\"]",
                    "list",
                    "List[str]"
                ],
                "isUnion": [
                    "bool",
                    "str",
                    "Optional[\"Scope\"]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "EnumAddUnderlyingType": {
            "name": "EnumAddUnderlyingType",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "bool",
                    "Callable[..., T]",
                    "float"
                ],
                "underlyingType": [
                    "Callable",
                    "bool",
                    "Callable[..., T]",
                    "float"
                ]
            }
        },
        "AddUnderlyingType": {
            "name": "AddUnderlyingType",
            "location": 150,
            "return": [
                "bool",
                "Optional[Type]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "Union[str, 'Type']",
                    "str",
                    "Type",
                    "dict"
                ],
                "underlyingType": [
                    "Union[str, 'Type']",
                    "str",
                    "Type",
                    "dict"
                ]
            }
        },
        "EnumAddAttributes": {
            "name": "EnumAddAttributes",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "attributes": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 153,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "EnumStartAttributesVector": {
            "name": "EnumStartAttributesVector",
            "location": 155,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "EnumAddDocumentation": {
            "name": "EnumAddDocumentation",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "documentation": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 159,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "EnumStartDocumentationVector": {
            "name": "EnumStartDocumentationVector",
            "location": 161,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "EnumAddDeclarationFile": {
            "name": "EnumAddDeclarationFile",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ],
                "declarationFile": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "AddDeclarationFile": {
            "name": "AddDeclarationFile",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "declarationFile": [
                    "str"
                ]
            }
        },
        "EnumEnd": {
            "name": "EnumEnd",
            "location": 167,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 168,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Enum.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Enum.GetRootAsEnum": {
            "name": "GetRootAsEnum",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "Enum.EnumBufferHasIdentifier": {
            "name": "EnumBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Enum.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Enum.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.Values": {
            "name": "Values",
            "location": 39,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "int",
                    "tuple"
                ]
            }
        },
        "Enum.ValuesLength": {
            "name": "ValuesLength",
            "location": 52,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.ValuesIsNone": {
            "name": "ValuesIsNone",
            "location": 59,
            "return": [
                "dict",
                "str",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.IsUnion": {
            "name": "IsUnion",
            "location": 64,
            "return": [
                "Optional[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.UnderlyingType": {
            "name": "UnderlyingType",
            "location": 71,
            "return": [
                "type",
                "Optional[T]",
                "Optional[Callable[[bool], None]]",
                "Tuple[List[str], Optional[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.Attributes": {
            "name": "Attributes",
            "location": 82,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Enum.AttributesLength": {
            "name": "AttributesLength",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 102,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.Documentation": {
            "name": "Documentation",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "Enum.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 122,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.DeclarationFile": {
            "name": "DeclarationFile",
            "location": 128,
            "return": [
                "str",
                "float",
                "Tuple[str, str]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/EnumVal.py": {
        "EnumValStart": {
            "name": "EnumValStart",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "int",
                    "Set[T]"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 77,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "builder": [
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        },
        "EnumValAddName": {
            "name": "EnumValAddName",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 80,
            "return": [
                "str",
                "Container[\"Taxon\"]",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]"
                ],
                "name": [
                    "str",
                    "Pattern[str]"
                ]
            }
        },
        "EnumValAddValue": {
            "name": "EnumValAddValue",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Union[Set[str], List[str]]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Union[Set[str], List[str]]"
                ]
            }
        },
        "AddValue": {
            "name": "AddValue",
            "location": 83,
            "return": [
                "Tuple[float, float]",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "Dict[str, Any]",
                    "str"
                ],
                "value": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "EnumValAddUnionType": {
            "name": "EnumValAddUnionType",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "Callable[..., T]",
                    "bool",
                    "dict"
                ],
                "unionType": [
                    "Callable",
                    "Callable[..., T]",
                    "bool",
                    "dict"
                ]
            }
        },
        "AddUnionType": {
            "name": "AddUnionType",
            "location": 86,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "Union[str, 'Type']",
                    "dict",
                    "Type",
                    "Callable"
                ],
                "unionType": [
                    "Union[str, 'Type']",
                    "dict",
                    "Type",
                    "Callable"
                ]
            }
        },
        "EnumValAddDocumentation": {
            "name": "EnumValAddDocumentation",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "list",
                    "Optional[Callable]",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "documentation": [
                    "Callable",
                    "list",
                    "Optional[Callable]",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 89,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool"
                ],
                "documentation": [
                    "str",
                    "bool"
                ]
            }
        },
        "EnumValStartDocumentationVector": {
            "name": "EnumValStartDocumentationVector",
            "location": 91,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "bool",
                    "Callable",
                    "Callable[[], object]"
                ],
                "numElems": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "bool",
                    "Callable",
                    "Callable[[], object]"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 92,
            "return": [
                "Optional[int]",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Callable",
                    "Type",
                    "Dict[str, str]"
                ],
                "numElems": [
                    "str",
                    "Callable",
                    "Type",
                    "Dict[str, str]"
                ]
            }
        },
        "EnumValEnd": {
            "name": "EnumValEnd",
            "location": 94,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 95,
            "return": [
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "EnumVal.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "EnumVal.GetRootAsEnumVal": {
            "name": "GetRootAsEnumVal",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "EnumVal.EnumValBufferHasIdentifier": {
            "name": "EnumValBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "EnumVal.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "EnumVal.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.Value": {
            "name": "Value",
            "location": 39,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Optional[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.UnionType": {
            "name": "UnionType",
            "location": 46,
            "return": [
                "type",
                "Optional[T]",
                "Optional[Callable[[bool], None]]",
                "Tuple[List[str], Optional[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.Documentation": {
            "name": "Documentation",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "EnumVal.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumVal.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 72,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/Field.py": {
        "FieldStart": {
            "name": "FieldStart",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "int",
                    "list"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 159,
            "return": [
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "FieldAddName": {
            "name": "FieldAddName",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 162,
            "return": [
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ],
                "name": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "FieldAddType": {
            "name": "FieldAddType",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ],
                "type": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "AddType": {
            "name": "AddType",
            "location": 165,
            "return": [
                "str",
                "Optional[Type]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type[Any]"
                ],
                "type": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "FieldAddId": {
            "name": "FieldAddId",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "List[str]",
                    "List[int]",
                    "MutableMapping",
                    "str"
                ],
                "id": [
                    "bool",
                    "int",
                    "List[str]",
                    "List[int]",
                    "MutableMapping",
                    "str"
                ]
            }
        },
        "AddId": {
            "name": "AddId",
            "location": 168,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "FieldAddOffset": {
            "name": "FieldAddOffset",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "offset": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddOffset": {
            "name": "AddOffset",
            "location": 171,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "offset": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldAddDefaultInteger": {
            "name": "FieldAddDefaultInteger",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "defaultInteger": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "AddDefaultInteger": {
            "name": "AddDefaultInteger",
            "location": 174,
            "return": [
                "bool",
                "\"Task\"",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "Callable[[], None]",
                    "Awaitable",
                    "str",
                    "Optional[bytes]"
                ],
                "defaultInteger": [
                    "Callable[[], None]",
                    "Awaitable",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "FieldAddDefaultReal": {
            "name": "FieldAddDefaultReal",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "defaultReal": [
                    "str",
                    "list",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "AddDefaultReal": {
            "name": "AddDefaultReal",
            "location": 177,
            "return": [
                "bool",
                "\"Task\"",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "Callable[[], None]",
                    "Awaitable",
                    "str",
                    "Optional[bytes]"
                ],
                "defaultReal": [
                    "Callable[[], None]",
                    "Awaitable",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "FieldAddDeprecated": {
            "name": "FieldAddDeprecated",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddDeprecated": {
            "name": "AddDeprecated",
            "location": 180,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldAddRequired": {
            "name": "FieldAddRequired",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "required": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddRequired": {
            "name": "AddRequired",
            "location": 183,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "required": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldAddKey": {
            "name": "FieldAddKey",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Set[str]",
                    "Optional[bool]",
                    "int"
                ],
                "key": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Set[str]",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "AddKey": {
            "name": "AddKey",
            "location": 186,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "bytes",
                "Dict[str, str]",
                "str",
                "Exception",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Union[Callable[[Dict], Hashable], str]",
                    "List[str]"
                ],
                "key": [
                    "str",
                    "Union[Callable[[Dict], Hashable], str]",
                    "List[str]"
                ]
            }
        },
        "FieldAddAttributes": {
            "name": "FieldAddAttributes",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 189,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldStartAttributesVector": {
            "name": "FieldStartAttributesVector",
            "location": 191,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ],
                "numElems": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 192,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FieldAddDocumentation": {
            "name": "FieldAddDocumentation",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 195,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldStartDocumentationVector": {
            "name": "FieldStartDocumentationVector",
            "location": 197,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ],
                "numElems": [
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 198,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FieldAddOptional": {
            "name": "FieldAddOptional",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "optional": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddOptional": {
            "name": "AddOptional",
            "location": 201,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "optional": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldAddPadding": {
            "name": "FieldAddPadding",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ],
                "padding": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "int",
                    "IO[str]"
                ]
            }
        },
        "AddPadding": {
            "name": "AddPadding",
            "location": 204,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "padding": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "FieldEnd": {
            "name": "FieldEnd",
            "location": 206,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "List[Dict[str, Any]]",
                    "Union[Set[str], List[str]]",
                    "bool",
                    "str"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 207,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Field.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Field.GetRootAsField": {
            "name": "GetRootAsField",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "buf": [
                    "str"
                ],
                "offset": [
                    "str"
                ]
            }
        },
        "Field.FieldBufferHasIdentifier": {
            "name": "FieldBufferHasIdentifier",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[object]",
                    "T",
                    "List[int]",
                    "str"
                ],
                "buf": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "List[int]"
                ],
                "offset": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "List[int]"
                ],
                "size_prefixed": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "List[int]"
                ]
            }
        },
        "Field.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Field.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Type": {
            "name": "Type",
            "location": 39,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Id": {
            "name": "Id",
            "location": 50,
            "return": [
                "Optional[str]",
                "str",
                "dict",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Offset": {
            "name": "Offset",
            "location": 57,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.DefaultInteger": {
            "name": "DefaultInteger",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.DefaultReal": {
            "name": "DefaultReal",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Deprecated": {
            "name": "Deprecated",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Required": {
            "name": "Required",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Key": {
            "name": "Key",
            "location": 92,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Attributes": {
            "name": "Attributes",
            "location": 99,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Field.AttributesLength": {
            "name": "AttributesLength",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 119,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Documentation": {
            "name": "Documentation",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "Field.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 139,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Optional": {
            "name": "Optional",
            "location": 144,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.Padding": {
            "name": "Padding",
            "location": 152,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/KeyValue.py": {
        "KeyValueStart": {
            "name": "KeyValueStart",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 46,
            "return": [
                "bool",
                "List[str]",
                "Optional[int]",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool"
                ]
            }
        },
        "KeyValueAddKey": {
            "name": "KeyValueAddKey",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "dict",
                    "int",
                    "list",
                    "bool"
                ],
                "key": [
                    "str",
                    "dict",
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "AddKey": {
            "name": "AddKey",
            "location": 49,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Hashable"
                ],
                "key": [
                    "str",
                    "Hashable"
                ]
            }
        },
        "KeyValueAddValue": {
            "name": "KeyValueAddValue",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "List[str]",
                    "Union[Set[str], List[str]]"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "List[str]",
                    "Union[Set[str], List[str]]"
                ]
            }
        },
        "AddValue": {
            "name": "AddValue",
            "location": 52,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Dict[str, Any]",
                    "Type['Model']",
                    "type",
                    "Sequence[type]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Type['Model']",
                    "type",
                    "Sequence[type]"
                ]
            }
        },
        "KeyValueEnd": {
            "name": "KeyValueEnd",
            "location": 54,
            "return": [
                "str",
                "Callable[[], None]",
                "Dict[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Iterable[Sequence[Hashable]]",
                    "Optional[Hashable]",
                    "bool"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 55,
            "return": [
                "bool",
                "Optional[str]",
                "dict",
                "Sequence"
            ],
            "arguments": {
                "builder": [
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "Iterable[int]",
                    "Set[str]"
                ]
            }
        },
        "KeyValue.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "KeyValue.GetRootAsKeyValue": {
            "name": "GetRootAsKeyValue",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes"
                ],
                "buf": [
                    "str",
                    "bytes"
                ],
                "offset": [
                    "str",
                    "bytes"
                ]
            }
        },
        "KeyValue.KeyValueBufferHasIdentifier": {
            "name": "KeyValueBufferHasIdentifier",
            "location": 24,
            "return": [
                "str",
                "Optional[Dict]",
                "float",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "buf": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ],
                "offset": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ],
                "size_prefixed": [
                    "int",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "KeyValue.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "KeyValue.Key": {
            "name": "Key",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyValue.Value": {
            "name": "Value",
            "location": 39,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/Object.py": {
        "ObjectStart": {
            "name": "ObjectStart",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 138,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ObjectAddName": {
            "name": "ObjectAddName",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ],
                "name": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 141,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ],
                "name": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "ObjectAddFields": {
            "name": "ObjectAddFields",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Iterable[str]",
                    "Dict[str, Tuple[str, str]]",
                    "list"
                ],
                "fields": [
                    "List[Tuple[str, str]]",
                    "Iterable[str]",
                    "Dict[str, Tuple[str, str]]",
                    "list"
                ]
            }
        },
        "AddFields": {
            "name": "AddFields",
            "location": 144,
            "return": [
                "bool",
                "int",
                "Callable[..., None]",
                "Sequence[str]"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "fields": [
                    "str"
                ]
            }
        },
        "ObjectStartFieldsVector": {
            "name": "ObjectStartFieldsVector",
            "location": 146,
            "return": [
                "Type",
                "str",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "dict"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "StartFieldsVector": {
            "name": "StartFieldsVector",
            "location": 147,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[Type]",
                    "Callable"
                ],
                "numElems": [
                    "str",
                    "Optional[Type]",
                    "Callable"
                ]
            }
        },
        "ObjectAddIsStruct": {
            "name": "ObjectAddIsStruct",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "dict",
                    "Callable",
                    "Sequence[str]",
                    "str"
                ],
                "isStruct": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable",
                    "dict",
                    "Callable",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "AddIsStruct": {
            "name": "AddIsStruct",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Optional[\"Scope\"]",
                    "list",
                    "List[str]"
                ],
                "isStruct": [
                    "bool",
                    "str",
                    "Optional[\"Scope\"]",
                    "list",
                    "List[str]"
                ]
            }
        },
        "ObjectAddMinalign": {
            "name": "ObjectAddMinalign",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "minalign": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddMinalign": {
            "name": "AddMinalign",
            "location": 153,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "minalign": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ObjectAddBytesize": {
            "name": "ObjectAddBytesize",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "bytesize": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddBytesize": {
            "name": "AddBytesize",
            "location": 156,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "bytesize": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ObjectAddAttributes": {
            "name": "ObjectAddAttributes",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "attributes": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 159,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ObjectStartAttributesVector": {
            "name": "ObjectStartAttributesVector",
            "location": 161,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ObjectAddDocumentation": {
            "name": "ObjectAddDocumentation",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "documentation": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 165,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ObjectStartDocumentationVector": {
            "name": "ObjectStartDocumentationVector",
            "location": 167,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ObjectAddDeclarationFile": {
            "name": "ObjectAddDeclarationFile",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ],
                "declarationFile": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "AddDeclarationFile": {
            "name": "AddDeclarationFile",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "declarationFile": [
                    "str"
                ]
            }
        },
        "ObjectEnd": {
            "name": "ObjectEnd",
            "location": 173,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 174,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Object.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Object.GetRootAsObject": {
            "name": "GetRootAsObject",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "Object.ObjectBufferHasIdentifier": {
            "name": "ObjectBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Object.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Object.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Fields": {
            "name": "Fields",
            "location": 39,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "int"
                ]
            }
        },
        "Object.FieldsLength": {
            "name": "FieldsLength",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.FieldsIsNone": {
            "name": "FieldsIsNone",
            "location": 59,
            "return": [
                "float",
                "str",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.IsStruct": {
            "name": "IsStruct",
            "location": 64,
            "return": [
                "Optional[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Minalign": {
            "name": "Minalign",
            "location": 71,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Bytesize": {
            "name": "Bytesize",
            "location": 78,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Attributes": {
            "name": "Attributes",
            "location": 85,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Object.AttributesLength": {
            "name": "AttributesLength",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 105,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.Documentation": {
            "name": "Documentation",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "Object.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 125,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.DeclarationFile": {
            "name": "DeclarationFile",
            "location": 131,
            "return": [
                "str",
                "float",
                "Tuple[str, str]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/RPCCall.py": {
        "RPCCallStart": {
            "name": "RPCCallStart",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "UnicodeError"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 106,
            "return": [
                "tuple"
            ],
            "arguments": {
                "builder": [
                    "float",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "RPCCallAddName": {
            "name": "RPCCallAddName",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Type",
                    "str",
                    "Type['Signature']",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "Type",
                    "str",
                    "Type['Signature']",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 109,
            "return": [
                "Type",
                "IO",
                "bool",
                "Callable[[str], None]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[str]",
                    "Union[dict, str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Union[dict, str]"
                ]
            }
        },
        "RPCCallAddRequest": {
            "name": "RPCCallAddRequest",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ],
                "request": [
                    "bool",
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "AddRequest": {
            "name": "AddRequest",
            "location": 112,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "builder": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "str"
                ],
                "request": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "str"
                ]
            }
        },
        "RPCCallAddResponse": {
            "name": "RPCCallAddResponse",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[bytes]",
                    "Type"
                ],
                "response": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[bytes]",
                    "Type"
                ]
            }
        },
        "AddResponse": {
            "name": "AddResponse",
            "location": 115,
            "return": [],
            "arguments": {
                "builder": [
                    "dict",
                    "Optional[str]",
                    "Set[str]"
                ],
                "response": [
                    "dict",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "RPCCallAddAttributes": {
            "name": "RPCCallAddAttributes",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "list",
                    "Callable",
                    "int",
                    "str"
                ],
                "attributes": [
                    "list",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 118,
            "return": [
                "Container[T]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "attributes": [
                    "str"
                ]
            }
        },
        "RPCCallStartAttributesVector": {
            "name": "RPCCallStartAttributesVector",
            "location": 120,
            "return": [
                "str",
                "Callable[[None], None]",
                "Tuple[str]",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]"
                ],
                "numElems": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 121,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable"
                ],
                "numElems": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "RPCCallAddDocumentation": {
            "name": "RPCCallAddDocumentation",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "list",
                    "Callable",
                    "int",
                    "str"
                ],
                "documentation": [
                    "list",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 124,
            "return": [
                "Container[T]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "documentation": [
                    "str"
                ]
            }
        },
        "RPCCallStartDocumentationVector": {
            "name": "RPCCallStartDocumentationVector",
            "location": 126,
            "return": [
                "str",
                "Callable[[None], None]",
                "Tuple[str]",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]"
                ],
                "numElems": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 127,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable"
                ],
                "numElems": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "RPCCallEnd": {
            "name": "RPCCallEnd",
            "location": 129,
            "return": [
                "Optional[Iterable[Any]]",
                "Callable",
                "bool",
                "Optional[str]",
                "AsyncGenerator"
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "Callable[..., T]",
                    "float",
                    "Exception"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 130,
            "return": [
                "str",
                "bool",
                "Callable",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Callable[[Union, Union], Tuple[Any, ...],]",
                    "Callable"
                ]
            }
        },
        "RPCCall.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "RPCCall.GetRootAsRPCCall": {
            "name": "GetRootAsRPCCall",
            "location": 20,
            "return": [
                "str",
                "Dict[str, Union[str, int]]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "buf": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "offset": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "RPCCall.RPCCallBufferHasIdentifier": {
            "name": "RPCCallBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Optional[List[str]]",
                "Callable"
            ],
            "arguments": {
                "cls": [],
                "buf": [
                    "int",
                    "float",
                    "Dict[str, int]",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "List[float]"
                ],
                "offset": [
                    "int",
                    "float",
                    "Dict[str, int]",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "List[float]"
                ],
                "size_prefixed": [
                    "int",
                    "float",
                    "Dict[str, int]",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "RPCCall.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "RPCCall.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.Request": {
            "name": "Request",
            "location": 39,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.Response": {
            "name": "Response",
            "location": 50,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.Attributes": {
            "name": "Attributes",
            "location": 61,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "RPCCall.AttributesLength": {
            "name": "AttributesLength",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 81,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.Documentation": {
            "name": "Documentation",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "RPCCall.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCCall.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 101,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/Schema.py": {
        "SchemaStart": {
            "name": "SchemaStart",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 166,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "SchemaAddObjects": {
            "name": "SchemaAddObjects",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "objects": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddObjects": {
            "name": "AddObjects",
            "location": 169,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Dict[str, Any]"
                ],
                "objects": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "SchemaStartObjectsVector": {
            "name": "SchemaStartObjectsVector",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartObjectsVector": {
            "name": "StartObjectsVector",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SchemaAddEnums": {
            "name": "SchemaAddEnums",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "enums": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddEnums": {
            "name": "AddEnums",
            "location": 175,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "enums": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "SchemaStartEnumsVector": {
            "name": "SchemaStartEnumsVector",
            "location": 177,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartEnumsVector": {
            "name": "StartEnumsVector",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SchemaAddFileIdent": {
            "name": "SchemaAddFileIdent",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Iterable[str]",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "fileIdent": [
                    "Iterable[str]",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "AddFileIdent": {
            "name": "AddFileIdent",
            "location": 181,
            "return": [
                "str",
                "Set[str]",
                "Optional[str]"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "int",
                    "Union[str, List[str]]"
                ],
                "fileIdent": [
                    "bool",
                    "str",
                    "int",
                    "Union[str, List[str]]"
                ]
            }
        },
        "SchemaAddFileExt": {
            "name": "SchemaAddFileExt",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "BinaryIO",
                    "Iterable[Optional[Any]]",
                    "Iterable[str]",
                    "Sequence[str]",
                    "List[str]"
                ],
                "fileExt": [
                    "BinaryIO",
                    "Iterable[Optional[Any]]",
                    "Iterable[str]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "AddFileExt": {
            "name": "AddFileExt",
            "location": 184,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "dict",
                    "IO[bytes]",
                    "str"
                ],
                "fileExt": [
                    "bool",
                    "int",
                    "dict",
                    "IO[bytes]",
                    "str"
                ]
            }
        },
        "SchemaAddRootTable": {
            "name": "SchemaAddRootTable",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "int"
                ],
                "rootTable": [
                    "int"
                ]
            }
        },
        "AddRootTable": {
            "name": "AddRootTable",
            "location": 187,
            "return": [],
            "arguments": {
                "builder": [
                    "int",
                    "dict",
                    "T"
                ],
                "rootTable": [
                    "int",
                    "dict",
                    "T"
                ]
            }
        },
        "SchemaAddServices": {
            "name": "SchemaAddServices",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "services": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddServices": {
            "name": "AddServices",
            "location": 190,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "services": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "SchemaStartServicesVector": {
            "name": "SchemaStartServicesVector",
            "location": 192,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartServicesVector": {
            "name": "StartServicesVector",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SchemaAddAdvancedFeatures": {
            "name": "SchemaAddAdvancedFeatures",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "advancedFeatures": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddAdvancedFeatures": {
            "name": "AddAdvancedFeatures",
            "location": 196,
            "return": [
                "bool",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "advancedFeatures": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "SchemaAddFbsFiles": {
            "name": "SchemaAddFbsFiles",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ],
                "fbsFiles": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "AddFbsFiles": {
            "name": "AddFbsFiles",
            "location": 199,
            "return": [
                "str",
                "List[str]",
                "Tuple[str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "fbsFiles": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "SchemaStartFbsFilesVector": {
            "name": "SchemaStartFbsFilesVector",
            "location": 201,
            "return": [
                "bool",
                "str",
                "Tuple[str, Optional[str]]"
            ],
            "arguments": {
                "builder": [
                    "int",
                    "str",
                    "Type[Exception]",
                    "List[str]"
                ],
                "numElems": [
                    "int",
                    "str",
                    "Type[Exception]",
                    "List[str]"
                ]
            }
        },
        "StartFbsFilesVector": {
            "name": "StartFbsFilesVector",
            "location": 202,
            "return": [
                "bool",
                "Callable[[dict], None]",
                "Optional[Callable[[dict], None]]",
                "Optional[Callable[[], None]]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "Optional[List[int]]",
                    "str",
                    "Optional[str]"
                ],
                "numElems": [
                    "Optional[List[int]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SchemaEnd": {
            "name": "SchemaEnd",
            "location": 204,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 205,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Schema.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Schema.GetRootAsSchema": {
            "name": "GetRootAsSchema",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "Schema.SchemaBufferHasIdentifier": {
            "name": "SchemaBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Schema.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Schema.Objects": {
            "name": "Objects",
            "location": 32,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Schema.ObjectsLength": {
            "name": "ObjectsLength",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.ObjectsIsNone": {
            "name": "ObjectsIsNone",
            "location": 52,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.Enums": {
            "name": "Enums",
            "location": 57,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Schema.EnumsLength": {
            "name": "EnumsLength",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.EnumsIsNone": {
            "name": "EnumsIsNone",
            "location": 77,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.FileIdent": {
            "name": "FileIdent",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.FileExt": {
            "name": "FileExt",
            "location": 89,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.RootTable": {
            "name": "RootTable",
            "location": 96,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Iterable[T]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.Services": {
            "name": "Services",
            "location": 107,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Schema.ServicesLength": {
            "name": "ServicesLength",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.ServicesIsNone": {
            "name": "ServicesIsNone",
            "location": 127,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.AdvancedFeatures": {
            "name": "AdvancedFeatures",
            "location": 132,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.FbsFiles": {
            "name": "FbsFiles",
            "location": 141,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[bool]",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Schema.FbsFilesLength": {
            "name": "FbsFilesLength",
            "location": 154,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.FbsFilesIsNone": {
            "name": "FbsFilesIsNone",
            "location": 161,
            "return": [
                "str",
                "int",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/SchemaFile.py": {
        "SchemaFileStart": {
            "name": "SchemaFileStart",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "Optional[List]",
                    "bool"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 64,
            "return": [
                "T",
                "List[str]",
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "builder": [
                    "dict",
                    "IO",
                    "Mapping",
                    "type",
                    "Dict[str, str]"
                ]
            }
        },
        "SchemaFileAddFilename": {
            "name": "SchemaFileAddFilename",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "dict",
                    "list",
                    "List[str]",
                    "Tuple[float, float]",
                    "bool",
                    "Iterable[bytes]",
                    "List[Dict]"
                ],
                "filename": [
                    "str",
                    "dict",
                    "list",
                    "List[str]",
                    "Tuple[float, float]",
                    "bool",
                    "Iterable[bytes]",
                    "List[Dict]"
                ]
            }
        },
        "AddFilename": {
            "name": "AddFilename",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "dict",
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "dict",
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SchemaFileAddIncludedFilenames": {
            "name": "SchemaFileAddIncludedFilenames",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Set[str]",
                    "List[str]"
                ],
                "includedFilenames": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "AddIncludedFilenames": {
            "name": "AddIncludedFilenames",
            "location": 70,
            "return": [
                "bool",
                "List[Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "includedFilenames": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "SchemaFileStartIncludedFilenamesVector": {
            "name": "SchemaFileStartIncludedFilenamesVector",
            "location": 72,
            "return": [
                "bool",
                "List[str]",
                "type",
                "Type"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str"
                ],
                "numElems": [
                    "bool",
                    "str"
                ]
            }
        },
        "StartIncludedFilenamesVector": {
            "name": "StartIncludedFilenamesVector",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[Pattern]",
                    "dict"
                ],
                "numElems": [
                    "str",
                    "Optional[Pattern]",
                    "dict"
                ]
            }
        },
        "SchemaFileEnd": {
            "name": "SchemaFileEnd",
            "location": 75,
            "return": [
                "bool",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "float",
                    "List[str]",
                    "list",
                    "Iterable[Tuple[str, Any]]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 76,
            "return": [
                "bool",
                "Sequence[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Mapping",
                    "Optional[int]",
                    "Set[str]"
                ]
            }
        },
        "SchemaFile.GetRootAs": {
            "name": "GetRootAs",
            "location": 16,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "SchemaFile.GetRootAsSchemaFile": {
            "name": "GetRootAsSchemaFile",
            "location": 23,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "buf": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "offset": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SchemaFile.SchemaFileBufferHasIdentifier": {
            "name": "SchemaFileBufferHasIdentifier",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "BinaryIO"
                ],
                "buf": [
                    "int",
                    "bool"
                ],
                "offset": [
                    "int",
                    "bool"
                ],
                "size_prefixed": [
                    "int",
                    "bool"
                ]
            }
        },
        "SchemaFile.Init": {
            "name": "Init",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "SchemaFile.Filename": {
            "name": "Filename",
            "location": 36,
            "return": [
                "str",
                "bool",
                "Tuple[str, List[str], List[str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaFile.IncludedFilenames": {
            "name": "IncludedFilenames",
            "location": 44,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str"
                ]
            }
        },
        "SchemaFile.IncludedFilenamesLength": {
            "name": "IncludedFilenamesLength",
            "location": 52,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaFile.IncludedFilenamesIsNone": {
            "name": "IncludedFilenamesIsNone",
            "location": 59,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/Service.py": {
        "ServiceStart": {
            "name": "ServiceStart",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 117,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ServiceAddName": {
            "name": "ServiceAddName",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ],
                "name": [
                    "Type",
                    "Type['Signature']",
                    "bool",
                    "str"
                ]
            }
        },
        "AddName": {
            "name": "AddName",
            "location": 120,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ],
                "name": [
                    "str",
                    "Pattern[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "ServiceAddCalls": {
            "name": "ServiceAddCalls",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Optional[Dict]"
                ],
                "calls": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Optional[Dict]"
                ]
            }
        },
        "AddCalls": {
            "name": "AddCalls",
            "location": 123,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "list",
                    "str"
                ],
                "calls": [
                    "list",
                    "str"
                ]
            }
        },
        "ServiceStartCallsVector": {
            "name": "ServiceStartCallsVector",
            "location": 125,
            "return": [
                "str",
                "Callable[[None], None]",
                "Tuple[str]",
                "Iterable[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "StartCallsVector": {
            "name": "StartCallsVector",
            "location": 126,
            "return": [],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "Hashable"
                ],
                "numElems": [
                    "bool",
                    "int",
                    "Hashable"
                ]
            }
        },
        "ServiceAddAttributes": {
            "name": "ServiceAddAttributes",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "attributes": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddAttributes": {
            "name": "AddAttributes",
            "location": 129,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ServiceStartAttributesVector": {
            "name": "ServiceStartAttributesVector",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartAttributesVector": {
            "name": "StartAttributesVector",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ServiceAddDocumentation": {
            "name": "ServiceAddDocumentation",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ],
                "documentation": [
                    "List[Tuple[str, str]]",
                    "Dict[str, Tuple[str, str]]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "AddDocumentation": {
            "name": "AddDocumentation",
            "location": 135,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "documentation": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "ServiceStartDocumentationVector": {
            "name": "ServiceStartDocumentationVector",
            "location": 137,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "numElems": [
                    "bool",
                    "str",
                    "tuple",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "StartDocumentationVector": {
            "name": "StartDocumentationVector",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ],
                "numElems": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ServiceAddDeclarationFile": {
            "name": "ServiceAddDeclarationFile",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ],
                "declarationFile": [
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "AddDeclarationFile": {
            "name": "AddDeclarationFile",
            "location": 141,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str"
                ],
                "declarationFile": [
                    "str"
                ]
            }
        },
        "ServiceEnd": {
            "name": "ServiceEnd",
            "location": 143,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "int"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 144,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Service.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Service.GetRootAsService": {
            "name": "GetRootAsService",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[None, str]"
                ],
                "buf": [
                    "str",
                    "Union[None, str]"
                ],
                "offset": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "Service.ServiceBufferHasIdentifier": {
            "name": "ServiceBufferHasIdentifier",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Mapping[str, float]",
                    "Optional[str]",
                    "int"
                ],
                "buf": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "offset": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ],
                "size_prefixed": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Service.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Service.Name": {
            "name": "Name",
            "location": 32,
            "return": [
                "Literal",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.Calls": {
            "name": "Calls",
            "location": 39,
            "return": [
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "tuple",
                    "bool",
                    "str"
                ]
            }
        },
        "Service.CallsLength": {
            "name": "CallsLength",
            "location": 52,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.CallsIsNone": {
            "name": "CallsIsNone",
            "location": 59,
            "return": [
                "str",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.Attributes": {
            "name": "Attributes",
            "location": 64,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Service.AttributesLength": {
            "name": "AttributesLength",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.AttributesIsNone": {
            "name": "AttributesIsNone",
            "location": 84,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.Documentation": {
            "name": "Documentation",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "BaseException",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "Service.DocumentationLength": {
            "name": "DocumentationLength",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.DocumentationIsNone": {
            "name": "DocumentationIsNone",
            "location": 104,
            "return": [
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.DeclarationFile": {
            "name": "DeclarationFile",
            "location": 110,
            "return": [
                "str",
                "float",
                "Tuple[str, str]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/Type.py": {
        "TypeStart": {
            "name": "TypeStart",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "Optional[List]",
                    "type"
                ]
            }
        },
        "Start": {
            "name": "Start",
            "location": 76,
            "return": [
                "tuple"
            ],
            "arguments": {
                "builder": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TypeAddBaseType": {
            "name": "TypeAddBaseType",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable"
                ],
                "baseType": [
                    "Callable"
                ]
            }
        },
        "AddBaseType": {
            "name": "AddBaseType",
            "location": 79,
            "return": [],
            "arguments": {
                "builder": [
                    "bool"
                ],
                "baseType": [
                    "bool"
                ]
            }
        },
        "TypeAddElement": {
            "name": "TypeAddElement",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "bool",
                    "Type[\"DataFrame\"]"
                ],
                "element": [
                    "Callable",
                    "bool",
                    "Type[\"DataFrame\"]"
                ]
            }
        },
        "AddElement": {
            "name": "AddElement",
            "location": 82,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "builder": [
                    "Callable",
                    "dict",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "element": [
                    "Callable",
                    "dict",
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "TypeAddIndex": {
            "name": "TypeAddIndex",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Optional[List]",
                    "bool",
                    "dict"
                ],
                "index": [
                    "Optional[List]",
                    "bool",
                    "dict"
                ]
            }
        },
        "AddIndex": {
            "name": "AddIndex",
            "location": 85,
            "return": [
                "bool",
                "Type",
                "int"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool",
                    "T"
                ],
                "index": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "TypeAddFixedLength": {
            "name": "TypeAddFixedLength",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Optional[List]",
                    "bool",
                    "dict"
                ],
                "fixedLength": [
                    "Optional[List]",
                    "bool",
                    "dict"
                ]
            }
        },
        "AddFixedLength": {
            "name": "AddFixedLength",
            "location": 88,
            "return": [
                "str",
                "Callable",
                "Type"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "fixedLength": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TypeAddBaseSize": {
            "name": "TypeAddBaseSize",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[Tuple[str]]",
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "baseSize": [
                    "str",
                    "Optional[Tuple[str]]",
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "AddBaseSize": {
            "name": "AddBaseSize",
            "location": 91,
            "return": [
                "bool",
                "Callable",
                "int"
            ],
            "arguments": {
                "builder": [
                    "int",
                    "str",
                    "Optional[str]",
                    "type"
                ],
                "baseSize": [
                    "int",
                    "str",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "TypeAddElementSize": {
            "name": "TypeAddElementSize",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Set[Tuple[str, Any]]",
                    "List[Dict[str, Any]]"
                ],
                "elementSize": [
                    "Set[Tuple[str, Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AddElementSize": {
            "name": "AddElementSize",
            "location": 94,
            "return": [
                "str",
                "Mapping[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int"
                ],
                "elementSize": [
                    "str",
                    "int"
                ]
            }
        },
        "TypeEnd": {
            "name": "TypeEnd",
            "location": 96,
            "return": [
                "Optional[str]",
                "str",
                "Optional[BaseException]",
                "Optional[Iterable[Any]]",
                "Callable",
                "Type"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool"
                ]
            }
        },
        "End": {
            "name": "End",
            "location": 97,
            "return": [
                "Type",
                "str",
                "int"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Type.GetRootAs": {
            "name": "GetRootAs",
            "location": 13,
            "return": [
                "str",
                "bool",
                "float",
                "MutableMapping",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable",
                    "List[Dict]",
                    "bool"
                ],
                "buf": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ],
                "offset": [
                    "bytes",
                    "int",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Type.GetRootAsType": {
            "name": "GetRootAsType",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "IO[bytes]",
                    "Union[str, bytes]",
                    "Tuple[bytes]",
                    "dict"
                ],
                "buf": [
                    "str",
                    "Dict[str, Any]",
                    "IO[bytes]",
                    "Union[str, bytes]",
                    "Tuple[bytes]",
                    "dict"
                ],
                "offset": [
                    "str",
                    "Dict[str, Any]",
                    "IO[bytes]",
                    "Union[str, bytes]",
                    "Tuple[bytes]",
                    "dict"
                ]
            }
        },
        "Type.TypeBufferHasIdentifier": {
            "name": "TypeBufferHasIdentifier",
            "location": 24,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "type",
                    "float",
                    "str"
                ],
                "buf": [
                    "int",
                    "bool"
                ],
                "offset": [
                    "int",
                    "bool"
                ],
                "size_prefixed": [
                    "int",
                    "bool"
                ]
            }
        },
        "Type.Init": {
            "name": "Init",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "Type.BaseType": {
            "name": "BaseType",
            "location": 32,
            "return": [
                "Tuple[str]",
                "Set[str]",
                "Union[str, List[str]]",
                "Callable[[str], str]",
                "Optional[str]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.Element": {
            "name": "Element",
            "location": 39,
            "return": [
                "Optional[str]",
                "str",
                "dict",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.Index": {
            "name": "Index",
            "location": 46,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.FixedLength": {
            "name": "FixedLength",
            "location": 53,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.BaseSize": {
            "name": "BaseSize",
            "location": 61,
            "return": [
                "str",
                "Tuple[int, List[str]]",
                "bool",
                "List[str]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type.ElementSize": {
            "name": "ElementSize",
            "location": 69,
            "return": [
                "str",
                "tuple",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/flatbuffers/reflection/__init__.py": {},
    "zlmdb-master/zlmdb/tests/MNodeLog.py": {
        "MNodeLogStart": {
            "name": "MNodeLogStart",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "float",
                    "int"
                ]
            }
        },
        "MNodeLogAddTimestamp": {
            "name": "MNodeLogAddTimestamp",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "timestamp": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddNodeId": {
            "name": "MNodeLogAddNodeId",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "int",
                    "str",
                    "bool"
                ],
                "nodeId": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MNodeLogStartNodeIdVector": {
            "name": "MNodeLogStartNodeIdVector",
            "location": 503,
            "return": [
                "str",
                "List[str]",
                "bool",
                "dict",
                "int",
                "Tuple[str, Optional[str]]"
            ],
            "arguments": {
                "builder": [
                    "int",
                    "list"
                ],
                "numElems": [
                    "int",
                    "list"
                ]
            }
        },
        "MNodeLogAddRunId": {
            "name": "MNodeLogAddRunId",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "bool"
                ],
                "runId": [
                    "str",
                    "bool"
                ]
            }
        },
        "MNodeLogStartRunIdVector": {
            "name": "MNodeLogStartRunIdVector",
            "location": 511,
            "return": [
                "List[str]",
                "str",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "builder": [
                    "int",
                    "list"
                ],
                "numElems": [
                    "int",
                    "list"
                ]
            }
        },
        "MNodeLogAddState": {
            "name": "MNodeLogAddState",
            "location": 515,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Callable[[T], Optional[T]]",
                    "Dict[str, Any]",
                    "List[Union[str, \"SqlFile\"]]",
                    "list",
                    "str"
                ],
                "state": [
                    "Callable[[T], Optional[T]]",
                    "Dict[str, Any]",
                    "List[Union[str, \"SqlFile\"]]",
                    "list",
                    "str"
                ]
            }
        },
        "MNodeLogAddEnded": {
            "name": "MNodeLogAddEnded",
            "location": 519,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "ended": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddSession": {
            "name": "MNodeLogAddSession",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "List[str]",
                    "Union[str, List[str]]",
                    "Callable"
                ],
                "session": [
                    "str",
                    "Type",
                    "List[str]",
                    "Union[str, List[str]]",
                    "Callable"
                ]
            }
        },
        "MNodeLogAddSent": {
            "name": "MNodeLogAddSent",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "sent": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddSeq": {
            "name": "MNodeLogAddSeq",
            "location": 531,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "seq": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddRouters": {
            "name": "MNodeLogAddRouters",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "routers": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddContainers": {
            "name": "MNodeLogAddContainers",
            "location": 539,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[\"TreeNode\"]",
                    "Dict[str, Any]"
                ],
                "containers": [
                    "str",
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[\"TreeNode\"]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MNodeLogAddGuests": {
            "name": "MNodeLogAddGuests",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "guests": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddProxies": {
            "name": "MNodeLogAddProxies",
            "location": 547,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "proxies": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMarketmakers": {
            "name": "MNodeLogAddMarketmakers",
            "location": 551,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "marketmakers": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuCtxSwitches": {
            "name": "MNodeLogAddCpuCtxSwitches",
            "location": 555,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [],
                "cpuCtxSwitches": []
            }
        },
        "MNodeLogAddCpuFreq": {
            "name": "MNodeLogAddCpuFreq",
            "location": 559,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuFreq": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuGuest": {
            "name": "MNodeLogAddCpuGuest",
            "location": 563,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuGuest": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuGuestNice": {
            "name": "MNodeLogAddCpuGuestNice",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuGuestNice": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuIdle": {
            "name": "MNodeLogAddCpuIdle",
            "location": 571,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuIdle": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuInterrupts": {
            "name": "MNodeLogAddCpuInterrupts",
            "location": 575,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuInterrupts": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuIowait": {
            "name": "MNodeLogAddCpuIowait",
            "location": 579,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuIowait": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuIrq": {
            "name": "MNodeLogAddCpuIrq",
            "location": 583,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuIrq": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuNice": {
            "name": "MNodeLogAddCpuNice",
            "location": 587,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuNice": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuSoftInterrupts": {
            "name": "MNodeLogAddCpuSoftInterrupts",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuSoftInterrupts": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuSoftirq": {
            "name": "MNodeLogAddCpuSoftirq",
            "location": 595,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuSoftirq": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuSteal": {
            "name": "MNodeLogAddCpuSteal",
            "location": 599,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuSteal": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuSystem": {
            "name": "MNodeLogAddCpuSystem",
            "location": 603,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cpuSystem": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddCpuUser": {
            "name": "MNodeLogAddCpuUser",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "cpuUser": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "MNodeLogAddDiskBusyTime": {
            "name": "MNodeLogAddDiskBusyTime",
            "location": 611,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Iterable[object]",
                    "Set[str]",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[Pattern]",
                    "bool"
                ],
                "diskBusyTime": [
                    "Iterable[object]",
                    "Set[str]",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[Pattern]",
                    "bool"
                ]
            }
        },
        "MNodeLogAddDiskReadBytes": {
            "name": "MNodeLogAddDiskReadBytes",
            "location": 615,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "Optional[Sequence[Any]]",
                    "Callable"
                ],
                "diskReadBytes": [
                    "bool",
                    "int",
                    "Optional[Sequence[Any]]",
                    "Callable"
                ]
            }
        },
        "MNodeLogAddDiskReadCount": {
            "name": "MNodeLogAddDiskReadCount",
            "location": 619,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "diskReadCount": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddDiskReadMergedCount": {
            "name": "MNodeLogAddDiskReadMergedCount",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "diskReadMergedCount": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddDiskReadTime": {
            "name": "MNodeLogAddDiskReadTime",
            "location": 627,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Iterable[object]",
                    "Set[str]",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[Pattern]",
                    "bool"
                ],
                "diskReadTime": [
                    "Iterable[object]",
                    "Set[str]",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[Pattern]",
                    "bool"
                ]
            }
        },
        "MNodeLogAddDiskWriteBytes": {
            "name": "MNodeLogAddDiskWriteBytes",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "int",
                    "Optional[Sequence[Any]]",
                    "Callable"
                ],
                "diskWriteBytes": [
                    "bool",
                    "int",
                    "Optional[Sequence[Any]]",
                    "Callable"
                ]
            }
        },
        "MNodeLogAddDiskWriteCount": {
            "name": "MNodeLogAddDiskWriteCount",
            "location": 635,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "diskWriteCount": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddDiskWriteMergedCount": {
            "name": "MNodeLogAddDiskWriteMergedCount",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "diskWriteMergedCount": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddDiskWriteTime": {
            "name": "MNodeLogAddDiskWriteTime",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "Iterable[object]",
                    "Set[str]",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[Pattern]",
                    "bool"
                ],
                "diskWriteTime": [
                    "Iterable[object]",
                    "Set[str]",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[Pattern]",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryActive": {
            "name": "MNodeLogAddMemoryActive",
            "location": 647,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memoryActive": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryAvailable": {
            "name": "MNodeLogAddMemoryAvailable",
            "location": 651,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memoryAvailable": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryBuffers": {
            "name": "MNodeLogAddMemoryBuffers",
            "location": 655,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memoryBuffers": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryCached": {
            "name": "MNodeLogAddMemoryCached",
            "location": 659,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memoryCached": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryFree": {
            "name": "MNodeLogAddMemoryFree",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memoryFree": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryInactive": {
            "name": "MNodeLogAddMemoryInactive",
            "location": 667,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memoryInactive": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryPercent": {
            "name": "MNodeLogAddMemoryPercent",
            "location": 671,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memoryPercent": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryShared": {
            "name": "MNodeLogAddMemoryShared",
            "location": 675,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memoryShared": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemorySlab": {
            "name": "MNodeLogAddMemorySlab",
            "location": 679,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memorySlab": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryTotal": {
            "name": "MNodeLogAddMemoryTotal",
            "location": 683,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "memoryTotal": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddMemoryUsed": {
            "name": "MNodeLogAddMemoryUsed",
            "location": 687,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ],
                "memoryUsed": [
                    "bool",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ]
            }
        },
        "MNodeLogAddNetworkBytesRecv": {
            "name": "MNodeLogAddNetworkBytesRecv",
            "location": 691,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ],
                "networkBytesRecv": [
                    "bool",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ]
            }
        },
        "MNodeLogAddNetworkBytesSent": {
            "name": "MNodeLogAddNetworkBytesSent",
            "location": 695,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "bool",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ],
                "networkBytesSent": [
                    "bool",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ]
            }
        },
        "MNodeLogAddNetworkConnectionAfInet": {
            "name": "MNodeLogAddNetworkConnectionAfInet",
            "location": 699,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "networkConnectionAfInet": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddNetworkConnectionAfInet6": {
            "name": "MNodeLogAddNetworkConnectionAfInet6",
            "location": 703,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "networkConnectionAfInet6": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddNetworkConnectionAfUnix": {
            "name": "MNodeLogAddNetworkConnectionAfUnix",
            "location": 707,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "networkConnectionAfUnix": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddNetworkDropin": {
            "name": "MNodeLogAddNetworkDropin",
            "location": 711,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "networkDropin": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddNetworkDropout": {
            "name": "MNodeLogAddNetworkDropout",
            "location": 715,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "networkDropout": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddNetworkErrin": {
            "name": "MNodeLogAddNetworkErrin",
            "location": 719,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "networkErrin": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddNetworkErrout": {
            "name": "MNodeLogAddNetworkErrout",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "networkErrout": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddNetworkPacketsRecv": {
            "name": "MNodeLogAddNetworkPacketsRecv",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "networkPacketsRecv": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogAddNetworkPacketsSent": {
            "name": "MNodeLogAddNetworkPacketsSent",
            "location": 731,
            "return": [
                ""
            ],
            "arguments": {
                "builder": [
                    "str",
                    "Type",
                    "bool"
                ],
                "networkPacketsSent": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "MNodeLogEnd": {
            "name": "MNodeLogEnd",
            "location": 735,
            "return": [
                "str",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "builder": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "MNodeLog.GetRootAsMNodeLog": {
            "name": "GetRootAsMNodeLog",
            "location": 13,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "buf": [
                    "str",
                    "bytes"
                ],
                "offset": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MNodeLog.Init": {
            "name": "Init",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ],
                "pos": [
                    "str",
                    "Optional[bytes]",
                    "List[int]"
                ]
            }
        },
        "MNodeLog.Timestamp": {
            "name": "Timestamp",
            "location": 26,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NodeId": {
            "name": "NodeId",
            "location": 35,
            "return": [
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "dict"
                ]
            }
        },
        "MNodeLog.NodeIdAsNumpy": {
            "name": "NodeIdAsNumpy",
            "location": 44,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NodeIdLength": {
            "name": "NodeIdLength",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.RunId": {
            "name": "RunId",
            "location": 60,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "str",
                    "dict",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "MNodeLog.RunIdAsNumpy": {
            "name": "RunIdAsNumpy",
            "location": 69,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.RunIdLength": {
            "name": "RunIdLength",
            "location": 76,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.State": {
            "name": "State",
            "location": 85,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.Ended": {
            "name": "Ended",
            "location": 94,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.Session": {
            "name": "Session",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.Sent": {
            "name": "Sent",
            "location": 112,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.Seq": {
            "name": "Seq",
            "location": 121,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.Routers": {
            "name": "Routers",
            "location": 130,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.Containers": {
            "name": "Containers",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.Guests": {
            "name": "Guests",
            "location": 148,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.Proxies": {
            "name": "Proxies",
            "location": 157,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.Marketmakers": {
            "name": "Marketmakers",
            "location": 166,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuCtxSwitches": {
            "name": "CpuCtxSwitches",
            "location": 176,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuFreq": {
            "name": "CpuFreq",
            "location": 183,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuGuest": {
            "name": "CpuGuest",
            "location": 190,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuGuestNice": {
            "name": "CpuGuestNice",
            "location": 197,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuIdle": {
            "name": "CpuIdle",
            "location": 204,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuInterrupts": {
            "name": "CpuInterrupts",
            "location": 211,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuIowait": {
            "name": "CpuIowait",
            "location": 218,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuIrq": {
            "name": "CpuIrq",
            "location": 225,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuNice": {
            "name": "CpuNice",
            "location": 232,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuSoftInterrupts": {
            "name": "CpuSoftInterrupts",
            "location": 239,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuSoftirq": {
            "name": "CpuSoftirq",
            "location": 246,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuSteal": {
            "name": "CpuSteal",
            "location": 253,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuSystem": {
            "name": "CpuSystem",
            "location": 260,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.CpuUser": {
            "name": "CpuUser",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.DiskBusyTime": {
            "name": "DiskBusyTime",
            "location": 274,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.DiskReadBytes": {
            "name": "DiskReadBytes",
            "location": 281,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.DiskReadCount": {
            "name": "DiskReadCount",
            "location": 288,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.DiskReadMergedCount": {
            "name": "DiskReadMergedCount",
            "location": 295,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.DiskReadTime": {
            "name": "DiskReadTime",
            "location": 302,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.DiskWriteBytes": {
            "name": "DiskWriteBytes",
            "location": 309,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.DiskWriteCount": {
            "name": "DiskWriteCount",
            "location": 316,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.DiskWriteMergedCount": {
            "name": "DiskWriteMergedCount",
            "location": 323,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.DiskWriteTime": {
            "name": "DiskWriteTime",
            "location": 330,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryActive": {
            "name": "MemoryActive",
            "location": 337,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryAvailable": {
            "name": "MemoryAvailable",
            "location": 344,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryBuffers": {
            "name": "MemoryBuffers",
            "location": 351,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryCached": {
            "name": "MemoryCached",
            "location": 358,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryFree": {
            "name": "MemoryFree",
            "location": 365,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryInactive": {
            "name": "MemoryInactive",
            "location": 372,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryPercent": {
            "name": "MemoryPercent",
            "location": 379,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryShared": {
            "name": "MemoryShared",
            "location": 386,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemorySlab": {
            "name": "MemorySlab",
            "location": 393,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryTotal": {
            "name": "MemoryTotal",
            "location": 400,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.MemoryUsed": {
            "name": "MemoryUsed",
            "location": 407,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkBytesRecv": {
            "name": "NetworkBytesRecv",
            "location": 414,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkBytesSent": {
            "name": "NetworkBytesSent",
            "location": 421,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkConnectionAfInet": {
            "name": "NetworkConnectionAfInet",
            "location": 428,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkConnectionAfInet6": {
            "name": "NetworkConnectionAfInet6",
            "location": 435,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkConnectionAfUnix": {
            "name": "NetworkConnectionAfUnix",
            "location": 442,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkDropin": {
            "name": "NetworkDropin",
            "location": 449,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkDropout": {
            "name": "NetworkDropout",
            "location": 456,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkErrin": {
            "name": "NetworkErrin",
            "location": 463,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkErrout": {
            "name": "NetworkErrout",
            "location": 470,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkPacketsRecv": {
            "name": "NetworkPacketsRecv",
            "location": 477,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.NetworkPacketsSent": {
            "name": "NetworkPacketsSent",
            "location": 484,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/tests/test_basic.py": {
        "testset1": {
            "name": "testset1",
            "location": 50,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {}
        },
        "test_transaction": {
            "name": "test_transaction",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_save_load": {
            "name": "test_save_load",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_save_load_many_1": {
            "name": "test_save_load_many_1",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        },
        "test_save_load_many_2": {
            "name": "test_save_load_many_2",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        }
    },
    "zlmdb-master/zlmdb/tests/test_etcd.py": {
        "testset1": {
            "name": "testset1",
            "location": 50,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {}
        },
        "test_truncate_table": {
            "name": "test_truncate_table",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fill_check": {
            "name": "test_fill_check",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_select": {
            "name": "test_select",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_count_all": {
            "name": "test_count_all",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        },
        "test_count_prefix": {
            "name": "test_count_prefix",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_fill_with_indexes": {
            "name": "test_fill_with_indexes",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_truncate_table_with_index": {
            "name": "test_truncate_table_with_index",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "Dict[str, Sequence[str]]",
                    "List[str]"
                ]
            }
        },
        "test_rebuild_index": {
            "name": "test_rebuild_index",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_rebuild_all_indexes": {
            "name": "test_rebuild_all_indexes",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        }
    },
    "zlmdb-master/zlmdb/tests/test_lmdb.py": {
        "test_lmdb_create": {
            "name": "test_lmdb_create",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lmdb_insert_empty_key_raises": {
            "name": "test_lmdb_insert_empty_key_raises",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lmdb_insert_null_key_raises": {
            "name": "test_lmdb_insert_null_key_raises",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lmdb_insert_empty_value_ok": {
            "name": "test_lmdb_insert_empty_value_ok",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lmdb_insert_null_value_ok": {
            "name": "test_lmdb_insert_null_value_ok",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lmdb_insert": {
            "name": "test_lmdb_insert",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lmdb_delete": {
            "name": "test_lmdb_delete",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zlmdb-master/zlmdb/tests/test_pmaps.py": {
        "testset1": {
            "name": "testset1",
            "location": 50,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {}
        },
        "test_truncate_table": {
            "name": "test_truncate_table",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fill_check": {
            "name": "test_fill_check",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_fill_check2": {
            "name": "test_fill_check2",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_select": {
            "name": "test_select",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_count_all": {
            "name": "test_count_all",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        },
        "test_count_prefix": {
            "name": "test_count_prefix",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_fill_with_indexes": {
            "name": "test_fill_with_indexes",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_truncate_table_with_index": {
            "name": "test_truncate_table_with_index",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "Dict[str, Sequence[str]]",
                    "List[str]"
                ]
            }
        },
        "test_rebuild_index": {
            "name": "test_rebuild_index",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_rebuild_all_indexes": {
            "name": "test_rebuild_all_indexes",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        }
    },
    "zlmdb-master/zlmdb/tests/test_pmap_indexes.py": {
        "testset1": {
            "name": "testset1",
            "location": 53,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "N": [
                    "int"
                ],
                "M": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "test_fill_indexes": {
            "name": "test_fill_indexes",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_fill_indexes_nullable": {
            "name": "test_fill_indexes_nullable",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_fill_index_non_nullable_raises": {
            "name": "test_fill_index_non_nullable_raises",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        },
        "test_fill_non_unique_indexes": {
            "name": "test_fill_non_unique_indexes",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        },
        "test_delete_indexes": {
            "name": "test_delete_indexes",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "str"
                ]
            }
        },
        "test_delete_nonunique_indexes": {
            "name": "test_delete_nonunique_indexes",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "str"
                ]
            }
        },
        "test_delete_nonindexes2": {
            "name": "test_delete_nonindexes2",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "str"
                ]
            }
        },
        "test_set_null_indexes_nullable": {
            "name": "test_set_null_indexes_nullable",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        },
        "test_set_notnull_indexes_nullable": {
            "name": "test_set_notnull_indexes_nullable",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": []
            }
        },
        "test_truncate_table_with_index": {
            "name": "test_truncate_table_with_index",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "testset1": [
                    "List[str]"
                ]
            }
        }
    },
    "zlmdb-master/zlmdb/tests/test_pmap_types.py": {
        "test_pmap_value_types": {
            "name": "test_pmap_value_types",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zlmdb-master/zlmdb/tests/test_select.py": {
        "builder": {
            "name": "builder",
            "location": 57,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "rfloat": {
            "name": "rfloat",
            "location": 62,
            "return": [
                "Callable",
                "bool",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {}
        },
        "fill_mnodelog": {
            "name": "fill_mnodelog",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "Optional[str]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "mnodelog": {
            "name": "mnodelog",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_mnodelog_roundtrip": {
            "name": "test_mnodelog_roundtrip",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "mnodelog": [
                    "Callable"
                ],
                "builder": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "test_mnodelog_insert": {
            "name": "test_mnodelog_insert",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int"
                ]
            }
        },
        "test_mnodelog_queries": {
            "name": "test_mnodelog_queries",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int"
                ]
            }
        },
        "_test_mnodelog_bigtable": {
            "name": "_test_mnodelog_bigtable",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "Callable",
                    "List[int]"
                ],
                "M": [
                    "int",
                    "float"
                ],
                "K": [
                    "int",
                    "Callable",
                    "IO[bytes]",
                    "Union[int, List]"
                ]
            }
        },
        "test_mnodelog_bigtable_size10k": {
            "name": "test_mnodelog_bigtable_size10k",
            "location": 528,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mnodelog_bigtable_size20k": {
            "name": "test_mnodelog_bigtable_size20k",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mnodelog_bigtable_size40k": {
            "name": "test_mnodelog_bigtable_size40k",
            "location": 538,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mnodelog_bigtable_size80k": {
            "name": "test_mnodelog_bigtable_size80k",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mnodelog_bigtable_size160k": {
            "name": "test_mnodelog_bigtable_size160k",
            "location": 548,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "zlmdb-master/zlmdb/tests/_schema_fbs.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "from_fbs": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "User.name": {
            "name": "name",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "User.authid": {
            "name": "authid",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.uuid": {
            "name": "uuid",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.email": {
            "name": "email",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "User.birthday": {
            "name": "birthday",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.is_friendly": {
            "name": "is_friendly",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Union[str, uuid.UUID]",
                    "List[str]",
                    "float",
                    "Callable[[object], Any]"
                ]
            }
        },
        "User.ratings": {
            "name": "ratings",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.friends": {
            "name": "friends",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.referred_by": {
            "name": "referred_by",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "User.build": {
            "name": "build",
            "location": 140,
            "return": [
                "bool",
                "str",
                "arxiv.users.domain.User"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "Callable",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.cast": {
            "name": "cast",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "buf": []
            }
        },
        "User.create_test_user": {
            "name": "create_test_user",
            "location": 189,
            "return": [
                "User",
                "core.models.User",
                "bool",
                "app.models.User",
                "set"
            ],
            "arguments": {
                "oid": [
                    "Optional[int]",
                    "Dict[str, Any]",
                    "datetime.timedelta"
                ]
            }
        }
    },
    "zlmdb-master/zlmdb/tests/_schema_mnode_log.py": {
        "_MNodeLogGen.GetRootAsMNodeLog": {
            "name": "GetRootAsMNodeLog",
            "location": 47,
            "return": [
                "int",
                "str",
                "numpy.ndarray",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "buf": [
                    "str",
                    "bytes",
                    "uuid.UUID"
                ],
                "offset": [
                    "str",
                    "bytes",
                    "uuid.UUID"
                ]
            }
        },
        "_MNodeLogGen.NodeIdAsBytes": {
            "name": "NodeIdAsBytes",
            "location": 53,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MNodeLogGen.RunIdAsBytes": {
            "name": "RunIdAsBytes",
            "location": 61,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "from_fbs": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "MNodeLog.parse": {
            "name": "parse",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node_id": [],
                "heartbeat": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Sequence[T]]"
                ]
            }
        },
        "MNodeLog.marshal": {
            "name": "marshal",
            "location": 242,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.__str__": {
            "name": "__str__",
            "location": 317,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MNodeLog.timestamp": {
            "name": "timestamp",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "bool",
                    "str",
                    "Optional[object]",
                    "Union[int, float, None]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "MNodeLog.node_id": {
            "name": "node_id",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[str, Sequence]",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MNodeLog.run_id": {
            "name": "run_id",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "Union[str, Sequence]"
                ]
            }
        },
        "MNodeLog.state": {
            "name": "state",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Hashable"
                ]
            }
        },
        "MNodeLog.ended": {
            "name": "ended",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Optional[Union[str, Any]]",
                    "Union[None, float, int, str]",
                    "Union[None, int, float]",
                    "T",
                    "str"
                ]
            }
        },
        "MNodeLog.session": {
            "name": "session",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[float]",
                    "Hashable",
                    "float",
                    "Union[int, None]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MNodeLog.sent": {
            "name": "sent",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "bool",
                    "str",
                    "Optional[object]",
                    "Union[int, float, None]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "MNodeLog.seq": {
            "name": "seq",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Hashable"
                ]
            }
        },
        "MNodeLog.routers": {
            "name": "routers",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Hashable"
                ]
            }
        },
        "MNodeLog.containers": {
            "name": "containers",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Iterable[str]]",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "MNodeLog.guests": {
            "name": "guests",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Hashable"
                ]
            }
        },
        "MNodeLog.proxies": {
            "name": "proxies",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Hashable"
                ]
            }
        },
        "MNodeLog.marketmakers": {
            "name": "marketmakers",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Hashable"
                ]
            }
        },
        "MNodeLog.cpu_ctx_switches": {
            "name": "cpu_ctx_switches",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "MNodeLog.cpu_freq": {
            "name": "cpu_freq",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.cpu_guest": {
            "name": "cpu_guest",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.cpu_guest_nice": {
            "name": "cpu_guest_nice",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "T",
                    "Hashable",
                    "Optional[str]",
                    "Optional[numpy.ndarray]",
                    "Optional[bool]",
                    "bool",
                    "Optional[object]"
                ]
            }
        },
        "MNodeLog.cpu_idle": {
            "name": "cpu_idle",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.cpu_interrupts": {
            "name": "cpu_interrupts",
            "location": 529,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.cpu_iotwait": {
            "name": "cpu_iotwait",
            "location": 540,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.cpu_irq": {
            "name": "cpu_irq",
            "location": 551,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.cpu_nice": {
            "name": "cpu_nice",
            "location": 562,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.cpu_soft_interrupts": {
            "name": "cpu_soft_interrupts",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.cpu_softirq": {
            "name": "cpu_softirq",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.cpu_steal": {
            "name": "cpu_steal",
            "location": 595,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.cpu_system": {
            "name": "cpu_system",
            "location": 606,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.cpu_user": {
            "name": "cpu_user",
            "location": 617,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[float]",
                    "Hashable",
                    "Optional[Dict[str, Any]]",
                    "Optional[numpy.ndarray]",
                    "Union[None, str, List[str]]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "MNodeLog.network_bytes_recv": {
            "name": "network_bytes_recv",
            "location": 628,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "MNodeLog.network_bytes_sent": {
            "name": "network_bytes_sent",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[numpy.ndarray]",
                    "str",
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "MNodeLog.network_connection_af_inet": {
            "name": "network_connection_af_inet",
            "location": 650,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.network_connection_af_inet6": {
            "name": "network_connection_af_inet6",
            "location": 661,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.network_connection_af_unix": {
            "name": "network_connection_af_unix",
            "location": 672,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.network_dropin": {
            "name": "network_dropin",
            "location": 683,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.network_dropout": {
            "name": "network_dropout",
            "location": 694,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.network_errin": {
            "name": "network_errin",
            "location": 705,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.network_errout": {
            "name": "network_errout",
            "location": 716,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.network_packets_recv": {
            "name": "network_packets_recv",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.network_packets_sent": {
            "name": "network_packets_sent",
            "location": 738,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.memory_active": {
            "name": "memory_active",
            "location": 749,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.memory_available": {
            "name": "memory_available",
            "location": 760,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.memory_buffers": {
            "name": "memory_buffers",
            "location": 771,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.memory_cached": {
            "name": "memory_cached",
            "location": 782,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.memory_free": {
            "name": "memory_free",
            "location": 793,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.memory_inactive": {
            "name": "memory_inactive",
            "location": 804,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.memory_percent": {
            "name": "memory_percent",
            "location": 815,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Hashable",
                    "T",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "MNodeLog.memory_shared": {
            "name": "memory_shared",
            "location": 826,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.memory_slab": {
            "name": "memory_slab",
            "location": 837,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.memory_total": {
            "name": "memory_total",
            "location": 848,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "int"
                ]
            }
        },
        "MNodeLog.memory_used": {
            "name": "memory_used",
            "location": 859,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Union[None, str, int, float]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MNodeLog.disk_busy_time": {
            "name": "disk_busy_time",
            "location": 870,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "MNodeLog.disk_read_bytes": {
            "name": "disk_read_bytes",
            "location": 881,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[List[\"ChangeSubscription\"]]",
                    "str",
                    "Optional[Union[bool, int]]",
                    "Optional[int]"
                ]
            }
        },
        "MNodeLog.disk_read_count": {
            "name": "disk_read_count",
            "location": 892,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Optional[numpy.ndarray]",
                    "int",
                    "str"
                ]
            }
        },
        "MNodeLog.disk_read_merged_count": {
            "name": "disk_read_merged_count",
            "location": 903,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[object]",
                    "Optional[Union[bool, int]]",
                    "Optional[numpy.ndarray]",
                    "int"
                ]
            }
        },
        "MNodeLog.disk_read_time": {
            "name": "disk_read_time",
            "location": 914,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "MNodeLog.disk_write_bytes": {
            "name": "disk_write_bytes",
            "location": 925,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[List[\"ChangeSubscription\"]]",
                    "str",
                    "Optional[Union[bool, int]]",
                    "Optional[int]"
                ]
            }
        },
        "MNodeLog.disk_write_count": {
            "name": "disk_write_count",
            "location": 936,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, int]]",
                    "Optional[numpy.ndarray]",
                    "int",
                    "str"
                ]
            }
        },
        "MNodeLog.disk_write_merged_count": {
            "name": "disk_write_merged_count",
            "location": 947,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[object]",
                    "Optional[Union[bool, int]]",
                    "Optional[numpy.ndarray]",
                    "int"
                ]
            }
        },
        "MNodeLog.disk_write_time": {
            "name": "disk_write_time",
            "location": 958,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "MNodeLog.cast": {
            "name": "cast",
            "location": 963,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "buf": [
                    "bool",
                    "List[deque]",
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "MNodeLog.build": {
            "name": "build",
            "location": 967,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "builder": [
                    "Optional[Dict]",
                    "str",
                    "Callable[[Any], bool]"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 1167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]"
                ]
            }
        },
        "Schema.attach": {
            "name": "attach",
            "location": 1171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "db": [
                    "Callable",
                    "Hashable"
                ]
            }
        }
    },
    "zlmdb-master/zlmdb/tests/_schema_py2.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__eq__": {
            "name": "__eq__",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[str]",
                    "Hashable"
                ]
            }
        },
        "User.__ne__": {
            "name": "__ne__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "User.marshal": {
            "name": "marshal",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.parse": {
            "name": "parse",
            "location": 108,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.create_test_user": {
            "name": "create_test_user",
            "location": 133,
            "return": [
                "bool",
                "set"
            ],
            "arguments": {
                "oid": [
                    "Optional[int]",
                    "Dict[str, Any]",
                    "datetime.timedelta"
                ],
                "realm_oid": [
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "Schema1.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema2.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema3.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema4.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/tests/_schema_py3.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__eq__": {
            "name": "__eq__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[str]",
                    "Hashable"
                ]
            }
        },
        "User.__ne__": {
            "name": "__ne__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "User.marshal": {
            "name": "marshal",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.parse": {
            "name": "parse",
            "location": 126,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.create_test_user": {
            "name": "create_test_user",
            "location": 151,
            "return": [
                "bool",
                "set"
            ],
            "arguments": {
                "oid": [
                    "Optional[int]",
                    "Dict[str, Any]",
                    "datetime.timedelta"
                ],
                "realm_oid": [
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "Schema1.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema2.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema3.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema4.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/tests/_test_flatbuffers.py": {
        "test_pmap_flatbuffers_values": {
            "name": "test_pmap_flatbuffers_values",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pmap_flatbuffers_count": {
            "name": "test_pmap_flatbuffers_count",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "UsersSchema.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "zlmdb-master/zlmdb/tests/_test_serialization.py": {
        "_serializer_run_fbs": {
            "name": "_serializer_run_fbs",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_serializer_run": {
            "name": "_serializer_run",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_serialization_speed": {
            "name": "_serialization_speed",
            "location": 65,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "serializer": [
                    "str",
                    "List[str]"
                ],
                "testfun": []
            }
        },
        "test_json_serialization_speed": {
            "name": "test_json_serialization_speed",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cbor_serialization_speed": {
            "name": "test_cbor_serialization_speed",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pickle_serialization_speed": {
            "name": "test_pickle_serialization_speed",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_flatbuffer_serialization_speed": {
            "name": "test_flatbuffer_serialization_speed",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
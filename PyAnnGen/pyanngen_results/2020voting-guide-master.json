{
    "2020voting-guide-master/crawler/2020election_bulletin/__main__.py": {
        "ROCtoAD": {
            "name": "ROCtoAD",
            "location": 11,
            "return": [],
            "arguments": {
                "roc_date": []
            }
        },
        "caculate_age": {
            "name": "caculate_age",
            "location": 16,
            "return": [],
            "arguments": {
                "date_of_birth": []
            }
        },
        "party_politics": {
            "name": "party_politics",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "party_candidates": {
            "name": "party_candidates",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "regional_candidates": {
            "name": "regional_candidates",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/bill/__main__.py": {
        "extract": {
            "name": "extract",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "transform_load": {
            "name": "transform_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/bill_click/__main__.py": {},
    "2020voting-guide-master/crawler/bill_description/__main__.py": {
        "extract": {
            "name": "extract",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "transform_load": {
            "name": "transform_load",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/bulletin/spider.py": {
        "PoliticsSpider.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_urls": [
                    "None"
                ]
            }
        },
        "PoliticsSpider.start_requests": {
            "name": "start_requests",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoliticsSpider.parse": {
            "name": "parse",
            "location": 28,
            "return": [
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text], ]]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "2020voting-guide-master/crawler/bulletin/transform.py": {
        "transform": {
            "name": "transform",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_path": [
                    "str"
                ],
                "output_path": [
                    "str"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/bulletin/__main__.py": {
        "remove_output": {
            "name": "remove_output",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "crawl_raw_data": {
            "name": "crawl_raw_data",
            "location": 30,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "get_bulletin_urls": {
            "name": "get_bulletin_urls",
            "location": 44,
            "return": [
                "list[]"
            ],
            "arguments": {
                "sources": []
            }
        },
        "crawl_politics_data": {
            "name": "crawl_politics_data",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "urls": []
            }
        },
        "write_result_to_db": {
            "name": "write_result_to_db",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "input_path": []
            }
        }
    },
    "2020voting-guide-master/crawler/caculation/__main__.py": {
        "tag_current_candidate": {
            "name": "tag_current_candidate",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tag_history_candidate": {
            "name": "tag_history_candidate",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_last_term": {
            "name": "update_last_term",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_photo": {
            "name": "update_photo",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_sitting_rate": {
            "name": "update_sitting_rate",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "store_bill_proposer_cosignatory": {
            "name": "store_bill_proposer_cosignatory",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "store_all_candidates": {
            "name": "store_all_candidates",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_sitting_rate.is_participatable_meeting": {
            "name": "is_participatable_meeting",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "meeting_date": [],
                "onboard_date": [],
                "leave_date": []
            }
        },
        "store_all_candidates.get_county": {
            "name": "get_county",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "constituency": []
            }
        }
    },
    "2020voting-guide-master/crawler/candidate_ad/__main__.py": {},
    "2020voting-guide-master/crawler/candidate_info/__main__.py": {
        "prettier": {
            "name": "prettier",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "extract_regional": {
            "name": "extract_regional",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "extract_party": {
            "name": "extract_party",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/candidate_payments/__main__.py": {},
    "2020voting-guide-master/crawler/candidate_statistic/spider.py": {
        "RecordSpider.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "legal_proposal_path": [],
                "interpellation_path": []
            }
        },
        "RecordSpider.parse": {
            "name": "parse",
            "location": 18,
            "return": [
                "typing.Generator[Request]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "RecordSpider.parse_legislator_list_page": {
            "name": "parse_legislator_list_page",
            "location": 29,
            "return": [
                "typing.Generator[Request]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "RecordSpider.parse_legislator_list_term_page": {
            "name": "parse_legislator_list_term_page",
            "location": 37,
            "return": [
                "typing.Generator[Request]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "RecordSpider.parse_personal_page": {
            "name": "parse_personal_page",
            "location": 44,
            "return": [
                "typing.Generator[Request]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "RecordSpider.parse_achievement_page": {
            "name": "parse_achievement_page",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "RecordSpider.parse_statistics_page": {
            "name": "parse_statistics_page",
            "location": 93,
            "return": [
                "typing.Generator[Request]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "RecordSpider.parse_legal_proposal_page": {
            "name": "parse_legal_proposal_page",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "RecordSpider.parse_interpellation_page": {
            "name": "parse_interpellation_page",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "2020voting-guide-master/crawler/candidate_statistic/__main__.py": {
        "scrapy_crawl": {
            "name": "scrapy_crawl",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "write_result_to_db": {
            "name": "write_result_to_db",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "legal_proposal_file_path": [
                    "str",
                    "list"
                ],
                "interpellation_file_path": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/candidate_xlsx/__main__.py": {},
    "2020voting-guide-master/crawler/case_of_action/__main__.py": {
        "download_word": {
            "name": "download_word",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "billNo": [],
                "file_path": []
            }
        },
        "word_to_text": {
            "name": "word_to_text",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "doc_path": []
            }
        },
        "get_case_of_action": {
            "name": "get_case_of_action",
            "location": 26,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "process_bill": {
            "name": "process_bill",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "bill": []
            }
        }
    },
    "2020voting-guide-master/crawler/category_visualization/__main__.py": {},
    "2020voting-guide-master/crawler/citizen_congress_watch/excel_parser/data_extract.py": {
        "calculate": {
            "name": "calculate",
            "location": 5,
            "return": [],
            "arguments": {
                "name": [],
                "party": [],
                "record": [],
                "people_dict": [],
                "party_dict": []
            }
        }
    },
    "2020voting-guide-master/crawler/citizen_congress_watch/excel_parser/group_info.py": {},
    "2020voting-guide-master/crawler/citizen_congress_watch/excel_parser/json_convert.py": {
        "set_rate_labels": {
            "name": "set_rate_labels",
            "location": 10,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "df": [],
                "rate_col": [],
                "session": [],
                "rate_type": []
            }
        },
        "generate_json": {
            "name": "generate_json",
            "location": 71,
            "return": [
                "list[dict[typing.Text, dict[, dict[, dict[, ]]]]]"
            ],
            "arguments": {
                "df": [],
                "rate_type": [],
                "session": []
            }
        }
    },
    "2020voting-guide-master/crawler/citizen_congress_watch/excel_parser/rate_merge.py": {
        "merge_single_session": {
            "name": "merge_single_session",
            "location": 8,
            "return": [],
            "arguments": {
                "session": []
            }
        }
    },
    "2020voting-guide-master/crawler/citizen_congress_watch/excel_parser/sheets.py": {
        "get_full_type_name": {
            "name": "get_full_type_name",
            "location": 4,
            "return": [],
            "arguments": {
                "sheet_name": []
            }
        },
        "get_sheets": {
            "name": "get_sheets",
            "location": 28,
            "return": [],
            "arguments": {
                "session": []
            }
        }
    },
    "2020voting-guide-master/crawler/citizen_congress_watch/excel_parser/__main__.py": {},
    "2020voting-guide-master/crawler/citizen_congress_watch/merge_excel_web/merge_party.py": {
        "add_party_to_personal": {
            "name": "add_party_to_personal",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "merge_party_data": {
            "name": "merge_party_data",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/citizen_congress_watch/merge_excel_web/merge_personal.py": {
        "merge_personal": {
            "name": "merge_personal",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/citizen_congress_watch/merge_excel_web/__main__.py": {},
    "2020voting-guide-master/crawler/citizen_congress_watch/web_parser/count_parser.py": {
        "parse_legislator_num": {
            "name": "parse_legislator_num",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/citizen_congress_watch/web_parser/rate_parser.py": {
        "process_urls": {
            "name": "process_urls",
            "location": 39,
            "return": [],
            "arguments": {
                "session_list": [],
                "urls": []
            }
        },
        "get_legislator_rate": {
            "name": "get_legislator_rate",
            "location": 47,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "url": []
            }
        },
        "parse_legislator_rate": {
            "name": "parse_legislator_rate",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/citizen_congress_watch/web_parser/__main__.py": {},
    "2020voting-guide-master/crawler/issue_bill/__main__.py": {},
    "2020voting-guide-master/crawler/law/analysis.py": {},
    "2020voting-guide-master/crawler/law/spider.py": {
        "LawSpider.parse": {
            "name": "parse",
            "location": 10,
            "return": [
                "typing.Generator[Request]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "LawSpider.parse_law_page": {
            "name": "parse_law_page",
            "location": 25,
            "return": [
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text], ]]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "2020voting-guide-master/crawler/law/__main__.py": {
        "remove_output": {
            "name": "remove_output",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "scrapy_crawl": {
            "name": "scrapy_crawl",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/legacy/candidate/spider.py": {
        "VotingAreaMappingSpider.start_requests": {
            "name": "start_requests",
            "location": 26,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VotingAreaMappingSpider.parse": {
            "name": "parse",
            "location": 38,
            "return": [
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text,typing.Text,typing.Text,typing.Text], typing.Union[dict[typing.Union[typing.Text,typing.Text], ],dict[typing.Union[typing.Text,typing.Text], ],dict[typing.Union[typing.Text,typing.Text,typing.Text], ],dict[typing.Union[typing.Text,typing.Text], ]]]]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "VotingAreaMappingSpider.parse.wiki_links_processor": {
            "name": "wiki_links_processor",
            "location": 39,
            "return": [
                "list[]"
            ],
            "arguments": {
                "links": []
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/candidate/transform.py": {
        "parse_constituency": {
            "name": "parse_constituency",
            "location": 5,
            "return": [
                "dict[typing.Text, list[list[dict[typing.Text, typing.Union[typing.Text,None]]]]]"
            ],
            "arguments": {
                "constituency_data": []
            }
        },
        "transform": {
            "name": "transform",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "input_path": [],
                "output_path": []
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/candidate/__main__.py": {
        "remove_output": {
            "name": "remove_output",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "scrapy_crawl": {
            "name": "scrapy_crawl",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "write_result_to_db": {
            "name": "write_result_to_db",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": []
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/candidate_age/spider.py": {
        "calculate_age": {
            "name": "calculate_age",
            "location": 20,
            "return": [],
            "arguments": {
                "year": [],
                "month": [],
                "day": []
            }
        },
        "VotingAreaMappingSpider.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page_list": []
            }
        },
        "VotingAreaMappingSpider.start_requests": {
            "name": "start_requests",
            "location": 33,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VotingAreaMappingSpider.parse": {
            "name": "parse",
            "location": 46,
            "return": [
                "None",
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text,typing.Text], ]]",
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text,typing.Text], typing.Union[None,None]]]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/candidate_age/transform.py": {
        "parse_constituency": {
            "name": "parse_constituency",
            "location": 4,
            "return": [
                "dict[typing.Text, list[list[dict[typing.Text, typing.Text]]]]"
            ],
            "arguments": {
                "constituency_data": []
            }
        },
        "transform": {
            "name": "transform",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "input_path": [],
                "output_path": []
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/candidate_age/__main__.py": {
        "remove_output": {
            "name": "remove_output",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_page_list": {
            "name": "get_page_list",
            "location": 17,
            "return": [
                "list[]",
                "int",
                "str",
                "bool",
                "List[str]",
                "Tuple[int]"
            ],
            "arguments": {}
        },
        "crawl": {
            "name": "crawl",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "write_result_to_db": {
            "name": "write_result_to_db",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/candidate_fb/__main__.py": {},
    "2020voting-guide-master/crawler/legacy/candidate_wikidata/__main__.py": {
        "get_candidates": {
            "name": "get_candidates",
            "location": 10,
            "return": [
                "list[]",
                "List[str]",
                "Tuple[str, str]",
                "Tuple[Literal]",
                "str",
                "List[Tuple[str, str]]",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "get_results": {
            "name": "get_results",
            "location": 14,
            "return": [
                "Dict[str, bool]",
                "str",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "endpoint_url": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "query": [
                    "str",
                    "Dict[Hashable, Any]",
                    "dict[typing.Hashable, typing.Any]",
                    "Callable[[], T]",
                    "typing.Callable[[], T]"
                ]
            }
        },
        "get_politician_data": {
            "name": "get_politician_data",
            "location": 21,
            "return": [
                "list[]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "update_candidate": {
            "name": "update_candidate",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "candidate_data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "list",
                    "list[]"
                ]
            }
        },
        "get_politician_data.parse_result": {
            "name": "parse_result",
            "location": 22,
            "return": [
                "str",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "result": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/legislator/crawl_legislator_info.py": {
        "_send_request": {
            "name": "_send_request",
            "location": 8,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "dict",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "payload": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_store_info": {
            "name": "_store_info",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "response_body": [
                    "str",
                    "Union[int, str]",
                    "int"
                ],
                "output_dir": [
                    "str"
                ]
            }
        },
        "crawl_info_pages": {
            "name": "crawl_info_pages",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "output_dir": [
                    "str"
                ],
                "name": [
                    "str",
                    "int",
                    "bool"
                ],
                "payload_base": [
                    "dict[, ]",
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, str]",
                    "float"
                ],
                "page_count": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "Dict[Tuple[str, str], int]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "crawl_all": {
            "name": "crawl_all",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "output_dir": [
                    "str"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/legislator/transform.py": {
        "get_legislators_info": {
            "name": "get_legislators_info",
            "location": 5,
            "return": [
                "int",
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "history_legislator_info_pages": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "current_legislator_info_pages": [
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "dict[, ]",
                    "Optional[Dict]",
                    "dict"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/legislator/__main__.py": {
        "run_history_legislator_info_pages": {
            "name": "run_history_legislator_info_pages",
            "location": 13,
            "return": [
                "str",
                "int",
                "dict[, ]",
                "bool",
                "tuple[typing.Optional[tuple[typing.Optional[]]]]",
                "dict[str, typing.Union[typing.Any,str]]"
            ],
            "arguments": {}
        },
        "run_current_legislator_info_pages": {
            "name": "run_current_legislator_info_pages",
            "location": 20,
            "return": [
                "str",
                "int",
                "dict[, ]",
                "bool",
                "tuple[typing.Optional[tuple[typing.Optional[]]]]",
                "dict[str, typing.Union[typing.Any,str]]"
            ],
            "arguments": {}
        },
        "tag_history_legislator_in_db": {
            "name": "tag_history_legislator_in_db",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "tag_current_legislator_in_db": {
            "name": "tag_current_legislator_in_db",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "str"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/party/__main__.py": {
        "to_db": {
            "name": "to_db",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/legacy/party_leader/__main__.py": {},
    "2020voting-guide-master/crawler/legacy/sitting/__main__.py": {
        "to_db": {
            "name": "to_db",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "pages_info": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "bool",
                    "dict[str, dict[str, typing.Any]]",
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/tests/test_legislator_candidate.py": {
        "test_constituency_transform": {
            "name": "test_constituency_transform",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/crawler/legacy/wiki_external_links/transform.py": {
        "transform": {
            "name": "transform",
            "location": 4,
            "return": [
                "list[]",
                "str",
                "Dict[str, bool]",
                "float",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "pages_links": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[Tuple[int, ...]]",
                    "tuple[typing.Union[int,...]]"
                ]
            }
        },
        "transform.classify_links": {
            "name": "classify_links",
            "location": 5,
            "return": [
                "dict[typing.Text, list[]]",
                "Dict[str, int]",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "page": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/legacy/wiki_external_links/__main__.py": {
        "remove_output": {
            "name": "remove_output",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "_send_request": {
            "name": "_send_request",
            "location": 22,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "get_page_list": {
            "name": "get_page_list",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "get_external_link_section": {
            "name": "get_external_link_section",
            "location": 47,
            "return": [],
            "arguments": {
                "page_name": []
            }
        },
        "get_page_links": {
            "name": "get_page_links",
            "location": 68,
            "return": [],
            "arguments": {
                "page_name": []
            }
        }
    },
    "2020voting-guide-master/crawler/legislator_contributions/__main__.py": {},
    "2020voting-guide-master/crawler/utils/db.py": {},
    "2020voting-guide-master/crawler/utils/legislative_yuan_open_data.py": {
        "_send_request": {
            "name": "_send_request",
            "location": 12,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "dict",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "payload": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Exception",
                    "Optional[Exception]",
                    "None"
                ],
                "timeout": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Exception",
                    "Optional[Exception]",
                    "None"
                ]
            }
        },
        "scrap_info_pages": {
            "name": "scrap_info_pages",
            "location": 23,
            "return": [
                "list[]",
                "str",
                "float"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "bool",
                    "typing.Sequence[str]",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "payload_base": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "bool",
                    "typing.Sequence[str]",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "page_count": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ],
                "start_page": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ],
                "timeout": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "store_pages_info": {
            "name": "store_pages_info",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "pages_info": [
                    "list[str]",
                    "str",
                    "int",
                    "list[int]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "float",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "id": [
                    "str",
                    "int"
                ],
                "output_dir": [
                    "str",
                    "int"
                ],
                "start_page": [
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "float",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "read_pages_info": {
            "name": "read_pages_info",
            "location": 40,
            "return": [
                "list[]",
                "str",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "input_dir": [
                    "str"
                ]
            }
        },
        "scrap_info_pages.scrap_page": {
            "name": "scrap_page",
            "location": 26,
            "return": [
                "int",
                "Optional[Mapping[str, Any]]",
                "Dict[str, str]",
                "Optional[T]",
                "bool",
                "OrderedDict",
                "bytes"
            ],
            "arguments": {
                "page_num": [
                    "bool",
                    "Dict[int, dict]",
                    "dict"
                ]
            }
        },
        "read_pages_info.read_file": {
            "name": "read_file",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "2020voting-guide-master/crawler/utils/util.py": {
        "store_json": {
            "name": "store_json",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "json_data": [
                    "str"
                ],
                "output_path": [
                    "str",
                    "BinaryIO",
                    "Optional[str]"
                ]
            }
        },
        "roc_to_common_era": {
            "name": "roc_to_common_era",
            "location": 17,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "date": []
            }
        }
    },
    "2020voting-guide-master/crawler/vernacular/__main__.py": {
        "update_vernacular": {
            "name": "update_vernacular",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/preprocessing/generate_legislator_history_info/__main__.py": {
        "readRawData": {
            "name": "readRawData",
            "location": 16,
            "return": [
                "list[]",
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {}
        },
        "integrateData": {
            "name": "integrateData",
            "location": 27,
            "return": [
                "str",
                "set",
                "List[bool]",
                "Optional[str]",
                "bool",
                "Tuple[str, Any]"
            ],
            "arguments": {
                "raw": [
                    "int",
                    "Callable[[int], bool]",
                    "typing.Callable[int, bool]"
                ]
            }
        },
        "writeResultToDb": {
            "name": "writeResultToDb",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "legislator_info": [
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "tuple",
                    "list"
                ]
            }
        }
    },
    "2020voting-guide-master/preprocessing/numbering_legislator/parse_history_legislator.py": {
        "get_legislator_names": {
            "name": "get_legislator_names",
            "location": 6,
            "return": [
                "list[]",
                "List[str]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "2020voting-guide-master/preprocessing/numbering_legislator/__main__.py": {
        "readResult": {
            "name": "readResult",
            "location": 13,
            "return": [
                "list[dict[, ]]",
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {}
        },
        "readOldLegislator": {
            "name": "readOldLegislator",
            "location": 23,
            "return": [
                "list[]",
                "List[str]",
                "bool",
                "Union[List[str], List[Any]]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {}
        },
        "writeResultToDb": {
            "name": "writeResultToDb",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "legislation_list": [
                    "Iterable[str]",
                    "str",
                    "Type[T]",
                    "Set[str]",
                    "tuple"
                ]
            }
        }
    },
    "2020voting-guide-master/preprocessing/sub_modules/util.py": {
        "getNumberingFilePath": {
            "name": "getNumberingFilePath",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "readNumberingData": {
            "name": "readNumberingData",
            "location": 22,
            "return": [
                "list[dict[, ]]",
                "List[str]",
                "Tuple[int, Dict[str, Any]]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "read_csv": {
            "name": "read_csv",
            "location": 35,
            "return": [
                "list[]",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "getDbConnection": {
            "name": "getDbConnection",
            "location": 47,
            "return": [
                "str",
                "bool",
                "bytes",
                "Tuple[int, int, int]"
            ],
            "arguments": {}
        }
    },
    "2020voting-guide-master/preprocessing/sub_modules/election_history/election_history.py": {
        "readRawData": {
            "name": "readRawData",
            "location": 46,
            "return": [
                "dict[, ]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "writeResultToDb": {
            "name": "writeResultToDb",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "history_info": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "getHistory": {
            "name": "getHistory",
            "location": 131,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, int]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "Dict[str, str]",
                    "None",
                    "dict[str, str]"
                ]
            }
        }
    },
    "2020voting-guide-master/preprocessing/sub_modules/political_contributions/political_contributions.py": {
        "numberFormat": {
            "name": "numberFormat",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "input": []
            }
        },
        "readRawData": {
            "name": "readRawData",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "getPCInfo": {
            "name": "getPCInfo",
            "location": 55,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "2020voting-guide-master/preprocessing/sub_modules/yuan_sittings_attend_rate/yuan_sittings_attend_rate.py": {
        "readRawData": {
            "name": "readRawData",
            "location": 9,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "calc_attending_rate": {
            "name": "calc_attending_rate",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "name": [],
                "term": []
            }
        },
        "readRawData.validate_meeting": {
            "name": "validate_meeting",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "meeting": []
            }
        }
    },
    "2020voting-guide-master/preprocessing/sub_modules/yuan_sittings_attend_rate/__init__.py": {}
}
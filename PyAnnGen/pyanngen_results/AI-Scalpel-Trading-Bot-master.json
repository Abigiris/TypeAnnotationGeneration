{
    "AI-Scalpel-Trading-Bot-master/setup.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/constants.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/freqtradebot.py": {
        "FreqtradeBot.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "FreqtradeBot.cleanup": {
            "name": "cleanup",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.startup": {
            "name": "startup",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.process": {
            "name": "process",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot._extend_whitelist_with_trades": {
            "name": "_extend_whitelist_with_trades",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "whitelist": [
                    "List[str]",
                    "list",
                    "Iterable[float]",
                    "str",
                    "Optional[str]"
                ],
                "trades": [
                    "List[str]",
                    "list",
                    "Iterable[float]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FreqtradeBot._create_pair_whitelist": {
            "name": "_create_pair_whitelist",
            "location": 155,
            "return": [
                "List[tuple]",
                "List[str]",
                "str",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FreqtradeBot.get_target_bid": {
            "name": "get_target_bid",
            "location": 161,
            "return": [
                "int",
                "List[List[int]]",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "List[int]",
                    "django.db.migrations.state.StateApps"
                ],
                "tick": [
                    "str",
                    "bool"
                ]
            }
        },
        "FreqtradeBot._get_trade_stake_amount": {
            "name": "_get_trade_stake_amount",
            "location": 192,
            "return": [
                "None",
                "str",
                "int",
                "Iterable[int]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[str]"
                ]
            }
        },
        "FreqtradeBot._get_min_pair_stake_amount": {
            "name": "_get_min_pair_stake_amount",
            "location": 226,
            "return": [
                "None",
                "float",
                "Dict[str,mypy.build.State]",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "price": [
                    "float",
                    "int"
                ]
            }
        },
        "FreqtradeBot.create_trades": {
            "name": "create_trades",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot._check_depth_of_market_buy": {
            "name": "_check_depth_of_market_buy",
            "location": 311,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "logging.Logger",
                    "int"
                ],
                "conf": [
                    "str"
                ]
            }
        },
        "FreqtradeBot.execute_buy": {
            "name": "execute_buy",
            "location": 328,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Tuple[int, int]",
                    "bool",
                    "Dict[str, int]",
                    "int",
                    "str"
                ],
                "stake_amount": [
                    "float",
                    "datetime.timedelta",
                    "Dict[str, Any]",
                    "Optional[Iterable[str]]",
                    "Optional[Callable[..., Any]]"
                ],
                "price": [
                    "None",
                    "Optional[float]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "FreqtradeBot.process_maybe_execute_buy": {
            "name": "process_maybe_execute_buy",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.process_maybe_execute_sell": {
            "name": "process_maybe_execute_sell",
            "location": 445,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "freqtrade.persistence.Trade"
                ]
            }
        },
        "FreqtradeBot.get_real_amount": {
            "name": "get_real_amount",
            "location": 473,
            "return": [
                "IO[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "freqtrade.persistence.Trade",
                    "bool",
                    "List[Tuple[str, int]]"
                ],
                "order": [
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "FreqtradeBot.update_trade_state": {
            "name": "update_trade_state",
            "location": 522,
            "return": [
                "None",
                "int",
                "List",
                "str"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "Dict[str, str]",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "action_order": [
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "FreqtradeBot.get_sell_rate": {
            "name": "get_sell_rate",
            "location": 552,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "django.db.migrations.state.StateApps"
                ],
                "refresh": [
                    "Dict[str, Set[str]]",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "FreqtradeBot.handle_trade": {
            "name": "handle_trade",
            "location": 571,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "freqtrade.persistence.Trade",
                    "int",
                    "IO",
                    "str"
                ]
            }
        },
        "FreqtradeBot.create_stoploss_order": {
            "name": "create_stoploss_order",
            "location": 614,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "raiden.transfer.state.NettingChannelState",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
                ],
                "stop_price": [
                    "raiden.transfer.state.NettingChannelState",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
                ],
                "rate": [
                    "raiden.transfer.state.NettingChannelState",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]"
                ]
            }
        },
        "FreqtradeBot.handle_stoploss_on_exchange": {
            "name": "handle_stoploss_on_exchange",
            "location": 641,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "bool"
                ]
            }
        },
        "FreqtradeBot.handle_trailing_stoploss_on_exchange": {
            "name": "handle_trailing_stoploss_on_exchange",
            "location": 698,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "freqtrade.persistence.Trade",
                    "Tuple[float, float, float, float]",
                    "int",
                    "float",
                    "T"
                ],
                "order": [
                    "List[str]",
                    "int",
                    "Iterable",
                    "Iterable[Any]"
                ]
            }
        },
        "FreqtradeBot._check_and_execute_sell": {
            "name": "_check_and_execute_sell",
            "location": 728,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "float",
                    "bool",
                    "int",
                    "datetime.timedelta",
                    "str"
                ],
                "sell_rate": [
                    "float",
                    "bool",
                    "int",
                    "datetime.timedelta",
                    "str"
                ],
                "buy": [
                    "float",
                    "bool",
                    "int",
                    "datetime.timedelta",
                    "str"
                ],
                "sell": [
                    "float",
                    "bool",
                    "int",
                    "datetime.timedelta",
                    "str"
                ]
            }
        },
        "FreqtradeBot.check_handle_timedout": {
            "name": "check_handle_timedout",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreqtradeBot.handle_buy_order_full_cancel": {
            "name": "handle_buy_order_full_cancel",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "reason": [
                    "str",
                    "Mapping[str, Any]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "FreqtradeBot.handle_timedout_limit_buy": {
            "name": "handle_timedout_limit_buy",
            "location": 803,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "float"
                ],
                "order": [
                    "dict",
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "FreqtradeBot.handle_timedout_limit_sell": {
            "name": "handle_timedout_limit_sell",
            "location": 825,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "int"
                ],
                "order": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FreqtradeBot.execute_sell": {
            "name": "execute_sell",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "IO",
                    "Callable",
                    "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                    "str",
                    "logging.LogRecord"
                ],
                "limit": [
                    "str",
                    "states.State"
                ],
                "sell_reason": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "FreqtradeBot._notify_sell": {
            "name": "_notify_sell",
            "location": 904,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "str",
                    "freqtrade.persistence.Trade",
                    "int"
                ],
                "order_type": [
                    "bool",
                    "recidiviz.common.constants.state.state_supervision_violation.StateSupervisionViolationType",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/indicator_helpers.py": {
        "went_up": {
            "name": "went_up",
            "location": 8,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "went_down": {
            "name": "went_down",
            "location": 12,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ehlers_super_smoother": {
            "name": "ehlers_super_smoother",
            "location": 16,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str"
                ],
                "smoothing": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fishers_inverse": {
            "name": "fishers_inverse",
            "location": 32,
            "return": [
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Callable",
                    "str"
                ],
                "smoothing": [
                    "int",
                    "float",
                    "Optional[List[float]]",
                    "str",
                    "numpy.ndarray",
                    "List[Optional[float]]",
                    "List"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/loggers.py": {
        "_set_loggers": {
            "name": "_set_loggers",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "verbosity": [
                    "int",
                    "logging.Logger",
                    "Exception"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/main.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "sysargv": [
                    "str",
                    "None",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/misc.py": {
        "shorten_date": {
            "name": "shorten_date",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "_date": [
                    "str",
                    "datetime.date"
                ]
            }
        },
        "datesarray_to_datetimearray": {
            "name": "datesarray_to_datetimearray",
            "location": 34,
            "return": [
                "str",
                "bool",
                "Optional[Mapping[str, Any]]",
                "int"
            ],
            "arguments": {
                "dates": [
                    "None",
                    "numpy.ndarray",
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "file_dump_json": {
            "name": "file_dump_json",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ],
                "data": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "MutableMapping",
                    "Dict",
                    "Dict[Any,pathlib.Path]",
                    "Type[Declared]",
                    "Type"
                ],
                "is_zip": [
                    "bool",
                    "Optional[bytes]",
                    "str",
                    "List"
                ]
            }
        },
        "json_load": {
            "name": "json_load",
            "location": 64,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[Callable]",
                "Optional[int]",
                "numpy.array"
            ],
            "arguments": {
                "datafile": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "datetime.datetime",
                    "Tuple[Union[str,...]]",
                    "Union[str,List[str],Tuple[str,...]]"
                ]
            }
        },
        "file_load_json": {
            "name": "file_load_json",
            "location": 73,
            "return": [
                "Optional[str]",
                "None",
                "Optional[int]",
                "str",
                "int",
                "bool",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "IO[str]",
                    "str",
                    "TextIO",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "format_ms_time": {
            "name": "format_ms_time",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "deep_merge_dicts": {
            "name": "deep_merge_dicts",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict",
                "None",
                "Dict[str,Any]",
                "Exception"
            ],
            "arguments": {
                "source": [
                    "Dict",
                    "Mapping[str,Any]",
                    "str"
                ],
                "destination": [
                    "Dict",
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Exception",
                    "None"
                ]
            }
        },
        "round_dict": {
            "name": "round_dict",
            "location": 119,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "int",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/persistence.py": {
        "init": {
            "name": "init",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "Awaitable",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "clean_open_orders": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "float",
                    "robot_server.service.session.session_types.base_session.SessionMetaData",
                    "robot_server.service.session.configuration.SessionConfiguration"
                ]
            }
        },
        "has_column": {
            "name": "has_column",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "columns": [
                    "List[str]",
                    "list",
                    "List[Dict[str, Any]]",
                    "int",
                    "dict"
                ],
                "searchname": [
                    "List[str]",
                    "list",
                    "List[Dict[str, Any]]",
                    "int",
                    "dict"
                ]
            }
        },
        "get_column_def": {
            "name": "get_column_def",
            "location": 69,
            "return": [
                "Union[(_T1, _T2)]"
            ],
            "arguments": {
                "columns": [
                    "bool",
                    "str",
                    "Optional[list]",
                    "Optional[List[str]]"
                ],
                "column": [
                    "bool",
                    "str",
                    "Optional[list]",
                    "Optional[List[str]]"
                ],
                "default": [
                    "bool",
                    "str",
                    "Optional[list]",
                    "Optional[List[str]]"
                ]
            }
        },
        "check_migrate": {
            "name": "check_migrate",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean_dry_run_db": {
            "name": "clean_dry_run_db",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Trade.__repr__": {
            "name": "__repr__",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.to_json": {
            "name": "to_json",
            "location": 217,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.adjust_min_max_rates": {
            "name": "adjust_min_max_rates",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_price": []
            }
        },
        "Trade.adjust_stop_loss": {
            "name": "adjust_stop_loss",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_price": [],
                "stoploss": [],
                "initial": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Trade.update": {
            "name": "update",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Trade.close": {
            "name": "close",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Trade.calc_open_trade_price": {
            "name": "calc_open_trade_price",
            "location": 334,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "fee": [
                    "None",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Trade.calc_close_trade_price": {
            "name": "calc_close_trade_price",
            "location": 348,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "fee": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Trade.calc_profit": {
            "name": "calc_profit",
            "location": 368,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ],
                "fee": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Trade.calc_profit_percent": {
            "name": "calc_profit_percent",
            "location": 388,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ],
                "fee": [
                    "None",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Trade.total_open_trades_stakes": {
            "name": "total_open_trades_stakes",
            "location": 409,
            "return": [
                "int",
                "str",
                "MutableMapping"
            ],
            "arguments": {}
        },
        "Trade.get_open_trades": {
            "name": "get_open_trades",
            "location": 420,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "Trade.stoploss_reinitialization": {
            "name": "stoploss_reinitialization",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "desired_stoploss": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/state.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/utils.py": {
        "setup_utils_configuration": {
            "name": "setup_utils_configuration",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Dict[str,Union[Any,str]]",
                "Optional[str]",
                "Dict"
            ],
            "arguments": {
                "args": [],
                "method": [
                    "Callable[...,str]",
                    "Dict",
                    "List",
                    "Callable",
                    "Callable[...,T]"
                ]
            }
        },
        "start_list_exchanges": {
            "name": "start_list_exchanges",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_create_userdir": {
            "name": "start_create_userdir",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_download_data": {
            "name": "start_download_data",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/wallets.py": {
        "Wallets.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "exchange": [
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "Wallets.get_free": {
            "name": "get_free",
            "location": 29,
            "return": [
                "int",
                "str",
                "Optional[Dict[str,Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "int",
                    "djmoney.contrib.exchange.models.Rate",
                    "Dict[str,bool]",
                    "str"
                ]
            }
        },
        "Wallets.get_used": {
            "name": "get_used",
            "location": 40,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "str",
                    "Dict[str,str]",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "Wallets.get_total": {
            "name": "get_total",
            "location": 51,
            "return": [
                "int",
                "str",
                "Optional[Dict[str,Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "int",
                    "djmoney.contrib.exchange.models.Rate",
                    "Dict[str,bool]",
                    "str"
                ]
            }
        },
        "Wallets.update": {
            "name": "update",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/worker.py": {
        "Worker.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "config": [
                    "None"
                ]
            }
        },
        "Worker._init": {
            "name": "_init",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reconfig": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Worker.state": {
            "name": "state",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._worker": {
            "name": "_worker",
            "location": 76,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "old_state": [
                    "float",
                    "Tuple",
                    "str",
                    "homeassistancore.State",
                    "states.State"
                ],
                "throttle_secs": [
                    "None",
                    "Iterable[Callable]",
                    "prefecengine.state.Cached",
                    "State"
                ]
            }
        },
        "Worker._throttle": {
            "name": "_throttle",
            "location": 114,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ],
                "min_secs": [
                    "int",
                    "str",
                    "Mapping[str,Dict[str,Any]]",
                    "Dict",
                    "Mapping"
                ]
            }
        },
        "Worker._process": {
            "name": "_process",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._reconfigure": {
            "name": "_reconfigure",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.exit": {
            "name": "exit",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/__main__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/configuration/arguments.py": {
        "Arguments.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Arguments._load_args": {
            "name": "_load_args",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.get_parsed_arg": {
            "name": "get_parsed_arg",
            "location": 60,
            "return": [
                "str",
                "bool",
                "Dict",
                "int",
                "None",
                "Dict[int,list[Any]]",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments._parse_args": {
            "name": "_parse_args",
            "location": 71,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments._build_args": {
            "name": "_build_args",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optionlist": [
                    "str",
                    "argparse.ArgumentParser",
                    "Callable[[str],T]",
                    "bool",
                    "Sequence[int]"
                ],
                "parser": [
                    "None",
                    "bool",
                    "argparse.ArgumentParser",
                    "str",
                    "argparse._SubParsersAction"
                ]
            }
        },
        "Arguments._build_subcommands": {
            "name": "_build_subcommands",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/configuration/check_exchange.py": {
        "check_exchange": {
            "name": "check_exchange",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict"
                ],
                "check_for_bad": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/configuration/cli_options.py": {
        "check_int_positive": {
            "name": "check_int_positive",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Arg.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/configuration/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "runmode": [
                    "None",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Configuration.get_config": {
            "name": "get_config",
            "location": 36,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "raiden.constants.Environment"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.from_files": {
            "name": "from_files",
            "location": 47,
            "return": [
                "Dict[Text,dict]",
                "List[str]",
                "argparse.Namespace",
                "bool",
                "raiden.constants.Environment",
                "Optional[str]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "files": [
                    "IO[str]",
                    "IO[Any]",
                    "Iterable[pathlib.Path]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "Configuration.load_config": {
            "name": "load_config",
            "location": 79,
            "return": [
                "Optional[dict]",
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration._process_logging_options": {
            "name": "_process_logging_options",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "argparse.Namespace",
                    "tuple",
                    "str"
                ]
            }
        },
        "Configuration._process_common_options": {
            "name": "_process_common_options",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "tuple",
                    "str",
                    "argparse.Namespace"
                ]
            }
        },
        "Configuration._process_datadir_options": {
            "name": "_process_datadir_options",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "argparse.Namespace"
                ]
            }
        },
        "Configuration._process_optimize_options": {
            "name": "_process_optimize_options",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Configuration._process_plot_options": {
            "name": "_process_plot_options",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Configuration._process_runmode": {
            "name": "_process_runmode",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Configuration._args_to_config": {
            "name": "_args_to_config",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "argname": [
                    "Dict[str, Any]",
                    "str"
                ],
                "logstring": [
                    "str",
                    "logging.Logger",
                    "pathlib.Path"
                ],
                "logfun": [
                    "None",
                    "Optional[Callable]",
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "deprecated_msg": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Callable[[str],str]"
                ]
            }
        },
        "Configuration._resolve_pairs_list": {
            "name": "_resolve_pairs_list",
            "location": 337,
            "return": [
                "Iterator[Tuple[str,str]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Type['BaseConfig']",
                    "Mapping"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/configuration/config_validation.py": {
        "_extend_validator": {
            "name": "_extend_validator",
            "location": 13,
            "return": [
                "str",
                "List[Text]"
            ],
            "arguments": {
                "validator_class": [
                    "bool",
                    "Dict",
                    "Type"
                ]
            }
        },
        "validate_config_schema": {
            "name": "validate_config_schema",
            "location": 38,
            "return": [
                "str",
                "Dict[str,Any]",
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "conf": [
                    "Dict[str,Any]",
                    "str",
                    "int"
                ]
            }
        },
        "validate_config_consistency": {
            "name": "validate_config_consistency",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "Iterable"
                ]
            }
        },
        "_validate_trailing_stoploss": {
            "name": "_validate_trailing_stoploss",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Dict[int, Dict[int, Any]]"
                ]
            }
        },
        "_validate_edge": {
            "name": "_validate_edge",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "conf": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "int",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "_extend_validator.set_defaults": {
            "name": "set_defaults",
            "location": 20,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "validator": [
                    "Dict[str, Any]",
                    "Dict[str, Iterable[Any]]",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "bool"
                ],
                "properties": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Literal",
                    "List[dict]"
                ],
                "instance": [
                    "str",
                    "ClassVar",
                    "Dict[str, int]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "schema": [
                    "Dict[str, Any]",
                    "Dict[str, Iterable[Any]]",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/configuration/directory_operations.py": {
        "create_datadir": {
            "name": "create_datadir",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str,Any]"
                ],
                "datadir": [
                    "None",
                    "str",
                    "Optional[str]",
                    "NamedTuple",
                    "pathlib.Path"
                ]
            }
        },
        "create_userdata_dir": {
            "name": "create_userdata_dir",
            "location": 24,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bool",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ],
                "create_dir": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/configuration/load_config.py": {
        "load_config_file": {
            "name": "load_config_file",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/configuration/timerange.py": {
        "TimeRange.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "starttype": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "stoptype": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "startts": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "stopts": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TimeRange.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TimeRange.parse_timerange": {
            "name": "parse_timerange",
            "location": 31,
            "return": [
                "TimeRange",
                "float",
                "str",
                "int",
                "Union[int,Tuple[int,...]]",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/configuration/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/data/btanalysis.py": {
        "load_backtest_data": {
            "name": "load_backtest_data",
            "location": 23,
            "return": [
                "Tuple",
                "int",
                "List",
                "Type",
                "bool",
                "Set"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "IO",
                    "Optional[str]",
                    "Union[str,pathlib.Path]",
                    "path.Path",
                    "IO[Any]",
                    "cerulean.Path",
                    "pathlib.PurePath"
                ]
            }
        },
        "evaluate_result_multi": {
            "name": "evaluate_result_multi",
            "location": 55,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "Type",
                "str"
            ],
            "arguments": {
                "results": [
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "pandas.DataFrame",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "int"
                ],
                "freq": [
                    "int",
                    "pandas.DataFrame",
                    "str",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]"
                ],
                "max_open_trades": [
                    "int",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ]
            }
        },
        "load_trades_from_db": {
            "name": "load_trades_from_db",
            "location": 76,
            "return": [
                "str",
                "int",
                "Type"
            ],
            "arguments": {
                "db_url": [
                    "str"
                ]
            }
        },
        "load_trades": {
            "name": "load_trades",
            "location": 115,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "source": [
                    "str",
                    "List[str]",
                    "bool",
                    "Set[str]",
                    "Iterable[Sequence[Hashable]]",
                    "Hashable",
                    "Optional[Hashable]",
                    "None"
                ],
                "db_url": [
                    "str",
                    "List",
                    "Callable[...,T]"
                ],
                "exportfilename": [
                    "str"
                ]
            }
        },
        "extract_trades_of_period": {
            "name": "extract_trades_of_period",
            "location": 127,
            "return": [
                "pandas.DataFrame",
                "Sequence",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "Sequence",
                    "str",
                    "pandas.DataFrame"
                ],
                "trades": [
                    "str",
                    "pandas.DataFrame",
                    "Sequence"
                ]
            }
        },
        "combine_tickers_with_mean": {
            "name": "combine_tickers_with_mean",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tickers": [
                    "str",
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "Optional[int]",
                    "Mapping[str,Any]",
                    "int"
                ],
                "column": [
                    "Text",
                    "pandas.DataFrame",
                    "str",
                    "numpy.ndarray",
                    "Optional[int]",
                    "Mapping[str,Any]",
                    "int"
                ]
            }
        },
        "create_cum_profit": {
            "name": "create_cum_profit",
            "location": 153,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "df": [
                    "str",
                    "pandas.DataFrame"
                ],
                "trades": [
                    "str",
                    "int"
                ],
                "col_name": [
                    "str",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/data/converter.py": {
        "parse_ticker_dataframe": {
            "name": "parse_ticker_dataframe",
            "location": 13,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "ticker": [
                    "List",
                    "float",
                    "str",
                    "List[float]",
                    "pandas.DataFrame",
                    "Tuple[Union[int,int,int]]",
                    "Tuple[int,int,int]"
                ],
                "ticker_interval": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bytes"
                ],
                "pair": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "ohlcv_fill_up_missing_data": {
            "name": "ohlcv_fill_up_missing_data",
            "location": 60,
            "return": [
                "str",
                "int",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "dataframe": [
                    "Iterable[Any]",
                    "Sequence[str]",
                    "List[Tuple[int, int, str]]",
                    "Dict[str, Any]",
                    "pandas.DataFrame"
                ],
                "ticker_interval": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "bool"
                ],
                "pair": [
                    "str"
                ]
            }
        },
        "order_book_to_dataframe": {
            "name": "order_book_to_dataframe",
            "location": 95,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "bids": [
                    "List",
                    "int",
                    "pandas.DataFrame"
                ],
                "asks": [
                    "List",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/data/dataprovider.py": {
        "DataProvider.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "exchange": [
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "DataProvider.refresh": {
            "name": "refresh",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairlist": [
                    "int",
                    "str",
                    "Callable"
                ],
                "helping_pairs": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "DataProvider.available_pairs": {
            "name": "available_pairs",
            "location": 38,
            "return": [
                "List",
                "List[str]",
                "List[Tuple[str,str]]",
                "freqtrade.constants.ListPairsWithTimeframes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.ohlcv": {
            "name": "ohlcv",
            "location": 45,
            "return": [
                "DataFrame",
                "int",
                "Callable",
                "bytes",
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Dict[str,str]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "ticker_interval": [
                    "Dict[str,str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "copy": [
                    "bool",
                    "Dict[str,str]",
                    "Optional[int]"
                ]
            }
        },
        "DataProvider.historic_ohlcv": {
            "name": "historic_ohlcv",
            "location": 60,
            "return": [
                "int",
                "List[List[int]]",
                "List[str]",
                "pandas.DataFrame",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Any",
                    "Optional[str]",
                    "None"
                ],
                "ticker_interval": [
                    "str",
                    "None",
                    "Any",
                    "Optional[str]"
                ]
            }
        },
        "DataProvider.get_pair_dataframe": {
            "name": "get_pair_dataframe",
            "location": 73,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bytes",
                    "str",
                    "bool",
                    "Callable[[bytes],bytes]",
                    "Callable[bytes,bytes]"
                ],
                "ticker_interval": [
                    "bytes",
                    "None",
                    "str",
                    "bool",
                    "Callable[[bytes],bytes]",
                    "Callable[bytes,bytes]"
                ]
            }
        },
        "DataProvider.ticker": {
            "name": "ticker",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DataProvider.orderbook": {
            "name": "orderbook",
            "location": 97,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "List"
                ],
                "maximum": [
                    "str",
                    "int",
                    "List"
                ]
            }
        },
        "DataProvider.runmode": {
            "name": "runmode",
            "location": 107,
            "return": [
                "RunMode",
                "bool",
                "Optional[str]",
                "Mapping[str,str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/data/history.py": {
        "trim_tickerlist": {
            "name": "trim_tickerlist",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "tickerlist": [
                    "List[Dict]",
                    "List[int]",
                    "list",
                    "pandas.DataFrame",
                    "float"
                ],
                "timerange": [
                    "freqtrade.arguments.TimeRange",
                    "str"
                ]
            }
        },
        "load_tickerdata_file": {
            "name": "load_tickerdata_file",
            "location": 60,
            "return": [
                "List",
                "bool",
                "str",
                "pathlib.Path",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "datadir": [
                    "str",
                    "IO",
                    "pathlib.Path",
                    "Union[str, IO]"
                ],
                "pair": [
                    "str",
                    "IO",
                    "pathlib.Path",
                    "Union[str, IO]"
                ],
                "ticker_interval": [
                    "str",
                    "IO",
                    "pathlib.Path",
                    "Union[str, IO]"
                ],
                "timerange": [
                    "None",
                    "bool",
                    "str",
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        },
        "store_tickerdata_file": {
            "name": "store_tickerdata_file",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "datadir": [
                    "dict",
                    "Dict[str, Optional[str]]"
                ],
                "pair": [
                    "dict",
                    "Dict[str, Optional[str]]"
                ],
                "ticker_interval": [
                    "dict",
                    "Dict[str, Optional[str]]"
                ],
                "data": [
                    "Union[str, IO]",
                    "str",
                    "pathlib.Path"
                ],
                "is_zip": [
                    "bool",
                    "Union[str,IO]",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "load_pair_history": {
            "name": "load_pair_history",
            "location": 85,
            "return": [
                "None",
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "Optional[pathlib.Path]",
                    "freqtrade.arguments.TimeRange",
                    "pathlib.Path"
                ],
                "ticker_interval": [
                    "str",
                    "Optional[pathlib.Path]",
                    "freqtrade.arguments.TimeRange",
                    "pathlib.Path"
                ],
                "datadir": [
                    "str",
                    "Optional[pathlib.Path]",
                    "freqtrade.arguments.TimeRange",
                    "pathlib.Path"
                ],
                "timerange": [
                    "TimeRange",
                    "str",
                    "Optional[pathlib.Path]",
                    "freqtrade.arguments.TimeRange",
                    "pathlib.Path"
                ],
                "refresh_pairs": [
                    "bool",
                    "str",
                    "List",
                    "IO[str]"
                ],
                "exchange": [
                    "None",
                    "str",
                    "bool",
                    "Optional[freqtrade.exchange.Exchange]",
                    "pandas._FilePathOrBuffer"
                ],
                "fill_up_missing": [
                    "bool",
                    "str",
                    "Optional[freqtrade.exchange.Exchange]",
                    "pandas._FilePathOrBuffer"
                ],
                "drop_incomplete": [
                    "bool",
                    "str",
                    "Optional[freqtrade.exchange.Exchange]",
                    "pandas._FilePathOrBuffer"
                ]
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 138,
            "return": [
                "Dict",
                "str",
                "Set",
                "List[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "datadir": [
                    "bool",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "freqtrade.arguments.TimeRange",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Generator"
                ],
                "ticker_interval": [
                    "bool",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "freqtrade.arguments.TimeRange",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Generator"
                ],
                "pairs": [
                    "bool",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "freqtrade.arguments.TimeRange",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Generator"
                ],
                "refresh_pairs": [
                    "bool",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "freqtrade.arguments.TimeRange",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Generator"
                ],
                "exchange": [
                    "bool"
                ],
                "timerange": [
                    "TimeRange",
                    "bool",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "freqtrade.arguments.TimeRange",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Generator"
                ],
                "fill_up_missing": [
                    "bool",
                    "str",
                    "Optional[freqtrade.configuration.TimeRange]",
                    "freqtrade.arguments.TimeRange",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "Generator"
                ],
                "live": [
                    "bool",
                    "List[str]",
                    "int",
                    "Iterable[str]",
                    "Dict[str,Any]",
                    "Callable"
                ]
            }
        },
        "make_testdata_path": {
            "name": "make_testdata_path",
            "location": 175,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {
                "datadir": [
                    "Optional[pathlib.Path]",
                    "pathlib.Path",
                    "Optional[str]",
                    "List[str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "pair_data_filename": {
            "name": "pair_data_filename",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "datadir": [
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "pair": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "ticker_interval": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "load_cached_data_for_updating": {
            "name": "load_cached_data_for_updating",
            "location": 187,
            "return": [
                "Tuple[Optional[list]]",
                "str",
                "Dict",
                "bool",
                "Dict[int,str]",
                "Mapping[int,str]"
            ],
            "arguments": {
                "datadir": [
                    "str"
                ],
                "pair": [
                    "str"
                ],
                "ticker_interval": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "Union[str, pathlib.Path]"
                ],
                "timerange": [
                    "int",
                    "List[str]",
                    "float",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "download_pair_history": {
            "name": "download_pair_history",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "datadir": [
                    "str",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "exchange": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "pair": [
                    "Mapping[str, Any]",
                    "dict",
                    "str"
                ],
                "ticker_interval": [
                    "Text",
                    "Mapping[str,Any]",
                    "Dict",
                    "str"
                ],
                "timerange": [
                    "None",
                    "Callable",
                    "bytes",
                    "bool",
                    "pandas.DataFrame"
                ]
            }
        },
        "refresh_backtest_ohlcv_data": {
            "name": "refresh_backtest_ohlcv_data",
            "location": 283,
            "return": [
                "List",
                "str",
                "int",
                "pandas.DataFrame",
                "bytes",
                "Set"
            ],
            "arguments": {
                "exchange": [
                    "str",
                    "bool",
                    "path.Path",
                    "Optional[path.Path]",
                    "Union[str, pathlib.Path]"
                ],
                "pairs": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "Optional[List]",
                    "Callable[[float], None]"
                ],
                "timeframes": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "Optional[List]",
                    "Callable[[float], None]"
                ],
                "dl_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "timerange": [
                    "str",
                    "bool"
                ],
                "erase": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_timeframe": {
            "name": "get_timeframe",
            "location": 312,
            "return": [
                "Tuple[tuple]",
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "Sequence",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "bytes"
                ]
            }
        },
        "validate_backtest_data": {
            "name": "validate_backtest_data",
            "location": 326,
            "return": [
                "bool",
                "Optional[Dict[str,Any]]",
                "List[Union[int,Any]]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "str",
                    "bool",
                    "dict"
                ],
                "pair": [
                    "str",
                    "List[str]"
                ],
                "min_date": [
                    "int",
                    "str",
                    "datetime.date"
                ],
                "max_date": [
                    "int",
                    "str",
                    "datetime.date"
                ],
                "ticker_interval_mins": [
                    "int",
                    "str",
                    "datetime.date"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/data/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/edge/__init__.py": {
        "Edge.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "networkmonitor.src.configuration.IConfig",
                    "Mapping[str, Any]"
                ],
                "exchange": [
                    "numpy.ndarray",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "strategy": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Edge.calculate": {
            "name": "calculate",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edge.stake_amount": {
            "name": "stake_amount",
            "location": 145,
            "return": [
                "float",
                "str",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bool",
                    "numpy.ndarray",
                    "Optional[Exception]",
                    "int"
                ],
                "free_capital": [
                    "int"
                ],
                "total_capital": [
                    "bool",
                    "numpy.ndarray"
                ],
                "capital_in_trade": [
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "Edge.stoploss": {
            "name": "stoploss",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Edge.adjust": {
            "name": "adjust",
            "location": 173,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "numpy.dtype",
                    "Dict[str, Any]",
                    "Type[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "Edge.accepted_pairs": {
            "name": "accepted_pairs",
            "location": 200,
            "return": [
                "List[dict[Text,]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edge._fill_calculable_fields": {
            "name": "_fill_calculable_fields",
            "location": 216,
            "return": [
                "pandas.Series",
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "List[List]",
                    "numpy.ndarray",
                    "list",
                    "str"
                ]
            }
        },
        "Edge._process_expectancy": {
            "name": "_process_expectancy",
            "location": 268,
            "return": [
                "Dict",
                "int",
                "Dict[,PairInfo]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "numpy.ndarray",
                    "Iterable[Any]",
                    "List[Union[int, float]]",
                    "Dict[str, float]",
                    "\"Node\"",
                    "sideeye.data.Trial",
                    "str"
                ]
            }
        },
        "Edge._find_trades_for_stoploss_range": {
            "name": "_find_trades_for_stoploss_range",
            "location": 349,
            "return": [
                "List",
                "Set",
                "List[Dict[str,Any]]",
                "List[str]",
                "Dict[str,Any]",
                "Optional[Dict[str,Any]]",
                "Dict",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "ticker_data": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "pair": [
                    "str",
                    "pandas.DataFrame",
                    "tuple",
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Any]"
                ],
                "stoploss_range": [
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence",
                    "List[List[dict]]",
                    "Callable[[numpy.ndarray, numpy.ndarray], float]",
                    "List[Dict[str, Any]]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "Edge._detect_next_stop_or_sell_point": {
            "name": "_detect_next_stop_or_sell_point",
            "location": 363,
            "return": [
                "List[dict[Text,Union[Text,float]]]",
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "buy_column": [
                    "int",
                    "list",
                    "float"
                ],
                "sell_column": [
                    "int",
                    "bool",
                    "str",
                    "raiden.constants.RoutingMode",
                    "float"
                ],
                "date_column": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "str"
                ],
                "ohlc_columns": [
                    "int",
                    "list",
                    "float",
                    "Union[mxnend.NDArray, numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "stoploss": [
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "pair": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/exchange/binance.py": {
        "Binance.get_order_book": {
            "name": "get_order_book",
            "location": 21,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "float"
                ],
                "limit": [
                    "int",
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "Type",
                    "Dict",
                    "List[str]"
                ]
            }
        },
        "Binance.stoploss_limit": {
            "name": "stoploss_limit",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "List",
                "str",
                "Dict[Any,dict[str,str]]",
                "Tuple[Union[Literal,Literal,Literal]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "List"
                ],
                "amount": [
                    "Dict[str,Any]"
                ],
                "stop_price": [
                    "str",
                    "Union[int,float]",
                    "int",
                    "bool",
                    "float"
                ],
                "rate": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/exchange/exchange.py": {
        "retrier_async": {
            "name": "retrier_async",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "retrier": {
            "name": "retrier",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "is_exchange_bad": {
            "name": "is_exchange_bad",
            "location": 763,
            "return": [
                "bool"
            ],
            "arguments": {
                "exchange_name": [
                    "str"
                ]
            }
        },
        "get_exchange_bad_reason": {
            "name": "get_exchange_bad_reason",
            "location": 767,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "exchange_name": [
                    "str",
                    "cmk.base.api.agent_based.type_defs.RuleSetName"
                ]
            }
        },
        "is_exchange_available": {
            "name": "is_exchange_available",
            "location": 771,
            "return": [
                "bool"
            ],
            "arguments": {
                "exchange_name": [
                    "str",
                    "int"
                ],
                "ccxt_module": [
                    "str",
                    "int"
                ]
            }
        },
        "is_exchange_officially_supported": {
            "name": "is_exchange_officially_supported",
            "location": 775,
            "return": [
                "bool"
            ],
            "arguments": {
                "exchange_name": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "available_exchanges": {
            "name": "available_exchanges",
            "location": 779,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "ccxt_module": []
            }
        },
        "timeframe_to_seconds": {
            "name": "timeframe_to_seconds",
            "location": 783,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "ticker_interval": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "AbstractSet[str]",
                    "edp.gui.components.base.BaseMainWindowSection",
                    "Tuple[str, str]"
                ]
            }
        },
        "timeframe_to_minutes": {
            "name": "timeframe_to_minutes",
            "location": 792,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "ticker_interval": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "AbstractSet[str]",
                    "edp.gui.components.base.BaseMainWindowSection",
                    "Tuple[str, str]"
                ]
            }
        },
        "timeframe_to_msecs": {
            "name": "timeframe_to_msecs",
            "location": 799,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "ticker_interval": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "AbstractSet[str]",
                    "edp.gui.components.base.BaseMainWindowSection",
                    "Tuple[str, str]"
                ]
            }
        },
        "timeframe_to_prev_date": {
            "name": "timeframe_to_prev_date",
            "location": 806,
            "return": [
                "int",
                "datetime.timedelta",
                "datetime.date"
            ],
            "arguments": {
                "timeframe": [
                    "Optional[object]",
                    "str",
                    "Optional[datetime.datetime]",
                    "List[int]",
                    "Optional[T]",
                    "Union[datetime.datetime, str]",
                    "T"
                ],
                "date": [
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "str"
                ]
            }
        },
        "timeframe_to_next_date": {
            "name": "timeframe_to_next_date",
            "location": 821,
            "return": [
                "int",
                "datetime.timedelta",
                "datetime.date"
            ],
            "arguments": {
                "timeframe": [
                    "Optional[object]",
                    "str",
                    "Optional[datetime.datetime]",
                    "List[int]",
                    "Optional[T]",
                    "Union[datetime.datetime, str]",
                    "T"
                ],
                "date": [
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "str"
                ]
            }
        },
        "retrier.wrapper": {
            "name": "wrapper",
            "location": 55,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "Exchange.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Exchange.__del__": {
            "name": "__del__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange._init_ccxt": {
            "name": "_init_ccxt",
            "location": 159,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "exchange_config": [
                    "dict"
                ],
                "ccxt_module": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "ccxt_kwargs": [
                    "dict"
                ]
            }
        },
        "Exchange.name": {
            "name": "name",
            "location": 193,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.id": {
            "name": "id",
            "location": 198,
            "return": [
                "str",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.markets": {
            "name": "markets",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.klines": {
            "name": "klines",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair_interval": [
                    "str",
                    "bytes"
                ],
                "copy": [
                    "pandas.DataFrame",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Exchange.set_sandbox": {
            "name": "set_sandbox",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "exchange_config": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict]"
                ],
                "name": [
                    "str",
                    "logging.Logger",
                    "bytes"
                ]
            }
        },
        "Exchange._load_async_markets": {
            "name": "_load_async_markets",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "reload": [
                    "int",
                    "pandas._AnyArrayLike",
                    "str"
                ]
            }
        },
        "Exchange._load_markets": {
            "name": "_load_markets",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange._reload_markets": {
            "name": "_reload_markets",
            "location": 245,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.validate_pairs": {
            "name": "validate_pairs",
            "location": 259,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Exchange.get_valid_pair_combination": {
            "name": "get_valid_pair_combination",
            "location": 285,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "curr_1": [
                    "str",
                    "Optional[str]"
                ],
                "curr_2": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Exchange.validate_timeframes": {
            "name": "validate_timeframes",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeframe": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "Exchange.validate_ordertypes": {
            "name": "validate_ordertypes",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_types": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "golem_messages.message.base.Message"
                ]
            }
        },
        "Exchange.validate_order_time_in_force": {
            "name": "validate_order_time_in_force",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_time_in_force": [
                    "str",
                    "Optional[str]",
                    "Dict[Any, list]",
                    "set",
                    "Iterable[str]"
                ]
            }
        },
        "Exchange.exchange_has": {
            "name": "exchange_has",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "Exchange.symbol_amount_prec": {
            "name": "symbol_amount_prec",
            "location": 345,
            "return": [
                "str",
                "type",
                "int",
                "bool",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "Callable[[T, T], T]",
                    "T"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "Exchange.symbol_price_prec": {
            "name": "symbol_price_prec",
            "location": 356,
            "return": [
                "Callable",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "asyncio.BaseEventLoop",
                    "asyncio.AbstractEventLoop",
                    "List[str]"
                ],
                "price": [
                    "float",
                    "str"
                ]
            }
        },
        "Exchange.dry_run_order": {
            "name": "dry_run_order",
            "location": 367,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "str"
                ],
                "ordertype": [
                    "int",
                    "str"
                ],
                "side": [
                    "Optional[int]"
                ],
                "amount": [
                    "int",
                    "str"
                ],
                "rate": [
                    "int",
                    "str"
                ],
                "params": [
                    "dict",
                    "int",
                    "str",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Exchange._store_dry_order": {
            "name": "_store_dry_order",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dry_order": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple[str, int]",
                    "bytearray"
                ]
            }
        },
        "Exchange.create_order": {
            "name": "create_order",
            "location": 400,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "ordertype": [
                    "str",
                    "Optional[str]"
                ],
                "side": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "amount": [
                    "int",
                    "str"
                ],
                "rate": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "bool"
                ],
                "params": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "Exchange.buy": {
            "name": "buy",
            "location": 428,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "ordertype": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "float"
                ],
                "amount": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "rate": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "time_in_force": [
                    "str",
                    "datetime.datetime",
                    "List[Tuple[str, str]]",
                    "dict",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Exchange.sell": {
            "name": "sell",
            "location": 441,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "ordertype": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "float"
                ],
                "amount": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "rate": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Dict[str, Any]"
                ],
                "time_in_force": [
                    "str",
                    "datetime.datetime",
                    "List[Tuple[str, str]]",
                    "dict",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Exchange.stoploss_limit": {
            "name": "stoploss_limit",
            "location": 454,
            "return": [
                "typing.Dict"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]",
                    "Iterable[allennlp.data.instance.Instance]"
                ],
                "amount": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]",
                    "Iterable[allennlp.data.instance.Instance]"
                ],
                "stop_price": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]",
                    "Iterable[allennlp.data.instance.Instance]"
                ],
                "rate": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]",
                    "Iterable[allennlp.data.instance.Instance]"
                ]
            }
        },
        "Exchange.get_balance": {
            "name": "get_balance",
            "location": 467,
            "return": [
                "str",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "str"
                ]
            }
        },
        "Exchange.get_balances": {
            "name": "get_balances",
            "location": 480,
            "return": [
                "str",
                "int",
                "List[allennlp.data.tokenizers.Token]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_tickers": {
            "name": "get_tickers",
            "location": 500,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_ticker": {
            "name": "get_ticker",
            "location": 514,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "dict"
                ],
                "refresh": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Exchange.get_historic_ohlcv": {
            "name": "get_historic_ohlcv",
            "location": 537,
            "return": [
                "str",
                "Union[str, Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "bool",
                    "pandas._AnyArrayLike",
                    "Optional[str]"
                ],
                "ticker_interval": [
                    "int",
                    "bool",
                    "pandas._AnyArrayLike",
                    "Optional[str]"
                ],
                "since_ms": [
                    "int",
                    "bool",
                    "pandas._AnyArrayLike",
                    "Optional[str]"
                ]
            }
        },
        "Exchange.refresh_latest_ohlcv": {
            "name": "refresh_latest_ohlcv",
            "location": 578,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair_list": [
                    "List[Tuple[str, str]]",
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "Exchange._now_is_time_to_refresh": {
            "name": "_now_is_time_to_refresh",
            "location": 620,
            "return": [
                "Tuple[float, float]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Dict[str, bool]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "ticker_interval": [
                    "int",
                    "Type[T]",
                    "dict"
                ]
            }
        },
        "Exchange.cancel_order": {
            "name": "cancel_order",
            "location": 669,
            "return": [
                "pandas.DataFrame",
                "bytes",
                "dict",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "pair": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Exchange.get_order": {
            "name": "get_order",
            "location": 685,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "common.constants.ConcentUseCase"
                ],
                "pair": [
                    "int",
                    "str"
                ]
            }
        },
        "Exchange.get_order_book": {
            "name": "get_order_book",
            "location": 706,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Iterable[int]"
                ],
                "limit": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "Exchange.get_trades_for_order": {
            "name": "get_trades_for_order",
            "location": 727,
            "return": [
                "str",
                "base.ConfigOptions",
                "Dict[str, Any]",
                "Dict[int, str]",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "str",
                    "int",
                    "Optional[float]",
                    "list"
                ],
                "pair": [
                    "int",
                    "str",
                    "Callable(id)[[object], int]",
                    "List[int]"
                ],
                "since": [
                    "int",
                    "str",
                    "Callable(id)[[object], int]",
                    "List[int]"
                ]
            }
        },
        "Exchange.get_fee": {
            "name": "get_fee",
            "location": 747,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Mapping"
                ],
                "type": [
                    "str",
                    "Mapping"
                ],
                "side": [
                    "str",
                    "Mapping"
                ],
                "amount": [
                    "str",
                    "Mapping"
                ],
                "price": [
                    "str",
                    "Mapping"
                ],
                "taker_or_maker": [
                    "str",
                    "Mapping"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/exchange/kraken.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/exchange/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/backtesting.py": {
        "Backtesting.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Backtesting._set_strategy": {
            "name": "_set_strategy",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": []
            }
        },
        "Backtesting._generate_text_table": {
            "name": "_generate_text_table",
            "location": 105,
            "return": [
                "Dict[str, Any]",
                "Iterable['Notification']",
                "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "T"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[bytes]",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "results": [
                    "int"
                ],
                "skip_nan": [
                    "bool",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "Backtesting._generate_text_table_sell_reason": {
            "name": "_generate_text_table_sell_reason",
            "location": 154,
            "return": [
                "Dict[str, Any]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[bytes]",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "results": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "Backtesting._generate_text_table_strategy": {
            "name": "_generate_text_table_strategy",
            "location": 164,
            "return": [
                "Dict[str, Any]",
                "Iterable['Notification']",
                "Optional[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "T"
            ],
            "arguments": {
                "self": [],
                "all_results": [
                    "pandas.core.series.Series",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Backtesting._store_backtest_result": {
            "name": "_store_backtest_result",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recordfilename": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "dict"
                ],
                "results": [
                    "float",
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "strategyname": [
                    "None",
                    "List[Union[PipeChain,str]]",
                    "bool",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "Backtesting._get_ticker_list": {
            "name": "_get_ticker_list",
            "location": 210,
            "return": [
                "Dict[,list]",
                "str",
                "Callable",
                "List[str]",
                "List"
            ],
            "arguments": {
                "self": [],
                "processed": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Dict[str, float]"
                ]
            }
        },
        "Backtesting._get_sell_trade_entry": {
            "name": "_get_sell_trade_entry",
            "location": 236,
            "return": [
                "BacktestResult",
                "None",
                "str",
                "bool",
                "int",
                "Optional[str]",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "list",
                    "Callable[[str, str], float]",
                    "int",
                    "bool",
                    "List[List[int]]"
                ],
                "buy_row": [
                    "Optional[Iterable[str]]",
                    "int",
                    "bool",
                    "float"
                ],
                "partial_ticker": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Callable[[str, str], float]",
                    "Callable"
                ],
                "trade_count_lock": [
                    "dict",
                    "int",
                    "Dict[int, dict]",
                    "bool"
                ],
                "stake_amount": [
                    "Optional[Iterable[str]]",
                    "int",
                    "bool",
                    "float"
                ],
                "max_open_trades": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Backtesting.backtest": {
            "name": "backtest",
            "location": 311,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Backtesting.start": {
            "name": "start",
            "location": 397,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/default_hyperopt.py": {
        "DefaultHyperOpts.populate_indicators": {
            "name": "populate_indicators",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DefaultHyperOpts.buy_strategy_generator": {
            "name": "buy_strategy_generator",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DefaultHyperOpts.indicator_space": {
            "name": "indicator_space",
            "location": 92,
            "return": [
                "List[Union[Integer,Categorical]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "DefaultHyperOpts.sell_strategy_generator": {
            "name": "sell_strategy_generator",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DefaultHyperOpts.sell_indicator_space": {
            "name": "sell_indicator_space",
            "location": 152,
            "return": [
                "List[Union[Integer,Categorical]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "DefaultHyperOpts.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 170,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "int",
                    "Callable"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DefaultHyperOpts.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 187,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "int",
                    "Callable"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DefaultHyperOpts.buy_strategy_generator.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "DefaultHyperOpts.sell_strategy_generator.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/default_hyperopt_loss.py": {
        "DefaultHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "results": [],
                "trade_count": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/edge_cli.py": {
        "EdgeCli.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "bool"
                ]
            }
        },
        "EdgeCli._generate_edge_table": {
            "name": "_generate_edge_table",
            "location": 49,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "Dict",
                    "OrderedDict",
                    "Iterable[Tuple[Hashable,Any]]",
                    "str"
                ]
            }
        },
        "EdgeCli.start": {
            "name": "start",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/hyperopt.py": {
        "Hyperopt.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Hyperopt.get_lock_filename": {
            "name": "get_lock_filename",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "config": []
            }
        },
        "Hyperopt.clean_hyperopt": {
            "name": "clean_hyperopt",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt.get_args": {
            "name": "get_args",
            "location": 111,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "Hyperopt.save_trials": {
            "name": "save_trials",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt.read_trials": {
            "name": "read_trials",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt.log_trials_result": {
            "name": "log_trials_result",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt.log_results": {
            "name": "log_results",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "Hyperopt.format_results_logstring": {
            "name": "format_results_logstring",
            "location": 213,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "Hyperopt.has_space": {
            "name": "has_space",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "space": []
            }
        },
        "Hyperopt.hyperopt_space": {
            "name": "hyperopt_space",
            "location": 229,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "space": [
                    "None"
                ]
            }
        },
        "Hyperopt.generate_optimizer": {
            "name": "generate_optimizer",
            "location": 251,
            "return": [
                "dict[typing.Text, int]",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "_params": []
            }
        },
        "Hyperopt.format_results": {
            "name": "format_results",
            "location": 310,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "Hyperopt.get_optimizer": {
            "name": "get_optimizer",
            "location": 325,
            "return": [
                "Optimizer"
            ],
            "arguments": {
                "self": [],
                "cpu_count": []
            }
        },
        "Hyperopt.run_optimizer_parallel": {
            "name": "run_optimizer_parallel",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "parallel": [],
                "asked": []
            }
        },
        "Hyperopt.load_previous_results": {
            "name": "load_previous_results",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperopt.start": {
            "name": "start",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/hyperopt_interface.py": {
        "IHyperOpt.populate_indicators": {
            "name": "populate_indicators",
            "location": 33,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "IHyperOpt.buy_strategy_generator": {
            "name": "buy_strategy_generator",
            "location": 42,
            "return": [
                "Callable",
                "None"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "IHyperOpt.sell_strategy_generator": {
            "name": "sell_strategy_generator",
            "location": 49,
            "return": [
                "Callable",
                "None"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "IHyperOpt.indicator_space": {
            "name": "indicator_space",
            "location": 56,
            "return": [
                "List[skopt.space.Dimension]",
                "None"
            ],
            "arguments": {}
        },
        "IHyperOpt.sell_indicator_space": {
            "name": "sell_indicator_space",
            "location": 63,
            "return": [
                "List[skopt.space.Dimension]",
                "None"
            ],
            "arguments": {}
        },
        "IHyperOpt.generate_roi_table": {
            "name": "generate_roi_table",
            "location": 69,
            "return": [
                "Dict[int,int]",
                "float",
                "Type",
                "str",
                "logging.LogRecord",
                "List",
                "Optional[List[str]]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "IHyperOpt.roi_space": {
            "name": "roi_space",
            "location": 85,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "int"
            ],
            "arguments": {}
        },
        "IHyperOpt.stoploss_space": {
            "name": "stoploss_space",
            "location": 162,
            "return": [
                "List[Real]",
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {}
        },
        "IHyperOpt.__getstate__": {
            "name": "__getstate__",
            "location": 176,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IHyperOpt.__setstate__": {
            "name": "__setstate__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/hyperopt_loss_interface.py": {
        "IHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 21,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "results": [
                    "int",
                    "None",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "trade_count": [
                    "int",
                    "None",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "min_date": [
                    "int",
                    "None",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "max_date": [
                    "int",
                    "None",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/hyperopt_loss_onlyprofit.py": {
        "OnlyProfitHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {
                "results": [],
                "trade_count": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/hyperopt_loss_sharpe.py": {
        "SharpeHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 23,
            "return": [
                "float",
                "int",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "results": [
                    "bool",
                    "pandas.DataFrame",
                    "Dict[str,str]",
                    "Dict",
                    "List"
                ],
                "trade_count": [
                    "int",
                    "None",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "min_date": [
                    "bool",
                    "datetime.datetime",
                    "Optional[Union[str,datetime.datetime]]",
                    "datetime"
                ],
                "max_date": [
                    "bool",
                    "datetime.datetime",
                    "Optional[Union[str,datetime.datetime]]",
                    "datetime"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/optimize/__init__.py": {
        "setup_configuration": {
            "name": "setup_configuration",
            "location": 15,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "method": [
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "start_backtesting": {
            "name": "start_backtesting",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_hyperopt": {
            "name": "start_hyperopt",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_edge": {
            "name": "start_edge",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/pairlist/IPairList.py": {
        "IPairList.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": [
                    "Dict",
                    "str",
                    "List"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "IPairList.name": {
            "name": "name",
            "location": 23,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPairList.whitelist": {
            "name": "whitelist",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPairList.blacklist": {
            "name": "blacklist",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPairList.short_desc": {
            "name": "short_desc",
            "location": 47,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPairList.refresh_pairlist": {
            "name": "refresh_pairlist",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPairList._validate_whitelist": {
            "name": "_validate_whitelist",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "whitelist": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/pairlist/StaticPairList.py": {
        "StaticPairList.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": [
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ],
                "config": [
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ]
            }
        },
        "StaticPairList.short_desc": {
            "name": "short_desc",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticPairList.refresh_pairlist": {
            "name": "refresh_pairlist",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/pairlist/VolumePairList.py": {
        "VolumePairList.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": [
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ],
                "config": [
                    "Dict[str,Any]",
                    "Dict",
                    "str"
                ]
            }
        },
        "VolumePairList._validate_keys": {
            "name": "_validate_keys",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "VolumePairList.short_desc": {
            "name": "short_desc",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumePairList.refresh_pairlist": {
            "name": "refresh_pairlist",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VolumePairList._gen_pair_whitelist": {
            "name": "_gen_pair_whitelist",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "base_currency": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Tuple[str]",
                    "Container[str]",
                    "Container"
                ],
                "key": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Container[str]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/pairlist/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/plot/plotting.py": {
        "init_plotscript": {
            "name": "init_plotscript",
            "location": 26,
            "return": [
                "Dict[Text,]",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_indicators": {
            "name": "add_indicators",
            "location": 58,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "fig": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "row": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "indicators": [
                    "List[str]",
                    "list",
                    "List[Tuple[Any, Dict]]",
                    "bool",
                    "List[Dict]",
                    "Iterable[str]",
                    "str"
                ],
                "data": [
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "add_profit": {
            "name": "add_profit",
            "location": 86,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "fig": [
                    "str",
                    "Optional[List[str]]"
                ],
                "row": [
                    "str",
                    "Optional[List[str]]"
                ],
                "data": [
                    "str",
                    "Union[int, str, bool]",
                    "Optional[str]"
                ],
                "column": [
                    "str",
                    "Union[int, str, bool]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Union[int, str, bool]",
                    "Optional[str]"
                ]
            }
        },
        "plot_trades": {
            "name": "plot_trades",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fig": [
                    "int"
                ],
                "trades": [
                    "pandas.DataFrame",
                    "Optional[Union[int, Any]]"
                ]
            }
        },
        "generate_candlestick_graph": {
            "name": "generate_candlestick_graph",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pair": [
                    "str",
                    "dict"
                ],
                "data": [
                    "pandas.DataFrame",
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ],
                "trades": [
                    "None",
                    "str",
                    "pandas.DataFrame",
                    "bool",
                    "Optional[Dict]",
                    "int"
                ],
                "indicators1": [
                    "List",
                    "List[str]",
                    "str"
                ],
                "indicators2": [
                    "List",
                    "List[str]",
                    "str"
                ]
            }
        },
        "generate_profit_graph": {
            "name": "generate_profit_graph",
            "location": 262,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pairs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "tickers": [
                    "int",
                    "Callable",
                    "str"
                ],
                "trades": [
                    "pandas.DataFrame",
                    "str",
                    "float"
                ]
            }
        },
        "generate_plot_filename": {
            "name": "generate_plot_filename",
            "location": 299,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "pair": [
                    "str"
                ],
                "ticker_interval": [
                    "str",
                    "list",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "store_plot_file": {
            "name": "store_plot_file",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "fig": [
                    "bool",
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "directory": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "bool"
                ],
                "auto_open": [
                    "bool",
                    "str"
                ]
            }
        },
        "analyse_and_plot_pairs": {
            "name": "analyse_and_plot_pairs",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "plot_profit": {
            "name": "plot_profit",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, str]",
                    "Mapping",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/plot/plot_utils.py": {
        "validate_plot_args": {
            "name": "validate_plot_args",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_plot_dataframe": {
            "name": "start_plot_dataframe",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "start_plot_profit": {
            "name": "start_plot_profit",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/plot/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/resolvers/exchange_resolver.py": {
        "ExchangeResolver.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_name": [
                    "str",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "config": [
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "ExchangeResolver._load_exchange": {
            "name": "_load_exchange",
            "location": 34,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "self": [],
                "exchange_name": [
                    "str"
                ],
                "kwargs": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/resolvers/hyperopt_resolver.py": {
        "HyperOptResolver.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[type]",
                    "Dict[str, str]"
                ]
            }
        },
        "HyperOptResolver._load_hyperopt": {
            "name": "_load_hyperopt",
            "location": 47,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "self": [],
                "hyperopt_name": [
                    "str",
                    "pathlib.Path"
                ],
                "config": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "extra_dir": [
                    "str",
                    "None",
                    "pathlib.Path"
                ]
            }
        },
        "HyperOptLossResolver.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "HyperOptLossResolver._load_hyperoptloss": {
            "name": "_load_hyperoptloss",
            "location": 103,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "self": [],
                "hyper_loss_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "pathlib.PurePath"
                ],
                "config": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "extra_dir": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/resolvers/iresolver.py": {
        "IResolver._get_valid_object": {
            "name": "_get_valid_object",
            "location": 21,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "object_type": [
                    "str",
                    "Dict[str,type]",
                    "Dict[str,Type]"
                ],
                "module_path": [
                    "str"
                ],
                "object_name": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "IResolver._search_object": {
            "name": "_search_object",
            "location": 48,
            "return": [
                "Tuple",
                "Tuple[None]",
                "str",
                "Optional[str]",
                "Optional[Dict[str,Any]]",
                "bool",
                "Optional[pathlib.Path]",
                "Optional[int]"
            ],
            "arguments": {
                "directory": [
                    "pathlib.Path",
                    "str",
                    "int"
                ],
                "object_type": [
                    "str",
                    "List[str]"
                ],
                "object_name": [
                    "str",
                    "List[str]"
                ],
                "kwargs": [
                    "dict[, ]"
                ]
            }
        },
        "IResolver._load_object": {
            "name": "_load_object",
            "location": 70,
            "return": [
                "bool",
                "List",
                "List[str]",
                "Optional[str]",
                "Dict[str,list[str]]",
                "str",
                "Optional[Literal[only_clustered,include_clustered]]",
                "None"
            ],
            "arguments": {
                "paths": [
                    "List[pathlib.Path]",
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "object_type": [
                    "str",
                    "Dict"
                ],
                "object_name": [
                    "str",
                    "Dict"
                ],
                "kwargs": [
                    "dict[, ]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/resolvers/pairlist_resolver.py": {
        "PairListResolver.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairlist_name": [
                    "List[str]",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Dict[Any,pathlib.Path]",
                    "Type[BaseConfig]",
                    "Type"
                ],
                "freqtrade": [
                    "List[str]",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Dict[Any,pathlib.Path]",
                    "Type[BaseConfig]",
                    "Type"
                ],
                "config": [
                    "List[str]",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Dict[Any,pathlib.Path]",
                    "Type[BaseConfig]",
                    "Type"
                ]
            }
        },
        "PairListResolver._load_pairlist": {
            "name": "_load_pairlist",
            "location": 31,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "self": [],
                "pairlist_name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "pathlib.PurePath"
                ],
                "config": [
                    "str",
                    "Optional[str]",
                    "path.Path"
                ],
                "kwargs": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/resolvers/strategy_resolver.py": {
        "StrategyResolver.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "StrategyResolver._override_attribute_helper": {
            "name": "_override_attribute_helper",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "interface.github.GithubInterface"
                ],
                "attribute": [
                    "str",
                    "logging.Logger",
                    "pathlib.Path",
                    "dict"
                ],
                "default": [
                    "float",
                    "Dict",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "StrategyResolver._strategy_sanity_validations": {
            "name": "_strategy_sanity_validations",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrategyResolver._load_strategy": {
            "name": "_load_strategy",
            "location": 114,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "strategy_name": [
                    "str",
                    "Dict",
                    "List[str]",
                    "Dict[str,pathlib.Path]"
                ],
                "config": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ],
                "extra_dir": [
                    "str",
                    "None",
                    "pathlib.Path"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/resolvers/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/rpc/api_server.py": {
        "ArrowJSONEncoder.default": {
            "name": "default",
            "location": 21,
            "return": [
                "List",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "Dict[str, Any]",
                    "float",
                    "freqtrade.persistence.Trade",
                    "dict"
                ]
            }
        },
        "ApiServer.rpc_catch_errors": {
            "name": "rpc_catch_errors",
            "location": 44,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "func": [
                    "Callable[[], Any]",
                    "Callable"
                ]
            }
        },
        "ApiServer.check_auth": {
            "name": "check_auth",
            "location": 56,
            "return": [
                "bool",
                "Dict",
                "Dict[str,Any]",
                "Dict[str,str]",
                "str",
                "List[Tuple[str,str,str,str,str,str,str]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "ApiServer.require_login": {
            "name": "require_login",
            "location": 60,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "ApiServer.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": [
                    "float"
                ]
            }
        },
        "ApiServer.cleanup": {
            "name": "cleanup",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer.run": {
            "name": "run",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer.send_msg": {
            "name": "send_msg",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict[str, str]",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "ApiServer.rest_dump": {
            "name": "rest_dump",
            "location": 129,
            "return": [
                "float",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "return_value": [
                    "Sequence[Dict[str, str]]",
                    "bool",
                    "List[str]",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "ApiServer.rest_error": {
            "name": "rest_error",
            "location": 133,
            "return": [
                "Tuple[int]",
                "Dict[str,Any]",
                "Callable[...,None]",
                "Callable[[Exception],bool]",
                "flask.Markup"
            ],
            "arguments": {
                "self": [],
                "error_msg": [
                    "str",
                    "Type",
                    "Dict[str, Optional[str]]",
                    "Optional[str]",
                    "Callable[[str], bool]"
                ]
            }
        },
        "ApiServer.register_rest_rpc_urls": {
            "name": "register_rest_rpc_urls",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer.page_not_found": {
            "name": "page_not_found",
            "location": 183,
            "return": [
                "Tuple[int]",
                "str",
                "Dict",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception",
                    "werkzeug.exceptions.NotFound",
                    "List[str]",
                    "str",
                    "tuple"
                ]
            }
        },
        "ApiServer._start": {
            "name": "_start",
            "location": 195,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._stop": {
            "name": "_stop",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._stopbuy": {
            "name": "_stopbuy",
            "location": 215,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._version": {
            "name": "_version",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._reload_conf": {
            "name": "_reload_conf",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._count": {
            "name": "_count",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._daily": {
            "name": "_daily",
            "location": 253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._edge": {
            "name": "_edge",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._profit": {
            "name": "_profit",
            "location": 282,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._performance": {
            "name": "_performance",
            "location": 299,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._status": {
            "name": "_status",
            "location": 314,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._balance": {
            "name": "_balance",
            "location": 325,
            "return": [
                "Optional[List[Any]]",
                "bool",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._whitelist": {
            "name": "_whitelist",
            "location": 336,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._blacklist": {
            "name": "_blacklist",
            "location": 345,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._forcebuy": {
            "name": "_forcebuy",
            "location": 355,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer._forcesell": {
            "name": "_forcesell",
            "location": 369,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiServer.rpc_catch_errors.func_wrapper": {
            "name": "func_wrapper",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiServer.require_login.func_wrapper": {
            "name": "func_wrapper",
            "location": 62,
            "return": [
                "float",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/rpc/fiat_convert.py": {
        "CryptoFiat.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crypto_symbol": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "fiat_symbol": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "price": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CryptoFiat.set_price": {
            "name": "set_price",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "price": [
                    "bool",
                    "float"
                ]
            }
        },
        "CryptoFiat.is_expired": {
            "name": "is_expired",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoToFiatConverter.__new__": {
            "name": "__new__",
            "location": 74,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool"
                ]
            }
        },
        "CryptoToFiatConverter.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoToFiatConverter._load_cryptomap": {
            "name": "_load_cryptomap",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoToFiatConverter.convert_amount": {
            "name": "convert_amount",
            "location": 98,
            "return": [
                "Union[(float, _T0)]"
            ],
            "arguments": {
                "self": [],
                "crypto_amount": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "crypto_symbol": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "fiat_symbol": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CryptoToFiatConverter.get_price": {
            "name": "get_price",
            "location": 111,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "crypto_symbol": [
                    "str",
                    "Sequence[str]"
                ],
                "fiat_symbol": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Tuple[str]"
                ]
            }
        },
        "CryptoToFiatConverter._add_pair": {
            "name": "_add_pair",
            "location": 150,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "None",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "crypto_symbol": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "fiat_symbol": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "price": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CryptoToFiatConverter._is_supported_fiat": {
            "name": "_is_supported_fiat",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fiat": [
                    "str"
                ]
            }
        },
        "CryptoToFiatConverter._find_price": {
            "name": "_find_price",
            "location": 177,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "crypto_symbol": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Any]",
                    "Any"
                ],
                "fiat_symbol": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "List[str]",
                    "Callable"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/rpc/rpc.py": {
        "RPCMessageType.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCException.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RPCException.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCException.__json__": {
            "name": "__json__",
            "location": 51,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RPC.name": {
            "name": "name",
            "location": 73,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC.cleanup": {
            "name": "cleanup",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC.send_msg": {
            "name": "send_msg",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict[str, str]",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "RPC._rpc_trade_status": {
            "name": "_rpc_trade_status",
            "location": 85,
            "return": [
                "List[dict]",
                "bool",
                "pandas.Series",
                "Tuple[int,Dict[str,Any]]",
                "List[object]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_status_table": {
            "name": "_rpc_status_table",
            "location": 121,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_daily_profit": {
            "name": "_rpc_daily_profit",
            "location": 146,
            "return": [
                "List[list[str]]",
                "str",
                "Dict[str,Set[str]]",
                "Dict",
                "List[Dict[str,str]]",
                "List[int]",
                "Dict[int,str]"
            ],
            "arguments": {
                "self": [],
                "timescale": [
                    "int",
                    "List[int]",
                    "str",
                    "List[float]"
                ],
                "stake_currency": [
                    "str",
                    "Union[BinaryIO, str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "fiat_display_currency": [
                    "str",
                    "Union[BinaryIO, str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "RPC._rpc_trade_statistics": {
            "name": "_rpc_trade_statistics",
            "location": 192,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "stake_currency": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fiat_display_currency": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RPC._rpc_balance": {
            "name": "_rpc_balance",
            "location": 273,
            "return": [
                "Dict[Text,Union[list[dict[Text,float]],float,int]]",
                "bool",
                "Optional[float]",
                "Dict[str,int]",
                "OrderedDict",
                "List[Dict[str,Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fiat_display_currency": [
                    "int",
                    "decimal.Decimal",
                    "str"
                ]
            }
        },
        "RPC._rpc_start": {
            "name": "_rpc_start",
            "location": 318,
            "return": [
                "Dict[Text,Text]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_stop": {
            "name": "_rpc_stop",
            "location": 326,
            "return": [
                "Dict[Text,Text]",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_reload_conf": {
            "name": "_rpc_reload_conf",
            "location": 334,
            "return": [
                "Dict",
                "Dict[Text,Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_stopbuy": {
            "name": "_rpc_stopbuy",
            "location": 339,
            "return": [
                "Dict[Text,Text]",
                "int",
                "List[str]",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_forcesell": {
            "name": "_rpc_forcesell",
            "location": 349,
            "return": [
                "bool",
                "Dict[Text,Text]"
            ],
            "arguments": {
                "self": [],
                "trade_id": [
                    "int",
                    "str",
                    "Union['KspNativeControl', int]"
                ]
            }
        },
        "RPC._rpc_forcebuy": {
            "name": "_rpc_forcebuy",
            "location": 406,
            "return": [
                "None",
                "Optional[str]",
                "List",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "bool",
                    "int"
                ],
                "price": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RPC._rpc_performance": {
            "name": "_rpc_performance",
            "location": 440,
            "return": [
                "List[dict[Text,float]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_count": {
            "name": "_rpc_count",
            "location": 458,
            "return": [
                "Dict[Text,Union[int,float]]",
                "int",
                "Callable",
                "bytes",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_whitelist": {
            "name": "_rpc_whitelist",
            "location": 470,
            "return": [
                "Dict[Text,int]",
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_blacklist": {
            "name": "_rpc_blacklist",
            "location": 478,
            "return": [
                "Dict[Text,int]",
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "add": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "list"
                ]
            }
        },
        "RPC._rpc_edge": {
            "name": "_rpc_edge",
            "location": 493,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPC._rpc_forcesell._exec_forcesell": {
            "name": "_exec_forcesell",
            "location": 354,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "trade": [
                    "int",
                    "Dict[str, AsyncGenerator]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/rpc/rpc_manager.py": {
        "RPCManager.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": [
                    "List[Tuple[str,float]]",
                    "Sequence[cirq.Qid]",
                    "List[tuple[Union[str,float]]]",
                    "int"
                ]
            }
        },
        "RPCManager.cleanup": {
            "name": "cleanup",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCManager.send_msg": {
            "name": "send_msg",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Dict[str,Any]",
                    "logging.LogRecord",
                    "BaseException",
                    "int"
                ]
            }
        },
        "RPCManager.startup_messages": {
            "name": "startup_messages",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "pairlist": [
                    "dict",
                    "bytes",
                    "Dict[str, List[str]]",
                    "int"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/rpc/telegram.py": {
        "authorized_only": {
            "name": "authorized_only",
            "location": 26,
            "return": [],
            "arguments": {
                "command_handler": []
            }
        },
        "authorized_only.wrapper": {
            "name": "wrapper",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Telegram.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "freqtrade": []
            }
        },
        "Telegram._init": {
            "name": "_init",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Telegram.cleanup": {
            "name": "cleanup",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Telegram.send_msg": {
            "name": "send_msg",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Telegram._status": {
            "name": "_status",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._status_table": {
            "name": "_status_table",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._daily": {
            "name": "_daily",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._profit": {
            "name": "_profit",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._balance": {
            "name": "_balance",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._start": {
            "name": "_start",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._stop": {
            "name": "_stop",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._reload_conf": {
            "name": "_reload_conf",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._stopbuy": {
            "name": "_stopbuy",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._forcesell": {
            "name": "_forcesell",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._forcebuy": {
            "name": "_forcebuy",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._performance": {
            "name": "_performance",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._count": {
            "name": "_count",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._whitelist": {
            "name": "_whitelist",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._blacklist": {
            "name": "_blacklist",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._edge": {
            "name": "_edge",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._help": {
            "name": "_help",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._version": {
            "name": "_version",
            "location": 562,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "context": []
            }
        },
        "Telegram._send_msg": {
            "name": "_send_msg",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "parse_mode": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/rpc/webhook.py": {
        "Webhook.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": [
                    "float"
                ]
            }
        },
        "Webhook.cleanup": {
            "name": "cleanup",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Webhook.send_msg": {
            "name": "send_msg",
            "location": 38,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "Webhook._send_msg": {
            "name": "_send_msg",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/rpc/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/strategy/default_strategy.py": {
        "DefaultStrategy.informative_pairs": {
            "name": "informative_pairs",
            "location": 46,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultStrategy.populate_indicators": {
            "name": "populate_indicators",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DefaultStrategy.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DefaultStrategy.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/strategy/interface.py": {
        "IStrategy.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "IStrategy.populate_indicators": {
            "name": "populate_indicators",
            "location": 119,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IStrategy.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 128,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IStrategy.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 137,
            "return": [
                "pandas.DataFrame",
                "None"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IStrategy.informative_pairs": {
            "name": "informative_pairs",
            "location": 145,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrategy.get_strategy_name": {
            "name": "get_strategy_name",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrategy.lock_pair": {
            "name": "lock_pair",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "datetime.date",
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float",
                    "str"
                ],
                "until": [
                    "datetime.date",
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float",
                    "str"
                ]
            }
        },
        "IStrategy.is_pair_locked": {
            "name": "is_pair_locked",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                    "str"
                ]
            }
        },
        "IStrategy.analyze_ticker": {
            "name": "analyze_ticker",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IStrategy._analyze_ticker_internal": {
            "name": "_analyze_ticker_internal",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "Dict[str, float]",
                    "int"
                ],
                "metadata": [
                    "str",
                    "bool",
                    "Callable[[str], T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "IStrategy.get_signal": {
            "name": "get_signal",
            "location": 226,
            "return": [
                "bool",
                "Tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "bytes",
                    "int"
                ],
                "interval": [
                    "str",
                    "bool"
                ],
                "dataframe": [
                    "str",
                    "bool"
                ]
            }
        },
        "IStrategy.should_sell": {
            "name": "should_sell",
            "location": 284,
            "return": [
                "SellCheckTuple",
                "str",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "freqtrade.persistence.Trade",
                    "float",
                    "str",
                    "int"
                ],
                "rate": [
                    "float",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "date": [
                    "int",
                    "freqtrade.persistence.Trade",
                    "str",
                    "float"
                ],
                "buy": [
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, pandas.DataFrame]"
                ],
                "sell": [
                    "bool",
                    "bytes",
                    "str",
                    "list",
                    "dict"
                ],
                "low": [
                    "None",
                    "float",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "high": [
                    "None",
                    "freqtrade.persistence.Trade",
                    "float",
                    "str",
                    "Optional[datetime.datetime]",
                    "int"
                ],
                "force_stoploss": [
                    "int",
                    "freqtrade.persistence.Trade",
                    "str",
                    "float"
                ]
            }
        },
        "IStrategy.stop_loss_reached": {
            "name": "stop_loss_reached",
            "location": 333,
            "return": [
                "SellCheckTuple",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "current_rate": [
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "trade": [
                    "freqtrade.persistence.Trade",
                    "int",
                    "bool",
                    "datetime.datetime"
                ],
                "current_time": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "bool"
                ],
                "current_profit": [
                    "float",
                    "str",
                    "Optional[str]",
                    "int",
                    "Callable",
                    "bool"
                ],
                "force_stoploss": [
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "bool"
                ],
                "high": [
                    "None",
                    "float",
                    "str",
                    "List[float]",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "IStrategy.min_roi_reached_entry": {
            "name": "min_roi_reached_entry",
            "location": 389,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "trade_dur": [
                    "bool",
                    "pandas.DataFrame",
                    "Callable",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "IStrategy.min_roi_reached": {
            "name": "min_roi_reached",
            "location": 402,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trade": [
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Optional[datetime.datetime]",
                    "datetime.timedelta",
                    "str",
                    "float",
                    "int"
                ],
                "current_profit": [
                    "int",
                    "float"
                ],
                "current_time": [
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Optional[datetime.datetime]",
                    "datetime.timedelta",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "IStrategy.tickerdata_to_dataframe": {
            "name": "tickerdata_to_dataframe",
            "location": 416,
            "return": [
                "Dict",
                "bool",
                "Dict[str,Any]",
                "Dict[str,pandas.DataFrame]"
            ],
            "arguments": {
                "self": [],
                "tickerdata": [
                    "int",
                    "Optional[Union[Any, Any]]",
                    "str",
                    "Iterable[allennlp.data.instance.Instance]"
                ]
            }
        },
        "IStrategy.advise_indicators": {
            "name": "advise_indicators",
            "location": 423,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "Dict[str, str]",
                    "dict",
                    "Optional[Exception]",
                    "List[dict]"
                ]
            }
        },
        "IStrategy.advise_buy": {
            "name": "advise_buy",
            "location": 439,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "Dict[str, str]",
                    "dict",
                    "Optional[Exception]",
                    "List[dict]"
                ]
            }
        },
        "IStrategy.advise_sell": {
            "name": "advise_sell",
            "location": 455,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "Dict[str, str]",
                    "dict",
                    "Optional[Exception]",
                    "List[dict]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/strategy/__init__.py": {
        "import_strategy": {
            "name": "import_strategy",
            "location": 13,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "strategy": [],
                "config": [
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/conftest.py": {
        "log_has": {
            "name": "log_has",
            "location": 33,
            "return": [],
            "arguments": {
                "line": [],
                "logs": []
            }
        },
        "log_has_re": {
            "name": "log_has_re",
            "location": 41,
            "return": [],
            "arguments": {
                "line": [],
                "logs": []
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 47,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "patched_configuration_load_config_file": {
            "name": "patched_configuration_load_config_file",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "config": []
            }
        },
        "patch_exchange": {
            "name": "patch_exchange",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "api_mock": [
                    "None"
                ],
                "id": [
                    "typing.Text"
                ]
            }
        },
        "get_patched_exchange": {
            "name": "get_patched_exchange",
            "location": 72,
            "return": [
                "Exchange"
            ],
            "arguments": {
                "mocker": [],
                "config": [],
                "api_mock": [
                    "None"
                ],
                "id": [
                    "typing.Text"
                ]
            }
        },
        "patch_wallet": {
            "name": "patch_wallet",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "free": [
                    "float"
                ]
            }
        },
        "patch_edge": {
            "name": "patch_edge",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "get_patched_edge": {
            "name": "get_patched_edge",
            "location": 103,
            "return": [
                "Edge"
            ],
            "arguments": {
                "mocker": [],
                "config": []
            }
        },
        "patch_freqtradebot": {
            "name": "patch_freqtradebot",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "config": []
            }
        },
        "get_patched_freqtradebot": {
            "name": "get_patched_freqtradebot",
            "location": 125,
            "return": [
                "FreqtradeBot"
            ],
            "arguments": {
                "mocker": [],
                "config": []
            }
        },
        "get_patched_worker": {
            "name": "get_patched_worker",
            "location": 136,
            "return": [
                "Worker"
            ],
            "arguments": {
                "mocker": [],
                "config": []
            }
        },
        "patch_get_signal": {
            "name": "patch_get_signal",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "freqtrade": [],
                "value": [
                    "tuple[bool]"
                ]
            }
        },
        "patch_coinmarketcap": {
            "name": "patch_coinmarketcap",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "init_persistence": {
            "name": "init_persistence",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": []
            }
        },
        "default_conf": {
            "name": "default_conf",
            "location": 185,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text,float,dict[typing.Text, typing.Union[float,bool,dict[typing.Text, bool]]],dict[typing.Text, typing.Union[typing.Text,bool,list[typing.Text]]],Path]]"
            ],
            "arguments": {}
        },
        "update": {
            "name": "update",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "fee": {
            "name": "fee",
            "location": 256,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker": {
            "name": "ticker",
            "location": 261,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker_sell_up": {
            "name": "ticker_sell_up",
            "location": 270,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker_sell_down": {
            "name": "ticker_sell_down",
            "location": 279,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "markets": {
            "name": "markets",
            "location": 288,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[typing.Text,bool,float,dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[float,int]],int]]]],dict[typing.Text, typing.Union[typing.Text,bool,dict[typing.Text, int],dict[typing.Text, dict[typing.Text, typing.Union[float,None]]]]]]]"
            ],
            "arguments": {}
        },
        "markets_empty": {
            "name": "markets_empty",
            "location": 516,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "limit_buy_order": {
            "name": "limit_buy_order",
            "location": 521,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "market_buy_order": {
            "name": "market_buy_order",
            "location": 536,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "market_sell_order": {
            "name": "market_sell_order",
            "location": 551,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_buy_order_old": {
            "name": "limit_buy_order_old",
            "location": 566,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_sell_order_old": {
            "name": "limit_sell_order_old",
            "location": 581,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_buy_order_old_partial": {
            "name": "limit_buy_order_old_partial",
            "location": 596,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "limit_sell_order": {
            "name": "limit_sell_order",
            "location": 611,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {}
        },
        "order_book_l2": {
            "name": "order_book_l2",
            "location": 626,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "ticker_history_list": {
            "name": "ticker_history_list",
            "location": 659,
            "return": [
                "list[list[typing.Union[int,float]]]"
            ],
            "arguments": {}
        },
        "ticker_history": {
            "name": "ticker_history",
            "location": 689,
            "return": [],
            "arguments": {
                "ticker_history_list": []
            }
        },
        "tickers": {
            "name": "tickers",
            "location": 694,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "result": {
            "name": "result",
            "location": 893,
            "return": [],
            "arguments": {}
        },
        "trades_for_order": {
            "name": "trades_for_order",
            "location": 906,
            "return": [
                "list[dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[int,typing.Text]],int,typing.Text,None,float,dict[typing.Text, typing.Union[float,typing.Text]]]]]"
            ],
            "arguments": {}
        },
        "trades_for_order2": {
            "name": "trades_for_order2",
            "location": 931,
            "return": [
                "list[dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[int,typing.Text]],int,typing.Text,None,float,dict[typing.Text, typing.Union[float,typing.Text]]]]]"
            ],
            "arguments": {}
        },
        "buy_order_fee": {
            "name": "buy_order_fee",
            "location": 977,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float,None]]"
            ],
            "arguments": {}
        },
        "edge_conf": {
            "name": "edge_conf",
            "location": 993,
            "return": [],
            "arguments": {
                "default_conf": []
            }
        },
        "rpc_balance": {
            "name": "rpc_balance",
            "location": 1017,
            "return": [
                "dict[typing.Text, dict[typing.Text, float]]"
            ],
            "arguments": {}
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_arguments.py": {
        "test_parse_args_none": {
            "name": "test_parse_args_none",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_defaults": {
            "name": "test_parse_args_defaults",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_config": {
            "name": "test_parse_args_config",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_db_url": {
            "name": "test_parse_args_db_url",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_verbose": {
            "name": "test_parse_args_verbose",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_common_scripts_options": {
            "name": "test_common_scripts_options",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_version": {
            "name": "test_parse_args_version",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_invalid": {
            "name": "test_parse_args_invalid",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_strategy": {
            "name": "test_parse_args_strategy",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_strategy_invalid": {
            "name": "test_parse_args_strategy_invalid",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_strategy_path": {
            "name": "test_parse_args_strategy_path",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_strategy_path_invalid": {
            "name": "test_parse_args_strategy_path_invalid",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_backtesting_invalid": {
            "name": "test_parse_args_backtesting_invalid",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_backtesting_custom": {
            "name": "test_parse_args_backtesting_custom",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_args_hyperopt_custom": {
            "name": "test_parse_args_hyperopt_custom",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_data_options": {
            "name": "test_download_data_options",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plot_dataframe_options": {
            "name": "test_plot_dataframe_options",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plot_profit_options": {
            "name": "test_plot_profit_options",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_int_positive": {
            "name": "test_check_int_positive",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_configuration.py": {
        "all_conf": {
            "name": "all_conf",
            "location": 27,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "test_load_config_invalid_pair": {
            "name": "test_load_config_invalid_pair",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[str]",
                    "dict",
                    "tuple"
                ]
            }
        },
        "test_load_config_missing_attributes": {
            "name": "test_load_config_missing_attributes",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ]
            }
        },
        "test_load_config_incorrect_stake_amount": {
            "name": "test_load_config_incorrect_stake_amount",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": []
            }
        },
        "test_load_config_file": {
            "name": "test_load_config_file",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "str"
                ]
            }
        },
        "test__args_to_config": {
            "name": "test__args_to_config",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_load_config_max_open_trades_zero": {
            "name": "test_load_config_max_open_trades_zero",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "mocker": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "logging.Logger",
                    "Callable"
                ]
            }
        },
        "test_load_config_combine_dicts": {
            "name": "test_load_config_combine_dicts",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "mocker": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "logging.Logger",
                    "Callable"
                ]
            }
        },
        "test_from_config": {
            "name": "test_from_config",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Tuple[int, int]",
                    "int",
                    "str"
                ],
                "mocker": [
                    "Tuple[int, int]",
                    "int",
                    "str"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "logging.Logger",
                    "Callable"
                ]
            }
        },
        "test_load_config_max_open_trades_minus_one": {
            "name": "test_load_config_max_open_trades_minus_one",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "mocker": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "logging.Logger",
                    "Callable"
                ]
            }
        },
        "test_load_config_file_exception": {
            "name": "test_load_config_file_exception",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_load_config": {
            "name": "test_load_config",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "mocker": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ]
            }
        },
        "test_load_config_with_params": {
            "name": "test_load_config_with_params",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_load_custom_strategy": {
            "name": "test_load_custom_strategy",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "raiden.constants.Environment"
                ]
            }
        },
        "test_show_info": {
            "name": "test_show_info",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "caplog": [
                    "str",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "test_setup_configuration_without_arguments": {
            "name": "test_setup_configuration_without_arguments",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "logging.Logger",
                    "bool",
                    "Collection[str]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_setup_configuration_with_arguments": {
            "name": "test_setup_configuration_with_arguments",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "gtmcore.configuration.Configuration"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "List[str]"
                ]
            }
        },
        "test_setup_configuration_with_stratlist": {
            "name": "test_setup_configuration_with_stratlist",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "logging.Logger",
                    "bool",
                    "Collection[str]",
                    "Callable",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_hyperopt_with_arguments": {
            "name": "test_hyperopt_with_arguments",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "logging.Logger",
                    "str",
                    "int",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_check_exchange": {
            "name": "test_check_exchange",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Tuple[str, str]]",
                    "bool"
                ],
                "caplog": [
                    "Dict[str, Any]",
                    "logging.Logger",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "str"
                ]
            }
        },
        "test_cli_verbose_with_params": {
            "name": "test_cli_verbose_with_params",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_set_loggers": {
            "name": "test_set_loggers",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_logfile": {
            "name": "test_set_logfile",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Optional[\"Game\"]"
                ],
                "mocker": [
                    "str",
                    "Optional[\"Game\"]"
                ]
            }
        },
        "test_load_config_warn_forcebuy": {
            "name": "test_load_config_warn_forcebuy",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "dict",
                    "pathlib.Path"
                ],
                "mocker": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "logging.Logger",
                    "Callable"
                ]
            }
        },
        "test_validate_default_conf": {
            "name": "test_validate_default_conf",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ]
            }
        },
        "test_create_datadir": {
            "name": "test_create_datadir",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "caplog": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "test_create_userdata_dir": {
            "name": "test_create_userdata_dir",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "List[str]",
                    "str"
                ],
                "caplog": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "test_create_userdata_dir_exists": {
            "name": "test_create_userdata_dir_exists",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "List[str]",
                    "str"
                ],
                "caplog": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_create_userdata_dir_exists_exception": {
            "name": "test_create_userdata_dir_exists_exception",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "bool",
                    "List[str]",
                    "int",
                    "List[Tuple[str, Any]]"
                ],
                "caplog": [
                    "bool",
                    "List[str]",
                    "int",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "test_validate_tsl": {
            "name": "test_validate_tsl",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ]
            }
        },
        "test_validate_edge": {
            "name": "test_validate_edge",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "edge_conf": []
            }
        },
        "test_load_config_test_comments": {
            "name": "test_load_config_test_comments",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_config_default_exchange": {
            "name": "test_load_config_default_exchange",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "all_conf": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_load_config_default_exchange_name": {
            "name": "test_load_config_default_exchange_name",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "all_conf": []
            }
        },
        "test_load_config_default_subkeys": {
            "name": "test_load_config_default_subkeys",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "all_conf": [
                    "dict",
                    "str"
                ],
                "keys": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "test_pairlist_resolving": {
            "name": "test_pairlist_resolving",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pairlist_resolving_with_config": {
            "name": "test_pairlist_resolving_with_config",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_pairlist_resolving_with_config_pl": {
            "name": "test_pairlist_resolving_with_config_pl",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "raiden.constants.Environment",
                    "bool"
                ]
            }
        },
        "test_pairlist_resolving_with_config_pl_not_exists": {
            "name": "test_pairlist_resolving_with_config_pl_not_exists",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "test_pairlist_resolving_fallback": {
            "name": "test_pairlist_resolving_fallback",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "str"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_freqtradebot.py": {
        "patch_RPCManager": {
            "name": "patch_RPCManager",
            "location": 28,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_freqtradebot_state": {
            "name": "test_freqtradebot_state",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "Callable"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_worker_state": {
            "name": "test_worker_state",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "logging.Logger",
                    "Dict[str, Any]",
                    "str",
                    "Callable[[List, bool], None]"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_cleanup": {
            "name": "test_cleanup",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_worker_running": {
            "name": "test_worker_running",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_worker_stopped": {
            "name": "test_worker_stopped",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_throttle": {
            "name": "test_throttle",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_throttle_with_assets": {
            "name": "test_throttle_with_assets",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_order_dict_dry_run": {
            "name": "test_order_dict_dry_run",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "unittesmock.MagicMock"
                ],
                "mocker": [],
                "caplog": [
                    "str",
                    "logging.LogRecord"
                ]
            }
        },
        "test_order_dict_live": {
            "name": "test_order_dict_live",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": [],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_get_trade_stake_amount": {
            "name": "test_get_trade_stake_amount",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "ticker": [
                    "bool",
                    "str",
                    "List[bool]",
                    "int"
                ],
                "mocker": []
            }
        },
        "test_get_trade_stake_amount_no_stake_amount": {
            "name": "test_get_trade_stake_amount_no_stake_amount",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": []
            }
        },
        "test_get_trade_stake_amount_unlimited_amount": {
            "name": "test_get_trade_stake_amount_unlimited_amount",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Iterable[str]",
                    "states.State"
                ],
                "ticker": [],
                "limit_buy_order": [],
                "fee": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_edge_called_in_process": {
            "name": "test_edge_called_in_process",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.Mock",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "edge_conf": [
                    "tests.async_mock.Mock",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_edge_overrides_stake_amount": {
            "name": "test_edge_overrides_stake_amount",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Sequence[str]]"
                ],
                "edge_conf": [
                    "Callable",
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_edge_overrides_stoploss": {
            "name": "test_edge_overrides_stoploss",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str"
                ],
                "mocker": [],
                "edge_conf": [
                    "float",
                    "bool",
                    "Mapping[str, Any]",
                    "Union[int, float]"
                ]
            }
        },
        "test_edge_should_ignore_strategy_stoploss": {
            "name": "test_edge_should_ignore_strategy_stoploss",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "mocker": [],
                "edge_conf": [
                    "float",
                    "bool",
                    "Mapping[str, Any]",
                    "Union[int, float]"
                ]
            }
        },
        "test_total_open_trades_stakes": {
            "name": "test_total_open_trades_stakes",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.setup.SetupTest"
                ],
                "default_conf": [
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_get_min_pair_stake_amount": {
            "name": "test_get_min_pair_stake_amount",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ]
            }
        },
        "test_create_trades": {
            "name": "test_create_trades",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker": [],
                "limit_buy_order": [],
                "fee": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_create_trades_no_stake_amount": {
            "name": "test_create_trades_no_stake_amount",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [
                    "Callable[[list], None]"
                ]
            }
        },
        "test_create_trades_minimal_amount": {
            "name": "test_create_trades_minimal_amount",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "float",
                    "List[Tuple[int, bytes]]",
                    "slice"
                ],
                "ticker": [],
                "limit_buy_order": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [],
                "markets": [],
                "mocker": [
                    "Callable[[list], None]"
                ]
            }
        },
        "test_create_trades_too_small_stake_amount": {
            "name": "test_create_trades_too_small_stake_amount",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker": [],
                "limit_buy_order": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [],
                "markets": [],
                "mocker": [
                    "Callable[[list], None]"
                ]
            }
        },
        "test_create_trades_limit_reached": {
            "name": "test_create_trades_limit_reached",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "unittesmock.MagicMock"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": []
            }
        },
        "test_create_trades_no_pairs_let": {
            "name": "test_create_trades_no_pairs_let",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [],
                "caplog": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "test_create_trades_no_pairs_in_whitelist": {
            "name": "test_create_trades_no_pairs_in_whitelist",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_create_trades_no_signal": {
            "name": "test_create_trades_no_signal",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Iterable[Any]",
                    "dict",
                    "Sequence[str]"
                ],
                "fee": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": []
            }
        },
        "test_create_trades_multiple_trades": {
            "name": "test_create_trades_multiple_trades",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [
                    "tests.setup.SetupTest"
                ],
                "max_open": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_create_trades_preopen": {
            "name": "test_create_trades_preopen",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [
                    "Callable[[list], None]"
                ]
            }
        },
        "test_process_trade_creation": {
            "name": "test_process_trade_creation",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "limit_buy_order": [],
                "markets": [],
                "fee": [],
                "mocker": [
                    "Callable[[list], None]"
                ],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_process_exchange_failures": {
            "name": "test_process_exchange_failures",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[str]",
                    "bool",
                    "str",
                    "Callable[[Any], bool]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "ticker": [],
                "markets": [],
                "mocker": [
                    "Callable[[list], None]"
                ]
            }
        },
        "test_process_operational_exception": {
            "name": "test_process_operational_exception",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Callable[[Any], bool]",
                    "dict",
                    "Callable"
                ],
                "ticker": [],
                "markets": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_process_trade_handling": {
            "name": "test_process_trade_handling",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "limit_buy_order": [],
                "markets": [],
                "fee": [],
                "mocker": [
                    "Callable[[list], None]"
                ]
            }
        },
        "test_process_trade_no_whitelist_pair": {
            "name": "test_process_trade_no_whitelist_pair",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker": [],
                "limit_buy_order": [],
                "markets": [],
                "fee": [],
                "mocker": [
                    "tests.setup.SetupTest",
                    "Callable[[list], None]"
                ]
            }
        },
        "test_process_informative_pairs_added": {
            "name": "test_process_informative_pairs_added",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_balance_fully_ask_side": {
            "name": "test_balance_fully_ask_side",
            "location": 923,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_balance_fully_last_side": {
            "name": "test_balance_fully_last_side",
            "location": 932,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int"
                ]
            }
        },
        "test_balance_bigger_last_ask": {
            "name": "test_balance_bigger_last_ask",
            "location": 941,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int"
                ]
            }
        },
        "test_execute_buy": {
            "name": "test_execute_buy",
            "location": 949,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable[[list], None]",
                    "tests.setup.SetupTest"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_add_stoploss_on_exchange": {
            "name": "test_add_stoploss_on_exchange",
            "location": 1041,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "limit_buy_order": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "test_handle_stoploss_on_exchange": {
            "name": "test_handle_stoploss_on_exchange",
            "location": 1067,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "caplog": [],
                "markets": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "limit_sell_order": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ]
            }
        },
        "test_handle_sle_cancel_cant_recreate": {
            "name": "test_handle_sle_cancel_cant_recreate",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "limit_sell_order": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ]
            }
        },
        "test_create_stoploss_order_invalid_order": {
            "name": "test_create_stoploss_order_invalid_order",
            "location": 1203,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str",
                    "logging.LogRecord"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "limit_sell_order": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_handle_stoploss_on_exchange_trailing": {
            "name": "test_handle_stoploss_on_exchange_trailing",
            "location": 1247,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "Dict[str, Any]"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "caplog": [
                    "bool",
                    "int",
                    "str",
                    "Callable[..., None]"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ],
                "limit_sell_order": [
                    "unittesmock.MagicMock",
                    "str",
                    "bool"
                ]
            }
        },
        "test_handle_stoploss_on_exchange_trailing_error": {
            "name": "test_handle_stoploss_on_exchange_trailing_error",
            "location": 1342,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "Optional[\"Game\"]",
                    "Optional[int]"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str",
                    "dict"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "int",
                    "Optional[float]"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str",
                    "dict"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock",
                    "str",
                    "dict"
                ],
                "limit_sell_order": [
                    "unittesmock.MagicMock",
                    "str",
                    "dict"
                ]
            }
        },
        "test_tsl_on_exchange_compatible_with_edge": {
            "name": "test_tsl_on_exchange_compatible_with_edge",
            "location": 1411,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.setup.SetupTest"
                ],
                "edge_conf": [
                    "bool",
                    "float",
                    "Union[int, float]",
                    "Mapping[str, Any]"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "caplog": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "limit_sell_order": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "test_process_maybe_execute_buy": {
            "name": "test_process_maybe_execute_buy",
            "location": 1521,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_process_maybe_execute_buy_exception": {
            "name": "test_process_maybe_execute_buy_exception",
            "location": 1529,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_process_maybe_execute_sell": {
            "name": "test_process_maybe_execute_sell",
            "location": 1540,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "limit_buy_order": [
                    "str",
                    "Iterable[str]",
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "test_process_maybe_execute_sell_exception": {
            "name": "test_process_maybe_execute_sell_exception",
            "location": 1563,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "limit_buy_order": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock",
                    "str",
                    "bytes"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_update_trade_state": {
            "name": "test_update_trade_state",
            "location": 1581,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str"
                ],
                "limit_buy_order": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock",
                    "Iterable[str]"
                ],
                "caplog": [
                    "int",
                    "str",
                    "logging.Logger",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "test_update_trade_state_withorderdict": {
            "name": "test_update_trade_state_withorderdict",
            "location": 1617,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "float",
                    "int"
                ],
                "trades_for_order": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "bool"
                ],
                "limit_buy_order": [
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_update_trade_state_exception": {
            "name": "test_update_trade_state_exception",
            "location": 1638,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str",
                    "raiden.transfer.mediated_transfer.state.LockedTransferUnsignedState"
                ],
                "default_conf": [
                    "str"
                ],
                "limit_buy_order": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "test_update_trade_state_orderexception": {
            "name": "test_update_trade_state_orderexception",
            "location": 1656,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str"
                ],
                "caplog": [
                    "dict",
                    "str",
                    "Callable",
                    "logging.Logger"
                ]
            }
        },
        "test_update_trade_state_sell": {
            "name": "test_update_trade_state_sell",
            "location": 1672,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "float",
                    "int"
                ],
                "trades_for_order": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "limit_sell_order": [
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_handle_trade": {
            "name": "test_handle_trade",
            "location": 1701,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "limit_sell_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": []
            }
        },
        "test_handle_overlpapping_signals": {
            "name": "test_handle_overlpapping_signals",
            "location": 1742,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "List[str]"
                ],
                "ticker": [],
                "limit_buy_order": [],
                "fee": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_handle_trade_roi": {
            "name": "test_handle_trade_roi",
            "location": 1797,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "List[str]"
                ],
                "ticker": [],
                "limit_buy_order": [],
                "fee": [],
                "mocker": [],
                "markets": [],
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Exception",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_handle_trade_experimental": {
            "name": "test_handle_trade_experimental",
            "location": 1831,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "List[str]"
                ],
                "ticker": [],
                "limit_buy_order": [],
                "fee": [],
                "mocker": [],
                "markets": [],
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Exception",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_close_trade": {
            "name": "test_close_trade",
            "location": 1861,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "limit_buy_order": [],
                "limit_sell_order": [
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, Any]"
                ],
                "fee": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_check_handle_timedout_buy": {
            "name": "test_check_handle_timedout_buy",
            "location": 1889,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "ticker": [],
                "limit_buy_order_old": [],
                "fee": [],
                "mocker": []
            }
        },
        "test_check_handle_cancelled_buy": {
            "name": "test_check_handle_cancelled_buy",
            "location": 1926,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "ticker": [],
                "limit_buy_order_old": [
                    "Callable"
                ],
                "fee": [],
                "mocker": [],
                "caplog": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "test_check_handle_timedout_buy_exception": {
            "name": "test_check_handle_timedout_buy_exception",
            "location": 1967,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "ticker": [],
                "limit_buy_order_old": [
                    "Callable[..., None]",
                    "Callable[[], None]",
                    "Exception",
                    "str",
                    "Callable"
                ],
                "fee": [],
                "mocker": []
            }
        },
        "test_check_handle_timedout_sell": {
            "name": "test_check_handle_timedout_sell",
            "location": 2006,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "ticker": [],
                "limit_sell_order_old": [],
                "mocker": []
            }
        },
        "test_check_handle_cancelled_sell": {
            "name": "test_check_handle_cancelled_sell",
            "location": 2041,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "ticker": [],
                "limit_sell_order_old": [
                    "Callable"
                ],
                "mocker": [],
                "caplog": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "test_check_handle_timedout_partial": {
            "name": "test_check_handle_timedout_partial",
            "location": 2080,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "ticker": [],
                "limit_buy_order_old_partial": [],
                "mocker": []
            }
        },
        "test_check_handle_timedout_exception": {
            "name": "test_check_handle_timedout_exception",
            "location": 2119,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "mocker": [
                    "Callable[[list], None]"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "test_handle_timedout_limit_buy": {
            "name": "test_handle_timedout_limit_buy",
            "location": 2158,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_handle_timedout_limit_sell": {
            "name": "test_handle_timedout_limit_sell",
            "location": 2180,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_execute_sell_up": {
            "name": "test_execute_sell_up",
            "location": 2203,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "fee": [],
                "ticker_sell_up": [
                    "Optional[int]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "int",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[List[int]]"
                ],
                "markets": [],
                "mocker": []
            }
        },
        "test_execute_sell_down": {
            "name": "test_execute_sell_down",
            "location": 2249,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "fee": [],
                "ticker_sell_down": [
                    "Optional[int]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "int",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[List[int]]"
                ],
                "markets": [],
                "mocker": []
            }
        },
        "test_execute_sell_down_stoploss_on_exchange_dry_run": {
            "name": "test_execute_sell_down_stoploss_on_exchange_dry_run",
            "location": 2296,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall"
                ],
                "ticker": [],
                "fee": [],
                "ticker_sell_down": [
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "slice",
                    "List[List[int]]",
                    "TextIO"
                ],
                "markets": [],
                "mocker": []
            }
        },
        "test_execute_sell_sloe_cancel_exception": {
            "name": "test_execute_sell_sloe_cancel_exception",
            "location": 2352,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "test_execute_sell_with_stoploss_on_exchange": {
            "name": "test_execute_sell_with_stoploss_on_exchange",
            "location": 2382,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "fee": [],
                "ticker_sell_up": [
                    "Optional[int]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "int",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[List[int]]"
                ],
                "markets": [],
                "mocker": []
            }
        },
        "test_may_execute_sell_after_stoploss_on_exchange_hit": {
            "name": "test_may_execute_sell_after_stoploss_on_exchange_hit",
            "location": 2437,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "fee": [],
                "limit_buy_order": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "markets": [],
                "mocker": []
            }
        },
        "test_execute_sell_market_order": {
            "name": "test_execute_sell_market_order",
            "location": 2504,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "fee": [],
                "ticker_sell_up": [
                    "Optional[int]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "int",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[List[int]]"
                ],
                "markets": [],
                "mocker": []
            }
        },
        "test_sell_profit_only_enable_profit": {
            "name": "test_sell_profit_only_enable_profit",
            "location": 2556,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[Any]",
                    "Iterable[Any]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": []
            }
        },
        "test_sell_profit_only_disable_profit": {
            "name": "test_sell_profit_only_disable_profit",
            "location": 2588,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": []
            }
        },
        "test_sell_profit_only_enable_loss": {
            "name": "test_sell_profit_only_enable_loss",
            "location": 2619,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[Any]",
                    "Iterable[Any]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": []
            }
        },
        "test_sell_profit_only_disable_loss": {
            "name": "test_sell_profit_only_disable_loss",
            "location": 2649,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": []
            }
        },
        "test_locked_pairs": {
            "name": "test_locked_pairs",
            "location": 2681,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "fee": [],
                "ticker_sell_down": [
                    "Optional[int]",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]",
                    "int",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[List[int]]"
                ],
                "markets": [],
                "mocker": [],
                "caplog": [
                    "int",
                    "bool",
                    "float",
                    "Collection[str]"
                ]
            }
        },
        "test_ignore_roi_if_buy_signal": {
            "name": "test_ignore_roi_if_buy_signal",
            "location": 2718,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Iterable[Any]",
                    "dict"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": []
            }
        },
        "test_trailing_stop_loss": {
            "name": "test_trailing_stop_loss",
            "location": 2752,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Iterable[Any]",
                    "dict"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Exception",
                    "Collection[str]",
                    "bool"
                ],
                "mocker": []
            }
        },
        "test_trailing_stop_loss_positive": {
            "name": "test_trailing_stop_loss_positive",
            "location": 2803,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Iterable[Any]",
                    "dict"
                ],
                "limit_buy_order": [],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "logging.LogRecord",
                    "IO[str]",
                    "logging.FileHandler"
                ],
                "mocker": []
            }
        },
        "test_trailing_stop_loss_offset": {
            "name": "test_trailing_stop_loss_offset",
            "location": 2859,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Iterable[Any]",
                    "dict"
                ],
                "limit_buy_order": [],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "logging.LogRecord",
                    "IO[str]",
                    "logging.FileHandler"
                ],
                "mocker": [],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_tsl_only_offset_reached": {
            "name": "test_tsl_only_offset_reached",
            "location": 2918,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict"
                ],
                "limit_buy_order": [],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "logging.LogRecord",
                    "IO[str]",
                    "logging.FileHandler"
                ],
                "mocker": [],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_disable_ignore_roi_if_buy_signal": {
            "name": "test_disable_ignore_roi_if_buy_signal",
            "location": 2982,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": []
            }
        },
        "test_get_real_amount_quote": {
            "name": "test_get_real_amount_quote",
            "location": 3018,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "trades_for_order": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bool"
                ],
                "buy_order_fee": [
                    "str",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Dict[str, int]"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_get_real_amount_no_trade": {
            "name": "test_get_real_amount_no_trade",
            "location": 3040,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "buy_order_fee": [
                    "int",
                    "str"
                ],
                "caplog": [
                    "Exception",
                    "str",
                    "logging.Logger",
                    "dict"
                ],
                "mocker": [
                    "Optional[List[str]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_get_real_amount_stake": {
            "name": "test_get_real_amount_stake",
            "location": 3063,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "trades_for_order": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bool"
                ],
                "buy_order_fee": [
                    "str",
                    "bool",
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_no_currency_in_fee": {
            "name": "test_get_real_amount_no_currency_in_fee",
            "location": 3084,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bool",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "trades_for_order": [
                    "str",
                    "Set[str]",
                    "dict",
                    "Union[str, None]",
                    "list",
                    "Optional[List[int]]"
                ],
                "buy_order_fee": [
                    "str",
                    "bool",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_BNB": {
            "name": "test_get_real_amount_BNB",
            "location": 3108,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "trades_for_order": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bool"
                ],
                "buy_order_fee": [
                    "str",
                    "bool",
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_multi": {
            "name": "test_get_real_amount_multi",
            "location": 3130,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "trades_for_order2": [
                    "str",
                    "int",
                    "Sequence[Dict[str, str]]",
                    "List[str]",
                    "Callable"
                ],
                "buy_order_fee": [
                    "str",
                    "Callable"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Dict[str, int]"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_fromorder": {
            "name": "test_get_real_amount_fromorder",
            "location": 3152,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "trades_for_order": [
                    "str",
                    "int",
                    "Sequence[Dict[str, str]]",
                    "List[str]",
                    "Callable"
                ],
                "buy_order_fee": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Dict[str, int]"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_invalid_order": {
            "name": "test_get_real_amount_invalid_order",
            "location": 3178,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "trades_for_order": [
                    "float",
                    "str",
                    "int"
                ],
                "buy_order_fee": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_invalid": {
            "name": "test_get_real_amount_invalid",
            "location": 3200,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "tests.conftesWorker"
                ],
                "trades_for_order": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bool"
                ],
                "buy_order_fee": [
                    "str",
                    "bool",
                    "int"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_get_real_amount_open_trade": {
            "name": "test_get_real_amount_open_trade",
            "location": 3221,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "mocker": [
                    "Optional[str]"
                ]
            }
        },
        "test_order_book_depth_of_market": {
            "name": "test_order_book_depth_of_market",
            "location": 3242,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Iterable[Any]",
                    "str",
                    "dict"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [
                    "Callable[[list], None]"
                ],
                "order_book_l2": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_order_book_depth_of_market_high_delta": {
            "name": "test_order_book_depth_of_market_high_delta",
            "location": 3277,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Iterable[Any]",
                    "str",
                    "dict"
                ],
                "ticker": [
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [
                    "Callable[[list], None]"
                ],
                "order_book_l2": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_order_book_bid_strategy1": {
            "name": "test_order_book_bid_strategy1",
            "location": 3301,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "bool",
                    "str"
                ],
                "order_book_l2": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_order_book_bid_strategy2": {
            "name": "test_order_book_bid_strategy2",
            "location": 3326,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "bool",
                    "str"
                ],
                "order_book_l2": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_check_depth_of_market_buy": {
            "name": "test_check_depth_of_market_buy",
            "location": 3352,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [],
                "order_book_l2": [],
                "markets": []
            }
        },
        "test_order_book_ask_strategy": {
            "name": "test_order_book_ask_strategy",
            "location": 3373,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "int",
                    "bool"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock"
                ],
                "limit_sell_order": [
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "mocker": [],
                "order_book_l2": []
            }
        },
        "test_get_sell_rate": {
            "name": "test_get_sell_rate",
            "location": 3414,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Optional[List[str]]"
                ],
                "mocker": [
                    "Optional[bool]",
                    "int",
                    "List[str]",
                    "str"
                ],
                "ticker": [
                    "str",
                    "Optional[bool]",
                    "List[str]"
                ],
                "order_book_l2": [
                    "str",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "test_startup_state": {
            "name": "test_startup_state",
            "location": 3439,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "test_startup_trade_reinit": {
            "name": "test_startup_trade_reinit",
            "location": 3448,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int"
                ],
                "edge_conf": [
                    "int"
                ],
                "mocker": [
                    "mock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_throttle.throttled_func": {
            "name": "throttled_func",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_throttle_with_assets.throttled_func": {
            "name": "throttled_func",
            "location": 121,
            "return": [
                "int",
                "float",
                "Callable[[T],bool]",
                "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
            ],
            "arguments": {
                "nb_assets": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "test_edge_called_in_process._refresh_whitelist": {
            "name": "_refresh_whitelist",
            "location": 277,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "list": []
            }
        },
        "test_process_informative_pairs_added._refresh_whitelist": {
            "name": "_refresh_whitelist",
            "location": 896,
            "return": [
                "List[Text]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "list": [
                    "List[T]",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "List[Dict[str, str]]",
                    "Callable"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_indicator_helpers.py": {
        "test_went_up": {
            "name": "test_went_up",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_went_down": {
            "name": "test_went_down",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_main.py": {
        "test_parse_args_backtesting": {
            "name": "test_parse_args_backtesting",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_main_start_hyperopt": {
            "name": "test_main_start_hyperopt",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_main_fatal_exception": {
            "name": "test_main_fatal_exception",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_main_keyboard_interrupt": {
            "name": "test_main_keyboard_interrupt",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_main_operational_exception": {
            "name": "test_main_operational_exception",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_main_reload_conf": {
            "name": "test_main_reload_conf",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "Dict"
                ],
                "caplog": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "test_reconfigure": {
            "name": "test_reconfigure",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "Dict"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_misc.py": {
        "test_shorten_date": {
            "name": "test_shorten_date",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datesarray_to_datetimearray": {
            "name": "test_datesarray_to_datetimearray",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ticker_history_list": [
                    "Dict"
                ]
            }
        },
        "test_file_dump_json": {
            "name": "test_file_dump_json",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_file_load_json": {
            "name": "test_file_load_json",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_format_ms_time": {
            "name": "test_format_ms_time",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_persistence.py": {
        "create_mock_trades": {
            "name": "create_mock_trades",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [
                    "Dict[int, dict]",
                    "int"
                ]
            }
        },
        "test_init_create_session": {
            "name": "test_init_create_session",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_init_custom_db_url": {
            "name": "test_init_custom_db_url",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "logging.Logger"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "test_init_invalid_db_url": {
            "name": "test_init_invalid_db_url",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "logging.Logger"
                ]
            }
        },
        "test_init_prod_db": {
            "name": "test_init_prod_db",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "test_init_dryrun_db": {
            "name": "test_init_dryrun_db",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "test_update_with_bittrex": {
            "name": "test_update_with_bittrex",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "limit_sell_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn",
                    "Optional[str]",
                    "str"
                ],
                "caplog": []
            }
        },
        "test_update_market_order": {
            "name": "test_update_market_order",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "market_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "market_sell_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "fee": [
                    "tests.basilisp.helpers.CompileFn",
                    "Optional[str]",
                    "str"
                ],
                "caplog": []
            }
        },
        "test_calc_open_close_trade_price": {
            "name": "test_calc_open_close_trade_price",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "limit_sell_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "test_calc_close_trade_price_exception": {
            "name": "test_calc_close_trade_price_exception",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "test_update_open_order": {
            "name": "test_update_open_order",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_update_invalid_order": {
            "name": "test_update_invalid_order",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_calc_open_trade_price": {
            "name": "test_calc_open_trade_price",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "test_calc_close_trade_price": {
            "name": "test_calc_close_trade_price",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "limit_sell_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "test_calc_profit": {
            "name": "test_calc_profit",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "limit_sell_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "test_calc_profit_percent": {
            "name": "test_calc_profit_percent",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "limit_sell_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "test_clean_dry_run_db": {
            "name": "test_clean_dry_run_db",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bool",
                    "List[bool]",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity"
                ],
                "fee": [
                    "int",
                    "str",
                    "Sequence[Hashable]"
                ]
            }
        },
        "test_migrate_old": {
            "name": "test_migrate_old",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "default_conf": [
                    "str",
                    "Optional[Callable]",
                    "int"
                ],
                "fee": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[Callable]"
                ]
            }
        },
        "test_migrate_new": {
            "name": "test_migrate_new",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "default_conf": [
                    "int",
                    "str",
                    "Optional[Callable]"
                ],
                "fee": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[Callable]"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ]
            }
        },
        "test_migrate_mid_state": {
            "name": "test_migrate_mid_state",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "default_conf": [
                    "str",
                    "Optional[Callable]",
                    "int"
                ],
                "fee": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[Callable]"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str",
                    "logging.LogRecord"
                ]
            }
        },
        "test_adjust_stop_loss": {
            "name": "test_adjust_stop_loss",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_adjust_min_max_rates": {
            "name": "test_adjust_min_max_rates",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [
                    "tests.components.withings.common.ComponentFactory"
                ]
            }
        },
        "test_get_open": {
            "name": "test_get_open",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bool",
                    "List[bool]"
                ],
                "fee": []
            }
        },
        "test_to_json": {
            "name": "test_to_json",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Union[str, Iterable[str]]",
                    "float",
                    "int",
                    "bool",
                    "tuple",
                    "list"
                ],
                "fee": [
                    "int",
                    "str",
                    "List[int]",
                    "dict"
                ]
            }
        },
        "test_stoploss_reinitialization": {
            "name": "test_stoploss_reinitialization",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "str"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_plotting.py": {
        "fig_generating_mock": {
            "name": "fig_generating_mock",
            "location": 25,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "fig": [
                    "Callable",
                    "Optional",
                    "str",
                    "Callable[[], bytes]",
                    "bool"
                ]
            }
        },
        "find_trace_in_fig_data": {
            "name": "find_trace_in_fig_data",
            "location": 30,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Callable[[str], Any]"
                ],
                "search_string": [
                    "str",
                    "int",
                    "Callable[[str], Any]"
                ]
            }
        },
        "generage_empty_figure": {
            "name": "generage_empty_figure",
            "location": 35,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "test_init_plotscript": {
            "name": "test_init_plotscript",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[Path]",
                    "dict"
                ],
                "mocker": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool",
                    "Dict[str, Tuple[str, str]]",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_add_indicators": {
            "name": "test_add_indicators",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "dict",
                    "Sequence"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "Dict[str, List[bytes]]",
                    "str"
                ]
            }
        },
        "test_plot_trades": {
            "name": "test_plot_trades",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str"
                ]
            }
        },
        "test_generate_candlestick_graph_no_signals_no_trades": {
            "name": "test_generate_candlestick_graph_no_signals_no_trades",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "List[bool]",
                    "bool",
                    "dict"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "caplog": [
                    "str",
                    "int",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "test_generate_candlestick_graph_no_trades": {
            "name": "test_generate_candlestick_graph_no_trades",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_generate_Plot_filename": {
            "name": "test_generate_Plot_filename",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_plot_file": {
            "name": "test_generate_plot_file",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "caplog": []
            }
        },
        "test_add_profit": {
            "name": "test_add_profit",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_profit_graph": {
            "name": "test_generate_profit_graph",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_start_plot_dataframe": {
            "name": "test_start_plot_dataframe",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_analyse_and_plot_pairs": {
            "name": "test_analyse_and_plot_pairs",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict",
                    "Optional[\"Game\"]"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_start_plot_profit": {
            "name": "test_start_plot_profit",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_start_plot_profit_error": {
            "name": "test_start_plot_profit_error",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_plot_profit": {
            "name": "test_plot_profit",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "caplog": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_talib.py": {
        "test_talib_bollingerbands_near_zero_values": {
            "name": "test_talib_bollingerbands_near_zero_values",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_timerange.py": {
        "test_parse_timerange_incorrect": {
            "name": "test_parse_timerange_incorrect",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_utils.py": {
        "test_setup_utils_configuration": {
            "name": "test_setup_utils_configuration",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_exchanges": {
            "name": "test_list_exchanges",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_create_datadir_failed": {
            "name": "test_create_datadir_failed",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_create_datadir": {
            "name": "test_create_datadir",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "int",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Tuple[Union[float,float,float,float,float]]"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.Mock",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_download_data_keyboardInterrupt": {
            "name": "test_download_data_keyboardInterrupt",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "tests.async_mock.MagicMock"
                ],
                "markets": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_download_data_no_markets": {
            "name": "test_download_data_no_markets",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/test_wallets.py": {
        "test_sync_wallet_at_boot": {
            "name": "test_sync_wallet_at_boot",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "int"
                ]
            }
        },
        "test_sync_wallet_missing_data": {
            "name": "test_sync_wallet_missing_data",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "Optional[\"Game\"]",
                    "int"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/data/test_btanalysis.py": {
        "test_load_backtest_data": {
            "name": "test_load_backtest_data",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_trades_db": {
            "name": "test_load_trades_db",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "pandas.DataFrame",
                    "tests.mock_vws.utils.Endpoint",
                    "Callable"
                ],
                "fee": [],
                "mocker": [
                    "unittesmock.MagicMock",
                    "int"
                ]
            }
        },
        "test_extract_trades_of_period": {
            "name": "test_extract_trades_of_period",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_trades": {
            "name": "test_load_trades",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "dict"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_combine_tickers_with_mean": {
            "name": "test_combine_tickers_with_mean",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_cum_profit": {
            "name": "test_create_cum_profit",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/data/test_converter.py": {
        "test_dataframe_correct_columns": {
            "name": "test_dataframe_correct_columns",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "bool"
                ]
            }
        },
        "test_parse_ticker_dataframe": {
            "name": "test_parse_ticker_dataframe",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "ticker_history_list": [
                    "Dict",
                    "str"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_ohlcv_fill_up_missing_data": {
            "name": "test_ohlcv_fill_up_missing_data",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_ohlcv_fill_up_missing_data2": {
            "name": "test_ohlcv_fill_up_missing_data2",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_ohlcv_drop_incomplete": {
            "name": "test_ohlcv_drop_incomplete",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/data/test_dataprovider.py": {
        "test_ohlcv": {
            "name": "test_ohlcv",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "default_conf": [
                    "float",
                    "int",
                    "List[float]",
                    "None",
                    "Optional[int]",
                    "Iterable[Any]"
                ],
                "ticker_history": [
                    "bool",
                    "tests.hints.CleavageCall",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_historic_ohlcv": {
            "name": "test_historic_ohlcv",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "default_conf": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "ticker_history": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_get_pair_dataframe": {
            "name": "test_get_pair_dataframe",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str"
                ],
                "default_conf": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "ticker_history": [
                    "Sequence[cirq.Qid]"
                ]
            }
        },
        "test_available_pairs": {
            "name": "test_available_pairs",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "ticker_history": [
                    "bool",
                    "tests.hints.CleavageCall",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_refresh": {
            "name": "test_refresh",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ],
                "default_conf": [
                    "str"
                ],
                "ticker_history": [
                    "bool",
                    "str",
                    "Callable[...,None]",
                    "int"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/data/test_history.py": {
        "_backup_file": {
            "name": "_backup_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "List[str]",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "str"
                ],
                "copy_file": [
                    "bool",
                    "Optional[BinaryIO]"
                ]
            }
        },
        "_clean_test_file": {
            "name": "_clean_test_file",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "test_load_data_30min_ticker": {
            "name": "test_load_data_30min_ticker",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "Exception"
                ],
                "caplog": [
                    "str"
                ],
                "default_conf": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "test_load_data_7min_ticker": {
            "name": "test_load_data_7min_ticker",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "Exception"
                ],
                "caplog": [
                    "str"
                ],
                "default_conf": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "test_load_data_1min_ticker": {
            "name": "test_load_data_1min_ticker",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "ticker_history": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "mocker": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "caplog": []
            }
        },
        "test_load_data_with_new_pair_1min": {
            "name": "test_load_data_with_new_pair_1min",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "ticker_history_list": [
                    "bytes",
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "List[str]"
                ],
                "caplog": [
                    "str"
                ],
                "default_conf": [
                    "str"
                ]
            }
        },
        "test_load_data_live": {
            "name": "test_load_data_live",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str"
                ],
                "mocker": [],
                "caplog": [
                    "Exception",
                    "dict",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_load_data_live_noexchange": {
            "name": "test_load_data_live_noexchange",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "List[bool]",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "List[bool]",
                    "bool"
                ]
            }
        },
        "test_testdata_path": {
            "name": "test_testdata_path",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_cached_data_for_updating": {
            "name": "test_load_cached_data_for_updating",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_download_pair_history": {
            "name": "test_download_pair_history",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "ticker_history_list": [
                    "tests.async_mock.Mock",
                    "bytes",
                    "mock.MagicMock"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "List[str]"
                ],
                "default_conf": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_download_pair_history2": {
            "name": "test_download_pair_history2",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_download_backtesting_data_exception": {
            "name": "test_download_backtesting_data_exception",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "ticker_history": [],
                "mocker": [],
                "caplog": [],
                "default_conf": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_load_tickerdata_file": {
            "name": "test_load_tickerdata_file",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_partial_missing": {
            "name": "test_load_partial_missing",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "int"
                ]
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_trim_tickerlist": {
            "name": "test_trim_tickerlist",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_dump_json_tofile": {
            "name": "test_file_dump_json_tofile",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_timeframe": {
            "name": "test_get_timeframe",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_validate_backtest_data_warn": {
            "name": "test_validate_backtest_data_warn",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "float",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "test_validate_backtest_data": {
            "name": "test_validate_backtest_data",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "List[int]",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "test_refresh_backtest_ohlcv_data": {
            "name": "test_refresh_backtest_ohlcv_data",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "bool"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "test_download_data_no_markets": {
            "name": "test_download_data_no_markets",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "Optional[float]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/data/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/edge/test_edge.py": {
        "_validate_ohlc": {
            "name": "_validate_ohlc",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "buy_ohlc_sell_matrice": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_build_dataframe": {
            "name": "_build_dataframe",
            "location": 45,
            "return": [
                "DataFrame",
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "buy_ohlc_sell_matrice": [
                    "Iterable[allennlp.data.instance.Instance]",
                    "bool"
                ]
            }
        },
        "_time_on_candle": {
            "name": "_time_on_candle",
            "location": 72,
            "return": [
                "bool",
                "float",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "number": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "test_edge_results": {
            "name": "test_edge_results",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "edge_conf": [],
                "mocker": [],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "data": [
                    "pandas.DataFrame",
                    "Callable[[bytes], bytes]"
                ]
            }
        },
        "test_adjust": {
            "name": "test_adjust",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_stoploss": {
            "name": "test_stoploss",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_nonexisting_stoploss": {
            "name": "test_nonexisting_stoploss",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_stake_amount": {
            "name": "test_stake_amount",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_nonexisting_stake_amount": {
            "name": "test_nonexisting_stake_amount",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "test_edge_heartbeat_calculate": {
            "name": "test_edge_heartbeat_calculate",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "edge_conf": [
                    "str"
                ]
            }
        },
        "mocked_load_data": {
            "name": "mocked_load_data",
            "location": 261,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "datadir": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "pairs": [
                    "List",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "ticker_interval": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "refresh_pairs": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "timerange": [
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "exchange": [
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "test_edge_process_downloaded_data": {
            "name": "test_edge_process_downloaded_data",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.MagicMock"
                ],
                "edge_conf": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_edge_process_no_data": {
            "name": "test_edge_process_no_data",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "edge_conf": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": []
            }
        },
        "test_edge_process_no_trades": {
            "name": "test_edge_process_no_trades",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "str"
                ],
                "edge_conf": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": []
            }
        },
        "test_edge_init_error": {
            "name": "test_edge_init_error",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "edge_conf": [
                    "str",
                    "cli_ui.tests.MessageRecorder",
                    "int",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_process_expectancy": {
            "name": "test_process_expectancy",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "edge_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_process_expectancy.get_fee": {
            "name": "get_fee",
            "location": 343,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/edge/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/exchange/test_binance.py": {
        "test_stoploss_limit_order": {
            "name": "test_stoploss_limit_order",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_stoploss_limit_order_dry_run": {
            "name": "test_stoploss_limit_order_dry_run",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable",
                    "Optional[int]"
                ],
                "mocker": [
                    "float",
                    "int",
                    "Sequence['cirq.Qid']"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/exchange/test_exchange.py": {
        "get_mock_coro": {
            "name": "get_mock_coro",
            "location": 30,
            "return": [
                "Mock",
                "Iterable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "return_value": [
                    "str",
                    "bool",
                    "list",
                    "Callable[[str, Any], None]"
                ]
            }
        },
        "ccxt_exceptionhandlers": {
            "name": "ccxt_exceptionhandlers",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "dict"
                ],
                "default_conf": [
                    "str",
                    "dict"
                ],
                "api_mock": [
                    "unittesmock.MagicMock"
                ],
                "exchange_name": [
                    "str",
                    "dict"
                ],
                "fun": [
                    "bool",
                    "str",
                    "Optional[Sequence[str]]",
                    "Set[str]"
                ],
                "mock_ccxt_fun": [
                    "dict",
                    "bool",
                    "Optional['SparkSession']",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "logging.Logger",
                    "Exception",
                    "logging.LogRecord",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_init_ccxt_kwargs": {
            "name": "test_init_ccxt_kwargs",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "caplog": [
                    "Exception",
                    "logging.FileHandler",
                    "logging.Logger"
                ]
            }
        },
        "test_destroy": {
            "name": "test_destroy",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Exception",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "test_init_exception": {
            "name": "test_init_exception",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "set"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_exchange_resolver": {
            "name": "test_exchange_resolver",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "logging.Logger",
                    "dict",
                    "str",
                    "Exception",
                    "bool"
                ]
            }
        },
        "test_validate_order_time_in_force": {
            "name": "test_validate_order_time_in_force",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Callable",
                    "dict",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "str",
                    "Callable",
                    "dict",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "str",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_symbol_amount_prec": {
            "name": "test_symbol_amount_prec",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str"
                ],
                "mocker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_symbol_price_prec": {
            "name": "test_symbol_price_prec",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "mocker": []
            }
        },
        "test_set_sandbox": {
            "name": "test_set_sandbox",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[relay.exchange.order.Order]",
                    "unittesmock.Mock",
                    "int",
                    "unittesmock.MagicMock"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_set_sandbox_exception": {
            "name": "test_set_sandbox_exception",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "unittesmock.Mock",
                    "Sequence[relay.exchange.order.Order]",
                    "int"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test__load_async_markets": {
            "name": "test__load_async_markets",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str"
                ],
                "mocker": [
                    "int",
                    "str"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "logging.LogRecord",
                    "Exception"
                ]
            }
        },
        "test__load_markets": {
            "name": "test__load_markets",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "Exception",
                    "logging.LogRecord"
                ]
            }
        },
        "test__reload_markets": {
            "name": "test__reload_markets",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[relay.exchange.order.Order]",
                    "unittesmock.Mock"
                ],
                "mocker": [
                    "Sequence[relay.exchange.order.Order]",
                    "unittesmock.Mock"
                ],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test__reload_markets_exception": {
            "name": "test__reload_markets_exception",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[relay.exchange.order.Order]",
                    "unittesmock.Mock"
                ],
                "mocker": [
                    "Sequence[relay.exchange.order.Order]",
                    "unittesmock.Mock"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "Collection[str]",
                    "bool",
                    "logging.LogRecord",
                    "Exception"
                ]
            }
        },
        "test_validate_pairs": {
            "name": "test_validate_pairs",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_pairs_not_available": {
            "name": "test_validate_pairs_not_available",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_pairs_exception": {
            "name": "test_validate_pairs_exception",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "mock.MagicMock",
                    "unittesmock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "caplog": [
                    "logging.Logger",
                    "Exception",
                    "logging.LogRecord",
                    "Collection[str]",
                    "bool",
                    "List[Dict[str, float]]"
                ]
            }
        },
        "test_validate_pairs_restricted": {
            "name": "test_validate_pairs_restricted",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_validate_timeframes": {
            "name": "test_validate_timeframes",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_timeframes_failed": {
            "name": "test_validate_timeframes_failed",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_timeframes_emulated_ohlcv_1": {
            "name": "test_validate_timeframes_emulated_ohlcv_1",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_timeframes_emulated_ohlcvi_2": {
            "name": "test_validate_timeframes_emulated_ohlcvi_2",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_timeframes_not_in_config": {
            "name": "test_validate_timeframes_not_in_config",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_validate_order_types": {
            "name": "test_validate_order_types",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "tests.hints.RightAccumulatorCall"
                ],
                "mocker": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_validate_order_types_not_in_config": {
            "name": "test_validate_order_types_not_in_config",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable",
                    "bytes"
                ],
                "mocker": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_exchange_has": {
            "name": "test_exchange_has",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_dry_run_order": {
            "name": "test_dry_run_order",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "int",
                    "bool"
                ],
                "mocker": [
                    "str"
                ],
                "side": [
                    "Callable",
                    "Optional[int]"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_create_order": {
            "name": "test_create_order",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]",
                    "str",
                    "Callable[[List, bool], None]"
                ],
                "mocker": [
                    "Callable",
                    "Optional[dict]"
                ],
                "side": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "ordertype": [
                    "Sequence[int]",
                    "Optional[str]",
                    "str"
                ],
                "rate": [
                    "Sequence[int]",
                    "Optional[str]",
                    "str"
                ],
                "marketprice": [
                    "unittesmock.MagicMock",
                    "Dict[str, Any]",
                    "int"
                ],
                "exchange_name": [
                    "str",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "test_buy_dry_run": {
            "name": "test_buy_dry_run",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[int]",
                    "Callable"
                ],
                "mocker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_buy_prod": {
            "name": "test_buy_prod",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "int",
                    "str",
                    "Optional[dict]"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_buy_considers_time_in_force": {
            "name": "test_buy_considers_time_in_force",
            "location": 685,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "Callable",
                    "str"
                ],
                "exchange_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_sell_dry_run": {
            "name": "test_sell_dry_run",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[int]",
                    "Callable"
                ],
                "mocker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_sell_prod": {
            "name": "test_sell_prod",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "int",
                    "str",
                    "Optional[dict]"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_sell_considers_time_in_force": {
            "name": "test_sell_considers_time_in_force",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "Callable",
                    "str"
                ],
                "exchange_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_balance_dry_run": {
            "name": "test_get_balance_dry_run",
            "location": 860,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[\"Game\"]",
                    "float",
                    "Optional[int]"
                ],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_balance_prod": {
            "name": "test_get_balance_prod",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_get_balances_dry_run": {
            "name": "test_get_balances_dry_run",
            "location": 889,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Optional[\"Game\"]",
                    "float",
                    "Optional[int]"
                ],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_balances_prod": {
            "name": "test_get_balances_prod",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "bool"
                ],
                "exchange_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_tickers": {
            "name": "test_get_tickers",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "bool"
                ],
                "exchange_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_ticker": {
            "name": "test_get_ticker",
            "location": 961,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "mocker": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "exchange_name": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_get_historic_ohlcv": {
            "name": "test_get_historic_ohlcv",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[Dict[str, int]]"
                ],
                "mocker": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[Dict[str, int]]"
                ],
                "caplog": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[Dict[str, int]]"
                ],
                "exchange_name": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[Dict[str, int]]"
                ]
            }
        },
        "test_refresh_latest_ohlcv": {
            "name": "test_refresh_latest_ohlcv",
            "location": 1046,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger"
                ]
            }
        },
        "test_refresh_latest_ohlcv_inv_result": {
            "name": "test_refresh_latest_ohlcv_inv_result",
            "location": 1160,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "int"
                ],
                "mocker": [
                    "str",
                    "int"
                ],
                "caplog": [
                    "str",
                    "int",
                    "logging.Logger",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "test_get_order_book": {
            "name": "test_get_order_book",
            "location": 1188,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Iterable[str]"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ],
                "order_book_l2": [
                    "str",
                    "unittesmock.MagicMock",
                    "dict"
                ],
                "exchange_name": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_get_order_book_exception": {
            "name": "test_get_order_book_exception",
            "location": 1202,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "make_fetch_ohlcv_mock": {
            "name": "make_fetch_ohlcv_mock",
            "location": 1218,
            "return": [
                "unittesmock.Mock",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "List[Dict]",
                    "pandas.DataFrame",
                    "Iterable[bytes]",
                    "List[Tuple]",
                    "List[List[Any]]"
                ]
            }
        },
        "test_cancel_order_dry_run": {
            "name": "test_cancel_order_dry_run",
            "location": 1310,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "bool"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_cancel_order": {
            "name": "test_cancel_order",
            "location": 1318,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_get_order": {
            "name": "test_get_order",
            "location": 1337,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "exchange_name": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_name": {
            "name": "test_name",
            "location": 1367,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "type"
                ],
                "mocker": [
                    "str",
                    "unittesmock.MagicMock",
                    "List[str]"
                ],
                "exchange_name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "test_get_trades_for_order": {
            "name": "test_get_trades_for_order",
            "location": 1377,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "unittesmock.MagicMock",
                    "bool"
                ],
                "exchange_name": [
                    "str"
                ]
            }
        },
        "test_get_fee": {
            "name": "test_get_fee",
            "location": 1426,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "str"
                ],
                "mocker": [
                    "bool",
                    "str"
                ],
                "exchange_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_stoploss_limit_order_unsupported_exchange": {
            "name": "test_stoploss_limit_order_unsupported_exchange",
            "location": 1442,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_merge_ft_has_dict": {
            "name": "test_merge_ft_has_dict",
            "location": 1448,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "List[dict]"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_get_valid_pair_combination": {
            "name": "test_get_valid_pair_combination",
            "location": 1476,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "Tuple[int, int]",
                    "List[str]"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_timeframe_to_minutes": {
            "name": "test_timeframe_to_minutes",
            "location": 1491,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeframe_to_seconds": {
            "name": "test_timeframe_to_seconds",
            "location": 1498,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeframe_to_msecs": {
            "name": "test_timeframe_to_msecs",
            "location": 1505,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeframe_to_prev_date": {
            "name": "test_timeframe_to_prev_date",
            "location": 1512,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeframe_to_next_date": {
            "name": "test_timeframe_to_next_date",
            "location": 1537,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__reload_markets.load_markets": {
            "name": "load_markets",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_fetch_ohlcv_mock.fetch_ohlcv_mock": {
            "name": "fetch_ohlcv_mock",
            "location": 1219,
            "return": [
                "List",
                "str",
                "Dict[str,List[int]]",
                "IO[bytes]",
                "IO",
                "Callable"
            ],
            "arguments": {
                "pair": [
                    "Callable",
                    "Optional",
                    "str",
                    "Callable[[], bytes]",
                    "bool"
                ],
                "timeframe": [
                    "Callable",
                    "Optional",
                    "str",
                    "Callable[[], bytes]",
                    "bool"
                ],
                "since": [
                    "str",
                    "bytes",
                    "IO",
                    "bool",
                    "IO[bytes]"
                ]
            }
        },
        "test___async_get_candle_history_sort.sort_data": {
            "name": "sort_data",
            "location": 1230,
            "return": [
                "List",
                "Dict",
                "Dict[str,str]",
                "Mapping",
                "str",
                "List[Callable]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/exchange/test_kraken.py": {
        "test_buy_kraken_trading_agreement": {
            "name": "test_buy_kraken_trading_agreement",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable[[list], None]"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_sell_kraken_trading_agreement": {
            "name": "test_sell_kraken_trading_agreement",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable[[list], None]"
                ],
                "mocker": [
                    "int"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/exchange/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/optimize/test_backtesting.py": {
        "trim_dictlist": {
            "name": "trim_dictlist",
            "location": 30,
            "return": [
                "Dict",
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str",
                "allennlp.data.vocabulary.Vocabulary"
            ],
            "arguments": {
                "dict_list": [
                    "List[str]",
                    "int",
                    "bytes",
                    "float",
                    "dict",
                    "Tuple[int]"
                ],
                "num": [
                    "int",
                    "bool",
                    "Set[int]",
                    "List[str]"
                ]
            }
        },
        "load_data_test": {
            "name": "load_data_test",
            "location": 37,
            "return": [
                "Dict[Text,]",
                "int",
                "str"
            ],
            "arguments": {
                "what": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "simple_backtest": {
            "name": "simple_backtest",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str"
                ],
                "contour": [
                    "Dict[str, str]",
                    "bytes",
                    "Optional[bytes]",
                    "str",
                    "dict"
                ],
                "num_results": [
                    "int",
                    "Dict[str, int]",
                    "numpy.ndarray",
                    "tuple"
                ],
                "mocker": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "mocked_load_data": {
            "name": "mocked_load_data",
            "location": 105,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "datadir": [
                    "str",
                    "list",
                    "pathlib.Path",
                    "BinaryIO",
                    "Dict[str, Any]"
                ],
                "pairs": [
                    "List",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "ticker_interval": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "refresh_pairs": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "timerange": [
                    "None",
                    "str",
                    "List",
                    "pathlib.Path",
                    "BinaryIO",
                    "Dict[str,Any]"
                ],
                "exchange": [
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "bool"
                ],
                "live": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "_load_pair_as_ticks": {
            "name": "_load_pair_as_ticks",
            "location": 114,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "List[str]"
            ],
            "arguments": {
                "pair": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "tickfreq": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "_make_backtest_conf": {
            "name": "_make_backtest_conf",
            "location": 121,
            "return": [
                "Dict[Text,Union[int,None]]",
                "str",
                "bytearray"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ],
                "conf": [
                    "int",
                    "float"
                ],
                "pair": [
                    "Text",
                    "Callable[[int],None]",
                    "bool",
                    "Optional[int]",
                    "bytes",
                    "int"
                ],
                "record": [
                    "float",
                    "None"
                ]
            }
        },
        "_trend": {
            "name": "_trend",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "signals": [
                    "bool",
                    "int",
                    "float",
                    "Callable",
                    "List[str]",
                    "bytes"
                ],
                "buy_value": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "tuple"
                ],
                "sell_value": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "tuple"
                ]
            }
        },
        "_trend_alternate": {
            "name": "_trend_alternate",
            "location": 152,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "None",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "test_setup_configuration_without_arguments": {
            "name": "test_setup_configuration_without_arguments",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "bool",
                    "Collection[str]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "test_setup_bt_configuration_with_arguments": {
            "name": "test_setup_bt_configuration_with_arguments",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "caplog": [
                    "bool",
                    "Collection[str]",
                    "Optional[Mapping[str, Any]]",
                    "str"
                ]
            }
        },
        "test_setup_configuration_unlimited_stake_amount": {
            "name": "test_setup_configuration_unlimited_stake_amount",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "pypi2nix.path.Path",
                    "str",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "Callable"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "caplog": [
                    "List[str]",
                    "int",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "Literal",
                    "Callable[..., None]"
                ]
            }
        },
        "test_start": {
            "name": "test_start",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "fee": [
                    "tests.hints.RightFolderCall",
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall"
                ],
                "default_conf": [],
                "caplog": [
                    "str"
                ]
            }
        },
        "test_backtesting_init": {
            "name": "test_backtesting_init",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "dict"
                ],
                "order_types": [
                    "str",
                    "List[Callable]",
                    "Callable[[KT], VT]"
                ]
            }
        },
        "test_backtesting_init_no_ticker_interval": {
            "name": "test_backtesting_init_no_ticker_interval",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "int"
                ],
                "caplog": [
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "test_tickerdata_to_dataframe_bt": {
            "name": "test_tickerdata_to_dataframe_bt",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_generate_text_table": {
            "name": "test_generate_text_table",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "bool",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_generate_text_table_sell_reason": {
            "name": "test_generate_text_table_sell_reason",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "bool",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_generate_text_table_strategyn": {
            "name": "test_generate_text_table_strategyn",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "bool",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_backtesting_start": {
            "name": "test_backtesting_start",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "Optional[Type[Exception]]",
                    "Optional[str]"
                ],
                "mocker": [],
                "caplog": [
                    "dict",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_backtesting_start_no_data": {
            "name": "test_backtesting_start_no_data",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "Optional[Type[Exception]]",
                    "Optional[object]"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "test_backtest": {
            "name": "test_backtest",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "dict",
                    "list",
                    "float"
                ],
                "fee": [],
                "mocker": []
            }
        },
        "test_backtest_1min_ticker_interval": {
            "name": "test_backtest_1min_ticker_interval",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "fee": [],
                "mocker": []
            }
        },
        "test_processed": {
            "name": "test_processed",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_backtest_pricecontours": {
            "name": "test_backtest_pricecontours",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Iterable[Any]",
                    "dict"
                ],
                "fee": [],
                "mocker": []
            }
        },
        "test_backtest_clash_buy_sell": {
            "name": "test_backtest_clash_buy_sell",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_backtest_only_sell": {
            "name": "test_backtest_only_sell",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_backtest_alternate_buy_sell": {
            "name": "test_backtest_alternate_buy_sell",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Iterable[str]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolationResponse]",
                    "recidiviz.persistence.entity.state.entities.StatePerson",
                    "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]"
                ],
                "fee": [],
                "mocker": []
            }
        },
        "test_backtest_multi_pair": {
            "name": "test_backtest_multi_pair",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "fee": [],
                "mocker": [],
                "tres": [
                    "Callable",
                    "bytes"
                ],
                "pair": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "test_backtest_record": {
            "name": "test_backtest_record",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [],
                "mocker": [
                    "NamedTuple"
                ]
            }
        },
        "test_backtest_start_timerange": {
            "name": "test_backtest_start_timerange",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [],
                "caplog": [
                    "dict",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_backtest_start_multi_strat": {
            "name": "test_backtest_start_multi_strat",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str"
                ],
                "mocker": [],
                "caplog": [
                    "dict",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_backtesting_start.get_timeframe": {
            "name": "get_timeframe",
            "location": 460,
            "return": [
                "tuple[Arrow]"
            ],
            "arguments": {
                "input1": []
            }
        },
        "test_backtesting_start_no_data.get_timeframe": {
            "name": "get_timeframe",
            "location": 493,
            "return": [
                "Tuple[Arrow]",
                "str",
                "bool"
            ],
            "arguments": {
                "input1": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "test_backtest_clash_buy_sell.fun": {
            "name": "fun",
            "location": 625,
            "return": [],
            "arguments": {
                "dataframe": [
                    "None"
                ],
                "pair": [
                    "None"
                ]
            }
        },
        "test_backtest_only_sell.fun": {
            "name": "fun",
            "location": 640,
            "return": [
                "int",
                "Optional[int]",
                "pathlib.Path",
                "float",
                "List[int]",
                "str",
                "tuple"
            ],
            "arguments": {
                "dataframe": [
                    "None",
                    "str",
                    "Generator",
                    "Optional[bool]",
                    "Optional[int]",
                    "float",
                    "pandas._ArrayLike"
                ],
                "pair": [
                    "None",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "test_backtest_multi_pair._trend_alternate_hold": {
            "name": "_trend_alternate_hold",
            "location": 677,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "None",
                    "numpy.ndarray",
                    "int",
                    "str",
                    "bool"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/optimize/test_backtest_detail.py": {
        "test_backtest_results": {
            "name": "test_backtest_results",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [],
                "mocker": [],
                "caplog": [],
                "data": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/optimize/test_edge_cli.py": {
        "test_setup_configuration_without_arguments": {
            "name": "test_setup_configuration_without_arguments",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool"
                ],
                "default_conf": [
                    "str",
                    "bool"
                ],
                "caplog": [
                    "List[dict[str,float]]",
                    "int",
                    "List[Dict[str,float]]",
                    "Callable",
                    "Dict",
                    "bool"
                ]
            }
        },
        "test_setup_edge_configuration_with_arguments": {
            "name": "test_setup_edge_configuration_with_arguments",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "edge_conf": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "caplog": []
            }
        },
        "test_start": {
            "name": "test_start",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "fee": [
                    "str",
                    "cli_ui.tests.MessageRecorder"
                ],
                "edge_conf": [
                    "tests.e2e.Helper",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "caplog": []
            }
        },
        "test_edge_init": {
            "name": "test_edge_init",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "edge_conf": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_generate_edge_table": {
            "name": "test_generate_edge_table",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "edge_conf": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/optimize/test_hyperopt.py": {
        "hyperopt": {
            "name": "hyperopt",
            "location": 28,
            "return": [
                "Hyperopt"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "hyperopt_results": {
            "name": "hyperopt_results",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "create_trials": {
            "name": "create_trials",
            "location": 50,
            "return": [
                "list[dict[typing.Text, typing.Union[int,typing.Text,dict[, ]]]]"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt": []
            }
        },
        "test_setup_hyperopt_configuration_without_arguments": {
            "name": "test_setup_hyperopt_configuration_without_arguments",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_setup_hyperopt_configuration_with_arguments": {
            "name": "test_setup_hyperopt_configuration_with_arguments",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_hyperoptresolver": {
            "name": "test_hyperoptresolver",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_hyperoptresolver_wrongname": {
            "name": "test_hyperoptresolver_wrongname",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_hyperoptlossresolver": {
            "name": "test_hyperoptlossresolver",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_hyperoptlossresolver_wrongname": {
            "name": "test_hyperoptlossresolver_wrongname",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_start": {
            "name": "test_start",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_start_no_data": {
            "name": "test_start_no_data",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_start_failure": {
            "name": "test_start_failure",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_start_filelock": {
            "name": "test_start_filelock",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_loss_calculation_prefer_correct_trade_count": {
            "name": "test_loss_calculation_prefer_correct_trade_count",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "hyperopt_results": []
            }
        },
        "test_loss_calculation_prefer_shorter_trades": {
            "name": "test_loss_calculation_prefer_shorter_trades",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "hyperopt_results": []
            }
        },
        "test_loss_calculation_has_limited_profit": {
            "name": "test_loss_calculation_has_limited_profit",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "hyperopt_results": []
            }
        },
        "test_sharpe_loss_prefers_higher_profits": {
            "name": "test_sharpe_loss_prefers_higher_profits",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "hyperopt_results": []
            }
        },
        "test_onlyprofit_loss_prefers_higher_profits": {
            "name": "test_onlyprofit_loss_prefers_higher_profits",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "hyperopt_results": []
            }
        },
        "test_log_results_if_loss_improves": {
            "name": "test_log_results_if_loss_improves",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": [],
                "capsys": []
            }
        },
        "test_no_log_if_loss_does_not_improve": {
            "name": "test_no_log_if_loss_does_not_improve",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": [],
                "caplog": []
            }
        },
        "test_save_trials_saves_trials": {
            "name": "test_save_trials_saves_trials",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt": [],
                "caplog": []
            }
        },
        "test_read_trials_returns_trials_file": {
            "name": "test_read_trials_returns_trials_file",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "hyperopt": [],
                "caplog": []
            }
        },
        "test_roi_table_generation": {
            "name": "test_roi_table_generation",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": []
            }
        },
        "test_start_calls_optimizer": {
            "name": "test_start_calls_optimizer",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": [],
                "capsys": []
            }
        },
        "test_format_results": {
            "name": "test_format_results",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": []
            }
        },
        "test_has_space": {
            "name": "test_has_space",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": []
            }
        },
        "test_populate_indicators": {
            "name": "test_populate_indicators",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": []
            }
        },
        "test_buy_strategy_generator": {
            "name": "test_buy_strategy_generator",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperopt": []
            }
        },
        "test_generate_optimizer": {
            "name": "test_generate_optimizer",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": []
            }
        },
        "test_clean_hyperopt": {
            "name": "test_clean_hyperopt",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_continue_hyperopt": {
            "name": "test_continue_hyperopt",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": []
            }
        },
        "test_print_json_spaces_all": {
            "name": "test_print_json_spaces_all",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": [],
                "capsys": []
            }
        },
        "test_print_json_spaces_roi_stoploss": {
            "name": "test_print_json_spaces_roi_stoploss",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [],
                "caplog": [],
                "capsys": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/optimize/__init__.py": {
        "_get_frame_time_from_offset": {
            "name": "_get_frame_time_from_offset",
            "location": 38,
            "return": [
                "str",
                "int",
                "Callable[[object], Any]",
                "Callable",
                "T"
            ],
            "arguments": {
                "offset": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_build_backtest_dataframe": {
            "name": "_build_backtest_dataframe",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "ticker_with_signals": [
                    "List",
                    "pandas.DataFrame",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/pairlist/test_pairlist.py": {
        "whitelist_conf": {
            "name": "whitelist_conf",
            "location": 15,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "default_conf": [
                    "bytes",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_load_pairlist_noexist": {
            "name": "test_load_pairlist_noexist",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "markets": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock",
                    "mock.MagicMock"
                ],
                "default_conf": [
                    "str"
                ]
            }
        },
        "test_refresh_market_pair_not_in_whitelist": {
            "name": "test_refresh_market_pair_not_in_whitelist",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.Mock",
                    "mock.MagicMock",
                    "tests.async_mock.MagicMock"
                ],
                "whitelist_conf": [
                    "str"
                ]
            }
        },
        "test_refresh_pairlists": {
            "name": "test_refresh_pairlists",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.Mock"
                ],
                "markets": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "whitelist_conf": [
                    "str"
                ]
            }
        },
        "test_refresh_pairlist_dynamic": {
            "name": "test_refresh_pairlist_dynamic",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "unittesmock.MagicMock"
                ],
                "tickers": [
                    "unittesmock.MagicMock"
                ],
                "whitelist_conf": [
                    "str"
                ]
            }
        },
        "test_VolumePairList_refresh_empty": {
            "name": "test_VolumePairList_refresh_empty",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "markets_empty": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "whitelist_conf": [
                    "str"
                ]
            }
        },
        "test_VolumePairList_whitelist_gen": {
            "name": "test_VolumePairList_whitelist_gen",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "whitelist_conf": [
                    "str"
                ],
                "markets": [
                    "int"
                ],
                "tickers": [
                    "str",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Tuple[int,int,int]"
                ],
                "base_currency": [
                    "bytes",
                    "Dict"
                ],
                "key": [
                    "int",
                    "bytes",
                    "str"
                ],
                "whitelist_result": [
                    "str",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Tuple[int,int,int]"
                ],
                "precision_filter": [
                    "List[Callable]",
                    "str"
                ]
            }
        },
        "test_gen_pair_whitelist_not_supported": {
            "name": "test_gen_pair_whitelist_not_supported",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "tickers": [
                    "bool",
                    "tests.hints.CleavageCall",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_pairlist_class": {
            "name": "test_pairlist_class",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock"
                ],
                "whitelist_conf": [
                    "str"
                ],
                "markets": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock",
                    "tests.async_mock.Mock"
                ],
                "pairlist": [
                    "Callable",
                    "Set",
                    "int"
                ]
            }
        },
        "test_validate_whitelist": {
            "name": "test_validate_whitelist",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.Mock"
                ],
                "whitelist_conf": [
                    "str",
                    "float",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "int"
                ],
                "markets": [],
                "pairlist": [
                    "bool",
                    "str"
                ],
                "whitelist": [
                    "Mapping",
                    "Optional[Mapping[str,Any]]",
                    "Callable",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]"
                ],
                "caplog": [
                    "float"
                ],
                "log_message": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "None"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/pairlist/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/rpc/test_fiat_convert.py": {
        "test_pair_convertion_object": {
            "name": "test_pair_convertion_object",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fiat_convert_is_supported": {
            "name": "test_fiat_convert_is_supported",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_fiat_convert_add_pair": {
            "name": "test_fiat_convert_add_pair",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Type",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_fiat_convert_find_price": {
            "name": "test_fiat_convert_find_price",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_fiat_convert_unsupported_crypto": {
            "name": "test_fiat_convert_unsupported_crypto",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": []
            }
        },
        "test_fiat_convert_get_price": {
            "name": "test_fiat_convert_get_price",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fiat_convert_same_currencies": {
            "name": "test_fiat_convert_same_currencies",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_fiat_convert_two_FIAT": {
            "name": "test_fiat_convert_two_FIAT",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_loadcryptomap": {
            "name": "test_loadcryptomap",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Mapping",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str,Any]"
                ]
            }
        },
        "test_fiat_init_network_exception": {
            "name": "test_fiat_init_network_exception",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_fiat_convert_without_network": {
            "name": "test_fiat_convert_without_network",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_fiat_invalid_response": {
            "name": "test_fiat_invalid_response",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": []
            }
        },
        "test_convert_amount": {
            "name": "test_convert_amount",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/rpc/test_rpc.py": {
        "prec_satoshi": {
            "name": "prec_satoshi",
            "location": 21,
            "return": [
                "bool",
                "int",
                "bytes",
                "bytearray",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool",
                    "numpy.ndarray"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "test_rpc_trade_status": {
            "name": "test_rpc_trade_status",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int"
                ],
                "ticker": [],
                "fee": [],
                "markets": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_rpc_status_table": {
            "name": "test_rpc_status_table",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ticker": [],
                "fee": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_rpc_daily_profit": {
            "name": "test_rpc_daily_profit",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "str",
                    "Tuple[int, int]"
                ],
                "update": [
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "ticker": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "fee": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "limit_buy_order": [
                    "bytes",
                    "dict",
                    "bool",
                    "int",
                    "str"
                ],
                "limit_sell_order": [
                    "bytes",
                    "dict",
                    "bool",
                    "int",
                    "str"
                ],
                "markets": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "mocker": [
                    "Iterable",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "test_rpc_trade_statistics": {
            "name": "test_rpc_trade_statistics",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "ticker_sell_up": [],
                "fee": [],
                "limit_buy_order": [
                    "dict"
                ],
                "limit_sell_order": [
                    "dict"
                ],
                "markets": [],
                "mocker": []
            }
        },
        "test_rpc_trade_statistics_closed": {
            "name": "test_rpc_trade_statistics_closed",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "ticker": [],
                "fee": [
                    "Callable"
                ],
                "markets": [
                    "Callable"
                ],
                "ticker_sell_up": [
                    "bool"
                ],
                "limit_buy_order": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "limit_sell_order": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "test_rpc_balance_handle_error": {
            "name": "test_rpc_balance_handle_error",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "int",
                    "Dict[int, Dict[int, Any]]",
                    "Sequence[Union[int, float]]",
                    "Dict[str, float]"
                ],
                "mocker": []
            }
        },
        "test_rpc_balance_handle": {
            "name": "test_rpc_balance_handle",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "Dict[str, float]"
                ],
                "mocker": []
            }
        },
        "test_rpc_start": {
            "name": "test_rpc_start",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall"
                ]
            }
        },
        "test_rpc_stop": {
            "name": "test_rpc_stop",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Iterable"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_rpc_stopbuy": {
            "name": "test_rpc_stopbuy",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Iterable"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_rpc_forcesell": {
            "name": "test_rpc_forcesell",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "fee": [],
                "mocker": [],
                "markets": []
            }
        },
        "test_performance_handle": {
            "name": "test_performance_handle",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "ticker": [],
                "limit_buy_order": [
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, Any]"
                ],
                "fee": [],
                "limit_sell_order": [
                    "Dict[str, Tuple[str, str]]",
                    "Dict[str, Any]"
                ],
                "markets": [],
                "mocker": []
            }
        },
        "test_rpc_count": {
            "name": "test_rpc_count",
            "location": 644,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ],
                "ticker": [
                    "Iterable",
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "Iterable",
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "Iterable",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_rpcforcebuy": {
            "name": "test_rpcforcebuy",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "Dict[str, Any]"
                ],
                "ticker": [
                    "Iterable",
                    "unittesmock.MagicMock"
                ],
                "fee": [
                    "Iterable",
                    "unittesmock.MagicMock"
                ],
                "markets": [
                    "Iterable",
                    "unittesmock.MagicMock"
                ],
                "limit_buy_order": [
                    "unittesmock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_rpcforcebuy_stopped": {
            "name": "test_rpcforcebuy_stopped",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "default_conf": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_rpcforcebuy_disabled": {
            "name": "test_rpcforcebuy_disabled",
            "location": 729,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_rpc_whitelist": {
            "name": "test_rpc_whitelist",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "default_conf": []
            }
        },
        "test_rpc_whitelist_dynamic": {
            "name": "test_rpc_whitelist_dynamic",
            "location": 752,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": []
            }
        },
        "test_rpc_blacklist": {
            "name": "test_rpc_blacklist",
            "location": 768,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "default_conf": []
            }
        },
        "test_rpc_edge_disabled": {
            "name": "test_rpc_edge_disabled",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "default_conf": [
                    "tests.hints.CleavageCall",
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "tests.hints.RightAccumulatorCall"
                ]
            }
        },
        "test_rpc_edge_enabled": {
            "name": "test_rpc_edge_enabled",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "edge_conf": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/rpc/test_rpc_apiserver.py": {
        "botclient": {
            "name": "botclient",
            "location": 25,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "dict"
                ],
                "mocker": [
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "client_post": {
            "name": "client_post",
            "location": 40,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "client": [],
                "url": [],
                "data": [
                    "dict[, ]"
                ]
            }
        },
        "client_get": {
            "name": "client_get",
            "location": 47,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "assert_response": {
            "name": "assert_response",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "str",
                    "bytes",
                    "int"
                ],
                "expected_code": [
                    "int",
                    "Tuple",
                    "Dict",
                    "List[int]",
                    "bytes",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "test_api_not_found": {
            "name": "test_api_not_found",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_unauthorized": {
            "name": "test_api_unauthorized",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_stop_workflow": {
            "name": "test_api_stop_workflow",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api__init__": {
            "name": "test_api__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test_api_run": {
            "name": "test_api_run",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "flask.Flask"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "Exception",
                    "str",
                    "Collection[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_api_cleanup": {
            "name": "test_api_cleanup",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "flask.Flask"
                ],
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "caplog": [
                    "flask.Flask",
                    "dict",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "test_api_reloadconf": {
            "name": "test_api_reloadconf",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_stopbuy": {
            "name": "test_api_stopbuy",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_balance": {
            "name": "test_api_balance",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "int",
                    "tests.async_mock.MagicMock",
                    "Optional[Exception]"
                ],
                "rpc_balance": [
                    "tests.async_mock.Mock",
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_api_count": {
            "name": "test_api_count",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "test_api_daily": {
            "name": "test_api_daily",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "test_api_edge_disabled": {
            "name": "test_api_edge_disabled",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "test_api_profit": {
            "name": "test_api_profit",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "limit_buy_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "limit_sell_order": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_api_performance": {
            "name": "test_api_performance",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "ticker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "fee": []
            }
        },
        "test_api_status": {
            "name": "test_api_status",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "test_api_version": {
            "name": "test_api_version",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_blacklist": {
            "name": "test_api_blacklist",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_api_whitelist": {
            "name": "test_api_whitelist",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_api_forcebuy": {
            "name": "test_api_forcebuy",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "Dict[str, Any]"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_api_forcesell": {
            "name": "test_api_forcesell",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "botclient": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "ticker": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "fee": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "markets": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "test_api_balance.mock_ticker": {
            "name": "mock_ticker",
            "location": 225,
            "return": [
                "str",
                "Dict[Text,float]"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "refresh": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/rpc/test_rpc_manager.py": {
        "test__init__": {
            "name": "test__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "logging.Logger"
                ],
                "default_conf": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_init_telegram_disabled": {
            "name": "test_init_telegram_disabled",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "logging.Logger"
                ],
                "default_conf": [
                    "tests.setup.SetupTest"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_init_telegram_enabled": {
            "name": "test_init_telegram_enabled",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "logging.Logger"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_cleanup_telegram_disabled": {
            "name": "test_cleanup_telegram_disabled",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "default_conf": [
                    "int"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_cleanup_telegram_enabled": {
            "name": "test_cleanup_telegram_enabled",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "bool",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_send_msg_telegram_disabled": {
            "name": "test_send_msg_telegram_disabled",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "default_conf": [
                    "int"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "test_send_msg_telegram_enabled": {
            "name": "test_send_msg_telegram_enabled",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[str]",
                    "None"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "test_init_webhook_disabled": {
            "name": "test_init_webhook_disabled",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "logging.Logger"
                ],
                "default_conf": [],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_init_webhook_enabled": {
            "name": "test_init_webhook_enabled",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "logging.Logger"
                ],
                "default_conf": [
                    "tests.setup.SetupTest",
                    "Dict[str, str]"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_send_msg_webhook_CustomMessagetype": {
            "name": "test_send_msg_webhook_CustomMessagetype",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bool",
                    "unittesmock.MagicMock"
                ],
                "default_conf": [
                    "tests.setup.SetupTest",
                    "Dict[str, str]"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_startupmessages_telegram_enabled": {
            "name": "test_startupmessages_telegram_enabled",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "default_conf": [
                    "int",
                    "str"
                ],
                "caplog": [
                    "bool",
                    "str",
                    "Callable[...,None]",
                    "int"
                ]
            }
        },
        "test_init_apiserver_disabled": {
            "name": "test_init_apiserver_disabled",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.setup.SetupTest"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        },
        "test_init_apiserver_enabled": {
            "name": "test_init_apiserver_enabled",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "tests.setup.SetupTest",
                    "Dict[str, str]"
                ],
                "caplog": [
                    "None",
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/rpc/test_rpc_telegram.py": {
        "test__init__": {
            "name": "test__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test_cleanup": {
            "name": "test_cleanup",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_authorized_only": {
            "name": "test_authorized_only",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test_authorized_only_unauthorized": {
            "name": "test_authorized_only_unauthorized",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test_authorized_only_exception": {
            "name": "test_authorized_only_exception",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test_status": {
            "name": "test_status",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": [],
                "fee": [],
                "ticker": [],
                "markets": []
            }
        },
        "test_status_handle": {
            "name": "test_status_handle",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_status_table_handle": {
            "name": "test_status_table_handle",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_daily_handle": {
            "name": "test_daily_handle",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "limit_buy_order": [],
                "fee": [],
                "limit_sell_order": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_daily_wrong_input": {
            "name": "test_daily_wrong_input",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "mocker": []
            }
        },
        "test_profit_handle": {
            "name": "test_profit_handle",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "ticker_sell_up": [],
                "fee": [],
                "limit_buy_order": [],
                "limit_sell_order": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_telegram_balance_handle": {
            "name": "test_telegram_balance_handle",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": [],
                "rpc_balance": []
            }
        },
        "test_balance_handle_empty_response": {
            "name": "test_balance_handle_empty_response",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_balance_handle_empty_response_dry": {
            "name": "test_balance_handle_empty_response_dry",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_balance_handle_too_large_response": {
            "name": "test_balance_handle_too_large_response",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_start_handle": {
            "name": "test_start_handle",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_start_handle_already_running": {
            "name": "test_start_handle_already_running",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_stop_handle": {
            "name": "test_stop_handle",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_stop_handle_already_stopped": {
            "name": "test_stop_handle_already_stopped",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_stopbuy_handle": {
            "name": "test_stopbuy_handle",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_reload_conf_handle": {
            "name": "test_reload_conf_handle",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_forcesell_handle": {
            "name": "test_forcesell_handle",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "ticker_sell_up": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_forcesell_down_handle": {
            "name": "test_forcesell_down_handle",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "ticker_sell_down": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_forcesell_all_handle": {
            "name": "test_forcesell_all_handle",
            "location": 835,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_forcesell_handle_invalid": {
            "name": "test_forcesell_handle_invalid",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_forcebuy_handle": {
            "name": "test_forcebuy_handle",
            "location": 926,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_forcebuy_handle_exception": {
            "name": "test_forcebuy_handle_exception",
            "location": 966,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_performance_handle": {
            "name": "test_performance_handle",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "limit_buy_order": [],
                "limit_sell_order": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_count_handle": {
            "name": "test_count_handle",
            "location": 1027,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "ticker": [],
                "fee": [],
                "markets": [],
                "mocker": []
            }
        },
        "test_whitelist_static": {
            "name": "test_whitelist_static",
            "location": 1067,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_whitelist_dynamic": {
            "name": "test_whitelist_dynamic",
            "location": 1084,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_blacklist_static": {
            "name": "test_blacklist_static",
            "location": 1105,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_edge_disabled": {
            "name": "test_edge_disabled",
            "location": 1133,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_edge_enabled": {
            "name": "test_edge_enabled",
            "location": 1150,
            "return": [
                "None"
            ],
            "arguments": {
                "edge_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_help_handle": {
            "name": "test_help_handle",
            "location": 1173,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_version_handle": {
            "name": "test_version_handle",
            "location": 1189,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "update": [],
                "mocker": []
            }
        },
        "test_send_msg_buy_notification": {
            "name": "test_send_msg_buy_notification",
            "location": 1204,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_send_msg_sell_notification": {
            "name": "test_send_msg_sell_notification",
            "location": 1230,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_send_msg_status_notification": {
            "name": "test_send_msg_status_notification",
            "location": 1294,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_warning_notification": {
            "name": "test_warning_notification",
            "location": 1310,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_custom_notification": {
            "name": "test_custom_notification",
            "location": 1326,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_send_msg_unknown_type": {
            "name": "test_send_msg_unknown_type",
            "location": 1342,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_send_msg_buy_notification_no_fiat": {
            "name": "test_send_msg_buy_notification_no_fiat",
            "location": 1357,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_send_msg_sell_notification_no_fiat": {
            "name": "test_send_msg_sell_notification_no_fiat",
            "location": 1384,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test__send_msg": {
            "name": "test__send_msg",
            "location": 1420,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test__send_msg_network_error": {
            "name": "test__send_msg_network_error",
            "location": 1433,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": []
            }
        },
        "DummyCls.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freqtrade": []
            }
        },
        "DummyCls._init": {
            "name": "_init",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyCls.dummy_handler": {
            "name": "dummy_handler",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyCls.dummy_exception": {
            "name": "dummy_exception",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_telegram_balance_handle.mock_ticker": {
            "name": "mock_ticker",
            "location": 482,
            "return": [
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "symbol": [],
                "refresh": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/rpc/test_rpc_webhook.py": {
        "get_webhook_dict": {
            "name": "get_webhook_dict",
            "location": 14,
            "return": [
                "bool",
                "Dict[Text,Union[bool,Text,dict[Text,Text]]]"
            ],
            "arguments": {}
        },
        "test__init__": {
            "name": "test__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ],
                "default_conf": [
                    "bool"
                ]
            }
        },
        "test_send_msg": {
            "name": "test_send_msg",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": []
            }
        },
        "test_exception_send_msg": {
            "name": "test_exception_send_msg",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [],
                "caplog": [
                    "Dict[str,Any]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "test__send_msg": {
            "name": "test__send_msg",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "mocker": [
                    "int",
                    "str"
                ],
                "caplog": [
                    "Dict",
                    "Exception",
                    "List[str]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/rpc/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/strategy/legacy_strategy.py": {
        "TestStrategyLegacy.populate_indicators": {
            "name": "populate_indicators",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "List[cirq.Qid]",
                    "float"
                ]
            }
        },
        "TestStrategyLegacy.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 206,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestStrategyLegacy.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 222,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/strategy/test_default_strategy.py": {
        "result": {
            "name": "result",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "test_default_strategy_structure": {
            "name": "test_default_strategy_structure",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_strategy": {
            "name": "test_default_strategy",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/strategy/test_interface.py": {
        "test_returns_latest_buy_signal": {
            "name": "test_returns_latest_buy_signal",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "dict"
                ],
                "default_conf": [
                    "int",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "Literal"
                ],
                "ticker_history": [
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "test_returns_latest_sell_signal": {
            "name": "test_returns_latest_sell_signal",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "dict"
                ],
                "default_conf": [
                    "int",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "Literal"
                ],
                "ticker_history": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_get_signal_empty": {
            "name": "test_get_signal_empty",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "str",
                    "Optional[float]",
                    "pandas.DataFrame",
                    "dict",
                    "List[dict]"
                ],
                "mocker": [
                    "bool",
                    "List[bool]",
                    "str"
                ],
                "caplog": [
                    "Exception",
                    "dict",
                    "BaseException",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_signal_exception_valueerror": {
            "name": "test_get_signal_exception_valueerror",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "Callable",
                    "int"
                ],
                "mocker": [
                    "str",
                    "bool",
                    "Union[str, int]",
                    "Callable",
                    "Type"
                ],
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Exception",
                    "logging.FileHandler"
                ],
                "ticker_history": [
                    "Callable",
                    "int"
                ]
            }
        },
        "test_get_signal_empty_dataframe": {
            "name": "test_get_signal_empty_dataframe",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "bool",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity",
                    "str",
                    "int"
                ],
                "mocker": [],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.Logger",
                    "Exception",
                    "Collection[str]",
                    "bool",
                    "logging.LogRecord",
                    "logging.FileHandler"
                ],
                "ticker_history": [
                    "bool",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity",
                    "str",
                    "int"
                ]
            }
        },
        "test_get_signal_old_dataframe": {
            "name": "test_get_signal_old_dataframe",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "Callable"
                ],
                "mocker": [],
                "caplog": [
                    "List[Dict[str, float]]",
                    "logging.LogRecord",
                    "logging.Logger",
                    "Collection[str]",
                    "bool",
                    "str"
                ],
                "ticker_history": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_get_signal_handles_exceptions": {
            "name": "test_get_signal_handles_exceptions",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "default_conf": [
                    "int",
                    "str"
                ]
            }
        },
        "test_tickerdata_to_dataframe": {
            "name": "test_tickerdata_to_dataframe",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "bool",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_min_roi_reached": {
            "name": "test_min_roi_reached",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "pandas.DataFrame"
                ]
            }
        },
        "test_min_roi_reached2": {
            "name": "test_min_roi_reached2",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "pandas.DataFrame"
                ]
            }
        },
        "test_min_roi_reached3": {
            "name": "test_min_roi_reached3",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "fee": [
                    "pandas.DataFrame"
                ]
            }
        },
        "test_analyze_ticker_default": {
            "name": "test_analyze_ticker_default",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "ticker_history": [],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "caplog": [
                    "logging.StreamHandler",
                    "logging.Logger",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "test__analyze_ticker_internal_skip_analyze": {
            "name": "test__analyze_ticker_internal_skip_analyze",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "ticker_history": [
                    "Sequence[Any]",
                    "Iterable[Any]"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_is_pair_locked": {
            "name": "test_is_pair_locked",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [
                    "int",
                    "dict",
                    "Sequence",
                    "bool",
                    "type"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/strategy/test_strategy.py": {
        "test_import_strategy": {
            "name": "test_import_strategy",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "test_search_strategy": {
            "name": "test_search_strategy",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_strategy": {
            "name": "test_load_strategy",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": [],
                "result": [
                    "bool"
                ]
            }
        },
        "test_load_strategy_base64": {
            "name": "test_load_strategy_base64",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "List[int]",
                    "int",
                    "Union[str, float]",
                    "bool"
                ],
                "caplog": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Optional[float]"
                ],
                "default_conf": [
                    "str",
                    "bool",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_load_strategy_invalid_directory": {
            "name": "test_load_strategy_invalid_directory",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ],
                "caplog": [
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "default_conf": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_load_not_found_strategy": {
            "name": "test_load_not_found_strategy",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "default_conf": []
            }
        },
        "test_load_staticmethod_importerror": {
            "name": "test_load_staticmethod_importerror",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable"
                ],
                "caplog": [
                    "str"
                ],
                "default_conf": [
                    "str"
                ]
            }
        },
        "test_strategy": {
            "name": "test_strategy",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Iterable[Tuple[int, int]]"
                ],
                "default_conf": [
                    "dict",
                    "Optional[str]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "test_strategy_override_minimal_roi": {
            "name": "test_strategy_override_minimal_roi",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]",
                    "dict"
                ]
            }
        },
        "test_strategy_override_stoploss": {
            "name": "test_strategy_override_stoploss",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]",
                    "dict"
                ]
            }
        },
        "test_strategy_override_trailing_stop": {
            "name": "test_strategy_override_trailing_stop",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_strategy_override_trailing_stop_positive": {
            "name": "test_strategy_override_trailing_stop_positive",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]"
                ],
                "default_conf": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]",
                    "dict"
                ]
            }
        },
        "test_strategy_override_ticker_interval": {
            "name": "test_strategy_override_ticker_interval",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]",
                    "dict"
                ]
            }
        },
        "test_strategy_override_process_only_new_candles": {
            "name": "test_strategy_override_process_only_new_candles",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "default_conf": []
            }
        },
        "test_strategy_override_order_types": {
            "name": "test_strategy_override_order_types",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "logging.LogRecord"
                ],
                "default_conf": [
                    "IO[str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_strategy_override_order_tif": {
            "name": "test_strategy_override_order_tif",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "logging.LogRecord",
                    "Optional[logging.Logger]",
                    "List[Dict[str, float]]"
                ],
                "default_conf": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "test_strategy_override_use_sell_signal": {
            "name": "test_strategy_override_use_sell_signal",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "default_conf": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_strategy_override_use_sell_profit_only": {
            "name": "test_strategy_override_use_sell_profit_only",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "default_conf": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_deprecate_populate_indicators": {
            "name": "test_deprecate_populate_indicators",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ],
                "default_conf": [
                    "dict",
                    "Optional[str]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "test_call_deprecated_function": {
            "name": "test_call_deprecated_function",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "dict",
                    "Iterable[Tuple[int, int]]",
                    "List[str]",
                    "int"
                ],
                "monkeypatch": [
                    "str",
                    "int",
                    "List[str]",
                    "dict"
                ],
                "default_conf": [
                    "dict",
                    "str",
                    "bool",
                    "Optional[Callable[[Dict], bool]]"
                ]
            }
        },
        "test_strategy_interface_versioning": {
            "name": "test_strategy_interface_versioning",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "List[str]",
                    "int",
                    "dict",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "monkeypatch": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "default_conf": [
                    "dict",
                    "bool",
                    "str",
                    "Optional[Callable[[Dict], bool]]",
                    "Dict[str, Union[str, int]]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/tests/strategy/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/vendor/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/freqtrade/vendor/qtpylib/indicators.py": {
        "numpy_rolling_window": {
            "name": "numpy_rolling_window",
            "location": 41,
            "return": [
                "numpy.ndarray",
                "bool",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict",
                    "numpy.ndarray",
                    "Dict[str, Any]"
                ],
                "window": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "jgikbase.idmapping.core.user.User.name"
                ]
            }
        },
        "numpy_rolling_series": {
            "name": "numpy_rolling_series",
            "location": 47,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "numpy_rolling_mean": {
            "name": "numpy_rolling_mean",
            "location": 64,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "bytes"
                ],
                "window": [
                    "str",
                    "int",
                    "bytes"
                ],
                "as_source": [
                    "bool",
                    "List",
                    "Optional[bytes]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "numpy_rolling_std": {
            "name": "numpy_rolling_std",
            "location": 69,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "bytes"
                ],
                "window": [
                    "str",
                    "int",
                    "bytes"
                ],
                "as_source": [
                    "bool",
                    "List",
                    "Optional[bytes]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 76,
            "return": [
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "str",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "list",
                    "List[int]",
                    "Optional[Union[float, Any]]",
                    "pandas.DataFrame"
                ],
                "start": [
                    "Text",
                    "int",
                    "str",
                    "List[datetime.date]",
                    "Optional[Union[float,Any]]",
                    "Sequence[T]",
                    "numpy.ndarray"
                ],
                "end": [
                    "Text",
                    "int",
                    "bool",
                    "Iterable[Entity]",
                    "Tuple[str]"
                ]
            }
        },
        "heikinashi": {
            "name": "heikinashi",
            "location": 110,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "bars": [
                    "list",
                    "int",
                    "bool",
                    "bytes",
                    "numpy.ma.MaskedArray"
                ]
            }
        },
        "tdi": {
            "name": "tdi",
            "location": 132,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "series": [
                    "Optional[str]"
                ],
                "rsi_lookback": [
                    "str",
                    "int"
                ],
                "rsi_smooth_len": [
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "pandas.DataFrame"
                ],
                "rsi_signal_len": [
                    "int",
                    "Dict[str,Any]",
                    "Dict",
                    "pandas.DataFrame"
                ],
                "bb_lookback": [
                    "int",
                    "pandas._ArrayLike",
                    "bool",
                    "Dict",
                    "str",
                    "Iterable[T]"
                ],
                "bb_std": [
                    "float",
                    "pandas._ArrayLike",
                    "bool",
                    "Dict",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "awesome_oscillator": {
            "name": "awesome_oscillator",
            "location": 153,
            "return": [
                "str",
                "List[dict]",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "df": [
                    "List[int]",
                    "list"
                ],
                "weighted": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ],
                "fast": [
                    "int",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "slow": [
                    "int",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "float",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "nans": {
            "name": "nans",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "typical_price": {
            "name": "typical_price",
            "location": 175,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "Callable[[None], bool]",
                    "list"
                ]
            }
        },
        "mid_price": {
            "name": "mid_price",
            "location": 182,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "Callable[[None], bool]",
                    "list"
                ]
            }
        },
        "ibs": {
            "name": "ibs",
            "location": 189,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "bars": [
                    "float",
                    "list",
                    "bool",
                    "List[numpy.array]"
                ]
            }
        },
        "true_range": {
            "name": "true_range",
            "location": 198,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "bars": [
                    "str",
                    "int",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "atr": {
            "name": "atr",
            "location": 208,
            "return": [
                "str",
                "bool",
                "bytes",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "bars": [
                    "List[datetime.time]",
                    "int",
                    "numpy.ndarray",
                    "List[str]",
                    "float"
                ],
                "window": [
                    "int",
                    "float",
                    "starfish.core.morphology.binary_mask.BinaryMaskCollection"
                ],
                "exp": [
                    "bool",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "Optional[List]",
                    "List",
                    "int"
                ]
            }
        },
        "crossed": {
            "name": "crossed",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series1": [
                    "numpy.array",
                    "List['cirq.Qid']",
                    "Optional[numpy.ndarray]"
                ],
                "series2": [
                    "float",
                    "int"
                ],
                "direction": [
                    "None",
                    "Optional[float]",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Optional[str]"
                ]
            }
        },
        "crossed_above": {
            "name": "crossed_above",
            "location": 242,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "series2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "crossed_below": {
            "name": "crossed_below",
            "location": 246,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "series2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "rolling_std": {
            "name": "rolling_std",
            "location": 252,
            "return": [
                "str",
                "Dict[str, Any]",
                "numpy.ndarray",
                "List[dict]"
            ],
            "arguments": {
                "series": [
                    "List[bytes]",
                    "List[str]",
                    "Union[int, float]",
                    "numpy.ndarray"
                ],
                "window": [
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "int"
                ],
                "min_periods": [
                    "None",
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "bool",
                    "starfish.core.types.SpotAttributes"
                ]
            }
        },
        "rolling_mean": {
            "name": "rolling_mean",
            "location": 265,
            "return": [
                "str",
                "Dict[str, Any]",
                "numpy.ndarray",
                "List[dict]"
            ],
            "arguments": {
                "series": [
                    "List[bytes]",
                    "List[str]",
                    "Union[int, float]",
                    "numpy.ndarray"
                ],
                "window": [
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "int"
                ],
                "min_periods": [
                    "None",
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "bool",
                    "starfish.core.types.SpotAttributes"
                ]
            }
        },
        "rolling_min": {
            "name": "rolling_min",
            "location": 278,
            "return": [
                "dict",
                "numpy.ndarray",
                "Optional[numpy.dtype]"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "str",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "Optional[Callable]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ]
            }
        },
        "rolling_max": {
            "name": "rolling_max",
            "location": 288,
            "return": [
                "dict",
                "numpy.ndarray",
                "Optional[numpy.dtype]"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "str",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "Optional[Callable]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ]
            }
        },
        "rolling_weighted_mean": {
            "name": "rolling_weighted_mean",
            "location": 298,
            "return": [
                "Callable",
                "bytes",
                "BinaryIO",
                "List[List[int]]"
            ],
            "arguments": {
                "series": [
                    "float",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "window": [
                    "int",
                    "numpy.ndarray",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]"
                ],
                "min_periods": [
                    "None",
                    "int",
                    "numpy.ndarray",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "hull_moving_average": {
            "name": "hull_moving_average",
            "location": 308,
            "return": [
                "bool"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[int]",
                    "Callable"
                ],
                "window": [
                    "int",
                    "Optional[Sequence[int]]",
                    "bool",
                    "Union[int,float]",
                    "starfish.core.imagestack.imagestack.ImageStack"
                ],
                "min_periods": [
                    "None",
                    "Optional[Sequence[int]]",
                    "int",
                    "bool",
                    "Union[int,float]",
                    "starfish.core.imagestack.imagestack.ImageStack"
                ]
            }
        },
        "sma": {
            "name": "sma",
            "location": 317,
            "return": [
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "\"Rational\"",
                    "Optional[Exception]",
                    "Optional[int]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Rational",
                    "Optional[Exception]",
                    "Optional[int]"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Rational",
                    "Optional[Exception]",
                    "Optional[int]"
                ]
            }
        },
        "wma": {
            "name": "wma",
            "location": 323,
            "return": [
                "int",
                "bytes",
                "dict",
                "Callable[[bytes], bytes]"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "Optional[int]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "hma": {
            "name": "hma",
            "location": 329,
            "return": [
                "int",
                "bytes",
                "dict",
                "Callable[[bytes], bytes]"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "Optional[int]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "vwap": {
            "name": "vwap",
            "location": 335,
            "return": [
                "str",
                "List[dict]",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "bars": [
                    "str"
                ]
            }
        },
        "rolling_vwap": {
            "name": "rolling_vwap",
            "location": 350,
            "return": [
                "str",
                "List[dict]",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "bars": [],
                "window": [
                    "int",
                    "Optional[str]",
                    "Tuple[int,int]",
                    "object",
                    "Dict[str,Any]"
                ],
                "min_periods": [
                    "None",
                    "Optional[str]",
                    "Tuple[int,int]",
                    "object",
                    "Dict[str,Any]"
                ]
            }
        },
        "rsi": {
            "name": "rsi",
            "location": 371,
            "return": [
                "str",
                "List[dict]",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "series": [
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "List[Tuple[int, int]]"
                ],
                "window": [
                    "int",
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "numpy.ndarray"
                ]
            }
        },
        "macd": {
            "name": "macd",
            "location": 406,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "series": [
                    "str",
                    "int"
                ],
                "fast": [
                    "int",
                    "Dict",
                    "Tuple[float,float]",
                    "numpy.ndarray"
                ],
                "slow": [
                    "int",
                    "Dict",
                    "Tuple[float,float]",
                    "numpy.ndarray"
                ],
                "smooth": [
                    "int",
                    "float",
                    "Tuple[float,float]"
                ]
            }
        },
        "bollinger_bands": {
            "name": "bollinger_bands",
            "location": 426,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "series": [
                    "str",
                    "bool",
                    "float",
                    "Optional[List[str]]",
                    "Callable",
                    "List[str]",
                    "Optional[Dict[str, str]]"
                ],
                "window": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[Exception]",
                    "Callable",
                    "numpy.ndarray"
                ],
                "stds": [
                    "int",
                    "float",
                    "bool",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "weighted_bollinger_bands": {
            "name": "weighted_bollinger_bands",
            "location": 441,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "series": [
                    "int",
                    "float"
                ],
                "window": [
                    "int",
                    "float",
                    "Optional[Callable]",
                    "bool"
                ],
                "stds": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "returns": {
            "name": "returns",
            "location": 456,
            "return": [
                "List[dict]",
                "Dict[str, Any]",
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "series": [
                    "numpy.ndarray",
                    "Callable[[None], bool]",
                    "float",
                    "list"
                ]
            }
        },
        "log_returns": {
            "name": "log_returns",
            "location": 468,
            "return": [
                "str",
                "List[dict]",
                "float",
                "numpy.ndarray",
                "int",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "series": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "edp.gui.components.base.BaseMainWindowSection",
                    "Iterable[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "implied_volatility": {
            "name": "implied_volatility",
            "location": 480,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "series": [
                    "float",
                    "Tuple['cirq.Qid']",
                    "int"
                ],
                "window": [
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "pandas.DataFrame",
                    "List[Dict]",
                    "Optional[float]"
                ]
            }
        },
        "keltner_channel": {
            "name": "keltner_channel",
            "location": 493,
            "return": [
                "int",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "Callable"
                ],
                "window": [
                    "int",
                    "bool",
                    "float",
                    "Dict[str,Any]"
                ],
                "atrs": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "roc": {
            "name": "roc",
            "location": 509,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Dict[str, Any]",
                    "Union[numpy.ndarray, xarray.DataArray]",
                    "bool"
                ],
                "window": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Callable[[Any],None]",
                    "pandas.DataFrame",
                    "List[Dict]"
                ]
            }
        },
        "cci": {
            "name": "cci",
            "location": 519,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "float",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "bytes",
                    "int",
                    "shapely.geometry.base.BaseGeometry"
                ],
                "window": [
                    "int",
                    "List[datetime.time]",
                    "numpy.ndarray",
                    "List[str]",
                    "float"
                ]
            }
        },
        "stoch": {
            "name": "stoch",
            "location": 531,
            "return": [
                "str",
                "Optional[int]",
                "numpy.ndarray",
                "bool",
                "int"
            ],
            "arguments": {
                "df": [
                    "numpy.ndarray",
                    "pd.DataFrame",
                    "int",
                    "Optional[starfish.core.imagestack.imagestack.ImageStack]"
                ],
                "window": [
                    "bool",
                    "int"
                ],
                "d": [
                    "int",
                    "bool",
                    "bytes",
                    "float"
                ],
                "k": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "numpy.ndarray"
                ],
                "fast": [
                    "bool",
                    "float",
                    "Tuple",
                    "int",
                    "List[float]"
                ]
            }
        },
        "zlma": {
            "name": "zlma",
            "location": 559,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series": [
                    "List[datetime.time]",
                    "int",
                    "numpy.ndarray",
                    "List[str]",
                    "float"
                ],
                "window": [
                    "int",
                    "bool",
                    "Optional[Union[int,str]]",
                    "Union[numpy.ndarray,numpy.void]",
                    "Optional[str]",
                    "Optional[numpy.ndarray]",
                    "static_frame.core.util.DtypesSpecifier",
                    "numpy.ndarray"
                ],
                "min_periods": [
                    "None",
                    "bool",
                    "Optional[Union[int,str]]",
                    "Union[numpy.ndarray,numpy.void]",
                    "Optional[str]",
                    "Optional[numpy.ndarray]",
                    "static_frame.core.util.DtypesSpecifier",
                    "numpy.ndarray"
                ],
                "kind": [
                    "Text",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "Optional[List]",
                    "List",
                    "int"
                ]
            }
        },
        "zlema": {
            "name": "zlema",
            "location": 575,
            "return": [
                "List[str]",
                "int",
                "str",
                "Union[numpy.ndarray, numpy.void]"
            ],
            "arguments": {
                "series": [
                    "float",
                    "bool",
                    "str"
                ],
                "window": [
                    "float",
                    "bool",
                    "str"
                ],
                "min_periods": [
                    "None",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "zlsma": {
            "name": "zlsma",
            "location": 579,
            "return": [
                "List[str]",
                "int",
                "str",
                "Union[numpy.ndarray, numpy.void]"
            ],
            "arguments": {
                "series": [
                    "float",
                    "bool",
                    "str"
                ],
                "window": [
                    "float",
                    "bool",
                    "str"
                ],
                "min_periods": [
                    "None",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "zlhma": {
            "name": "zlhma",
            "location": 583,
            "return": [
                "List[str]",
                "int",
                "str",
                "Union[numpy.ndarray, numpy.void]"
            ],
            "arguments": {
                "series": [
                    "float",
                    "bool",
                    "str"
                ],
                "window": [
                    "float",
                    "bool",
                    "str"
                ],
                "min_periods": [
                    "None",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "zscore": {
            "name": "zscore",
            "location": 589,
            "return": [
                "int",
                "bool",
                "Tuple[int]",
                "Hashable"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[float]"
                ],
                "window": [
                    "int",
                    "bool",
                    "List",
                    "str"
                ],
                "stds": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "Optional[str]"
                ],
                "col": [
                    "Text",
                    "int",
                    "bool",
                    "Dict[str,Any]",
                    "Optional[float]"
                ]
            }
        },
        "pvt": {
            "name": "pvt",
            "location": 598,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bars": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "chopiness": {
            "name": "chopiness",
            "location": 605,
            "return": [
                "BaseException",
                "aiocometd.transports.base.Payload",
                "str"
            ],
            "arguments": {
                "bars": [
                    "bool",
                    "Tuple[int]",
                    "Dict[str, int]",
                    "int"
                ],
                "window": [
                    "int",
                    "Dict[str,int]"
                ]
            }
        },
        "numpy_rolling_series.func_wrapper": {
            "name": "func_wrapper",
            "location": 48,
            "return": [
                "List[str]",
                "bool",
                "str",
                "starfish.core.imagestack.parser.TileKey"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "dict",
                    "list",
                    "str"
                ],
                "window": [
                    "list",
                    "Optional[List[str]]",
                    "tuple",
                    "Dict[str, Any]"
                ],
                "as_source": [
                    "bool",
                    "str",
                    "List[dict]",
                    "Type[object]",
                    "Type",
                    "Dict"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/freqtrade/vendor/qtpylib/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/scripts/download_backtest_data.py": {},
    "AI-Scalpel-Trading-Bot-master/scripts/get_market_pairs.py": {
        "style": {
            "name": "style",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "style": [
                    "str"
                ]
            }
        },
        "green": {
            "name": "green",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "blue": {
            "name": "blue",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "yellow": {
            "name": "yellow",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "red": {
            "name": "red",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "pink": {
            "name": "pink",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "bold": {
            "name": "bold",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "underline": {
            "name": "underline",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_supported_exchanges": {
            "name": "print_supported_exchanges",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AI-Scalpel-Trading-Bot-master/scripts/plot_dataframe.py": {},
    "AI-Scalpel-Trading-Bot-master/scripts/plot_profit.py": {},
    "AI-Scalpel-Trading-Bot-master/scripts/rest_client.py": {
        "add_arguments": {
            "name": "add_arguments",
            "location": 190,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 220,
            "return": [
                "Dict",
                "Optional[dict]",
                "bool",
                "str",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "configfile": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "print_commands": {
            "name": "print_commands",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "FtRestClient.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serverurl": [
                    "str",
                    "bytes",
                    "int"
                ],
                "username": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "password": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ]
            }
        },
        "FtRestClient._call": {
            "name": "_call",
            "location": 35,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict"
                ],
                "apipath": [
                    "str",
                    "bool",
                    "int"
                ],
                "params": [
                    "Dict",
                    "None",
                    "bool",
                    "str",
                    "int",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "files": [
                    "str",
                    "List[str]",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "FtRestClient._get": {
            "name": "_get",
            "location": 59,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "apipath": [
                    "bytes",
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ],
                "params": [
                    "bytes",
                    "None",
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "FtRestClient._post": {
            "name": "_post",
            "location": 62,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "apipath": [
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "params": [
                    "Dict",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "data": [
                    "Dict",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "FtRestClient.start": {
            "name": "start",
            "location": 65,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.stop": {
            "name": "stop",
            "location": 72,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.stopbuy": {
            "name": "stopbuy",
            "location": 79,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.reload_conf": {
            "name": "reload_conf",
            "location": 87,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.balance": {
            "name": "balance",
            "location": 94,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.count": {
            "name": "count",
            "location": 101,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.daily": {
            "name": "daily",
            "location": 108,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "days": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "FtRestClient.edge": {
            "name": "edge",
            "location": 115,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.profit": {
            "name": "profit",
            "location": 122,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.performance": {
            "name": "performance",
            "location": 129,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.status": {
            "name": "status",
            "location": 136,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.version": {
            "name": "version",
            "location": 143,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.whitelist": {
            "name": "whitelist",
            "location": 150,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.blacklist": {
            "name": "blacklist",
            "location": 157,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FtRestClient.forcebuy": {
            "name": "forcebuy",
            "location": 168,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ],
                "price": [
                    "str",
                    "None"
                ]
            }
        },
        "FtRestClient.forcesell": {
            "name": "forcesell",
            "location": 180,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "tradeid": [
                    "str",
                    "float",
                    "bytes",
                    "Dict",
                    "IO[str]",
                    "IO"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/user_data/hyperopts/sample_hyperopt.py": {
        "SampleHyperOpts.populate_indicators": {
            "name": "populate_indicators",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SampleHyperOpts.buy_strategy_generator": {
            "name": "buy_strategy_generator",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SampleHyperOpts.indicator_space": {
            "name": "indicator_space",
            "location": 110,
            "return": [
                "List[Union[Integer,Categorical]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "SampleHyperOpts.sell_strategy_generator": {
            "name": "sell_strategy_generator",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SampleHyperOpts.sell_indicator_space": {
            "name": "sell_indicator_space",
            "location": 170,
            "return": [
                "List[Union[Integer,Categorical]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "SampleHyperOpts.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 188,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "int",
                    "Callable"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SampleHyperOpts.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 205,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "int",
                    "Callable"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SampleHyperOpts.buy_strategy_generator.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "SampleHyperOpts.sell_strategy_generator.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/user_data/hyperopts/sample_hyperopt_advanced.py": {
        "AdvancedSampleHyperOpts.populate_indicators": {
            "name": "populate_indicators",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AdvancedSampleHyperOpts.buy_strategy_generator": {
            "name": "buy_strategy_generator",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AdvancedSampleHyperOpts.indicator_space": {
            "name": "indicator_space",
            "location": 99,
            "return": [
                "List[Union[Integer,Categorical]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "AdvancedSampleHyperOpts.sell_strategy_generator": {
            "name": "sell_strategy_generator",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AdvancedSampleHyperOpts.sell_indicator_space": {
            "name": "sell_indicator_space",
            "location": 159,
            "return": [
                "List[Union[Integer,Categorical]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "AdvancedSampleHyperOpts.generate_roi_table": {
            "name": "generate_roi_table",
            "location": 178,
            "return": [
                "Dict[int,int]",
                "float",
                "Type",
                "str",
                "List",
                "Optional[List[str]]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "AdvancedSampleHyperOpts.roi_space": {
            "name": "roi_space",
            "location": 199,
            "return": [
                "List[Union[Integer,Real]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "AdvancedSampleHyperOpts.stoploss_space": {
            "name": "stoploss_space",
            "location": 219,
            "return": [
                "List[Real]",
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {}
        },
        "AdvancedSampleHyperOpts.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AdvancedSampleHyperOpts.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 247,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AdvancedSampleHyperOpts.buy_strategy_generator.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 61,
            "return": [],
            "arguments": {
                "dataframe": [],
                "metadata": []
            }
        },
        "AdvancedSampleHyperOpts.sell_strategy_generator.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 120,
            "return": [],
            "arguments": {
                "dataframe": [],
                "metadata": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/user_data/hyperopts/sample_hyperopt_loss.py": {
        "SampleHyperOptLoss.hyperopt_loss_function": {
            "name": "hyperopt_loss_function",
            "location": 34,
            "return": [
                "float"
            ],
            "arguments": {
                "results": [],
                "trade_count": [],
                "min_date": [],
                "max_date": []
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/user_data/hyperopts/__init__.py": {},
    "AI-Scalpel-Trading-Bot-master/user_data/strategies/sample_strategy.py": {
        "SampleStrategy.informative_pairs": {
            "name": "informative_pairs",
            "location": 77,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleStrategy.populate_indicators": {
            "name": "populate_indicators",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "List['cirq.Qid']",
                    "float"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SampleStrategy.populate_buy_trend": {
            "name": "populate_buy_trend",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SampleStrategy.populate_sell_trend": {
            "name": "populate_sell_trend",
            "location": 289,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "int",
                    "Callable",
                    "str"
                ],
                "metadata": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "AI-Scalpel-Trading-Bot-master/user_data/strategies/__init__.py": {}
}
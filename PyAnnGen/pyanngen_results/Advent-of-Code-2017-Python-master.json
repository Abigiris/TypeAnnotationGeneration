{
    "Advent-of-Code-2017-Python-master/adventofcode/day1/day1.py": {
        "day1": {
            "name": "day1",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "str"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day10/day10.py": {
        "wrap_len": {
            "name": "wrap_len",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "list_like": [
                    "Sized"
                ],
                "i": [
                    "int"
                ],
                "inc": [
                    "int"
                ]
            }
        },
        "knot_hash_round": {
            "name": "knot_hash_round",
            "location": 13,
            "return": [
                "Tuple[(List[int], int, int)]"
            ],
            "arguments": {
                "lengths": [
                    "List[int]"
                ],
                "string": [
                    "List[int]"
                ],
                "i": [
                    "int"
                ],
                "skip_size": [
                    "int"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "str"
                ],
                "string_len": [
                    "int"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "str"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day11/day11.py": {
        "dist": {
            "name": "dist",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "path": [
                    "List[str]"
                ]
            }
        },
        "day11": {
            "name": "day11",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "str"
                ]
            }
        },
        "dist.replace_pair": {
            "name": "replace_pair",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "d0": [
                    "int",
                    "Sequence[Any]",
                    "str"
                ],
                "d1": [
                    "int",
                    "Sequence[Any]",
                    "str"
                ],
                "replace": [
                    "None",
                    "Optional[str]",
                    "Optional[Tuple[int, int]]",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day12/day12.py": {
        "day12": {
            "name": "day12",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "List[str]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day13/day13.py": {
        "day13": {
            "name": "day13",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "List[str]"
                ]
            }
        },
        "day13.parse_line": {
            "name": "parse_line",
            "location": 8,
            "return": [
                "tuple[]",
                "bytes",
                "float",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "day13.caught": {
            "name": "caught",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "delay": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day14/day14.py": {
        "wrap_len": {
            "name": "wrap_len",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "sized": [
                    "Sized"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "knot_hash_round": {
            "name": "knot_hash_round",
            "location": 15,
            "return": [
                "Tuple[(List[int], int, int)]"
            ],
            "arguments": {
                "lengths": [
                    "List[int]"
                ],
                "string": [
                    "List[int]"
                ],
                "i": [
                    "int"
                ],
                "skip_size": [
                    "int"
                ]
            }
        },
        "knot_hash": {
            "name": "knot_hash",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "inp": [
                    "str"
                ]
            }
        },
        "hex_to_bin": {
            "name": "hex_to_bin",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "hex_": [
                    "str"
                ]
            }
        },
        "day14": {
            "name": "day14",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "str"
                ]
            }
        },
        "day14.remove_adjacent": {
            "name": "remove_adjacent",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[int]"
                ],
                "y": [
                    "int"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day15/day15.py": {
        "gen": {
            "name": "gen",
            "location": 8,
            "return": [
                "",
                "typing.Generator[typing.Union[float,int]]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "factor": [
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "multiple_of": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "day15": {
            "name": "day15",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "typing.Iterator",
                    "int",
                    "str",
                    "Iterable[Any]",
                    "Iterator[Any]",
                    "float",
                    "Iterable[T]",
                    "Union[int, float]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day16/day16.py": {
        "dance": {
            "name": "dance",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "programs": [
                    "List[str]"
                ],
                "steps": [
                    "List[str]"
                ]
            }
        },
        "day16": {
            "name": "day16",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "str"
                ],
                "programs_num": [
                    "int"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day17/day17.py": {
        "wrap_len": {
            "name": "wrap_len",
            "location": 7,
            "return": [
                "int",
                "str",
                "List[dict]",
                "float",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "len_": [
                    "int",
                    "Sequence[Any]"
                ],
                "i": [
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "day17": {
            "name": "day17",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "input_": [
                    "int",
                    "List[str]",
                    "Tuple[int]",
                    "str",
                    "bool",
                    "tuple"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day18/day18.py": {
        "part1": {
            "name": "part1",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "day18": {
            "name": "day18",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "part1.value": {
            "name": "value",
            "location": 10,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ]
            }
        },
        "Program.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "List[str]"
                ],
                "p": [
                    "int"
                ]
            }
        },
        "Program._value": {
            "name": "_value",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Program.extend_queue": {
            "name": "extend_queue",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Iterable"
                ]
            }
        },
        "Program.run_until_wait": {
            "name": "run_until_wait",
            "location": 60,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.empty_queue": {
            "name": "empty_queue",
            "location": 91,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.send_count": {
            "name": "send_count",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day19/day19.py": {
        "move": {
            "name": "move",
            "location": 6,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "d": [
                    "str"
                ],
                "r": [
                    "int"
                ],
                "c": [
                    "int"
                ]
            }
        },
        "valid_path": {
            "name": "valid_path",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "List[List[str]]"
                ],
                "r": [
                    "int"
                ],
                "c": [
                    "int"
                ]
            }
        },
        "day19": {
            "name": "day19",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day2/day2.py": {
        "day2": {
            "name": "day2",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "List[str]"
                ]
            }
        },
        "day2.parse_line": {
            "name": "parse_line",
            "location": 18,
            "return": [
                "list[]",
                "str",
                "List[Dict]",
                "List[int]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "float",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day20/day20.py": {
        "vector": {
            "name": "vector",
            "location": 11,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "str_": [
                    "str"
                ]
            }
        },
        "day20": {
            "name": "day20",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "Particle.move": {
            "name": "move",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Particle.id": {
            "name": "id",
            "location": 37,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Particle.position": {
            "name": "position",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Particle.dist": {
            "name": "dist",
            "location": 45,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Particle.from_line": {
            "name": "from_line",
            "location": 50,
            "return": [
                "Particle"
            ],
            "arguments": {
                "cls": [
                    "Type[_TParticle]"
                ],
                "id_": [
                    "int"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day21/day21.py": {
        "expand": {
            "name": "expand",
            "location": 75,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "rules": [
                    "Rules"
                ],
                "pattern": [
                    "List[List[str]]"
                ],
                "block_size": [
                    "int"
                ]
            }
        },
        "day21": {
            "name": "day21",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ],
                "iterations": [
                    "int"
                ]
            }
        },
        "Rules.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "Dict[(Tuple[(Tuple[(str, ...)], ...)], Tuple[(Tuple[(str, ...)], ...)])]"
                ]
            }
        },
        "Rules.__getitem__": {
            "name": "__getitem__",
            "location": 15,
            "return": [
                "Tuple[(Tuple[(str, ...)], ...)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "List[List[str]]"
                ]
            }
        },
        "Rules.pattern": {
            "name": "pattern",
            "location": 19,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "str_": [
                    "str"
                ]
            }
        },
        "Rules.frozen": {
            "name": "frozen",
            "location": 23,
            "return": [
                "Tuple[(Tuple[(str, ...)], ...)]"
            ],
            "arguments": {
                "pattern": [
                    "List[List[str]]"
                ]
            }
        },
        "Rules.unfrozen": {
            "name": "unfrozen",
            "location": 27,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "pattern": [
                    "Tuple[(Tuple[(str, ...)], ...)]"
                ]
            }
        },
        "Rules.flip_x": {
            "name": "flip_x",
            "location": 31,
            "return": [
                "Tuple[(Tuple[(str, ...)], ...)]"
            ],
            "arguments": {
                "pattern": [
                    "Tuple[(Tuple[(str, ...)], ...)]"
                ]
            }
        },
        "Rules.flip_y": {
            "name": "flip_y",
            "location": 38,
            "return": [
                "Tuple[(Tuple[(str, ...)], ...)]"
            ],
            "arguments": {
                "pattern": [
                    "Tuple[(Tuple[(str, ...)], ...)]"
                ]
            }
        },
        "Rules.transpose": {
            "name": "transpose",
            "location": 46,
            "return": [
                "Tuple[(Tuple[(str, ...)], ...)]"
            ],
            "arguments": {
                "pattern": [
                    "Tuple[(Tuple[(str, ...)], ...)]"
                ]
            }
        },
        "Rules.rotate": {
            "name": "rotate",
            "location": 54,
            "return": [
                "Tuple[(Tuple[(str, ...)], ...)]"
            ],
            "arguments": {
                "pattern": [
                    "Tuple[(Tuple[(str, ...)], ...)]"
                ]
            }
        },
        "Rules.from_input": {
            "name": "from_input",
            "location": 59,
            "return": [
                "Rules"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRules]"
                ],
                "input_": [
                    "List[str]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day22/day22.py": {
        "part1": {
            "name": "part1",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "day22": {
            "name": "day22",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day23/day23.py": {
        "part1": {
            "name": "part1",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "day23": {
            "name": "day23",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        },
        "part1.value": {
            "name": "value",
            "location": 10,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day24/day24.py": {
        "get_combinations": {
            "name": "get_combinations",
            "location": 9,
            "return": [
                "Generator[(Tuple[(int, ...)], None, None)]"
            ],
            "arguments": {
                "starts_with": [
                    "int"
                ],
                "parts": [
                    "Set[Tuple[(int, int)]]"
                ]
            }
        },
        "day24": {
            "name": "day24",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "input_": [
                    "List[str]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day25/day25.py": {
        "day25": {
            "name": "day25",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day3/day3.py": {
        "day3": {
            "name": "day3",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [
                    "int"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day4/day4.py": {
        "day4": {
            "name": "day4",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "List[str]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day5/day5.py": {
        "day5": {
            "name": "day5",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "List[str]"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "jumps": [
                    "List[int]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "jumps": [
                    "List[int]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day6/day6.py": {
        "day6": {
            "name": "day6",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "inp": [
                    "str"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day7/day7.py": {
        "day7": {
            "name": "day7",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "List[str]"
                ]
            }
        },
        "day7.parse_line": {
            "name": "parse_line",
            "location": 23,
            "return": [
                "tuple[tuple[int]]",
                "str",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "day7.weight": {
            "name": "weight",
            "location": 39,
            "return": [
                "str",
                "Sequence['cirq.Qid']",
                "Sequence[str]",
                "Mapping[str, Any]",
                "Union[List[str], str]",
                "Tuple[int, int]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "day7.balanced_weight": {
            "name": "balanced_weight",
            "location": 43,
            "return": [
                "tuple[bool]",
                "tuple[]",
                "Dict[str, List[str]]",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day8/day8.py": {
        "day8": {
            "name": "day8",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "List[str]"
                ]
            }
        }
    },
    "Advent-of-Code-2017-Python-master/adventofcode/day9/day9.py": {
        "day9": {
            "name": "day9",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "str"
                ]
            }
        }
    }
}
{
    "Ann-master/src/backend/setup.py": {},
    "Ann-master/src/backend/qaweb/app.py": {
        "read_config": {
            "name": "read_config",
            "location": 24,
            "return": [
                "str",
                "dict",
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Mapping[str, Any]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "Callable[[str],None]",
                    "Sequence[str]"
                ]
            }
        },
        "setup_routes": {
            "name": "setup_routes",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application"
                ]
            }
        },
        "start_app": {
            "name": "start_app",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "port": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "socket_path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Ann-master/src/backend/qaweb/connectors.py": {
        "setup_connectors": {
            "name": "setup_connectors",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application"
                ]
            }
        },
        "BaseConnector.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "str",
                    "int"
                ],
                "read_timeout": [
                    "bool",
                    "Optional[int]",
                    "None"
                ],
                "conn_timeout": [
                    "float"
                ]
            }
        },
        "SaaSConnector.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaaSConnector.get_wikipage": {
            "name": "get_wikipage",
            "location": 50,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "float"
                ]
            }
        },
        "RedisConnector.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "float",
                    "Tuple",
                    "bool"
                ],
                "port": [
                    "str",
                    "int",
                    "float",
                    "Tuple",
                    "bool"
                ],
                "master_name": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "NetConnector.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ann-master/src/backend/qaweb/custom_prepro.py": {
        "CustomPrepro.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta_file": [
                    "str",
                    "Text"
                ]
            }
        },
        "CustomPrepro.prepro": {
            "name": "prepro",
            "location": 28,
            "return": [
                "str",
                "Dict",
                "Optional[float]",
                "bool",
                "KeysView",
                "Dict[str,str]",
                "List[Optional[Any]]",
                "List[tuple[Union[Any,Any,Any,str]]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "question": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "CustomPrepro.prepro_text": {
            "name": "prepro_text",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "CustomPrepro.prepro_crossed": {
            "name": "prepro_crossed",
            "location": 37,
            "return": [
                "Dict",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "context_features": [
                    "str"
                ],
                "question_features": [
                    "str"
                ]
            }
        }
    },
    "Ann-master/src/backend/qaweb/prepro.py": {
        "clean_spaces": {
            "name": "clean_spaces",
            "location": 6,
            "return": [
                "str",
                "Pattern",
                "List",
                "None",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "normalize_text": {
            "name": "normalize_text",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "annotate_single": {
            "name": "annotate_single",
            "location": 16,
            "return": [
                "Tuple[Union[str,dict[str,Any],list[int],list[tuple]]]",
                "str",
                "Dict[str,float]",
                "Dict[str,Dict[str,int]]",
                "List[Dict[str,Any]]",
                "float",
                "Dict",
                "List[float]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "init_nlp": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Union[Any,Any]]",
                    "Any"
                ]
            }
        },
        "annotate_crossed": {
            "name": "annotate_crossed",
            "location": 34,
            "return": [
                "Tuple[Union[list,list[int],list[Union[list[int],str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]],str,tuple,list[None],list[tuple[Union[str,Any,Any]]],int]]",
                "str",
                "int"
            ],
            "arguments": {
                "context_features": [
                    "frozenset",
                    "float",
                    "int",
                    "FrozenSet[int]"
                ],
                "question_features": [],
                "wv_cased": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "annotate": {
            "name": "annotate",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "row": [
                    "str",
                    "int",
                    "Sequence[MutableSet[int]]",
                    "Dict[str,str]"
                ],
                "wv_cased": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "Sequence[MutableSet[int]]",
                    "Sequence[MutableSet]"
                ],
                "init_nlp": [
                    "bool",
                    "float",
                    "None",
                    "bytes"
                ]
            }
        },
        "to_id": {
            "name": "to_id",
            "location": 71,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "row": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "w2id": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Optional[Set[int]]"
                ],
                "tag2id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "ent2id": [
                    "List[dict[str,Any]]",
                    "int",
                    "List[Optional[int]]",
                    "str",
                    "List[Dict[str,Any]]"
                ],
                "unk_id": [
                    "int",
                    "str",
                    "Optional[Set[int]]",
                    "Tuple[str]"
                ]
            }
        }
    },
    "Ann-master/src/backend/qaweb/schemas.py": {},
    "Ann-master/src/backend/qaweb/views.py": {},
    "Ann-master/src/backend/qaweb/__init__.py": {},
    "Ann-master/src/model/setup.py": {},
    "Ann-master/src/model/bertynet/app.py": {
        "get_model_answer": {
            "name": "get_model_answer",
            "location": 15,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Ann-master/src/model/bertynet/BatchGen.py": {
        "BatchGen.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytearray",
                    "Sized",
                    "Sequence[Mapping[str, Any]]"
                ],
                "batch_size": [
                    "int",
                    "Tuple[Union[int,int,int]]",
                    "bool",
                    "Tuple[int,int,int]"
                ],
                "evaluation": [
                    "bool",
                    "int",
                    "bytes",
                    "bytearray",
                    "str"
                ]
            }
        },
        "BatchGen.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "int",
                "str",
                "bytes",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchGen.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ann-master/src/model/bertynet/BertyNet.py": {
        "BertyNet.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opt": [
                    "int",
                    "bool",
                    "float"
                ],
                "glove_embeddings": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "BertyNet._build_model": {
            "name": "_build_model",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertyNet.prepare_input": {
            "name": "prepare_input",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch_data": [
                    "Optional[Any]",
                    "bytes",
                    "Any",
                    "str",
                    "None"
                ],
                "evaluation": [
                    "bool",
                    "Optional[Any]",
                    "bytes",
                    "str"
                ]
            }
        },
        "BertyNet._get_bert_embeddings": {
            "name": "_get_bert_embeddings",
            "location": 284,
            "return": [
                "Tuple[None]",
                "Tuple",
                "Optional[int]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "bool",
                "Optional[str]",
                "Dict",
                "Optional[Any]",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "question_tokens": [
                    "Callable",
                    "int",
                    "Iterable[Tuple[str,dict]]",
                    "Iterable[tuple[Union[str,dict]]]"
                ],
                "context_tokens": [
                    "Callable",
                    "int",
                    "Iterable[Tuple[str,dict]]",
                    "Iterable[tuple[Union[str,dict]]]"
                ],
                "answer_end_idx": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "BertyNet._get_bert_embeddings_for_batch": {
            "name": "_get_bert_embeddings_for_batch",
            "location": 375,
            "return": [
                "Tuple[list[int]]",
                "str",
                "Dict",
                "float",
                "List[Tuple[int,int]]"
            ],
            "arguments": {
                "self": [],
                "batch_data": [
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "List[int]",
                    "bytes",
                    "Mapping[str,Any]",
                    "List[list[Any]]",
                    "List[List[Any]]"
                ],
                "evaluation": [
                    "bool",
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,Any]"
                ]
            }
        },
        "BertyNet._encode_forward": {
            "name": "_encode_forward",
            "location": 407,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "prepared_input": [
                    "Dict[str, List[str]]",
                    "Union[object, type]",
                    "dict",
                    "Dict[str, torch.Tensor]"
                ]
            }
        },
        "BertyNet._decode_forward": {
            "name": "_decode_forward",
            "location": 485,
            "return": [
                "Tuple",
                "str",
                "IO",
                "Iterable[str]",
                "Optional[int]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "question_info": [
                    "Set[str]"
                ],
                "context_info": [
                    "Optional[Set[str]]"
                ],
                "question_plaus_info": [
                    "int",
                    "str",
                    "bool"
                ],
                "context_plaus_info": [
                    "bool"
                ],
                "question_mask": [
                    "Set[str]"
                ],
                "context_mask": [
                    "List[str]"
                ]
            }
        },
        "BertyNet.compute_loss": {
            "name": "compute_loss",
            "location": 509,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "logits_s": [
                    "bool",
                    "List[torch.Tensor]",
                    "int",
                    "Dict",
                    "List[list[int]]",
                    "List[List[int]]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "logits_e": [
                    "bool",
                    "List[torch.Tensor]",
                    "int",
                    "Dict",
                    "List[list[int]]",
                    "List[List[int]]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "logits_plaus_s": [
                    "float",
                    "bool"
                ],
                "logits_plaus_e": [
                    "float",
                    "bool"
                ],
                "logits_answerable": [
                    "bool",
                    "str"
                ],
                "start_idx": [
                    "bool",
                    "List[torch.Tensor]",
                    "int",
                    "Dict",
                    "List[list[int]]",
                    "List[List[int]]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "end_idx": [
                    "bool",
                    "List[torch.Tensor]",
                    "int",
                    "Dict",
                    "List[list[int]]",
                    "List[List[int]]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "plaus_start_idx": [
                    "float",
                    "bool"
                ],
                "plaus_end_idx": [
                    "float",
                    "bool"
                ],
                "has_answer": [
                    "bool",
                    "str"
                ]
            }
        },
        "BertyNet.forward": {
            "name": "forward",
            "location": 520,
            "return": [
                "int",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": [],
                "prepared_input": [
                    "str",
                    "torch.Tensor"
                ]
            }
        },
        "BertyNet._compute_mask": {
            "name": "_compute_mask",
            "location": 527,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "BertyNet.reset_fixed_embeddings": {
            "name": "reset_fixed_embeddings",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertyNet._get_bert_embeddings.get_wordpiece_tokenization": {
            "name": "get_wordpiece_tokenization",
            "location": 289,
            "return": [
                "Tuple[list[int]]",
                "str",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "tokens": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "BertyNet._get_bert_embeddings.truncate_sequence": {
            "name": "truncate_sequence",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "seq_tokens": [
                    "torch.Tensor",
                    "bool",
                    "List[List[str]]"
                ],
                "mapping": [
                    "int",
                    "Dict[int, bool]",
                    "List[str]",
                    "List[T]",
                    "List[Tuple[int, int]]",
                    "List[int]",
                    "Set[str]"
                ],
                "desired_len": [
                    "bool",
                    "str",
                    "torch.Tensor"
                ]
            }
        },
        "BertyNet._get_bert_embeddings.embed_joint": {
            "name": "embed_joint",
            "location": 313,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "question_wp_tokens": [
                    "int",
                    "torch.IntTensor",
                    "float"
                ],
                "context_wp_tokens": [
                    "str",
                    "Sequence[str]",
                    "List[List[int]]",
                    "List[List[str]]",
                    "List[int]",
                    "Optional[str]"
                ],
                "question_mapping": [
                    "str",
                    "Sequence[str]",
                    "List[List[int]]",
                    "List[List[str]]",
                    "List[int]",
                    "Optional[str]"
                ],
                "context_mapping": [
                    "str",
                    "Sequence[str]",
                    "List[List[int]]",
                    "List[List[str]]",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "BertyNet._get_bert_embeddings.embed_separately": {
            "name": "embed_separately",
            "location": 337,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seq_tokens": [
                    "str",
                    "bool",
                    "Sequence",
                    "torch.Tensor",
                    "Sequence[str]"
                ],
                "seq_mapping": [
                    "str",
                    "bool",
                    "Sequence",
                    "torch.Tensor",
                    "Sequence[str]"
                ]
            }
        }
    },
    "Ann-master/src/model/bertynet/CloudModelWrapper.py": {
        "CloudModelWrapper.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "CloudModelWrapper.load_embeddings_and_update_opt_": {
            "name": "load_embeddings_and_update_opt_",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudModelWrapper.generate_model_answers": {
            "name": "generate_model_answers",
            "location": 44,
            "return": [
                "str",
                "Type",
                "List[str]",
                "bool",
                "Dict[int,Any]",
                "Optional[str]",
                "Dict",
                "Tuple",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "preprocessed_data": [
                    "Dict",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        }
    },
    "Ann-master/src/model/bertynet/layers.py": {
        "variational_dropout": {
            "name": "variational_dropout",
            "location": 6,
            "return": [
                "str",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "torch.FloatTensor",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "dropout_rate": [
                    "int",
                    "float",
                    "torch.Tensor"
                ],
                "training": [
                    "bool",
                    "Optional[float]"
                ],
                "use_cuda": [
                    "bool",
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "dropout": {
            "name": "dropout",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "List[int]",
                    "Callable[[None], bool]",
                    "bool",
                    "Optional[Dict]",
                    "Tuple[float, float]"
                ],
                "dropout_rate": [
                    "int",
                    "float",
                    "List",
                    "Set"
                ],
                "training": [
                    "bool",
                    "float",
                    "List",
                    "Set",
                    "int"
                ],
                "dropout_type": [
                    "Text",
                    "str",
                    "int",
                    "Tuple[int,int]"
                ],
                "use_cuda": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "StackedBRNN.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "Callable",
                    "int",
                    "List",
                    "Union[Tuple[int,int],int]",
                    "Tuple[Union[int,int]]"
                ],
                "hidden_size": [
                    "int",
                    "Callable",
                    "List",
                    "Tuple[Union[int,int]]",
                    "Union[Tuple[int,int],int]"
                ],
                "num_layers": [
                    "int",
                    "float"
                ],
                "dropout_rate": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "dropout_output": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "List[str]"
                ],
                "rnn_type": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "concat_layers": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "padding": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "StackedBRNN.forward": {
            "name": "forward",
            "location": 55,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ],
                "x_mask": [
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "StackedBRNN._forward_unpadded": {
            "name": "_forward_unpadded",
            "location": 68,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "int"
                ],
                "x_mask": [
                    "bool",
                    "Exception",
                    "T"
                ]
            }
        },
        "StackedBRNN._forward_padded": {
            "name": "_forward_padded",
            "location": 104,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ],
                "x_mask": [
                    "int"
                ]
            }
        },
        "FullAttention.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float",
                    "allennlp.nn.InitializerApplicator",
                    "None",
                    "Optional[int]"
                ],
                "hidden_size": [
                    "int",
                    "float",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ],
                "dropout_rate": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "float",
                    "Dict[str,LabwareDefinition]"
                ],
                "dropout_type": [
                    "Text",
                    "int",
                    "bool",
                    "Dict[int,str]",
                    "str",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "use_cuda": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "FullAttention.forward": {
            "name": "forward",
            "location": 178,
            "return": [
                "Tuple",
                "bool",
                "int",
                "bytes",
                "torch.Tensor",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "Optional[int]",
                    "Sequence[int]",
                    "Optional[Hashable]",
                    "Optional[Mapping[str, Any]]"
                ],
                "keys": [
                    "str"
                ],
                "values_1": [
                    "int",
                    "float"
                ],
                "values_1_mask": [
                    "str",
                    "Callable",
                    "torch.nn.Module",
                    "None",
                    "Optional[str]"
                ],
                "values_2": [
                    "int",
                    "None",
                    "Dict",
                    "Optional[int]",
                    "bool",
                    "Tuple[Union[str,str,str]]",
                    "str",
                    "List[str]",
                    "torch.LongTensor",
                    "Optional[Tuple[str,str,str]]",
                    "Union[None,str,List[str]]",
                    "Optional[bool]"
                ],
                "values_2_mask": [
                    "bool",
                    "None",
                    "Dict",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Summarize.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "dropout_rate": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "dropout_type": [
                    "Text",
                    "str",
                    "bool",
                    "int"
                ],
                "use_cuda": [
                    "bool",
                    "str",
                    "IO[str]"
                ]
            }
        },
        "Summarize.forward": {
            "name": "forward",
            "location": 219,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Dict",
                "Dict[str,int]",
                "List",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "mask": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "PointerNet.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int"
                ],
                "dropout_rate": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "dropout_type": [
                    "Text",
                    "str",
                    "bool",
                    "int"
                ],
                "use_cuda": [
                    "bool",
                    "str",
                    "IO[str]"
                ]
            }
        },
        "PointerNet.forward": {
            "name": "forward",
            "location": 242,
            "return": [
                "Tuple",
                "str",
                "Optional[str]",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "Union[int,float]",
                    "int",
                    "str",
                    "float",
                    "Dict[str,Any]"
                ],
                "x_mask": [
                    "float"
                ]
            }
        }
    },
    "Ann-master/src/model/bertynet/model.py": {
        "BertyModel.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opt": [
                    "str",
                    "Dict[str,str]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "embeddings": [
                    "str",
                    "Dict[str,str]",
                    "None",
                    "Optional[Callable]",
                    "Callable"
                ],
                "state_dict": [
                    "None",
                    "Union[dict,Dict[str,Any]]",
                    "Dict[str,None]",
                    "Dict",
                    "Dict[str,Optional[float]]",
                    "Optional[openapi.utils.TypingInfo]"
                ]
            }
        },
        "BertyModel.build_optimizer": {
            "name": "build_optimizer",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertyModel.update": {
            "name": "update",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "BertyModel.predict": {
            "name": "predict",
            "location": 69,
            "return": [
                "bool",
                "Tuple[list]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "BertyModel.infer": {
            "name": "infer",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "BertyModel.save": {
            "name": "save",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "logging.Logger"
                ],
                "epoch": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "BertyModel.cuda": {
            "name": "cuda",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Ann-master/src/model/bertynet/prepro.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 125,
            "return": [
                "Tuple",
                "Dict[str,Any]",
                "Dict[str,str]",
                "int",
                "Dict",
                "str",
                "Mapping"
            ],
            "arguments": {}
        },
        "flatten_json": {
            "name": "flatten_json",
            "location": 159,
            "return": [
                "List[tuple[Union[bool,list]]]",
                "Tuple[int,int]",
                "numpy.matrix",
                "float",
                "bool",
                "Union[numpy.ndarray,numpy.void]",
                "int"
            ],
            "arguments": {
                "data_file": [
                    "str",
                    "bytes"
                ],
                "mode": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "Sequence[str]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "clean_spaces": {
            "name": "clean_spaces",
            "location": 183,
            "return": [
                "str",
                "Pattern",
                "List",
                "None",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "normalize_text": {
            "name": "normalize_text",
            "location": 188,
            "return": [
                "str",
                "List[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "annotate_single": {
            "name": "annotate_single",
            "location": 198,
            "return": [
                "Tuple[Union[str,dict[str,Any],list[int],list[tuple]]]",
                "str",
                "Dict[str,float]",
                "Dict[str,Dict[str,int]]",
                "List[Dict[str,Any]]",
                "float",
                "Dict",
                "List[float]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "init_nlp": [
                    "Optional[str]",
                    "str",
                    "None",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Union[Any,Any]]",
                    "Any"
                ]
            }
        },
        "annotate_crossed": {
            "name": "annotate_crossed",
            "location": 215,
            "return": [
                "Tuple[Union[list,list[int],list[Union[list[int],str,str,str,str,str,str,str,str]],str,tuple,list[None],list[tuple[Union[str,Any,Any]]],int]]",
                "str",
                "int"
            ],
            "arguments": {
                "context_features": [
                    "frozenset",
                    "float",
                    "numpy.ndarray",
                    "int",
                    "FrozenSet[int]"
                ],
                "question_features": [],
                "wv_cased": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "annotate": {
            "name": "annotate",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "row": [
                    "str",
                    "int",
                    "Sequence[MutableSet[int]]",
                    "Dict[str,str]"
                ],
                "wv_cased": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "Sequence[MutableSet[int]]",
                    "Sequence[MutableSet]"
                ],
                "init_nlp": [
                    "bool",
                    "float",
                    "None",
                    "bytes"
                ],
                "calc_cross_features": [
                    "bool",
                    "Iterator[Dict[str,Any]]",
                    "Dict",
                    "List[str]"
                ]
            }
        },
        "index_answer": {
            "name": "index_answer",
            "location": 250,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "row": [
                    "str",
                    "int",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "build_vocab": {
            "name": "build_vocab",
            "location": 264,
            "return": [
                "bool",
                "Tuple[list[Union[int,Text]]]"
            ],
            "arguments": {
                "questions": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "bytes",
                    "Optional[str]",
                    "Optional[int]",
                    "raiden.utils.TokenAmount"
                ],
                "contexts": [
                    "str",
                    "int",
                    "raiden.utils.Secret"
                ],
                "wv_vocab": [
                    "str",
                    "int",
                    "Union[List,str]",
                    "List",
                    "Optional[Dict]",
                    "Dict",
                    "bool",
                    "None"
                ],
                "sort_all": [
                    "bool",
                    "int",
                    "Iterable",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "to_id": {
            "name": "to_id",
            "location": 283,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "row": [
                    "str",
                    "bool",
                    "raiden.utils.BlockNumber",
                    "Optional[str]"
                ],
                "w2id": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Optional[Set[int]]"
                ],
                "tag2id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "ent2id": [
                    "List[dict[str,Any]]",
                    "int",
                    "List[Optional[int]]",
                    "str",
                    "List[Dict[str,Any]]"
                ],
                "unk_id": [
                    "int",
                    "str",
                    "Optional[Set[int]]",
                    "Tuple[str]"
                ]
            }
        }
    },
    "Ann-master/src/model/bertynet/train.py": {
        "setup": {
            "name": "setup",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "dict",
                "str",
                "Mapping"
            ],
            "arguments": {}
        },
        "load_data": {
            "name": "load_data",
            "location": 126,
            "return": [
                "int",
                "Tuple[list]"
            ],
            "arguments": {
                "opt": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 158,
            "return": [
                "None",
                "bytes",
                "raiden.utils.Signature",
                "utils.Encoded",
                "raiden.utils.Optional[raiden.utils.Signature]"
            ],
            "arguments": {}
        },
        "setup.ProgressHandler.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "setup.ProgressHandler.emit": {
            "name": "emit",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Optional[str]",
                    "IO[str]",
                    "Union[str, dict]"
                ]
            }
        }
    },
    "Ann-master/src/model/bertynet/utils.py": {
        "str2bool": {
            "name": "str2bool",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "str",
                    "Union[str,bool]",
                    "int"
                ]
            }
        },
        "_normalize_answer": {
            "name": "_normalize_answer",
            "location": 39,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_exact_match": {
            "name": "_exact_match",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "pred": [
                    "str",
                    "Optional[str]",
                    "None",
                    "slice",
                    "Sequence[str]",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "Callable[...,Any]",
                    "Optional[Callable[...,Any]]"
                ],
                "has_ans": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "answers_true": [
                    "str",
                    "Tuple[Union[float,float]]",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[Tuple[float,float]]",
                    "Optional[int]",
                    "VT"
                ],
                "has_ans_true": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_f1_score": {
            "name": "_f1_score",
            "location": 68,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "pred": [
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "has_ans": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "int"
                ],
                "answers_true": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Optional[List[int]]",
                    "Optional[float]",
                    "Optional[int]",
                    "int"
                ],
                "has_ans_true": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "int"
                ]
            }
        },
        "score": {
            "name": "score",
            "location": 88,
            "return": [
                "Tuple[float]",
                "str",
                "int",
                "Dict"
            ],
            "arguments": {
                "predictions": [
                    "bool",
                    "str",
                    "Callable",
                    "List",
                    "List[float]",
                    "List[int]",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "is_answerable": [],
                "dev_answer_info": [
                    "List[str]",
                    "bool",
                    "List",
                    "List[Tuple]",
                    "List[tuple]"
                ]
            }
        },
        "AverageMeter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beta": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "AverageMeter.state_dict": {
            "name": "state_dict",
            "location": 25,
            "return": [
                "List[str]",
                "List[Match]",
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AverageMeter.load": {
            "name": "load",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "Dict[int,Any]",
                    "Dict[str,list[int]]",
                    "Dict[str,list[dict]]",
                    "str",
                    "Dict[str,List[int]]",
                    "Dict[str,Any]",
                    "Type[Dict[str,Any]]",
                    "Dict[str,List[Dict]]"
                ]
            }
        },
        "AverageMeter.update": {
            "name": "update",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "_normalize_answer.remove_articles": {
            "name": "remove_articles",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "_normalize_answer.white_space_fix": {
            "name": "white_space_fix",
            "location": 43,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Exception"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_normalize_answer.remove_punc": {
            "name": "remove_punc",
            "location": 46,
            "return": [
                "str",
                "List",
                "List[str]",
                "Optional[dict]",
                "int",
                "List[Dict[str,Any]]",
                "frozenset"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_normalize_answer.lower": {
            "name": "lower",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_f1_score._score": {
            "name": "_score",
            "location": 69,
            "return": [
                "int",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "g_tokens": [
                    "int",
                    "str"
                ],
                "a_tokens": [
                    "int",
                    "list",
                    "tuple",
                    "List[List[str]]",
                    "bool"
                ]
            }
        }
    },
    "Ann-master/src/model/bertynet/__init__.py": {}
}
{
    "Authl-main/test_app.py": {
        "on_login": {
            "name": "on_login",
            "location": 24,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "verified": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 59,
            "return": [
                "int",
                "List[str]",
                "str",
                "list"
            ],
            "arguments": {
                "redir": [
                    "typing.Text",
                    "logging.Logger",
                    "List[str]",
                    "dict",
                    "Tuple[Tuple[str, ...]]",
                    "str",
                    "int"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "page": [
                    "typing.Text",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "Authl-main/authl/disposition.py": {
        "Redirect.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Redirect.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Verified.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str"
                ],
                "redir": [
                    "str"
                ],
                "profile": [
                    "dict"
                ]
            }
        },
        "Verified.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cdata": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Notify.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "redir": [
                    "str"
                ]
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Authl-main/authl/flask.py": {
        "setup": {
            "name": "setup",
            "location": 71,
            "return": [
                "authl.Authl"
            ],
            "arguments": {
                "app": [
                    "dict[str, typing.Any]",
                    "flask.Flask",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "load_template": {
            "name": "load_template",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_nocache": {
            "name": "_nocache",
            "location": 101,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "_redir_dest_to_path": {
            "name": "_redir_dest_to_path",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "destination": [
                    "str"
                ]
            }
        },
        "_redir_path_to_dest": {
            "name": "_redir_path_to_dest",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "client_id": {
            "name": "client_id",
            "location": 437,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_nocache.decorator": {
            "name": "decorator",
            "location": 103,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "AuthlFlask.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "None",
                    "flask.Flask",
                    "Optional[str]"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ],
                "login_name": [
                    "str"
                ],
                "login_path": [
                    "str"
                ],
                "callback_name": [
                    "str"
                ],
                "callback_path": [
                    "str"
                ],
                "tester_name": [
                    "str"
                ],
                "tester_path": [
                    "str"
                ],
                "login_render_func": [
                    "Callable"
                ],
                "notify_render_func": [
                    "Callable"
                ],
                "session_auth_name": [
                    "Optional[str]"
                ],
                "force_https": [
                    "bool"
                ],
                "stylesheet": [
                    "Union[(str, Callable)]"
                ],
                "on_verified": [
                    "Callable"
                ],
                "make_permanent": [
                    "bool"
                ],
                "state_storage": [
                    "dict"
                ],
                "token_storage": [
                    "tokens.TokenStore"
                ],
                "session_namespace": [
                    "typing.Text",
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "AuthlFlask.url_scheme": {
            "name": "url_scheme",
            "location": 303,
            "return": [
                "typing.Text",
                "None",
                "Optional[int]",
                "bool",
                "str",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthlFlask._handle_disposition": {
            "name": "_handle_disposition",
            "location": 308,
            "return": [
                "str",
                "int",
                "list[int]",
                "bytes",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "disp": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "AuthlFlask._render_notify": {
            "name": "_render_notify",
            "location": 341,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "cdata": [
                    "bool",
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "AuthlFlask.render_login_form": {
            "name": "render_login_form",
            "location": 351,
            "return": [
                "str",
                "int",
                "float",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "str"
                ],
                "error": [
                    "Optional[str]"
                ]
            }
        },
        "AuthlFlask._login_endpoint": {
            "name": "_login_endpoint",
            "location": 388,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]",
                "str",
                "IO[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "redir": [
                    "str"
                ]
            }
        },
        "AuthlFlask._callback_endpoint": {
            "name": "_callback_endpoint",
            "location": 420,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "hid": [
                    "str"
                ]
            }
        },
        "AuthlFlask.stylesheet": {
            "name": "stylesheet",
            "location": 430,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "Tuple[Tuple[int, Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_nocache.decorator.wrapped_func": {
            "name": "wrapped_func",
            "location": 104,
            "return": [
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Sequence"
            ],
            "arguments": {}
        },
        "AuthlFlask.__init__.find_service": {
            "name": "find_service",
            "location": 287,
            "return": [
                "Optional[str]",
                "Optional[BaseException]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "Authl-main/authl/tokens.py": {
        "TokenStore.put": {
            "name": "put",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bytes",
                    "List[dict]",
                    "float",
                    "list[dict[, ]]",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "TokenStore.get": {
            "name": "get",
            "location": 40,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "to_type": [
                    "tuple[]",
                    "str",
                    "bool",
                    "Sequence[Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TokenStore.remove": {
            "name": "remove",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "TokenStore.pop": {
            "name": "pop",
            "location": 51,
            "return": [
                "str",
                "Optional[str]",
                "tuple[typing.Union[str,typing.Literal,str]]",
                "int",
                "dict[, ]",
                "typing.Type",
                "dict[tuple[typing.Union[str,str]], str]",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "to_type": [
                    "tuple[]",
                    "str",
                    "Union[str, bytes]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "DictStore.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "dict"
                ],
                "keygen": [
                    "Callable[(..., str)]"
                ]
            }
        },
        "DictStore.put": {
            "name": "put",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "Union[str, int, float]",
                    "int",
                    "Union[Callable[[Dict], Hashable], str]",
                    "float",
                    "bool",
                    "typing.Callable[dict[, ], typing.Hashable]"
                ]
            }
        },
        "DictStore.get": {
            "name": "get",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "Union[str, int]"
                ],
                "to_type": [
                    "tuple[]",
                    "str",
                    "bytes",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "DictStore.remove": {
            "name": "remove",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Serializer.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "secret_key": [
                    "str"
                ]
            }
        },
        "Serializer.put": {
            "name": "put",
            "location": 129,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Serializer.get": {
            "name": "get",
            "location": 132,
            "return": [
                "str",
                "list",
                "Type"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "to_type": [
                    "tuple[]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Serializer.remove": {
            "name": "remove",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "float",
                    "abc.graph.GraphKeyType",
                    "int"
                ]
            }
        }
    },
    "Authl-main/authl/utils.py": {
        "get_user_agent": {
            "name": "get_user_agent",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "client_id": [
                    "str"
                ]
            }
        },
        "read_file": {
            "name": "read_file",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_icon": {
            "name": "read_icon",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "request_url": {
            "name": "request_url",
            "location": 35,
            "return": [
                "Optional[requests.models.Response]"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "client_id": [
                    "str"
                ]
            }
        },
        "resolve_value": {
            "name": "resolve_value",
            "location": 52,
            "return": [
                "int",
                "str",
                "float",
                "tuple[typing.Union[int,int]]",
                "Tuple[int, int]",
                "tuple[typing.Union[str,int]]",
                "Tuple[str, int]",
                "T"
            ],
            "arguments": {
                "val": [
                    "int",
                    "str",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "T"
                ]
            }
        },
        "permanent_url": {
            "name": "permanent_url",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "response": [
                    "requests.models.Response"
                ]
            }
        },
        "pkce_challenge": {
            "name": "pkce_challenge",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "verifier": [
                    "str"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "permanent_url.normalize": {
            "name": "normalize",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "Authl-main/authl/webfinger.py": {
        "get_profiles": {
            "name": "get_profiles",
            "location": 18,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "Authl-main/authl/__init__.py": {
        "from_config": {
            "name": "from_config",
            "location": 119,
            "return": [
                "Authl"
            ],
            "arguments": {
                "config": [
                    "Dict[(str, Any)]"
                ],
                "state_storage": [
                    "dict"
                ],
                "token_storage": [
                    "tokens.TokenStore"
                ]
            }
        },
        "Authl.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg_handlers": [
                    "List[handlers.Handler]"
                ]
            }
        },
        "Authl.add_handler": {
            "name": "add_handler",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "handlers.Handler"
                ]
            }
        },
        "Authl._match_url": {
            "name": "_match_url",
            "location": 49,
            "return": [
                "Tuple[(Optional[handlers.Handler], Optional[str], Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Authl.get_handler_for_url": {
            "name": "get_handler_for_url",
            "location": 57,
            "return": [
                "Tuple[(Optional[handlers.Handler], str, str)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Authl.get_handler_by_id": {
            "name": "get_handler_by_id",
            "location": 109,
            "return": [
                "Optional[handlers.Handler]"
            ],
            "arguments": {
                "self": [],
                "handler_id": [
                    "str"
                ]
            }
        },
        "Authl.handlers": {
            "name": "handlers",
            "location": 114,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Authl-main/authl/__version__.py": {},
    "Authl-main/authl/handlers/email_addr.py": {
        "smtplib_connector": {
            "name": "smtplib_connector",
            "location": 180,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "hostname": [
                    "bool",
                    "str",
                    "int"
                ],
                "port": [
                    "bool",
                    "str",
                    "int"
                ],
                "username": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ],
                "password": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ],
                "use_ssl": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "simple_sendmail": {
            "name": "simple_sendmail",
            "location": 210,
            "return": [
                "Callable[([email.message.EmailMessage], Any)]"
            ],
            "arguments": {
                "connector": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "sender_address": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "subject": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "from_config": {
            "name": "from_config",
            "location": 236,
            "return": [
                "EmailAddress"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "List[str]"
                ],
                "token_store": [
                    "tokens.TokenStore"
                ]
            }
        },
        "EmailAddress.service_name": {
            "name": "service_name",
            "location": 64,
            "return": [
                "typing.Text",
                "str",
                "list",
                "dict",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailAddress.url_schemes": {
            "name": "url_schemes",
            "location": 68,
            "return": [
                "list[tuple[typing.Text]]",
                "bool",
                "str",
                "Union[Dict[str, Any], ssl.SSLContext]",
                "email.mime.multiparMIMEMultipart"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailAddress.description": {
            "name": "description",
            "location": 73,
            "return": [
                "typing.Text",
                "dict",
                "bool",
                "int",
                "Dict[str, Dict[str, str]]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailAddress.cb_id": {
            "name": "cb_id",
            "location": 78,
            "return": [
                "typing.Text",
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailAddress.logo_html": {
            "name": "logo_html",
            "location": 82,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailAddress.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sendmail": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "notify_cdata": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "token_store": [
                    "tokens.TokenStore"
                ],
                "expires_time": [
                    "int"
                ],
                "pending_storage": [
                    "dict"
                ],
                "email_template_text": [
                    "str"
                ]
            }
        },
        "EmailAddress.handles_url": {
            "name": "handles_url",
            "location": 103,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "EmailAddress.initiate_auth": {
            "name": "initiate_auth",
            "location": 124,
            "return": [
                "Union[(disposition.Error, disposition.Notify)]"
            ],
            "arguments": {
                "self": [],
                "id_url": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "callback_uri": [
                    "str",
                    "Optional[str]"
                ],
                "redir": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EmailAddress.check_callback": {
            "name": "check_callback",
            "location": 161,
            "return": [
                "Union[(disposition.Error, disposition.Verified)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "get": [
                    "dict[str, dict[str, str]]",
                    "dict[str, str]",
                    "Dict[str, Dict[str, str]]",
                    "Type",
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "smtplib_connector.connect": {
            "name": "connect",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "simple_sendmail.sendmail": {
            "name": "sendmail",
            "location": 226,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "message": [
                    "email.message.EmailMessage",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "Authl-main/authl/handlers/fediverse.py": {
        "from_config": {
            "name": "from_config",
            "location": 251,
            "return": [
                "Fediverse"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "typing.Sequence[str]",
                    "str",
                    "Sequence[str]",
                    "tuple[str]",
                    "Tuple[str]",
                    "Optional[str]",
                    "None",
                    "Optional[bool]"
                ],
                "token_store": [
                    "tokens.TokenStore"
                ]
            }
        },
        "Fediverse.service_name": {
            "name": "service_name",
            "location": 32,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fediverse.url_schemes": {
            "name": "url_schemes",
            "location": 36,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fediverse.description": {
            "name": "description",
            "location": 40,
            "return": [
                "typing.Text",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fediverse.cb_id": {
            "name": "cb_id",
            "location": 46,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fediverse.logo_html": {
            "name": "logo_html",
            "location": 50,
            "return": [
                "list[tuple[typing.Text]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fediverse.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "token_store": [
                    "tokens.TokenStore"
                ],
                "timeout": [
                    "Optional[int]"
                ],
                "homepage": [
                    "Optional[str]"
                ]
            }
        },
        "Fediverse._get_instance": {
            "name": "_get_instance",
            "location": 72,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "Fediverse.handles_url": {
            "name": "handles_url",
            "location": 100,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Fediverse._get_identity": {
            "name": "_get_identity",
            "location": 122,
            "return": [
                "disposition.Disposition"
            ],
            "arguments": {
                "instance": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Optional[str]"
                ],
                "response": [
                    "dict",
                    "Dict[str, Any]",
                    "requests.Session",
                    "str"
                ],
                "redir": [
                    "Type[T]",
                    "typing.Type",
                    "Optional['models.LTI1p3Provider']",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Fediverse.initiate_auth": {
            "name": "initiate_auth",
            "location": 152,
            "return": [
                "Union[(disposition.Error, disposition.Redirect)]"
            ],
            "arguments": {
                "self": [],
                "id_url": [
                    "str",
                    "Union[int, float]",
                    "bytes",
                    "int",
                    "Optional[bool]",
                    "float",
                    "None"
                ],
                "callback_uri": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "redir": [
                    "str"
                ]
            }
        },
        "Fediverse.check_callback": {
            "name": "check_callback",
            "location": 191,
            "return": [
                "disposition.Disposition"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "str",
                    "int",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "requests.models.Response",
                    "Optional[Dict[str, str]]"
                ],
                "get": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "str",
                    "dict",
                    "bytes"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "from_config.get_cfg": {
            "name": "get_cfg",
            "location": 265,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "dfl": [
                    "None",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "Authl-main/authl/handlers/indieauth.py": {
        "find_endpoint": {
            "name": "find_endpoint",
            "location": 44,
            "return": [
                "Tuple[(Optional[str], str)]"
            ],
            "arguments": {
                "id_url": [
                    "str"
                ],
                "links": [
                    "dict"
                ],
                "content": [
                    "bs4.BeautifulSoup"
                ],
                "rel": [
                    "str"
                ]
            }
        },
        "find_endpoints": {
            "name": "find_endpoints",
            "location": 62,
            "return": [
                "Tuple[(Dict[(str, str)], str)]"
            ],
            "arguments": {
                "id_url": [
                    "str"
                ],
                "links": [
                    "dict"
                ],
                "content": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "_parse_hcard": {
            "name": "_parse_hcard",
            "location": 133,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {
                "id_url": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "tuple",
                    "tuple[]"
                ],
                "card": [
                    "dict[, ]",
                    "str",
                    "List[str]",
                    "dict",
                    "tuple"
                ]
            }
        },
        "get_profile": {
            "name": "get_profile",
            "location": 165,
            "return": [
                "dict"
            ],
            "arguments": {
                "id_url": [
                    "str"
                ],
                "server_profile": [
                    "dict"
                ],
                "links": [
                    "int",
                    "None",
                    "str",
                    "dict",
                    "Optional[Any]",
                    "dict[, ]",
                    "Optional[str]",
                    "typing.Any",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "content": [
                    "bs4.BeautifulSoup"
                ],
                "endpoints": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "verify_id": {
            "name": "verify_id",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "request_id": [
                    "str"
                ],
                "response_id": [
                    "str"
                ]
            }
        },
        "from_config": {
            "name": "from_config",
            "location": 399,
            "return": [
                "IndieAuth"
            ],
            "arguments": {
                "config": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "token_store": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "find_endpoints._derive_endpoint": {
            "name": "_derive_endpoint",
            "location": 76,
            "return": [
                "None",
                "str",
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "links": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "content": [
                    "str",
                    "List[str]",
                    "Optional[Sequence[str]]"
                ],
                "rel": [
                    "str",
                    "raiden.tests.fuzz.utils.Scrambling",
                    "bool",
                    "bytes"
                ]
            }
        },
        "_parse_hcard.get_str": {
            "name": "get_str",
            "location": 136,
            "return": [
                "str",
                "bool",
                "None",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "prop": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "_parse_hcard.get_url": {
            "name": "get_url",
            "location": 145,
            "return": [
                "str",
                "tuple[]",
                "tuple[None]"
            ],
            "arguments": {
                "prop": [
                    "str"
                ],
                "scheme": [
                    "str",
                    "None"
                ]
            }
        },
        "IndieAuth.service_name": {
            "name": "service_name",
            "location": 261,
            "return": [
                "typing.Text",
                "bool",
                "int",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndieAuth.url_schemes": {
            "name": "url_schemes",
            "location": 265,
            "return": [
                "list[tuple[typing.Text]]",
                "int",
                "trezor.utils.Writer",
                "float",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndieAuth.description": {
            "name": "description",
            "location": 270,
            "return": [
                "typing.Text",
                "Callable",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndieAuth.cb_id": {
            "name": "cb_id",
            "location": 275,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndieAuth.logo_html": {
            "name": "logo_html",
            "location": 279,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "Optional[str]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndieAuth.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "Union[(str, Callable[(..., str)])]"
                ],
                "token_store": [
                    "tokens.TokenStore"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "IndieAuth.handles_url": {
            "name": "handles_url",
            "location": 309,
            "return": [
                "None",
                "bool",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "IndieAuth.handles_page": {
            "name": "handles_page",
            "location": 319,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "headers": [
                    "str",
                    "bytes",
                    "bool",
                    "Mapping[str, Optional[float]]",
                    "typing.Mapping",
                    "List[Tuple[bytes, bytes]]",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ],
                "content": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "links": [
                    "str",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "IndieAuth.initiate_auth": {
            "name": "initiate_auth",
            "location": 323,
            "return": [
                "Union[(disposition.Error, disposition.Redirect)]"
            ],
            "arguments": {
                "self": [],
                "id_url": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "callback_uri": [
                    "str",
                    "bool",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]"
                ],
                "redir": [
                    "str",
                    "int"
                ]
            }
        },
        "IndieAuth.check_callback": {
            "name": "check_callback",
            "location": 346,
            "return": [
                "Union[(disposition.Error, disposition.Verified)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "get": [
                    "requests.models.Response",
                    "dict",
                    "Dict[str, float]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "raiden.utils.ABI"
                ],
                "data": [
                    "str",
                    "int",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "Authl-main/authl/handlers/test_handler.py": {
        "TestHandler.handles_url": {
            "name": "handles_url",
            "location": 20,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "_T0"
                ]
            }
        },
        "TestHandler.initiate_auth": {
            "name": "initiate_auth",
            "location": 26,
            "return": [
                "Union[(disposition.Error, disposition.Verified)]"
            ],
            "arguments": {
                "self": [],
                "id_url": [
                    "str"
                ],
                "callback_uri": [
                    "str"
                ],
                "redir": [
                    "str"
                ]
            }
        },
        "TestHandler.check_callback": {
            "name": "check_callback",
            "location": 36,
            "return": [
                "disposition.Error"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "get": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "TestHandler.cb_id": {
            "name": "cb_id",
            "location": 40,
            "return": [
                "typing.Text",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandler.service_name": {
            "name": "service_name",
            "location": 44,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandler.url_schemes": {
            "name": "url_schemes",
            "location": 48,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandler.description": {
            "name": "description",
            "location": 52,
            "return": [
                "typing.Text",
                "bool",
                "str",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Authl-main/authl/handlers/twitter.py": {
        "from_config": {
            "name": "from_config",
            "location": 222,
            "return": [
                "Twitter"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "storage": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Twitter.description": {
            "name": "description",
            "location": 54,
            "return": [
                "Type",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.service_name": {
            "name": "service_name",
            "location": 58,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.url_schemes": {
            "name": "url_schemes",
            "location": 62,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.logo_html": {
            "name": "logo_html",
            "location": 66,
            "return": [
                "list[tuple[typing.Text]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_key": [
                    "str"
                ],
                "client_secret": [
                    "str"
                ],
                "timeout": [
                    "int"
                ],
                "storage": [
                    "dict"
                ]
            }
        },
        "Twitter.handles_url": {
            "name": "handles_url",
            "location": 85,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes",
                    "Pattern",
                    "typing.Pattern"
                ]
            }
        },
        "Twitter.cb_id": {
            "name": "cb_id",
            "location": 93,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.initiate_auth": {
            "name": "initiate_auth",
            "location": 96,
            "return": [
                "Union[(disposition.Error, disposition.Redirect)]"
            ],
            "arguments": {
                "self": [],
                "id_url": [
                    "str"
                ],
                "callback_uri": [
                    "str"
                ],
                "redir": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Twitter.check_callback": {
            "name": "check_callback",
            "location": 126,
            "return": [
                "Union[(disposition.Error, disposition.Verified)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[str, typing.Any]",
                    "raiden.utils.List[raiden.utils.Tuple[str, int]]",
                    "None",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "Literal",
                    "dict",
                    "Dict[str, Any]"
                ],
                "get": [
                    "Dict[str, Any]",
                    "requests.Response",
                    "bool",
                    "dict"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "Twitter.generic_url": {
            "name": "generic_url",
            "location": 181,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Twitter.build_profile": {
            "name": "build_profile",
            "location": 185,
            "return": [
                "dict"
            ],
            "arguments": {
                "user_info": [
                    "dict"
                ]
            }
        },
        "Twitter.build_profile.expand_entities": {
            "name": "expand_entities",
            "location": 189,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "Authl-main/authl/handlers/__init__.py": {
        "Handler.handles_url": {
            "name": "handles_url",
            "location": 34,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Handler.handles_page": {
            "name": "handles_page",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "headers": [
                    "str",
                    "bytes",
                    "bool",
                    "Mapping[str, Optional[float]]",
                    "typing.Mapping",
                    "List[Tuple[bytes, bytes]]",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ],
                "content": [
                    "str",
                    "bytes",
                    "bool",
                    "Mapping[str, Optional[float]]",
                    "typing.Mapping",
                    "List[Tuple[bytes, bytes]]",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ],
                "links": [
                    "str",
                    "bytes",
                    "bool",
                    "Mapping[str, Optional[float]]",
                    "typing.Mapping",
                    "List[Tuple[bytes, bytes]]",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        },
        "Handler.cb_id": {
            "name": "cb_id",
            "location": 72,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.initiate_auth": {
            "name": "initiate_auth",
            "location": 78,
            "return": [
                "disposition.Disposition"
            ],
            "arguments": {
                "self": [],
                "id_url": [
                    "str"
                ],
                "callback_uri": [
                    "str"
                ],
                "redir": [
                    "str"
                ]
            }
        },
        "Handler.check_callback": {
            "name": "check_callback",
            "location": 90,
            "return": [
                "disposition.Disposition"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "get": [
                    "dict"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "Handler.service_name": {
            "name": "service_name",
            "location": 105,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.url_schemes": {
            "name": "url_schemes",
            "location": 110,
            "return": [
                "typing.List[typing.Tuple[builtins.str, builtins.str]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.generic_url": {
            "name": "generic_url",
            "location": 120,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.description": {
            "name": "description",
            "location": 129,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.logo_html": {
            "name": "logo_html",
            "location": 133,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Authl-main/docs/conf.py": {},
    "Authl-main/tests/test_base.py": {
        "test_version": {
            "name": "test_version",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_handler": {
            "name": "test_base_handler",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Authl-main/tests/test_disposition.py": {
        "test_dispositions": {
            "name": "test_dispositions",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Authl-main/tests/test_flask_wrapper.py": {
        "test_config": {
            "name": "test_config",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_tester": {
            "name": "test_url_tester",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dispositions_and_hooks": {
            "name": "test_dispositions_and_hooks",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_login_rendering": {
            "name": "test_login_rendering",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_hooks": {
            "name": "test_default_hooks",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_callbacks": {
            "name": "test_callbacks",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_id": {
            "name": "test_client_id",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_render_hook": {
            "name": "test_app_render_hook",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generic_login": {
            "name": "test_generic_login",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_session_override": {
            "name": "test_session_override",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_render_hook.index": {
            "name": "index",
            "location": 215,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_generic_login.index": {
            "name": "index",
            "location": 240,
            "return": [
                "typing.Text",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "test_session_override.on_verified": {
            "name": "on_verified",
            "location": 291,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "disp": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_dispositions_and_hooks.Dispositioner.handles_url": {
            "name": "handles_url",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]",
                    "dict",
                    "Callable[[str], str]"
                ]
            }
        },
        "test_dispositions_and_hooks.Dispositioner.cb_id": {
            "name": "cb_id",
            "location": 56,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_dispositions_and_hooks.Dispositioner.initiate_auth": {
            "name": "initiate_auth",
            "location": 59,
            "return": [
                "InvalidDisposition",
                "int",
                "Dict[str, Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "id_url": [
                    "str"
                ],
                "callback_uri": [
                    "str"
                ],
                "redir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Union[int, str]"
                ]
            }
        },
        "test_callbacks.CallbackHandler.cb_id": {
            "name": "cb_id",
            "location": 168,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_callbacks.CallbackHandler.check_callback": {
            "name": "check_callback",
            "location": 171,
            "return": [
                "bool",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[dict]",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "get": [
                    "dict",
                    "str",
                    "Type",
                    "Type[T]"
                ],
                "data": [
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_generic_login.GenericHandler.cb_id": {
            "name": "cb_id",
            "location": 247,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_generic_login.GenericHandler.handles_url": {
            "name": "handles_url",
            "location": 250,
            "return": [
                "None",
                "str",
                "Union[str, \"DatabaseURL\"]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "test_generic_login.GenericHandler.generic_url": {
            "name": "generic_url",
            "location": 254,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_generic_login.GenericHandler.service_name": {
            "name": "service_name",
            "location": 258,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_generic_login.GenericHandler.url_schemes": {
            "name": "url_schemes",
            "location": 262,
            "return": [
                "list[tuple[typing.Text]]",
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_generic_login.GenericHandler.logo_html": {
            "name": "logo_html",
            "location": 266,
            "return": [
                "list[tuple[typing.Text]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_generic_login.GenericHandler.initiate_auth": {
            "name": "initiate_auth",
            "location": 269,
            "return": [
                "int",
                "bool",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "id_url": [
                    "str"
                ],
                "callback_uri": [
                    "str"
                ],
                "redir": [
                    "str"
                ]
            }
        }
    },
    "Authl-main/tests/test_main.py": {
        "test_register_handler": {
            "name": "test_register_handler",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_handler_for_url": {
            "name": "test_get_handler_for_url",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_webmention_url": {
            "name": "test_webmention_url",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_from_config": {
            "name": "test_from_config",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_redir_url": {
            "name": "test_redir_url",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "UrlHandler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "cid": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "UrlHandler.cb_id": {
            "name": "cb_id",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlHandler.handles_url": {
            "name": "handles_url",
            "location": 22,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "_T0"
                ]
            }
        },
        "LinkHandler.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel": [
                    "int",
                    "float",
                    "bool"
                ],
                "cid": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LinkHandler.cb_id": {
            "name": "cb_id",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkHandler.handles_page": {
            "name": "handles_page",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bytes",
                    "bool",
                    "Mapping[str, Optional[float]]",
                    "typing.Mapping",
                    "List[Tuple[bytes, bytes]]",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ],
                "headers": [
                    "str",
                    "bytes",
                    "bool",
                    "Mapping[str, Optional[float]]",
                    "typing.Mapping",
                    "List[Tuple[bytes, bytes]]",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "Callable[[], Any]",
                    "typing.Callable[[], typing.Any]"
                ],
                "content": [
                    "str",
                    "int",
                    "bool"
                ],
                "links": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Authl-main/tests/test_tokens.py": {
        "test_dictstore": {
            "name": "test_dictstore",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serializer": {
            "name": "test_serializer",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Authl-main/tests/test_utils.py": {
        "test_request_url": {
            "name": "test_request_url",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_resolve_value": {
            "name": "test_resolve_value",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_permanent_url": {
            "name": "test_permanent_url",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_pkce_challenge": {
            "name": "test_pkce_challenge",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_value.moo": {
            "name": "moo",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Authl-main/tests/test_webfinger.py": {
        "test_not_address": {
            "name": "test_not_address",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_no_resource": {
            "name": "test_no_resource",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_resource": {
            "name": "test_resource",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_invalid": {
            "name": "test_invalid",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "Authl-main/tests/__init__.py": {
        "TestHandler.cb_id": {
            "name": "cb_id",
            "location": 15,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandler.initiate_auth": {
            "name": "initiate_auth",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "id_url": [
                    "str"
                ],
                "callback_uri": [
                    "str"
                ],
                "redir": [
                    "str"
                ]
            }
        },
        "TestHandler.check_callback": {
            "name": "check_callback",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "get": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "TestHandler.service_name": {
            "name": "service_name",
            "location": 25,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandler.url_schemes": {
            "name": "url_schemes",
            "location": 29,
            "return": [
                "list[]",
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandler.description": {
            "name": "description",
            "location": 33,
            "return": [
                "typing.Text",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Authl-main/tests/handlers/test_emailaddr.py": {
        "test_basics": {
            "name": "test_basics",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_success": {
            "name": "test_success",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_failures": {
            "name": "test_failures",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_connector": {
            "name": "test_connector",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_simple_sendmail": {
            "name": "test_simple_sendmail",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_from_config": {
            "name": "test_from_config",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_please_wait": {
            "name": "test_please_wait",
            "location": 217,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_success.do_callback": {
            "name": "do_callback",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test_failures.accept": {
            "name": "accept",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "email.message.EmailMessage"
                ]
            }
        },
        "test_failures.initiate": {
            "name": "initiate",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "addr": [
                    "str",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "redir": [
                    "str",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_failures.check_pending": {
            "name": "check_pending",
            "location": 115,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "addr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Authl-main/tests/handlers/test_fediverse.py": {
        "test_basics": {
            "name": "test_basics",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handles_url": {
            "name": "test_handles_url",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_auth_success": {
            "name": "test_auth_success",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "requests_mock": []
            }
        },
        "test_auth_failures": {
            "name": "test_auth_failures",
            "location": 103,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "requests_mock": [],
                "mocker": []
            }
        },
        "test_attack_mitigations": {
            "name": "test_attack_mitigations",
            "location": 188,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "requests_mock": [],
                "mocker": []
            }
        }
    },
    "Authl-main/tests/handlers/test_indieauth.py": {
        "purge_endpoint_cache": {
            "name": "purge_endpoint_cache",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_find_endpoint_by_url": {
            "name": "test_find_endpoint_by_url",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_find_endpoint_redirections": {
            "name": "test_find_endpoint_redirections",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_find_endpoint_by_content": {
            "name": "test_find_endpoint_by_content",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_verify_id": {
            "name": "test_verify_id",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_handler_success": {
            "name": "test_handler_success",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_handler_failures": {
            "name": "test_handler_failures",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_login_timeout": {
            "name": "test_login_timeout",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "requests_mock": []
            }
        },
        "test_from_config": {
            "name": "test_from_config",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_profile": {
            "name": "test_get_profile",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_profile_partial": {
            "name": "test_profile_partial",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_server_profile": {
            "name": "test_server_profile",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_profile_caching": {
            "name": "test_profile_caching",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_security_requirements": {
            "name": "test_security_requirements",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handler_success.verify_callback": {
            "name": "verify_callback",
            "location": 231,
            "return": [
                "Dict[str, Any]",
                "Callable",
                "trezor.utils.Writer",
                "str",
                "dict"
            ],
            "arguments": {
                "request": [
                    "Iterator"
                ],
                "_": [
                    "bool"
                ]
            }
        },
        "test_handler_failures.check_failure": {
            "name": "check_failure",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "purplship.providers.ups.utils.Settings",
                    "Optional[str]",
                    "cmk.utils.type_defs.UserId",
                    "Exception",
                    "dict",
                    "List[int]"
                ]
            }
        }
    },
    "Authl-main/tests/handlers/test_test_handler.py": {
        "test_handling": {
            "name": "test_handling",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_success": {
            "name": "test_success",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_failure": {
            "name": "test_failure",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callback": {
            "name": "test_callback",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_misc": {
            "name": "test_misc",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Authl-main/tests/handlers/test_twitter.py": {
        "test_from_config": {
            "name": "test_from_config",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basics": {
            "name": "test_basics",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_misconfigured": {
            "name": "test_misconfigured",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_auth_success": {
            "name": "test_auth_success",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "requests_mock": []
            }
        },
        "test_auth_failures": {
            "name": "test_auth_failures",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "requests_mock": []
            }
        },
        "test_auth_denied": {
            "name": "test_auth_denied",
            "location": 149,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_profile": {
            "name": "test_profile",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "Authl-main/tests/handlers/__init__.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 6,
            "return": [
                "dict"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    }
}
{
    "Backpropagation-master/main.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "neurons_dist_filepath": [
                    "str",
                    "Union[int,float]",
                    "int"
                ],
                "epochs": [
                    "int",
                    "bool"
                ],
                "output": [
                    "str",
                    "bytes",
                    "IO[str]"
                ],
                "visualize_loss": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "model_path": [
                    "str",
                    "bool"
                ],
                "per_class_errors": [
                    "bool"
                ],
                "misclassified": [
                    "bool"
                ],
                "roc_curves": [
                    "bool"
                ]
            }
        }
    },
    "Backpropagation-master/setup.py": {},
    "Backpropagation-master/backpropagation/__init__.py": {},
    "Backpropagation-master/backpropagation/data/utils.py": {
        "read_idx": {
            "name": "read_idx",
            "location": 6,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "image2vector": {
            "name": "image2vector",
            "location": 17,
            "return": [
                "str",
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "float",
                    "Sized",
                    "numpy.ndarray"
                ]
            }
        },
        "convert_images_to_training_samples": {
            "name": "convert_images_to_training_samples",
            "location": 21,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "images": [
                    "List[numpy.ndarray]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "label2vector": {
            "name": "label2vector",
            "location": 28,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "int",
                    "Set[str]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "convert_image_labels_to_training_labels": {
            "name": "convert_image_labels_to_training_labels",
            "location": 34,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "List[int]",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "Backpropagation-master/backpropagation/data/__init__.py": {},
    "Backpropagation-master/backpropagation/network/activation_function.py": {
        "IActivationFunction.calculate_value": {
            "name": "calculate_value",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "Exception",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "IActivationFunction.calculate_derivative_value": {
            "name": "calculate_derivative_value",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "Exception",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "IdentityActivationFunction.calculate_value": {
            "name": "calculate_value",
            "location": 22,
            "return": [
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "Exception",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "IdentityActivationFunction.calculate_derivative_value": {
            "name": "calculate_derivative_value",
            "location": 25,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "SigmoidActivationFunction.calculate_value": {
            "name": "calculate_value",
            "location": 31,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "SigmoidActivationFunction.calculate_derivative_value": {
            "name": "calculate_derivative_value",
            "location": 34,
            "return": [
                "int",
                "str",
                "bool",
                "float",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[int]",
                    "numpy.ndarray",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "nevergrad.common.Callable[[numpy.ndarray],numpy.ndarray]"
                ]
            }
        },
        "ReLUActivationFunction.calculate_value": {
            "name": "calculate_value",
            "location": 40,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "ReLUActivationFunction.calculate_derivative_value": {
            "name": "calculate_derivative_value",
            "location": 43,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "SoftmaxActivationFunction.calculate_value": {
            "name": "calculate_value",
            "location": 49,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "SoftmaxActivationFunction.calculate_derivative_value": {
            "name": "calculate_derivative_value",
            "location": 53,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[int]",
                    "str",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "Backpropagation-master/backpropagation/network/cost_function.py": {
        "ICostFunction.calculate_value": {
            "name": "calculate_value",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "numpy.array"
                ],
                "a": [
                    "numpy.array"
                ]
            }
        },
        "ICostFunction.calculate_derivative_value": {
            "name": "calculate_derivative_value",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Iterable[T]",
                    "bool",
                    "numpy.array"
                ],
                "a": [
                    "Iterable[T]",
                    "bool",
                    "numpy.array"
                ]
            }
        },
        "MSECostFunction.calculate_value": {
            "name": "calculate_value",
            "location": 15,
            "return": [
                "int",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "bool",
                    "numpy.array",
                    "float",
                    "numpy.ndarray",
                    "Union[int,float]"
                ],
                "a": [
                    "numpy.array",
                    "list",
                    "Union[numbers.Real, numpy.ndarray]"
                ]
            }
        },
        "MSECostFunction.calculate_derivative_value": {
            "name": "calculate_derivative_value",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "numpy.array",
                    "Callable[[None], bool]"
                ],
                "a": [
                    "numpy.array",
                    "Callable[[None], bool]"
                ]
            }
        },
        "SECostFunction.calculate_value": {
            "name": "calculate_value",
            "location": 26,
            "return": [
                "int",
                "str",
                "Tuple[int,int]",
                "numpy.ndarray",
                "Tuple[str,int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int",
                    "float",
                    "numpy.array",
                    "Union[int,float]",
                    "Callable[[T],T]"
                ],
                "a": [
                    "int",
                    "float",
                    "numpy.array",
                    "Union[int,float]",
                    "Callable[[T],T]"
                ]
            }
        },
        "SECostFunction.calculate_derivative_value": {
            "name": "calculate_derivative_value",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "numpy.array",
                    "Callable[[None], bool]"
                ],
                "a": [
                    "numpy.array",
                    "Callable[[None], bool]"
                ]
            }
        },
        "CrossEntropyCostFunction.calculate_value": {
            "name": "calculate_value",
            "location": 35,
            "return": [
                "Callable",
                "Tuple[numpy.ndarray]",
                "str"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "numpy.array",
                    "numpy.ndarray",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "a": [
                    "numpy.array",
                    "numpy.ndarray",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "CrossEntropyCostFunction.calculate_derivative_value": {
            "name": "calculate_derivative_value",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "numpy.array",
                    "Callable[[None], bool]"
                ],
                "a": [
                    "numpy.array",
                    "Callable[[None], bool]"
                ]
            }
        }
    },
    "Backpropagation-master/backpropagation/network/neural_network.py": {
        "NeuralNetwork.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "neurons_count_per_layer": [
                    "int",
                    "Optional[int]",
                    "Callable[[str], int]",
                    "bool"
                ],
                "activation_functions": [
                    "bool",
                    "str",
                    "int",
                    "None",
                    "float",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "cost_function": [
                    "bool",
                    "str",
                    "int",
                    "None",
                    "float",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "regularizator": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "float",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "random_seed": [
                    "int",
                    "None",
                    "bytes",
                    "Optional[int]",
                    "Optional[bool]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NeuralNetwork._create_weight_matrix": {
            "name": "_create_weight_matrix",
            "location": 60,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Dict"
                ]
            }
        },
        "NeuralNetwork._feedforward": {
            "name": "_feedforward",
            "location": 79,
            "return": [
                "int",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        },
        "NeuralNetwork.get_cost_function_value": {
            "name": "get_cost_function_value",
            "location": 95,
            "return": [
                "Optional[Dict[str, Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool"
                ],
                "y": [
                    "bool",
                    "numpy.array"
                ]
            }
        },
        "NeuralNetwork._collect_activation_function_arguments_and_values": {
            "name": "_collect_activation_function_arguments_and_values",
            "location": 108,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "NeuralNetwork._backpropagation": {
            "name": "_backpropagation",
            "location": 133,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ]
            }
        },
        "NeuralNetwork._update_weights": {
            "name": "_update_weights",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gradient": [
                    "numpy.ndarray",
                    "Any",
                    "str",
                    "Optional[Any]",
                    "None"
                ],
                "learning_rate": [
                    "numpy.ndarray",
                    "Any",
                    "str",
                    "Optional[Any]",
                    "None"
                ],
                "regularization_param": [
                    "str",
                    "TextIO",
                    "bool"
                ],
                "samples_count": [
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "NeuralNetwork._stochastic_gradient_descent": {
            "name": "_stochastic_gradient_descent",
            "location": 204,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "numpy.ndarray",
                    "int",
                    "List[list]",
                    "Union[int, str]",
                    "bytes",
                    "List[int]",
                    "list"
                ],
                "labels": [
                    "str",
                    "numpy.array",
                    "int",
                    "Dict"
                ],
                "learning_rate": [
                    "float",
                    "int",
                    "Dict[str,Any]",
                    "List[List[str]]",
                    "List[int]",
                    "List[List[int]]",
                    "List"
                ],
                "regularization_param": [
                    "float",
                    "int",
                    "Dict[str,Any]",
                    "List[List[str]]",
                    "List[int]",
                    "List[List[int]]",
                    "List"
                ],
                "mini_batch_size": [
                    "int",
                    "List",
                    "Union[int,numpy.ndarray]",
                    "List[list]",
                    "Sequence[T]",
                    "numpy.ndarray",
                    "List[int]",
                    "List[str]",
                    "Tuple"
                ],
                "epochs_count": [
                    "int",
                    "Dict[str,Any]",
                    "List[List[str]]",
                    "List[int]",
                    "List[List[int]]",
                    "List"
                ],
                "test_samples": [
                    "Optional[Any]",
                    "None",
                    "Dict[str,int]",
                    "List[List[str]]",
                    "Any",
                    "List[list[str]]"
                ],
                "test_labels": [
                    "Optional[Any]",
                    "None",
                    "Dict[str,int]",
                    "List[List[str]]",
                    "Any",
                    "List[list[str]]"
                ]
            }
        },
        "NeuralNetwork._backpropagation.propagate_backwards": {
            "name": "propagate_backwards",
            "location": 151,
            "return": [
                "Tuple",
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "errors": [
                    "Tuple[numpy.array, numpy.array]",
                    "str",
                    "int",
                    "Type[object]"
                ],
                "layer": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "Backpropagation-master/backpropagation/network/regularizator.py": {
        "IRegulatizator.get_term": {
            "name": "get_term",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regularization_param": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool"
                ],
                "weights": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool"
                ],
                "n": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool"
                ]
            }
        },
        "IRegulatizator.get_derivative_terms": {
            "name": "get_derivative_terms",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regularization_param": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool"
                ],
                "weights": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool"
                ],
                "n": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool"
                ]
            }
        },
        "L1Regularizator.get_term": {
            "name": "get_term",
            "location": 21,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "regularization_param": [
                    "float",
                    "int",
                    "List[numpy.array]"
                ],
                "weights": [
                    "List[numpy.array]",
                    "float",
                    "int"
                ],
                "n": [
                    "float",
                    "int",
                    "List[numpy.array]"
                ]
            }
        },
        "L1Regularizator.get_derivative_terms": {
            "name": "get_derivative_terms",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "regularization_param": [
                    "float",
                    "int",
                    "List[numpy.array]"
                ],
                "weights": [
                    "List[numpy.array]",
                    "float",
                    "int"
                ],
                "n": [
                    "float",
                    "int",
                    "List[numpy.array]"
                ]
            }
        },
        "L2Regularizator.get_term": {
            "name": "get_term",
            "location": 34,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "regularization_param": [
                    "float",
                    "int",
                    "List[numpy.array]"
                ],
                "weights": [
                    "List[numpy.array]",
                    "float",
                    "int"
                ],
                "n": [
                    "float",
                    "List[numpy.array]",
                    "int"
                ]
            }
        },
        "L2Regularizator.get_derivative_terms": {
            "name": "get_derivative_terms",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "regularization_param": [
                    "float",
                    "int",
                    "List[numpy.array]"
                ],
                "weights": [
                    "List[numpy.array]",
                    "float",
                    "int"
                ],
                "n": [
                    "float",
                    "int",
                    "List[numpy.array]"
                ]
            }
        }
    },
    "Backpropagation-master/backpropagation/network/test_neural_network.py": {
        "test_multiple": {
            "name": "test_multiple",
            "location": 5,
            "return": [
                "List[Tuple[(Any, Any, Any)]]"
            ],
            "arguments": {
                "nn": [
                    "List[numpy.array]",
                    "List[int]",
                    "bool",
                    "str",
                    "int"
                ],
                "samples": [
                    "List[numpy.array]",
                    "List[int]",
                    "bool",
                    "str",
                    "int"
                ],
                "labels": [
                    "List[numpy.array]",
                    "List[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "Backpropagation-master/backpropagation/network/__init__.py": {},
    "Backpropagation-master/docs/conf.py": {},
    "Backpropagation-master/tests/test-network/test_activation_function.py": {
        "test_sigmoid_function_value": {
            "name": "test_sigmoid_function_value",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "bool",
                    "List[str]",
                    "List",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_sigmoid_function_derivative_value": {
            "name": "test_sigmoid_function_derivative_value",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "raiden.network.proxies.proxy_manager.ProxyManager"
                ],
                "expected": [
                    "str",
                    "int",
                    "List",
                    "Union[int,str]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_identity_function_value": {
            "name": "test_identity_function_value",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "bool",
                    "List[str]",
                    "List",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_identity_function_derivative_value": {
            "name": "test_identity_function_derivative_value",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "raiden.network.proxies.proxy_manager.ProxyManager"
                ],
                "expected": [
                    "str",
                    "int",
                    "List",
                    "Union[int,str]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_relu_function_value": {
            "name": "test_relu_function_value",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "bool",
                    "List[str]",
                    "List",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_relu_function_derivative_value": {
            "name": "test_relu_function_derivative_value",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "raiden.network.proxies.proxy_manager.ProxyManager"
                ],
                "expected": [
                    "str",
                    "int",
                    "List",
                    "Union[int,str]",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "Backpropagation-master/tests/test-network/test_cost_function.py": {
        "test_mse_function_value": {
            "name": "test_mse_function_value",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "y": [
                    "List[float]",
                    "int",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ],
                "a": [
                    "List[float]",
                    "int",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ],
                "expected": [
                    "List",
                    "int",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "test_mse_function_derivative_value": {
            "name": "test_mse_function_derivative_value",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "y": [
                    "List[float]",
                    "str",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ],
                "a": [
                    "List[float]",
                    "str",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ],
                "expected": [
                    "List",
                    "int",
                    "List[list[Any]]",
                    "List[List[Any]]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_se_function_value": {
            "name": "test_se_function_value",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "y": [
                    "List[float]",
                    "int",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ],
                "a": [
                    "List[float]",
                    "int",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ],
                "expected": [
                    "List",
                    "int",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "test_se_function_derivative_value": {
            "name": "test_se_function_derivative_value",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "y": [
                    "List[float]",
                    "str",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ],
                "a": [
                    "List[float]",
                    "str",
                    "Tuple[float,float,float]",
                    "Tuple[Union[float,float,float]]"
                ],
                "expected": [
                    "List",
                    "int",
                    "List[list[Any]]",
                    "List[List[Any]]",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "Backpropagation-master/tests/test-network/test_neural_network.py": {
        "test_neural_network_feedforward": {
            "name": "test_neural_network_feedforward",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "neurons_count_per_layer": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "weights": [
                    "str",
                    "int",
                    "float",
                    "click.testing.CliRunner",
                    "Union[str,float]"
                ],
                "activation": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "test_input": [],
                "expected": []
            }
        },
        "test_neural_network_cost_value": {
            "name": "test_neural_network_cost_value",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "neurons_count_per_layer": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "weights": [
                    "bool",
                    "str",
                    "List[numpy.array]",
                    "List[int]"
                ],
                "X_input": [
                    "Callable"
                ],
                "y_input": [
                    "Callable"
                ],
                "expected": [
                    "BinaryIO",
                    "bool",
                    "Iterable[Any]",
                    "Sequence[numpy.ndarray]",
                    "numpy.ndarray",
                    "List"
                ]
            }
        },
        "test_neural_network_backpropagation": {
            "name": "test_neural_network_backpropagation",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "neurons_count_per_layer": [],
                "weights": [
                    "str",
                    "bool",
                    "List[numpy.array]",
                    "List[int]",
                    "int"
                ],
                "X": [
                    "int",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "y": [
                    "List[float]",
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "expected": [
                    "str",
                    "bool",
                    "List[numpy.array]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "test_neural_network_gradient_descent": {
            "name": "test_neural_network_gradient_descent",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "neurons_count_per_layer": [
                    "numpy.ndarray",
                    "int"
                ],
                "weights": [
                    "str",
                    "int",
                    "List[numpy.array]",
                    "List[int]",
                    "bool"
                ],
                "X": [
                    "int",
                    "float",
                    "List[float]",
                    "Tuple[int]"
                ],
                "y": [
                    "int",
                    "float",
                    "Tuple[int]",
                    "numpy.ndarray"
                ],
                "regularizator": [
                    "int",
                    "numpy.ndarray"
                ],
                "expected": [
                    "str",
                    "int",
                    "List[numpy.array]",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "Backpropagation-master/tests/test-network/test_regularizator.py": {
        "test_l2_regularizator_term": {
            "name": "test_l2_regularizator_term",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "regularization_term": [
                    "bool",
                    "BaseException"
                ],
                "weights": [
                    "bool",
                    "BaseException"
                ],
                "n": [
                    "bool",
                    "BaseException"
                ],
                "expected": [
                    "float",
                    "int",
                    "Sequence[Union[str,Any]]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "test_l2_regularizator_derivative_terms": {
            "name": "test_l2_regularizator_derivative_terms",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "regularization_term": [
                    "bool",
                    "BaseException"
                ],
                "weights": [
                    "bool",
                    "BaseException"
                ],
                "n": [
                    "bool",
                    "BaseException"
                ],
                "expected": [
                    "int",
                    "float",
                    "Callable[[str,str],float]",
                    "Callable[str,str,float]"
                ]
            }
        },
        "test_l1_regularizator_term": {
            "name": "test_l1_regularizator_term",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "regularization_term": [
                    "bool",
                    "BaseException"
                ],
                "weights": [
                    "bool",
                    "BaseException"
                ],
                "n": [
                    "bool",
                    "BaseException"
                ],
                "expected": [
                    "float",
                    "int",
                    "Sequence[Union[str,Any]]",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "test_l1_regularizator_derivative_terms": {
            "name": "test_l1_regularizator_derivative_terms",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "regularization_term": [
                    "bool",
                    "BaseException"
                ],
                "weights": [
                    "bool",
                    "BaseException"
                ],
                "n": [
                    "bool",
                    "BaseException"
                ],
                "expected": [
                    "int",
                    "float",
                    "Callable[[str,str],float]",
                    "Callable[str,str,float]"
                ]
            }
        }
    }
}
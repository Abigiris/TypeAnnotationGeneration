{
    "Baseline_RL-master/main.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Baseline_RL-master/algorithms/A2C.py": {
        "A2C.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "model": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "optim": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "device": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "hyperparams": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "tensorboard_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "A2C.memory_reset": {
            "name": "memory_reset",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A2C.select_action": {
            "name": "select_action",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "A2C.compute_return": {
            "name": "compute_return",
            "location": 61,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "last_value": [
                    "int",
                    "torch.Tensor",
                    "str",
                    "Iterator",
                    "Iterator[int]",
                    "List[int]",
                    "float",
                    "Union[int,List[int]]",
                    "Union[int,float]"
                ]
            }
        },
        "A2C.train_model": {
            "name": "train_model",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_state": [
                    "torch.Tensor"
                ]
            }
        },
        "A2C.train": {
            "name": "train",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Baseline_RL-master/algorithms/DDPG.py": {
        "DDPG.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "actor": [],
                "critic": [],
                "target_actor": [],
                "target_critic": [],
                "actor_optim": [],
                "critic_optim": [],
                "device": [],
                "hyperparams": [],
                "tensorboard_path": []
            }
        },
        "DDPG.select_action": {
            "name": "select_action",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DDPG.train_model": {
            "name": "train_model",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPG.train": {
            "name": "train",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Baseline_RL-master/algorithms/DQN.py": {
        "DQN.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "online_net": [
                    "bool",
                    "str",
                    "List"
                ],
                "target_net": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "optim": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "device": [
                    "bool",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "hyperparams": [
                    "str",
                    "List[Any]",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Optional[int]",
                    "Optional[List[Any]]"
                ],
                "tensorboard_path": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "Union[str,Iterable[str]]",
                    "Dict[str,pypi2nix.utils.NixOption]",
                    "Optional[List[str]]"
                ]
            }
        },
        "DQN.decay_epsilon": {
            "name": "decay_epsilon",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQN.increase_beta": {
            "name": "increase_beta",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQN.select_action": {
            "name": "select_action",
            "location": 50,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict[str,int]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str,torch.Tensor]",
                    "torch.Tensor",
                    "bool",
                    "Dict[core.Edge,state.State]"
                ]
            }
        },
        "DQN.train_model": {
            "name": "train_model",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQN.train": {
            "name": "train",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Baseline_RL-master/algorithms/PPO.py": {
        "PPO.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "model": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "optim": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "device": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "hyperparams": [
                    "bool",
                    "str",
                    "int",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "tensorboard_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "PPO.memory_reset": {
            "name": "memory_reset",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PPO.select_action": {
            "name": "select_action",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[core.Edge,state.State]",
                    "numpy.ndarray"
                ]
            }
        },
        "PPO.compute_gae": {
            "name": "compute_gae",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "last_value": [
                    "str",
                    "float",
                    "T"
                ]
            }
        },
        "PPO.ppo_iter": {
            "name": "ppo_iter",
            "location": 79,
            "return": [
                "Generator[(Tuple[(Any, Any, Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "torch.LongTensor",
                    "bool",
                    "str"
                ],
                "actions": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "int",
                    "numpy.array"
                ],
                "log_probs": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "int",
                    "numpy.array"
                ],
                "returns": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "int",
                    "numpy.array"
                ],
                "advantage": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "int",
                    "numpy.array"
                ]
            }
        },
        "PPO.ppo_update": {
            "name": "ppo_update",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "List[Callable]",
                    "Optional[str]",
                    "str",
                    "Dict[str,Dict]",
                    "None",
                    "Dict[str,dict]"
                ],
                "actions": [
                    "List[Callable]",
                    "Optional[str]",
                    "str",
                    "Dict[str,Dict]",
                    "None",
                    "Dict[str,dict]"
                ],
                "log_probs": [
                    "List[Callable]",
                    "Optional[str]",
                    "str",
                    "Dict[str,Dict]",
                    "None",
                    "Dict[str,dict]"
                ],
                "returns": [
                    "List[Callable]",
                    "Optional[str]",
                    "str",
                    "Dict[str,Dict]",
                    "None",
                    "Dict[str,dict]"
                ],
                "advantage": [
                    "List[Callable]",
                    "Optional[str]",
                    "str",
                    "Dict[str,Dict]",
                    "None",
                    "Dict[str,dict]"
                ]
            }
        },
        "PPO.train_model": {
            "name": "train_model",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_state": [
                    "torch.Tensor"
                ]
            }
        },
        "PPO.train": {
            "name": "train",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Baseline_RL-master/algorithms/TD3.py": {
        "TD3.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "Callable",
                    "float"
                ],
                "actor": [
                    "str",
                    "gym.Env",
                    "Dict",
                    "Mapping",
                    "List[str]",
                    "Mapping[str,str]"
                ],
                "critic1": [
                    "str",
                    "gym.Env",
                    "Dict",
                    "Mapping",
                    "List[str]",
                    "Mapping[str,str]"
                ],
                "critic2": [
                    "str",
                    "gym.Env",
                    "Dict",
                    "Mapping",
                    "List[str]",
                    "Mapping[str,str]"
                ],
                "target_actor": [
                    "bool",
                    "float",
                    "Dict",
                    "utils.parser.BinaryParser"
                ],
                "target_critic1": [
                    "bool",
                    "float",
                    "Dict",
                    "utils.parser.BinaryParser"
                ],
                "target_critic2": [
                    "bool",
                    "float",
                    "Dict",
                    "utils.parser.BinaryParser"
                ],
                "actor_optim": [
                    "str",
                    "gym.Env",
                    "Dict",
                    "Mapping",
                    "List[str]",
                    "Mapping[str,str]"
                ],
                "critic_optim1": [
                    "str",
                    "gym.Env",
                    "Dict",
                    "Mapping",
                    "List[str]",
                    "Mapping[str,str]"
                ],
                "critic_optim2": [
                    "str",
                    "gym.Env",
                    "Dict",
                    "Mapping",
                    "List[str]",
                    "Mapping[str,str]"
                ],
                "device": [
                    "str",
                    "gym.Env",
                    "Dict",
                    "Mapping",
                    "List[str]",
                    "Mapping[str,str]"
                ],
                "hyperparams": [
                    "str",
                    "List[str]",
                    "gym.Env",
                    "Mapping[str,str]",
                    "Dict"
                ],
                "tensorboard_path": [
                    "str"
                ]
            }
        },
        "TD3.select_action": {
            "name": "select_action",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str,torch.Tensor]",
                    "torch.Tensor",
                    "bool",
                    "Dict[core.Edge,state.State]"
                ]
            }
        },
        "TD3.train_model": {
            "name": "train_model",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "Iterable[T]",
                    "Optional[Iterable[T]]",
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "TD3.train": {
            "name": "train",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Baseline_RL-master/algorithms/models/cnn.py": {
        "CNN.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "List",
                    "int",
                    "List[bytes]",
                    "List[int]",
                    "List[list[str]]",
                    "torch.LongTensor",
                    "List[List[str]]",
                    "bool"
                ],
                "output_size": [
                    "int",
                    "Dict[str,int]",
                    "List[str]",
                    "str",
                    "Dict[int,Tuple[int,int]]",
                    "Dict[int,tuple[Union[int,int]]]"
                ],
                "conv_layers": [
                    "List",
                    "List[int]",
                    "List[Tuple[str,str]]",
                    "Dict[int,str]",
                    "List[tuple[Union[str,str]]]"
                ],
                "hidden_sizes": [
                    "List",
                    "List[int]",
                    "List[Tuple[str,str]]",
                    "Dict[int,str]",
                    "List[tuple[Union[str,str]]]"
                ],
                "hidden_activation": [
                    "int",
                    "bool",
                    "str"
                ],
                "output_activation": [
                    "int",
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "CNN.forward": {
            "name": "forward",
            "location": 46,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ]
            }
        }
    },
    "Baseline_RL-master/algorithms/models/mlp.py": {
        "MLP.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "List",
                    "Callable",
                    "List[int]"
                ],
                "hidden_sizes": [
                    "List",
                    "List[float]",
                    "List[List[float]]",
                    "List[list[float]]"
                ],
                "output_size": [
                    "int",
                    "str",
                    "Callable",
                    "bool",
                    "List[int]",
                    "Optional[str]"
                ],
                "hidden_activation": [
                    "torch.Tensor",
                    "List[List[str]]",
                    "bool"
                ],
                "output_activation": [
                    "Callable",
                    "list",
                    "str"
                ]
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 56,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "SepMLP.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float",
                    "Union[Tuple[int,int],int]",
                    "Tuple[Union[int,int]]"
                ],
                "hidden_sizes1": [
                    "int",
                    "float",
                    "Union[Tuple[int,int],int]",
                    "Tuple[Union[int,int]]"
                ],
                "hidden_sizes2": [
                    "int",
                    "float",
                    "Union[Tuple[int,int],int]",
                    "Tuple[Union[int,int]]"
                ],
                "output_size1": [
                    "int",
                    "float",
                    "Union[Tuple[int,int],int]",
                    "Tuple[Union[int,int]]"
                ],
                "output_size2": [
                    "int",
                    "float",
                    "Union[Tuple[int,int],int]",
                    "Tuple[Union[int,int]]"
                ],
                "hidden_activation": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "output_activation1": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "output_activation2": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ]
            }
        },
        "SepMLP.forward": {
            "name": "forward",
            "location": 91,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "ShareMLP.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "List[int]",
                    "Optional[torch.nn.Module]",
                    "None"
                ],
                "hidden_sizes": [
                    "List[int]",
                    "int",
                    "Optional[torch.nn.Module]"
                ],
                "output_sizes1": [
                    "List[int]",
                    "int"
                ],
                "output_sizes2": [
                    "List[int]",
                    "int"
                ],
                "hidden_activation": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]"
                ],
                "output_activation1": [
                    "int",
                    "Callable",
                    "Iterator[int]"
                ],
                "output_activation2": [
                    "int",
                    "Callable",
                    "Iterator[int]"
                ]
            }
        },
        "ShareMLP.forward": {
            "name": "forward",
            "location": 142,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int"
                ]
            }
        },
        "CategoricalDist.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "Callable",
                    "int",
                    "List"
                ],
                "hidden_sizes": [
                    "Callable",
                    "int",
                    "List"
                ],
                "output_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "hidden_activation": [
                    "Callable",
                    "int",
                    "list"
                ],
                "output_activation": [
                    "Callable",
                    "int",
                    "list"
                ]
            }
        },
        "CategoricalDist.forward": {
            "name": "forward",
            "location": 167,
            "return": [
                "Categorical",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int"
                ]
            }
        },
        "NormalDist.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "Callable",
                    "int",
                    "List"
                ],
                "hidden_sizes": [
                    "Callable",
                    "int",
                    "List"
                ],
                "output_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "hidden_activation": [
                    "Callable",
                    "int",
                    "list"
                ],
                "output_activation": [
                    "Callable",
                    "int",
                    "list"
                ],
                "std": [
                    "float",
                    "List",
                    "List[List[float]]",
                    "List[float]"
                ]
            }
        },
        "NormalDist.forward": {
            "name": "forward",
            "location": 190,
            "return": [
                "Normal",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int"
                ]
            }
        },
        "SepNormalDist.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "mu_hidden_sizes": [
                    "int",
                    "Callable",
                    "List"
                ],
                "sigma_hidden_sizes": [
                    "int",
                    "Callable",
                    "List"
                ],
                "mu_output_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "sigma_output_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "hidden_activation": [
                    "int",
                    "Callable",
                    "list"
                ],
                "mu_output_activation": [
                    "int",
                    "Callable",
                    "list"
                ],
                "sigma_output_activation": [
                    "int",
                    "Callable",
                    "list"
                ]
            }
        },
        "SepNormalDist.forward": {
            "name": "forward",
            "location": 218,
            "return": [
                "Normal",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "utils.CWLObjectType"
                ]
            }
        },
        "ShareNormalDist.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "hidden_sizes": [
                    "int",
                    "Callable",
                    "List"
                ],
                "mu_output_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "sigma_output_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "hidden_activation": [
                    "int",
                    "Callable",
                    "list"
                ],
                "mu_output_activation": [
                    "int",
                    "Callable",
                    "list"
                ],
                "sigma_output_activation": [
                    "int",
                    "Callable",
                    "list"
                ]
            }
        },
        "ShareNormalDist.forward": {
            "name": "forward",
            "location": 244,
            "return": [
                "Normal",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "utils.CWLObjectType"
                ]
            }
        },
        "SepActorCritic.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actor": [
                    "int",
                    "float",
                    "bool"
                ],
                "critic": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SepActorCritic.forward": {
            "name": "forward",
            "location": 261,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "mode.utils.types.graphs._T"
                ]
            }
        },
        "ShareActorCritic.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "hidden_sizes": [
                    "int",
                    "Callable",
                    "List"
                ],
                "actor_output_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "critic_output_size": [
                    "int",
                    "Callable",
                    "List"
                ],
                "dist": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "std": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "hidden_activation": [
                    "int",
                    "Callable",
                    "list"
                ],
                "actor_output_activation": [
                    "int",
                    "Callable",
                    "list"
                ],
                "critic_output_activation": [
                    "int",
                    "Callable",
                    "list"
                ]
            }
        },
        "ShareActorCritic.forward": {
            "name": "forward",
            "location": 295,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "utils.CWLObjectType"
                ]
            }
        },
        "DuelingMLP.forward": {
            "name": "forward",
            "location": 310,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        }
    },
    "Baseline_RL-master/algorithms/models/utils.py": {
        "init_linear_weights_xavier": {
            "name": "init_linear_weights_xavier",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "float",
                    "Iterable[str]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "None",
                    "Optional[int]"
                ]
            }
        }
    },
    "Baseline_RL-master/algorithms/utils/buffer.py": {
        "ReplayMemory.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": []
            }
        },
        "ReplayMemory.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplayMemory.save": {
            "name": "save",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplayMemory.sample": {
            "name": "sample",
            "location": 71,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "n_sample": []
            }
        },
        "PrioritizedReplayMemory.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [],
                "prob_alpha": [
                    "float"
                ]
            }
        },
        "PrioritizedReplayMemory.save": {
            "name": "save",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrioritizedReplayMemory.sample": {
            "name": "sample",
            "location": 96,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "beta": [
                    "float"
                ]
            }
        },
        "PrioritizedReplayMemory.update_priorities": {
            "name": "update_priorities",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indices": [],
                "priorities": []
            }
        }
    },
    "Baseline_RL-master/algorithms/utils/noise.py": {
        "GaussianNoise.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_dim": [
                    "int",
                    "float",
                    "bool"
                ],
                "min_sigma": [
                    "float",
                    "int",
                    "bool"
                ],
                "max_sigma": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "decay_period": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "GaussianNoise.sample": {
            "name": "sample",
            "location": 28,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "OUNoise.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ],
                "mu": [
                    "float",
                    "int",
                    "bytes"
                ],
                "theta": [
                    "float",
                    "int",
                    "bytes"
                ],
                "sigma": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "OUNoise.reset": {
            "name": "reset",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OUNoise.sample": {
            "name": "sample",
            "location": 60,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Baseline_RL-master/algorithms/utils/update.py": {
        "soft_update": {
            "name": "soft_update",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "local": [
                    "torch.nn.Module",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "target": [
                    "torch.nn.Module",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "tau": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "hard_update": {
            "name": "hard_update",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "local": [
                    "torch.nn.Module"
                ],
                "target": [
                    "torch.nn.Module"
                ]
            }
        }
    },
    "Baseline_RL-master/common/logger.py": {},
    "Baseline_RL-master/common/parse.py": {
        "get_config": {
            "name": "get_config",
            "location": 3,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "Baseline_RL-master/common/pyinquirer.py": {
        "select_project": {
            "name": "select_project",
            "location": 15,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "projects_dir": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "Baseline_RL-master/common/utils.py": {
        "restore_wandb": {
            "name": "restore_wandb",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "user_name": [],
                "project": [],
                "run_id": [],
                "params_path": [],
                "hyperparams_path": []
            }
        },
        "restore_hyperparams": {
            "name": "restore_hyperparams",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "hyperparams_path": []
            }
        },
        "save_hyperparams": {
            "name": "save_hyperparams",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperparams": [],
                "hyperparams_path": []
            }
        },
        "restore_model_params": {
            "name": "restore_model_params",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "params_path": []
            }
        },
        "save_model_params": {
            "name": "save_model_params",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "params_path": []
            }
        },
        "save_wandb": {
            "name": "save_wandb",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "params_path": [],
                "hyperparams_path": [],
                "video_dir": []
            }
        },
        "check_path_and_make_dir": {
            "name": "check_path_and_make_dir",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "remove_dir": {
            "name": "remove_dir",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_name": []
            }
        }
    },
    "Baseline_RL-master/common/abstract/base_agent.py": {
        "BaseAgent.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensorboard_path": [
                    "List[int]",
                    "str"
                ]
            }
        },
        "BaseAgent.train": {
            "name": "train",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.test": {
            "name": "test",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAgent.write_log": {
            "name": "write_log",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_step": [
                    "str",
                    "numpy.ndarray",
                    "Tuple[int]",
                    "int",
                    "float",
                    "List[tuple[Union[str,float,int,float]]]",
                    "List[Tuple[str,float,int,float]]"
                ]
            }
        }
    },
    "Baseline_RL-master/common/abstract/base_env.py": {
        "worker": {
            "name": "worker",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "remote": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "AbstractSet"
                ],
                "parent_remote": [
                    "bool",
                    "float",
                    "Dict[str, int]",
                    "Optional[List[str]]"
                ],
                "env_fn_wrapper": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "VecEnv.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_envs": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "observation_space": [
                    "int",
                    "float",
                    "Union[str,float]",
                    "str"
                ],
                "action_space": [
                    "int",
                    "float",
                    "Union[str,float]",
                    "str"
                ]
            }
        },
        "VecEnv.reset": {
            "name": "reset",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.step_async": {
            "name": "step_async",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "VecEnv.step_wait": {
            "name": "step_wait",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.close": {
            "name": "close",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.step": {
            "name": "step",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "str",
                    "OrderedDict",
                    "DefaultDict[int,List[Any]]",
                    "DefaultDict"
                ]
            }
        },
        "CloudpickleWrapper.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "CloudpickleWrapper.__getstate__": {
            "name": "__getstate__",
            "location": 102,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudpickleWrapper.__setstate__": {
            "name": "__setstate__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ob": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "MultipleEnv.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "n_envs": [
                    "int",
                    "bytes",
                    "float",
                    "List[str]",
                    "Optional[float]",
                    "List[int]",
                    "List[bytes]",
                    "None"
                ],
                "max_episode_steps": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "str"
                ],
                "monitor_func": [
                    "bool",
                    "None",
                    "Callable[...,str]",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "MultipleEnv.step_async": {
            "name": "step_async",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MultipleEnv.step_wait": {
            "name": "step_wait",
            "location": 153,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleEnv.seed": {
            "name": "seed",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "List[list[str]]",
                    "List[List[str]]",
                    "bytes"
                ]
            }
        },
        "MultipleEnv.render": {
            "name": "render",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleEnv.env": {
            "name": "env",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleEnv.reset": {
            "name": "reset",
            "location": 178,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleEnv.reset_task": {
            "name": "reset_task",
            "location": 183,
            "return": [
                "bool",
                "float",
                "Tuple[float]",
                "List[int]",
                "Tuple[int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleEnv.random_action": {
            "name": "random_action",
            "location": 188,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleEnv.close": {
            "name": "close",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleEnv._gen_env_func": {
            "name": "_gen_env_func",
            "location": 205,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": [],
                "monitor_func": [
                    "str",
                    "None",
                    "List",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "MultipleEnv._make_env_fns": {
            "name": "_make_env_fns",
            "location": 220,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "monitor_func": [
                    "List[str]",
                    "List",
                    "Dict",
                    "int"
                ]
            }
        },
        "MultipleEnv._set_space": {
            "name": "_set_space",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation_space": [
                    "float"
                ],
                "action_space": [
                    "int",
                    "str",
                    "Dict",
                    "List"
                ]
            }
        },
        "MultipleEnv.__len__": {
            "name": "__len__",
            "location": 245,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleEnv.env.close": {
            "name": "close",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MultipleEnv._gen_env_func._thunk": {
            "name": "_thunk",
            "location": 206,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "Baseline_RL-master/common/abstract/base_project.py": {
        "BaseProject.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BaseProject.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProject.init_env": {
            "name": "init_env",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyperparams": []
            }
        },
        "BaseProject.init_model": {
            "name": "init_model",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "hyperparams": []
            }
        },
        "BaseProject.init_agent": {
            "name": "init_agent",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "model": [],
                "hyperparams": []
            }
        },
        "BaseProject.is_render": {
            "name": "is_render",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseProject.is_test": {
            "name": "is_test",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseProject.is_load": {
            "name": "is_load",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseProject.is_record": {
            "name": "is_record",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseProject.monitor_func": {
            "name": "monitor_func",
            "location": 130,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "video_callable": [],
                "force": [
                    "bool"
                ]
            }
        },
        "BaseProject.run": {
            "name": "run",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProject.monitor_func._func": {
            "name": "_func",
            "location": 140,
            "return": [
                "Monitor"
            ],
            "arguments": {
                "env": []
            }
        }
    },
    "Baseline_RL-master/environments/atari.py": {
        "cvt_gray_resize_half": {
            "name": "cvt_gray_resize_half",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "frame": [],
                "height": [
                    "int"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "Atari.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_id": [],
                "max_episode": [
                    "int"
                ],
                "max_episode_steps": [
                    "None"
                ],
                "recent_score_len": [
                    "int"
                ],
                "monitor_func": [
                    "typing.Callable[, ]"
                ],
                "n_history": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "no_op": [
                    "int"
                ]
            }
        },
        "Atari._reset": {
            "name": "_reset",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Atari.reset": {
            "name": "reset",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atari.step": {
            "name": "step",
            "location": 57,
            "return": [
                "Tuple[(Any, Any, np.ndarray, Any)]"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        }
    },
    "Baseline_RL-master/environments/gym.py": {
        "Gym.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_id": [],
                "n_envs": [],
                "is_render": [
                    "bool"
                ],
                "max_episode": [
                    "int"
                ],
                "max_episode_steps": [
                    "None"
                ],
                "recent_score_len": [
                    "int"
                ],
                "monitor_func": [
                    "typing.Callable[, ]"
                ],
                "clip_action": [
                    "bool"
                ],
                "scale_action": [
                    "bool"
                ]
            }
        },
        "Gym.reset": {
            "name": "reset",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gym.close": {
            "name": "close",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gym.step": {
            "name": "step",
            "location": 64,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Gym.render": {
            "name": "render",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gym.seed": {
            "name": "seed",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "Gym.random_action": {
            "name": "random_action",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gym.first_env_ep_done": {
            "name": "first_env_ep_done",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Baseline_RL-master/projects/policy_based/A2C_CartPole-v1.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 10,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 24,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 35,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "float",
                    "bool"
                ],
                "hyperparams": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 55,
            "return": [
                "algorithms.A2C.A2C"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "model": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[Dict]"
                ],
                "hyperparams": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        }
    },
    "Baseline_RL-master/projects/policy_based/DDPG_Pendulum-v0.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 11,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 27,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv"
                ],
                "hyperparams": [
                    "str",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv",
                    "int"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 76,
            "return": [
                "DDPG",
                "str",
                "List[str]",
                "qutebrowser.utils.usertypes.Backend",
                "int"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "model": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[Dict[str,str]]"
                ],
                "hyperparams": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "Baseline_RL-master/projects/policy_based/PPO_Acrobot-v1.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 10,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 29,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 38,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "float",
                    "bool"
                ],
                "hyperparams": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 58,
            "return": [
                "algorithms.PPO.PPO"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ],
                "models": [
                    "str"
                ],
                "hyperparams": [
                    "str"
                ]
            }
        }
    },
    "Baseline_RL-master/projects/policy_based/PPO_BipedalWalker-v2.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 11,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 29,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "str",
                    "torch.Tensor"
                ],
                "hyperparams": [
                    "str",
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 60,
            "return": [
                "algorithms.PPO.PPO"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ],
                "models": [
                    "str"
                ],
                "hyperparams": [
                    "str"
                ]
            }
        }
    },
    "Baseline_RL-master/projects/policy_based/PPO_LunarLander-v2.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 12,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 31,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 40,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "str",
                    "torch.Tensor"
                ],
                "hyperparams": [
                    "str",
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 61,
            "return": [
                "algorithms.PPO.PPO"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ],
                "models": [
                    "str"
                ],
                "hyperparams": [
                    "str"
                ]
            }
        }
    },
    "Baseline_RL-master/projects/policy_based/PPO_Pendulum-v0.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 11,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 29,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "str",
                    "torch.Tensor"
                ],
                "hyperparams": [
                    "str",
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 60,
            "return": [
                "algorithms.PPO.PPO"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ],
                "models": [
                    "str"
                ],
                "hyperparams": [
                    "str"
                ]
            }
        }
    },
    "Baseline_RL-master/projects/policy_based/PPO_RoboschoolHalfCheetah-v1.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 11,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 31,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 42,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "str",
                    "torch.Tensor"
                ],
                "hyperparams": [
                    "str",
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 63,
            "return": [
                "algorithms.PPO.PPO"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ],
                "models": [
                    "str"
                ],
                "hyperparams": [
                    "str"
                ]
            }
        }
    },
    "Baseline_RL-master/projects/policy_based/TD3_BipedalWalker-v2.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 14,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 33,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv"
                ],
                "hyperparams": [
                    "str",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv",
                    "int"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 99,
            "return": [
                "algorithms.TD3.TD3"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "app.models.User",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "str",
                    "Optional[Union[Any,str]]",
                    "Any",
                    "Optional[List[Dict]]",
                    "List[dict]"
                ],
                "models": [
                    "str",
                    "List[dict]",
                    "app.models.User",
                    "Optional[Dict]",
                    "bool",
                    "Optional[Union[Any,str]]",
                    "Optional[List[Dict]]"
                ],
                "hyperparams": [
                    "app.models.User",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "str",
                    "Optional[Union[Any,str]]",
                    "Any",
                    "Optional[List[Dict]]",
                    "List[dict]"
                ]
            }
        }
    },
    "Baseline_RL-master/projects/policy_based/TD3_Pendulum-v0.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 14,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 33,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv"
                ],
                "hyperparams": [
                    "str",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv",
                    "int"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 96,
            "return": [
                "algorithms.TD3.TD3"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "app.models.User",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "str",
                    "Optional[Union[Any,str]]",
                    "Any",
                    "Optional[List[Dict]]",
                    "List[dict]"
                ],
                "models": [
                    "str",
                    "List[dict]",
                    "app.models.User",
                    "Optional[Dict]",
                    "bool",
                    "Optional[Union[Any,str]]",
                    "Optional[List[Dict]]"
                ],
                "hyperparams": [
                    "app.models.User",
                    "Dict",
                    "bool",
                    "Optional[Dict]",
                    "None",
                    "str",
                    "Optional[Union[Any,str]]",
                    "Any",
                    "Optional[List[Dict]]",
                    "List[dict]"
                ]
            }
        }
    },
    "Baseline_RL-master/projects/value_based/DoubleDQN_CartPole-v1.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 10,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 29,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 40,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "MutableMapping",
                    "bool",
                    "MutableMapping[str,str]",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv"
                ],
                "hyperparams": [
                    "List",
                    "List[int]",
                    "int",
                    "Dict[str,Tuple[int,int]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 57,
            "return": [
                "algorithms.DQN.DQN"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "model": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "hyperparams": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ]
            }
        },
        "Project.init_model.modeling": {
            "name": "modeling",
            "location": 41,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {}
        }
    },
    "Baseline_RL-master/projects/value_based/DQN_BreakoutDeterministic-v4.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 10,
            "return": [
                "Dict[(str, Union[(float, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 27,
            "return": [
                "environments.atari.Atari"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 40,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "MutableMapping",
                    "bool",
                    "MutableMapping[str,str]",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv"
                ],
                "hyperparams": [
                    "List",
                    "List[int]",
                    "int",
                    "Dict[str,Tuple[int,int]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 64,
            "return": [
                "algorithms.DQN.DQN"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "model": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "hyperparams": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ]
            }
        },
        "Project.init_model.modeling": {
            "name": "modeling",
            "location": 42,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {}
        }
    },
    "Baseline_RL-master/projects/value_based/DQN_CartPole-v1.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 10,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 28,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "MutableMapping",
                    "bool",
                    "MutableMapping[str,str]",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv"
                ],
                "hyperparams": [
                    "List",
                    "List[int]",
                    "int",
                    "Dict[str,Tuple[int,int]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 56,
            "return": [
                "algorithms.DQN.DQN"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "model": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "hyperparams": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ]
            }
        },
        "Project.init_model.modeling": {
            "name": "modeling",
            "location": 40,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {}
        }
    },
    "Baseline_RL-master/projects/value_based/DuelingDQN_CartPole-v1.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 10,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 28,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "MutableMapping",
                    "bool",
                    "MutableMapping[str,str]",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv"
                ],
                "hyperparams": [
                    "List",
                    "List[int]",
                    "int",
                    "Dict[str,Tuple[int,int]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 57,
            "return": [
                "algorithms.DQN.DQN"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "model": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "hyperparams": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ]
            }
        },
        "Project.init_model.modeling": {
            "name": "modeling",
            "location": 40,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "Baseline_RL-master/projects/value_based/PER_DQN_CartPole-v1.py": {
        "Project.init_hyperparams": {
            "name": "init_hyperparams",
            "location": 10,
            "return": [
                "Dict[(str, Union[(float, int, List[int])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.init_env": {
            "name": "init_env",
            "location": 32,
            "return": [
                "environments.gym.Gym"
            ],
            "arguments": {
                "self": [],
                "hyperparams": [
                    "str",
                    "int",
                    "List[str]",
                    "List"
                ]
            }
        },
        "Project.init_model": {
            "name": "init_model",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "MutableMapping",
                    "bool",
                    "MutableMapping[str,str]",
                    "agent_components.wholesale.environments.PowerTacEnv.PowerTacEnv"
                ],
                "hyperparams": [
                    "List",
                    "List[int]",
                    "int",
                    "Dict[str,Tuple[int,int]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Project.init_agent": {
            "name": "init_agent",
            "location": 60,
            "return": [
                "algorithms.DQN.DQN"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "model": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ],
                "hyperparams": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str,int]",
                    "int",
                    "None",
                    "str",
                    "fastapi.dependencies.models.Dependant",
                    "chalice.deploy.models.SQSEventSource"
                ]
            }
        },
        "Project.init_model.modeling": {
            "name": "modeling",
            "location": 44,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {}
        }
    }
}
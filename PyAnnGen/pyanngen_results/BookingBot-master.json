{
    "BookingBot-master/booking.py": {
        "update_user_data": {
            "name": "update_user_data",
            "location": 16,
            "return": [
                "models.User",
                "core.models.UserPreferences"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ],
                "chat_id": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "username": [
                    "int"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 34,
            "return": [
                "None",
                "Optional[List[Any]]",
                "zerver.models.UserProfile",
                "str",
                "Dict[str,Any]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_user_by_chat_id": {
            "name": "get_user_by_chat_id",
            "location": 47,
            "return": [
                "None",
                "str",
                "app.models.Tweet",
                "app.models.Position",
                "app.models.GameMember"
            ],
            "arguments": {
                "chat_id": [
                    "str"
                ]
            }
        },
        "is_free_time": {
            "name": "is_free_time",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "time_data": [
                    "dict"
                ],
                "duration": [
                    "dict"
                ]
            }
        },
        "book": {
            "name": "book",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "datetime.datetime",
                    "zerver.models.UserProfile",
                    "bool"
                ],
                "time_data": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "datetime.datetime",
                    "datetime.date"
                ],
                "duration": [
                    "str",
                    "bool",
                    "datetime.datetime"
                ],
                "description": [
                    "bool",
                    "Dict",
                    "datetime.datetime"
                ]
            }
        },
        "get_booking": {
            "name": "get_booking",
            "location": 111,
            "return": [
                "None",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "time_data": [
                    "List[Optional[str]]",
                    "Dict",
                    "zilencer.models.RemoteZulipServer"
                ]
            }
        },
        "unbook": {
            "name": "unbook",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "Optional[datetime.datetime]",
                    "django.db.models.QuerySet",
                    "bool",
                    "int"
                ],
                "time_data": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "Optional[Texte]",
                    "datetime.datetime"
                ],
                "force": [
                    "bool",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "unbook_item": {
            "name": "unbook_item",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "contests.models.User",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Dict[str, object]",
                    "dict"
                ],
                "item": [
                    "str",
                    "dict",
                    "datetime.datetime"
                ],
                "force": [
                    "bool",
                    "int",
                    "float",
                    "datetime.datetime",
                    "bytes"
                ]
            }
        },
        "get_timetable": {
            "name": "get_timetable",
            "location": 205,
            "return": [
                "list"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "AnyStr"
                ],
                "start_time_data": [
                    "int",
                    "None",
                    "str",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]"
                ],
                "end_time_data": [
                    "str",
                    "int",
                    "None",
                    "Sequence[str]"
                ]
            }
        },
        "get_whitelist": {
            "name": "get_whitelist",
            "location": 230,
            "return": [
                "List[Tuple[(Any, str)]]"
            ],
            "arguments": {
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "server.models.User",
                    "Callable",
                    "models.User",
                    "zerver.models.Stream",
                    "Optional[zerver.models.UserProfile]"
                ]
            }
        },
        "add_user_to_whitelist": {
            "name": "add_user_to_whitelist",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "zerver.models.UserProfile",
                    "server.models.User"
                ],
                "target_username": [
                    "zerver.models.UserProfile"
                ]
            }
        },
        "remove_user_from_whitelist": {
            "name": "remove_user_from_whitelist",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "zerver.models.UserProfile",
                    "server.models.User",
                    "core.models.my_user.MyUser"
                ],
                "target_username": []
            }
        },
        "process_date": {
            "name": "process_date",
            "location": 301,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ]
            }
        },
        "process_time": {
            "name": "process_time",
            "location": 330,
            "return": [
                "_datetime.time"
            ],
            "arguments": {
                "time_str": [
                    "str"
                ]
            }
        },
        "process_date_time": {
            "name": "process_date_time",
            "location": 348,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ],
                "time_str": [
                    "str"
                ]
            }
        },
        "process_timedelta": {
            "name": "process_timedelta",
            "location": 388,
            "return": [
                "_datetime.timedelta"
            ],
            "arguments": {
                "time_str": [
                    "str",
                    "Union[bytes, str]"
                ]
            }
        }
    },
    "BookingBot-master/bot.py": {
        "get_help": {
            "name": "get_help",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "help_filename": [
                    "str"
                ]
            }
        },
        "get_contactlist": {
            "name": "get_contactlist",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "contactlist_filename": [
                    "str"
                ]
            }
        },
        "get_error_message": {
            "name": "get_error_message",
            "location": 85,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Optional[List[str]]"
                ],
                "if_ok": [
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "str",
                    "Callable[,None]",
                    "Tuple[type]",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Tuple[Type]",
                    "Optional[Any]",
                    "Any"
                ]
            }
        },
        "format_timetable": {
            "name": "format_timetable",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "timetable_data": [
                    "str",
                    "Dict[str,Any]",
                    "List",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "split_message": {
            "name": "split_message",
            "location": 144,
            "return": [
                "list"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "Sequence[int]"
                ],
                "max_length": [
                    "int",
                    "str"
                ]
            }
        },
        "send_message": {
            "name": "send_message",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "chat_id": [
                    "int",
                    "str"
                ],
                "message_text": [
                    "str",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "reply_markup": [
                    "int",
                    "None",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "bot_command_handler": {
            "name": "bot_command_handler",
            "location": 178,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str",
                    "bool"
                ],
                "param_num_min": [
                    "int",
                    "bool",
                    "str"
                ],
                "param_maxsplit": [
                    "int",
                    "bool",
                    "str"
                ],
                "need_transaction": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "bot_button_handler": {
            "name": "bot_button_handler",
            "location": 244,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "str",
                    "Iterable[Sequence[str]]",
                    "List"
                ],
                "need_transaction": [
                    "bool",
                    "str",
                    "Iterable[Sequence[str]]",
                    "List"
                ]
            }
        },
        "format_whitelist": {
            "name": "format_whitelist",
            "location": 332,
            "return": [
                "str"
            ],
            "arguments": {
                "whitelist": [
                    "List[tuple[Union[int,str]]]",
                    "str",
                    "bool",
                    "List[Tuple[int,str]]",
                    "float",
                    "int"
                ]
            }
        },
        "process_message_sender": {
            "name": "process_message_sender",
            "location": 348,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "process_button_help": {
            "name": "process_button_help",
            "location": 365,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict",
                "esm.models.service_type.ServiceType"
            ],
            "arguments": {
                "_call": [
                    "Callable",
                    "models.User"
                ],
                "_sender": [
                    "Callable",
                    "models.User"
                ]
            }
        },
        "process_cmd_help": {
            "name": "process_cmd_help",
            "location": 381,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict",
                "esm.models.service_type.ServiceType"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "_sender": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "_params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "get_calendar_keyboard": {
            "name": "get_calendar_keyboard",
            "location": 400,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "year": [
                    "int",
                    "str",
                    "db.models.Region"
                ],
                "month": [
                    "int",
                    "str",
                    "db.models.Region"
                ]
            }
        },
        "get_date_booking_selection_keyboard": {
            "name": "get_date_booking_selection_keyboard",
            "location": 459,
            "return": [
                "None",
                "str",
                "Optional[Dict]",
                "Dict",
                "Optional[str]",
                "bool",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "date": [
                    "None",
                    "int",
                    "datetime.date",
                    "Optional[datetime.date]"
                ]
            }
        },
        "get_cmd_keyboard": {
            "name": "get_cmd_keyboard",
            "location": 486,
            "return": [
                "Tuple[Union[str,str]]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "process_button_book": {
            "name": "process_button_book",
            "location": 522,
            "return": [
                "Dict[Text,]",
                "Callable",
                "int",
                "Union[bool,List,Tuple]",
                "float"
            ],
            "arguments": {
                "_call": [
                    "Callable",
                    "models.User"
                ],
                "sender": [
                    "models.User"
                ]
            }
        },
        "process_cmd_book": {
            "name": "process_cmd_book",
            "location": 542,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "sender": [
                    "bool",
                    "List[str]",
                    "models.User",
                    "int"
                ],
                "params": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "process_button_unbook": {
            "name": "process_button_unbook",
            "location": 576,
            "return": [
                "Dict[Text,]",
                "Callable",
                "int",
                "Union[bool,List,Tuple]",
                "float"
            ],
            "arguments": {
                "_call": [
                    "Callable",
                    "models.User"
                ],
                "sender": [
                    "models.User"
                ]
            }
        },
        "execute_cmd_unbook": {
            "name": "execute_cmd_unbook",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "sender": [
                    "bool",
                    "List[str]",
                    "models.User",
                    "int"
                ],
                "params": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "force": [
                    "bool",
                    "List[str]",
                    "models.User",
                    "int"
                ]
            }
        },
        "process_cmd_unbook": {
            "name": "process_cmd_unbook",
            "location": 614,
            "return": [
                "float",
                "datetime.timedelta",
                "Tuple[Any, Any, Any]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "message": [
                    "List[str]",
                    "Exception",
                    "models.User",
                    "zerver.models.Stream"
                ],
                "sender": [
                    "List[str]",
                    "Exception",
                    "models.User",
                    "zerver.models.Stream"
                ],
                "params": [
                    "List[str]",
                    "Exception",
                    "models.User",
                    "zerver.models.Stream"
                ]
            }
        },
        "process_cmd_unbook_force": {
            "name": "process_cmd_unbook_force",
            "location": 632,
            "return": [
                "bytearray",
                "float",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "message": [
                    "List[str]",
                    "models.User",
                    "Exception",
                    "bool"
                ],
                "sender": [
                    "List[str]",
                    "models.User",
                    "Exception",
                    "bool"
                ],
                "params": [
                    "List[str]",
                    "models.User",
                    "Exception",
                    "bool"
                ]
            }
        },
        "process_button_timetable": {
            "name": "process_button_timetable",
            "location": 650,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "_call": [
                    "Callable",
                    "models.User"
                ],
                "sender": [
                    "bool",
                    "models.User"
                ]
            }
        },
        "process_button_timetable_today": {
            "name": "process_button_timetable_today",
            "location": 670,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "_call": [
                    "Callable",
                    "models.User"
                ],
                "sender": [
                    "bool",
                    "models.User"
                ]
            }
        },
        "process_button_timetable_date": {
            "name": "process_button_timetable_date",
            "location": 690,
            "return": [
                "Dict[Text,]",
                "Callable",
                "Union[bool,List,Tuple]",
                "Callable[...,None]"
            ],
            "arguments": {
                "_call": [
                    "Callable"
                ],
                "sender": [
                    "models.User"
                ]
            }
        },
        "process_cmd_timetable": {
            "name": "process_cmd_timetable",
            "location": 708,
            "return": [
                "str",
                "Dict[Text,]"
            ],
            "arguments": {
                "message": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "jumeaux.models.Request"
                ],
                "sender": [
                    "int",
                    "models.User"
                ],
                "params": [
                    "List[str]",
                    "str",
                    "core.models.Registration",
                    "int",
                    "core_lib.core.models.Venue",
                    "Dict[str, Any]"
                ]
            }
        },
        "process_cmd_logmyinfo": {
            "name": "process_cmd_logmyinfo",
            "location": 749,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "_sender": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "_params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "process_button_contactlist": {
            "name": "process_button_contactlist",
            "location": 764,
            "return": [
                "Dict[Text,]",
                "str",
                "bool"
            ],
            "arguments": {
                "_call": [
                    "Callable",
                    "models.User"
                ],
                "_sender": [
                    "Callable",
                    "models.User"
                ]
            }
        },
        "process_cmd_contactlist": {
            "name": "process_cmd_contactlist",
            "location": 780,
            "return": [
                "Dict[Text,]",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "_sender": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "_params": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "process_cmd_whitelist": {
            "name": "process_cmd_whitelist",
            "location": 797,
            "return": [
                "str",
                "Dict[Text,None]"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "sender": [
                    "List[int]",
                    "models.User",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[List[int]]",
                    "str",
                    "users.models.CustomUser",
                    "server.models.bike.Bike"
                ],
                "params": [
                    "List[str]",
                    "List[List[int]]",
                    "int",
                    "Tuple[int]",
                    "str"
                ]
            }
        },
        "process_button_next_month": {
            "name": "process_button_next_month",
            "location": 835,
            "return": [
                "None",
                "datetime.timedelta",
                "Dict[Text,]",
                "Type",
                "core.models.Grouping",
                "Optional[int]"
            ],
            "arguments": {
                "_call": [
                    "Callable",
                    "models.User"
                ],
                "sender": [
                    "int",
                    "models.User",
                    "tensorflow.python.keras.models.Model"
                ]
            }
        },
        "process_button_previous_month": {
            "name": "process_button_previous_month",
            "location": 856,
            "return": [
                "None",
                "datetime.timedelta",
                "Dict[Text,]",
                "Type",
                "Dict[Text,bool]",
                "core.models.Grouping",
                "Optional[int]"
            ],
            "arguments": {
                "_call": [
                    "Callable",
                    "models.User"
                ],
                "sender": [
                    "int",
                    "models.User",
                    "tensorflow.python.keras.models.Model"
                ]
            }
        },
        "process_button_ignore": {
            "name": "process_button_ignore",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "call": [
                    "bool",
                    "str"
                ]
            }
        },
        "process_button_calendar_day": {
            "name": "process_button_calendar_day",
            "location": 892,
            "return": [
                "bool",
                "None",
                "Optional[int]",
                "Dict[Text,]",
                "Optional[str]",
                "Dict[Text,None]",
                "Optional[object]",
                "Dict[Text,Union[str,dict[str,Any],dict[str,Union[int,str]],bool,None]]"
            ],
            "arguments": {
                "call": [
                    "Dict"
                ],
                "sender": [
                    "models.User"
                ]
            }
        },
        "process_button_booking_item": {
            "name": "process_button_booking_item",
            "location": 967,
            "return": [
                "None",
                "str",
                "Dict[Text,]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "call": [
                    "str",
                    "Iterable[str]",
                    "int",
                    "Dict"
                ],
                "sender": [
                    "models.User",
                    "List[Callable]"
                ]
            }
        },
        "process_text": {
            "name": "process_text",
            "location": 996,
            "return": [
                "None",
                "int",
                "Union[tuple,list]",
                "Optional[bool]",
                "app.models.move.Coordinate",
                "Dict[str,str]"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "Dict"
                ]
            }
        },
        "bot_command_handler.wrapper": {
            "name": "wrapper",
            "location": 192,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "bot_button_handler.wrapper": {
            "name": "wrapper",
            "location": 257,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "bot_command_handler.wrapper.wrapper_func": {
            "name": "wrapper_func",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "bot_button_handler.wrapper.wrapper_func": {
            "name": "wrapper_func",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "call": []
            }
        }
    },
    "BookingBot-master/botsettings.py": {},
    "BookingBot-master/exceptions.py": {},
    "BookingBot-master/manage.py": {
        "cli": {
            "name": "cli",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_admins": {
            "name": "load_admins",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "admins_file": [
                    "bool"
                ]
            }
        },
        "load_whitelist": {
            "name": "load_whitelist",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "whitelist_file": [
                    "bool"
                ]
            }
        },
        "op_username": {
            "name": "op_username",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "bool",
                    "str"
                ]
            }
        },
        "deop_username": {
            "name": "deop_username",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "BookingBot-master/models.py": {
        "db_init": {
            "name": "db_init",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "database_url": [
                    "str",
                    "int"
                ]
            }
        },
        "InputCalendar.next_month": {
            "name": "next_month",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputCalendar.previous_month": {
            "name": "previous_month",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_is_admin": {
            "name": "get_is_admin",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_is_in_whitelist": {
            "name": "get_is_in_whitelist",
            "location": 117,
            "return": [
                "List[Dict]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.create_input_calendar": {
            "name": "create_input_calendar",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_data": [
                    "List[float]",
                    "int",
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "User.start_input_line_book": {
            "name": "start_input_line_book",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.start_input_line_unbook": {
            "name": "start_input_line_unbook",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.start_input_line_timetable_date": {
            "name": "start_input_line_timetable_date",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.clear_input_line": {
            "name": "clear_input_line",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.input_date_next_month": {
            "name": "input_date_next_month",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.input_date_previous_month": {
            "name": "input_date_previous_month",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "BookingBot-master/pstats_write.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
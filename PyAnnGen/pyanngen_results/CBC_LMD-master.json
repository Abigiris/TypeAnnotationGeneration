{
    "CBC_LMD-master/test_all.py": {
        "test_inserting_on_genesis": {
            "name": "test_inserting_on_genesis",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inserting_on_leaf": {
            "name": "test_inserting_on_leaf",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inserting_on_intermediate": {
            "name": "test_inserting_on_intermediate",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vals_add_on_other_blocks": {
            "name": "test_vals_add_on_other_blocks",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_height": {
            "name": "test_height",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_skip_list": {
            "name": "test_skip_list",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prev_at_height": {
            "name": "test_prev_at_height",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_finalised_node_pruning": {
            "name": "test_new_finalised_node_pruning",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ghost": {
            "name": "test_ghost",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path_block_to_child_node": {
            "name": "test_path_block_to_child_node",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delete_with_child": {
            "name": "test_delete_with_child",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_not_on_root": {
            "name": "test_add_not_on_root",
            "location": 216,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_find_prev_in_tree": {
            "name": "test_find_prev_in_tree",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random": {
            "name": "test_random",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_massive_tree": {
            "name": "test_massive_tree",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_val_set": {
            "name": "test_make_val_set",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_new_message": {
            "name": "test_make_new_message",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_new_messages": {
            "name": "test_make_new_messages",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_new_messages_on_eachothers": {
            "name": "test_make_new_messages_on_eachothers",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_graph_basic": {
            "name": "test_build_graph_basic",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_graph_two_layers": {
            "name": "test_build_graph_two_layers",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_graph_two_layers_incremental": {
            "name": "test_build_graph_two_layers_incremental",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CBC_LMD-master/visualise_all.py": {
        "extract_tree": {
            "name": "extract_tree",
            "location": 12,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "c_tree": [
                    "cbc_lmd.main.CompressedTree"
                ]
            }
        },
        "draw_tree": {
            "name": "draw_tree",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "G": [
                    "str",
                    "bool",
                    "List[datetime.time]",
                    "list[datetime.time]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "build_full_tree": {
            "name": "build_full_tree",
            "location": 38,
            "return": [
                "int",
                "bytearray"
            ],
            "arguments": {
                "blocks": [
                    "mypy.nodes.Block",
                    "int"
                ]
            }
        }
    },
    "CBC_LMD-master/cbc_lmd/main.py": {
        "Block.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_block": [
                    "Optional[Block]"
                ],
                "name": [
                    "Optional[int]"
                ]
            }
        },
        "Block.prev_at_height": {
            "name": "prev_at_height",
            "location": 38,
            "return": [
                "Block"
            ],
            "arguments": {
                "self": [
                    "_TBlock"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Block.on_top": {
            "name": "on_top",
            "location": 55,
            "return": [
                "bool",
                "Iterable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Block"
                ],
                "parent": [
                    "Optional[Node]"
                ],
                "has_weight": [
                    "bool"
                ],
                "children": [
                    "Set[Node]"
                ]
            }
        },
        "Node.size": {
            "name": "size",
            "location": 80,
            "return": [
                "int",
                "Sequence[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.is_leaf": {
            "name": "is_leaf",
            "location": 87,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.nodes_in_subtree": {
            "name": "nodes_in_subtree",
            "location": 90,
            "return": [
                "Set[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedTree.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "genesis": [
                    "Block"
                ]
            }
        },
        "CompressedTree.add_new_latest_block": {
            "name": "add_new_latest_block",
            "location": 110,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Block"
                ],
                "validator": [
                    "int"
                ]
            }
        },
        "CompressedTree.add_block_with_weight": {
            "name": "add_block_with_weight",
            "location": 120,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Block"
                ]
            }
        },
        "CompressedTree.add_tree_node": {
            "name": "add_tree_node",
            "location": 168,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Block"
                ],
                "parent": [
                    "Node"
                ],
                "has_weight": [
                    "bool"
                ],
                "children": [
                    "Set[Node]"
                ]
            }
        },
        "CompressedTree.find_prev_node_in_tree": {
            "name": "find_prev_node_in_tree",
            "location": 188,
            "return": [
                "Optional[Node]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Block"
                ]
            }
        },
        "CompressedTree.remove_node": {
            "name": "remove_node",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ]
            }
        },
        "CompressedTree.find_lca_block": {
            "name": "find_lca_block",
            "location": 290,
            "return": [
                "Block"
            ],
            "arguments": {
                "self": [],
                "block_1": [
                    "Block"
                ],
                "block_2": [
                    "Block"
                ]
            }
        },
        "CompressedTree.size": {
            "name": "size",
            "location": 313,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedTree.all_nodes": {
            "name": "all_nodes",
            "location": 316,
            "return": [
                "Set[Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressedTree.delete_non_subtree": {
            "name": "delete_non_subtree",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_finalised": [
                    "Node"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "CompressedTree.prune": {
            "name": "prune",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_finalised": [
                    "Node"
                ]
            }
        },
        "CompressedTree.calculate_scores": {
            "name": "calculate_scores",
            "location": 330,
            "return": [
                "Dict[(Block, int)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Node"
                ],
                "weight": [
                    "Dict[(Block, int)]"
                ],
                "score": [
                    "Dict[(Node, int)]"
                ]
            }
        },
        "CompressedTree.find_head": {
            "name": "find_head",
            "location": 340,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "Dict[(Block, int)]"
                ]
            }
        },
        "CompressedTree.remove_node.del_node_no_child": {
            "name": "del_node_no_child",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "CompressedTree.remove_node.del_node_with_child": {
            "name": "del_node_with_child",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "str"
                ]
            }
        }
    },
    "CBC_LMD-master/cbc_lmd/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "int",
                    "bool"
                ],
                "block": [
                    "cbc_lmd.main.Block"
                ],
                "latest_messages": [
                    "bool",
                    "str",
                    "type",
                    "Mapping[Any, Any]",
                    "Iterable['Notification']"
                ],
                "prev_message": [
                    "Message"
                ]
            }
        },
        "Validator.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "genesis": [
                    "cbc_lmd.main.Block"
                ],
                "weight": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Validator.see_message": {
            "name": "see_message",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Message"
                ]
            }
        },
        "Validator.forkchoice": {
            "name": "forkchoice",
            "location": 55,
            "return": [
                "cbc_lmd.main.Block"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validator.make_new_message": {
            "name": "make_new_message",
            "location": 58,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorSet.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_validators": [
                    "int",
                    "float",
                    "list",
                    "list[]"
                ],
                "weight": [
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "ValidatorSet.make_new_message": {
            "name": "make_new_message",
            "location": 80,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ValidatorSet.send_message": {
            "name": "send_message",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "ValidatorSet.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [
                "ValidatorSet"
            ],
            "arguments": {
                "self": [
                    "_TValidatorSet"
                ]
            }
        },
        "ValidatorSet.__next__": {
            "name": "__next__",
            "location": 90,
            "return": [
                "Validator"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerStore.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator_set": [
                    "bool",
                    "List[Tuple[float, Any]]",
                    "list[tuple[typing.Union[float,typing.Any]]]",
                    "list",
                    "list[]"
                ],
                "block": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "float",
                    "Union[int, float]",
                    "list[list[]]",
                    "List[List]",
                    "bool"
                ],
                "q": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "float",
                    "Union[int, float]",
                    "list[list[]]",
                    "List[List]",
                    "bool"
                ]
            }
        },
        "LayerStore.build_first_layer": {
            "name": "build_first_layer",
            "location": 107,
            "return": [
                "Dict[(Validator, Message)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerStore.build_next_layer": {
            "name": "build_next_layer",
            "location": 125,
            "return": [
                "Dict[(Validator, Message)]"
            ],
            "arguments": {
                "self": [],
                "prev_layer": [
                    "Dict[(Validator, Message)]"
                ]
            }
        },
        "LayerStore.build_all_layers": {
            "name": "build_all_layers",
            "location": 147,
            "return": [
                "Dict[(int, Dict[(Validator, Message)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerStore.add_message": {
            "name": "add_message",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Message"
                ]
            }
        },
        "LayerStore.fault_tolerance": {
            "name": "fault_tolerance",
            "location": 186,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerStore.block_has_fault_tolerance": {
            "name": "block_has_fault_tolerance",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        }
    },
    "CBC_LMD-master/cbc_lmd/__init__.py": {},
    "CBC_LMD-master/visualisations/tree_visualiser.py": {
        "hierarchy_pos": {
            "name": "hierarchy_pos",
            "location": 6,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "G": [
                    "int",
                    "bytes",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "root": [
                    "int",
                    "None",
                    "bytes",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "width": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "bytes"
                ],
                "vert_gap": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "bytes"
                ],
                "vert_loc": [
                    "int",
                    "Tuple[int, int]",
                    "bytes"
                ],
                "xcenter": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "bytes"
                ]
            }
        },
        "hierarchy_pos._hierarchy_pos": {
            "name": "_hierarchy_pos",
            "location": 41,
            "return": [
                "dict[, tuple[typing.Union[float,int]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "G": [
                    "Dict[str, Union[str, Any]]",
                    "str",
                    "int",
                    "Optional[Set[str]]",
                    "bool"
                ],
                "root": [
                    "Tuple[str, int]",
                    "List[str]"
                ],
                "width": [
                    "float",
                    "int",
                    "bytearray",
                    "Sequence[Any]"
                ],
                "vert_gap": [
                    "float",
                    "Tuple[int, int]",
                    "int"
                ],
                "vert_loc": [
                    "int",
                    "float"
                ],
                "xcenter": [
                    "float",
                    "int",
                    "Sequence"
                ],
                "pos": [
                    "None",
                    "Tuple[str, int]",
                    "Optional[int]"
                ],
                "parent": [
                    "None",
                    "Optional[float]",
                    "Tuple[str, int]",
                    "float",
                    "Optional[int]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "CBC_LMD-master/visualisations/__init__.py": {}
}
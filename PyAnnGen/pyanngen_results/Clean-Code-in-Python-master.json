{
    "Clean-Code-in-Python-master/Chapter01/before_black.py": {
        "my_function": {
            "name": "my_function",
            "location": 14,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "float"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter01/src/annotations.py": {
        "locate": {
            "name": "locate",
            "location": 14,
            "return": [
                "Point",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "latitude": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "longitude": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "int",
                    "float",
                    "bool"
                ],
                "long": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter01/src/test_annotations.py": {
        "test_annotations": {
            "name": "test_annotations",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "element": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "typing.Iterable[typing.Union[typing.Any,int]]",
                    "bool",
                    "Iterable[Union[Any, int]]"
                ],
                "expected": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "typing.Iterable[typing.Union[typing.Any,int]]",
                    "bool",
                    "Iterable[Union[Any, int]]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter01/src/__init__.py": {},
    "Clean-Code-in-Python-master/Chapter02/callables.py": {
        "CallCount.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallCount.__call__": {
            "name": "__call__",
            "location": 31,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/caveats.py": {
        "wrong_user_display": {
            "name": "wrong_user_display",
            "location": 9,
            "return": [
                "typing.Text",
                "str",
                "Tuple[Tuple[int, ...]]",
                "int"
            ],
            "arguments": {
                "user_metadata": [
                    "str",
                    "dict[typing.Text, typing.Union[typing.Text,int]]"
                ]
            }
        },
        "user_display": {
            "name": "user_display",
            "location": 16,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "user_metadata": [
                    "str",
                    "None"
                ]
            }
        },
        "BadList.__getitem__": {
            "name": "__getitem__",
            "location": 26,
            "return": [
                "typing.Text",
                "str",
                "Optional[float]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "int",
                    "Callable[[List], None]",
                    "float"
                ]
            }
        },
        "GoodList.__getitem__": {
            "name": "__getitem__",
            "location": 36,
            "return": [
                "typing.Text",
                "str",
                "Optional[float]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "int",
                    "Callable[[List], None]",
                    "float"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/container.py": {
        "mark_coordinate": {
            "name": "mark_coordinate",
            "location": 4,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "grid": [
                    "int",
                    "List[Tuple[int, int]]",
                    "str",
                    "float"
                ],
                "coord": [
                    "int",
                    "List[Tuple[int, int]]",
                    "str",
                    "float"
                ]
            }
        },
        "Boundaries.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "str",
                    "float",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "height": [
                    "str",
                    "float",
                    "int",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "Boundaries.__contains__": {
            "name": "__contains__",
            "location": 17,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "int",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "Grid.__contains__": {
            "name": "__contains__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/contextmanagers.py": {
        "stop_database": {
            "name": "stop_database",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "start_database": {
            "name": "start_database",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "db_backup": {
            "name": "db_backup",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "db_handler": {
            "name": "db_handler",
            "location": 29,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "offline_backup": {
            "name": "offline_backup",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "DBHandler.__enter__": {
            "name": "__enter__",
            "location": 16,
            "return": [
                "DBHandler",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBHandler.__exit__": {
            "name": "__exit__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "ex_value": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "ex_traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "dbhandler_decorator.__enter__": {
            "name": "__enter__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dbhandler_decorator.__exit__": {
            "name": "__exit__",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ext_type": [
                    "Iterable[Type]",
                    "bool",
                    "typing.Iterable[typing.Type]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "ex_value": [
                    "Iterable[Type]",
                    "bool",
                    "typing.Iterable[typing.Type]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "ex_traceback": [
                    "Iterable[Type]",
                    "bool",
                    "typing.Iterable[typing.Type]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/dynamic.py": {
        "DynamicAttributes.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DynamicAttributes.__getattr__": {
            "name": "__getattr__",
            "location": 28,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/indices.py": {
        "index_last": {
            "name": "index_last",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "get_slices": {
            "name": "get_slices",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter02/iterables.py": {
        "DateRangeIterable.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "str",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "end_date": [
                    "str",
                    "int",
                    "None",
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.date]"
                ]
            }
        },
        "DateRangeIterable.__iter__": {
            "name": "__iter__",
            "location": 17,
            "return": [
                "DateRangeIterable",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateRangeIterable.__next__": {
            "name": "__next__",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateRangeContainerIterable.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "str",
                    "None",
                    "datetime.date",
                    "Optional[str]"
                ],
                "end_date": [
                    "str",
                    "int",
                    "None",
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.date]"
                ]
            }
        },
        "DateRangeContainerIterable.__iter__": {
            "name": "__iter__",
            "location": 35,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateRangeSequence.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "str",
                    "None",
                    "datetime.date",
                    "Optional[str]"
                ],
                "end_date": [
                    "str",
                    "int",
                    "None",
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.date]"
                ]
            }
        },
        "DateRangeSequence._create_range": {
            "name": "_create_range",
            "location": 50,
            "return": [
                "list[]",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateRangeSequence.__getitem__": {
            "name": "__getitem__",
            "location": 58,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "day_no": [
                    "float",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Awaitable[T]",
                    "collections.abc.Awaitable[T]"
                ]
            }
        },
        "DateRangeSequence.__len__": {
            "name": "__len__",
            "location": 61,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/properties.py": {
        "is_valid_email": {
            "name": "is_valid_email",
            "location": 8,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "potentially_valid_email": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "User.email": {
            "name": "email",
            "location": 22,
            "return": [
                "",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_email": [
                    "str",
                    "Optional[dict]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/sequences.py": {
        "Items.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.__len__": {
            "name": "__len__",
            "location": 11,
            "return": [
                "int",
                "str",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Items.__getitem__": {
            "name": "__getitem__",
            "location": 14,
            "return": [
                "int",
                "Optional[int]",
                "tuple",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Type",
                    "typing.Type"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter02/test_ch02.py": {
        "TestCaveats.test_bad_list": {
            "name": "test_bad_list",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaveats.test_good_list": {
            "name": "test_good_list",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequences.test_items": {
            "name": "test_items",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_is_valid_email": {
            "name": "test_is_valid_email",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_invalid_email": {
            "name": "test_invalid_email",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_user_valid_email": {
            "name": "test_user_valid_email",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProperties.test_user_invalid_domain": {
            "name": "test_user_invalid_domain",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIterables.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIterables._base_test_date_range": {
            "name": "_base_test_date_range",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "range_cls": [
                    "int",
                    "bool",
                    "datetime",
                    "datetime.datetime"
                ]
            }
        },
        "TestIterables.test_date_range": {
            "name": "test_date_range",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIterables.test_date_range_sequence": {
            "name": "test_date_range_sequence",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDynamic.test_dynamic_attributes": {
            "name": "test_dynamic_attributes",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/exceptions_1.py": {
        "Connector.connect": {
            "name": "connect",
            "location": 14,
            "return": [
                "Connector",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connector.send": {
            "name": "send",
            "location": 19,
            "return": [
                "int",
                "str",
                "bytes",
                "dict[, ]",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Event.decode": {
            "name": "decode",
            "location": 27,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTransport.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "connector": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DataTransport.deliver_event": {
            "name": "deliver_event",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "DataTransport.connect": {
            "name": "connect",
            "location": 53,
            "return": [
                "int",
                "str",
                "Callable",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTransport.send": {
            "name": "send",
            "location": 70,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Optional[Exception]",
                    "Exception",
                    "Optional[bool]",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/exceptions_2.py": {
        "connect_with_retry": {
            "name": "connect_with_retry",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "connector": [
                    "int",
                    "str",
                    "list"
                ],
                "retry_n_times": [
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]",
                    "list[str]",
                    "logging.LogRecord",
                    "List[str]"
                ],
                "retry_threshold": [
                    "int",
                    "bool",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Connector.connect": {
            "name": "connect",
            "location": 14,
            "return": [
                "Connector",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connector.send": {
            "name": "send",
            "location": 19,
            "return": [
                "int",
                "str",
                "bytes",
                "dict[, ]",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Event.decode": {
            "name": "decode",
            "location": 27,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTransport.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "connector": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DataTransport.deliver_event": {
            "name": "deliver_event",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "\"keras.models.Sequential\""
                ]
            }
        },
        "DataTransport.send": {
            "name": "send",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/exceptions_3.py": {
        "process": {
            "name": "process",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "data_dictionary": [
                    "int"
                ],
                "record_id": [
                    "int"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/inheritance_antipattern.py": {
        "TransactionalPolicy.change_in_policy": {
            "name": "change_in_policy",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "customer_id": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Dict[str, Dict[str, Any]]",
                    "None",
                    "Optional[MutableMapping]",
                    "dict[str, dict[str, typing.Any]]",
                    "typing.MutableMapping"
                ]
            }
        },
        "TestPolicy.test_get_policy": {
            "name": "test_get_policy",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/inheritance_patterns.py": {
        "TransactionalPolicy.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_data": [
                    "bytes"
                ]
            }
        },
        "TransactionalPolicy.change_in_policy": {
            "name": "change_in_policy",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "customer_id": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "Optional[\"TrackingData\"]",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "TransactionalPolicy.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "customer_id": [
                    "int",
                    "str"
                ]
            }
        },
        "TransactionalPolicy.__len__": {
            "name": "__len__",
            "location": 22,
            "return": [
                "int",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicy.test_get_policy": {
            "name": "test_get_policy",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/kis.py": {
        "ComplicatedNamespace.init_with_data": {
            "name": "init_with_data",
            "location": 24,
            "return": [
                "bool",
                "dict[str, str]",
                "str",
                "dict[, ]",
                "List[str]",
                "list[]",
                "Generator",
                "typing.Type"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Type[T]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/multiple_inheritance.py": {
        "BaseModule.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "module_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Collection[str]",
                    "typing.Collection",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "BaseModule.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/multiple_inheritance_2.py": {
        "BaseTokenizer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "str_token": [
                    "str",
                    "bytes",
                    "MutableMapping[str, Any]",
                    "typing.MutableMapping",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BaseTokenizer.__iter__": {
            "name": "__iter__",
            "location": 18,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpperIterableMixin.__iter__": {
            "name": "__iter__",
            "location": 23,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/orthogonal.py": {
        "calculate_price": {
            "name": "calculate_price",
            "location": 8,
            "return": [
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "base_price": [
                    "float",
                    "str",
                    "bytes",
                    "Optional[Dict]"
                ],
                "tax": [
                    "float",
                    "str",
                    "bytes",
                    "Optional[Dict]"
                ],
                "discount": [
                    "float",
                    "str",
                    "bytes",
                    "Optional[Dict]"
                ]
            }
        },
        "show_price": {
            "name": "show_price",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "price": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "str_final_price": {
            "name": "str_final_price",
            "location": 30,
            "return": [
                "str",
                "Tuple[str, List[str], List[str]]",
                "Tuple[str]"
            ],
            "arguments": {
                "base_price": [
                    "float",
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "tax": [
                    "float",
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "discount": [
                    "float",
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "fmt_function": [
                    "str",
                    "float",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/packing_1.py": {
        "bad_users_from_rows": {
            "name": "bad_users_from_rows",
            "location": 20,
            "return": [
                "list[User]",
                "list",
                "List[Dict[str, Any]]",
                "Set[str]",
                "Dict[str, bool]",
                "set",
                "List[dict]"
            ],
            "arguments": {
                "dbrows": [
                    "set[]",
                    "int",
                    "str",
                    "set",
                    "bytearray",
                    "Optional[bytearray]"
                ]
            }
        },
        "users_from_rows": {
            "name": "users_from_rows",
            "location": 25,
            "return": [
                "str",
                "list[User]"
            ],
            "arguments": {
                "dbrows": [
                    "str",
                    "Callable"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "first_name": [
                    "str",
                    "bool"
                ],
                "last_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/test_exceptions_1.py": {
        "FailsAfterNTimes.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_times": [
                    "bytes",
                    "int",
                    "str"
                ],
                "with_exception": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "FailsAfterNTimes.connect": {
            "name": "connect",
            "location": 16,
            "return": [
                "FailsAfterNTimes",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailsAfterNTimes.send": {
            "name": "send",
            "location": 22,
            "return": [
                "int",
                "str",
                "bytes",
                "dict[, ]",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        },
        "TestTransport.test_connects_after_retries": {
            "name": "test_connects_after_retries",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestTransport.test_connects_directly": {
            "name": "test_connects_directly",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestTransport.test_connection_error": {
            "name": "test_connection_error",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestTransport.test_error_in_event": {
            "name": "test_error_in_event",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/test_exceptions_2.py": {
        "FailsAfterNTimes.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_times": [
                    "bytes",
                    "int",
                    "str"
                ],
                "with_exception": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "FailsAfterNTimes.connect": {
            "name": "connect",
            "location": 16,
            "return": [
                "FailsAfterNTimes",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailsAfterNTimes.send": {
            "name": "send",
            "location": 22,
            "return": [
                "int",
                "str",
                "bytes",
                "dict[, ]",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        },
        "TestTransport.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransport.tearDown": {
            "name": "tearDown",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransport.test_connects_after_retries": {
            "name": "test_connects_after_retries",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestTransport.test_connects_directly": {
            "name": "test_connects_directly",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "float",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "TestTransport.test_connection_error": {
            "name": "test_connection_error",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestTransport.test_error_in_event": {
            "name": "test_error_in_event",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter03/test_exceptions_3.py": {
        "TestExceptions.test_original_exception": {
            "name": "test_original_exception",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/lsp_1.py": {
        "Event.meets_condition": {
            "name": "meets_condition",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event_data": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Iterable[str]",
                    "Iterable",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "LoginEvent.meets_condition": {
            "name": "meets_condition",
            "location": 17,
            "return": [
                "bool",
                "str",
                "dict",
                "List[Dict[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "event_data": [
                    "list",
                    "bytes",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "LogoutEvent.meets_condition": {
            "name": "meets_condition",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event_data": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Iterable[str]",
                    "Iterable",
                    "Dict[str, Any]",
                    "Type[T]"
                ],
                "override": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Iterable[str]",
                    "Iterable",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/lsp_2.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, Dict]",
                    "dict[int, dict[, ]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Union[str, bool]]",
                    "dict[str, typing.Union[str,bool]]"
                ]
            }
        },
        "Event.meets_condition": {
            "name": "meets_condition",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "event_data": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Iterable[str]",
                    "Iterable",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "Event.meets_condition_pre": {
            "name": "meets_condition_pre",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event_data": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "LoginEvent.meets_condition": {
            "name": "meets_condition",
            "location": 40,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "event_data": [
                    "str",
                    "dict",
                    "Sequence",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LogoutEvent.meets_condition": {
            "name": "meets_condition",
            "location": 49,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "event_data": [
                    "str",
                    "dict",
                    "Sequence",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TransactionEvent.meets_condition": {
            "name": "meets_condition",
            "location": 60,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "event_data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Sequence"
                ]
            }
        },
        "SystemMonitor.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, Dict]",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "SystemMonitor.identify_event": {
            "name": "identify_event",
            "location": 88,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/openclosed_1.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, Dict]",
                    "dict[int, dict[, ]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Union[str, bool]]",
                    "dict[str, typing.Union[str,bool]]"
                ]
            }
        },
        "SystemMonitor.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, Dict]",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "SystemMonitor.identify_event": {
            "name": "identify_event",
            "location": 48,
            "return": [
                "Optional[int]",
                "LoginEvent",
                "int",
                "LogoutEvent",
                "UnknownEvent"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/openclosed_2.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, Dict]",
                    "dict[int, dict[, ]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Union[str, bool]]",
                    "dict[str, typing.Union[str,bool]]"
                ]
            }
        },
        "Event.meets_condition": {
            "name": "meets_condition",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "event_data": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Iterable[str]",
                    "Iterable",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "LoginEvent.meets_condition": {
            "name": "meets_condition",
            "location": 24,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "event_data": [
                    "dict"
                ]
            }
        },
        "LogoutEvent.meets_condition": {
            "name": "meets_condition",
            "location": 33,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "event_data": [
                    "dict"
                ]
            }
        },
        "SystemMonitor.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, Dict]",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "SystemMonitor.identify_event": {
            "name": "identify_event",
            "location": 60,
            "return": [
                "UnknownEvent",
                "Optional[List[Any]]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/openclosed_3.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, Dict]",
                    "dict[int, dict[, ]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Union[str, bool]]",
                    "dict[str, typing.Union[str,bool]]"
                ]
            }
        },
        "Event.meets_condition": {
            "name": "meets_condition",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "event_data": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Iterable[str]",
                    "Iterable",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "LoginEvent.meets_condition": {
            "name": "meets_condition",
            "location": 27,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "event_data": [
                    "dict"
                ]
            }
        },
        "LogoutEvent.meets_condition": {
            "name": "meets_condition",
            "location": 36,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "event_data": [
                    "dict"
                ]
            }
        },
        "TransactionEvent.meets_condition": {
            "name": "meets_condition",
            "location": 47,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "event_data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Sequence"
                ]
            }
        },
        "SystemMonitor.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_data": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, Dict]",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "SystemMonitor.identify_event": {
            "name": "identify_event",
            "location": 75,
            "return": [
                "UnknownEvent",
                "Optional[List[Any]]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter04/srp_1.py": {
        "SystemMonitor.load_activity": {
            "name": "load_activity",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemMonitor.identify_events": {
            "name": "identify_events",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemMonitor.stream_events": {
            "name": "stream_events",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_class_1.py": {
        "LoginEventSerializer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LoginEventSerializer.serialize": {
            "name": "serialize",
            "location": 13,
            "return": [
                "dict[typing.Text, typing.Text]",
                "dict",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginEvent.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "ip": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ]
            }
        },
        "LoginEvent.serialize": {
            "name": "serialize",
            "location": 31,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[object]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginEventSerialized.test_serializetion": {
            "name": "test_serializetion",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_class_2.py": {
        "hide_field": {
            "name": "hide_field",
            "location": 11,
            "return": [
                "typing.Text",
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "field": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "format_time": {
            "name": "format_time",
            "location": 15,
            "return": [
                "Optional[str]",
                "int",
                "Dict[str, Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "field_timestamp": [
                    "datetime.datetime",
                    "str",
                    "list",
                    "IO",
                    "dict"
                ]
            }
        },
        "show_original": {
            "name": "show_original",
            "location": 19,
            "return": [
                "bool",
                "datetime.datetime",
                "typing.Iterable[int]",
                "str",
                "int"
            ],
            "arguments": {
                "event_field": [
                    "bool",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "EventSerializer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialization_fields": [
                    "int",
                    "typing.Sequence[int]",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "EventSerializer.serialize": {
            "name": "serialize",
            "location": 55,
            "return": [
                "dict[, ]",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "type",
                    "typing.Type",
                    "list",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Serialization.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serialization.__call__": {
            "name": "__call__",
            "location": 76,
            "return": [
                "Exception",
                "str",
                "dict",
                "typing.Callable[dict[, ], None]",
                "Optional[BaseException]",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "event_class": [
                    "str",
                    "typing.Callable[dict[, ], None]",
                    "Callable[[Dict], None]",
                    "typing.Type",
                    "type",
                    "Callable[[], str]"
                ]
            }
        },
        "LoginEvent.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "ip": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ]
            }
        },
        "TestLoginEventSerialized.test_serialization": {
            "name": "test_serialization",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serialization.__call__.serialize_method": {
            "name": "serialize_method",
            "location": 82,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "event_instance": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_class_3.py": {
        "TestLoginEventSerialized.test_serializetion": {
            "name": "test_serializetion",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dataclass": {
            "name": "dataclass",
            "location": 25,
            "return": [
                "Dict[str, Any]",
                "memoryview",
                "str",
                "bool",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_function_1.py": {
        "retry": {
            "name": "retry",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "operation": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "run_operation": {
            "name": "run_operation",
            "location": 70,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "task": [
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "retry.wrapped": {
            "name": "wrapped",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "OperationObject.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperationObject.run": {
            "name": "run",
            "location": 38,
            "return": [
                "int",
                "str",
                "Iterable[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperationObject.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunWithFailure.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "fail_n_times": [
                    "int"
                ],
                "exception_cls": [
                    "ControlledException",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "RunWithFailure.run": {
            "name": "run",
            "location": 61,
            "return": [
                "bool",
                "Tuple[str]",
                "str",
                "list[]",
                "int",
                "list[list[typing.Any]]",
                "bytes",
                "set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.setUp": {
            "name": "setUp",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.tearDown": {
            "name": "tearDown",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_fail_less_than_retry_limit": {
            "name": "test_fail_less_than_retry_limit",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_fail_equal_retry_limit": {
            "name": "test_fail_equal_retry_limit",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_no_failures": {
            "name": "test_no_failures",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_function_2.py": {
        "run_operation": {
            "name": "run_operation",
            "location": 33,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "task": [
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Retry.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Retry.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.tearDown": {
            "name": "tearDown",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_fail_less_than_retry_limit": {
            "name": "test_fail_less_than_retry_limit",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_fail_equal_retry_limit": {
            "name": "test_fail_equal_retry_limit",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_no_failures": {
            "name": "test_no_failures",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetryDecoratorTest.test_doc": {
            "name": "test_doc",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_parametrized_1.py": {
        "with_retry": {
            "name": "with_retry",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "retries_limit": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "allowed_exceptions": [
                    "str",
                    "None",
                    "bool",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "run_operation": {
            "name": "run_operation",
            "location": 38,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "task": [
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "run_with_custom_retries_limit": {
            "name": "run_with_custom_retries_limit",
            "location": 43,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "task": [
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "run_with_custom_exceptions": {
            "name": "run_with_custom_exceptions",
            "location": 48,
            "return": [
                "Optional[int]",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Callable[[Dict], None]"
                ]
            }
        },
        "run_with_custom_parameters": {
            "name": "run_with_custom_parameters",
            "location": 55,
            "return": [
                "Optional[int]",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Callable[[Dict], None]"
                ]
            }
        },
        "with_retry.retry": {
            "name": "retry",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "operation": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "with_retry.retry.wrapped": {
            "name": "wrapped",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_parametrized_2.py": {
        "run_operation": {
            "name": "run_operation",
            "location": 37,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "task": [
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "run_with_custom_retries_limit": {
            "name": "run_with_custom_retries_limit",
            "location": 42,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "task": [
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "run_with_custom_exceptions": {
            "name": "run_with_custom_exceptions",
            "location": 47,
            "return": [
                "Optional[int]",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Callable[[Dict], None]"
                ]
            }
        },
        "run_with_custom_parameters": {
            "name": "run_with_custom_parameters",
            "location": 54,
            "return": [
                "Optional[int]",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Callable[[Dict], None]"
                ]
            }
        },
        "WithRetry.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "retries_limit": [
                    "int",
                    "bool"
                ],
                "allowed_exceptions": [
                    "Type[BaseException]",
                    "None",
                    "str",
                    "bool",
                    "typing.Type",
                    "float",
                    "Optional[Type[BaseException]]"
                ]
            }
        },
        "WithRetry.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "WithRetry.__call__.wrapped": {
            "name": "wrapped",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_side_effects_1.py": {
        "traced_function_wrong": {
            "name": "traced_function_wrong",
            "location": 12,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "Exception",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        },
        "process_with_delay": {
            "name": "process_with_delay",
            "location": 29,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Iterable['Context']"
            ],
            "arguments": {
                "callback": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "delay": [
                    "int",
                    "str"
                ]
            }
        },
        "traced_function": {
            "name": "traced_function",
            "location": 34,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "Exception",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        },
        "call_with_delay": {
            "name": "call_with_delay",
            "location": 49,
            "return": [
                "dict[, ]",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "callback": [
                    "dict",
                    "dict[, ]"
                ],
                "delay": [
                    "int",
                    "str",
                    "Exception",
                    "BaseException",
                    "Type"
                ]
            }
        },
        "traced_function_wrong.wrapped": {
            "name": "wrapped",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "traced_function.wrapped": {
            "name": "wrapped",
            "location": 36,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_side_effects_2.py": {
        "register_event": {
            "name": "register_event",
            "location": 11,
            "return": [
                "int",
                "dict[, ]",
                "Callable",
                "str",
                "Mapping[str, Any]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "event_cls": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_SoC_1.py": {
        "traced_function": {
            "name": "traced_function",
            "location": 12,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "Exception",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        },
        "operation1": {
            "name": "operation1",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "traced_function.wrapped": {
            "name": "wrapped",
            "location": 14,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_SoC_2.py": {
        "log_execution": {
            "name": "log_execution",
            "location": 12,
            "return": [
                "str",
                "int",
                "Generator"
            ],
            "arguments": {
                "function": [
                    "typing.Callable[..., T]",
                    "Callable[..., T]",
                    "None",
                    "Optional[Callable]",
                    "list[str]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "measure_time": {
            "name": "measure_time",
            "location": 21,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "function": [
                    "bool",
                    "float",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "List[str]",
                    "None",
                    "Callable[..., T]",
                    "list[str]"
                ]
            }
        },
        "operation": {
            "name": "operation",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "log_execution.wrapped": {
            "name": "wrapped",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "measure_time.wrapped": {
            "name": "wrapped",
            "location": 23,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_universal_1.py": {
        "inject_db_driver": {
            "name": "inject_db_driver",
            "location": 20,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "Optional[Callable]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "run_query": {
            "name": "run_query",
            "location": 33,
            "return": [
                "Dict[str, int]",
                "Optional[int]",
                "Generator",
                "str",
                "int"
            ],
            "arguments": {
                "driver": [
                    "str",
                    "int",
                    "set",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "DBDriver.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dbstring": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DBDriver.execute": {
            "name": "execute",
            "location": 16,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "None",
                    "Callable",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "inject_db_driver.wrapped": {
            "name": "wrapped",
            "location": 26,
            "return": [
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "dbstring": [
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "DataHandler.run_query": {
            "name": "run_query",
            "location": 41,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "driver": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_universal_2.py": {
        "run_query": {
            "name": "run_query",
            "location": 40,
            "return": [
                "Dict[str, int]",
                "Optional[int]",
                "Generator",
                "str",
                "int"
            ],
            "arguments": {
                "driver": [
                    "mypy.types.Type",
                    "str",
                    "int",
                    "types.ModuleType",
                    "set",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "DBDriver.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dbstring": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "DBDriver.execute": {
            "name": "execute",
            "location": 17,
            "return": [
                "typing.Text",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "None",
                    "Callable",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "inject_db_driver.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "str",
                    "typing.Iterable[str]",
                    "Callable[[], object]",
                    "Iterable[str]"
                ]
            }
        },
        "inject_db_driver.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "dbstring": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "inject_db_driver.__get__": {
            "name": "__get__",
            "location": 33,
            "return": [
                "Optional[mypy.types.Type]",
                "inject_db_driver"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bytes"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "DataHandler.run_query": {
            "name": "run_query",
            "location": 46,
            "return": [
                "int",
                "Union[int, float, complex]",
                "bool",
                "Mapping[Any, Any]"
            ],
            "arguments": {
                "self": [],
                "driver": [
                    "mypy.types.Type",
                    "str",
                    "int",
                    "types.ModuleType",
                    "set",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_wraps_1.py": {
        "trace_decorator": {
            "name": "trace_decorator",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "Callable[[T], Any]"
                ]
            }
        },
        "process_account": {
            "name": "process_account",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "account_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "trace_decorator.wrapped": {
            "name": "wrapped",
            "location": 11,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/decorator_wraps_2.py": {
        "trace_decorator": {
            "name": "trace_decorator",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "Callable[[T], Any]"
                ]
            }
        },
        "process_account": {
            "name": "process_account",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "account_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "decorator": {
            "name": "decorator",
            "location": 29,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "original_function": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "trace_decorator.wrapped": {
            "name": "wrapped",
            "location": 15,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "decorator.decorated_function": {
            "name": "decorated_function",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter05/log.py": {},
    "Clean-Code-in-Python-master/Chapter05/test_decorator_parametrized.py": {
        "test_cases": {
            "name": "test_cases",
            "location": 43,
            "return": [
                "",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "test_functions": [
                    "str",
                    "Callable[..., None]",
                    "bool",
                    "Type[Any]"
                ]
            }
        },
        "WithRetryDecoratorTest.setUp": {
            "name": "setUp",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.tearDown": {
            "name": "tearDown",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_fail_less_than_retry_limit": {
            "name": "test_fail_less_than_retry_limit",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_fail_equal_retry_limit": {
            "name": "test_fail_equal_retry_limit",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_no_failures": {
            "name": "test_no_failures",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_retry_custom_limit_ok": {
            "name": "test_retry_custom_limit_ok",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_retry_custom_limit_fail": {
            "name": "test_retry_custom_limit_fail",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_custom_exception_fails": {
            "name": "test_custom_exception_fails",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_custom_parameters_and_exception_fails": {
            "name": "test_custom_parameters_and_exception_fails",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithRetryDecoratorTest.test_run_with_custom_parameters_controlled": {
            "name": "test_run_with_custom_parameters_controlled",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/test_decorator_SoC.py": {
        "mocked_time": {
            "name": "mocked_time",
            "location": 13,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "mocked_time.time": {
            "name": "time",
            "location": 16,
            "return": [
                "int",
                "Optional[bool]",
                "float",
                "Iterable[Any]"
            ],
            "arguments": {}
        },
        "TestSoC1.test_operation": {
            "name": "test_operation",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Collection[str]",
                    "bool",
                    "typing.Collection",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "time": [
                    "List[str]",
                    "str",
                    "list[str]"
                ],
                "sleep": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestSoC2.test_operation": {
            "name": "test_operation",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "Collection[str]",
                    "bool",
                    "typing.Collection",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "time": [
                    "List[str]",
                    "str",
                    "list[str]"
                ],
                "sleep": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/test_decorator_universal.py": {
        "TestDecorator.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.test_decorator_function_ok": {
            "name": "test_decorator_function_ok",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.test_decorator_method_fails": {
            "name": "test_decorator_method_fails",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.test_decorator_function_2": {
            "name": "test_decorator_function_2",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorator.test_decorator_method_2": {
            "name": "test_decorator_method_2",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter05/test_wraps.py": {
        "TestWraps1.test_name_incorrect": {
            "name": "test_name_incorrect",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWraps1.test_no_docstring": {
            "name": "test_no_docstring",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWraps2.test_name_solved": {
            "name": "test_name_solved",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWraps2.test_docsting_preserved": {
            "name": "test_docsting_preserved",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_1.py": {
        "DescriptorClass.__get__": {
            "name": "__get__",
            "location": 13,
            "return": [
                "str",
                "bool",
                "DescriptorClass",
                "dict[str, typing.Any]",
                "typing.Callable[, ]",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "Union[Callable, str]",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "owner": [
                    "str",
                    "Exception",
                    "logging.Logger"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_cpython_1.py": {
        "Method.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Method.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "tuple[]",
                    "str",
                    "tuple",
                    "Iterable[int]",
                    "int"
                ],
                "arg1": [
                    "bool",
                    "tuple[]",
                    "str",
                    "tuple",
                    "Iterable[int]",
                    "int"
                ],
                "arg2": [
                    "bool",
                    "tuple[]",
                    "str",
                    "tuple",
                    "Iterable[int]",
                    "int"
                ]
            }
        },
        "NewMethod.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "NewMethod.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "tuple[]",
                    "str",
                    "tuple",
                    "Iterable[int]",
                    "int"
                ],
                "arg1": [
                    "bool",
                    "tuple[]",
                    "str",
                    "tuple",
                    "Iterable[int]",
                    "int"
                ],
                "arg2": [
                    "bool",
                    "tuple[]",
                    "str",
                    "tuple",
                    "Iterable[int]",
                    "int"
                ]
            }
        },
        "NewMethod.__get__": {
            "name": "__get__",
            "location": 28,
            "return": [
                "List[str]",
                "NewMethod",
                "bool",
                "MethodType"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_cpython_2.py": {
        "Coordinate2D.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "int",
                    "float",
                    "bool"
                ],
                "long": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Coordinate2D.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_cpython_3.py": {
        "read_prefix_from_config": {
            "name": "read_prefix_from_config",
            "location": 48,
            "return": [
                "typing.Text",
                "bool",
                "str",
                "Optional[int]",
                "Iterator[travelfootprininsta.types.FeedItem]",
                "dict"
            ],
            "arguments": {}
        },
        "ClassMethod.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "int",
                    "list[str]",
                    "List[str]",
                    "str",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "ClassMethod.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "Optional[Dict[str, str]]",
                "dict",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassMethod.__get__": {
            "name": "__get__",
            "location": 16,
            "return": [
                "MethodType",
                "str",
                "Mapping[str, Any]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ],
                "owner": [
                    "str",
                    "int",
                    "types.CodeType",
                    "types.SubCategoryDict"
                ]
            }
        },
        "MyClass.class_method": {
            "name": "class_method",
            "location": 33,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "typing.Mapping",
                    "str",
                    "Mapping[str, str]",
                    "typing.OrderedDict",
                    "OrderedDict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "arg1": [
                    "typing.Mapping",
                    "str",
                    "Mapping[str, str]",
                    "typing.OrderedDict",
                    "OrderedDict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "arg2": [
                    "typing.Mapping",
                    "str",
                    "Mapping[str, str]",
                    "typing.OrderedDict",
                    "OrderedDict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MyClass.method": {
            "name": "method",
            "location": 36,
            "return": [
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "classproperty.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "classproperty.__get__": {
            "name": "__get__",
            "location": 44,
            "return": [
                "int",
                "str",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ],
                "owner": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TableEvent.topic": {
            "name": "topic",
            "location": 65,
            "return": [
                "typing.Text",
                "str",
                "Callable[[Dict], None]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "T",
                    "typing.Type",
                    "dict[, ]",
                    "\"Namespace\"",
                    "Type",
                    "dict"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_implementation_1.py": {
        "SharedDataDescriptor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_value": [
                    "str",
                    "int",
                    "bytes",
                    "T"
                ]
            }
        },
        "SharedDataDescriptor.__get__": {
            "name": "__get__",
            "location": 14,
            "return": [
                "SharedDataDescriptor",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "str",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "list[\"libkol.types.ItemQuantity\"]",
                    "int",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "None"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "SharedDataDescriptor.__set__": {
            "name": "__set__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "str",
                    "int",
                    "typing.Type",
                    "Optional[type]",
                    "None"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_implementation_2.py": {
        "DescriptorClass.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_value": [
                    "str",
                    "int",
                    "bytes",
                    "T"
                ]
            }
        },
        "DescriptorClass.__get__": {
            "name": "__get__",
            "location": 16,
            "return": [
                "DescriptorClass",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "DescriptorClass.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool"
                ],
                "value": [
                    "bool"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_methods_1.py": {
        "DescriptorClass.__get__": {
            "name": "__get__",
            "location": 8,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "str",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "list[\"libkol.types.ItemQuantity\"]",
                    "int",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "None"
                ],
                "owner": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_methods_2.py": {
        "Validation.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validation_function": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "error_msg": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence",
                    "typing.Sequence[]"
                ]
            }
        },
        "Validation.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "int",
                    "None",
                    "Optional[str]",
                    "typing.Type",
                    "Iterable[T]",
                    "type",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__set_name__": {
            "name": "__set_name__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "typing.Type",
                    "str",
                    "Type",
                    "Type['Signature']"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Field.__get__": {
            "name": "__get__",
            "location": 33,
            "return": [
                "Field",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "Field.validate": {
            "name": "validate",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "list[float]",
                    "float",
                    "T",
                    "bool",
                    "Union[bool, Any]",
                    "typing.Any"
                ]
            }
        },
        "Field.__set__": {
            "name": "__set__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "None",
                    "Optional[Any]",
                    "typing.Any"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_methods_3.py": {
        "ProtectedAttribute.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requires_role": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ProtectedAttribute.__set_name__": {
            "name": "__set_name__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "typing.Type",
                    "str",
                    "Type",
                    "Type['Signature']"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ProtectedAttribute.__set__": {
            "name": "__set__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "ProtectedAttribute.__delete__": {
            "name": "__delete__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "bool",
                    "float",
                    "int"
                ],
                "email": [
                    "bool",
                    "float",
                    "int"
                ],
                "permission_list": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_methods_4.py": {
        "DescriptorWithName.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "DescriptorWithName.__get__": {
            "name": "__get__",
            "location": 15,
            "return": [
                "DescriptorWithName",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "list",
                    "list[]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "DescriptorWithName.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "DescriptorWithAutomaticName.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "dict",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "DescriptorWithAutomaticName.__set_name__": {
            "name": "__set_name__",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "typing.Type",
                    "str",
                    "Type",
                    "Type['Signature']"
                ],
                "name": [
                    "str",
                    "Union[str, None]",
                    "None"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_pythonic_1.py": {
        "Traveller.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "current_city": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Traveller.current_city": {
            "name": "current_city",
            "location": 49,
            "return": [
                "",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "new_city": [
                    "List[deque]",
                    "list",
                    "str",
                    "Union[str, List[Any]]",
                    "int"
                ]
            }
        },
        "Traveller.cities_visited": {
            "name": "cities_visited",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_pythonic_2.py": {
        "HistoryTracedAttribute.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace_attribute_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "HistoryTracedAttribute.__set_name__": {
            "name": "__set_name__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "typing.Type",
                    "str",
                    "Type",
                    "Type['Signature']"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "HistoryTracedAttribute.__get__": {
            "name": "__get__",
            "location": 20,
            "return": [
                "HistoryTracedAttribute",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "HistoryTracedAttribute.__set__": {
            "name": "__set__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Sequence[typing.Sequence[typing.Any]]",
                    "int",
                    "Sequence[Sequence[Any]]",
                    "float",
                    "list[tuple[typing.Union[int,int]]]",
                    "bool",
                    "list[str]",
                    "Sequence[Any]",
                    "List[Tuple[int, int]]",
                    "List[str]"
                ],
                "value": [
                    "typing.Sequence[typing.Sequence[typing.Any]]",
                    "int",
                    "Sequence[Sequence[Any]]",
                    "float",
                    "list[tuple[typing.Union[int,int]]]",
                    "bool",
                    "list[str]",
                    "Sequence[Any]",
                    "List[Tuple[int, int]]",
                    "List[str]"
                ]
            }
        },
        "HistoryTracedAttribute._track_change_in_value_for_instance": {
            "name": "_track_change_in_value_for_instance",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "List[Tuple[Any, ...]]",
                    "list[tuple[typing.Union[typing.Any,...]]]"
                ],
                "value": [
                    "dict",
                    "dict[, ]",
                    "List[Tuple[Any, ...]]",
                    "str",
                    "list[tuple[typing.Union[typing.Any,...]]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "HistoryTracedAttribute._needs_to_track_change": {
            "name": "_needs_to_track_change",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "float",
                    "dict",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "HistoryTracedAttribute._set_default": {
            "name": "_set_default",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict[, ]",
                    "Union[Dict, str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Traveller.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "current_city": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_types_1.py": {
        "NonDataDescriptor.__get__": {
            "name": "__get__",
            "location": 13,
            "return": [
                "str",
                "NonDataDescriptor",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "str",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "list[\"libkol.types.ItemQuantity\"]",
                    "int",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "None"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_types_2.py": {
        "DataDescriptor.__get__": {
            "name": "__get__",
            "location": 16,
            "return": [
                "str",
                "DataDescriptor",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "str",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "list[\"libkol.types.ItemQuantity\"]",
                    "int",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "None"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "DataDescriptor.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "float",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "list",
                    "list[]"
                ],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/descriptors_uses_1.py": {
        "BaseFieldTransformation.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transformation": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BaseFieldTransformation.__get__": {
            "name": "__get__",
            "location": 18,
            "return": [
                "BaseFieldTransformation",
                "str",
                "Union[str, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence]",
                    "typing.Sequence[str]",
                    "Optional[Sequence[str]]",
                    "dict[, ]",
                    "dict"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "BaseFieldTransformation.__set_name__": {
            "name": "__set_name__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "typing.Type",
                    "str",
                    "Type",
                    "Type['Signature']"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BaseFieldTransformation.__set__": {
            "name": "__set__",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "LoginEvent.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "ip": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ]
            }
        },
        "LoginEvent.serialize": {
            "name": "serialize",
            "location": 68,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent.serialize": {
            "name": "serialize",
            "location": 83,
            "return": [
                "dict[, ]",
                "List[str]",
                "Dict[str, Set[str]]",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEvent._fields_to_serialize": {
            "name": "_fields_to_serialize",
            "location": 88,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/log.py": {},
    "Clean-Code-in-Python-master/Chapter06/test_descriptors_cpython.py": {
        "TestDescriptorsCPython1.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDescriptorsCPython1.test_method_unbound_fails": {
            "name": "test_method_unbound_fails",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDescriptorsCPython1.test_working_example": {
            "name": "test_working_example",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/test_descriptors_methods.py": {
        "TestSet.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSet.test_name": {
            "name": "test_name",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSet.test_invalid_parameters_not_assigned": {
            "name": "test_invalid_parameters_not_assigned",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSet.test_assign_valid_data": {
            "name": "test_assign_valid_data",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSet.test_assing_valie_then_invalid": {
            "name": "test_assing_valie_then_invalid",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_delete_email": {
            "name": "test_delete_email",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_no_set_none": {
            "name": "test_no_set_none",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_cannot_delete": {
            "name": "test_cannot_delete",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter06/test_descriptors_uses_1.py": {
        "BaseTestLoginEvent.test_serialization": {
            "name": "test_serialization",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestLoginEvent.test_retrieve_transformed_value": {
            "name": "test_retrieve_transformed_value",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestLoginEvent.test_object_keeps_original_values": {
            "name": "test_object_keeps_original_values",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginEvent.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewLoginEvent.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_1.py": {
        "_load_purchases": {
            "name": "_load_purchases",
            "location": 58,
            "return": [
                "list[float]",
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "load_purchases": {
            "name": "load_purchases",
            "location": 68,
            "return": [
                "",
                "typing.Generator[float]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "PurchasesStats.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "purchases": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PurchasesStats._initialize": {
            "name": "_initialize",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurchasesStats.process": {
            "name": "process",
            "location": 28,
            "return": [
                "PurchasesStats",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurchasesStats._update_min": {
            "name": "_update_min",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "PurchasesStats._update_max": {
            "name": "_update_max",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "int",
                    "float",
                    "str",
                    "Callable",
                    "Optional[bool]"
                ]
            }
        },
        "PurchasesStats.avg_price": {
            "name": "avg_price",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurchasesStats._update_avg": {
            "name": "_update_avg",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "int",
                    "str"
                ]
            }
        },
        "PurchasesStats.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_2.py": {
        "sequence": {
            "name": "sequence",
            "location": 7,
            "return": [
                "",
                "typing.Generator[int]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_coroutines_1.py": {
        "stream_db_records": {
            "name": "stream_db_records",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "db_handler": [
                    "str"
                ]
            }
        },
        "stream_data": {
            "name": "stream_data",
            "location": 48,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "db_handler": [
                    "str",
                    "dict"
                ]
            }
        },
        "DBHandler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "DBHandler.read_n_records": {
            "name": "read_n_records",
            "location": 18,
            "return": [
                "list[tuple[typing.Text]]",
                "Set[str]",
                "Set[Tuple[int, int]]",
                "set",
                "list",
                "Dict[int, Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "float",
                    "bytearray"
                ]
            }
        },
        "DBHandler.close": {
            "name": "close",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_coroutines_2.py": {
        "_stream_db_records": {
            "name": "_stream_db_records",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "db_handler": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "stream_db_records": {
            "name": "stream_db_records",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "db_handler": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "prepare_coroutine": {
            "name": "prepare_coroutine",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coroutine": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "auto_stream_db_records": {
            "name": "auto_stream_db_records",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "db_handler": [
                    "bytes",
                    "int"
                ]
            }
        },
        "prepare_coroutine.wrapped": {
            "name": "wrapped",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_iteration_1.py": {
        "SequenceIterator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "step": [
                    "int",
                    "str"
                ]
            }
        },
        "SequenceIterator.__next__": {
            "name": "__next__",
            "location": 24,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_iteration_2.py": {
        "SequenceWrapper.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "original_sequence": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SequenceWrapper.__getitem__": {
            "name": "__getitem__",
            "location": 16,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Callable[, ]",
                    "T",
                    "str",
                    "Callable",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "SequenceWrapper.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MappedRange.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "transformation": [
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "float"
                ]
            }
        },
        "MappedRange.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "Optional[BaseException]",
                    "BaseException",
                    "None",
                    "bool"
                ]
            }
        },
        "MappedRange.__len__": {
            "name": "__len__",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_pythonic_1.py": {
        "sequence": {
            "name": "sequence",
            "location": 58,
            "return": [
                "",
                "typing.Generator[int]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "bool"
                ]
            }
        },
        "NumberSequence.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ]
            }
        },
        "NumberSequence.next": {
            "name": "next",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str",
                "float",
                "list[]",
                "list[typing.Callable[[], bool]]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceOfNumbers.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ]
            }
        },
        "SequenceOfNumbers.__next__": {
            "name": "__next__",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str",
                "float",
                "list[]",
                "list[typing.Callable[[], bool]]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceOfNumbers.__iter__": {
            "name": "__iter__",
            "location": 54,
            "return": [
                "SequenceOfNumbers",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_pythonic_2.py": {
        "partition": {
            "name": "partition",
            "location": 28,
            "return": [
                "tuple[]",
                "bool",
                "List[type]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "condition": [
                    "bool",
                    "int"
                ],
                "iterable": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "is_even": {
            "name": "is_even",
            "location": 45,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "record": [
                    "str",
                    "int"
                ]
            }
        },
        "show": {
            "name": "show",
            "location": 49,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "records": [
                    "list[int]",
                    "str",
                    "int",
                    "Sequence[int]",
                    "List[int]",
                    "Collection[int]"
                ]
            }
        },
        "IteratorWrapper.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IteratorWrapper.__next__": {
            "name": "__next__",
            "location": 17,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IteratorWrapper.__iter__": {
            "name": "__iter__",
            "location": 24,
            "return": [
                "IteratorWrapper",
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_pythonic_3.py": {
        "produce_values": {
            "name": "produce_values",
            "location": 14,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "how_many": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "tuple[typing.Union[str,int]]",
                    "str",
                    "Tuple[int, int]",
                    "Tuple[str, int]",
                    "T",
                    "float"
                ]
            }
        },
        "process_purchases": {
            "name": "process_purchases",
            "location": 20,
            "return": [
                "tuple[typing.Union[int,list[int],str]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "purchases": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_pythonic_4.py": {
        "search_nested_bad": {
            "name": "search_nested_bad",
            "location": 11,
            "return": [
                "tuple[]",
                "int",
                "None",
                "list",
                "str"
            ],
            "arguments": {
                "array": [
                    "str",
                    "Optional[Any]",
                    "int",
                    "float"
                ],
                "desired_value": [
                    "str",
                    "bool",
                    "type",
                    "typing.Type",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "_iterate_array2d": {
            "name": "_iterate_array2d",
            "location": 30,
            "return": [
                "",
                "typing.Generator[tuple[tuple[]]]"
            ],
            "arguments": {
                "array2d": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "search_nested": {
            "name": "search_nested",
            "location": 36,
            "return": [
                "float",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "Tuple[str]",
                    "float",
                    "tuple[str]",
                    "List[Tuple[int, float]]",
                    "list[tuple[typing.Union[int,float]]]"
                ],
                "desired_value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_yieldfrom_1.py": {
        "chain": {
            "name": "chain",
            "location": 8,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "_chain": {
            "name": "_chain",
            "location": 17,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "all_powers": {
            "name": "all_powers",
            "location": 23,
            "return": [
                "",
                "typing.Generator[typing.Generator[typing.Union[int,float]]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "power": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_yieldfrom_2.py": {
        "sequence": {
            "name": "sequence",
            "location": 9,
            "return": [
                "typing.Generator[range]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Exception",
                    "int"
                ],
                "start": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None"
                ],
                "end": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "typing.Generator[]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter07/generators_yieldfrom_3.py": {
        "sequence": {
            "name": "sequence",
            "location": 13,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "start": [
                    "str",
                    "dict"
                ],
                "end": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "typing.Generator[]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter07/log.py": {},
    "Clean-Code-in-Python-master/Chapter07/test_generators.py": {
        "TestPurchaseStats.test_calculations": {
            "name": "test_calculations",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPurchaseStats.test_empty": {
            "name": "test_empty",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/test_generators_coroutines.py": {
        "BaseTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClose.test_close_called": {
            "name": "test_close_called",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrow.test_throw_controlled_exception": {
            "name": "test_throw_controlled_exception",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrow.test_unhandled_exception": {
            "name": "test_unhandled_exception",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer.test_default_value": {
            "name": "test_default_value",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer.test_with_fixed_value": {
            "name": "test_with_fixed_value",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer.test_multiple_values": {
            "name": "test_multiple_values",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer.test_first_call_fixed_value": {
            "name": "test_first_call_fixed_value",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer2.test_default_value": {
            "name": "test_default_value",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer2.test_with_fixed_value": {
            "name": "test_with_fixed_value",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer2.test_multiple_values": {
            "name": "test_multiple_values",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStreamer2.test_first_call_fixed_value": {
            "name": "test_first_call_fixed_value",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/test_generators_iteration.py": {
        "TestSequenceWrapper.test_sequence": {
            "name": "test_sequence",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMappedRange.test_limits": {
            "name": "test_limits",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMappedRange.test_getitem": {
            "name": "test_getitem",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMappedRange.test_iterate": {
            "name": "test_iterate",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/test_generators_pythonic.py": {
        "TestPurchaseStats.test_calculations": {
            "name": "test_calculations",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPurchaseStats.test_empty": {
            "name": "test_empty",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifiedIteration.test_found": {
            "name": "test_found",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimplifiedIteration.test_not_found": {
            "name": "test_not_found",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter07/_generate_data.py": {
        "create_purchases_file": {
            "name": "create_purchases_file",
            "location": 8,
            "return": [
                "None",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "entries": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/constants.py": {},
    "Clean-Code-in-Python-master/Chapter08/coverage_1.py": {
        "AcceptanceThreshold.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merge_request_context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AcceptanceThreshold.status": {
            "name": "status",
            "location": 25,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/doctest_module.py": {
        "convert_num": {
            "name": "convert_num",
            "location": 1,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "num_str": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/doctest_module_test.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 6,
            "return": [
                "str",
                "dict",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "str"
                ],
                "tests": [
                    "str"
                ],
                "ignore": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/mock_1.py": {
        "author_by_id": {
            "name": "author_by_id",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "commit_id": [
                    "int",
                    "str"
                ],
                "branch": [
                    "str",
                    "int"
                ]
            }
        },
        "GitBranch.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "commits": [
                    "str",
                    "bool"
                ]
            }
        },
        "GitBranch.__getitem__": {
            "name": "__getitem__",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "commit_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GitBranch.__len__": {
            "name": "__len__",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/mock_2.py": {
        "BuildStatus.build_date": {
            "name": "build_date",
            "location": 16,
            "return": [
                "str",
                "datetime.date",
                "int",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "BuildStatus.notify": {
            "name": "notify",
            "location": 20,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "merge_request_id": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ],
                "status": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/mrstatus.py": {},
    "Clean-Code-in-Python-master/Chapter08/mutation_testing_1.py": {
        "evaluate_merge_request": {
            "name": "evaluate_merge_request",
            "location": 8,
            "return": [
                "int",
                "bool",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "upvote_count": [
                    "bytes"
                ],
                "downvotes_count": [
                    "bytes"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/mutation_testing_2.py": {
        "evaluate_merge_request": {
            "name": "evaluate_merge_request",
            "location": 9,
            "return": [
                "dict",
                "bool",
                "List[Callable]"
            ],
            "arguments": {
                "upvote_counts": [
                    "bytes"
                ],
                "downvotes_count": [
                    "bytes"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/refactoring_1.py": {
        "BuildStatus.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BuildStatus.build_date": {
            "name": "build_date",
            "location": 19,
            "return": [
                "str",
                "datetime.date",
                "int",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "BuildStatus.compose_payload": {
            "name": "compose_payload",
            "location": 22,
            "return": [
                "dict[typing.Text, typing.Union[str,int]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "merge_request_id": [
                    "str",
                    "int",
                    "Union[str, int]"
                ],
                "status": [
                    "str",
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "BuildStatus.deliver": {
            "name": "deliver",
            "location": 29,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "BuildStatus.notify": {
            "name": "notify",
            "location": 34,
            "return": [
                "Iterable[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "merge_request_id": [
                    "int",
                    "str"
                ],
                "status": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/refactoring_2.py": {
        "AcceptanceThreshold.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merge_request_context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AcceptanceThreshold.status": {
            "name": "status",
            "location": 13,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 30,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_coverage_1.py": {
        "rejected_mr": {
            "name": "rejected_mr",
            "location": 13,
            "return": [
                "MergeRequest",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_with_approvals": {
            "name": "test_rejected_with_approvals",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_to_pending": {
            "name": "test_rejected_to_pending",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_to_approved": {
            "name": "test_rejected_to_approved",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_approved": {
            "name": "test_approved",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_types": {
            "name": "test_invalid_types",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_vote_on_closed_merge_request": {
            "name": "test_cannot_vote_on_closed_merge_request",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_acceptance_threshold_status_resolution": {
            "name": "test_acceptance_threshold_status_resolution",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "expected_status": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_mock_1.py": {
        "test_find_commit": {
            "name": "test_find_commit",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_find_any": {
            "name": "test_find_any",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_mock_2.py": {
        "test_build_notification_sent": {
            "name": "test_build_notification_sent",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_requests": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_mutation_testing_1.py": {
        "TestMergeRequestEvaluation.test_approved": {
            "name": "test_approved",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_mutation_testing_2.py": {
        "TestMergeRequestEvaluation.test_status_resolution": {
            "name": "test_status_resolution",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestEvaluation.test_string_values": {
            "name": "test_string_values",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_refactoring_1.py": {
        "build_status": {
            "name": "build_status",
            "location": 16,
            "return": [
                "BuildStatus",
                "Tuple[int, int, int]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_build_notification_sent": {
            "name": "test_build_notification_sent",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "build_status": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_refactoring_2.py": {
        "TestMergeRequestStatus.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.assert_rejected": {
            "name": "assert_rejected",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.assert_pending": {
            "name": "assert_pending",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.assert_approved": {
            "name": "assert_approved",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_approved": {
            "name": "test_approved",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_invalid_types": {
            "name": "test_invalid_types",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestStatus.test_cannot_vote_on_closed_merge_request": {
            "name": "test_cannot_vote_on_closed_merge_request",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAcceptanceThreshold.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAcceptanceThreshold.test_status_resolution": {
            "name": "test_status_resolution",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_ut_design_2.py": {
        "TestWrappedClient.test_send_converts_types": {
            "name": "test_send_converts_types",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_ut_frameworks.py": {
        "BaseCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_approved": {
            "name": "test_approved",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.test_invalid_types": {
            "name": "test_invalid_types",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtendedCases.test_cannot_upvote_on_closed_merge_request": {
            "name": "test_cannot_upvote_on_closed_merge_request",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtendedCases.test_cannot_downvote_on_closed_merge_request": {
            "name": "test_cannot_downvote_on_closed_merge_request",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestsUTFrameworks3.setUp": {
            "name": "setUp",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestsUTFrameworks3.test_status_resolution": {
            "name": "test_status_resolution",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/test_ut_frameworks_4.py": {
        "test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_approved": {
            "name": "test_approved",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_types": {
            "name": "test_invalid_types",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_vote_on_closed_merge_request": {
            "name": "test_cannot_vote_on_closed_merge_request",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_acceptance_threshold_status_resolution": {
            "name": "test_acceptance_threshold_status_resolution",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "expected_status": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_design_1.py": {
        "MetricsClient.send": {
            "name": "send",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "metric_value": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Process.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.process_iterations": {
            "name": "process_iterations",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iterations": [
                    "int"
                ]
            }
        },
        "Process.run_process": {
            "name": "run_process",
            "location": 36,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_design_2.py": {
        "MetricsClient.send": {
            "name": "send",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "metric_value": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "WrappedClient.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedClient.send": {
            "name": "send",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str",
                    "Exception",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "metric_value": [
                    "str",
                    "Exception",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Process.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.process_iterations": {
            "name": "process_iterations",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "n_iterations": [
                    "int"
                ]
            }
        },
        "Process.run_process": {
            "name": "run_process",
            "location": 46,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_1.py": {
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 16,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_2.py": {
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 20,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_3.py": {
        "AcceptanceThreshold.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merge_request_context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AcceptanceThreshold.status": {
            "name": "status",
            "location": 15,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 32,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_4.py": {
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter08/ut_frameworks_5.py": {
        "rejected_mr": {
            "name": "rejected_mr",
            "location": 58,
            "return": [
                "MergeRequest",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "test_simple_rejected": {
            "name": "test_simple_rejected",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_with_approvals": {
            "name": "test_rejected_with_approvals",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_to_pending": {
            "name": "test_rejected_to_pending",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_rejected_to_approved": {
            "name": "test_rejected_to_approved",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rejected_mr": []
            }
        },
        "test_just_created_is_pending": {
            "name": "test_just_created_is_pending",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_pending_awaiting_review": {
            "name": "test_pending_awaiting_review",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_approved": {
            "name": "test_approved",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_double_approve": {
            "name": "test_no_double_approve",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_upvote_changes_to_downvote": {
            "name": "test_upvote_changes_to_downvote",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_downvote_to_upvote": {
            "name": "test_downvote_to_upvote",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_types": {
            "name": "test_invalid_types",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_vote_on_closed_merge_request": {
            "name": "test_cannot_vote_on_closed_merge_request",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_acceptance_threshold_status_resolution": {
            "name": "test_acceptance_threshold_status_resolution",
            "location": 164,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "expected_status": [
                    "str",
                    "int"
                ]
            }
        },
        "AcceptanceThreshold.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merge_request_context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AcceptanceThreshold.status": {
            "name": "status",
            "location": 17,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest._cannot_vote_if_closed": {
            "name": "_cannot_vote_if_closed",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.upvote": {
            "name": "upvote",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MergeRequest.downvote": {
            "name": "downvote",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "by_user": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/adapter_1.py": {
        "UserSource.fetch": {
            "name": "fetch",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "UserSource._adapt_arguments": {
            "name": "_adapt_arguments",
            "location": 15,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/adapter_2.py": {
        "UserSource.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username_lookup": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserSource.fetch": {
            "name": "fetch",
            "location": 13,
            "return": [
                "bool",
                "Iterable[str]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "UserSource._adapt_arguments": {
            "name": "_adapt_arguments",
            "location": 18,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/chain_of_responsibility_1.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "next_event": [
                    "str",
                    "None",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Event.process": {
            "name": "process",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "logline": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Event._process": {
            "name": "_process",
            "location": 23,
            "return": [
                "dict[typing.Text, str]",
                "float",
                "Dict[str, Set[str]]",
                "Dict[str, Any]",
                "Optional[Union[str, Any, Any, Any]]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "logline": [
                    "bool",
                    "str"
                ]
            }
        },
        "Event.can_process": {
            "name": "can_process",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Match",
                    "typing.Match"
                ],
                "logline": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Match",
                    "typing.Match"
                ]
            }
        },
        "Event._parse_data": {
            "name": "_parse_data",
            "location": 36,
            "return": [
                "bool",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Match[str]",
                    "typing.Match"
                ],
                "logline": [
                    "str",
                    "bytes",
                    "Match[str]",
                    "typing.Match"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/composite_1.py": {
        "Product.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "price": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Product.price": {
            "name": "price",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductBundle.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "perc_discount": [
                    "bool",
                    "typing.Sequence[]",
                    "str",
                    "int",
                    "None",
                    "Sequence",
                    "Optional[int]"
                ]
            }
        },
        "ProductBundle.price": {
            "name": "price",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/decorator_1.py": {
        "DictQuery.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictQuery.render": {
            "name": "render",
            "location": 11,
            "return": [
                "str",
                "dict",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryEnhancer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "QueryEnhancer.render": {
            "name": "render",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveEmpty.render": {
            "name": "render",
            "location": 24,
            "return": [
                "dict[tuple[typing.Union[str,tuple[typing.Union[int,int,int,int]]]], tuple[typing.Union[str,tuple[typing.Union[int,int,int,int]]]]]",
                "dict",
                "Set[str]",
                "Dict[int, Dict[int, Any]]",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitive.render": {
            "name": "render",
            "location": 30,
            "return": [
                "dict[, ]",
                "Set[str]",
                "List[str]",
                "Dict[str, str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/decorator_2.py": {
        "remove_empty": {
            "name": "remove_empty",
            "location": 32,
            "return": [
                "dict[tuple[typing.Union[str,\"Outcome\"]], tuple[typing.Union[str,\"Outcome\"]]]",
                "dict",
                "Set[str]",
                "Dict[int, Dict[int, Any]]",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "original": [
                    "dict[, ]",
                    "dict",
                    "dict[str, \"Outcome\"]",
                    "Mapping[Any, Any]",
                    "Dict[str, \"Outcome\"]"
                ]
            }
        },
        "case_insensitive": {
            "name": "case_insensitive",
            "location": 36,
            "return": [
                "dict[, ]",
                "Set[str]",
                "List[str]",
                "Dict[str, str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "original": [
                    "dict[, ]",
                    "dict",
                    "List[object]"
                ]
            }
        },
        "DictQuery.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictQuery.render": {
            "name": "render",
            "location": 12,
            "return": [
                "str",
                "dict",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryEnhancer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "QueryEnhancer.render": {
            "name": "render",
            "location": 25,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/log.py": {},
    "Clean-Code-in-Python-master/Chapter09/monostate_1.py": {
        "GitFetcher.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List['LabelTag']",
                    "list['LabelTag']"
                ]
            }
        },
        "GitFetcher.current_tag": {
            "name": "current_tag",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "new_tag": [
                    "str",
                    "Callable",
                    "Dict[str, Type]"
                ]
            }
        },
        "GitFetcher.pull": {
            "name": "pull",
            "location": 24,
            "return": [
                "str",
                "List[str]",
                "Set[str]",
                "MutableMapping[str, int]",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/monostate_2.py": {
        "SharedAttribute.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_value": [
                    "str",
                    "None",
                    "int",
                    "bytes",
                    "T"
                ]
            }
        },
        "SharedAttribute.__get__": {
            "name": "__get__",
            "location": 14,
            "return": [
                "str",
                "SharedAttribute",
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "str",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "list[\"libkol.types.ItemQuantity\"]",
                    "int",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "None"
                ],
                "owner": [
                    "typing.Type",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "SharedAttribute.__set__": {
            "name": "__set__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "list[]",
                    "bool",
                    "list",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "Iterable[str]"
                ],
                "new_value": [
                    "str",
                    "float",
                    "Optional[Any]",
                    "typing.Any",
                    "Optional[IO[str]]",
                    "None",
                    "Optional[str]",
                    "typing.IO"
                ]
            }
        },
        "SharedAttribute.__set_name__": {
            "name": "__set_name__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "typing.Type",
                    "str",
                    "Type",
                    "Type['Signature']"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GitFetcher.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List['LabelTag']",
                    "list['LabelTag']"
                ],
                "branch": [
                    "str",
                    "None"
                ]
            }
        },
        "GitFetcher.pull": {
            "name": "pull",
            "location": 37,
            "return": [
                "str",
                "List[str]",
                "Set[str]",
                "MutableMapping[str, int]",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/monostate_3.py": {
        "BaseFetcher.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "TagFetcher.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int"
                ]
            }
        },
        "TagFetcher.pull": {
            "name": "pull",
            "location": 20,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BranchFetcher.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int"
                ]
            }
        },
        "BranchFetcher.pull": {
            "name": "pull",
            "location": 32,
            "return": [
                "typing.Text",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/monostate_4.py": {
        "SharedAllMixin.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFetcher.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "TagFetcher.pull": {
            "name": "pull",
            "location": 25,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BranchFetcher.pull": {
            "name": "pull",
            "location": 31,
            "return": [
                "typing.Text",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/state_1.py": {
        "MergeRequestState.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "merge_request": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "MergeRequestState.open": {
            "name": "open",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.close": {
            "name": "close",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.merge": {
            "name": "merge",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Open.open": {
            "name": "open",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Open.close": {
            "name": "close",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Open.merge": {
            "name": "merge",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Closed.open": {
            "name": "open",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Closed.close": {
            "name": "close",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Closed.merge": {
            "name": "merge",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merged.open": {
            "name": "open",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merged.close": {
            "name": "close",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merged.merge": {
            "name": "merge",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_branch": [
                    "list",
                    "list[]",
                    "Callable[[int], float]",
                    "typing.Callable[int, float]",
                    "List[int]",
                    "list[int]",
                    "IO[str]",
                    "typing.IO"
                ],
                "target_branch": [
                    "int",
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "MergeRequest.state": {
            "name": "state",
            "location": 86,
            "return": [
                "",
                "str",
                "int",
                "typing.Pattern",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "new_state_cls": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MergeRequest.open": {
            "name": "open",
            "location": 89,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.close": {
            "name": "close",
            "location": 92,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.merge": {
            "name": "merge",
            "location": 95,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [
                "typing.Text",
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/state_2.py": {
        "MergeRequestState.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "merge_request": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "MergeRequestState.open": {
            "name": "open",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.close": {
            "name": "close",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.merge": {
            "name": "merge",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequestState.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Open.open": {
            "name": "open",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Open.close": {
            "name": "close",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Open.merge": {
            "name": "merge",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Closed.open": {
            "name": "open",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Closed.close": {
            "name": "close",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Closed.merge": {
            "name": "merge",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merged.open": {
            "name": "open",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merged.close": {
            "name": "close",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Merged.merge": {
            "name": "merge",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_branch": [
                    "list",
                    "list[]",
                    "Callable[[int], float]",
                    "typing.Callable[int, float]",
                    "List[int]",
                    "list[int]",
                    "IO[str]",
                    "typing.IO"
                ],
                "target_branch": [
                    "int",
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "MergeRequest.state": {
            "name": "state",
            "location": 81,
            "return": [
                "",
                "str",
                "int",
                "typing.Pattern",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "new_state_cls": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MergeRequest.status": {
            "name": "status",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeRequest.__getattr__": {
            "name": "__getattr__",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "MergeRequest.__str__": {
            "name": "__str__",
            "location": 91,
            "return": [
                "typing.Text",
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_chain_of_responsibility_1.py": {
        "TestMatching.test_match_login_event": {
            "name": "test_match_login_event",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatching.test_match_logout": {
            "name": "test_match_logout",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatching.test_session_event": {
            "name": "test_session_event",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_no_reception": {
            "name": "test_no_reception",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_login": {
            "name": "test_login",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_login_first": {
            "name": "test_login_first",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_logout_first": {
            "name": "test_logout_first",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_generic_first": {
            "name": "test_generic_first",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_composite_1.py": {
        "TestProducts.test_product_bundle": {
            "name": "test_product_bundle",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProducts.test_nested_bundle": {
            "name": "test_nested_bundle",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_decorator_1.py": {
        "TestDecoration.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_no_decorate": {
            "name": "test_no_decorate",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_decorate": {
            "name": "test_decorate",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_decorator_2.py": {
        "TestDecoration.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_no_decorate": {
            "name": "test_no_decorate",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_decorate": {
            "name": "test_decorate",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_monostate_1.py": {
        "TestFetcher.test_fetch_single": {
            "name": "test_fetch_single",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetcher.test_fetch_multiple": {
            "name": "test_fetch_multiple",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetcher.test_multiple_consecutive_versions": {
            "name": "test_multiple_consecutive_versions",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetcher.test_never_set": {
            "name": "test_never_set",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_monostate_2.py": {
        "TestCurrentTag.test_fetch_single": {
            "name": "test_fetch_single",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCurrentTag.test_fetch_multiple": {
            "name": "test_fetch_multiple",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCurrentTag.test_multiple_consecutive_versions": {
            "name": "test_multiple_consecutive_versions",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCurrentTag.test_never_set": {
            "name": "test_never_set",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCurrentBranch.test_current_branch": {
            "name": "test_current_branch",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_monostate_3.py": {
        "BaseTest.test_pull": {
            "name": "test_pull",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.test_change_any": {
            "name": "test_change_any",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.test_not_any": {
            "name": "test_not_any",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTag.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBranch.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagAndBranch.test_tag_and_branch": {
            "name": "test_tag_and_branch",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_monostate_4.py": {
        "BaseTest.test_pull": {
            "name": "test_pull",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.test_change_any": {
            "name": "test_change_any",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.test_not_any": {
            "name": "test_not_any",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTag.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBranch.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTagAndBranch.test_tag_and_branch": {
            "name": "test_tag_and_branch",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_state_1.py": {
        "TestMergeRequestTransitions.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_reopen": {
            "name": "test_reopen",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_open_to_closed": {
            "name": "test_open_to_closed",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_closed_to_open": {
            "name": "test_closed_to_open",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_double_close": {
            "name": "test_double_close",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_open_to_merge": {
            "name": "test_open_to_merge",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_merge_is_final": {
            "name": "test_merge_is_final",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_cannot_merge_closed": {
            "name": "test_cannot_merge_closed",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/test_state_2.py": {
        "TestMergeRequestTransitions.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_reopen": {
            "name": "test_reopen",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_open_to_closed": {
            "name": "test_open_to_closed",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_closed_to_open": {
            "name": "test_closed_to_open",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_double_close": {
            "name": "test_double_close",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_open_to_merge": {
            "name": "test_open_to_merge",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_merge_is_final": {
            "name": "test_merge_is_final",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMergeRequestTransitions.test_cannot_merge_closed": {
            "name": "test_cannot_merge_closed",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter09/_adapter_base.py": {
        "UsernameLookup.search": {
            "name": "search",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "user_namespace": [
                    "str"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/setup.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/setup.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/client.py": {
        "_extract_from_env": {
            "name": "_extract_from_env",
            "location": 12,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "list[int]"
            ],
            "arguments": {
                "variable": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/converters.py": {
        "build_dispatched": {
            "name": "build_dispatched",
            "location": 6,
            "return": [
                "DispatchedOrder",
                "int",
                "float"
            ],
            "arguments": {
                "row": [
                    "Iterable[str]",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "build_in_transit": {
            "name": "build_in_transit",
            "location": 10,
            "return": [
                "bool",
                "OrderInTransit"
            ],
            "arguments": {
                "row": [
                    "Optional[Dict]",
                    "dict[, ]",
                    "type",
                    "None",
                    "Optional[float]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "build_delivered": {
            "name": "build_delivered",
            "location": 14,
            "return": [
                "OrderDelivered",
                "int",
                "float"
            ],
            "arguments": {
                "row": [
                    "Iterable[str]",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "build_from_row": {
            "name": "build_from_row",
            "location": 37,
            "return": [
                "DeliveryOrder",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "delivery_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "row": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "WrappedRow.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "WrappedRow.__getattr__": {
            "name": "__getattr__",
            "location": 29,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "attrname": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/status.py": {
        "DispatchedOrder.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "float",
                    "int"
                ]
            }
        },
        "DispatchedOrder.message": {
            "name": "message",
            "location": 13,
            "return": [
                "dict[typing.Text, str]",
                "dict",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderInTransit.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "current_location": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "OrderInTransit.message": {
            "name": "message",
            "location": 30,
            "return": [
                "dict[typing.Text, str]",
                "int",
                "Dict[str, Any]",
                "bytes",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderDelivered.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "delivered_at": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OrderDelivered.message": {
            "name": "message",
            "location": 47,
            "return": [
                "dict[typing.Text, str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeliveryOrder.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delivery_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "status": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "DeliveryOrder.message": {
            "name": "message",
            "location": 65,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/storage.py": {
        "DeliveryStatusQuery.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delivery_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "dbclient": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/src/storage/__init__.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/storage/tests/integration/test_retrieve_data.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/web/setup.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/web/src/web/view.py": {},
    "Clean-Code-in-Python-master/Chapter10/service/libs/web/src/web/__init__.py": {
        "register_route": {
            "name": "register_route",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "view_object": [
                    "bool",
                    "Callable"
                ],
                "route": [
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/statusweb/service.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Clean-Code-in-Python-master/Chapter10/service/statusweb/__init__.py": {}
}
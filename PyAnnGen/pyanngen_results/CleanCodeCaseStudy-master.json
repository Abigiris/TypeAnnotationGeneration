{
    "CleanCodeCaseStudy-master/cleancoderscom/context.py": {},
    "CleanCodeCaseStudy-master/cleancoderscom/gatekeeper.py": {
        "GateKeeper.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GateKeeper.set_logged_in_user": {
            "name": "set_logged_in_user",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "cleancoderscom.entities.user.User"
                ]
            }
        },
        "GateKeeper.get_logged_in_user": {
            "name": "get_logged_in_user",
            "location": 13,
            "return": [
                "Optional[cleancoderscom.entities.user.User]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/socket_server.py": {
        "SocketServer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ],
                "service": [
                    "cleancoderscom.socket_service.SocketService"
                ]
            }
        },
        "SocketServer.start": {
            "name": "start",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]"
                ]
            }
        },
        "SocketServer.create_socket": {
            "name": "create_socket",
            "location": 33,
            "return": [
                "Optional[socket.socket]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]"
                ],
                "queue": [
                    "int"
                ]
            }
        },
        "SocketServer.stop": {
            "name": "stop",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServer.is_running": {
            "name": "is_running",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/socket_service.py": {
        "SocketService.serve": {
            "name": "serve",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/utilities.py": {
        "datetime_from_string": {
            "name": "datetime_from_string",
            "location": 4,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int",
                    "bool"
                ],
                "date_format": [
                    "typing.Text",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "string_from_datetime": {
            "name": "string_from_datetime",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "datetime_obj": [
                    "str",
                    "int",
                    "Optional[datetime.datetime]"
                ],
                "date_format": [
                    "typing.Text",
                    "str",
                    "int",
                    "Optional[datetime.datetime]"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/__init__.py": {},
    "CleanCodeCaseStudy-master/cleancoderscom/entities/codecast.py": {
        "Codecast.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "publication_date": [
                    "_datetime.datetime"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/entities/entity.py": {
        "Entity.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ]
            }
        },
        "Entity.__eq__": {
            "name": "__eq__",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/entities/license.py": {
        "License.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "cleancoderscom.entities.user.User"
                ],
                "codecast": [
                    "cleancoderscom.entities.codecast.Codecast"
                ],
                "license_type": [
                    "LicenseType"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/entities/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/entities/__init__.py": {},
    "CleanCodeCaseStudy-master/cleancoderscom/gateways/codecast_gateway.py": {
        "CodecastGateway.find_all_codecasts_ordered_by_date": {
            "name": "find_all_codecasts_ordered_by_date",
            "location": 9,
            "return": [
                "List[cleancoderscom.entities.codecast.Codecast]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodecastGateway.find_codecast_by_title": {
            "name": "find_codecast_by_title",
            "location": 13,
            "return": [
                "Optional[cleancoderscom.entities.codecast.Codecast]"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "List[object]",
                    "str",
                    "list[object]",
                    "Sized",
                    "typing.Sized",
                    "Optional[List]",
                    "list[]",
                    "None"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/gateways/gateway.py": {
        "Gateway.find_all": {
            "name": "find_all",
            "location": 9,
            "return": [
                "List[cleancoderscom.entities.entity.Entity]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gateway.delete": {
            "name": "delete",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "cleancoderscom.entities.entity.Entity"
                ]
            }
        },
        "Gateway.save": {
            "name": "save",
            "location": 17,
            "return": [
                "Optional[cleancoderscom.entities.entity.Entity]"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "cleancoderscom.entities.entity.Entity"
                ]
            }
        },
        "Gateway.find": {
            "name": "find",
            "location": 21,
            "return": [
                "Optional[cleancoderscom.entities.entity.Entity]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/gateways/license_gateway.py": {
        "LicenseGateway.find_license_for": {
            "name": "find_license_for",
            "location": 11,
            "return": [
                "Optional[cleancoderscom.entities.license.License]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "cleancoderscom.entities.user.User"
                ],
                "codecast": [
                    "cleancoderscom.entities.codecast.Codecast"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/gateways/user_gateway.py": {
        "UserGateway.find_user": {
            "name": "find_user",
            "location": 9,
            "return": [
                "Optional[cleancoderscom.entities.user.User]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/gateways/__init__.py": {},
    "CleanCodeCaseStudy-master/cleancoderscom/use_cases/presentable_codecast.py": {
        "PresentableCodecast.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ],
                "publication_date": [
                    "str"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/use_cases/present_codecasts_use_case.py": {
        "PresentCodecastsUseCase.present_codecasts": {
            "name": "present_codecasts",
            "location": 12,
            "return": [
                "List[cleancoderscom.use_cases.presentable_codecast.PresentableCodecast]"
            ],
            "arguments": {
                "self": [],
                "logged_in_user": [
                    "cleancoderscom.entities.user.User"
                ]
            }
        },
        "PresentCodecastsUseCase.format_codecast": {
            "name": "format_codecast",
            "location": 19,
            "return": [
                "cleancoderscom.use_cases.presentable_codecast.PresentableCodecast"
            ],
            "arguments": {
                "self": [],
                "codecast": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "dict[str, typing.Any]",
                    "None",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "list[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
                ],
                "logged_in_user": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "transfer.models.User",
                    "ebl.users.domain.user.User"
                ]
            }
        },
        "PresentCodecastsUseCase.is_licensed_for": {
            "name": "is_licensed_for",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "license_type": [
                    "cleancoderscom.entities.license.LicenseType"
                ],
                "user": [
                    "cleancoderscom.entities.user.User"
                ],
                "codecast": [
                    "cleancoderscom.entities.codecast.Codecast"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/cleancoderscom/use_cases/__init__.py": {},
    "CleanCodeCaseStudy-master/step_impl/codecast_presentation.py": {
        "setup": {
            "name": "setup",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "teardown": {
            "name": "teardown",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "clear_codecasts": {
            "name": "clear_codecasts",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "add_user": {
            "name": "add_user",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "login_user": {
            "name": "login_user",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "presentation_user": {
            "name": "presentation_user",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "username": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "count_of_codecasts": {
            "name": "count_of_codecasts",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "create_license_for_viewing": {
            "name": "create_license_for_viewing",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "codecast_title": [
                    "str",
                    "Optional[str]",
                    "Type[BaseException]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "create_license_downloading": {
            "name": "create_license_downloading",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "username": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "codecast_title": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/step_impl/given_codecasts.py": {
        "given_codecasts": {
            "name": "given_codecasts",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "dict"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/step_impl/of_codecasts.py": {
        "query_codecasts": {
            "name": "query_codecasts",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "table": [
                    "Iterable[str]",
                    "str",
                    "typing.Iterable[str]",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/step_impl/__init__.py": {},
    "CleanCodeCaseStudy-master/tests/test_entity.py": {
        "EntityTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTest.test_two_different_entities_are_not_the_same": {
            "name": "test_two_different_entities_are_not_the_same",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTest.test_one_entity_is_same_as_itself": {
            "name": "test_one_entity_is_same_as_itself",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTest.test_entity_with_the_same_id_are_the_same": {
            "name": "test_entity_with_the_same_id_are_the_same",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTest.test_entity_with_none_id_are_not_the_same": {
            "name": "test_entity_with_none_id_are_not_the_same",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/test_main.py": {
        "MainTest.test_creation": {
            "name": "test_creation",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/test_present_codecasts_use_case.py": {
        "PresentCodecastsUseCaseTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.tearDown": {
            "name": "tearDown",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.test_user_without_view_license_cannot_view_codecast": {
            "name": "test_user_without_view_license_cannot_view_codecast",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.test_user_with_view_license_can_view_codecast": {
            "name": "test_user_with_view_license_can_view_codecast",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.test_user_with_license_cannot_view_other_users_codecast": {
            "name": "test_user_with_license_cannot_view_other_users_codecast",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.test_present_no_codecasts": {
            "name": "test_present_no_codecasts",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.test_present_one_codecast": {
            "name": "test_present_one_codecast",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.test_presented_codecast_is_not_viewable_without_license": {
            "name": "test_presented_codecast_is_not_viewable_without_license",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.test_presented_codecast_is_viewable_with_view_license": {
            "name": "test_presented_codecast_is_viewable_with_view_license",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.test_presented_codecast_is_downloadable_with_download_license": {
            "name": "test_presented_codecast_is_downloadable_with_download_license",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresentCodecastsUseCaseTest.create_testable_user": {
            "name": "create_testable_user",
            "location": 65,
            "return": [
                "List[dict]",
                "bool",
                "Dict[str, Any]",
                "int",
                "List[Dict[str, Any]]",
                "Set[str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "PresentCodecastsUseCaseTest.create_testable_codecast": {
            "name": "create_testable_codecast",
            "location": 69,
            "return": [
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "flask_appbuilder.security.sqla.models.User",
                "Dict[str, int]"
            ],
            "arguments": {
                "title": [
                    "bool",
                    "datetime.date",
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "list[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "Tuple[str, str]",
                    "list[str]",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "Union[List[str], str]",
                    "recidiviz.persistence.entity.state.entities.StatePerson"
                ],
                "publication_date": [
                    "bool",
                    "datetime.date",
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "list[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "Tuple[str, str]",
                    "list[str]",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]",
                    "Union[List[str], str]",
                    "recidiviz.persistence.entity.state.entities.StatePerson"
                ]
            }
        },
        "PresentCodecastsUseCaseTest.create_testable_view_license": {
            "name": "create_testable_view_license",
            "location": 74,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "int",
                "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                "datetime.datetime",
                "flask_appbuilder.security.sqla.models.User"
            ],
            "arguments": {
                "user": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "reader_server.types.User",
                    "Sequence[str]"
                ],
                "codecast": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "reader_server.types.User",
                    "Sequence[str]"
                ]
            }
        },
        "PresentCodecastsUseCaseTest.create_testable_download_license": {
            "name": "create_testable_download_license",
            "location": 79,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "int",
                "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                "datetime.datetime",
                "flask_appbuilder.security.sqla.models.User"
            ],
            "arguments": {
                "user": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "reader_server.types.User",
                    "Sequence[str]"
                ],
                "codecast": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "reader_server.types.User",
                    "Sequence[str]"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/test_setup.py": {
        "TestSetup.setup": {
            "name": "setup",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSetup.teardown": {
            "name": "teardown",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CleanCodeCaseStudy-master/tests/__init__.py": {},
    "CleanCodeCaseStudy-master/tests/gateways/in_memory_codecast_gateway.py": {
        "InMemoryCodecastGateway.find_codecast_by_title": {
            "name": "find_codecast_by_title",
            "location": 9,
            "return": [
                "Optional[cleancoderscom.entities.codecast.Codecast]"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        },
        "InMemoryCodecastGateway.find_all_codecasts_ordered_by_date": {
            "name": "find_all_codecasts_ordered_by_date",
            "location": 12,
            "return": [
                "List[cleancoderscom.entities.codecast.Codecast]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/gateways/in_memory_gateway.py": {
        "InMemoryGateway.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryGateway.delete": {
            "name": "delete",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "cleancoderscom.entities.entity.Entity"
                ]
            }
        },
        "InMemoryGateway.find_all": {
            "name": "find_all",
            "location": 20,
            "return": [
                "List[cleancoderscom.entities.entity.Entity]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryGateway.find": {
            "name": "find",
            "location": 23,
            "return": [
                "Optional[cleancoderscom.entities.entity.Entity]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str"
                ]
            }
        },
        "InMemoryGateway.save": {
            "name": "save",
            "location": 26,
            "return": [
                "Optional[cleancoderscom.entities.entity.Entity]"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "cleancoderscom.entities.entity.Entity"
                ]
            }
        },
        "InMemoryGateway.establish_id": {
            "name": "establish_id",
            "location": 33,
            "return": [
                "cleancoderscom.entities.entity.Entity"
            ],
            "arguments": {
                "entity": [
                    "cleancoderscom.entities.entity.Entity"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/gateways/in_memory_license_gateway.py": {
        "InMemoryLicenseGateway.find_license_for": {
            "name": "find_license_for",
            "location": 11,
            "return": [
                "Optional[cleancoderscom.entities.license.License]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "cleancoderscom.entities.user.User"
                ],
                "codecast": [
                    "cleancoderscom.entities.codecast.Codecast"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/gateways/in_memory_user_gateway.py": {
        "InMemoryUserGateway.find_user": {
            "name": "find_user",
            "location": 7,
            "return": [
                "cleancoderscom.entities.user.User"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/gateways/__init__.py": {},
    "CleanCodeCaseStudy-master/tests/socket_server/test_socket_server.py": {
        "TestServerContext.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestServerContext.__enter__": {
            "name": "__enter__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServerContext.__exit__": {
            "name": "__exit__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionContext.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "float",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestConnectionContext.__enter__": {
            "name": "__enter__",
            "location": 32,
            "return": [
                "socket.socket"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnectionContext.__exit__": {
            "name": "__exit__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "SocketServerTest.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.test_instantiate": {
            "name": "test_instantiate",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.test_can_start_and_stop_server": {
            "name": "test_can_start_and_stop_server",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.test_accepts_an_incoming_connection": {
            "name": "test_accepts_an_incoming_connection",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.test_accepts_multiple_incoming_connections": {
            "name": "test_accepts_multiple_incoming_connections",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.test_can_send_and_recv_data": {
            "name": "test_can_send_and_recv_data",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.test_can_send_and_recv_multiple_messages": {
            "name": "test_can_send_and_recv_multiple_messages",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.test_can_echo": {
            "name": "test_can_echo",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.get_test_server_context": {
            "name": "get_test_server_context",
            "location": 90,
            "return": [
                "TestServerContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.get_test_connection_context": {
            "name": "get_test_connection_context",
            "location": 93,
            "return": [
                "TestConnectionContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketServerTest.start_simple_test_connection": {
            "name": "start_simple_test_connection",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/socket_server/test_socket_service.py": {
        "TestSocketService.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSocketService.serve": {
            "name": "serve",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "bytes",
                    "str",
                    "dict",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/socket_server/__init__.py": {},
    "CleanCodeCaseStudy-master/tests/utilities/hello_world.py": {
        "HelloWorld.serve": {
            "name": "serve",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "HelloWorld.main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CleanCodeCaseStudy-master/tests/utilities/main.py": {
        "MainService.serve": {
            "name": "serve",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Main.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.get_server": {
            "name": "get_server",
            "location": 16,
            "return": [
                "cleancoderscom.socket_server.SocketServer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.get_codecast_gateway": {
            "name": "get_codecast_gateway",
            "location": 19,
            "return": [
                "tests.gateways.in_memory_codecast_gateway.InMemoryCodecastGateway"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CleanCodeCaseStudy-master/tests/utilities/__init__.py": {}
}
{
    "Coinlist-NuCypher-Hackathon-master/setup.py": {
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/deploy/ansible/inventory/ec2.py": {
        "Ec2Inventory._empty_inventory": {
            "name": "_empty_inventory",
            "location": 242,
            "return": [
                "dict[typing.Text, dict[typing.Text, dict[, ]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.is_cache_valid": {
            "name": "is_cache_valid",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.read_settings": {
            "name": "read_settings",
            "location": 304,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.parse_cli_args": {
            "name": "parse_cli_args",
            "location": 523,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.do_api_calls_update_cache": {
            "name": "do_api_calls_update_cache",
            "location": 537,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.connect": {
            "name": "connect",
            "location": 556,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.boto_fix_security_token_in_profile": {
            "name": "boto_fix_security_token_in_profile",
            "location": 565,
            "return": [
                "str",
                "bool",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "connect_args": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Ec2Inventory.connect_to_aws": {
            "name": "connect_to_aws",
            "location": 572,
            "return": [
                "str",
                "int",
                "list[float]",
                "Generator",
                "list[]",
                "list[str]",
                "list[list[float]]",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "int",
                    "float",
                    "bool"
                ],
                "region": [
                    "float",
                    "Optional[float]",
                    "bool",
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Ec2Inventory.get_instances_by_region": {
            "name": "get_instances_by_region",
            "location": 593,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Ec2Inventory.tags_match_filters": {
            "name": "tags_match_filters",
            "location": 644,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Ec2Inventory.get_rds_instances_by_region": {
            "name": "get_rds_instances_by_region",
            "location": 671,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "int",
                    "Optional[Iterable[T]]",
                    "typing.Iterable[T]",
                    "bool",
                    "None"
                ]
            }
        },
        "Ec2Inventory.include_rds_clusters_by_region": {
            "name": "include_rds_clusters_by_region",
            "location": 713,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bytearray"
                ]
            }
        },
        "Ec2Inventory.get_elasticache_clusters_by_region": {
            "name": "get_elasticache_clusters_by_region",
            "location": 776,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.get_elasticache_replication_groups_by_region": {
            "name": "get_elasticache_replication_groups_by_region",
            "location": 819,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.get_auth_error_message": {
            "name": "get_auth_error_message",
            "location": 853,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.fail_with_error": {
            "name": "fail_with_error",
            "location": 870,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "err_msg": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "err_operation": [
                    "str",
                    "None",
                    "float",
                    "Tuple['cirq.Qid']",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "Ec2Inventory.get_instance": {
            "name": "get_instance",
            "location": 878,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bytes",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "instance_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Ec2Inventory.add_instance": {
            "name": "add_instance",
            "location": 886,
            "return": [
                "Dict[str, Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "dict[, ]"
                ],
                "region": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Ec2Inventory.add_rds_instance": {
            "name": "add_rds_instance",
            "location": 1081,
            "return": [
                "None",
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Union[int, str]",
                    "int",
                    "str"
                ],
                "region": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_cluster": {
            "name": "add_elasticache_cluster",
            "location": 1202,
            "return": [
                "None",
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "cluster": [],
                "region": [
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_node": {
            "name": "add_elasticache_node",
            "location": 1301,
            "return": [
                "Iterator[Dict[str, str]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "cluster": [
                    "dict",
                    "type"
                ],
                "region": [
                    "bytes",
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_replication_group": {
            "name": "add_elasticache_replication_group",
            "location": 1388,
            "return": [
                "None",
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "replication_group": [
                    "int",
                    "Type"
                ],
                "region": [
                    "str",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Ec2Inventory.get_route53_records": {
            "name": "get_route53_records",
            "location": 1441,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.get_instance_route53_names": {
            "name": "get_instance_route53_names",
            "location": 1468,
            "return": [
                "list[]",
                "str",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "typing.Iterable[dict[str, typing.Any]]",
                    "Union[Sequence[str], Sequence[int]]",
                    "typing.Sequence[str]",
                    "Iterable[str]",
                    "typing.Sequence[int]",
                    "List[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Ec2Inventory.get_host_info_dict_from_instance": {
            "name": "get_host_info_dict_from_instance",
            "location": 1489,
            "return": [
                "str",
                "bool",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Ec2Inventory.get_host_info_dict_from_describe_dict": {
            "name": "get_host_info_dict_from_describe_dict",
            "location": 1542,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "describe_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Ec2Inventory.get_host_info": {
            "name": "get_host_info",
            "location": 1627,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.push": {
            "name": "push",
            "location": 1646,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "my_dict": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "Callable"
                ],
                "key": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "element": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "Ec2Inventory.push_group": {
            "name": "push_group",
            "location": 1656,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "my_dict": [
                    "dict[str, list[typing.Any]]",
                    "dict",
                    "Dict[str, List[Any]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "key": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "element": [
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Ec2Inventory.get_inventory_from_cache": {
            "name": "get_inventory_from_cache",
            "location": 1665,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.load_index_from_cache": {
            "name": "load_index_from_cache",
            "location": 1673,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.write_to_cache": {
            "name": "write_to_cache",
            "location": 1679,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "List[str]",
                    "list[str]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Ec2Inventory.uncammelize": {
            "name": "uncammelize",
            "location": 1686,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "T",
                    "KT",
                    "Union[int, slice]"
                ]
            }
        },
        "Ec2Inventory.to_safe": {
            "name": "to_safe",
            "location": 1690,
            "return": [
                "bool",
                "List[Dict[str, str]]",
                "list",
                "Tuple[Sequence]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Ec2Inventory.json_format_dict": {
            "name": "json_format_dict",
            "location": 1697,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "pretty": [
                    "bool",
                    "Optional[bool]",
                    "list",
                    "memoryview",
                    "Iterable[bytes]",
                    "List[Dict]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/docs/source/conf.py": {
        "remove_module_docstring": {
            "name": "remove_module_docstring",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "what": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "obj": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "options": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "lines": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 211,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/examples/finnegans_wake_demo/numedia.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/__about__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/economics.py": {
        "Economics.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_supply": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "initial_inflation": [
                    "float",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "T_half": [
                    "float",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "T_sat": [
                    "float",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "small_staker_multiplier": [
                    "float",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/actors.py": {
        "only_me": {
            "name": "only_me",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "only_me.wrapped": {
            "name": "wrapped",
            "location": 44,
            "return": [
                "int",
                "str",
                "eth.vm.computation.BaseComputation"
            ],
            "arguments": {
                "actor": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "NucypherTokenActor.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "blockchain": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "List[\"InlineContent\"]",
                    "str",
                    "Callable",
                    "list[C]",
                    "Optional[List[Any]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "NucypherTokenActor.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenActor.eth_balance": {
            "name": "eth_balance",
            "location": 92,
            "return": [
                "dict",
                "Sequence[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenActor.token_balance": {
            "name": "token_balance",
            "location": 98,
            "return": [
                "NU",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployer.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "trezor.utils.Writer"
                ],
                "deployer_address": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "bare": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]"
                ]
            }
        },
        "Deployer.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployer.from_blockchain": {
            "name": "from_blockchain",
            "location": 141,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "Sequence[str]",
                    "Exception",
                    "typing.Sequence[str]",
                    "Optional[BaseException]",
                    "BaseException",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "provider_uri": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "utils.types.Box3D"
                ],
                "registry": [
                    "str",
                    "None",
                    "Callable",
                    "utils.types.Box3D",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Deployer.deployer_address": {
            "name": "deployer_address",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Deployer.token_balance": {
            "name": "token_balance",
            "location": 156,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployer.deploy_token_contract": {
            "name": "deploy_token_contract",
            "location": 161,
            "return": [
                "str",
                "float",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployer.deploy_miner_contract": {
            "name": "deploy_miner_contract",
            "location": 169,
            "return": [
                "int",
                "Callable",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "int",
                    "float",
                    "nucypher.types.NuNits",
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "Deployer.deploy_policy_contract": {
            "name": "deploy_policy_contract",
            "location": 179,
            "return": [
                "int",
                "Callable",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "int",
                    "float",
                    "nucypher.types.NuNits",
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "Deployer.deploy_escrow_proxy": {
            "name": "deploy_escrow_proxy",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "float",
                    "datetime.datetime",
                    "int",
                    "bytes",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "Deployer.deploy_user_escrow": {
            "name": "deploy_user_escrow",
            "location": 198,
            "return": [
                "UserEscrowDeployer"
            ],
            "arguments": {
                "self": [],
                "allocation_registry": [
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Deployer.deploy_network_contracts": {
            "name": "deploy_network_contracts",
            "location": 208,
            "return": [
                "tuple[dict[, typing.Union[dict[, ],dict[int, str],dict[typing.Any, dict[str, typing.Any]],dict[str, int],int,dict[str, str]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "miner_secret": [
                    "str",
                    "bytes",
                    "int",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "bool"
                ],
                "policy_secret": [
                    "str",
                    "bytes",
                    "int",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "bool"
                ]
            }
        },
        "Deployer.deploy_beneficiary_contracts": {
            "name": "deploy_beneficiary_contracts",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allocations": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "allocation_outfile": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "allocation_registry": [
                    "int",
                    "None",
                    "float",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Deployer.__read_allocation_data": {
            "name": "__read_allocation_data",
            "location": 254,
            "return": [
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, List[int]]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "bytes",
                    "int",
                    "Generator"
                ]
            }
        },
        "Deployer.deploy_beneficiaries_from_file": {
            "name": "deploy_beneficiaries_from_file",
            "location": 263,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "allocation_data_filepath": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Dict[str, List[Any]]",
                    "dict[str, list[typing.Any]]"
                ],
                "allocation_outfile": [
                    "bool",
                    "None",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Tuple[Dict[str, Any], Dict[str, Any]]",
                    "tuple[typing.Union[dict[str, typing.Any],dict[str, typing.Any]]]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Miner.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_me": [
                    "float",
                    "str",
                    "bool",
                    "datetime.datetime"
                ],
                "start_staking_loop": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "Optional[int]",
                    "int",
                    "raiden.utils.PaymentWithFeeAmount"
                ]
            }
        },
        "Miner.stake": {
            "name": "stake",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "confirm_now": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Miner._confirm_period": {
            "name": "_confirm_period",
            "location": 327,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner._crash_gracefully": {
            "name": "_crash_gracefully",
            "location": 345,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Miner.handle_staking_errors": {
            "name": "handle_staking_errors",
            "location": 354,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.start_staking_loop": {
            "name": "start_staking_loop",
            "location": 363,
            "return": [
                "bool",
                "float",
                "dict[str, str]",
                "typing.Deque"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "bool",
                    "Optional[Callable]",
                    "str"
                ]
            }
        },
        "Miner.is_staking": {
            "name": "is_staking",
            "location": 373,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.locked_tokens": {
            "name": "locked_tokens",
            "location": 378,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.total_staked": {
            "name": "total_staked",
            "location": 383,
            "return": [
                "NU",
                "str",
                "Optional[int]",
                "trezor.utils.Writer",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.__read_stakes": {
            "name": "__read_stakes",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.stakes": {
            "name": "stakes",
            "location": 400,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.deposit": {
            "name": "deposit",
            "location": 405,
            "return": [
                "tuple[typing.Union[list[],set[]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str",
                    "float"
                ],
                "lock_periods": [
                    "int",
                    "float",
                    "str",
                    "nucypher.blockchain.eth.token.NU",
                    "None",
                    "Optional[float]",
                    "datetime.datetime"
                ]
            }
        },
        "Miner.divide_stake": {
            "name": "divide_stake",
            "location": 419,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "stake_index": [
                    "int",
                    "float",
                    "bool",
                    "raiden.utils.BlockIdentifier"
                ],
                "target_value": [
                    "bool",
                    "int",
                    "nucypher.blockchain.eth.token.NU",
                    "Union[int, Tuple[int, ...]]"
                ],
                "additional_periods": [
                    "None",
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.date.time",
                    "maya.MayaDT"
                ],
                "expiration": [
                    "int",
                    "None",
                    "str",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "maya.MayaDT",
                    "datetime.date.time"
                ]
            }
        },
        "Miner.__validate_stake": {
            "name": "__validate_stake",
            "location": 466,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float",
                    "str",
                    "Union[str, float]",
                    "nucypher.blockchain.eth.token.NU"
                ],
                "lock_periods": [
                    "int",
                    "str"
                ]
            }
        },
        "Miner.initialize_stake": {
            "name": "initialize_stake",
            "location": 477,
            "return": [
                "OrderedDict",
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "nucypher.blockchain.eth.token.NU",
                    "raiden.utils.PaymentWithFeeAmount",
                    "Union[str, float]",
                    "Union[float, int]"
                ],
                "lock_periods": [
                    "int",
                    "None",
                    "str",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.Balance"
                ],
                "expiration": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "entire_balance": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Miner.confirm_activity": {
            "name": "confirm_activity",
            "location": 526,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.mint": {
            "name": "mint",
            "location": 533,
            "return": [
                "int",
                "list[int]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.calculate_reward": {
            "name": "calculate_reward",
            "location": 539,
            "return": [
                "int",
                "str",
                "Callable",
                "dict[str, str]",
                "dict[str, typing.Union[dict[, ],typing.Any]]",
                "list[tuple[typing.Union[str,str,typing.Any]]]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.collect_policy_reward": {
            "name": "collect_policy_reward",
            "location": 544,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "collector_address": [
                    "str",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "policy_agent": [
                    "int",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Miner.collect_staking_reward": {
            "name": "collect_staking_reward",
            "location": 554,
            "return": [
                "int",
                "Callable",
                "str",
                "typing.Type",
                "list[int]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyAuthor.__init__": {
            "name": "__init__",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "PolicyAuthor.recruit": {
            "name": "recruit",
            "location": 577,
            "return": [
                "int",
                "str",
                "Callable",
                "float",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "Dict[str, Dict]",
                    "bool",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "PolicyAuthor.create_policy": {
            "name": "create_policy",
            "location": 589,
            "return": [
                "BlockchainPolicy",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/agents.py": {
        "EthereumContractAgent.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "None",
                    "Optional[int]",
                    "str",
                    "int",
                    "nucypher.network.middleware.RestMiddleware",
                    "Optional[str]"
                ],
                "contract": [
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "transaction_gas": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "EthereumContractAgent.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.__eq__": {
            "name": "__eq__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "str",
                    "Callable[[dict], None]",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "EthereumContractAgent.contract": {
            "name": "contract",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.contract_address": {
            "name": "contract_address",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.contract_name": {
            "name": "contract_name",
            "location": 90,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenAgent.get_balance": {
            "name": "get_balance",
            "location": 98,
            "return": [
                "List['mypy.types.Type']",
                "Type",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "NucypherTokenAgent.approve_transfer": {
            "name": "approve_transfer",
            "location": 103,
            "return": [
                "int",
                "typing.Collection",
                "str",
                "Callable",
                "dict[int, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Optional[int]",
                    "None"
                ],
                "target_address": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Optional[int]",
                    "None"
                ],
                "sender_address": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "NucypherTokenAgent.transfer": {
            "name": "transfer",
            "location": 110,
            "return": [
                "int",
                "typing.Collection",
                "str",
                "Callable",
                "dict[int, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str",
                    "list[tuple[]]",
                    "constants.SeekBehavior",
                    "List[tuple]"
                ],
                "target_address": [
                    "int",
                    "str",
                    "list[tuple[]]",
                    "constants.SeekBehavior",
                    "List[tuple]"
                ],
                "sender_address": [
                    "int",
                    "str",
                    "list[tuple[]]",
                    "constants.SeekBehavior",
                    "List[tuple]"
                ]
            }
        },
        "MinerAgent.get_miner_population": {
            "name": "get_miner_population",
            "location": 129,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerAgent.get_current_period": {
            "name": "get_current_period",
            "location": 133,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerAgent.get_locked_tokens": {
            "name": "get_locked_tokens",
            "location": 141,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "miner_address": [
                    "int",
                    "float",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ],
                "periods": [
                    "int",
                    "float",
                    "Dict[int, dict]"
                ]
            }
        },
        "MinerAgent.owned_tokens": {
            "name": "owned_tokens",
            "location": 149,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int",
                    "constants.TransactionType"
                ]
            }
        },
        "MinerAgent.get_stake_info": {
            "name": "get_stake_info",
            "location": 152,
            "return": [
                "tuple[typing.Union[float,int,list[dict[str, typing.Any]]]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "miner_address": [
                    "Optional[dict]",
                    "dict[, ]",
                    "None"
                ],
                "stake_index": [
                    "Optional[dict]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "MinerAgent.get_all_stakes": {
            "name": "get_all_stakes",
            "location": 157,
            "return": [
                "typing.Generator[]",
                "bool",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "miner_address": [
                    "Union[int, slice]",
                    "bytes",
                    "int"
                ]
            }
        },
        "MinerAgent.deposit_tokens": {
            "name": "deposit_tokens",
            "location": 164,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "T"
                ],
                "lock_periods": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "T"
                ],
                "sender_address": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        },
        "MinerAgent.divide_stake": {
            "name": "divide_stake",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "miner_address": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "stake_index": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "target_value": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "periods": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MinerAgent.confirm_activity": {
            "name": "confirm_activity",
            "location": 178,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "bytes",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "node_address": []
            }
        },
        "MinerAgent.mint": {
            "name": "mint",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "node_address": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MinerAgent.calculate_staking_reward": {
            "name": "calculate_staking_reward",
            "location": 197,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MinerAgent.collect_staking_reward": {
            "name": "collect_staking_reward",
            "location": 205,
            "return": [
                "int",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "bool",
                    "Optional[bool]",
                    "None",
                    "int",
                    "SendCh[trio.abc.Stream]"
                ]
            }
        },
        "MinerAgent.swarm": {
            "name": "swarm",
            "location": 215,
            "return": [
                "typing.Union[typing.Generator[builtins.str, None, None], typing.Generator[builtins.str, None, None]]",
                "typing.Generator[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerAgent.sample": {
            "name": "sample",
            "location": 227,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "float",
                    "List['cirq.Qid']"
                ],
                "duration": [
                    "int",
                    "Union[int, slice]"
                ],
                "additional_ursulas": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ],
                "attempts": [
                    "int",
                    "str"
                ]
            }
        },
        "PolicyAgent.create_policy": {
            "name": "create_policy",
            "location": 267,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "bool"
                ],
                "author_address": [
                    "int",
                    "str",
                    "None",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "bool"
                ],
                "value": [
                    "int",
                    "str",
                    "None",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "bool"
                ],
                "periods": [
                    "int",
                    "str",
                    "None",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "bool"
                ],
                "initial_reward": [
                    "int",
                    "str",
                    "None",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "bool"
                ],
                "node_addresses": [
                    "int",
                    "str",
                    "None",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "bool"
                ]
            }
        },
        "PolicyAgent.fetch_policy": {
            "name": "fetch_policy",
            "location": 283,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "typing.Counter"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "Optional[bool]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "PolicyAgent.revoke_policy": {
            "name": "revoke_policy",
            "location": 288,
            "return": [
                "int",
                "str",
                "list[str]",
                "Callable",
                "list[]",
                "float",
                "dict[int, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "str",
                    "int"
                ],
                "author_address": [
                    "str",
                    "int"
                ]
            }
        },
        "PolicyAgent.collect_policy_reward": {
            "name": "collect_policy_reward",
            "location": 294,
            "return": [
                "bool",
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "collector_address": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "web3.contracContract"
                ],
                "miner_address": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "web3.contracContract"
                ]
            }
        },
        "PolicyAgent.fetch_policy_arrangements": {
            "name": "fetch_policy_arrangements",
            "location": 300,
            "return": [
                "",
                "typing.Generator[typing.Union[int,dict[str, str]]]"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "int",
                    "str"
                ]
            }
        },
        "PolicyAgent.revoke_arrangement": {
            "name": "revoke_arrangement",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "str",
                    "int"
                ],
                "node_address": [
                    "str",
                    "int"
                ],
                "author_address": [
                    "str",
                    "int"
                ]
            }
        },
        "PolicyAgent.calculate_refund": {
            "name": "calculate_refund",
            "location": 311,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "typing.Counter"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "int",
                    "str"
                ],
                "author_address": [
                    "int",
                    "str"
                ]
            }
        },
        "PolicyAgent.collect_refund": {
            "name": "collect_refund",
            "location": 316,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Type",
                "typing.Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "str",
                    "int"
                ],
                "author_address": [
                    "str",
                    "int"
                ]
            }
        },
        "UserEscrowAgent.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beneficiary": [
                    "int",
                    "float",
                    "bool"
                ],
                "blockchain": [
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "allocation_registry": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "UserEscrowAgent.__read_proxy": {
            "name": "__read_proxy",
            "location": 356,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.__fetch_principal_contract": {
            "name": "__fetch_principal_contract",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_address": [
                    "int",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "UserEscrowAgent.__set_owner": {
            "name": "__set_owner",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.__read_principal": {
            "name": "__read_principal",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_address": [
                    "int",
                    "None",
                    "str",
                    "List[str]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "UserEscrowAgent.owner": {
            "name": "owner",
            "location": 382,
            "return": [
                "str",
                "bytes",
                "int",
                "typing.Pattern",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.beneficiary": {
            "name": "beneficiary",
            "location": 387,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.proxy_contract": {
            "name": "proxy_contract",
            "location": 391,
            "return": [
                "NO_CONTRACT_AVAILABLE",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.principal_contract": {
            "name": "principal_contract",
            "location": 397,
            "return": [
                "NO_CONTRACT_AVAILABLE",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.unvested_tokens": {
            "name": "unvested_tokens",
            "location": 404,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.end_timestamp": {
            "name": "end_timestamp",
            "location": 408,
            "return": [
                "Optional[int]",
                "eth.vm.computation.BaseComputation",
                "int",
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.lock": {
            "name": "lock",
            "location": 411,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "nucypher.types.Period.Delta",
                    "nucypher.types.NuNits",
                    "Callable"
                ],
                "periods": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "nucypher.types.Period.Delta",
                    "nucypher.types.NuNits",
                    "Callable"
                ]
            }
        },
        "UserEscrowAgent.withdraw_tokens": {
            "name": "withdraw_tokens",
            "location": 416,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UserEscrowAgent.withdraw_eth": {
            "name": "withdraw_eth",
            "location": 421,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.deposit_as_miner": {
            "name": "deposit_as_miner",
            "location": 426,
            "return": [
                "int",
                "float",
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "T"
                ],
                "periods": [
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "UserEscrowAgent.withdraw_as_miner": {
            "name": "withdraw_as_miner",
            "location": 431,
            "return": [
                "int",
                "float",
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UserEscrowAgent.confirm_activity": {
            "name": "confirm_activity",
            "location": 436,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.mint": {
            "name": "mint",
            "location": 441,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.collect_policy_reward": {
            "name": "collect_policy_reward",
            "location": 446,
            "return": [
                "int",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.set_min_reward_rate": {
            "name": "set_min_reward_rate",
            "location": 451,
            "return": [
                "bool",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "str",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "UserEscrowAgent.UserEscrowProxyAgent._generate_beneficiary_agency": {
            "name": "_generate_beneficiary_agency",
            "location": 334,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "principal_address": [
                    "str",
                    "bool",
                    "int",
                    "nucypher.types.Period"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/chains.py": {
        "Blockchain.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "Optional[float]",
                    "None",
                    "Optional[bool]",
                    "str",
                    "float",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Blockchain.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blockchain.interface": {
            "name": "interface",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blockchain.connect": {
            "name": "connect",
            "location": 65,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Union[int, float]",
                    "float"
                ],
                "provider_uri": [
                    "float",
                    "None",
                    "Type",
                    "typing.Type"
                ],
                "registry": [
                    "bool",
                    "None",
                    "int",
                    "tuple[]",
                    "Optional[int]",
                    "tuple"
                ],
                "deployer": [
                    "bool",
                    "int",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Dict[str, Tuple[str, int, int]]",
                    "str",
                    "Dict[int, str]"
                ],
                "compile": [
                    "bool",
                    "Mapping[Any, Any]",
                    "str",
                    "Optional[int]"
                ],
                "poa": [
                    "bool"
                ]
            }
        },
        "Blockchain.get_contract": {
            "name": "get_contract",
            "location": 97,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Blockchain.wait_for_receipt": {
            "name": "wait_for_receipt",
            "location": 104,
            "return": [
                "int",
                "bool",
                "dict[str, typing.Any]",
                "Dict[str, int]",
                "dict[, ]",
                "Optional[Union[str, Any]]",
                "range",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "txhash": [
                    "bool",
                    "str",
                    "float",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "timeout": [
                    "Optional[float]",
                    "None",
                    "Optional[Any]",
                    "float",
                    "typing.Any"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/constants.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/decorators.py": {
        "validate_checksum_address": {
            "name": "validate_checksum_address",
            "location": 9,
            "return": [
                "int",
                "Optional[str]",
                "bytearray"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "nucypher_transaction": {
            "name": "nucypher_transaction",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "validate_checksum_address.wrapped": {
            "name": "wrapped",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "nucypher_transaction.wrapped": {
            "name": "wrapped",
            "location": 71,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/deployers.py": {
        "ContractDeployer.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployer_address": [
                    "bool",
                    "str",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "blockchain": [
                    "int",
                    "None",
                    "float",
                    "apistar.interfaces.Router",
                    "bool"
                ]
            }
        },
        "ContractDeployer.contract_address": {
            "name": "contract_address",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.deployer_address": {
            "name": "deployer_address",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.contract": {
            "name": "contract",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.dispatcher": {
            "name": "dispatcher",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.is_deployed": {
            "name": "is_deployed",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.ready_to_deploy": {
            "name": "ready_to_deploy",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.check_deployment_readiness": {
            "name": "check_deployment_readiness",
            "location": 88,
            "return": [
                "bool",
                "tuple[typing.Union[bool,list[]]]",
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "fail": [
                    "bool"
                ]
            }
        },
        "ContractDeployer._ensure_contract_deployment": {
            "name": "_ensure_contract_deployment",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.deploy": {
            "name": "deploy",
            "location": 130,
            "return": [
                "builtins.dict",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.make_agent": {
            "name": "make_agent",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenDeployer.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployer_address": [
                    "str"
                ]
            }
        },
        "NucypherTokenDeployer.deploy": {
            "name": "deploy",
            "location": 152,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],None,dict[str, int]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DispatcherDeployer.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "target_contract": [
                    "str",
                    "int",
                    "float",
                    "Dict[int, List[int]]",
                    "dict[int, list[int]]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "secret_hash": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[Any, bool]",
                    "dict[typing.Any, bool]"
                ]
            }
        },
        "DispatcherDeployer.deploy": {
            "name": "deploy",
            "location": 183,
            "return": [
                "dict[typing.Text, typing.Union[int,str,None]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerEscrowDeployer.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "secret_hash": [
                    "str",
                    "int",
                    "dict[, ]",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "bool",
                    "dict"
                ]
            }
        },
        "MinerEscrowDeployer.__check_policy_manager": {
            "name": "__check_policy_manager",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerEscrowDeployer.deploy": {
            "name": "deploy",
            "location": 210,
            "return": [
                "dict[typing.Text, typing.Union[typing.Mapping,dict[str, typing.Any],int,str]]",
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerEscrowDeployer.make_agent": {
            "name": "make_agent",
            "location": 278,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyManagerDeployer.make_agent": {
            "name": "make_agent",
            "location": 294,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyManagerDeployer.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "secret_hash": [
                    "str",
                    "int",
                    "dict[, ]",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "bool",
                    "dict"
                ]
            }
        },
        "PolicyManagerDeployer.deploy": {
            "name": "deploy",
            "location": 304,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[, ],int]]",
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryLinkerDeployer.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "target_contract": [
                    "str",
                    "int",
                    "float",
                    "Dict[int, List[int]]",
                    "dict[int, list[int]]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "secret_hash": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[Any, bool]",
                    "dict[typing.Any, bool]"
                ]
            }
        },
        "LibraryLinkerDeployer.deploy": {
            "name": "deploy",
            "location": 354,
            "return": [
                "dict[typing.Text, str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowProxyDeployer.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "secret_hash": [
                    "str",
                    "int",
                    "dict[, ]",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "bool",
                    "dict"
                ]
            }
        },
        "UserEscrowProxyDeployer.__get_state_contract": {
            "name": "__get_state_contract",
            "location": 373,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowProxyDeployer.deploy": {
            "name": "deploy",
            "location": 376,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowProxyDeployer.get_latest_version": {
            "name": "get_latest_version",
            "location": 400,
            "return": [
                "list",
                "bool",
                "str",
                "Callable",
                "set[str]",
                "dict[str, typing.Any]",
                "dict[str, str]",
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int"
                ],
                "blockchain": [
                    "bool",
                    "int"
                ]
            }
        },
        "UserEscrowDeployer.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allocation_registry": [
                    "int",
                    "None",
                    "float",
                    "apistar.interfaces.Router",
                    "bool"
                ]
            }
        },
        "UserEscrowDeployer.make_agent": {
            "name": "make_agent",
            "location": 421,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowDeployer.allocation_registry": {
            "name": "allocation_registry",
            "location": 430,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowDeployer.assign_beneficiary": {
            "name": "assign_beneficiary",
            "location": 433,
            "return": [
                "int",
                "float",
                "Callable",
                "str",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable[[dict], None]",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "UserEscrowDeployer.initial_deposit": {
            "name": "initial_deposit",
            "location": 442,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "duration": [
                    "list[]",
                    "T",
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "UserEscrowDeployer.enroll_principal_contract": {
            "name": "enroll_principal_contract",
            "location": 458,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowDeployer.deliver": {
            "name": "deliver",
            "location": 465,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "bool"
                ],
                "duration": [
                    "int",
                    "float",
                    "bool"
                ],
                "beneficiary_address": [
                    "str",
                    "Union[bytes, str]",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "UserEscrowDeployer.deploy": {
            "name": "deploy",
            "location": 481,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/interfaces.py": {
        "BlockchainInterface.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider_uri": [
                    "int",
                    "None",
                    "str",
                    "bytearray",
                    "Optional[float]",
                    "float"
                ],
                "provider": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "tuple[typing.Union[int,...]]",
                    "Optional[int]",
                    "Optional[Tuple[int, ...]]"
                ],
                "auto_connect": [
                    "bool"
                ],
                "timeout": [
                    "None",
                    "Optional[Iterable['cirq.Qid']]",
                    "int",
                    "typing.Iterable['cirq.Qid']",
                    "Union[int, float]",
                    "float",
                    "Union[bool, List[bool]]",
                    "bool"
                ],
                "registry": [
                    "Optional[str]",
                    "None",
                    "str",
                    "List[str]",
                    "int",
                    "list[str]"
                ],
                "compiler": [
                    "bool",
                    "None",
                    "list",
                    "list[]"
                ]
            }
        },
        "BlockchainInterface.__repr__": {
            "name": "__repr__",
            "location": 179,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.connect": {
            "name": "connect",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.provider": {
            "name": "provider",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.is_connected": {
            "name": "is_connected",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.node_version": {
            "name": "node_version",
            "location": 215,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.add_provider": {
            "name": "add_provider",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Union[web3.IPCProvider, web3.WebsocketProvider, web3.HTTPProvider]",
                    "int",
                    "None",
                    "float"
                ],
                "provider_uri": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "timeout": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "BlockchainInterface.get_contract_factory": {
            "name": "get_contract_factory",
            "location": 264,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ]
            }
        },
        "BlockchainInterface._wrap_contract": {
            "name": "_wrap_contract",
            "location": 281,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "wrapper_contract": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "target_contract": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "factory": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "BlockchainInterface.get_contract_by_address": {
            "name": "get_contract_by_address",
            "location": 294,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "int"
                ]
            }
        },
        "BlockchainInterface.get_contract_by_name": {
            "name": "get_contract_by_name",
            "location": 305,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "proxy_name": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "IO",
                    "typing.IO"
                ],
                "use_proxy_address": [
                    "bool",
                    "str",
                    "list"
                ],
                "factory": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "BlockchainInterface.call_backend_sign": {
            "name": "call_backend_sign",
            "location": 366,
            "return": [
                "float",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [],
                "message": [
                    "bool",
                    "list[S]",
                    "int",
                    "List[src.main.core.models.state.State]",
                    "eth.abc.BlockHeaderAPI"
                ]
            }
        },
        "BlockchainInterface.call_backend_verify": {
            "name": "call_backend_verify",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pubkey": [
                    "str",
                    "int",
                    "bool"
                ],
                "signature": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ],
                "msg_hash": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "BlockchainInterface.unlock_account": {
            "name": "unlock_account",
            "location": 391,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "BlockchainDeployerInterface.__init__": {
            "name": "__init__",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployer_address": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "BlockchainDeployerInterface.deployer_address": {
            "name": "deployer_address",
            "location": 411,
            "return": [
                "None",
                "int",
                "str",
                "dict[, ]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainDeployerInterface.deploy_contract": {
            "name": "deploy_contract",
            "location": 414,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/policies.py": {
        "BlockchainArrangement.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "int",
                    "nucypher.blockchain.eth.actors.Miner",
                    "nucypher.characters.lawful.Ursula",
                    "nucypher.characters.lawful.Alice",
                    "nucypher.blockchain.eth.actors.PolicyAuthor",
                    "maya.MayaDT"
                ],
                "ursula": [
                    "int",
                    "nucypher.blockchain.eth.actors.Miner",
                    "nucypher.characters.lawful.Ursula",
                    "nucypher.characters.lawful.Alice",
                    "nucypher.blockchain.eth.actors.PolicyAuthor",
                    "maya.MayaDT"
                ],
                "value": [
                    "int",
                    "float",
                    "Optional[Union[str, Any]]"
                ],
                "expiration": [
                    "bool",
                    "nucypher.blockchain.eth.actors.PolicyAuthor",
                    "float",
                    "None",
                    "maya.MayaDT",
                    "nucypher.blockchain.eth.actors.Miner",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "BlockchainArrangement.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainArrangement.revoke": {
            "name": "revoke",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str",
                "float",
                "models.Question",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainPolicy.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Sequence[typing.Any]",
                    "Sequence[Any]",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Optional[Callable[[Type, Dict], Any]]",
                    "raiden.utils.Any"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]",
                    "typing.Callable[None, bool]"
                ],
                "expiration": [
                    "int",
                    "float",
                    "str"
                ],
                "handpicked_ursulas": [
                    "List[Tuple[int, float]]",
                    "None",
                    "int",
                    "float",
                    "str",
                    "list[tuple[typing.Union[int,float]]]"
                ],
                "initial_reward": [
                    "int",
                    "List[Tuple[int, float]]",
                    "float",
                    "str"
                ]
            }
        },
        "BlockchainPolicy.get_arrangement": {
            "name": "get_arrangement",
            "location": 126,
            "return": [
                "BlockchainArrangement",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "str",
                    "int",
                    "excars.models.locations.Location"
                ]
            }
        },
        "BlockchainPolicy.__find_ursulas": {
            "name": "__find_ursulas",
            "location": 145,
            "return": [
                "str",
                "bool",
                "Tuple[str, Optional[str]]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ether_addresses": [
                    "list[str]",
                    "List[str]",
                    "list[A]",
                    "str",
                    "Optional[List[\"Address\"]]"
                ],
                "target_quantity": [
                    "int",
                    "float",
                    "str",
                    "Iterable[List[str]]",
                    "Iterable[List[Any]]",
                    "tuple",
                    "bool",
                    "List[List[int]]"
                ],
                "timeout": [
                    "int",
                    "Union[None, int]"
                ]
            }
        },
        "BlockchainPolicy.make_arrangements": {
            "name": "make_arrangements",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "BlockchainPolicy.publish": {
            "name": "publish",
            "location": 257,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/registry.py": {
        "EthereumContractRegistry.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_filepath": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "EthereumContractRegistry.filepath": {
            "name": "filepath",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractRegistry.enrolled_names": {
            "name": "enrolled_names",
            "location": 70,
            "return": [
                "list[str]",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractRegistry.enrolled_addresses": {
            "name": "enrolled_addresses",
            "location": 75,
            "return": [
                "list[str]",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "EthereumContractRegistry._destroy": {
            "name": "_destroy",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractRegistry.write": {
            "name": "write",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "\"Project\""
                ]
            }
        },
        "EthereumContractRegistry.read": {
            "name": "read",
            "location": 97,
            "return": [
                "list[]",
                "str",
                "dict[, ]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractRegistry.enroll": {
            "name": "enroll",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "typing.Any",
                    "Optional[Union[Any, Any]]",
                    "Optional[int]"
                ],
                "contract_address": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "typing.Any",
                    "Optional[Union[Any, Any]]",
                    "Optional[int]"
                ],
                "contract_abi": [
                    "str"
                ]
            }
        },
        "EthereumContractRegistry.search": {
            "name": "search",
            "location": 143,
            "return": [
                "str",
                "bool",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "contract_address": [
                    "str",
                    "None",
                    "dict",
                    "Dict[str, str]",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "TemporaryEthereumContractRegistry.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryEthereumContractRegistry.clear": {
            "name": "clear",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryEthereumContractRegistry.cleanup": {
            "name": "cleanup",
            "location": 185,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryEthereumContractRegistry.commit": {
            "name": "commit",
            "location": 188,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "InMemoryEthereumContractRegistry.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryEthereumContractRegistry.clear": {
            "name": "clear",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryEthereumContractRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 212,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InMemoryEthereumContractRegistry.write": {
            "name": "write",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "dict",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "InMemoryEthereumContractRegistry.read": {
            "name": "read",
            "location": 218,
            "return": [
                "list[]",
                "str",
                "dict[, ]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllocationRegistry.search": {
            "name": "search",
            "location": 245,
            "return": [
                "list[]",
                "int",
                "float",
                "str",
                "bytes",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "str",
                    "None",
                    "int",
                    "List[Dict]",
                    "list[dict[, ]]"
                ],
                "contract_address": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "AllocationRegistry.enroll": {
            "name": "enroll",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "str",
                    "bytes"
                ],
                "contract_address": [
                    "List[int]",
                    "list[int]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "contract_abi": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "InMemoryAllocationRegistry.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryAllocationRegistry.clear": {
            "name": "clear",
            "location": 297,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryAllocationRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 300,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InMemoryAllocationRegistry.write": {
            "name": "write",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "dict",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "InMemoryAllocationRegistry.read": {
            "name": "read",
            "location": 306,
            "return": [
                "dict[, ]",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/token.py": {
        "NU.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int"
                ],
                "denomination": [
                    "int",
                    "List[Tuple[int, float]]",
                    "str",
                    "list[tuple[typing.Union[int,float]]]",
                    "float",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "NU.from_nunits": {
            "name": "from_nunits",
            "location": 59,
            "return": [
                "str",
                "bytes",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "str",
                    "Union[int, float, str]",
                    "typing.Type",
                    "type"
                ],
                "value": [
                    "int",
                    "float",
                    "str",
                    "Union[int, float, str]",
                    "typing.Type",
                    "type"
                ]
            }
        },
        "NU.from_tokens": {
            "name": "from_tokens",
            "location": 63,
            "return": [
                "str",
                "bytes",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Union[int, float, str]",
                    "str",
                    "float",
                    "type",
                    "typing.Type"
                ],
                "value": [
                    "int",
                    "Union[int, float, str]",
                    "str",
                    "float",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "NU.to_tokens": {
            "name": "to_tokens",
            "location": 66,
            "return": [
                "List[str]",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.to_nunits": {
            "name": "to_nunits",
            "location": 70,
            "return": [
                "int",
                "str",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.__eq__": {
            "name": "__eq__",
            "location": 74,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__bool__": {
            "name": "__bool__",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.__radd__": {
            "name": "__radd__",
            "location": 83,
            "return": [
                "NU",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__add__": {
            "name": "__add__",
            "location": 86,
            "return": [
                "NU",
                "str",
                "List[int]",
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "NU.__sub__": {
            "name": "__sub__",
            "location": 89,
            "return": [
                "NU",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__rmul__": {
            "name": "__rmul__",
            "location": 92,
            "return": [
                "NU",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__mul__": {
            "name": "__mul__",
            "location": 95,
            "return": [
                "NU",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__floordiv__": {
            "name": "__floordiv__",
            "location": 98,
            "return": [
                "NU",
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__gt__": {
            "name": "__gt__",
            "location": 101,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__ge__": {
            "name": "__ge__",
            "location": 104,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__lt__": {
            "name": "__lt__",
            "location": 107,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__le__": {
            "name": "__le__",
            "location": 110,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__int__": {
            "name": "__int__",
            "location": 113,
            "return": [
                "eth.chains.base.MiningChain",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.__repr__": {
            "name": "__repr__",
            "location": 117,
            "return": [
                "typing.Text",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.__str__": {
            "name": "__str__",
            "location": 121,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "owner_address": [
                    "str",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "index": [
                    "bool",
                    "str",
                    "int"
                ],
                "value": [
                    "list",
                    "str",
                    "list[]",
                    "int",
                    "bytes"
                ],
                "start_period": [
                    "int",
                    "float"
                ],
                "end_period": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "Stake.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [
                "typing.Text",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.__eq__": {
            "name": "__eq__",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Stake.from_stake_info": {
            "name": "from_stake_info",
            "location": 160,
            "return": [
                "str",
                "dict[, ]",
                "float",
                "bool",
                "int",
                "dict[str, typing.Union[int,str]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]"
                ],
                "owner_address": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]"
                ],
                "index": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]"
                ],
                "stake_info": [
                    "tuple[typing.Union[int,int,int]]",
                    "int",
                    "Tuple[int, int, int]",
                    "str",
                    "raiden.utils.PaymentHashInvoice",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Stake.to_stake_info": {
            "name": "to_stake_info",
            "location": 170,
            "return": [
                "tuple[int]",
                "str",
                "int",
                "tuple",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.id": {
            "name": "id",
            "location": 175,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]",
                "Optional[int]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.periods_remaining": {
            "name": "periods_remaining",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.time_remaining": {
            "name": "time_remaining",
            "location": 193,
            "return": [
                "int",
                "dict[, ]",
                "Match",
                "str",
                "list[]",
                "Optional[int]",
                "dict[str, str]",
                "list[float]",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "slang": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/utils.py": {
        "datetime_to_period": {
            "name": "datetime_to_period",
            "location": 27,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "datetime": []
            }
        },
        "datetime_at_period": {
            "name": "datetime_at_period",
            "location": 33,
            "return": [
                "str",
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "period": [
                    "list",
                    "list[]",
                    "int",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "calculate_period_duration": {
            "name": "calculate_period_duration",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "future_time": [
                    "str",
                    "maya.MayaDT"
                ]
            }
        },
        "__validate": {
            "name": "__validate",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "rulebook": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "validate_stake_amount": {
            "name": "validate_stake_amount",
            "location": 67,
            "return": [
                "bool",
                "Dict[str, Dict[str, int]]",
                "set",
                "float",
                "int"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "Callable",
                    "str"
                ],
                "raise_on_fail": [
                    "bool",
                    "int"
                ]
            }
        },
        "validate_locktime": {
            "name": "validate_locktime",
            "location": 90,
            "return": [
                "bool",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str"
            ],
            "arguments": {
                "lock_periods": [
                    "int",
                    "str",
                    "float"
                ],
                "raise_on_fail": [
                    "bool",
                    "Optional[bool]",
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/sol/compile.py": {
        "SolidityCompiler.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solc_binary_path": [
                    "Optional[str]",
                    "str",
                    "Optional[TextIO]"
                ],
                "configuration_path": [
                    "Optional[str]",
                    "str",
                    "Optional[TextIO]"
                ],
                "chain_name": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "source_dir": [
                    "str",
                    "Optional[str]",
                    "Optional[TextIO]",
                    "int"
                ],
                "test_contract_dir": [
                    "str"
                ]
            }
        },
        "SolidityCompiler.install_compiler": {
            "name": "install_compiler",
            "location": 71,
            "return": [
                "str",
                "Optional[float]",
                "float",
                "Exception",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "SolidityCompiler.compile": {
            "name": "compile",
            "location": 79,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/blockchain/eth/sol/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/banners.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/base.py": {
        "Character.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domains": [
                    "tuple[]"
                ],
                "is_me": [
                    "bool"
                ],
                "federated_only": [
                    "bool"
                ],
                "blockchain": [
                    "None"
                ],
                "checksum_public_address": [],
                "network_middleware": [
                    "None"
                ],
                "keyring_dir": [
                    "None"
                ],
                "crypto_power": [
                    "None"
                ],
                "crypto_power_ups": [
                    "None"
                ]
            }
        },
        "Character.__eq__": {
            "name": "__eq__",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Character.__hash__": {
            "name": "__hash__",
            "location": 213,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Character.__repr__": {
            "name": "__repr__",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Character.name": {
            "name": "name",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.rest_interface": {
            "name": "rest_interface",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.stamp": {
            "name": "stamp",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.canonical_public_address": {
            "name": "canonical_public_address",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "address_bytes": []
            }
        },
        "Character.checksum_public_address": {
            "name": "checksum_public_address",
            "location": 250,
            "return": [
                "NO_BLOCKCHAIN_CONNECTION"
            ],
            "arguments": {
                "self": []
            }
        },
        "Character.from_config": {
            "name": "from_config",
            "location": 256,
            "return": [],
            "arguments": {
                "cls": [],
                "config": []
            }
        },
        "Character.from_public_keys": {
            "name": "from_public_keys",
            "location": 260,
            "return": [],
            "arguments": {
                "cls": [],
                "powers_and_material": [],
                "federated_only": [
                    "bool"
                ]
            }
        },
        "Character.store_metadata": {
            "name": "store_metadata",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "Character.encrypt_for": {
            "name": "encrypt_for",
            "location": 296,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "recipient": [],
                "plaintext": [],
                "sign": [
                    "bool"
                ],
                "sign_plaintext": [
                    "bool"
                ]
            }
        },
        "Character.verify_from": {
            "name": "verify_from",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "stranger": [],
                "message_kit": [],
                "signature": [
                    "None"
                ],
                "decrypt": [
                    "bool"
                ],
                "label": [
                    "None"
                ]
            }
        },
        "Character.decrypt": {
            "name": "decrypt",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "message_kit": [],
                "label": [
                    "None"
                ]
            }
        },
        "Character.sign": {
            "name": "sign",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Character.public_keys": {
            "name": "public_keys",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "power_up_class": []
            }
        },
        "Character._set_checksum_address": {
            "name": "_set_checksum_address",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/chaotic.py": {
        "Moe.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Moe.remember_node": {
            "name": "remember_node",
            "location": 58,
            "return": [
                "bool",
                "Callable",
                "Optional[mypy.nodes.TypeInfo]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moe.learn_from_teacher_node": {
            "name": "learn_from_teacher_node",
            "location": 66,
            "return": [
                "bool",
                "Callable[..., None]",
                "str",
                "int",
                "list",
                "mypy.nodes.NameExpr"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moe.start": {
            "name": "start",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ws_port": [
                    "bool",
                    "int"
                ],
                "http_port": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "dry_run": [
                    "bool",
                    "int"
                ]
            }
        },
        "Felix.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_filepath": [
                    "bool",
                    "Optional[str]",
                    "alerta.database.base.Query",
                    "int",
                    "allennlp.common.util.JsonDict"
                ],
                "rest_host": [
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "Dict[str, list]",
                    "bool",
                    "str"
                ],
                "rest_port": [
                    "Optional[str]",
                    "bool",
                    "Set[str]"
                ],
                "crash_on_error": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Felix.__repr__": {
            "name": "__repr__",
            "location": 200,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Felix.make_web_app": {
            "name": "make_web_app",
            "location": 205,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "self": []
            }
        },
        "Felix.create_tables": {
            "name": "create_tables",
            "location": 299,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Felix.start": {
            "name": "start",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Optional[Tuple[int, int]]",
                    "type"
                ],
                "port": [
                    "Optional[float]",
                    "float",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, str]]"
                ],
                "web_services": [
                    "bool"
                ],
                "distribution": [
                    "bool",
                    "Callable[[models.characters.character_base.Character, models.characters.character_base.Character], None]"
                ],
                "crash_on_error": [
                    "str",
                    "int",
                    "Union[str, Iterable[str]]",
                    "bool"
                ]
            }
        },
        "Felix.start_distribution": {
            "name": "start_distribution",
            "location": 325,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "Optional[Callable[[str], bool]]",
                    "Sequence[int]",
                    "Dict[str, Callable[[], None]]",
                    "T",
                    "list"
                ]
            }
        },
        "Felix.stop_distribution": {
            "name": "stop_distribution",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Felix.__calculate_disbursement": {
            "name": "__calculate_disbursement",
            "location": 338,
            "return": [
                "float",
                "str",
                "models.characters.mods_base.SlotTypes"
            ],
            "arguments": {
                "self": [],
                "recipient": [
                    "int",
                    "float"
                ]
            }
        },
        "Felix.__transfer": {
            "name": "__transfer",
            "location": 357,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "disbursement": [
                    "str",
                    "int"
                ],
                "recipient_address": [
                    "str",
                    "int"
                ]
            }
        },
        "Felix.airdrop_tokens": {
            "name": "airdrop_tokens",
            "location": 369,
            "return": [
                "mypy.nodes.TypeInfo",
                "mypy.nodes.ClassDef"
            ],
            "arguments": {
                "self": []
            }
        },
        "Felix.__do_airdrop": {
            "name": "__do_airdrop",
            "location": 426,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Moe.MonitoringTracker.record_fleet_state": {
            "name": "record_fleet_state",
            "location": 45,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[sqlalchemy.engine.Engine]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moe.start.send_states": {
            "name": "send_states",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "subscriber": [
                    "str",
                    "bool"
                ]
            }
        },
        "Moe.start.send_nodes": {
            "name": "send_nodes",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "subscriber": [
                    "str",
                    "dict",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Moe.start.status": {
            "name": "status",
            "location": 100,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "Felix.make_web_app.home": {
            "name": "home",
            "location": 256,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Felix.make_web_app.register": {
            "name": "register",
            "location": 262,
            "return": [
                "str",
                "Dict[int, dict]",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "Felix.airdrop_tokens.siphon_invalid_entries": {
            "name": "siphon_invalid_entries",
            "location": 399,
            "return": [
                "bool"
            ],
            "arguments": {
                "candidate": [
                    "Dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        },
        "Felix.make_web_app.Recipient.__repr__": {
            "name": "__repr__",
            "location": 241,
            "return": [
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/lawful.py": {
        "Alice.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "federated_only": [],
                "network_middleware": [],
                "controller": []
            }
        },
        "Alice.generate_kfrags": {
            "name": "generate_kfrags",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "bob": [],
                "label": [],
                "m": [],
                "n": []
            }
        },
        "Alice.create_policy": {
            "name": "create_policy",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "bob": [],
                "label": [],
                "m": [],
                "n": [],
                "federated": [],
                "expiration": [],
                "value": [],
                "handpicked_ursulas": []
            }
        },
        "Alice.grant": {
            "name": "grant",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "bob": [],
                "label": [],
                "m": [],
                "n": [],
                "expiration": [],
                "value": [],
                "handpicked_ursulas": [],
                "timeout": []
            }
        },
        "Alice.get_policy_pubkey_from_label": {
            "name": "get_policy_pubkey_from_label",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Alice.revoke": {
            "name": "revoke",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "policy": []
            }
        },
        "Alice.make_web_controller": {
            "name": "make_web_controller",
            "location": 277,
            "return": [],
            "arguments": {
                "drone_alice": [],
                "crash_on_error": []
            }
        },
        "Bob.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "Bob._pick_treasure_map": {
            "name": "_pick_treasure_map",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "treasure_map": [],
                "map_id": []
            }
        },
        "Bob.peek_at_treasure_map": {
            "name": "peek_at_treasure_map",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "treasure_map": [],
                "map_id": []
            }
        },
        "Bob.follow_treasure_map": {
            "name": "follow_treasure_map",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "treasure_map": [],
                "map_id": [],
                "block": [],
                "new_thread": [],
                "timeout": [],
                "allow_missing": []
            }
        },
        "Bob.get_treasure_map": {
            "name": "get_treasure_map",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "alice_verifying_key": [],
                "label": []
            }
        },
        "Bob.make_compass_for_alice": {
            "name": "make_compass_for_alice",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "alice": []
            }
        },
        "Bob.construct_policy_hrac": {
            "name": "construct_policy_hrac",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "verifying_key": [],
                "label": []
            }
        },
        "Bob.construct_hrac_and_map_id": {
            "name": "construct_hrac_and_map_id",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "verifying_key": [],
                "label": []
            }
        },
        "Bob.get_treasure_map_from_known_ursulas": {
            "name": "get_treasure_map_from_known_ursulas",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "network_middleware": [],
                "map_id": []
            }
        },
        "Bob.generate_work_orders": {
            "name": "generate_work_orders",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "map_id": []
            }
        },
        "Bob.get_reencrypted_cfrags": {
            "name": "get_reencrypted_cfrags",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "work_order": []
            }
        },
        "Bob.join_policy": {
            "name": "join_policy",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "alice_pubkey_sig": [],
                "node_list": [],
                "block": []
            }
        },
        "Bob.retrieve": {
            "name": "retrieve",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "message_kit": [],
                "data_source": [],
                "alice_verifying_key": [],
                "label": []
            }
        },
        "Bob.collect_evidence": {
            "name": "collect_evidence",
            "location": 593,
            "return": [],
            "arguments": {
                "self": [],
                "capsule": [],
                "cfrag": [],
                "ursula": []
            }
        },
        "Bob.make_web_controller": {
            "name": "make_web_controller",
            "location": 597,
            "return": [],
            "arguments": {
                "drone_bob": [],
                "crash_on_error": []
            }
        },
        "Ursula.__init__": {
            "name": "__init__",
            "location": 659,
            "return": [],
            "arguments": {
                "self": [],
                "rest_host": [],
                "rest_port": [],
                "domains": [],
                "certificate": [],
                "certificate_filepath": [],
                "db_filepath": [],
                "is_me": [],
                "interface_signature": [],
                "timestamp": [],
                "identity_evidence": [],
                "checksum_public_address": [],
                "password": [],
                "abort_on_learning_error": [],
                "federated_only": [],
                "start_learning_now": [],
                "crypto_power": [],
                "tls_curve": [],
                "known_nodes": []
            }
        },
        "Ursula.rest_information": {
            "name": "rest_information",
            "location": 816,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.get_deployer": {
            "name": "get_deployer",
            "location": 825,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_server_certificate": {
            "name": "rest_server_certificate",
            "location": 830,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.__bytes__": {
            "name": "__bytes__",
            "location": 833,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.from_rest_url": {
            "name": "from_rest_url",
            "location": 861,
            "return": [],
            "arguments": {
                "cls": [],
                "network_middleware": [],
                "host": [],
                "port": [],
                "certificate_filepath": [],
                "federated_only": []
            }
        },
        "Ursula.from_seednode_metadata": {
            "name": "from_seednode_metadata",
            "location": 877,
            "return": [],
            "arguments": {
                "cls": [],
                "seednode_metadata": []
            }
        },
        "Ursula.from_teacher_uri": {
            "name": "from_teacher_uri",
            "location": 892,
            "return": [],
            "arguments": {
                "cls": [],
                "federated_only": [],
                "teacher_uri": [],
                "min_stake": [],
                "network_middleware": []
            }
        },
        "Ursula.from_seed_and_stake_info": {
            "name": "from_seed_and_stake_info",
            "location": 924,
            "return": [],
            "arguments": {
                "cls": [],
                "seed_uri": [],
                "federated_only": [],
                "minimum_stake": [],
                "checksum_address": [],
                "network_middleware": []
            }
        },
        "Ursula.internal_splitter": {
            "name": "internal_splitter",
            "location": 990,
            "return": [],
            "arguments": {
                "cls": [],
                "splittable": []
            }
        },
        "Ursula.from_bytes": {
            "name": "from_bytes",
            "location": 1006,
            "return": [],
            "arguments": {
                "cls": [],
                "ursula_as_bytes": [],
                "version": [],
                "federated_only": []
            }
        },
        "Ursula.batch_from_bytes": {
            "name": "batch_from_bytes",
            "location": 1052,
            "return": [],
            "arguments": {
                "cls": [],
                "ursulas_as_bytes": [],
                "federated_only": [],
                "fail_fast": []
            }
        },
        "Ursula.from_storage": {
            "name": "from_storage",
            "location": 1078,
            "return": [],
            "arguments": {
                "cls": [],
                "node_storage": [],
                "checksum_adress": [],
                "federated_only": []
            }
        },
        "Ursula.datastore": {
            "name": "datastore",
            "location": 1090,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_url": {
            "name": "rest_url",
            "location": 1097,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_app": {
            "name": "rest_app",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.interface_info_with_metadata": {
            "name": "interface_info_with_metadata",
            "location": 1113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.work_orders": {
            "name": "work_orders",
            "location": 1121,
            "return": [],
            "arguments": {
                "self": [],
                "bob": []
            }
        },
        "Enrico.__init__": {
            "name": "__init__",
            "location": 1142,
            "return": [],
            "arguments": {
                "self": [],
                "policy_encrypting_key": [],
                "controller": []
            }
        },
        "Enrico.encrypt_message": {
            "name": "encrypt_message",
            "location": 1155,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Enrico.from_alice": {
            "name": "from_alice",
            "location": 1165,
            "return": [],
            "arguments": {
                "cls": [],
                "alice": [],
                "label": []
            }
        },
        "Enrico.make_web_controller": {
            "name": "make_web_controller",
            "location": 1175,
            "return": [],
            "arguments": {
                "drone_enrico": [],
                "crash_on_error": []
            }
        },
        "Alice.make_web_controller.public_keys": {
            "name": "public_keys",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.create_policy": {
            "name": "create_policy",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.derive_policy_encrypting_key": {
            "name": "derive_policy_encrypting_key",
            "location": 311,
            "return": [],
            "arguments": {
                "label": []
            }
        },
        "Alice.make_web_controller.grant": {
            "name": "grant",
            "location": 321,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.revoke": {
            "name": "revoke",
            "location": 329,
            "return": [],
            "arguments": {
                "policy_encrypting_key": []
            }
        },
        "Bob.IncorrectCFragReceived.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "evidence": []
            }
        },
        "Bob.make_web_controller.public_keys": {
            "name": "public_keys",
            "location": 613,
            "return": [],
            "arguments": {}
        },
        "Bob.make_web_controller.join_policy": {
            "name": "join_policy",
            "location": 621,
            "return": [],
            "arguments": {}
        },
        "Bob.make_web_controller.retrieve": {
            "name": "retrieve",
            "location": 630,
            "return": [],
            "arguments": {}
        },
        "Ursula.from_teacher_uri.__attempt": {
            "name": "__attempt",
            "location": 901,
            "return": [],
            "arguments": {
                "round": [],
                "interval": []
            }
        },
        "Enrico.make_web_controller.encrypt_message": {
            "name": "encrypt_message",
            "location": 1191,
            "return": [],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/unlawful.py": {
        "Vladimir.from_target_ursula": {
            "name": "from_target_ursula",
            "location": 36,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "bytes",
                    "list[int]",
                    "bool",
                    "List[int]"
                ],
                "target_ursula": [
                    "str",
                    "int",
                    "dict",
                    "Tuple[int, int]"
                ],
                "claim_signing_key": [
                    "bool",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "attach_transacting_key": [
                    "bool",
                    "int"
                ]
            }
        },
        "Vladimir.attach_transacting_key": {
            "name": "attach_transacting_key",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "blockchain": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/control/controllers.py": {
        "CharacterController.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "control_serializer": [
                    "bool",
                    "None",
                    "Tuple[float, float]",
                    "str",
                    "Optional[str]",
                    "tuple[typing.Union[float,float]]"
                ],
                "serialize": [
                    "bool",
                    "str",
                    "Callable",
                    "int",
                    "Dict[str, Any]",
                    "Optional[List]",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "AliceJSONController.create_policy": {
            "name": "create_policy",
            "location": 54,
            "return": [
                "dict[str, str]",
                "int",
                "list[]",
                "Dict[str, Any]",
                "dict[, ]",
                "Dict[str, str]",
                "bytes",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ]
            }
        },
        "AliceJSONController.derive_policy_encrypting_key": {
            "name": "derive_policy_encrypting_key",
            "location": 62,
            "return": [
                "typing.Literal",
                "dict[str, str]",
                "bytes",
                "int",
                "dict",
                "Optional[str]",
                "Dict[str, Union[str, int]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "dict",
                    "bytes",
                    "Callable",
                    "Optional[bytes]"
                ],
                "request": [
                    "Dict[str, str]",
                    "None",
                    "float",
                    "str",
                    "dict[str, str]",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "AliceJSONController.grant": {
            "name": "grant",
            "location": 69,
            "return": [
                "bytes",
                "dict",
                "dict[str, str]",
                "list[]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, list[typing.Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "dict[, ]",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        },
        "AliceJSONController.revoke": {
            "name": "revoke",
            "location": 75,
            "return": [
                "bytes",
                "dict",
                "dict[str, str]",
                "dict[str, int]",
                "dict[str, tuple[typing.Union[int,int,int]]]",
                "dict[str, tuple[typing.Union[float,float]]]"
            ],
            "arguments": {
                "self": [],
                "policy_encrypting_key": [
                    "bytes",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "tuple[typing.Union[int,slice,int,slice]]"
                ],
                "request": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "AliceJSONController.public_keys": {
            "name": "public_keys",
            "location": 81,
            "return": [
                "dict[str, str]",
                "int",
                "dict[str, dict[str, typing.Any]]",
                "typing.Final",
                "dict",
                "bytes",
                "Dict[str, float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "dict",
                    "base.Request"
                ]
            }
        },
        "BobJSONController.join_policy": {
            "name": "join_policy",
            "location": 97,
            "return": [
                "dict[typing.Text, typing.Text]",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BobJSONController.retrieve": {
            "name": "retrieve",
            "location": 107,
            "return": [
                "int",
                "dict[str, list[typing.Any]]",
                "dict[str, dict[str, typing.Any]]",
                "Dict[str, str]",
                "dict[str, str]",
                "List[str]",
                "str",
                "Optional[bytes]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BobJSONController.public_keys": {
            "name": "public_keys",
            "location": 116,
            "return": [
                "dict[str, str]",
                "int",
                "dict[str, dict[str, typing.Any]]",
                "typing.Final",
                "dict",
                "bytes",
                "Dict[str, float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "dict",
                    "base.Request"
                ]
            }
        },
        "EnricoJSONController.encrypt_message": {
            "name": "encrypt_message",
            "location": 132,
            "return": [
                "bytes",
                "dict[str, str]",
                "dict",
                "typing.Literal",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "WebController.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "character_contoller": [
                    "bool",
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "typing.Callable[typing.Any, None]",
                    "Tuple[int, int, int]",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "start_learning": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "list",
                    "Union[str, List[str]]",
                    "Optional[str]"
                ],
                "crash_on_error": [
                    "str",
                    "int",
                    "Callable[[Any], str]",
                    "Optional[str]"
                ]
            }
        },
        "WebController.make_web_controller": {
            "name": "make_web_controller",
            "location": 178,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebController.start": {
            "name": "start",
            "location": 187,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "http_port": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "dry_run": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "WebController.__call__": {
            "name": "__call__",
            "location": 199,
            "return": [
                "dict",
                "Dict[str, str]",
                "Mapping[str, Union[int, slice]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebController.__handle_request": {
            "name": "__handle_request",
            "location": 202,
            "return": [
                "Dict[str, Any]",
                "bool",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ],
                "control_request": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/control/emitters.py": {
        "StdoutEmitter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "capture_stdout": [
                    "bool",
                    "int",
                    "float"
                ],
                "quiet": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "StdoutEmitter.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StdoutEmitter.trap_output": {
            "name": "trap_output",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str"
                ]
            }
        },
        "StdoutEmitter._emit": {
            "name": "_emit",
            "location": 39,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.Response"
                ],
                "message": [
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "requests.Response",
                    "list[]",
                    "flask.Response",
                    "dict[, ]",
                    "list",
                    "dict"
                ],
                "color": [
                    "str",
                    "None",
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Dict[str, float]",
                    "dict[str, typing.Any]",
                    "dict[str, float]"
                ],
                "bold": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "IPCStdoutEmitter._emit": {
            "name": "_emit",
            "location": 78,
            "return": [
                "bool",
                "str",
                "None",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "None",
                    "str",
                    "dict[, ]",
                    "Optional[\"Response\"]"
                ],
                "message": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "dict[str, str]",
                    "Dict[str, float]",
                    "list[str]",
                    "MutableMapping",
                    "dict[str, float]",
                    "typing.MutableMapping"
                ]
            }
        },
        "WebEmitter.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "crash_on_error": [
                    "str"
                ]
            }
        },
        "WebEmitter.__call__": {
            "name": "__call__",
            "location": 119,
            "return": [
                "bytes",
                "starlette.responses.Response",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebEmitter.__emit_exception": {
            "name": "__emit_exception",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "drone_character": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "e": [
                    "str",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]",
                    "dict",
                    "dict[, ]"
                ],
                "error_message": [
                    "bytes",
                    "int",
                    "List[dict]",
                    "list[dict[, ]]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "log_level": [
                    "typing.Text",
                    "str",
                    "int",
                    "Optional[Any]",
                    "Optional[list]",
                    "Dict[str, Any]"
                ],
                "response_code": [
                    "int",
                    "str",
                    "Dict[str, Optional[str]]",
                    "bool",
                    "dict"
                ]
            }
        },
        "WebEmitter.__emit_http_response": {
            "name": "__emit_http_response",
            "location": 138,
            "return": [
                "dict",
                "Optional[str]",
                "List[dict]",
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "drone_character": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "werkzeug.wrappers.Response"
                ],
                "response": [
                    "scrapy.http.Response",
                    "aiohttp.web.Response",
                    "Response",
                    "rest_framework.response.Response"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/control/interfaces.py": {
        "character_control_interface": {
            "name": "character_control_interface",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "character_control_interface.wrapped": {
            "name": "wrapped",
            "location": 16,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "Tuple[str, Optional[int]]",
                "Dict[str, dict]",
                "str"
            ],
            "arguments": {
                "instance": [
                    "dict"
                ],
                "request": [
                    "None",
                    "int",
                    "bytes",
                    "Callable[..., Coroutine]"
                ]
            }
        },
        "CharacterPublicInterface.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "character": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "AliceInterface.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "bool",
                    "str",
                    "Dict[str, object]",
                    "dict[str, object]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AliceInterface.create_policy": {
            "name": "create_policy",
            "location": 66,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "bob_encrypting_key": [
                    "bool",
                    "int"
                ],
                "bob_verifying_key": [
                    "bool",
                    "int"
                ],
                "label": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ],
                "federated_only": [
                    "bool",
                    "int",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "AliceInterface.derive_policy_encrypting_key": {
            "name": "derive_policy_encrypting_key",
            "location": 83,
            "return": [
                "dict[typing.Text, typing.Union[str,set[str],bytes,tuple[str],list[],None,int]]",
                "bytes",
                "int",
                "dict",
                "Optional[str]",
                "Dict[str, Union[str, int]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bytes",
                    "None",
                    "int",
                    "Optional[str]",
                    "umbral.keys.UmbralPrivateKey"
                ]
            }
        },
        "AliceInterface.grant": {
            "name": "grant",
            "location": 88,
            "return": [
                "dict[typing.Text, ]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bob_encrypting_key": [
                    "bytes",
                    "int"
                ],
                "bob_verifying_key": [
                    "bytes",
                    "int"
                ],
                "label": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "m": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "n": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "expiration": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "federated_only": [
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "AliceInterface.revoke": {
            "name": "revoke",
            "location": 111,
            "return": [
                "dict[typing.Text, int]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "policy_encrypting_key": [
                    "List[bytes]",
                    "int",
                    "list[bytes]",
                    "bytes",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "AliceInterface.public_keys": {
            "name": "public_keys",
            "location": 126,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[str, typing.Any],int]]",
                "int",
                "dict",
                "bytes",
                "Dict[str, float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobInterface.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bob": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BobInterface.join_policy": {
            "name": "join_policy",
            "location": 141,
            "return": [
                "dict[, ]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int"
                ],
                "alice_verifying_key": [
                    "str",
                    "int"
                ]
            }
        },
        "BobInterface.retrieve": {
            "name": "retrieve",
            "location": 149,
            "return": [
                "dict[typing.Text, typing.Union[int,bytes]]",
                "int",
                "Dict[str, str]",
                "List[str]",
                "Optional[bytes]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bytes",
                    "str",
                    "int"
                ],
                "policy_encrypting_key": [
                    "bytes",
                    "int",
                    "crypto.PointG1"
                ],
                "alice_verifying_key": [
                    "bytes",
                    "str"
                ],
                "message_kit": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "BobInterface.public_keys": {
            "name": "public_keys",
            "location": 176,
            "return": [
                "dict[typing.Text, int]",
                "int",
                "dict",
                "bytes",
                "Dict[str, float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnricoInterface.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "enrico": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EnricoInterface.encrypt_message": {
            "name": "encrypt_message",
            "location": 192,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],bytes,tuple[typing.Union[typing.Literal,typing.Literal]],int,str]]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytearray"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/control/serializers.py": {
        "CharacterControlJSONSerializer.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "bytes",
                "List[str]",
                "\"Flow\"",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Union[Dict, List]",
                    "Union[None, Dict[str, Any], List[Any]]",
                    "Dict[str, Any]"
                ],
                "specification": [
                    "bytes",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[bool]"
                ]
            }
        },
        "CharacterControlJSONSerializer.build_response_metadata": {
            "name": "build_response_metadata",
            "location": 31,
            "return": [
                "bytes",
                "Optional[str]",
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "response": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "duration": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CharacterControlJSONSerializer.__deserialize": {
            "name": "__deserialize",
            "location": 37,
            "return": [
                "bytes",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "request_payload": [
                    "int"
                ]
            }
        },
        "CharacterControlJSONSerializer.__serialize": {
            "name": "__serialize",
            "location": 51,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response_data": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "AliceControlJSONSerializer.load_create_policy_input": {
            "name": "load_create_policy_input",
            "location": 66,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "AliceControlJSONSerializer.dump_create_policy_output": {
            "name": "dump_create_policy_output",
            "location": 75,
            "return": [
                "bytes",
                "dict",
                "List[str]",
                "str"
            ],
            "arguments": {
                "response": [
                    "Dict[str, Any]",
                    "str",
                    "bytes",
                    "Mapping[str, Any]"
                ]
            }
        },
        "AliceControlJSONSerializer.dump_derive_policy_encrypting_key_output": {
            "name": "dump_derive_policy_encrypting_key_output",
            "location": 82,
            "return": [
                "int",
                "bytes",
                "dict",
                "List[str]",
                "Optional[Dict[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "response": [
                    "dict"
                ]
            }
        },
        "AliceControlJSONSerializer.parse_grant_input": {
            "name": "parse_grant_input",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": []
            }
        },
        "AliceControlJSONSerializer.dump_grant_output": {
            "name": "dump_grant_output",
            "location": 99,
            "return": [
                "bytes",
                "dict",
                "int",
                "List[str]"
            ],
            "arguments": {
                "response": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "AliceControlJSONSerializer.dump_public_keys_output": {
            "name": "dump_public_keys_output",
            "location": 116,
            "return": [
                "bytes",
                "int",
                "Dict[str, Union[str, int]]",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "response": [
                    "str",
                    "Union[bytes, str, None]",
                    "dict",
                    "Optional[AbstractSet[str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MessageHandlerMixin.set_message_encoder": {
            "name": "set_message_encoder",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "bool",
                    "float"
                ]
            }
        },
        "MessageHandlerMixin.set_message_decoder": {
            "name": "set_message_decoder",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "decoder": [
                    "bool",
                    "float"
                ]
            }
        },
        "MessageHandlerMixin.encode": {
            "name": "encode",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "plaintext": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MessageHandlerMixin.decode": {
            "name": "decode",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cleartext": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BobControlJSONSerializer.load_join_policy_input": {
            "name": "load_join_policy_input",
            "location": 143,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "Dict[int, Any]"
                ]
            }
        },
        "BobControlJSONSerializer.dump_join_policy_output": {
            "name": "dump_join_policy_output",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "dict",
                    "list"
                ]
            }
        },
        "BobControlJSONSerializer.load_retrieve_input": {
            "name": "load_retrieve_input",
            "location": 152,
            "return": [
                "int",
                "str",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BobControlJSONSerializer.dump_retrieve_output": {
            "name": "dump_retrieve_output",
            "location": 159,
            "return": [
                "bytes",
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "BobControlJSONSerializer.dump_public_keys_output": {
            "name": "dump_public_keys_output",
            "location": 165,
            "return": [
                "bytes",
                "int",
                "Dict[str, Union[str, int]]",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "response": [
                    "Dict[str, Any]",
                    "dict",
                    "Union[bytes, str, None]",
                    "str",
                    "bytes",
                    "Union[int, bytes]"
                ]
            }
        },
        "EnricoControlJSONSerializer.load_encrypt_message_input": {
            "name": "load_encrypt_message_input",
            "location": 175,
            "return": [
                "int",
                "Dict[str, str]",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "str"
                ]
            }
        },
        "EnricoControlJSONSerializer.dump_encrypt_message_output": {
            "name": "dump_encrypt_message_output",
            "location": 181,
            "return": [
                "bytes",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "response": [
                    "bytes",
                    "str",
                    "Dict[int, Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/control/specifications.py": {
        "CharacterSpecification.get_specifications": {
            "name": "get_specifications",
            "location": 21,
            "return": [
                "str",
                "tuple[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[bool]"
                ],
                "interface_name": [
                    "str"
                ]
            }
        },
        "CharacterSpecification.specifications": {
            "name": "specifications",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ]
            }
        },
        "CharacterSpecification.__validate": {
            "name": "__validate",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "specification": [
                    "T",
                    "Callable"
                ],
                "data": [
                    "T",
                    "Callable"
                ],
                "error_class": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Union[List[str], int]",
                    "list[str]",
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "CharacterSpecification.validate_request": {
            "name": "validate_request",
            "location": 53,
            "return": [
                "str",
                "Sequence[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "interface_name": [
                    "str"
                ],
                "request": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "eth.abc.BlockHeaderAPI",
                    "frozenset",
                    "Callable",
                    "FrozenSet[bytes]"
                ]
            }
        },
        "CharacterSpecification.validate_response": {
            "name": "validate_response",
            "location": 57,
            "return": [
                "str",
                "bytes",
                "eth.abc.DatabaseAPI"
            ],
            "arguments": {
                "self": [],
                "interface_name": [
                    "str"
                ],
                "response": [
                    "dict[, ]",
                    "dict",
                    "bool",
                    "None",
                    "Optional[Dict]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "eth.abc.BlockHeaderAPI",
                    "typing.Mapping",
                    "Tuple[int, int]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/characters/control/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/actions.py": {
        "load_seednodes": {
            "name": "load_seednodes",
            "location": 27,
            "return": [
                "list[]",
                "int",
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "min_stake": [
                    "str",
                    "bool"
                ],
                "federated_only": [
                    "str",
                    "bool"
                ],
                "network_middleware": [
                    "str",
                    "bool",
                    "None"
                ],
                "teacher_uris": [
                    "list[]",
                    "str",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "destroy_system_configuration": {
            "name": "destroy_system_configuration",
            "location": 46,
            "return": [
                "None",
                "Callable",
                "str",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Callable[[str], None]"
            ],
            "arguments": {
                "config_class": [
                    "str",
                    "bool",
                    "config.Config"
                ],
                "config_file": [
                    "str",
                    "None",
                    "bool",
                    "config.Config"
                ],
                "network": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "config_root": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "force": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "log": [
                    "str",
                    "Logger"
                ]
            }
        },
        "forget": {
            "name": "forget",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configuration": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "confirm_staged_stake": {
            "name": "confirm_staged_stake",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ursula": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/config.py": {
        "NucypherClickConfig.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherClickConfig.connect_to_blockchain": {
            "name": "connect_to_blockchain",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "character_configuration": [
                    "bytes",
                    "float"
                ],
                "recompile_contracts": [
                    "float",
                    "int",
                    "bool",
                    "freqtrade.constants.ListPairsWithTimeframes",
                    "List[Tuple[str, str]]",
                    "Set[str]"
                ]
            }
        },
        "NucypherClickConfig.get_password": {
            "name": "get_password",
            "location": 92,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "confirm": [
                    "str",
                    "int"
                ]
            }
        },
        "NucypherClickConfig.unlock_keyring": {
            "name": "unlock_keyring",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "character_configuration": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "NucypherClickConfig.emit": {
            "name": "emit",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "NucypherDeployerClickConfig.collect_deployment_secrets": {
            "name": "collect_deployment_secrets",
            "location": 125,
            "return": [
                "str",
                "int",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/deploy.py": {
        "deploy": {
            "name": "deploy",
            "location": 48,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "click_config": [
                    "bool",
                    "Callable"
                ],
                "action": [
                    "bool",
                    "str",
                    "None",
                    "Optional[int]",
                    "list[str]",
                    "Optional[str]",
                    "List[str]"
                ],
                "poa": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "provider_uri": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "deployer_address": [
                    "bool",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "int"
                ],
                "contract_name": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "allocation_infile": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "typing.Iterable[str]",
                    "Optional[int]",
                    "Union[str, Iterable[str]]"
                ],
                "allocation_outfile": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.MutableSequence",
                    "types.ServiceT",
                    "MutableSequence[str]"
                ],
                "registry_infile": [
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "None",
                    "bool",
                    "int"
                ],
                "registry_outfile": [
                    "str"
                ],
                "no_compile": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "amount": [
                    "bool",
                    "dict[str, tuple[typing.Union[str,str,typing.Any]]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "Dict[str, Tuple[str, int, int]]",
                    "dict[int, str]",
                    "Dict[int, str]",
                    "int"
                ],
                "recipient_address": [
                    "bool",
                    "dict[str, tuple[typing.Union[str,str,typing.Any]]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "Dict[str, Tuple[str, int, int]]",
                    "dict[int, str]",
                    "Dict[int, str]",
                    "int"
                ],
                "force": [
                    "bool",
                    "str",
                    "None",
                    "Optional[int]",
                    "list[str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/main.py": {
        "nucypher_cli": {
            "name": "nucypher_cli",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_config": [
                    "Callable",
                    "int"
                ],
                "verbose": [
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "mock_networking": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ],
                "json_ipc": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "no_logs": [
                    "List[List[int]]",
                    "int",
                    "list[list[int]]"
                ],
                "quiet": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "tuple[int]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "pyshgp.push.config.PushConfig"
                ],
                "debug": [
                    "Collection[str]",
                    "bool",
                    "typing.Collection"
                ],
                "no_registry": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/painting.py": {
        "echo_version": {
            "name": "echo_version",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "paint_new_installation_help": {
            "name": "paint_new_installation_help",
            "location": 39,
            "return": [],
            "arguments": {
                "new_configuration": [],
                "federated_only": [
                    "bool"
                ],
                "config_root": [
                    "None"
                ],
                "config_file": [
                    "None"
                ]
            }
        },
        "build_fleet_state_status": {
            "name": "build_fleet_state_status",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "ursula": []
            }
        },
        "paint_node_status": {
            "name": "paint_node_status",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "ursula": [],
                "start_time": []
            }
        },
        "paint_known_nodes": {
            "name": "paint_known_nodes",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "ursula": []
            }
        },
        "paint_contract_status": {
            "name": "paint_contract_status",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "ursula_config": [],
                "click_config": []
            }
        },
        "paint_staged_stake": {
            "name": "paint_staged_stake",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "ursula": [],
                "stake_value": [],
                "duration": [],
                "start_period": [],
                "end_period": [],
                "division_message": [
                    "None"
                ]
            }
        },
        "paint_staking_confirmation": {
            "name": "paint_staking_confirmation",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "ursula": [],
                "transactions": []
            }
        },
        "prettify_stake": {
            "name": "prettify_stake",
            "location": 247,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "stake_index": [],
                "stake": []
            }
        },
        "paint_stakes": {
            "name": "paint_stakes",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "stakes": []
            }
        },
        "paint_staged_stake_division": {
            "name": "paint_staged_stake_division",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "ursula": [],
                "original_index": [],
                "original_stake": [],
                "target_value": [],
                "extension": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/processes.py": {
        "UrsulaCommandProtocol.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "int",
                    "Iterable[int]",
                    "typing.Iterable[int]",
                    "Callable[[bytes], None]",
                    "typing.Callable[bytes, None]"
                ]
            }
        },
        "UrsulaCommandProtocol.commands": {
            "name": "commands",
            "location": 72,
            "return": [
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintHelp": {
            "name": "paintHelp",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintKnownNodes": {
            "name": "paintKnownNodes",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintStakes": {
            "name": "paintStakes",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintStatus": {
            "name": "paintStatus",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintFleetState": {
            "name": "paintFleetState",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.connectionMade": {
            "name": "connectionMade",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.connectionLost": {
            "name": "connectionLost",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "nucypher.blockchain.eth.multisig.Proposal",
                    "BaseException",
                    "Optional[str]"
                ]
            }
        },
        "UrsulaCommandProtocol.lineReceived": {
            "name": "lineReceived",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "UrsulaCommandProtocol.cycle_teacher": {
            "name": "cycle_teacher",
            "location": 158,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.start_learning": {
            "name": "start_learning",
            "location": 164,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.stop_learning": {
            "name": "stop_learning",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.confirm_activity": {
            "name": "confirm_activity",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.stop": {
            "name": "stop",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/status.py": {
        "status": {
            "name": "status",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_config": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "dict",
                    "float",
                    "dict[, ]",
                    "Union[float, str]",
                    "int"
                ],
                "config_file": [
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/types.py": {
        "ChecksumAddress.convert": {
            "name": "convert",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ],
                "param": [
                    "str",
                    "int"
                ],
                "ctx": [
                    "str",
                    "int"
                ]
            }
        },
        "IPv4Address.convert": {
            "name": "convert",
            "location": 44,
            "return": [
                "str",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "param": [
                    "None",
                    "str",
                    "Optional[click.Parameter]",
                    "Optional[click.Context]"
                ],
                "ctx": [
                    "None",
                    "str",
                    "Optional[click.Parameter]",
                    "Optional[click.Context]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/characters/alice.py": {
        "alice": {
            "name": "alice",
            "location": 39,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "click_config": [
                    "config.Config",
                    "str"
                ],
                "action": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ],
                "teacher_uri": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ],
                "min_stake": [
                    "Mapping[str, Any]"
                ],
                "http_port": [
                    "cmk.base.config.ConfigCache",
                    "bool"
                ],
                "discovery_port": [
                    "cmk.base.config.HostConfig",
                    "backup.config.Config",
                    "cerise.config.Config",
                    "str",
                    "app.config.MQConfig",
                    "Dict[str, Any]",
                    "sphinx.config.Config"
                ],
                "federated_only": [
                    "cmk.base.config.ConfigCache",
                    "config.Config"
                ],
                "network": [
                    "cmk.base.config.ConfigCache",
                    "config.Config"
                ],
                "config_root": [
                    "sphinx.config.Config",
                    "dict",
                    "pyramid.config.Configurator"
                ],
                "config_file": [
                    "dict",
                    "Dict[str, Any]",
                    "backup.config.Config",
                    "routemaster.config.Config",
                    "pyramid.config.Configurator",
                    "config.config_reader.CustomConfigParser"
                ],
                "provider_uri": [
                    "cmk.base.config.ConfigCache",
                    "config.Config"
                ],
                "no_registry": [
                    "cmk.base.config.ConfigCache",
                    "config.Config"
                ],
                "registry_filepath": [
                    "cmk.base.config.ConfigCache",
                    "config.Config"
                ],
                "dev": [
                    "dict"
                ],
                "force": [
                    "Dict[str, Any]",
                    "config.ConfigFile",
                    "Union[str, dict]"
                ],
                "dry_run": [
                    "cmk.base.config.ConfigCache",
                    "bool"
                ],
                "bob_encrypting_key": [
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "backup.config.Config"
                ],
                "bob_verifying_key": [
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "backup.config.Config"
                ],
                "policy_encrypting_key": [
                    "str",
                    "dict"
                ],
                "label": [
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "backup.config.Config"
                ],
                "m": [],
                "n": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/characters/bob.py": {
        "bob": {
            "name": "bob",
            "location": 34,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "click_config": [
                    "config.Config",
                    "dict",
                    "sideeye.config.Configuration",
                    "cmk.base.config.ConfigCache"
                ],
                "action": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ],
                "quiet": [
                    "dict",
                    "cmk.base.config.HostConfig",
                    "sideeye.config.Configuration",
                    "config.Config",
                    "pyramid.config.Configurator"
                ],
                "teacher_uri": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ],
                "min_stake": [
                    "Mapping[str, Any]"
                ],
                "http_port": [
                    "cmk.base.config.ConfigCache",
                    "bool"
                ],
                "discovery_port": [
                    "dict",
                    "cmk.base.config.HostConfig",
                    "cerise.config.Config"
                ],
                "federated_only": [
                    "cmk.base.config.ConfigCache"
                ],
                "network": [
                    "cmk.base.config.ConfigCache"
                ],
                "config_root": [
                    "dict",
                    "pyramid.config.Configurator"
                ],
                "config_file": [
                    "str",
                    "dict",
                    "backup.config.Config",
                    "lightbus.config.Config",
                    "Dict[str, Any]"
                ],
                "provider_uri": [
                    "cmk.base.config.ConfigCache"
                ],
                "registry_filepath": [
                    "cmk.base.config.ConfigCache"
                ],
                "dev": [
                    "dict"
                ],
                "force": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "dry_run": [
                    "cmk.base.config.ConfigCache",
                    "bool"
                ],
                "label": [
                    "Optional[Exception]",
                    "Optional[pyramid.config.Configurator]",
                    "bytes"
                ],
                "policy_encrypting_key": [
                    "Optional[Exception]",
                    "Optional[pyramid.config.Configurator]",
                    "bytes"
                ],
                "alice_verifying_key": [
                    "Optional[Exception]",
                    "Optional[pyramid.config.Configurator]",
                    "bytes"
                ],
                "message_kit": [
                    "Optional[Exception]",
                    "Optional[pyramid.config.Configurator]",
                    "bytes"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/characters/enrico.py": {
        "enrico": {
            "name": "enrico",
            "location": 18,
            "return": [
                "float",
                "dict[str, typing.Any]",
                "Tuple[Tuple[int, Any]]",
                "dict[, ]",
                "bool",
                "bytes",
                "types.signals.SignalHandlerT",
                "dict[str, str]",
                "tuple[]"
            ],
            "arguments": {
                "click_config": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "cmk.base.config.HostConfig",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "Callable",
                    "dict"
                ],
                "action": [
                    "bool",
                    "Optional[bytes]",
                    "bytes",
                    "List[str]",
                    "None",
                    "Callable[[], None]",
                    "list[str]",
                    "typing.Callable[[], None]"
                ],
                "policy_encrypting_key": [
                    "bytes"
                ],
                "dry_run": [
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "http_port": [
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "message": [
                    "int",
                    "str",
                    "bool",
                    "dict[, ]",
                    "list[str]",
                    "dict",
                    "list[tuple[typing.Union[str,...]]]",
                    "List[str]",
                    "List[Tuple[str, ...]]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/characters/felix.py": {
        "felix": {
            "name": "felix",
            "location": 31,
            "return": [
                "mypy.types.Instance",
                "None"
            ],
            "arguments": {
                "click_config": [
                    "sphinx.config.Config",
                    "config.ConfigFile",
                    "str"
                ],
                "action": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "teacher_uri": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "config.ConfigFile"
                ],
                "min_stake": [],
                "network": [
                    "cmk.base.config.HostConfig",
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "config.ConfigFile",
                    "cmk.base.config.ObjectAttributes"
                ],
                "host": [
                    "cmk.base.config.HostConfig",
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "config.ConfigFile",
                    "cmk.base.config.ObjectAttributes"
                ],
                "dry_run": [
                    "str",
                    "int",
                    "zaimcsvconverter.config.SFCardViewerConfig"
                ],
                "port": [
                    "str",
                    "dict[, ]",
                    "cmk.base.config.HostConfig",
                    "backup.config.Config",
                    "lightbus.config.Config",
                    "app.config.MQConfig",
                    "dict",
                    "pyramid.config.Configurator"
                ],
                "discovery_port": [
                    "cmk.base.config.HostConfig",
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "config.ConfigFile",
                    "cmk.base.config.ObjectAttributes"
                ],
                "provider_uri": [
                    "cmk.base.config.HostConfig",
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "config.ConfigFile",
                    "cmk.base.config.ObjectAttributes"
                ],
                "config_root": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "sphinx.config.Config",
                    "config.ConfigFile",
                    "dict",
                    "Dict[str, Any]",
                    "config.config_reader.CustomConfigParser"
                ],
                "checksum_address": [
                    "dict",
                    "dict[, ]",
                    "int",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]"
                ],
                "poa": [
                    "cmk.base.config.HostConfig",
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "config.ConfigFile",
                    "cmk.base.config.ObjectAttributes"
                ],
                "config_file": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]",
                    "backup.config.Config",
                    "routemaster.config.Config",
                    "pyramid.config.Configurator",
                    "config.config_reader.CustomConfigParser"
                ],
                "db_filepath": [
                    "cmk.base.config.HostConfig",
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "config.ConfigFile",
                    "cmk.base.config.ObjectAttributes"
                ],
                "no_registry": [
                    "cmk.base.config.HostConfig",
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "config.ConfigFile",
                    "cmk.base.config.ObjectAttributes"
                ],
                "registry_filepath": [
                    "cmk.base.config.HostConfig",
                    "config.Config",
                    "cmk.base.config.ConfigCache",
                    "config.ConfigFile",
                    "cmk.base.config.ObjectAttributes"
                ],
                "force": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/characters/moe.py": {
        "moe": {
            "name": "moe",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_config": [
                    "dict[, ]",
                    "dict",
                    "list[typing.Any]",
                    "None",
                    "cmk.base.config.HostConfig",
                    "Optional[List[Any]]",
                    "sideeye.config.Configuration",
                    "jumeaux.domain.config.vo.Config",
                    "config.RunningConfig"
                ],
                "teacher_uri": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "config.ConfigFile"
                ],
                "min_stake": [
                    "tuple",
                    "tuple[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "network": [
                    "str",
                    "dict",
                    "cmk.base.config.HostConfig"
                ],
                "ws_port": [
                    "bool",
                    "cmk.base.config.ConfigCache"
                ],
                "dry_run": [
                    "bool",
                    "cmk.base.config.ConfigCache"
                ],
                "http_port": [
                    "bool",
                    "cmk.base.config.ConfigCache"
                ],
                "learn_on_launch": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "pricemonitor.config.Config"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/characters/ursula.py": {
        "ursula": {
            "name": "ursula",
            "location": 74,
            "return": [
                "None",
                "T",
                "Iterator[T]"
            ],
            "arguments": {
                "click_config": [
                    "cmk.base.config.HostConfig",
                    "Optional['ConvolutionalEmbeddingConfig']",
                    "Optional[List[Any]]",
                    "trinity.config.ChainConfig"
                ],
                "action": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "dev": [
                    "bool"
                ],
                "quiet": [
                    "str",
                    "cmk.base.config.HostConfig",
                    "list[]",
                    "int",
                    "list",
                    "trinity.config.ChainConfig"
                ],
                "dry_run": [
                    "bool"
                ],
                "force": [],
                "lonely": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "network": [
                    "Dict[str, Any]",
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ConfigCache",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "teacher_uri": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "min_stake": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "rest_host": [
                    "int",
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "rest_port": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "None",
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ConfigCache",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "db_filepath": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "None",
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ConfigCache",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "checksum_address": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "withdraw_address": [
                    "bool",
                    "tuple",
                    "tuple[]",
                    "List[str]",
                    "list[str]"
                ],
                "federated_only": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "None",
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ConfigCache",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "poa": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "None",
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ConfigCache",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "config_root": [
                    "str",
                    "list[str]",
                    "sphinx.config.Config",
                    "List[str]"
                ],
                "config_file": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "cmk.base.config.ConfigCache"
                ],
                "provider_uri": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "None",
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ConfigCache",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "recompile_solidity": [
                    "int",
                    "str"
                ],
                "no_registry": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "None",
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ConfigCache",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "registry_filepath": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int",
                    "None",
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ConfigCache",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "value": [
                    "int",
                    "Callable[[Any], bool]",
                    "str",
                    "typing.Callable[typing.Any, bool]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "duration": [
                    "int",
                    "str",
                    "bool"
                ],
                "index": [
                    "dict",
                    "int",
                    "dict[, ]"
                ],
                "list_": [
                    "bool"
                ],
                "divide": [
                    "bool"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/cli/characters/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/config/characters.py": {
        "UrsulaConfiguration.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev_mode": [
                    "bool",
                    "Set[str]",
                    "List[str]",
                    "list",
                    "Dict[str, Any]",
                    "Callable",
                    "dict",
                    "tuple"
                ],
                "db_filepath": [
                    "str",
                    "None",
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "tuple[typing.Union[int,int]]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "UrsulaConfiguration.generate_runtime_filepaths": {
            "name": "generate_runtime_filepaths",
            "location": 47,
            "return": [
                "dict[str, str]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "UrsulaConfiguration.static_payload": {
            "name": "static_payload",
            "location": 54,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 63,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.produce": {
            "name": "produce",
            "location": 73,
            "return": [
                "list[]",
                "int",
                "list[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 87,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "AliceConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 107,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "BobConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 125,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "FelixConfiguration.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_filepath": [
                    "str",
                    "None"
                ]
            }
        },
        "FelixConfiguration.static_payload": {
            "name": "static_payload",
            "location": 161,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FelixConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 169,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "UrsulaConfiguration.produce.MockDatastoreThreadPool.callInThread": {
            "name": "callInThread",
            "location": 81,
            "return": [
                "str",
                "dss.config.Replica"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[..., T]",
                    "Callable"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/config/constants.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/config/keyring.py": {
        "unlock_required": {
            "name": "unlock_required",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_assemble_key_data": {
            "name": "_assemble_key_data",
            "location": 78,
            "return": [
                "str",
                "dict[typing.Text, typing.Union[dict[, ],dict[str, str],int,list[str]]]"
            ],
            "arguments": {
                "key_data": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "dict[str, str]",
                    "raiden.network.proxies.secret_registry.SecretRegistry",
                    "list[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "master_salt": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "dict[str, str]",
                    "raiden.network.proxies.secret_registry.SecretRegistry",
                    "list[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "wrap_salt": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "dict[str, str]",
                    "raiden.network.proxies.secret_registry.SecretRegistry",
                    "list[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "_read_keyfile": {
            "name": "_read_keyfile",
            "location": 89,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "keypath": [
                    "str",
                    "int",
                    "Callable"
                ],
                "deserializer": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_write_private_keyfile": {
            "name": "_write_private_keyfile",
            "location": 102,
            "return": [
                "int",
                "bytes",
                "str",
                "Callable",
                "None"
            ],
            "arguments": {
                "keypath": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "key_data": [
                    "bytes",
                    "str",
                    "dict[, ]",
                    "dict",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "Optional[Dict]",
                    "Optional[str]"
                ],
                "serializer": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ]
            }
        },
        "_write_public_keyfile": {
            "name": "_write_public_keyfile",
            "location": 135,
            "return": [
                "int",
                "str",
                "Callable",
                "None"
            ],
            "arguments": {
                "keypath": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "key_data": [
                    "bytes",
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "dict[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "_write_tls_certificate": {
            "name": "_write_tls_certificate",
            "location": 164,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "certificate": [
                    "float",
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "full_filepath": [
                    "str",
                    "Union[str, float]"
                ],
                "force": [
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "_read_tls_public_certificate": {
            "name": "_read_tls_public_certificate",
            "location": 178,
            "return": [
                "list[int]",
                "int",
                "dict[, ]",
                "Callable",
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "_derive_wrapping_key_from_key_material": {
            "name": "_derive_wrapping_key_from_key_material",
            "location": 191,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int",
                "bool",
                "bytes",
                "typing.TextIO"
            ],
            "arguments": {
                "salt": [
                    "str",
                    "int",
                    "bytes",
                    "crypto.PointG2"
                ],
                "key_material": [
                    "str",
                    "int",
                    "bytes",
                    "crypto.PointG2"
                ]
            }
        },
        "_generate_encryption_keys": {
            "name": "_generate_encryption_keys",
            "location": 213,
            "return": [
                "tuple[]",
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "cryptography.x509.Certificate"
            ],
            "arguments": {}
        },
        "_generate_signing_keys": {
            "name": "_generate_signing_keys",
            "location": 220,
            "return": [
                "tuple[]",
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "cryptography.x509.Certificate"
            ],
            "arguments": {}
        },
        "_generate_wallet": {
            "name": "_generate_wallet",
            "location": 229,
            "return": [
                "tuple[]",
                "int",
                "str",
                "twisted.python.failure.Failure",
                "Union[str, Dict]"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        },
        "_generate_tls_keys": {
            "name": "_generate_tls_keys",
            "location": 236,
            "return": [
                "tuple[typing.Union[str,tuple[typing.Union[int,int,int]],bytes,dict[bytes, bytes],dict[int, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]],int]]",
                "str",
                "bool",
                "Sequence[Sequence[Any]]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve"
                ],
                "checksum_address": [
                    "str",
                    "int",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve"
                ],
                "curve": [
                    "str",
                    "int",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve"
                ]
            }
        },
        "unlock_required.wrapped": {
            "name": "wrapped",
            "location": 70,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "keyring": [
                    "None",
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "_PrivateKeySerializer.__serialize": {
            "name": "__serialize",
            "location": 243,
            "return": [
                "bytes",
                "str",
                "bytearray",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key_metadata": [
                    "dict[str, bytes]",
                    "Dict[str, bytes]",
                    "bool",
                    "Optional[int]",
                    "Optional[Type[Any]]"
                ],
                "encoding": [
                    "str"
                ],
                "nested_serializer": [
                    "Callable",
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_PrivateKeySerializer.__deserialize": {
            "name": "__deserialize",
            "location": 261,
            "return": [
                "dict[, ]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key_metadata": [
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurvePrivateKeyWithSerialization",
                    "libqtile.config.Key"
                ],
                "encoding": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "float",
                    "None"
                ],
                "nested_deserializer": [
                    "str",
                    "int"
                ]
            }
        },
        "_PrivateKeySerializer.__call__": {
            "name": "__call__",
            "location": 277,
            "return": [
                "str",
                "dict",
                "IO[bytes]",
                "bool",
                "List[str]",
                "Tuple[int, List[str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "typing.Match",
                    "str",
                    "Match[bytes]",
                    "Union[bytes, str]",
                    "list[int]",
                    "List[int]"
                ]
            }
        },
        "NucypherKeyring.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "int"
                ],
                "keyring_root": [
                    "str",
                    "None"
                ],
                "root_key_path": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict",
                    "dict[, ]"
                ],
                "pub_root_key_path": [
                    "str",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]"
                ],
                "signing_key_path": [
                    "str",
                    "None",
                    "int",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "BinaryIO",
                    "List[str]",
                    "typing.BinaryIO",
                    "list[str]"
                ],
                "pub_signing_key_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "delegating_key_path": [
                    "str",
                    "None",
                    "int",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "BinaryIO",
                    "List[str]",
                    "typing.BinaryIO",
                    "list[str]"
                ],
                "tls_key_path": [
                    "str",
                    "None",
                    "int",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "BinaryIO",
                    "List[str]",
                    "typing.BinaryIO",
                    "list[str]"
                ],
                "tls_certificate_path": [
                    "str",
                    "None",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "NucypherKeyring.__del__": {
            "name": "__del__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.checksum_address": {
            "name": "checksum_address",
            "location": 370,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.federated_address": {
            "name": "federated_address",
            "location": 374,
            "return": [
                "int",
                "twisted.python.failure.Failure",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.signing_public_key": {
            "name": "signing_public_key",
            "location": 383,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.encrypting_public_key": {
            "name": "encrypting_public_key",
            "location": 389,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "cryptography.x509.Certificate"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.certificate_filepath": {
            "name": "certificate_filepath",
            "location": 395,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring._generate_base_filepaths": {
            "name": "_generate_base_filepaths",
            "location": 402,
            "return": [
                "str"
            ],
            "arguments": {
                "keyring_root": [
                    "str",
                    "bytes"
                ]
            }
        },
        "NucypherKeyring._generate_key_filepaths": {
            "name": "_generate_key_filepaths",
            "location": 408,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "public_key_dir": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "private_key_dir": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "account": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "NucypherKeyring._export_wallet_to_node": {
            "name": "_export_wallet_to_node",
            "location": 423,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "NucypherKeyring.__decrypt_keyfile": {
            "name": "__decrypt_keyfile",
            "location": 431,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key_path": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "NucypherKeyring.account": {
            "name": "account",
            "location": 443,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.is_unlocked": {
            "name": "is_unlocked",
            "location": 447,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.lock": {
            "name": "lock",
            "location": 450,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.unlock": {
            "name": "unlock",
            "location": 455,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "NucypherKeyring.derive_crypto_power": {
            "name": "derive_crypto_power",
            "location": 470,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "power_class": [
                    "Type",
                    "bytes"
                ]
            }
        },
        "NucypherKeyring.generate": {
            "name": "generate",
            "location": 511,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "bool",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "Optional[Dict[str, Any]]"
                ],
                "encrypting": [
                    "str",
                    "bool",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "rest": [
                    "str",
                    "bool",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "host": [
                    "str",
                    "None",
                    "bool",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "curve": [
                    "str",
                    "None",
                    "bool",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "keyring_root": [
                    "str",
                    "None",
                    "bool",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ],
                "checksum_address": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "NucypherKeyring.validate_password": {
            "name": "validate_password",
            "location": 643,
            "return": [
                "list[typing.Union[bool,typing.Text]]",
                "int",
                "str"
            ],
            "arguments": {
                "password": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Union[bool, str]",
                    "Optional[\"PNRelationMetaData\"]"
                ]
            }
        },
        "NucypherKeyring.generate.__serialize_pem": {
            "name": "__serialize_pem",
            "location": 628,
            "return": [
                "MutableMapping[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "pk": [
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/config/node.py": {
        "NodeConfiguration.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "list[tuple[typing.Union[str,str,str]]]",
                    "int",
                    "List[Tuple[str, str, str]]"
                ],
                "config_file_location": [
                    "Tuple[str, str]",
                    "None",
                    "bool",
                    "tuple[typing.Union[str,str]]",
                    "List[str]",
                    "Dict[str, str]",
                    "list[str]",
                    "dict[str, str]"
                ],
                "dev_mode": [
                    "bool",
                    "int",
                    "str"
                ],
                "federated_only": [
                    "bool",
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]",
                    "Optional[bool]",
                    "int",
                    "Union[int, None]",
                    "Dict[str, bool]",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]"
                ],
                "is_me": [
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "checksum_public_address": [
                    "None",
                    "eth.abc.BlockHeaderAPI",
                    "bytes",
                    "str",
                    "Optional[\"NetworkManager\"]",
                    "int",
                    "list[str]",
                    "List[str]"
                ],
                "crypto_power": [
                    "bool",
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "keyring": [
                    "bool",
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "keyring_dir": [
                    "bool",
                    "None",
                    "str",
                    "list",
                    "Optional[str]",
                    "list[]"
                ],
                "learn_on_same_thread": [
                    "bool",
                    "str",
                    "Dict[str, Tuple[str, str, Any]]",
                    "int"
                ],
                "abort_on_learning_error": [
                    "bool",
                    "str"
                ],
                "start_learning_now": [
                    "bool",
                    "str",
                    "tuple",
                    "Union[int, float]",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "Callable[[], int]"
                ],
                "rest_host": [
                    "bool",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "rest_port": [
                    "int",
                    "None",
                    "float",
                    "Optional[bool]",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "tls_curve": [
                    "bool",
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "certificate": [
                    "bool",
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "domains": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "interface_signature": [
                    "bool",
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "network_middleware": [
                    "bool",
                    "None",
                    "float",
                    "MutableSet[T]",
                    "typing.MutableSet"
                ],
                "known_nodes": [
                    "AbstractSet[str]",
                    "None",
                    "bool",
                    "typing.AbstractSet",
                    "int",
                    "list",
                    "list[]"
                ],
                "node_storage": [
                    "bool",
                    "None",
                    "MutableSet[T]",
                    "Tuple[str]",
                    "typing.MutableSet",
                    "tuple[str]"
                ],
                "reload_metadata": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "save_metadata": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "poa": [
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ],
                "provider_uri": [
                    "bool",
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "list[typing.Any]"
                ],
                "registry_source": [
                    "bool",
                    "None",
                    "int",
                    "str",
                    "pyramid.config.Configurator",
                    "list[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "registry_filepath": [
                    "str",
                    "None",
                    "bool",
                    "Dict[str, List[str]]",
                    "tuple",
                    "dict[str, list[str]]",
                    "tuple[]"
                ],
                "import_seed_registry": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "NodeConfiguration.__call__": {
            "name": "__call__",
            "location": 276,
            "return": [
                "mypy.nodes.TypeInfo",
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.generate": {
            "name": "generate",
            "location": 280,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Optional[str]",
                "dict",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "OrderedDict",
                    "str",
                    "typing.OrderedDict",
                    "int",
                    "bytes",
                    "Callable[..., Coroutine[Any, Any, Any]]",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ],
                "password": [
                    "str",
                    "Union[Dict[str, Any], List[Any]]",
                    "dict[str, typing.Any]",
                    "list[typing.Any]"
                ],
                "no_registry": [
                    "str",
                    "Union[Dict[str, Any], List[Any]]",
                    "dict[str, typing.Any]",
                    "list[typing.Any]"
                ]
            }
        },
        "NodeConfiguration.__write": {
            "name": "__write",
            "location": 286,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "no_registry": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "NodeConfiguration.cleanup": {
            "name": "cleanup",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.dev_mode": {
            "name": "dev_mode",
            "location": 299,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.known_nodes": {
            "name": "known_nodes",
            "location": 303,
            "return": [
                "Callable",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.connect_to_blockchain": {
            "name": "connect_to_blockchain",
            "location": 306,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "recompile_contracts": [
                    "bool",
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "NodeConfiguration.connect_to_contracts": {
            "name": "connect_to_contracts",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.read_known_nodes": {
            "name": "read_known_nodes",
            "location": 324,
            "return": [
                "int",
                "str",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.forget_nodes": {
            "name": "forget_nodes",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.destroy": {
            "name": "destroy",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "dict",
                    "Exception"
                ],
                "logs": [
                    "bool",
                    "str"
                ]
            }
        },
        "NodeConfiguration.generate_parameters": {
            "name": "generate_parameters",
            "location": 347,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.produce": {
            "name": "produce",
            "location": 353,
            "return": [
                "int",
                "str",
                "Callable",
                "typing.Type",
                "tuple[typing.Union[int,int,int]]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration._read_configuration_file": {
            "name": "_read_configuration_file",
            "location": 360,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "NodeConfiguration.from_configuration_file": {
            "name": "from_configuration_file",
            "location": 370,
            "return": [
                "str",
                "dict[str, int]",
                "Iterable[str]",
                "list[typing.Optional[bool]]",
                "bool",
                "list[]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[str, BinaryIO]",
                    "dict"
                ],
                "filepath": [
                    "Optional[Sequence[str]]",
                    "None",
                    "str",
                    "Optional[bytes]",
                    "typing.Sequence[str]",
                    "bytes",
                    "Optional[dict]",
                    "dict[, ]"
                ]
            }
        },
        "NodeConfiguration.to_configuration_file": {
            "name": "to_configuration_file",
            "location": 412,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "NodeConfiguration.validate": {
            "name": "validate",
            "location": 431,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str"
                ],
                "no_registry": [
                    "bool",
                    "cincoconfig.abc.BaseConfig",
                    "list",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "NodeConfiguration.static_payload": {
            "name": "static_payload",
            "location": 450,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 476,
            "return": [
                "dict[, ]",
                "int",
                "dict[str, typing.Any]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.runtime_filepaths": {
            "name": "runtime_filepaths",
            "location": 501,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.generate_runtime_filepaths": {
            "name": "generate_runtime_filepaths",
            "location": 508,
            "return": [
                "str",
                "int",
                "dict[str, list[str]]",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "config_root": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "NodeConfiguration._cache_runtime_filepaths": {
            "name": "_cache_runtime_filepaths",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.derive_node_power_ups": {
            "name": "derive_node_power_ups",
            "location": 523,
            "return": [
                "list[typing.Union[typing.DefaultDict,list[dict[str, typing.Any]],str,dict[, ]]]",
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.initialize": {
            "name": "initialize",
            "location": 531,
            "return": [
                "str",
                "Callable",
                "Dict[str, Dict[str, Any]]",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "import_registry": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[float]"
                ]
            }
        },
        "NodeConfiguration.attach_keyring": {
            "name": "attach_keyring",
            "location": 589,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "NodeConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 602,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "dict[, ]",
                    "dss.config.Replica",
                    "dict"
                ]
            }
        },
        "NodeConfiguration.write_registry": {
            "name": "write_registry",
            "location": 621,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "output_filepath": [
                    "bool",
                    "None",
                    "str",
                    "Optional[tuple]",
                    "dict",
                    "tuple[]",
                    "dict[, ]"
                ],
                "source": [
                    "str",
                    "None",
                    "bool",
                    "os.PathLike"
                ],
                "force": [
                    "bool",
                    "str",
                    "Callable[[str, str], None]",
                    "Optional[int]"
                ],
                "blank": [
                    "bool",
                    "List[str]",
                    "list",
                    "int",
                    "bytes",
                    "Optional[dict]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/config/storages.py": {
        "NodeStorage.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "float",
                    "int"
                ],
                "character_class": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ],
                "serializer": [
                    "bool",
                    "float",
                    "int"
                ],
                "deserializer": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "NodeStorage.__getitem__": {
            "name": "__getitem__",
            "location": 66,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict[, ]",
                    "int",
                    "dict",
                    "list[]",
                    "list",
                    "bool"
                ]
            }
        },
        "NodeStorage.__setitem__": {
            "name": "__setitem__",
            "location": 69,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[Any]",
                "\"Namespace\""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "slice"
                ],
                "value": [
                    "list",
                    "str",
                    "list[]",
                    "set",
                    "set[]"
                ]
            }
        },
        "NodeStorage.__delitem__": {
            "name": "__delitem__",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "NodeStorage.__iter__": {
            "name": "__iter__",
            "location": 75,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage._read_common_name": {
            "name": "_read_common_name",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "str",
                    "float",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "NodeStorage._write_tls_certificate": {
            "name": "_write_tls_certificate",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "int",
                    "bool"
                ],
                "host": [
                    "str",
                    "None"
                ],
                "force": [
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "NodeStorage.store_node_certificate": {
            "name": "store_node_certificate",
            "location": 125,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "bool",
                    "cryptography.x509.Certificate",
                    "list[list[str]]",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "NodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 129,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ],
                "filepath": [
                    "str",
                    "None",
                    "bool",
                    "list",
                    "list[]"
                ]
            }
        },
        "NodeStorage.generate_certificate_filepath": {
            "name": "generate_certificate_filepath",
            "location": 134,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "NodeStorage.payload": {
            "name": "payload",
            "location": 138,
            "return": [
                "builtins.dict",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.from_payload": {
            "name": "from_payload",
            "location": 143,
            "return": [
                "'NodeStorage'",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "NodeStorage.initialize": {
            "name": "initialize",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.all": {
            "name": "all",
            "location": 153,
            "return": [
                "builtins.set",
                "None"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, str]",
                    "int"
                ],
                "certificates_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ]
            }
        },
        "NodeStorage.get": {
            "name": "get",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "federated_only": [
                    "str",
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "NodeStorage.remove": {
            "name": "remove",
            "location": 163,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "NodeStorage.clear": {
            "name": "clear",
            "location": 168,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.__del__": {
            "name": "__del__",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.all": {
            "name": "all",
            "location": 189,
            "return": [
                "set[]",
                "Set[str]",
                "set",
                "Set[int]",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, str]",
                    "int"
                ],
                "certificates_only": [
                    "bool",
                    "SupportsInt",
                    "Sequence[Sequence[Any]]",
                    "bytes",
                    "float",
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ForgetfulNodeStorage.get": {
            "name": "get",
            "location": 193,
            "return": [
                "List[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "int"
                ],
                "host": [
                    "str",
                    "int",
                    "None"
                ],
                "checksum_address": [
                    "str",
                    "int",
                    "None"
                ],
                "certificate_only": [
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.forget": {
            "name": "forget",
            "location": 214,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.store_node_certificate": {
            "name": "store_node_certificate",
            "location": 219,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": []
            }
        },
        "ForgetfulNodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 229,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "filepath": [
                    "str",
                    "None",
                    "bool",
                    "list",
                    "list[]"
                ]
            }
        },
        "ForgetfulNodeStorage.generate_certificate_filepath": {
            "name": "generate_certificate_filepath",
            "location": 234,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.remove": {
            "name": "remove",
            "location": 240,
            "return": [
                "bool",
                "tuple[typing.Union[bool,str]]"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str"
                ],
                "metadata": [
                    "bool",
                    "Optional[bool]"
                ],
                "certificate": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "ForgetfulNodeStorage.clear": {
            "name": "clear",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool"
                ],
                "certificates": [
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.payload": {
            "name": "payload",
            "location": 259,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.from_payload": {
            "name": "from_payload",
            "location": 264,
            "return": [
                "Callable[..., None]",
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "payload": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ForgetfulNodeStorage.initialize": {
            "name": "initialize",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "int",
                    "None"
                ],
                "storage_root": [
                    "str",
                    "None",
                    "Set[str]",
                    "set[str]"
                ],
                "metadata_dir": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "certificates_dir": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage._generate_storage_filepaths": {
            "name": "_generate_storage_filepaths",
            "location": 301,
            "return": [
                "dict[typing.Text, typing.Union[None,str]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config_root": [
                    "str",
                    "None"
                ],
                "storage_root": [
                    "str",
                    "None"
                ],
                "metadata_dir": [
                    "str",
                    "None"
                ],
                "certificates_dir": [
                    "str",
                    "None"
                ]
            }
        },
        "LocalFileBasedNodeStorage._cache_storage_filepaths": {
            "name": "_cache_storage_filepaths",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "None"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__get_certificate_filename": {
            "name": "__get_certificate_filename",
            "location": 330,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__get_certificate_filepath": {
            "name": "__get_certificate_filepath",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "certificate_filename": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "LocalFileBasedNodeStorage.generate_certificate_filepath": {
            "name": "generate_certificate_filepath",
            "location": 337,
            "return": [
                "str",
                "int",
                "Callable",
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__read_tls_public_certificate": {
            "name": "__read_tls_public_certificate",
            "location": 343,
            "return": [
                "list[int]",
                "int",
                "dict[, ]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[Any]",
                    "int"
                ],
                "checksum_address": [
                    "bool",
                    "None",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__generate_metadata_filepath": {
            "name": "__generate_metadata_filepath",
            "location": 363,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str"
                ],
                "metadata_dir": [
                    "str",
                    "None"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__read_metadata": {
            "name": "__read_metadata",
            "location": 368,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "int",
                    "Callable"
                ],
                "federated_only": [
                    "Union[bytes, bytearray]",
                    "bytes",
                    "bool",
                    "str",
                    "bytearray",
                    "int"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__write_metadata": {
            "name": "__write_metadata",
            "location": 379,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "node": [
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "LocalFileBasedNodeStorage.all": {
            "name": "all",
            "location": 388,
            "return": [
                "str",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "certificates_only": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "LocalFileBasedNodeStorage.get": {
            "name": "get",
            "location": 408,
            "return": [
                "str",
                "float",
                "int",
                "list[str]",
                "dict[str, typing.Any]",
                "dict[str, typing.Union[float,str]]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]",
                "typing.TextIO"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "federated_only": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "certificate_only": [
                    "bool"
                ]
            }
        },
        "LocalFileBasedNodeStorage.store_node_certificate": {
            "name": "store_node_certificate",
            "location": 416,
            "return": [
                "dict",
                "bool",
                "dict[str, str]",
                "list[tuple[typing.Union[str,str,typing.Any]]]",
                "str",
                "dict[str, typing.Union[dict[, ],typing.Any]]",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 420,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "filepath": [
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "str",
                    "List[str]",
                    "typing.Mapping",
                    "list[str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.save_node": {
            "name": "save_node",
            "location": 426,
            "return": [
                "tuple[typing.Union[typing.Type,str,int,set[str]]]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "dict[, ]",
                    "List[int]",
                    "list[int]"
                ],
                "force": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.remove": {
            "name": "remove",
            "location": 432,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int",
                    "Union[str, int]"
                ],
                "metadata": [
                    "bool",
                    "Optional[bool]"
                ],
                "certificate": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.clear": {
            "name": "clear",
            "location": 446,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool"
                ],
                "certificates": [
                    "bool"
                ]
            }
        },
        "LocalFileBasedNodeStorage.payload": {
            "name": "payload",
            "location": 462,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.from_payload": {
            "name": "from_payload",
            "location": 472,
            "return": [
                "int",
                "Callable[..., None]",
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "type",
                    "typing.Type"
                ],
                "payload": [
                    "dict",
                    "Exception",
                    "dict[, ]",
                    "Type[T]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.initialize": {
            "name": "initialize",
            "location": 480,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.__init__": {
            "name": "__init__",
            "location": 497,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.__del__": {
            "name": "__del__",
            "location": 504,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.initialize": {
            "name": "initialize",
            "location": 509,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.clear.__destroy_dir_contents": {
            "name": "__destroy_dir_contents",
            "location": 449,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/config/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/crypto/api.py": {
        "secure_random": {
            "name": "secure_random",
            "location": 43,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "num_bytes": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "secure_random_range": {
            "name": "secure_random_range",
            "location": 58,
            "return": [
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "float"
            ],
            "arguments": {
                "min": [
                    "int",
                    "Dict[str, str]",
                    "float",
                    "dict[str, str]",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                    "None"
                ],
                "max": [
                    "int",
                    "Dict[str, str]",
                    "float",
                    "dict[str, str]",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                    "None"
                ]
            }
        },
        "keccak_digest": {
            "name": "keccak_digest",
            "location": 71,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool",
                "List[int]",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "ecdsa_sign": {
            "name": "ecdsa_sign",
            "location": 90,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "BinaryIO",
                    "typing.BinaryIO"
                ],
                "privkey": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "ecdsa_verify": {
            "name": "ecdsa_verify",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "int",
                    "str",
                    "dict[str, dict[str, str]]",
                    "eth_keys.datatypes.Signature",
                    "Dict[str, Dict[str, str]]"
                ],
                "signature": [
                    "bytes",
                    "int",
                    "str",
                    "dict[str, dict[str, str]]",
                    "eth_keys.datatypes.Signature",
                    "Dict[str, Dict[str, str]]"
                ],
                "pubkey": [
                    "bytes",
                    "str",
                    "bytearray",
                    "eth_keys.datatypes.Signature"
                ]
            }
        },
        "generate_self_signed_certificate": {
            "name": "generate_self_signed_certificate",
            "location": 133,
            "return": [
                "tuple[typing.Union[dict[str, typing.Union[typing.Any,bytes]],dict[, ]]]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "checksum_address": [
                    "str",
                    "Container[str]",
                    "typing.Container",
                    "Optional[str]",
                    "None"
                ],
                "curve": [
                    "str",
                    "bytes",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "int",
                    "None",
                    "Union[str, int]",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "private_key": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "days_valid": [
                    "int",
                    "bool",
                    "datetime.datetime",
                    "float",
                    "Optional[int]",
                    "datetime.timedelta"
                ]
            }
        },
        "encrypt_and_sign": {
            "name": "encrypt_and_sign",
            "location": 162,
            "return": [
                "tuple[typing.Union[UmbralMessageKit,int,list[str],tuple[typing.Union[str,str]]]]",
                "list",
                "str",
                "bytes",
                "Tuple[nucypher.crypto.kits.UmbralMessageKit, umbral.signing.Signature]"
            ],
            "arguments": {
                "recipient_pubkey_enc": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "plaintext": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "signer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "sign_plaintext": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/crypto/constants.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/crypto/kits.py": {
        "CryptoKit.split_bytes": {
            "name": "split_bytes",
            "location": 29,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "some_bytes": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CryptoKit.from_bytes": {
            "name": "from_bytes",
            "location": 37,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "AnyStr",
                    "int"
                ],
                "some_bytes": [
                    "bytes",
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MessageKit.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsule": [
                    "bool",
                    "float",
                    "str",
                    "bytes",
                    "Union[float, Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]"
                ],
                "sender_pubkey_sig": [
                    "bool",
                    "None",
                    "float",
                    "str",
                    "bytes",
                    "Union[float, Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]"
                ],
                "ciphertext": [
                    "bool",
                    "None",
                    "float",
                    "str",
                    "bytes",
                    "Union[float, Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]"
                ],
                "signature": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "MessageKit.to_bytes": {
            "name": "to_bytes",
            "location": 50,
            "return": [
                "str",
                "int",
                "zam_repondeur.models.Amendement"
            ],
            "arguments": {
                "self": [],
                "include_alice_pubkey": [
                    "bool",
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "MessageKit.signature": {
            "name": "signature",
            "location": 63,
            "return": [
                "int",
                "Set[str]",
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageKit.__bytes__": {
            "name": "__bytes__",
            "location": 66,
            "return": [
                "str",
                "int",
                "bytearray",
                "Tuple[float, float]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UmbralMessageKit.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UmbralMessageKit.from_bytes": {
            "name": "from_bytes",
            "location": 79,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "int",
                    "bool",
                    "list",
                    "str"
                ],
                "some_bytes": [
                    "int",
                    "float",
                    "str",
                    "List[float]",
                    "list[float]",
                    "Union[Tuple[int, int], int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "RevocationKit.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "int",
                    "models.Profile",
                    "allennlp.models.Model"
                ],
                "signer": [
                    "int",
                    "typing.Iterable[str]",
                    "str",
                    "Iterable[str]",
                    "daylighdb.models.Profile",
                    "excars.models.profiles.Profile"
                ]
            }
        },
        "RevocationKit.__iter__": {
            "name": "__iter__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.__getitem__": {
            "name": "__getitem__",
            "location": 95,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "set[str]",
                    "int",
                    "Set[str]",
                    "Iterable[str]",
                    "Iterable[int]"
                ]
            }
        },
        "RevocationKit.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.__eq__": {
            "name": "__eq__",
            "location": 101,
            "return": [
                "bool",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "RevocationKit.revokable_addresses": {
            "name": "revokable_addresses",
            "location": 105,
            "return": [
                "bool",
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.add_confirmation": {
            "name": "add_confirmation",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "signed_receipt": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/crypto/powers.py": {
        "CryptoPower.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "power_ups": [
                    "None",
                    "str",
                    "Optional[str]",
                    "list[]",
                    "list",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "CryptoPower.consume_power_up": {
            "name": "consume_power_up",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "power_up": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "CryptoPower.power_ups": {
            "name": "power_ups",
            "location": 73,
            "return": [
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "power_up_class": [
                    "bool",
                    "Hashable",
                    "typing.Hashable",
                    "Set[str]",
                    "set[str]",
                    "Type[T]",
                    "typing.Type",
                    "Dict[str, Type]",
                    "dict[str, typing.Type]"
                ]
            }
        },
        "BlockchainPower.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "str",
                    "int",
                    "Sized",
                    "typing.Sized",
                    "List[str]",
                    "list[str]"
                ],
                "account": [
                    "str",
                    "int",
                    "Sized",
                    "typing.Sized",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "BlockchainPower.unlock_account": {
            "name": "unlock_account",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "duration": [
                    "str",
                    "None"
                ]
            }
        },
        "BlockchainPower.sign_message": {
            "name": "sign_message",
            "location": 112,
            "return": [
                "bytes",
                "str",
                "List[int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "list[]",
                    "float",
                    "list",
                    "str",
                    "myaku.datatypes.ArticleTextPosition"
                ]
            }
        },
        "BlockchainPower.verify_message": {
            "name": "verify_message",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Union[float, str]",
                    "float"
                ],
                "pubkey": [
                    "str"
                ],
                "message": [
                    "bool",
                    "str",
                    "float",
                    "None",
                    "int",
                    "Optional[str]",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "signature_bytes": [
                    "int",
                    "str",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "BlockchainPower.__del__": {
            "name": "__del__",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyPairBasedPower.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pubkey": [
                    "umbral.keys.UmbralPublicKey",
                    "bytes",
                    "int",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "keypair": [
                    "str",
                    "None",
                    "IO",
                    "bool",
                    "dict",
                    "typing.IO",
                    "List[str]",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "KeyPairBasedPower.__getattr__": {
            "name": "__getattr__",
            "location": 178,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "KeyPairBasedPower.public_key": {
            "name": "public_key",
            "location": 190,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatingPower.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keying_material": [
                    "Union[bytes, str, None]",
                    "None",
                    "bytes",
                    "Optional[bytes]",
                    "str",
                    "Optional[Union[str, int]]",
                    "int"
                ],
                "password": [
                    "None",
                    "bytes",
                    "Optional[bytes]",
                    "str",
                    "Optional[str]",
                    "typing.BinaryIO",
                    "BinaryIO"
                ]
            }
        },
        "DelegatingPower._get_privkey_from_label": {
            "name": "_get_privkey_from_label",
            "location": 224,
            "return": [
                "str",
                "bytes",
                "dict",
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Awaitable[Any]",
                    "collections.abc.Awaitable[typing.Any]",
                    "bytes",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DelegatingPower.get_pubkey_from_label": {
            "name": "get_pubkey_from_label",
            "location": 227,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DelegatingPower.generate_kfrags": {
            "name": "generate_kfrags",
            "location": 230,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Optional[str]",
                "Tuple[bool, bool, bool]"
            ],
            "arguments": {
                "self": [],
                "bob_pubkey_enc": [
                    "int",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Tuple[int, int]"
                ],
                "signer": [
                    "int",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Tuple[int, int]"
                ],
                "label": [
                    "Tuple[int]",
                    "tuple[int]",
                    "Sequence[Sequence[float]]",
                    "typing.Sequence[typing.Sequence[float]]",
                    "str",
                    "Dict[int, str]",
                    "dict[int, str]",
                    "List[str]",
                    "list[str]"
                ],
                "m": [
                    "int",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Tuple[int, int]"
                ],
                "n": [
                    "int",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "DelegatingPower.get_decrypting_power_from_label": {
            "name": "get_decrypting_power_from_label",
            "location": 253,
            "return": [
                "DecryptingPower",
                "bool",
                "str",
                "Tuple[int, int, int]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/crypto/signing.py": {
        "SignatureStamp.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verifying_key": [
                    "bytes",
                    "Union[bytes, umbral.keys.UmbralPublicKey]",
                    "str"
                ],
                "signer": [
                    "Mapping[str, Any]",
                    "int",
                    "None",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "SignatureStamp.__bytes__": {
            "name": "__bytes__",
            "location": 36,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__call__": {
            "name": "__call__",
            "location": 39,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__hash__": {
            "name": "__hash__",
            "location": 42,
            "return": [
                "int",
                "bytes",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]",
                    "None"
                ]
            }
        },
        "SignatureStamp.__add__": {
            "name": "__add__",
            "location": 48,
            "return": [
                "str",
                "Tuple[float, float]",
                "List[str]",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "List[str]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str",
                    "umbral.curvebn.CurveBN"
                ]
            }
        },
        "SignatureStamp.__radd__": {
            "name": "__radd__",
            "location": 51,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "SignatureStamp.__len__": {
            "name": "__len__",
            "location": 54,
            "return": [
                "int",
                "str",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__bool__": {
            "name": "__bool__",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.as_umbral_pubkey": {
            "name": "as_umbral_pubkey",
            "location": 60,
            "return": [
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.fingerprint": {
            "name": "fingerprint",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrangerStamp.__call__": {
            "name": "__call__",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/crypto/splitters.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/crypto/utils.py": {
        "fingerprint_from_key": {
            "name": "fingerprint_from_key",
            "location": 27,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "public_key": [
                    "str"
                ]
            }
        },
        "canonical_address_from_umbral_key": {
            "name": "canonical_address_from_umbral_key",
            "location": 35,
            "return": [
                "str",
                "list[str]",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "public_key": [
                    "int",
                    "bytes",
                    "eth_keys.datatypes.PrivateKey"
                ]
            }
        },
        "recover_pubkey_from_signature": {
            "name": "recover_pubkey_from_signature",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "prehashed_message": [
                    "Optional[Any]",
                    "typing.Any",
                    "Callable[[str], int]",
                    "bytes",
                    "None",
                    "int",
                    "List[int]",
                    "typing.Callable[str, int]",
                    "list[int]"
                ],
                "signature": [
                    "List[bytes]",
                    "int",
                    "bytes",
                    "bool",
                    "Set[str]"
                ],
                "v_value_to_try": [
                    "int",
                    "float",
                    "Optional[str]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/crypto/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/keystore/keypairs.py": {
        "Keypair.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "bytes",
                    "None",
                    "str",
                    "keys.NamespaceKeys"
                ],
                "public_key": [
                    "bytes",
                    "None",
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "keys.MailboxKeys",
                    "keys.NamespaceKeys"
                ],
                "generate_keys_if_needed": [
                    "bool",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "Keypair.serialize_pubkey": {
            "name": "serialize_pubkey",
            "location": 68,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "as_b64": [
                    "bool",
                    "list",
                    "bytes",
                    "Tuple[int, int, bytearray]",
                    "int"
                ]
            }
        },
        "Keypair.fingerprint": {
            "name": "fingerprint",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecryptingKeypair.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecryptingKeypair.decrypt": {
            "name": "decrypt",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message_kit": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SigningKeypair.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SigningKeypair.sign": {
            "name": "sign",
            "location": 118,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodSupervisionType]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "typing.Callable[bytes, bytes]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "SigningKeypair.get_signature_stamp": {
            "name": "get_signature_stamp",
            "location": 129,
            "return": [
                "str",
                "StrangerStamp",
                "dict",
                "SignatureStamp"
            ],
            "arguments": {
                "self": []
            }
        },
        "HostingKeypair.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "bytes",
                    "str",
                    "Union[bytes, str]",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]"
                ],
                "checksum_public_address": [
                    "None",
                    "bytes",
                    "Union[bytes, str]",
                    "str",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]"
                ],
                "private_key": [
                    "bytes",
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "keys.CleanupKeys",
                    "keys.NamespaceKeys",
                    "Union[str, int]"
                ],
                "curve": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "Union[bytes, str]",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]"
                ],
                "certificate": [
                    "str",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]",
                    "Union[bytes, str]",
                    "Callable[[str], str]"
                ],
                "certificate_filepath": [
                    "str",
                    "None",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]",
                    "Union[bytes, str]",
                    "bytes"
                ],
                "generate_certificate": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "HostingKeypair.generate_self_signed_cert": {
            "name": "generate_self_signed_cert",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "common_name": [
                    "str",
                    "int"
                ]
            }
        },
        "HostingKeypair.get_deployer": {
            "name": "get_deployer",
            "location": 198,
            "return": [
                "HendrixDeployTLS",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "rest_app": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "dict[typing.Any, int]",
                    "Dict[Any, int]",
                    "int"
                ],
                "port": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "dict[typing.Any, int]",
                    "Dict[Any, int]",
                    "int"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/keystore/keystore.py": {
        "KeyStore.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqlalchemy_engine": [
                    "str",
                    "None",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "KeyStore.add_key": {
            "name": "add_key",
            "location": 55,
            "return": [
                "Key",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "umbral.keys.UmbralPublicKey",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "is_signing": [
                    "bool",
                    "str",
                    "umbral.keys.UmbralPublicKey",
                    "List[int]"
                ],
                "session": [
                    "str",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Optional[Mapping]",
                    "typing.Mapping",
                    "Optional[core.models.User]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "KeyStore.get_key": {
            "name": "get_key",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "str",
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.session.Session",
                    "models.Queue"
                ],
                "session": [
                    "None",
                    "str",
                    "zerver.models.UserProfile",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "KeyStore.del_key": {
            "name": "del_key",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "sqlalchemy.orm.session.Session",
                    "Dict[str, Any]",
                    "T",
                    "tracim.models.auth.User",
                    "dict"
                ],
                "session": [
                    "None",
                    "grouper.models.user.User",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "KeyStore.add_policy_arrangement": {
            "name": "add_policy_arrangement",
            "location": 101,
            "return": [
                "PolicyArrangement",
                "int",
                "Iterable[str]",
                "List[django.db.models.query.QuerySet]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "expiration": [
                    "bool",
                    "list[typing.Any]",
                    "str",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "core.models.DepositAccount"
                ],
                "id": [
                    "bool",
                    "list[typing.Any]",
                    "str",
                    "Optional[List[Any]]",
                    "None",
                    "int",
                    "core.models.DepositAccount"
                ],
                "kfrag": [
                    "bool",
                    "None",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "int",
                    "core.models.DepositAccount"
                ],
                "alice_pubkey_sig": [
                    "bytes",
                    "None",
                    "bool",
                    "str",
                    "Union[Mapping, str]",
                    "typing.Mapping",
                    "Union[bytes, str, None]"
                ],
                "alice_signature": [
                    "bool",
                    "None",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "int",
                    "core.models.DepositAccount"
                ],
                "session": [
                    "Optional[str]",
                    "None",
                    "Dict[int, dict]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[int, dict[, ]]",
                    "Optional[Dict]",
                    "dict[str, typing.Any]",
                    "sqlalchemy.orm.Session",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "KeyStore.get_policy_arrangement": {
            "name": "get_policy_arrangement",
            "location": 126,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "bytes",
                    "int",
                    "sqlalchemy.orm.Session",
                    "grouper.models.base.session.Session",
                    "transfer.models.ArticleID"
                ],
                "session": [
                    "int",
                    "None",
                    "sqlalchemy.orm.Session",
                    "list[int]",
                    "sqlalchemy.orm.session.Session",
                    "List[int]"
                ]
            }
        },
        "KeyStore.del_policy_arrangement": {
            "name": "del_policy_arrangement",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "bytes",
                    "int",
                    "sqlalchemy.orm.Session",
                    "metrics_backend.utils.ChannelIdentifier",
                    "transfer.models.ChannelID"
                ],
                "session": [
                    "None",
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "KeyStore.attach_kfrag_to_saved_arrangement": {
            "name": "attach_kfrag_to_saved_arrangement",
            "location": 149,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "id_as_hex": [
                    "int",
                    "None",
                    "Optional[int]",
                    "order.transfer.models.OrderNumberSequenceID"
                ],
                "kfrag": [
                    "int",
                    "str",
                    "bool",
                    "rchain.crypto.PrivateKey",
                    "bytes"
                ],
                "session": [
                    "str",
                    "None",
                    "int",
                    "Type[T]",
                    "typing.Type",
                    "Optional[int]"
                ]
            }
        },
        "KeyStore.add_workorder": {
            "name": "add_workorder",
            "location": 163,
            "return": [
                "Workorder",
                "int",
                "Iterable[str]",
                "List[django.db.models.query.QuerySet]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "bob_pubkey_sig": [
                    "int",
                    "T",
                    "bytes",
                    "str",
                    "tuple[typing.Union[list[typing.Any],list[typing.Any]]]",
                    "magic.models.Deck",
                    "dict[, ]",
                    "None",
                    "Tuple[List[Any], List[Any]]",
                    "Optional[dict]",
                    "dict"
                ],
                "bob_signature": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "List[int]",
                    "list[int]",
                    "Optional[int]",
                    "bytes",
                    "Optional[bytes]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "arrangement_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[bool]",
                    "List[int]",
                    "list[int]",
                    "Optional[int]",
                    "bytes",
                    "Optional[bytes]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "session": [
                    "int",
                    "None",
                    "app.models.User"
                ]
            }
        },
        "KeyStore.get_workorders": {
            "name": "get_workorders",
            "location": 176,
            "return": [
                "str",
                "bool",
                "int",
                "dict[str, str]",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "session": [
                    "int",
                    "None",
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "KeyStore.del_workorders": {
            "name": "del_workorders",
            "location": 188,
            "return": [
                "int",
                "Sequence[int]",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "int",
                    "bytes",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "session": [
                    "int",
                    "None",
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/keystore/threading.py": {
        "ThreadedSession.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqlalchemy_engine": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ThreadedSession.__enter__": {
            "name": "__enter__",
            "location": 25,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedSession.__exit__": {
            "name": "__exit__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/keystore/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/keystore/db/models.py": {
        "Key.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "str",
                    "bytes",
                    "int",
                    "List[Callable]",
                    "list[typing.Callable[, ]]",
                    "list",
                    "list[]"
                ],
                "key_data": [
                    "dict",
                    "int",
                    "dict[, ]"
                ],
                "is_signing": [
                    "str",
                    "bytes",
                    "int",
                    "List[Callable]",
                    "list[typing.Callable[, ]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Key.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "typing.Text",
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.from_umbral_key": {
            "name": "from_umbral_key",
            "location": 45,
            "return": [
                "str",
                "dict",
                "Dict[rchain.crypto.PrivateKey, int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "set[str]",
                    "List[str]",
                    "list[str]"
                ],
                "umbral_key": [
                    "bytes",
                    "str",
                    "raiden_contracts.utils.type_aliases.PrivateKey",
                    "List[str]"
                ],
                "is_signing": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "set[str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "PolicyArrangement.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expiration": [
                    "bool",
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "kfrag": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ],
                "alice_pubkey_sig": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ],
                "alice_signature": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "PolicyArrangement.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "typing.Text",
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workorder.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bob_pubkey_sig_id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Set[int]",
                    "set[int]",
                    "List[str]",
                    "list[str]"
                ],
                "bob_signature": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "raiden.utils.Address",
                    "Optional[str]"
                ],
                "arrangement_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Workorder.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "typing.Text",
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/keystore/db/__init__.py": {
        "set_secure_delete_pragma": {
            "name": "set_secure_delete_pragma",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dbapi_connection": [
                    "str",
                    "int"
                ],
                "connection_record": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/network/exceptions.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/network/middleware.py": {
        "NucypherMiddlewareClient.response_cleaner": {
            "name": "response_cleaner",
            "location": 45,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "response": []
            }
        },
        "NucypherMiddlewareClient.parse_node_or_host_and_port": {
            "name": "parse_node_or_host_and_port",
            "location": 48,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "set",
                    "list",
                    "int",
                    "str",
                    "Set[str]"
                ],
                "host": [
                    "str",
                    "Tuple[str]"
                ],
                "port": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "NucypherMiddlewareClient.invoke_method": {
            "name": "invoke_method",
            "location": 62,
            "return": [
                "dict",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "NucypherMiddlewareClient.clean_params": {
            "name": "clean_params",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_kwargs": [
                    "Exception"
                ]
            }
        },
        "NucypherMiddlewareClient.__getattr__": {
            "name": "__getattr__",
            "location": 75,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[str], T]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "NucypherMiddlewareClient.node_selector": {
            "name": "node_selector",
            "location": 114,
            "return": [
                "str",
                "Iterable[Any]",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "RestMiddleware.get_certificate": {
            "name": "get_certificate",
            "location": 123,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "port": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "timeout": [
                    "str",
                    "int"
                ],
                "retry_attempts": [
                    "int",
                    "bool"
                ],
                "retry_rate": [
                    "int",
                    "float"
                ],
                "current_attempt": [
                    "int",
                    "str"
                ]
            }
        },
        "RestMiddleware.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 146,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "arrangement": [
                    "bytes",
                    "int"
                ]
            }
        },
        "RestMiddleware.enact_policy": {
            "name": "enact_policy",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "int"
                ],
                "kfrag_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "payload": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "RestMiddleware.reencrypt": {
            "name": "reencrypt",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "work_order": [
                    "bytes",
                    "Optional[Exception]"
                ]
            }
        },
        "RestMiddleware.revoke_arrangement": {
            "name": "revoke_arrangement",
            "location": 169,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "List[Callable]",
                    "str"
                ],
                "revocation": [
                    "int",
                    "List[Callable]",
                    "str"
                ]
            }
        },
        "RestMiddleware.get_competitive_rate": {
            "name": "get_competitive_rate",
            "location": 178,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestMiddleware.get_treasure_map_from_node": {
            "name": "get_treasure_map_from_node",
            "location": 181,
            "return": [
                "Dict[str, Any]",
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "map_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "RestMiddleware.put_treasure_map_on_node": {
            "name": "put_treasure_map_on_node",
            "location": 187,
            "return": [
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "map_id": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "map_payload": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "RestMiddleware.send_work_order_payload_to_ursula": {
            "name": "send_work_order_payload_to_ursula",
            "location": 194,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "work_order": []
            }
        },
        "RestMiddleware.node_information": {
            "name": "node_information",
            "location": 202,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "int",
                "twisted.python.failure.Failure",
                "str"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[bool]"
                ],
                "port": [
                    "str",
                    "int",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[bool]"
                ],
                "certificate_filepath": [
                    "str",
                    "int",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[bool]"
                ]
            }
        },
        "RestMiddleware.get_nodes_via_rest": {
            "name": "get_nodes_via_rest",
            "location": 209,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "str"
                ],
                "announce_nodes": [
                    "bytes",
                    "str",
                    "Dict[bytes, bytes]",
                    "umbral.keys.UmbralPublicKey"
                ],
                "nodes_i_need": [
                    "str",
                    "int",
                    "List[str]",
                    "Callable[[str], str]",
                    "bool",
                    "list"
                ],
                "fleet_checksum": [
                    "str",
                    "int",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "NucypherMiddlewareClient.__getattr__.method_wrapper": {
            "name": "method_wrapper",
            "location": 81,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "float"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Tuple[str]",
                    "IO",
                    "bool"
                ],
                "node": [
                    "str"
                ],
                "host": [
                    "str",
                    "bool",
                    "Optional[IO[str]]"
                ],
                "port": [
                    "str"
                ],
                "certificate_filepath": [
                    "int",
                    "dict",
                    "Optional[Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/network/nodes.py": {
        "icon_from_checksum": {
            "name": "icon_from_checksum",
            "location": 57,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "checksum": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Callable[[Any], bool]"
                ],
                "nickname_metadata": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "number_of_nodes": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "FleetStateTracker.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.__setitem__": {
            "name": "__setitem__",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "FleetStateTracker.__getitem__": {
            "name": "__getitem__",
            "location": 108,
            "return": [
                "str",
                "int",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FleetStateTracker.__bool__": {
            "name": "__bool__",
            "location": 111,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.__contains__": {
            "name": "__contains__",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "typing.Type",
                    "Iterable[T]",
                    "Type[object]"
                ]
            }
        },
        "FleetStateTracker.__iter__": {
            "name": "__iter__",
            "location": 117,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.__len__": {
            "name": "__len__",
            "location": 120,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.__eq__": {
            "name": "__eq__",
            "location": 123,
            "return": [
                "bool",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "FleetStateTracker.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.checksum": {
            "name": "checksum",
            "location": 134,
            "return": [
                "",
                "int",
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_value": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "FleetStateTracker.nickname": {
            "name": "nickname",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.nickname_metadata": {
            "name": "nickname_metadata",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.icon": {
            "name": "icon",
            "location": 147,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.addresses": {
            "name": "addresses",
            "location": 152,
            "return": [
                "str",
                "Dict[str, str]",
                "Sequence[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.icon_html": {
            "name": "icon_html",
            "location": 155,
            "return": [
                "int",
                "Optional[int]",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.snapshot": {
            "name": "snapshot",
            "location": 160,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.record_fleet_state": {
            "name": "record_fleet_state",
            "location": 165,
            "return": [
                "int",
                "None",
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "additional_nodes_to_track": [
                    "int",
                    "None"
                ]
            }
        },
        "FleetStateTracker.start_tracking_state": {
            "name": "start_tracking_state",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "additional_nodes_to_track": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[AnyStr]",
                    "typing.AnyStr",
                    "Optional[object]",
                    "typing.Callable[..., typing.Any]",
                    "Optional[Callable[..., Any]]",
                    "int",
                    "Optional[int]",
                    "tuple[typing.Type]",
                    "Callable",
                    "Tuple[Type]"
                ]
            }
        },
        "FleetStateTracker.sorted": {
            "name": "sorted",
            "location": 196,
            "return": [
                "list[]",
                "twisted.python.failure.Failure",
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.shuffled": {
            "name": "shuffled",
            "location": 200,
            "return": [
                "list[]",
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.abridged_states_dict": {
            "name": "abridged_states_dict",
            "location": 205,
            "return": [
                "dict[, ]",
                "bool",
                "dict",
                "str",
                "golem_messages.cryptography.ECCx"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.abridged_nodes_dict": {
            "name": "abridged_nodes_dict",
            "location": 212,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.abridged_state_details": {
            "name": "abridged_state_details",
            "location": 220,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "state": [
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "FleetStateTracker.abridged_node_details": {
            "name": "abridged_node_details",
            "location": 229,
            "return": [
                "dict[typing.Text, typing.Union[list[],str]]",
                "int",
                "str"
            ],
            "arguments": {
                "node": [
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Learner.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domains": [
                    "tuple",
                    "bool",
                    "tuple[]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "network_middleware": [
                    "tuple",
                    "bool",
                    "tuple[]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "start_learning_now": [
                    "bool",
                    "int",
                    "float",
                    "List[int]"
                ],
                "learn_on_same_thread": [
                    "bool",
                    "float",
                    "int",
                    "str",
                    "Union[int, Tuple[int, ...]]"
                ],
                "known_nodes": [
                    "tuple",
                    "bool",
                    "None",
                    "tuple[]",
                    "Optional[float]",
                    "float"
                ],
                "seed_nodes": [
                    "tuple",
                    "bool",
                    "None",
                    "tuple[]",
                    "Optional[float]",
                    "float"
                ],
                "node_storage": [
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "Union[int, List[\"Outcome\"]]",
                    "float",
                    "Optional[Tuple[int, int]]",
                    "list[O]",
                    "Union[None, str, int, float]",
                    "tuple[typing.Union[int,int]]",
                    "Union[int, None]",
                    "str"
                ],
                "save_metadata": [
                    "bool",
                    "int",
                    "bytes",
                    "Tuple[str]",
                    "Dict[Tuple[str, str], Tuple[float, float]]"
                ],
                "abort_on_learning_error": [
                    "bool",
                    "str",
                    "bytearray"
                ],
                "lonely": [
                    "bool",
                    "tuple",
                    "Optional[float]"
                ]
            }
        },
        "Learner.known_nodes": {
            "name": "known_nodes",
            "location": 348,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.load_seednodes": {
            "name": "load_seednodes",
            "location": 351,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "read_storages": [
                    "bool",
                    "int"
                ],
                "retry_attempts": [
                    "int",
                    "str",
                    "List[str]",
                    "logging.Logger"
                ]
            }
        },
        "Learner.read_nodes_from_storage": {
            "name": "read_nodes_from_storage",
            "location": 389,
            "return": [
                "builtins.set",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.remember_node": {
            "name": "remember_node",
            "location": 394,
            "return": [
                "bool",
                "str",
                "TypeError"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "TypeError"
                ],
                "force_verification_check": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "record_fleet_state": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Learner.start_learning_loop": {
            "name": "start_learning_loop",
            "location": 450,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "bool",
                    "list",
                    "myaku.datatypes.ArticleTextPosition",
                    "List[int]",
                    "T"
                ]
            }
        },
        "Learner.stop_learning_loop": {
            "name": "stop_learning_loop",
            "location": 483,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable[C]",
                    "dict",
                    "bool"
                ]
            }
        },
        "Learner.handle_learning_errors": {
            "name": "handle_learning_errors",
            "location": 489,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner._crash_gracefully": {
            "name": "_crash_gracefully",
            "location": 499,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "Callable",
                    "bytes",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Learner.select_teacher_nodes": {
            "name": "select_teacher_nodes",
            "location": 509,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.cycle_teacher_node": {
            "name": "cycle_teacher_node",
            "location": 517,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.current_teacher_node": {
            "name": "current_teacher_node",
            "location": 533,
            "return": [
                "str",
                "tuple",
                "Tuple[str, str, str]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "cycle": [
                    "bool",
                    "str"
                ]
            }
        },
        "Learner.learn_about_nodes_now": {
            "name": "learn_about_nodes_now",
            "location": 544,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "str"
                ]
            }
        },
        "Learner.keep_learning_about_nodes": {
            "name": "keep_learning_about_nodes",
            "location": 555,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.learn_about_specific_nodes": {
            "name": "learn_about_specific_nodes",
            "location": 562,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "addresses": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Learner.block_until_number_of_known_nodes_is": {
            "name": "block_until_number_of_known_nodes_is",
            "location": 568,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "number_of_nodes_to_know": [
                    "int",
                    "Optional[List[Any]]",
                    "Optional[bool]",
                    "str"
                ],
                "timeout": [
                    "int",
                    "float",
                    "Optional[float]",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "learn_on_this_thread": [
                    "bool",
                    "list"
                ]
            }
        },
        "Learner.block_until_specific_nodes_are_known": {
            "name": "block_until_specific_nodes_are_known",
            "location": 601,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "addresses": [
                    "bool",
                    "typing.Callable[, ]",
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "Callable",
                    "int"
                ],
                "timeout": [
                    "int",
                    "float",
                    "bool"
                ],
                "allow_missing": [
                    "int",
                    "dict",
                    "List[str]",
                    "Set[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "learn_on_this_thread": [
                    "bool",
                    "Optional[List]",
                    "dict"
                ]
            }
        },
        "Learner._adjust_learning": {
            "name": "_adjust_learning",
            "location": 638,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node_list": [
                    "list[]",
                    "str",
                    "list",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Learner._push_certain_newly_discovered_nodes_here": {
            "name": "_push_certain_newly_discovered_nodes_here",
            "location": 656,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "queue_to_push": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "node_addresses": [
                    "str",
                    "Sequence[str]",
                    "tentaclio.protocols.Reader",
                    "TextIO",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "Iterable[Any]",
                    "Iterable[float]"
                ]
            }
        },
        "Learner.network_bootstrap": {
            "name": "network_bootstrap",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_list": [
                    "list[]",
                    "str",
                    "list",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Learner.get_nodes_by_ids": {
            "name": "get_nodes_by_ids",
            "location": 669,
            "return": [
                "int",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "node_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "Learner.write_node_metadata": {
            "name": "write_node_metadata",
            "location": 681,
            "return": [
                "bool",
                "Optional[int]",
                "Callable",
                "int",
                "str",
                "Literal"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]",
                    "set[str]",
                    "Optional[str]",
                    "str",
                    "bytearray",
                    "Dict[str, Any]",
                    "None",
                    "dict",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "serializer": [
                    "bytes",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Learner.learn_from_teacher_node": {
            "name": "learn_from_teacher_node",
            "location": 684,
            "return": [
                "None",
                "bool",
                "Type",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Iterable[Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "eager": [
                    "bool",
                    "Type",
                    "str",
                    "List[str]",
                    "Signature"
                ]
            }
        },
        "Teacher.__init__": {
            "name": "__init__",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domains": [
                    "int",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "certificate": [
                    "int",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "certificate_filepath": [
                    "int",
                    "List[List[str]]",
                    "list[list[str]]"
                ],
                "interface_signature": [
                    "str",
                    "bool",
                    "Dict[str, dict]",
                    "Dict[str, str]",
                    "Callable[[dict], None]",
                    "Dict[str, List[Any]]"
                ],
                "timestamp": [
                    "int",
                    "List[List[str]]"
                ],
                "identity_evidence": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]"
                ],
                "substantiate_immediately": [
                    "bool",
                    "Callable[[], None]",
                    "int",
                    "str"
                ],
                "passphrase": [
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Teacher.from_tls_hosting_power": {
            "name": "from_tls_hosting_power",
            "location": 872,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "tls_hosting_power": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Teacher.seed_node_metadata": {
            "name": "seed_node_metadata",
            "location": 881,
            "return": [
                "typing.Text",
                "dict",
                "SeednodeMetadata",
                "int",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "as_teacher_uri": [
                    "bool",
                    "int",
                    "List[T]",
                    "List[int]"
                ]
            }
        },
        "Teacher.sorted_nodes": {
            "name": "sorted_nodes",
            "location": 889,
            "return": [
                "list[Teacher]",
                "str",
                "int",
                "Dict[str, Any]",
                "twisted.python.failure.Failure"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher._stamp_has_valid_wallet_signature": {
            "name": "_stamp_has_valid_wallet_signature",
            "location": 917,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher.update_snapshot": {
            "name": "update_snapshot",
            "location": 903,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum": [
                    "bool",
                    "str"
                ],
                "updated": [
                    "int",
                    "typing.Iterable[]",
                    "bool",
                    "Iterable"
                ],
                "number_of_known_nodes": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Callable[[Any], bool]",
                    "None",
                    "typing.Callable[typing.Any, bool]"
                ]
            }
        },
        "Teacher.stamp_is_valid": {
            "name": "stamp_is_valid",
            "location": 927,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher.verify_id": {
            "name": "verify_id",
            "location": 943,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "ursula_id": [
                    "int",
                    "str"
                ],
                "digest_factory": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "Teacher.validate_metadata": {
            "name": "validate_metadata",
            "location": 948,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "accept_federated_only": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Teacher.verify_node": {
            "name": "verify_node",
            "location": 958,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "str",
                    "bool"
                ],
                "certificate_filepath": [
                    "int",
                    "None",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "accept_federated_only": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Sequence"
                ],
                "force": [
                    "bool",
                    "Mapping",
                    "str"
                ]
            }
        },
        "Teacher.substantiate_stamp": {
            "name": "substantiate_stamp",
            "location": 1009,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "Teacher.interface_is_valid": {
            "name": "interface_is_valid",
            "location": 1019,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher._signable_interface_info_message": {
            "name": "_signable_interface_info_message",
            "location": 1032,
            "return": [
                "str",
                "Iterable[Any]",
                "dict[str, int]",
                "int",
                "bool",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher._sign_and_date_interface_info": {
            "name": "_sign_and_date_interface_info",
            "location": 1036,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher._interface_signature": {
            "name": "_interface_signature",
            "location": 1042,
            "return": [
                "bool",
                "Signature",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher.timestamp": {
            "name": "timestamp",
            "location": 1051,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher.timestamp_bytes": {
            "name": "timestamp_bytes",
            "location": 1059,
            "return": [
                "int",
                "eth_keys.datatypes.PublicKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher.nickname_icon": {
            "name": "nickname_icon",
            "location": 1067,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher.nickname_icon_html": {
            "name": "nickname_icon_html",
            "location": 1070,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Teacher.nickname_icon_details": {
            "name": "nickname_icon_details",
            "location": 1084,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/network/protocols.py": {
        "parse_node_uri": {
            "name": "parse_node_uri",
            "location": 30,
            "return": [
                "tuple[typing.Optional[str]]",
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "yacron.config.JobConfig",
                    "bool"
                ]
            }
        },
        "InterfaceInfo.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "InterfaceInfo.from_bytes": {
            "name": "from_bytes",
            "location": 65,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "url_string": [
                    "str",
                    "bytes",
                    "List[int]",
                    "AnyStr"
                ]
            }
        },
        "InterfaceInfo.uri": {
            "name": "uri",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.formal_uri": {
            "name": "formal_uri",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.__bytes__": {
            "name": "__bytes__",
            "location": 79,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.__add__": {
            "name": "__add__",
            "location": 82,
            "return": [
                "bytes",
                "str",
                "bytearray",
                "Union[str, bytes]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bytes",
                    "dict",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "InterfaceInfo.__radd__": {
            "name": "__radd__",
            "location": 85,
            "return": [
                "bytes",
                "bool",
                "models.characters.states.AttributeType",
                "type",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/network/server.py": {
        "make_rest_app": {
            "name": "make_rest_app",
            "location": 84,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "db_filepath": [
                    "int",
                    "str",
                    "bool"
                ],
                "network_middleware": [
                    "int",
                    "str",
                    "bool"
                ],
                "federated_only": [
                    "int",
                    "str",
                    "bool"
                ],
                "treasure_map_tracker": [
                    "int",
                    "str",
                    "bool"
                ],
                "node_tracker": [
                    "int",
                    "str",
                    "bool"
                ],
                "node_bytes_caster": [
                    "int",
                    "str",
                    "bool"
                ],
                "work_order_tracker": [
                    "int",
                    "str",
                    "bool"
                ],
                "node_nickname": [
                    "int",
                    "str",
                    "bool"
                ],
                "node_recorder": [
                    "int",
                    "str",
                    "bool"
                ],
                "stamp": [
                    "int",
                    "str",
                    "bool"
                ],
                "verifier": [
                    "int",
                    "str",
                    "bool"
                ],
                "suspicious_activity_tracker": [
                    "int",
                    "str",
                    "bool"
                ],
                "serving_domains": [
                    "int",
                    "str",
                    "bool"
                ],
                "log": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ProxyRESTServer.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rest_host": [
                    "dict",
                    "Exception",
                    "str"
                ],
                "rest_port": [
                    "dict",
                    "Exception",
                    "str"
                ],
                "hosting_power": [
                    "Callable",
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "rest_app": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "datastore": [
                    "Callable",
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "ProxyRESTServer.rest_url": {
            "name": "rest_url",
            "location": 80,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_rest_app.public_information": {
            "name": "public_information",
            "location": 128,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "make_rest_app.all_known_nodes": {
            "name": "all_known_nodes",
            "location": 139,
            "return": [
                "dict",
                "int",
                "core.models.User",
                "Collection[Any]",
                "Optional[zerver.models.UserProfile]",
                "str",
                "medtagger.database.models.Slice",
                "bool"
            ],
            "arguments": {}
        },
        "make_rest_app.node_metadata_exchange": {
            "name": "node_metadata_exchange",
            "location": 156,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "make_rest_app.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 219,
            "return": [
                "int",
                "twisted.python.failure.Failure",
                "List[str]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "make_rest_app.set_policy": {
            "name": "set_policy",
            "location": 238,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "id_as_hex": [
                    "str",
                    "abilian.services.security.models.Role",
                    "Optional[str]",
                    "django.db.models.QuerySet",
                    "List[int]",
                    "Optional[bool]",
                    "raiden.utils.Secret"
                ]
            }
        },
        "make_rest_app.revoke_arrangement": {
            "name": "revoke_arrangement",
            "location": 273,
            "return": [
                "str",
                "models.User"
            ],
            "arguments": {
                "id_as_hex": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "make_rest_app.reencrypt_via_rest": {
            "name": "reencrypt_via_rest",
            "location": 304,
            "return": [
                "Optional[str]",
                "Iterator['Vertex']"
            ],
            "arguments": {
                "id_as_hex": [
                    "int",
                    "str",
                    "Optional[int]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "make_rest_app.provide_treasure_map": {
            "name": "provide_treasure_map",
            "location": 356,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "treasure_map_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "make_rest_app.receive_treasure_map": {
            "name": "receive_treasure_map",
            "location": 375,
            "return": [
                "List[str]",
                "Optional[str]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "treasure_map_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "make_rest_app.status": {
            "name": "status",
            "location": 405,
            "return": [
                "bool",
                "str",
                "aiocometd.constants.TransportState",
                "dict",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "\"User\""
            ],
            "arguments": {}
        },
        "TLSHostingPower.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "public_certificate": [
                    "int",
                    "str",
                    "float"
                ],
                "public_certificate_filepath": [
                    "int",
                    "float",
                    "pathpy.core.network.Network",
                    "str"
                ]
            }
        },
        "make_rest_app.node_metadata_exchange.learn_about_announced_nodes": {
            "name": "learn_about_announced_nodes",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/network/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/network/nicknames/__init__.py": {
        "nicename": {
            "name": "nicename",
            "location": 37,
            "return": [],
            "arguments": {
                "symbol": []
            }
        },
        "nickname_from_seed": {
            "name": "nickname_from_seed",
            "location": 45,
            "return": [
                "tuple[typing.Union[str,list[]]]"
            ],
            "arguments": {
                "seed": [],
                "number_of_pairs": [
                    "int"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/policy/models.py": {
        "Arrangement.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "bool",
                    "str",
                    "list",
                    "List[int]"
                ],
                "expiration": [
                    "bool",
                    "str",
                    "list",
                    "List[int]"
                ],
                "ursula": [
                    "bool",
                    "str",
                    "list",
                    "List[int]"
                ],
                "arrangement_id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Sequence[str]"
                ],
                "kfrag": [
                    "bool",
                    "str",
                    "list",
                    "List[int]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "alices_signature": [
                    "bool",
                    "str"
                ]
            }
        },
        "Arrangement.__bytes__": {
            "name": "__bytes__",
            "location": 83,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.from_bytes": {
            "name": "from_bytes",
            "location": 87,
            "return": [
                "raiden.utils.signer.Signer",
                "List[Dict[str, Any]]",
                "itsim.network.location.Location",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "arrangement_as_bytes": [
                    "int",
                    "float",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "Arrangement.encrypt_payload_for_ursula": {
            "name": "encrypt_payload_for_ursula",
            "location": 94,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.payload": {
            "name": "payload",
            "location": 99,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.revoke": {
            "name": "revoke",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ],
                "label": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ],
                "bob": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ],
                "kfrags": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ],
                "public_key": [
                    "List[int]",
                    "Tuple[dict, int]",
                    "bool",
                    "Dict[str, Any]",
                    "List[float]",
                    "bytes",
                    "List[str]"
                ],
                "m": [
                    "geometry.Point",
                    "List[List[str]]",
                    "float"
                ],
                "alices_signature": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ]
            }
        },
        "Policy.n": {
            "name": "n",
            "location": 163,
            "return": [
                "float",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.hrac": {
            "name": "hrac",
            "location": 166,
            "return": [
                "str",
                "dict",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.publish_treasure_map": {
            "name": "publish_treasure_map",
            "location": 182,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "bytes",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Policy.publish": {
            "name": "publish",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Policy.__assign_kfrags": {
            "name": "__assign_kfrags",
            "location": 224,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.enact": {
            "name": "enact",
            "location": 245,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "publish": [
                    "bool",
                    "str",
                    "list",
                    "Dict[str, str]",
                    "List[str]",
                    "Iterable[float]"
                ]
            }
        },
        "Policy.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 271,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "str",
                    "int",
                    "Pattern",
                    "Optional[str]"
                ],
                "ursula": [
                    "int",
                    "Callable",
                    "str"
                ],
                "arrangement": [
                    "str",
                    "trezor.utils.Writer",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Policy.make_arrangements": {
            "name": "make_arrangements",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deposit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "expiration": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "ursulas": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Policy._consider_arrangements": {
            "name": "_consider_arrangements",
            "location": 304,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Optional[List[Any]]",
                    "bool",
                    "bytes",
                    "tuple"
                ],
                "candidate_ursulas": [
                    "bool",
                    "Callable",
                    "dict",
                    "int"
                ],
                "value": [
                    "int",
                    "Optional[float]",
                    "List[float]",
                    "List[str]"
                ],
                "expiration": [
                    "int",
                    "Optional[float]",
                    "List[float]",
                    "List[str]"
                ]
            }
        },
        "FederatedPolicy.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ursulas": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FederatedPolicy.make_arrangements": {
            "name": "make_arrangements",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "str",
                    "list",
                    "Callable",
                    "int"
                ],
                "value": [
                    "str",
                    "list",
                    "Callable",
                    "int"
                ],
                "expiration": [
                    "str",
                    "list",
                    "Callable",
                    "int"
                ],
                "handpicked_ursulas": [
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "TreasureMap.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Mapping[str, str]]",
                    "Optional[str]"
                ],
                "destinations": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "message_kit": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "public_signature": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "hrac": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TreasureMap.prepare_for_publication": {
            "name": "prepare_for_publication",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bob_encrypting_key": [
                    "bytes",
                    "str"
                ],
                "bob_verifying_key": [
                    "bytes",
                    "Optional[str]",
                    "str"
                ],
                "alice_stamp": [
                    "bytes",
                    "int",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TreasureMap._set_payload": {
            "name": "_set_payload",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.__bytes__": {
            "name": "__bytes__",
            "location": 443,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap._verifying_key": {
            "name": "_verifying_key",
            "location": 450,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.m": {
            "name": "m",
            "location": 454,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.destinations": {
            "name": "destinations",
            "location": 460,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.nodes_as_bytes": {
            "name": "nodes_as_bytes",
            "location": 465,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.add_arrangement": {
            "name": "add_arrangement",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arrangement": [
                    "bytes"
                ]
            }
        },
        "TreasureMap.public_id": {
            "name": "public_id",
            "location": 479,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.from_bytes": {
            "name": "from_bytes",
            "location": 488,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "T"
                ],
                "bytes_representation": [
                    "str",
                    "umbral.params.UmbralParameters",
                    "int",
                    "rotkehlchen.tests.utils.rotkehlchen.BalancesTestSetup",
                    "Dict[str, Union[str, int, bool]]"
                ],
                "verify": [
                    "int",
                    "Deque[int]"
                ]
            }
        },
        "TreasureMap.public_verify": {
            "name": "public_verify",
            "location": 502,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.orient": {
            "name": "orient",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "compass": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TreasureMap.__eq__": {
            "name": "__eq__",
            "location": 525,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "bool",
                    "eth_keys.datatypes.Signature",
                    "bytearray",
                    "str"
                ]
            }
        },
        "TreasureMap.__iter__": {
            "name": "__iter__",
            "location": 528,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.__len__": {
            "name": "__len__",
            "location": 531,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.__init__": {
            "name": "__init__",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bob": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "arrangement_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "capsules": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "capsule_signatures": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "alice_address": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "alice_address_signature": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "receipt_bytes": [
                    "int",
                    "str",
                    "Optional[Any]"
                ],
                "receipt_signature": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "ursula": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "WorkOrder.__repr__": {
            "name": "__repr__",
            "location": 563,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]",
                "int",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.__eq__": {
            "name": "__eq__",
            "location": 569,
            "return": [
                "int",
                "str",
                "List[dict]",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "raiden.utils.Any",
                    "int"
                ]
            }
        },
        "WorkOrder.__len__": {
            "name": "__len__",
            "location": 573,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.construct_by_bob": {
            "name": "construct_by_bob",
            "location": 577,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[str]",
                    "Optional[Any]",
                    "raiden.utils.ChainID",
                    "Union[int, str]"
                ],
                "arrangement_id": [
                    "int",
                    "Optional[str]",
                    "Optional[Any]",
                    "raiden.utils.ChainID",
                    "Union[int, str]"
                ],
                "capsules": [
                    "uuid.UUID",
                    "Optional[str]",
                    "bytes"
                ],
                "ursula": [
                    "str",
                    "int"
                ],
                "bob": [
                    "bytes",
                    "dict",
                    "int",
                    "Sequence"
                ]
            }
        },
        "WorkOrder.from_rest_payload": {
            "name": "from_rest_payload",
            "location": 601,
            "return": [
                "str",
                "dict",
                "Iterable[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Mapping[str, Any]"
                ],
                "arrangement_id": [
                    "int",
                    "Optional[str]",
                    "raiden.utils.ChainID",
                    "Optional[Any]"
                ],
                "rest_payload": [
                    "uuid.UUID",
                    "int",
                    "str"
                ]
            }
        },
        "WorkOrder.payload": {
            "name": "payload",
            "location": 631,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.complete": {
            "name": "complete",
            "location": 644,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cfrags_and_signatures": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "list"
                ]
            }
        },
        "WorkOrderHistory.__init__": {
            "name": "__init__",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.__contains__": {
            "name": "__contains__",
            "location": 678,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "WorkOrderHistory.__getitem__": {
            "name": "__getitem__",
            "location": 681,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Callable",
                    "list"
                ]
            }
        },
        "WorkOrderHistory.__setitem__": {
            "name": "__setitem__",
            "location": 684,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "WorkOrderHistory.__len__": {
            "name": "__len__",
            "location": 687,
            "return": [
                "bool",
                "int",
                "str",
                "mode.utils.Counter[faustypes.TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.ursulas": {
            "name": "ursulas",
            "location": 691,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.by_capsule": {
            "name": "by_capsule",
            "location": 694,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "capsule": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Revocation.__init__": {
            "name": "__init__",
            "location": 712,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "str",
                    "int",
                    "Tuple[int, str]"
                ],
                "signer": [
                    "str",
                    "int",
                    "Iterable[List[Any]]",
                    "uuid.UUID",
                    "bool"
                ],
                "signature": [
                    "str",
                    "Optional[bool]",
                    "dict",
                    "int",
                    "float"
                ]
            }
        },
        "Revocation.__bytes__": {
            "name": "__bytes__",
            "location": 726,
            "return": [
                "int",
                "dict",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Revocation.__repr__": {
            "name": "__repr__",
            "location": 729,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Revocation.__len__": {
            "name": "__len__",
            "location": 732,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Revocation.__eq__": {
            "name": "__eq__",
            "location": 735,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "bool",
                    "eth_keys.datatypes.Signature",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Revocation.from_bytes": {
            "name": "from_bytes",
            "location": 739,
            "return": [
                "str",
                "Dict[str, str]",
                "tuple",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "backend.src.sheets_commands.sheeColumn",
                    "backend.src.sheets_commands.sheeGrid"
                ],
                "revocation_bytes": [
                    "Callable",
                    "Optional[float]",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Revocation.verify_signature": {
            "name": "verify_signature",
            "location": 743,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "alice_pubkey": [
                    "int"
                ]
            }
        },
        "IndisputableEvidence.__init__": {
            "name": "__init__",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsule": [
                    "raiden.utils.signer.Signer",
                    "Callable[[Any], bool]",
                    "str",
                    "dict"
                ],
                "cfrag": [
                    "int",
                    "bool",
                    "float"
                ],
                "ursula": [
                    "int",
                    "bool",
                    "float"
                ],
                "delegating_pubkey": [
                    "Dict[str, Any]",
                    "str",
                    "float",
                    "Optional[IO[Any]]"
                ],
                "receiving_pubkey": [
                    "Dict[str, Any]",
                    "str",
                    "float",
                    "Optional[IO[Any]]"
                ],
                "verifying_pubkey": [
                    "Dict[str, Any]",
                    "str",
                    "float",
                    "Optional[IO[Any]]"
                ]
            }
        },
        "IndisputableEvidence.get_proof_challenge_scalar": {
            "name": "get_proof_challenge_scalar",
            "location": 781,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndisputableEvidence.precompute_values": {
            "name": "precompute_values",
            "location": 803,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.NotFromBob.__init__": {
            "name": "__init__",
            "location": 538,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IndisputableEvidence.precompute_values.raw_bytes_from_point": {
            "name": "raw_bytes_from_point",
            "location": 827,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "point": [
                    "bool",
                    "str",
                    "Union[bytes, bytearray]",
                    "List[int]",
                    "int",
                    "bytes"
                ],
                "only_y_coord": [
                    "str",
                    "Callable[[], object]",
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/policy/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/utilities/logging.py": {
        "initialize_sentry": {
            "name": "initialize_sentry",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dsn": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_get_or_create_user_log_dir": {
            "name": "_get_or_create_user_log_dir",
            "location": 50,
            "return": [
                "pathlib.Path",
                "Callable"
            ],
            "arguments": {}
        },
        "getJsonFileObserver": {
            "name": "getJsonFileObserver",
            "location": 54,
            "return": [
                "jsonFileLogObserver",
                "str",
                "pathlib.Path",
                "datetime.datetime",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.Text"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "getTextFileObserver": {
            "name": "getTextFileObserver",
            "location": 61,
            "return": [
                "FileLogObserver",
                "str",
                "pathlib.Path",
                "datetime.datetime"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.Text"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "logToSentry": {
            "name": "logToSentry",
            "location": 99,
            "return": [
                "None",
                "Union[tuple, list]",
                "Iterable[Hashable]",
                "str"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "SimpleObserver.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "GlobalConsoleLogger.set_log_level": {
            "name": "set_log_level",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "log_level_name": [
                    "str",
                    "int",
                    "Callable",
                    "ImportError",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GlobalConsoleLogger.start": {
            "name": "start",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "IO[bytes]",
                    "str",
                    "typing.IO",
                    "Exception",
                    "Type[T]",
                    "typing.Type",
                    "Iterator[str]",
                    "typing.Iterator"
                ]
            }
        },
        "GlobalConsoleLogger.start_if_not_started": {
            "name": "start_if_not_started",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/utilities/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/nucypher/utilities/sandbox/blockchain.py": {
        "token_airdrop": {
            "name": "token_airdrop",
            "location": 44,
            "return": [
                "list[]",
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "token_agent": [
                    "int",
                    "List[List[int]]",
                    "float",
                    "list[list[int]]",
                    "List[str]",
                    "list[str]"
                ],
                "amount": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "origin": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "addresses": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "token_airdrop.txs": {
            "name": "txs",
            "location": 47,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "TesterBlockchain.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "test_accounts": [
                    "List[int]",
                    "None",
                    "dict",
                    "list[int]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "poa": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "List[Dict[str, str]]"
                ],
                "airdrop": [
                    "bool",
                    "tuple",
                    "dict"
                ]
            }
        },
        "TesterBlockchain.free_gas_price_strategy": {
            "name": "free_gas_price_strategy",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "w3": [
                    "typing.Iterable[int]",
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ],
                "transaction_params": [
                    "None",
                    "typing.Iterable[int]",
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ]
            }
        },
        "TesterBlockchain.attach_middleware": {
            "name": "attach_middleware",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "w3": [
                    "bool",
                    "typing.Callable[, ]",
                    "int",
                    "Callable"
                ],
                "poa": [
                    "bool",
                    "int",
                    "float"
                ],
                "free_transactions": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "TesterBlockchain.sever_connection": {
            "name": "sever_connection",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float",
                    "Type",
                    "type"
                ]
            }
        },
        "TesterBlockchain.__generate_insecure_unlocked_accounts": {
            "name": "__generate_insecure_unlocked_accounts",
            "location": 112,
            "return": [
                "list[typing.Union[dict[, ],bytes,bool,str]]",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TesterBlockchain.ether_airdrop": {
            "name": "ether_airdrop",
            "location": 131,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float"
                ]
            }
        },
        "TesterBlockchain.time_travel": {
            "name": "time_travel",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "hours": [
                    "int",
                    "typing.Iterable['cirq.Qid']",
                    "bool",
                    "Iterable['cirq.Qid']"
                ],
                "seconds": [
                    "int",
                    "None",
                    "bool",
                    "Iterable['cirq.Qid']",
                    "typing.Iterable['cirq.Qid']"
                ],
                "periods": [
                    "int",
                    "None",
                    "bool",
                    "Iterable['cirq.Qid']",
                    "typing.Iterable['cirq.Qid']"
                ]
            }
        },
        "TesterBlockchain.connect": {
            "name": "connect",
            "location": 178,
            "return": [
                "TesterBlockchain",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TesterBlockchain.bootstrap_network": {
            "name": "bootstrap_network",
            "location": 187,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/utilities/sandbox/constants.py": {
        "select_test_port": {
            "name": "select_test_port",
            "location": 34,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/utilities/sandbox/middleware.py": {
        "_TestMiddlewareClient.response_cleaner": {
            "name": "response_cleaner",
            "location": 32,
            "return": [
                "typing.Mapping",
                "dict",
                "dict[, ]",
                "dict[str, typing.Any]",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "response": [
                    "typing.Mapping",
                    "requests.models.Response",
                    "dict[, ]",
                    "Mapping[str, object]",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_TestMiddlewareClient._get_mock_client_by_ursula": {
            "name": "_get_mock_client_by_ursula",
            "location": 36,
            "return": [
                "str",
                "Optional[str]",
                "Union[Sequence[str], Sequence[int]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_TestMiddlewareClient._get_mock_client_by_url": {
            "name": "_get_mock_client_by_url",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "Union[Sequence[str], Sequence[int]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_TestMiddlewareClient._get_mock_client_by_port": {
            "name": "_get_mock_client_by_port",
            "location": 44,
            "return": [
                "Optional[str]",
                "str",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str"
                ]
            }
        },
        "_TestMiddlewareClient._get_ursula_by_port": {
            "name": "_get_ursula_by_port",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "int",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "_TestMiddlewareClient.parse_node_or_host_and_port": {
            "name": "parse_node_or_host_and_port",
            "location": 58,
            "return": [
                "tuple[typing.Union[list[],set[],dict[str, typing.Union[int,str]]]]",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "host": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "port": [
                    "str",
                    "bytes",
                    "list",
                    "list[]",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "_TestMiddlewareClient.invoke_method": {
            "name": "invoke_method",
            "location": 72,
            "return": [
                "dict",
                "str",
                "bytes",
                "dict[str, str]",
                "Dict[str, Any]",
                "list[str]",
                "bool",
                "typing.Pattern",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "_TestMiddlewareClient.clean_params": {
            "name": "clean_params",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request_kwargs": []
            }
        },
        "MockRestMiddleware.get_certificate": {
            "name": "get_certificate",
            "location": 90,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "bool"
                ],
                "port": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Iterable",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "bool"
                ],
                "retry_attempts": [
                    "int",
                    "bool"
                ],
                "retry_rate": [
                    "int",
                    "bool"
                ],
                "current_attempt": [
                    "int",
                    "bool"
                ]
            }
        },
        "_MiddlewareClientWithConnectionProblems.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MiddlewareClientWithConnectionProblems._get_ursula_by_port": {
            "name": "_get_ursula_by_port",
            "location": 103,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "_MiddlewareClientWithConnectionProblems.get": {
            "name": "get",
            "location": 109,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIsDownMiddleware.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIsDownMiddleware.node_is_down": {
            "name": "node_is_down",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "NodeIsDownMiddleware.node_is_up": {
            "name": "node_is_up",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list",
                    "bytes"
                ]
            }
        },
        "EvilMiddleWare.propagate_shitty_interface_id": {
            "name": "propagate_shitty_interface_id",
            "location": 142,
            "return": [
                "str",
                "bytes",
                "list[str]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "bytes",
                    "str",
                    "IO[bytes]",
                    "typing.IO",
                    "Optional[str]",
                    "None",
                    "Dict[models.characters.states.AttributeType, int]",
                    "dict[models.characters.states.AttributeType, int]"
                ],
                "shitty_interface_id": [
                    "bytes",
                    "str",
                    "IO[bytes]",
                    "typing.IO",
                    "Optional[str]",
                    "None",
                    "Dict[models.characters.states.AttributeType, int]",
                    "dict[models.characters.states.AttributeType, int]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/utilities/sandbox/policy.py": {
        "generate_random_label": {
            "name": "generate_random_label",
            "location": 84,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "bytearray",
                "Union[bytes, bytearray]",
                "int"
            ],
            "arguments": {}
        },
        "MockArrangement.publish": {
            "name": "publish",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockArrangement.revoke": {
            "name": "revoke",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPolicy.make_arrangements": {
            "name": "make_arrangements",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ],
                "deposit": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "expiration": [
                    "list[str]",
                    "maya.MayaDT",
                    "str",
                    "dict[, ]",
                    "List[str]",
                    "dict"
                ],
                "ursulas": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MockPolicyCreation.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPolicyCreation.transact": {
            "name": "transact",
            "location": 73,
            "return": [
                "str",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ],
                "payload": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "MockPolicyCreation.wait_for_receipt": {
            "name": "wait_for_receipt",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type",
                    "bool",
                    "dict[, ]",
                    "str",
                    "dict",
                    "models.User",
                    "models.Course"
                ],
                "tx_hash": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "flask_appbuilder.models.sqla.Model"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/utilities/sandbox/ursula.py": {
        "make_federated_ursulas": {
            "name": "make_federated_ursulas",
            "location": 35,
            "return": [
                "set[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula_config": [
                    "str",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "Mapping[str, str]",
                    "Callable",
                    "cmk.base.config.HostConfig"
                ],
                "quantity": [
                    "int",
                    "float",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "know_each_other": [
                    "bool",
                    "float"
                ]
            }
        },
        "make_decentralized_ursulas": {
            "name": "make_decentralized_ursulas",
            "location": 69,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula_config": [
                    "bool",
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "ether_addresses": [
                    "int",
                    "str"
                ],
                "stake": [
                    "bool",
                    "Optional[bool]"
                ],
                "know_each_other": [
                    "bool",
                    "float"
                ]
            }
        },
        "start_pytest_ursula_services": {
            "name": "start_pytest_ursula_services",
            "location": 117,
            "return": [
                "str",
                "float",
                "list[str]",
                "Tuple[str]",
                "int",
                "dict[str, str]",
                "list['Token']",
                "typing.Pattern"
            ],
            "arguments": {
                "ursula": [
                    "TextIO",
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/nucypher/utilities/sandbox/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/scripts/demos/demo_endpoint_scratchpad.py": {},
    "Coinlist-NuCypher-Hackathon-master/scripts/local_fleet/run_local_ursula_fleet.py": {
        "spin_up_federated_ursulas": {
            "name": "spin_up_federated_ursulas",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "quantity": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "spin_up_federated_ursulas.UrsulaProcessProtocol.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "spin_up_federated_ursulas.UrsulaProcessProtocol.processEnded": {
            "name": "processEnded",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "bool",
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/scripts/local_fleet/run_lonely_ursula.py": {},
    "Coinlist-NuCypher-Hackathon-master/scripts/local_fleet/run_single_ursula.py": {},
    "Coinlist-NuCypher-Hackathon-master/tests/conftest.py": {
        "__very_pretty_and_insecure_scrypt_do_not_use": {
            "name": "__very_pretty_and_insecure_scrypt_do_not_use",
            "location": 42,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parser": [
                    "dict"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "config": [
                    "config.Config",
                    "yacron.config.JobConfig",
                    "logging.Logger",
                    "dict"
                ],
                "items": [
                    "list",
                    "list[]",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "__very_pretty_and_insecure_scrypt_do_not_use.__insecure_derive": {
            "name": "__insecure_derive",
            "location": 58,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/fixtures.py": {
        "tempfile_path": {
            "name": "tempfile_path",
            "location": 56,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "temp_dir_path": {
            "name": "temp_dir_path",
            "location": 64,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "temp_config_root": {
            "name": "temp_config_root",
            "location": 71,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "temp_dir_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable[[str], None]",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "test_keystore": {
            "name": "test_keystore",
            "location": 83,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "certificates_tempdir": {
            "name": "certificates_tempdir",
            "location": 91,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "ursula_federated_test_config": {
            "name": "ursula_federated_test_config",
            "location": 103,
            "return": [
                "",
                "typing.Generator[UrsulaConfiguration]"
            ],
            "arguments": {}
        },
        "ursula_decentralized_test_config": {
            "name": "ursula_decentralized_test_config",
            "location": 119,
            "return": [
                "",
                "typing.Generator[UrsulaConfiguration]"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "bytes",
                    "list[tuple[]]",
                    "List[Tuple]"
                ]
            }
        },
        "alice_federated_test_config": {
            "name": "alice_federated_test_config",
            "location": 136,
            "return": [
                "",
                "typing.Generator[AliceConfiguration]"
            ],
            "arguments": {
                "federated_ursulas": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "str",
                    "float",
                    "Callable[[str], None]"
                ]
            }
        },
        "alice_blockchain_test_config": {
            "name": "alice_blockchain_test_config",
            "location": 150,
            "return": [
                "",
                "typing.Generator[AliceConfiguration]"
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str",
                    "bool",
                    "None",
                    "Union[bool, str]",
                    "Optional[str]"
                ],
                "three_agents": [
                    "str",
                    "int",
                    "float",
                    "dict[str, int]",
                    "datetime.date",
                    "Dict[str, int]"
                ]
            }
        },
        "bob_federated_test_config": {
            "name": "bob_federated_test_config",
            "location": 169,
            "return": [
                "",
                "typing.Generator[BobConfiguration]"
            ],
            "arguments": {}
        },
        "bob_blockchain_test_config": {
            "name": "bob_blockchain_test_config",
            "location": 182,
            "return": [
                "",
                "typing.Generator[BobConfiguration]"
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str",
                    "bool",
                    "typing.Iterable[float]",
                    "Iterable[float]",
                    "raiden.constants.Environment"
                ],
                "three_agents": [
                    "str",
                    "int",
                    "float",
                    "dict[str, int]",
                    "datetime.date",
                    "Dict[str, int]"
                ]
            }
        },
        "idle_federated_policy": {
            "name": "idle_federated_policy",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "federated_alice": [
                    "str",
                    "bool",
                    "models.characters.mods_base.Mod"
                ],
                "federated_bob": [
                    "str",
                    "bool",
                    "models.characters.mods_base.Mod"
                ]
            }
        },
        "enacted_federated_policy": {
            "name": "enacted_federated_policy",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "idle_federated_policy": [],
                "federated_ursulas": [
                    "bytearray"
                ]
            }
        },
        "idle_blockchain_policy": {
            "name": "idle_blockchain_policy",
            "location": 241,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "blockchain_alice": [
                    "dict",
                    "str",
                    "models.characters.mods_base.Mod"
                ],
                "blockchain_bob": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "models.characters.mods_base.Mod"
                ]
            }
        },
        "enacted_blockchain_policy": {
            "name": "enacted_blockchain_policy",
            "location": 256,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "idle_blockchain_policy": [
                    "float",
                    "str",
                    "Iterable[str]"
                ],
                "blockchain_ursulas": [
                    "str",
                    "float",
                    "Iterable[str]"
                ]
            }
        },
        "capsule_side_channel": {
            "name": "capsule_side_channel",
            "location": 272,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str,Enrico]]",
                "bool",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "random_policy_label": {
            "name": "random_policy_label",
            "location": 279,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "federated_alice": {
            "name": "federated_alice",
            "location": 288,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alice_federated_test_config": [
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "blockchain_alice": {
            "name": "blockchain_alice",
            "location": 294,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alice_blockchain_test_config": [
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "federated_bob": {
            "name": "federated_bob",
            "location": 300,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bob_federated_test_config": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "blockchain_bob": {
            "name": "blockchain_bob",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bob_blockchain_test_config": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "federated_ursulas": {
            "name": "federated_ursulas",
            "location": 312,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "None",
                    "bool",
                    "dict[, ]",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "solidity_compiler": {
            "name": "solidity_compiler",
            "location": 324,
            "return": [
                "",
                "typing.Generator[SolidityCompiler]"
            ],
            "arguments": {}
        },
        "testerchain": {
            "name": "testerchain",
            "location": 331,
            "return": [
                "",
                "typing.Generator[TesterBlockchain]"
            ],
            "arguments": {
                "solidity_compiler": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "three_agents": {
            "name": "three_agents",
            "location": 357,
            "return": [
                "tuple[typing.Union[bytes,list[],str,dict[str, str],int,dict[, ],list[int],list[list[int]]]]",
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool"
                ]
            }
        },
        "blockchain_ursulas": {
            "name": "blockchain_ursulas",
            "location": 395,
            "return": [
                "",
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "three_agents": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "None"
                ],
                "ursula_decentralized_test_config": [
                    "bool",
                    "nucypher.cli.config.GroupGeneralConfig",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/run_tests.py": {
        "run": {
            "name": "run",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "NucypherPytestRunner.pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherPytestRunner.pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/__init__.py": {},
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/base/test_dispatcher.py": {
        "test_dispatcher": {
            "name": "test_dispatcher",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/base/test_issuer.py": {
        "token": {
            "name": "token",
            "location": 27,
            "return": [
                "int",
                "str",
                "dict[str, str]",
                "bool",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "bytes",
                    "Tuple[bytes, bytes]",
                    "tuple[typing.Union[bytes,bytes]]",
                    "Match",
                    "typing.Match"
                ]
            }
        },
        "test_issuer": {
            "name": "test_issuer",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "int"
                ],
                "token": [
                    "typing.Callable[, ]",
                    "str",
                    "Callable",
                    "typing.Iterable[]",
                    "web3.contracContract",
                    "Iterable"
                ]
            }
        },
        "test_inflation_rate": {
            "name": "test_inflation_rate",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "int"
                ],
                "token": [
                    "typing.Callable[, ]",
                    "str",
                    "web3.contracContract",
                    "Callable"
                ]
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Tuple[str, dict]"
                ],
                "token": [
                    "str",
                    "web3.Web3",
                    "set[str]",
                    "web3.contracContract",
                    "Set[str]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/base/test_multisig.py": {
        "sign_hash": {
            "name": "sign_hash",
            "location": 24,
            "return": [
                "str",
                "Optional[float]",
                "dict[str, str]",
                "dict[str, dict[str, typing.Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "bool",
                    "None",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "account": [],
                "data_hash": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "to_32byte_hex": {
            "name": "to_32byte_hex",
            "location": 32,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "w3": [
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "value": [
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_execute": {
            "name": "test_execute",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": []
            }
        },
        "execute_transaction": {
            "name": "execute_transaction",
            "location": 225,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int"
                ],
                "multisig": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "accounts": [
                    "str",
                    "Optional[str]"
                ],
                "tx": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_owners_management": {
            "name": "test_owners_management",
            "location": 242,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/base/seeder/test_seeder.py": {
        "test_seeder": {
            "name": "test_seeder",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/integration/test_intercontract_integration.py": {
        "token": {
            "name": "token",
            "location": 74,
            "return": [
                "str",
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "bytes",
                    "Tuple[bytes, bytes]",
                    "tuple[typing.Union[bytes,bytes]]",
                    "Match",
                    "typing.Match"
                ]
            }
        },
        "escrow": {
            "name": "escrow",
            "location": 81,
            "return": [
                "tuple[typing.Union[int,frozenset,str,tuple[typing.Union[typing.Literal,typing.Any,typing.Literal,typing.Any,typing.Literal,typing.Any]]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "token": [
                    "str",
                    "int",
                    "bytes",
                    "Union[List[str], List[Any]]",
                    "list[str]"
                ]
            }
        },
        "policy_manager": {
            "name": "policy_manager",
            "location": 106,
            "return": [
                "tuple[typing.Union[int,str,list[int]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "slice",
                    "Optional[int]",
                    "int"
                ],
                "escrow": [
                    "int",
                    "nucypher.types.Period",
                    "bool"
                ]
            }
        },
        "adjudicator": {
            "name": "adjudicator",
            "location": 129,
            "return": [
                "tuple[typing.Union[int,str,list[tuple[typing.Union[typing.Any,typing.Any]]]]]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "slice",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "escrow": [
                    "float",
                    "abilian.core.models.subjects.Principal"
                ]
            }
        },
        "generate_args_for_slashing": {
            "name": "generate_args_for_slashing",
            "location": 160,
            "return": [
                "tuple[tuple[typing.Union[int,bytes,dict[str, typing.Union[typing.Any,typing.Any,str]],dict[str, dict[str, str]],list[list[typing.Any]],str,dict[str, dict[str, typing.Any]]]]]",
                "str",
                "OrderedDict",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "testerchain": [
                    "bytes",
                    "int",
                    "list[str]",
                    "T",
                    "List[str]"
                ],
                "miner": [
                    "str",
                    "bytes"
                ]
            }
        },
        "user_escrow_proxy": {
            "name": "user_escrow_proxy",
            "location": 231,
            "return": [
                "tuple[typing.Union[str,int,tuple[typing.Union[typing.Any,typing.Any,typing.Any]],dict[str, list[str]],dict[str, str]]]",
                "models.Course",
                "zam_repondeur.models.Dossier",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "testerchain": [
                    "typing.Callable[, ]",
                    "int",
                    "web3.contracContract",
                    "Callable"
                ],
                "token": [
                    "str",
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "escrow": [
                    "int",
                    "str"
                ],
                "policy_manager": [
                    "int",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ]
            }
        },
        "multisig": {
            "name": "multisig",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str",
                "float",
                "models.Question",
                "range"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "web3.Web3"
                ],
                "escrow": [
                    "typing.Iterable[dict[, ]]",
                    "int",
                    "Iterable[dict]",
                    "List[Dict]"
                ],
                "policy_manager": [
                    "bool",
                    "server.models.User"
                ],
                "adjudicator": [
                    "typing.Iterable[dict[, ]]",
                    "int",
                    "Iterable[dict]",
                    "List[Dict]"
                ],
                "user_escrow_proxy": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "typing.Callable[, ]",
                    "Callable",
                    "web3.contracContract"
                ]
            }
        },
        "execute_multisig_transaction": {
            "name": "execute_multisig_transaction",
            "location": 264,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "salon.models.Stylist",
                    "bytes"
                ],
                "multisig": [
                    "dict[str, typing.Any]",
                    "web3.contracContract",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "accounts": [
                    "str",
                    "Optional[str]",
                    "django.db.models.Model"
                ],
                "tx": [
                    "str",
                    "None",
                    "Optional[str]",
                    "django.db.models.Model",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "test_all": {
            "name": "test_all",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "bool"
                ],
                "token": [
                    "bytes",
                    "int",
                    "cryptography.hazmaprimitives.hashes.HashAlgorithm"
                ],
                "escrow": [
                    "web3.contracContract",
                    "models.Payment"
                ],
                "policy_manager": [],
                "adjudicator": [
                    "web3.contracContract"
                ],
                "user_escrow_proxy": [
                    "int",
                    "web3.contracContract"
                ],
                "multisig": [
                    "int",
                    "web3.contracContract"
                ]
            }
        },
        "generate_args_for_slashing.sign_data": {
            "name": "sign_data",
            "location": 161,
            "return": [
                "bytes",
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "int",
                    "bool",
                    "str"
                ],
                "umbral_privkey": [
                    "bytes",
                    "str"
                ]
            }
        },
        "execute_multisig_transaction.to_32byte_hex": {
            "name": "to_32byte_hex",
            "location": 266,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "models.Name",
                "List[str]"
            ],
            "arguments": {
                "w3": [
                    "bytes",
                    "int",
                    "dict",
                    "Tuple[int, int]"
                ],
                "value": [
                    "bytes",
                    "int",
                    "dict",
                    "Tuple[int, int]"
                ]
            }
        },
        "execute_multisig_transaction.sign_hash": {
            "name": "sign_hash",
            "location": 269,
            "return": [
                "Optional[float]",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "testerchain": [
                    "Optional[str]",
                    "bytes",
                    "bool",
                    "dict",
                    "str",
                    "List[str]"
                ],
                "account": [
                    "models.Channel",
                    "salon.models.Stylist",
                    "users.models.JustfixUser"
                ],
                "data_hash": [
                    "str",
                    "dict",
                    "int",
                    "users.models.JustfixUser"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/lib/test_signature_verifier.py": {
        "signature_verifier": {
            "name": "signature_verifier",
            "location": 39,
            "return": [
                "str",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "typing.Match",
                    "bool",
                    "Match",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "test_recover": {
            "name": "test_recover",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "set",
                    "set[]",
                    "tuple",
                    "tuple[]"
                ],
                "signature_verifier": [
                    "Callable[[dict], None]",
                    "typing.Callable[dict[, ], None]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_address": {
            "name": "test_address",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "set",
                    "set[]",
                    "tuple",
                    "tuple[]"
                ],
                "signature_verifier": [
                    "str"
                ]
            }
        },
        "test_hash": {
            "name": "test_hash",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[Tuple[str, ...]]",
                    "tuple[typing.Union[str,...]]",
                    "None"
                ],
                "signature_verifier": [
                    "str",
                    "bool",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        },
        "test_verify": {
            "name": "test_verify",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[Tuple[str, ...]]",
                    "tuple[typing.Union[str,...]]",
                    "None"
                ],
                "signature_verifier": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[str], None]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/lib/test_umbral_deserializer.py": {
        "deserializer": {
            "name": "deserializer",
            "location": 29,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "None"
                ]
            }
        },
        "fragments": {
            "name": "fragments",
            "location": 35,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_capsule": {
            "name": "test_capsule",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "deserializer": [
                    "List[int]",
                    "list[int]",
                    "bool",
                    "Optional[Exception]",
                    "Exception",
                    "None"
                ],
                "fragments": [
                    "str",
                    "float"
                ]
            }
        },
        "test_proof": {
            "name": "test_proof",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "deserializer": [
                    "Union[int, float]",
                    "int",
                    "float"
                ],
                "fragments": [
                    "str",
                    "float"
                ]
            }
        },
        "test_cfrag": {
            "name": "test_cfrag",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "deserializer": [
                    "Union[int, float]",
                    "int",
                    "float"
                ],
                "fragments": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/conftest.py": {
        "token": {
            "name": "token",
            "location": 33,
            "return": [
                "int",
                "str",
                "dict[str, str]",
                "bool",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "bytes",
                    "Tuple[bytes, bytes]",
                    "tuple[typing.Union[bytes,bytes]]",
                    "Match",
                    "typing.Match"
                ]
            }
        },
        "escrow_contract": {
            "name": "escrow_contract",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "token": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "request": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "escrow_contract.make_escrow": {
            "name": "make_escrow",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "max_allowed_locked_tokens": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/test_miners_escrow.py": {
        "test_staking": {
            "name": "test_staking",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "token": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        },
        "test_max_sub_stakes": {
            "name": "test_max_sub_stakes",
            "location": 440,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Tuple[str, dict]"
                ],
                "token": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/test_miners_escrow_operations.py": {
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract"
                ],
                "token": [
                    "str",
                    "web3.contracContract"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/test_mining.py": {
        "test_mining": {
            "name": "test_mining",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "token": [
                    "str",
                    "None",
                    "Optional[str]",
                    "web3.Web3"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        },
        "test_slashing": {
            "name": "test_slashing",
            "location": 305,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "web3.Web3",
                    "str"
                ],
                "token": [
                    "str",
                    "Tuple[str, dict]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "List[str]",
                    "list[str]"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/test_tracking.py": {
        "test_sampling": {
            "name": "test_sampling",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Tuple[str, dict]",
                    "int",
                    "Sequence[str]"
                ],
                "token": [
                    "str",
                    "web3.contracContract",
                    "typing.Callable[, ]",
                    "Callable",
                    "web3.Web3"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        },
        "test_pre_deposit": {
            "name": "test_pre_deposit",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "token": [
                    "str",
                    "web3.contracContract",
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "None"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/mining_adjudicator/conftest.py": {
        "escrow": {
            "name": "escrow",
            "location": 33,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "None"
                ]
            }
        },
        "adjudicator_contract": {
            "name": "adjudicator_contract",
            "location": 39,
            "return": [
                "int",
                "str",
                "Callable",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]"
            ],
            "arguments": {
                "testerchain": [
                    "bytes",
                    "int"
                ],
                "escrow": [
                    "bytes",
                    "float"
                ],
                "request": [
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/mining_adjudicator/test_mining_adjudicator.py": {
        "sign_data": {
            "name": "sign_data",
            "location": 50,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "bool"
                ],
                "umbral_privkey": [
                    "bytes",
                    "str"
                ]
            }
        },
        "make_recoverable_signature": {
            "name": "make_recoverable_signature",
            "location": 66,
            "return": [
                "bytes",
                "bool",
                "Signature",
                "str"
            ],
            "arguments": {
                "data_hash": [
                    "bytes",
                    "int",
                    "List[bytes]",
                    "list[bytes]"
                ],
                "signature": [
                    "int",
                    "bytes",
                    "str"
                ],
                "umbral_pubkey_bytes": [
                    "str",
                    "bytes",
                    "bool",
                    "umbral.keys.UmbralPublicKey",
                    "int"
                ]
            }
        },
        "fragments": {
            "name": "fragments",
            "location": 76,
            "return": [
                "tuple[]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "metadata": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "test_evaluate_cfrag": {
            "name": "test_evaluate_cfrag",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "escrow": [
                    "web3.contracContract",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "adjudicator_contract": [
                    "bool"
                ]
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 392,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/policy_manager/conftest.py": {
        "escrow": {
            "name": "escrow",
            "location": 27,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "None"
                ]
            }
        },
        "policy_manager": {
            "name": "policy_manager",
            "location": 34,
            "return": [
                "int",
                "str",
                "Callable",
                "list[int]"
            ],
            "arguments": {
                "testerchain": [],
                "escrow": [
                    "Callable[[str], bool]",
                    "float",
                    "typing.Callable[str, bool]"
                ],
                "request": [
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/policy_manager/test_policy_manager.py": {
        "test_create_revoke": {
            "name": "test_create_revoke",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [],
                "escrow": [],
                "policy_manager": []
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 340,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/policy_manager/test_policy_manager_operations.py": {
        "test_reward": {
            "name": "test_reward",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [],
                "escrow": [],
                "policy_manager": []
            }
        },
        "test_refund": {
            "name": "test_refund",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "dict"
                ],
                "escrow": [],
                "policy_manager": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/token/test_token.py": {
        "test_create_token": {
            "name": "test_create_token",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": []
            }
        },
        "test_approve_and_call": {
            "name": "test_approve_and_call",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/user_escrow/conftest.py": {
        "token": {
            "name": "token",
            "location": 27,
            "return": [
                "int",
                "str",
                "dict[str, str]",
                "bool",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "bytes",
                    "Tuple[bytes, bytes]",
                    "tuple[typing.Union[bytes,bytes]]",
                    "Match",
                    "typing.Match"
                ]
            }
        },
        "escrow": {
            "name": "escrow",
            "location": 34,
            "return": [
                "int",
                "float",
                "str",
                "Callable",
                "list[int]"
            ],
            "arguments": {
                "testerchain": [],
                "token": []
            }
        },
        "policy_manager": {
            "name": "policy_manager",
            "location": 47,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "None"
                ]
            }
        },
        "proxy": {
            "name": "proxy",
            "location": 53,
            "return": [
                "int",
                "str",
                "Callable",
                "float",
                "dict[, ]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "token": [
                    "str",
                    "float"
                ],
                "escrow": [
                    "str",
                    "float"
                ],
                "policy_manager": [
                    "str",
                    "float"
                ]
            }
        },
        "linker": {
            "name": "linker",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "list[str]",
                "str",
                "list[float]"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "float",
                    "slice"
                ],
                "proxy": [
                    "int",
                    "str"
                ]
            }
        },
        "user_escrow": {
            "name": "user_escrow",
            "location": 68,
            "return": [
                "int",
                "str",
                "dict",
                "list[int]",
                "range",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "web3.contracContract",
                    "int"
                ],
                "token": [
                    "int",
                    "str",
                    "list[dict[str, float]]",
                    "List[Dict[str, float]]",
                    "list[str]",
                    "List[str]",
                    "Union[str, int]"
                ],
                "linker": [
                    "int",
                    "str",
                    "list[dict[str, float]]",
                    "List[Dict[str, float]]",
                    "list[str]",
                    "List[str]",
                    "Union[str, int]"
                ]
            }
        },
        "user_escrow_proxy": {
            "name": "user_escrow_proxy",
            "location": 81,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "testerchain": [
                    "float"
                ],
                "proxy": [
                    "float"
                ],
                "user_escrow": [
                    "float"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/contracts/main/user_escrow/test_user_escrow.py": {
        "test_escrow": {
            "name": "test_escrow",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Callable"
                ],
                "token": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "user_escrow": [
                    "float"
                ]
            }
        },
        "test_miner": {
            "name": "test_miner",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "dict",
                    "bool",
                    "Dict[str, Union[str, Any]]"
                ],
                "token": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "bool",
                    "dict"
                ],
                "escrow": [
                    "web3.contracContract"
                ],
                "user_escrow": [
                    "int"
                ],
                "user_escrow_proxy": [
                    "float",
                    "dict[str, typing.Any]",
                    "web3.contracContract",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_policy": {
            "name": "test_policy",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract"
                ],
                "policy_manager": [
                    "bool",
                    "web3.contracContract"
                ],
                "user_escrow": [
                    "web3.Web3",
                    "web3.contracContract"
                ],
                "user_escrow_proxy": [
                    "typing.Callable[List,bool, None]",
                    "Callable[[List, bool], None]",
                    "web3.Web3"
                ]
            }
        },
        "test_proxy": {
            "name": "test_proxy",
            "location": 339,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "web3.contracContract"
                ],
                "policy_manager": [],
                "user_escrow": []
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 367,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "str"
                ],
                "token": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/actors/test_deployer.py": {
        "test_rapid_deployment": {
            "name": "test_rapid_deployment",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/actors/test_miner.py": {
        "miner": {
            "name": "miner",
            "location": 30,
            "return": [
                "Miner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "three_agents": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_miner_locking_tokens": {
            "name": "test_miner_locking_tokens",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [],
                "three_agents": [],
                "miner": []
            }
        },
        "test_miner_divides_stake": {
            "name": "test_miner_divides_stake",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "miner": [
                    "Dict[int, dict]",
                    "int"
                ]
            }
        },
        "test_miner_collects_staking_reward": {
            "name": "test_miner_collects_staking_reward",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "List[int]",
                    "float",
                    "str"
                ],
                "miner": [],
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/actors/test_policy_author.py": {
        "author": {
            "name": "author",
            "location": 26,
            "return": [
                "PolicyAuthor",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "three_agents": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_create_policy_author": {
            "name": "test_create_policy_author",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str"
                ],
                "three_agents": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/agents/test_miner_escrow_agent.py": {
        "test_deposit_tokens": {
            "name": "test_deposit_tokens",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int"
                ],
                "three_agents": []
            }
        },
        "test_get_miner_population": {
            "name": "test_get_miner_population",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ],
                "blockchain_ursulas": [
                    "float"
                ]
            }
        },
        "test_get_swarm": {
            "name": "test_get_swarm",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ],
                "blockchain_ursulas": [
                    "str"
                ]
            }
        },
        "test_locked_tokens": {
            "name": "test_locked_tokens",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [],
                "blockchain_ursulas": []
            }
        },
        "test_get_all_stakes": {
            "name": "test_get_all_stakes",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "int",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "bool"
                ],
                "blockchain_ursulas": [
                    "str",
                    "Dict[str, float]",
                    "int",
                    "bool"
                ]
            }
        },
        "get_stake_info": {
            "name": "get_stake_info",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "test_sample_miners": {
            "name": "test_sample_miners",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_get_current_period": {
            "name": "test_get_current_period",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "test_confirm_activity": {
            "name": "test_confirm_activity",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_divide_stake": {
            "name": "test_divide_stake",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_collect_staking_reward": {
            "name": "test_collect_staking_reward",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/agents/test_policy_manager_agent.py": {
        "policy_meta": {
            "name": "policy_meta",
            "location": 30,
            "return": [
                "MockPolicyMetadata",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "None",
                    "int",
                    "Optional[str]",
                    "dict[, ]",
                    "dict",
                    "list[]",
                    "list",
                    "bool"
                ],
                "three_agents": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_create_policy": {
            "name": "test_create_policy",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int"
                ],
                "three_agents": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_fetch_policy_arrangements": {
            "name": "test_fetch_policy_arrangements",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_revoke_arrangement": {
            "name": "test_revoke_arrangement",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_revoke_policy": {
            "name": "test_revoke_policy",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_calculate_refund": {
            "name": "test_calculate_refund",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": [
                    "int"
                ]
            }
        },
        "test_collect_refund": {
            "name": "test_collect_refund",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_collect_policy_reward": {
            "name": "test_collect_policy_reward",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "List[int]",
                    "float",
                    "str"
                ],
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/agents/test_token_agent.py": {
        "agent": {
            "name": "agent",
            "location": 26,
            "return": [
                "bytes",
                "bool",
                "list[]",
                "str",
                "dict",
                "Iterable[str]",
                "dict[str, str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_token_properties": {
            "name": "test_token_properties",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "agent": []
            }
        },
        "test_get_balance": {
            "name": "test_get_balance",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "agent": [
                    "int"
                ]
            }
        },
        "test_approve_transfer": {
            "name": "test_approve_transfer",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "agent": []
            }
        },
        "test_transfer": {
            "name": "test_transfer",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "agent": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/agents/test_user_escrow_agent.py": {
        "proxy_deployer": {
            "name": "proxy_deployer",
            "location": 37,
            "return": [
                "nucypher.blockchain.eth.agents.UserEscrowAgent",
                "typing.Generator[UserEscrowProxyDeployer]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[\"PNSqlCursor\"]",
                    "None"
                ]
            }
        },
        "agent": {
            "name": "agent",
            "location": 51,
            "return": [
                "nucypher.blockchain.eth.agents.UserEscrowAgent",
                "typing.Generator[bool]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "proxy_deployer": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_user_escrow_agent_represents_beneficiary": {
            "name": "test_user_escrow_agent_represents_beneficiary",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "agent": [],
                "three_agents": [
                    "str"
                ]
            }
        },
        "test_read_beneficiary": {
            "name": "test_read_beneficiary",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [],
                "agent": [
                    "str",
                    "float"
                ]
            }
        },
        "test_read_allocation": {
            "name": "test_read_allocation",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "agent": [],
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_read_timestamp": {
            "name": "test_read_timestamp",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "agent": [
                    "Callable[[str], None]",
                    "typing.Callable[str, None]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_deposit_and_withdraw_as_miner": {
            "name": "test_deposit_and_withdraw_as_miner",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "float",
                    "Callable[[str], None]",
                    "List[int]"
                ],
                "agent": [],
                "three_agents": []
            }
        },
        "test_collect_policy_reward": {
            "name": "test_collect_policy_reward",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [],
                "agent": [
                    "blockchain.Blockchain"
                ],
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_withdraw_tokens": {
            "name": "test_withdraw_tokens",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [],
                "agent": [
                    "int",
                    "Awaitable[None]",
                    "collections.abc.Awaitable[None]"
                ],
                "three_agents": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/deployers/test_deploy_preallocations.py": {
        "user_escrow_proxy": {
            "name": "user_escrow_proxy",
            "location": 28,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "three_agents": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_deploy_and_allocate": {
            "name": "test_deploy_and_allocate",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "slice"
                ],
                "user_escrow_proxy": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/deployers/test_economics.py": {
        "test_economics": {
            "name": "test_economics",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/deployers/test_interdeployer_integration.py": {
        "test_deploy_ethereum_contracts": {
            "name": "test_deploy_ethereum_contracts",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/deployers/test_miner_escrow_deployer.py": {
        "test_token_deployer_and_agent": {
            "name": "test_token_deployer_and_agent",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/deployers/test_policy_manager_deployer.py": {
        "test_policy_manager_deployer": {
            "name": "test_policy_manager_deployer",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/deployers/test_token_deployer.py": {
        "test_token_deployer_and_agent": {
            "name": "test_token_deployer_and_agent",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/entities/deployers/test_user_escrow_deployer.py": {
        "user_escrow_proxy": {
            "name": "user_escrow_proxy",
            "location": 23,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "three_agents": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_user_escrow_deployer": {
            "name": "test_user_escrow_deployer",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "three_agents": [],
                "testerchain": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_deploy_multiple": {
            "name": "test_deploy_multiple",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/interfaces/test_chains.py": {
        "test_testerchain_creation": {
            "name": "test_testerchain_creation",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/interfaces/test_registry.py": {
        "test_contract_registry": {
            "name": "test_contract_registry",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tempfile_path": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "typing.Callable[typing.Any, None]",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/interfaces/test_solidity_compiler.py": {
        "test_nucypher_contract_compiled": {
            "name": "test_nucypher_contract_compiled",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/blockchain/eth/interfaces/test_token_and_stake.py": {
        "test_NU": {
            "name": "test_NU",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_stake": {
            "name": "test_stake",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_stake_integration": {
            "name": "test_stake_integration",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "bool"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/characters/conftest.py": {
        "alice_control_test_client": {
            "name": "alice_control_test_client",
            "location": 10,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ]
            }
        },
        "bob_control_test_client": {
            "name": "bob_control_test_client",
            "location": 16,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "federated_bob": [
                    "str"
                ]
            }
        },
        "enrico_control_test_client": {
            "name": "enrico_control_test_client",
            "location": 22,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "capsule_side_channel": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "enrico_control_from_alice": {
            "name": "enrico_control_from_alice",
            "location": 30,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "federated_alice": [
                    "Callable",
                    "bytes",
                    "typing.Callable[, ]",
                    "int"
                ],
                "random_policy_label": [
                    "Callable",
                    "bytes",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/characters/test_alice_can_grant_and_revoke.py": {
        "test_mocked_decentralized_grant": {
            "name": "test_mocked_decentralized_grant",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_alice": [
                    "int",
                    "Union[int, float]",
                    "float",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "tuple[int]",
                    "bool"
                ],
                "blockchain_bob": [
                    "int",
                    "Union[int, float]",
                    "float",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "tuple[int]",
                    "bool"
                ],
                "three_agents": [
                    "str"
                ]
            }
        },
        "test_federated_grant": {
            "name": "test_federated_grant",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [
                    "Union[int, float]",
                    "int",
                    "str",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "float",
                    "tuple[int]"
                ],
                "federated_bob": [
                    "Union[int, float]",
                    "int",
                    "str",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "float",
                    "tuple[int]"
                ]
            }
        },
        "test_revocation": {
            "name": "test_revocation",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [
                    "Union[int, float]",
                    "int",
                    "str",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "float",
                    "tuple[int]"
                ],
                "federated_bob": [
                    "Union[int, float]",
                    "int",
                    "str",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "float",
                    "tuple[int]"
                ]
            }
        },
        "test_alices_powers_are_persistent": {
            "name": "test_alices_powers_are_persistent",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ],
                "tmpdir": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/characters/test_bob_handles_frags.py": {
        "test_bob_cannot_follow_the_treasure_map_in_isolation": {
            "name": "test_bob_cannot_follow_the_treasure_map_in_isolation",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "Type",
                    "dict"
                ],
                "federated_bob": []
            }
        },
        "test_bob_already_knows_all_nodes_in_treasure_map": {
            "name": "test_bob_already_knows_all_nodes_in_treasure_map",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str"
                ],
                "federated_ursulas": [],
                "federated_bob": [
                    "str"
                ],
                "federated_alice": [
                    "str"
                ]
            }
        },
        "test_bob_can_follow_treasure_map_even_if_he_only_knows_of_one_node": {
            "name": "test_bob_can_follow_treasure_map_even_if_he_only_knows_of_one_node",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str",
                    "float"
                ],
                "federated_ursulas": [
                    "bool"
                ],
                "certificates_tempdir": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_bob_can_issue_a_work_order_to_a_specific_ursula": {
            "name": "test_bob_can_issue_a_work_order_to_a_specific_ursula",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "Dict[str, Any]",
                    "str"
                ],
                "federated_bob": [],
                "federated_alice": [
                    "List[Dict[str, Any]]"
                ],
                "federated_ursulas": [],
                "capsule_side_channel": [
                    "int",
                    "str"
                ]
            }
        },
        "test_bob_remembers_that_he_has_cfrags_for_a_particular_capsule": {
            "name": "test_bob_remembers_that_he_has_cfrags_for_a_particular_capsule",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "bool"
                ],
                "federated_bob": [
                    "bool"
                ],
                "federated_ursulas": [
                    "List[str]",
                    "bool"
                ],
                "capsule_side_channel": [
                    "bool"
                ]
            }
        },
        "test_bob_gathers_and_combines": {
            "name": "test_bob_gathers_and_combines",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "float",
                    "Union[int, float]",
                    "bool",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "federated_bob": [
                    "float",
                    "bool",
                    "int"
                ],
                "federated_alice": [],
                "capsule_side_channel": []
            }
        },
        "test_federated_bob_retrieves": {
            "name": "test_federated_bob_retrieves",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "int",
                    "str"
                ],
                "federated_alice": [],
                "capsule_side_channel": [
                    "bool"
                ],
                "enacted_federated_policy": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/characters/test_bob_joins_policy_and_retrieves.py": {
        "test_federated_bob_full_retrieve_flow": {
            "name": "test_federated_bob_full_retrieve_flow",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": [],
                "federated_bob": [
                    "bool"
                ],
                "federated_alice": [],
                "capsule_side_channel": [
                    "accounts.models.User"
                ],
                "enacted_federated_policy": []
            }
        },
        "test_bob_joins_policy_and_retrieves": {
            "name": "test_bob_joins_policy_and_retrieves",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [
                    "bool",
                    "float",
                    "Union[int, float]",
                    "tuple[int]",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "federated_ursulas": [],
                "certificates_tempdir": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_treasure_map_serialization": {
            "name": "test_treasure_map_serialization",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str",
                    "float"
                ],
                "federated_bob": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/characters/test_character_control.py": {
        "test_alice_character_control_create_policy": {
            "name": "test_alice_character_control_create_policy",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "alice_control_test_client": [
                    "dict"
                ],
                "federated_bob": []
            }
        },
        "test_alice_character_control_derive_policy_encrypting_key": {
            "name": "test_alice_character_control_derive_policy_encrypting_key",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "alice_control_test_client": []
            }
        },
        "test_alice_character_control_grant": {
            "name": "test_alice_character_control_grant",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "alice_control_test_client": [
                    "dict"
                ],
                "federated_bob": []
            }
        },
        "test_alice_character_control_revoke": {
            "name": "test_alice_character_control_revoke",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "alice_control_test_client": [],
                "federated_bob": []
            }
        },
        "test_bob_character_control_join_policy": {
            "name": "test_bob_character_control_join_policy",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "bob_control_test_client": [
                    "core.models.Recipe"
                ],
                "enacted_federated_policy": []
            }
        },
        "test_bob_character_control_retrieve": {
            "name": "test_bob_character_control_retrieve",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "bob_control_test_client": [],
                "enacted_federated_policy": [
                    "Optional[bytes]",
                    "server.models.Bike"
                ],
                "capsule_side_channel": [
                    "int",
                    "accounts.models.User"
                ]
            }
        },
        "test_enrico_character_control_encrypt_message": {
            "name": "test_enrico_character_control_encrypt_message",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "enrico_control_test_client": [
                    "dict"
                ]
            }
        },
        "test_character_control_lifecycle": {
            "name": "test_character_control_lifecycle",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "alice_control_test_client": [],
                "bob_control_test_client": [
                    "server.models.User"
                ],
                "enrico_control_from_alice": [
                    "bool"
                ],
                "federated_alice": [
                    "Callable[[], int]",
                    "bool"
                ],
                "federated_bob": [
                    "str",
                    "slice"
                ],
                "federated_ursulas": [
                    "bool",
                    "int"
                ],
                "random_policy_label": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/characters/test_character_serialization.py": {
        "test_serialize_ursula": {
            "name": "test_serialize_ursula",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/characters/test_crypto_characters_and_their_powers.py": {
        "test_actor_without_signing_power_cannot_sign": {
            "name": "test_actor_without_signing_power_cannot_sign",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_actor_with_signing_power_can_sign": {
            "name": "test_actor_with_signing_power_can_sign",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_anybody_can_verify": {
            "name": "test_anybody_can_verify",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_character_blockchain_power": {
            "name": "test_character_blockchain_power",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_anybody_can_encrypt": {
            "name": "test_anybody_can_encrypt",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_node_deployer": {
            "name": "test_node_deployer",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": []
            }
        },
        "test_sign_cleartext_and_encrypt": {
            "name": "test_sign_cleartext_and_encrypt",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_encrypt_and_sign_the_ciphertext": {
            "name": "test_encrypt_and_sign_the_ciphertext",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_encrypt_and_sign_including_signature_in_both_places": {
            "name": "test_encrypt_and_sign_including_signature_in_both_places",
            "location": 205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_encrypt_but_do_not_sign": {
            "name": "test_encrypt_but_do_not_sign",
            "location": 219,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_alice_can_decrypt": {
            "name": "test_alice_can_decrypt",
            "location": 241,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/characters/test_ursula_prepares_to_act_as_mining_node.py": {
        "test_federated_ursula_substantiates_stamp": {
            "name": "test_federated_ursula_substantiates_stamp",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_new_federated_ursula_announces_herself": {
            "name": "test_new_federated_ursula_announces_herself",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ursula_federated_test_config": []
            }
        },
        "test_blockchain_ursula_substantiates_stamp": {
            "name": "test_blockchain_ursula_substantiates_stamp",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_blockchain_ursula_verifies_stamp": {
            "name": "test_blockchain_ursula_verifies_stamp",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_vladimir_cannot_verify_interface_with_ursulas_signing_key": {
            "name": "test_vladimir_cannot_verify_interface_with_ursulas_signing_key",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_vladimir_uses_his_own_signing_key": {
            "name": "test_vladimir_uses_his_own_signing_key",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_alice": [
                    "bool"
                ],
                "blockchain_ursulas": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/conftest.py": {
        "click_runner": {
            "name": "click_runner",
            "location": 41,
            "return": [
                "",
                "typing.Generator[CliRunner]"
            ],
            "arguments": {}
        },
        "nominal_federated_configuration_fields": {
            "name": "nominal_federated_configuration_fields",
            "location": 47,
            "return": [
                "",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {}
        },
        "mock_allocation_infile": {
            "name": "mock_allocation_infile",
            "location": 56,
            "return": [
                "",
                "typing.Generator[AllocationRegistry]"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "float"
                ]
            }
        },
        "mock_primary_registry_filepath": {
            "name": "mock_primary_registry_filepath",
            "location": 67,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "custom_filepath": {
            "name": "custom_filepath",
            "location": 74,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "custom_filepath_2": {
            "name": "custom_filepath_2",
            "location": 141,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "deployed_blockchain": {
            "name": "deployed_blockchain",
            "location": 98,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[TesterBlockchain,InMemoryEthereumContractRegistry]]]"
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/test_alice.py": {
        "test_initialize_alice_defaults": {
            "name": "test_initialize_alice_defaults",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [],
                "mocker": []
            }
        },
        "test_alice_control_starts_mocked": {
            "name": "test_alice_control_starts_mocked",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "int"
                ],
                "mocker": []
            }
        },
        "test_initialize_alice_with_custom_configuration_root": {
            "name": "test_initialize_alice_with_custom_configuration_root",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "tbump.config.Config",
                    "jumeaux.domain.config.vo.Config"
                ],
                "click_runner": []
            }
        },
        "test_alice_control_starts_with_preexisting_configuration": {
            "name": "test_alice_control_starts_with_preexisting_configuration",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "int"
                ],
                "custom_filepath": [
                    "str"
                ]
            }
        },
        "test_alice_control_starts_mocked.MockKeyring.unlock": {
            "name": "unlock",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "password": [
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/test_cli_lifecycle.py": {
        "test_cli_lifecycle": {
            "name": "test_cli_lifecycle",
            "location": 70,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "random_policy_label": [
                    "str"
                ],
                "federated_ursulas": [
                    "str"
                ],
                "custom_filepath": [
                    "str"
                ],
                "custom_filepath_2": [
                    "str"
                ]
            }
        },
        "MockSideChannel.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_message_kit": {
            "name": "save_message_kit",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_kit": [
                    "str",
                    "list",
                    "list[]",
                    "float",
                    "tuple",
                    "tuple[]",
                    "Callable[[], None]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "MockSideChannel.fetch_message_kit": {
            "name": "fetch_message_kit",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str",
                "dict[str, str]",
                "list[tuple[typing.Union[str,str,typing.Any]]]",
                "dict[str, typing.Union[dict[, ],typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_policy": {
            "name": "save_policy",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "int",
                    "str"
                ]
            }
        },
        "MockSideChannel.fetch_policy": {
            "name": "fetch_policy",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_alice_pubkey": {
            "name": "save_alice_pubkey",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "None",
                    "Optional[\"PNSqlCursor\"]",
                    "str",
                    "list[]",
                    "Optional[\"PNBuffer\"]",
                    "list"
                ]
            }
        },
        "MockSideChannel.fetch_alice_pubkey": {
            "name": "fetch_alice_pubkey",
            "location": 56,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_bob_public_keys": {
            "name": "save_bob_public_keys",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "public_keys": [
                    "list",
                    "str",
                    "list[]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MockSideChannel.fetch_bob_public_keys": {
            "name": "fetch_bob_public_keys",
            "location": 63,
            "return": [
                "str",
                "list[str]",
                "bytes",
                "bool",
                "dict[str, tuple[typing.Union[typing.Any,typing.Any,typing.Any,int]]]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_cli_lifecycle.enrico_encrypts": {
            "name": "enrico_encrypts",
            "location": 170,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {}
        },
        "test_cli_lifecycle._run_teacher": {
            "name": "_run_teacher",
            "location": 198,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "_encrypt_result": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_cli_lifecycle._grant": {
            "name": "_grant",
            "location": 202,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "teacher_uri": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_cli_lifecycle._bob_retrieves": {
            "name": "_bob_retrieves",
            "location": 232,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_grant_result": [
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/test_deploy.py": {
        "test_nucypher_deploy_cli_help": {
            "name": "test_nucypher_deploy_cli_help",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "custom_filepath": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "click_runner": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_nucypher_deploy_contracts": {
            "name": "test_nucypher_deploy_contracts",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [],
                "click_runner": [],
                "mock_primary_registry_filepath": [
                    "str"
                ]
            }
        },
        "test_nucypher_deploy_allocations": {
            "name": "test_nucypher_deploy_allocations",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "click_runner": [
                    "str"
                ],
                "mock_allocation_infile": [
                    "str",
                    "int"
                ]
            }
        },
        "test_destroy_registry": {
            "name": "test_destroy_registry",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]",
                    "typing.Type"
                ],
                "mock_primary_registry_filepath": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/test_felix.py": {
        "test_run_felix": {
            "name": "test_run_felix",
            "location": 22,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [],
                "federated_ursulas": [],
                "mock_primary_registry_filepath": []
            }
        },
        "test_run_felix.run_felix": {
            "name": "run_felix",
            "location": 70,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {}
        },
        "test_run_felix.request_felix_landing_page": {
            "name": "request_felix_landing_page",
            "location": 83,
            "return": [
                "None",
                "twisted.internedefer.Deferred",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "Iterator[Any]",
                "bytes"
            ],
            "arguments": {
                "_result": [
                    "Callable",
                    "Sequence",
                    "dict"
                ]
            }
        },
        "test_run_felix.time_travel": {
            "name": "time_travel",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_result": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "test_run_felix.confirm_airdrop": {
            "name": "confirm_airdrop",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_results": [
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/test_help.py": {
        "test_nucypher_help_message": {
            "name": "test_nucypher_help_message",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_nucypher_ursula_help_message": {
            "name": "test_nucypher_ursula_help_message",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_nucypher_deploy_help_message": {
            "name": "test_nucypher_deploy_help_message",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/test_moe.py": {
        "test_run_moe": {
            "name": "test_run_moe",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "federated_ursulas": [
                    "bool"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/ursula/test_blockchain_ursula.py": {
        "funded_blockchain": {
            "name": "funded_blockchain",
            "location": 39,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[str,list[tuple[typing.Union[typing.Any,typing.Any]]],str,list[tuple[typing.Union[typing.Any,typing.Any]]]]]]"
            ],
            "arguments": {
                "deployed_blockchain": [
                    "str",
                    "bytes"
                ]
            }
        },
        "staking_participant": {
            "name": "staking_participant",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "funded_blockchain": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "blockchain_ursulas": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        },
        "configuration_file_location": {
            "name": "configuration_file_location",
            "location": 70,
            "return": [
                "str",
                "IO[Any]",
                "dict[, ]"
            ],
            "arguments": {
                "custom_filepath": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "None",
                    "Optional[datetime.datetime]",
                    "bool"
                ]
            }
        },
        "charlie_blockchain_test_config": {
            "name": "charlie_blockchain_test_config",
            "location": 76,
            "return": [
                "",
                "typing.Generator[BobConfiguration]"
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str",
                    "bool",
                    "typing.Iterable[float]",
                    "Iterable[float]",
                    "raiden.constants.Environment"
                ],
                "three_agents": [
                    "str",
                    "int",
                    "float",
                    "dict[str, int]",
                    "datetime.date",
                    "Dict[str, int]"
                ]
            }
        },
        "mock_registry_filepath": {
            "name": "mock_registry_filepath",
            "location": 96,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "deployed_blockchain": [
                    "str"
                ]
            }
        },
        "test_initialize_system_blockchain_configuration": {
            "name": "test_initialize_system_blockchain_configuration",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": [
                    "str"
                ],
                "mock_registry_filepath": [
                    "str"
                ],
                "staking_participant": [
                    "str"
                ]
            }
        },
        "test_init_ursula_stake": {
            "name": "test_init_ursula_stake",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "bool",
                    "cmk.base.config.ConfigCache"
                ],
                "configuration_file_location": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "funded_blockchain": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "list[str]",
                    "Optional[str]",
                    "list[]",
                    "Optional[List[str]]",
                    "Optional[List]"
                ]
            }
        },
        "test_list_ursula_stakes": {
            "name": "test_list_ursula_stakes",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter"
                ],
                "funded_blockchain": [
                    "str"
                ],
                "configuration_file_location": [
                    "str"
                ]
            }
        },
        "test_ursula_divide_stakes": {
            "name": "test_ursula_divide_stakes",
            "location": 184,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "bool",
                    "dict[str, int]",
                    "cmk.base.config.ConfigCache",
                    "speedwagon.config.AbsConfig",
                    "Dict[str, int]"
                ],
                "configuration_file_location": [
                    "bool",
                    "dict[str, str]",
                    "raiden.constants.Environment",
                    "Dict[str, str]"
                ]
            }
        },
        "test_run_blockchain_ursula": {
            "name": "test_run_blockchain_ursula",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "bool",
                    "float",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "configuration_file_location": [
                    "bool",
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "funded_blockchain": [
                    "int",
                    "Iterable[float]",
                    "typing.Iterable[float]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "alice_blockchain_test_config": [
                    "int",
                    "Iterable[float]",
                    "typing.Iterable[float]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "bob_blockchain_test_config": [
                    "int",
                    "Iterable[float]",
                    "typing.Iterable[float]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "charlie_blockchain_test_config": [
                    "int",
                    "Iterable[float]",
                    "typing.Iterable[float]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "random_policy_label": [
                    "int",
                    "Iterable[float]",
                    "typing.Iterable[float]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "blockchain_ursulas": [
                    "int",
                    "Iterable[float]",
                    "typing.Iterable[float]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "staking_participant": [
                    "int",
                    "Iterable[float]",
                    "typing.Iterable[float]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_collect_rewards_integration": {
            "name": "test_collect_rewards_integration",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "bool",
                    "str",
                    "Optional[Callable[..., Any]]",
                    "typing.Callable[..., typing.Any]",
                    "None"
                ],
                "funded_blockchain": [
                    "bool",
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "configuration_file_location": [
                    "Dict[str, str]",
                    "str",
                    "dict[str, str]",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "alice_blockchain_test_config": [
                    "bool",
                    "str",
                    "float",
                    "Optional[List[str]]"
                ],
                "bob_blockchain_test_config": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[str]"
                ],
                "charlie_blockchain_test_config": [
                    "str",
                    "bool"
                ],
                "random_policy_label": [
                    "bool",
                    "str",
                    "int",
                    "None",
                    "list[str]",
                    "Optional[str]",
                    "List[str]"
                ],
                "blockchain_ursulas": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "float"
                ],
                "staking_participant": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/ursula/test_federated_ursula.py": {
        "test_initialize_ursula_defaults": {
            "name": "test_initialize_ursula_defaults",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [],
                "mocker": []
            }
        },
        "test_initialize_custom_configuration_root": {
            "name": "test_initialize_custom_configuration_root",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "custom_filepath": [],
                "click_runner": []
            }
        },
        "test_configuration_file_contents": {
            "name": "test_configuration_file_contents",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "custom_filepath": [
                    "str"
                ],
                "nominal_federated_configuration_fields": []
            }
        },
        "test_password_prompt": {
            "name": "test_password_prompt",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_ursula_view_configuration": {
            "name": "test_ursula_view_configuration",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "click_runner": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "nominal_federated_configuration_fields": [
                    "bool"
                ]
            }
        },
        "test_run_federated_ursula_from_config_file": {
            "name": "test_run_federated_ursula_from_config_file",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "custom_filepath": [
                    "str"
                ],
                "click_runner": [
                    "str"
                ]
            }
        },
        "test_empty_federated_status": {
            "name": "test_empty_federated_status",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": [
                    "str"
                ]
            }
        },
        "test_ursula_destroy_configuration": {
            "name": "test_ursula_destroy_configuration",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "click_runner": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/ursula/test_run_ursula.py": {
        "test_run_lone_federated_default_development_ursula": {
            "name": "test_run_lone_federated_default_development_ursula",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "click_runner": [
                    "solo.config.app.Config"
                ]
            }
        },
        "test_federated_ursula_learns_via_cli": {
            "name": "test_federated_ursula_learns_via_cli",
            "location": 55,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "federated_ursulas": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_federated_ursula_learns_via_cli.run_teacher": {
            "name": "run_teacher",
            "location": 63,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {}
        },
        "test_federated_ursula_learns_via_cli.run_ursula": {
            "name": "run_ursula",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "teacher_uri": [
                    "Awaitable",
                    "Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/cli/ursula/test_ursula_command.py": {
        "capture_output": {
            "name": "capture_output",
            "location": 17,
            "return": [
                "",
                "typing.Generator[tuple[typing.Union[StringIO,StringIO]]]"
            ],
            "arguments": {}
        },
        "ursula": {
            "name": "ursula",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "federated_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "protocol": {
            "name": "protocol",
            "location": 34,
            "return": [
                "UrsulaCommandProtocol",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_ursula_command_protocol_creation": {
            "name": "test_ursula_command_protocol_creation",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ursula": [
                    "str",
                    "float"
                ]
            }
        },
        "test_ursula_command_help": {
            "name": "test_ursula_command_help",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [],
                "ursula": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_ursula_command_status": {
            "name": "test_ursula_command_status",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [],
                "ursula": []
            }
        },
        "test_ursula_command_known_nodes": {
            "name": "test_ursula_command_known_nodes",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "protocol": [],
                "ursula": []
            }
        },
        "test_ursula_command_help.FakeTransport.write": {
            "name": "write",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/config/test_firstula_circumstances.py": {
        "test_proper_seed_node_instantiation": {
            "name": "test_proper_seed_node_instantiation",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ursula_federated_test_config": []
            }
        },
        "test_get_cert_from_running_seed_node": {
            "name": "test_get_cert_from_running_seed_node",
            "location": 43,
            "return": [
                "",
                "typing.Generator[deferToThread]"
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_get_cert_from_running_seed_node.start_lonely_learning_loop": {
            "name": "start_lonely_learning_loop",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/config/test_keyring.py": {
        "test_validate_password": {
            "name": "test_validate_password",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_generate_alice_keyring": {
            "name": "test_generate_alice_keyring",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/config/test_storages.py": {
        "BaseTestNodeStorageBackends.light_ursula": {
            "name": "light_ursula",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseTestNodeStorageBackends._read_and_write_metadata": {
            "name": "_read_and_write_metadata",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "node_storage": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseTestNodeStorageBackends._write_and_delete_metadata": {
            "name": "_write_and_delete_metadata",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [],
                "node_storage": []
            }
        },
        "BaseTestNodeStorageBackends.test_delete_node_in_storage": {
            "name": "test_delete_node_in_storage",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "light_ursula": []
            }
        },
        "BaseTestNodeStorageBackends.test_read_and_write_to_storage": {
            "name": "test_read_and_write_to_storage",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "light_ursula": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/config/test_ursula_config.py": {
        "test_ursula_development_configuration": {
            "name": "test_ursula_development_configuration",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_only": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/crypto/test_api.py": {
        "TestCrypto.test_secure_random": {
            "name": "test_secure_random",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_secure_random_range": {
            "name": "test_secure_random_range",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_keccak_digest": {
            "name": "test_keccak_digest",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/crypto/test_bytestring_types.py": {
        "test_split_two_signatures": {
            "name": "test_split_two_signatures",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_split_signature_from_arbitrary_bytes": {
            "name": "test_split_signature_from_arbitrary_bytes",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_trying_to_extract_too_many_bytes_raises_typeerror": {
            "name": "test_trying_to_extract_too_many_bytes_raises_typeerror",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_message_kit_serialization_via_enrico": {
            "name": "test_message_kit_serialization_via_enrico",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_alice": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/crypto/test_signature.py": {
        "test_signature_can_verify": {
            "name": "test_signature_can_verify",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_signature_rs_serialization": {
            "name": "test_signature_rs_serialization",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_recover_pubkey_from_signature": {
            "name": "test_recover_pubkey_from_signature",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "execution_number": [
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/keystore/test_keypairs.py": {
        "test_gen_keypair_if_needed": {
            "name": "test_gen_keypair_if_needed",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_keypair_with_umbral_keys": {
            "name": "test_keypair_with_umbral_keys",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_keypair_serialization": {
            "name": "test_keypair_serialization",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_keypair_fingerprint": {
            "name": "test_keypair_fingerprint",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_signing": {
            "name": "test_signing",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/keystore/test_keystore.py": {
        "test_key_sqlite_keystore": {
            "name": "test_key_sqlite_keystore",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "test_keystore": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "federated_bob": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[dict]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "test_policy_arrangement_sqlite_keystore": {
            "name": "test_policy_arrangement_sqlite_keystore",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "test_keystore": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_workorder_sqlite_keystore": {
            "name": "test_workorder_sqlite_keystore",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "test_keystore": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/learning/test_domains.py": {
        "test_learner_learns_about_domains_separately": {
            "name": "test_learner_learns_about_domains_separately",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ursula_federated_test_config": [],
                "caplog": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/learning/test_fault_tolerance.py": {
        "test_blockchain_ursula_substantiates_stamp": {
            "name": "test_blockchain_ursula_substantiates_stamp",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_blockchain_ursula_verifies_stamp": {
            "name": "test_blockchain_ursula_verifies_stamp",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_blockchain_ursula_is_not_valid_with_unsigned_identity_evidence": {
            "name": "test_blockchain_ursula_is_not_valid_with_unsigned_identity_evidence",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str",
                    "bool"
                ],
                "caplog": []
            }
        },
        "test_vladimir_cannot_verify_interface_with_ursulas_signing_key": {
            "name": "test_vladimir_cannot_verify_interface_with_ursulas_signing_key",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_vladimir_uses_his_own_signing_key": {
            "name": "test_vladimir_uses_his_own_signing_key",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_alice": [
                    "bool"
                ],
                "blockchain_ursulas": []
            }
        },
        "test_emit_warning_upon_new_version": {
            "name": "test_emit_warning_upon_new_version",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Callable[[], int]",
                    "typing.Callable[[], int]"
                ],
                "caplog": [
                    "Callable[[], int]",
                    "typing.Callable[g, int]"
                ]
            }
        },
        "test_node_posts_future_version": {
            "name": "test_node_posts_future_version",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": [
                    "int"
                ]
            }
        },
        "test_blockchain_ursula_is_not_valid_with_unsigned_identity_evidence.warning_trapper": {
            "name": "warning_trapper",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_emit_warning_upon_new_version.warning_trapper": {
            "name": "warning_trapper",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_node_posts_future_version.warning_trapper": {
            "name": "warning_trapper",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Sequence",
                    "list",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/learning/test_fleet_state.py": {
        "test_learning_from_node_with_no_known_nodes": {
            "name": "test_learning_from_node_with_no_known_nodes",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "float"
                ]
            }
        },
        "test_all_nodes_have_same_fleet_state": {
            "name": "test_all_nodes_have_same_fleet_state",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": []
            }
        },
        "test_teacher_nodes_cycle": {
            "name": "test_teacher_nodes_cycle",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": []
            }
        },
        "test_nodes_with_equal_fleet_state_do_not_send_anew": {
            "name": "test_nodes_with_equal_fleet_state_do_not_send_anew",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": [
                    "str"
                ]
            }
        },
        "test_old_state_is_preserved": {
            "name": "test_old_state_is_preserved",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": [
                    "Iterable[Any]",
                    "List[str]",
                    "bool",
                    "Set[int]"
                ],
                "ursula_federated_test_config": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_state_is_recorded_after_learning": {
            "name": "test_state_is_recorded_after_learning",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_ursulas": [],
                "ursula_federated_test_config": [
                    "Callable",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/metrics/estimate_gas.py": {
        "generate_args_for_slashing": {
            "name": "generate_args_for_slashing",
            "location": 123,
            "return": [
                "tuple[typing.Union[int,bytes,str,list[tuple[typing.Any]],list[list[typing.Any]],dict[str, dict[str, typing.Any]]]]",
                "str",
                "bytearray",
                "Tuple[float, float]",
                "bool",
                "int"
            ],
            "arguments": {
                "testerchain": [
                    "bytes",
                    "int",
                    "list[str]",
                    "T",
                    "List[str]"
                ],
                "miner": [
                    "str",
                    "bytes"
                ],
                "corrupt": [
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "estimate_gas": {
            "name": "estimate_gas",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "analyzer": [
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        },
        "AnalyzeGas.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeGas.__call__": {
            "name": "__call__",
            "location": 85,
            "return": [
                "app.models.Article",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "str",
                    "asgard.models.spec.container.ContainerVolumeSpec"
                ]
            }
        },
        "AnalyzeGas.paint_line": {
            "name": "paint_line",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "gas": [
                    "str"
                ]
            }
        },
        "AnalyzeGas.to_json_file": {
            "name": "to_json_file",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeGas.start_collection": {
            "name": "start_collection",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "generate_args_for_slashing.sign_data": {
            "name": "sign_data",
            "location": 124,
            "return": [
                "bytes",
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "int",
                    "bool",
                    "str"
                ],
                "umbral_privkey": [
                    "bytes",
                    "Union[io.FileIO, io.BufferedReader]",
                    "str"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/network/test_failure_modes.py": {
        "test_bob_does_not_let_a_connection_error_stop_him": {
            "name": "test_bob_does_not_let_a_connection_error_stop_him",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_ursulas": [
                    "str",
                    "int"
                ],
                "federated_bob": [
                    "str"
                ],
                "federated_alice": []
            }
        },
        "test_alice_can_grant_even_when_the_first_nodes_she_tries_are_down": {
            "name": "test_alice_can_grant_even_when_the_first_nodes_she_tries_are_down",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ],
                "federated_bob": [
                    "bool",
                    "Union[int, float]",
                    "str",
                    "float",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "tuple[int]"
                ],
                "federated_ursulas": [
                    "app.models.Game"
                ]
            }
        },
        "test_node_has_changed_cert": {
            "name": "test_node_has_changed_cert",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ],
                "federated_ursulas": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/network/test_network_actors.py": {
        "test_all_blockchain_ursulas_know_about_all_other_ursulas": {
            "name": "test_all_blockchain_ursulas_know_about_all_other_ursulas",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str",
                    "bool"
                ],
                "three_agents": [
                    "Dict[str, float]",
                    "str",
                    "dict[str, float]",
                    "int"
                ]
            }
        },
        "test_blockchain_alice_finds_ursula_via_rest": {
            "name": "test_blockchain_alice_finds_ursula_via_rest",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_alice": [],
                "blockchain_ursulas": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "test_alice_creates_policy_with_correct_hrac": {
            "name": "test_alice_creates_policy_with_correct_hrac",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "idle_federated_policy": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_alice_sets_treasure_map": {
            "name": "test_alice_sets_treasure_map",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_ursulas": [
                    "int"
                ]
            }
        },
        "test_treasure_map_stored_by_ursula_is_the_correct_one_for_bob": {
            "name": "test_treasure_map_stored_by_ursula_is_the_correct_one_for_bob",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ],
                "federated_bob": [
                    "str"
                ],
                "federated_ursulas": [
                    "int"
                ],
                "enacted_federated_policy": [
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_bob_can_retreive_the_treasure_map_and_decrypt_it": {
            "name": "test_bob_can_retreive_the_treasure_map_and_decrypt_it",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_ursulas": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_treasure_map_is_legit": {
            "name": "test_treasure_map_is_legit",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "enacted_federated_policy": []
            }
        },
        "test_vladimir_illegal_interface_key_does_not_propagate": {
            "name": "test_vladimir_illegal_interface_key_does_not_propagate",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_alice_refuses_to_make_arrangement_unless_ursula_is_valid": {
            "name": "test_alice_refuses_to_make_arrangement_unless_ursula_is_valid",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "blockchain_alice": [
                    "Type",
                    "typing.Type"
                ],
                "idle_blockchain_policy": [
                    "Type",
                    "typing.Type"
                ],
                "blockchain_ursulas": []
            }
        },
        "test_alice_does_not_update_with_old_ursula_info": {
            "name": "test_alice_does_not_update_with_old_ursula_info",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "federated_alice": [],
                "federated_ursulas": []
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/network/test_network_upgrade.py": {
        "test_alice_enacts_policies_in_policy_group_via_rest": {
            "name": "test_alice_enacts_policies_in_policy_group_via_rest",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "enacted_federated_policy": []
            }
        },
        "test_federated_nodes_connect_via_tls_and_verify": {
            "name": "test_federated_nodes_connect_via_tls_and_verify",
            "location": 39,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_federated_nodes_connect_via_tls_and_verify.check_node_with_cert": {
            "name": "check_node_with_cert",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Tuple[int, int]",
                    "Dict[str, Any]"
                ],
                "cert_file": [
                    "str",
                    "dict",
                    "List[List[str]]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/network/test_node_storage.py": {
        "test_one_node_stores_a_bunch_of_others": {
            "name": "test_one_node_stores_a_bunch_of_others",
            "location": 27,
            "return": [
                "",
                "typing.Generator[deferToThread]"
            ],
            "arguments": {
                "federated_ursulas": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "ursula_federated_test_config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_one_node_stores_a_bunch_of_others.start_lonely_learning_loop": {
            "name": "start_lonely_learning_loop",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "Coinlist-NuCypher-Hackathon-master/tests/network/test_ursula_status.py": {
        "test_render_lonely_ursula_status_page": {
            "name": "test_render_lonely_ursula_status_page",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_render_ursula_status_page_with_known_nodes": {
            "name": "test_render_ursula_status_page_with_known_nodes",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "federated_ursulas": [
                    "str"
                ]
            }
        }
    }
}
{
    "Color-master/manage.py": {},
    "Color-master/color/common.py": {
        "ajax_required": {
            "name": "ajax_required",
            "location": 5,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "ajax_required.inner": {
            "name": "inner",
            "location": 7,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "Color-master/color/__init__.py": {},
    "Color-master/color/articles/admin.py": {},
    "Color-master/color/articles/apps.py": {},
    "Color-master/color/articles/models.py": {
        "BaseManager.get_all_published_articles": {
            "name": "get_all_published_articles",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.get_all_draft_articles": {
            "name": "get_all_draft_articles",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.get_tags_num": {
            "name": "get_tags_num",
            "location": 24,
            "return": [
                "dict[, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Articles.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Articles.save": {
            "name": "save",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Articles.get_markdown": {
            "name": "get_markdown",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/articles/myform.py": {},
    "Color-master/color/articles/tests.py": {},
    "Color-master/color/articles/urls.py": {},
    "Color-master/color/articles/views.py": {
        "notify_comment": {
            "name": "notify_comment",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ArticleListView.get_queryset": {
            "name": "get_queryset",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArticleListView.get_context_data": {
            "name": "get_context_data",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArticleCreateView.form_valid": {
            "name": "form_valid",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "ArticleCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArticleCreateView.form_invalid": {
            "name": "form_invalid",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "ArticleDetailView.get_queryset": {
            "name": "get_queryset",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DraftListView.get_queryset": {
            "name": "get_queryset",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DraftCreateView.form_valid": {
            "name": "form_valid",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "DraftCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArticleUpdateView.get_object": {
            "name": "get_object",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None"
                ]
            }
        },
        "ArticleUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArticleUpdateView.form_valid": {
            "name": "form_valid",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        }
    },
    "Color-master/color/articles/__init__.py": {},
    "Color-master/color/articles/migrations/0001_initial.py": {},
    "Color-master/color/articles/migrations/0002_auto_20190729_1417.py": {},
    "Color-master/color/articles/migrations/0003_auto_20190729_1742.py": {},
    "Color-master/color/articles/migrations/0004_auto_20190729_2139.py": {},
    "Color-master/color/articles/migrations/0005_auto_20190730_0930.py": {},
    "Color-master/color/articles/migrations/0006_auto_20190731_2053.py": {},
    "Color-master/color/articles/migrations/0007_auto_20190731_2103.py": {},
    "Color-master/color/articles/migrations/0008_auto_20190802_1510.py": {},
    "Color-master/color/articles/migrations/0009_auto_20190805_2118.py": {},
    "Color-master/color/articles/migrations/0010_auto_20190806_0855.py": {},
    "Color-master/color/articles/migrations/__init__.py": {},
    "Color-master/color/articles/tests/test_models.py": {
        "TestArticles.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArticles.test_instance": {
            "name": "test_instance",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArticles.test___str__": {
            "name": "test___str__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/articles/tests/test_views.py": {
        "TestArticleView.create_tep_image": {
            "name": "create_tep_image",
            "location": 13,
            "return": [
                "typing.IO"
            ],
            "arguments": {}
        },
        "TestArticleView.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArticleView.test_article_list_view": {
            "name": "test_article_list_view",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArticleView.test_create_article_view": {
            "name": "test_create_article_view",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArticleView.tearDown": {
            "name": "tearDown",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/articles/tests/__init__.py": {},
    "Color-master/color/chat/admin.py": {},
    "Color-master/color/chat/apps.py": {},
    "Color-master/color/chat/consumer.py": {},
    "Color-master/color/chat/models.py": {
        "ModelManager.get_all_messages": {
            "name": "get_all_messages",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "recipient": []
            }
        },
        "ModelManager.get_latest_message_user": {
            "name": "get_latest_message_user",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ModelManager.get_conversation_userlist": {
            "name": "get_conversation_userlist",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.set_read": {
            "name": "set_read",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/chat/tests.py": {},
    "Color-master/color/chat/urls.py": {},
    "Color-master/color/chat/views.py": {
        "post_messages": {
            "name": "post_messages",
            "location": 47,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "MessageListView.get_context_data": {
            "name": "get_context_data",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingleMessageListView.get_queryset": {
            "name": "get_queryset",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingleMessageListView.get_context_data": {
            "name": "get_context_data",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/chat/__init__.py": {},
    "Color-master/color/chat/migrations/0001_initial.py": {},
    "Color-master/color/chat/migrations/0002_auto_20190805_2118.py": {},
    "Color-master/color/chat/migrations/__init__.py": {},
    "Color-master/color/chat/test/test_models.py": {
        "TestMessage.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test___str__": {
            "name": "test___str__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_get_all_messages": {
            "name": "test_get_all_messages",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_get_latest_message_user": {
            "name": "test_get_latest_message_user",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_get_conversation_userlist": {
            "name": "test_get_conversation_userlist",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/contrib/__init__.py": {},
    "Color-master/color/contrib/sites/__init__.py": {},
    "Color-master/color/contrib/sites/migrations/0001_initial.py": {},
    "Color-master/color/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "Color-master/color/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "Color-master/color/contrib/sites/migrations/__init__.py": {},
    "Color-master/color/news/apps.py": {},
    "Color-master/color/news/models.py": {
        "News.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "News.like_or_cancle": {
            "name": "like_or_cancle",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "News.total_like_num": {
            "name": "total_like_num",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "News.total_comment_num": {
            "name": "total_comment_num",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "News.get_likers": {
            "name": "get_likers",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "News.get_all_relation_comments": {
            "name": "get_all_relation_comments",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "News.save": {
            "name": "save",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/news/tests.py": {},
    "Color-master/color/news/urls.py": {},
    "Color-master/color/news/views.py": {
        "post_news": {
            "name": "post_news",
            "location": 28,
            "return": [
                "HttpResponse",
                "HttpResponseBadRequest"
            ],
            "arguments": {
                "request": []
            }
        },
        "post_like_or_cancle": {
            "name": "post_like_or_cancle",
            "location": 44,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "post_comment": {
            "name": "post_comment",
            "location": 55,
            "return": [
                "JsonResponse",
                "HttpResponseBadRequest"
            ],
            "arguments": {
                "request": []
            }
        },
        "get_relation_comments": {
            "name": "get_relation_comments",
            "location": 71,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "dynamic_update": {
            "name": "dynamic_update",
            "location": 89,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "NewsListView.get_queryset": {
            "name": "get_queryset",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/news/__init__.py": {},
    "Color-master/color/news/migrations/0001_initial.py": {},
    "Color-master/color/news/migrations/0002_auto_20190729_1105.py": {},
    "Color-master/color/news/migrations/0003_auto_20190729_1417.py": {},
    "Color-master/color/news/migrations/0004_auto_20190729_1742.py": {},
    "Color-master/color/news/migrations/0005_auto_20190729_2139.py": {},
    "Color-master/color/news/migrations/0006_auto_20190730_0930.py": {},
    "Color-master/color/news/migrations/0007_auto_20190731_2053.py": {},
    "Color-master/color/news/migrations/0008_auto_20190731_2103.py": {},
    "Color-master/color/news/migrations/0009_auto_20190802_1510.py": {},
    "Color-master/color/news/migrations/0010_auto_20190805_2118.py": {},
    "Color-master/color/news/migrations/0011_auto_20190806_0855.py": {},
    "Color-master/color/news/migrations/__init__.py": {},
    "Color-master/color/news/tests/test_models.py": {
        "TestNews.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNews.test___str__": {
            "name": "test___str__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNews.test_like_or_cancle": {
            "name": "test_like_or_cancle",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNews.test_total_comment_num": {
            "name": "test_total_comment_num",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/news/tests/test_urls.py": {
        "TestUrls.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_list_resolve": {
            "name": "test_list_resolve",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_list_reverse": {
            "name": "test_list_reverse",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_post_news_resolve": {
            "name": "test_post_news_resolve",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_post_news_reverse": {
            "name": "test_post_news_reverse",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_like_resolve": {
            "name": "test_like_resolve",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_like_reverse": {
            "name": "test_like_reverse",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_comments_resolve": {
            "name": "test_comments_resolve",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_comments_reverse": {
            "name": "test_comments_reverse",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_post_comment_resolve": {
            "name": "test_post_comment_resolve",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_post_comment_reverse": {
            "name": "test_post_comment_reverse",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_delete_news_resolve": {
            "name": "test_delete_news_resolve",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_delete_news_reverse": {
            "name": "test_delete_news_reverse",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/news/tests/test_views.py": {
        "TestNewsView.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewsView.test_list": {
            "name": "test_list",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewsView.test_post_news": {
            "name": "test_post_news",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewsView.test_post_like_or_cancle": {
            "name": "test_post_like_or_cancle",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewsView.test_post_comment": {
            "name": "test_post_comment",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewsView.test_get_relation_comments": {
            "name": "test_get_relation_comments",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNewsView.test_delete_news": {
            "name": "test_delete_news",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/news/tests/__init__.py": {},
    "Color-master/color/notification/admin.py": {},
    "Color-master/color/notification/apps.py": {},
    "Color-master/color/notification/consumer.py": {},
    "Color-master/color/notification/models.py": {
        "BaseModelManager.get_notification_list": {
            "name": "get_notification_list",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "BaseModelManager.mark_all_notification_read": {
            "name": "mark_all_notification_read",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "BaseModelManager.get_recent_notification": {
            "name": "get_recent_notification",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "BaseModelManager.get_recent_notification_serializers": {
            "name": "get_recent_notification_serializers",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Notification.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.mark_as_read": {
            "name": "mark_as_read",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/notification/tests.py": {},
    "Color-master/color/notification/urls.py": {},
    "Color-master/color/notification/views.py": {
        "mark_all_notification_read": {
            "name": "mark_all_notification_read",
            "location": 23,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_recent_notification": {
            "name": "get_recent_notification",
            "location": 31,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "make_single_read": {
            "name": "make_single_read",
            "location": 40,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "notification_handler": {
            "name": "notification_handler",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "trigger": [],
                "recipient": [],
                "action": [],
                "action_obj": []
            }
        },
        "NotificationList.get_queryset": {
            "name": "get_queryset",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/notification/__init__.py": {},
    "Color-master/color/notification/migrations/0001_initial.py": {},
    "Color-master/color/notification/migrations/0002_auto_20190806_0855.py": {},
    "Color-master/color/notification/migrations/__init__.py": {},
    "Color-master/color/notification/test/test_models.py": {
        "TestNotification.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotification.test___str__": {
            "name": "test___str__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotification.test_get_notification_list": {
            "name": "test_get_notification_list",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotification.test_mark_all_notification_read": {
            "name": "test_mark_all_notification_read",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/notification/test/test_views.py": {},
    "Color-master/color/qa/admin.py": {},
    "Color-master/color/qa/apps.py": {},
    "Color-master/color/qa/models.py": {
        "ModelManeger.get_has_answer_questions": {
            "name": "get_has_answer_questions",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelManeger.get_null_answer_questions": {
            "name": "get_null_answer_questions",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelManeger.total_tag_num": {
            "name": "total_tag_num",
            "location": 44,
            "return": [
                "dict[, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Question.save": {
            "name": "save",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_markdown": {
            "name": "get_markdown",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Question.get_answer_num": {
            "name": "get_answer_num",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Question.get_all_answers": {
            "name": "get_all_answers",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Question.get_vote_number": {
            "name": "get_vote_number",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Question.get_upvoters": {
            "name": "get_upvoters",
            "location": 99,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_downvoters": {
            "name": "get_downvoters",
            "location": 102,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Answer.__str__": {
            "name": "__str__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Answer.get_markdown": {
            "name": "get_markdown",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Answer.get_vote_number": {
            "name": "get_vote_number",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Answer.accept_answers": {
            "name": "accept_answers",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Answer.get_upvoters": {
            "name": "get_upvoters",
            "location": 141,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Answer.get_downvoters": {
            "name": "get_downvoters",
            "location": 144,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/qa/myform.py": {},
    "Color-master/color/qa/tests.py": {},
    "Color-master/color/qa/urls.py": {},
    "Color-master/color/qa/views.py": {
        "post_question_vote": {
            "name": "post_question_vote",
            "location": 108,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "post_answer_vote": {
            "name": "post_answer_vote",
            "location": 138,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "post_accept_answer": {
            "name": "post_accept_answer",
            "location": 163,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "QAListView.get_context_data": {
            "name": "get_context_data",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QAUnQusestionListView.get_context_data": {
            "name": "get_context_data",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QAUnQusestionListView.get_queryset": {
            "name": "get_queryset",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QAHaveQusestionListView.get_context_data": {
            "name": "get_context_data",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QAHaveQusestionListView.get_queryset": {
            "name": "get_queryset",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QACreateView.form_valid": {
            "name": "form_valid",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "QACreateView.get_success_url": {
            "name": "get_success_url",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QACreateView.form_invalid": {
            "name": "form_invalid",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "QADetailView.get_object": {
            "name": "get_object",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None"
                ]
            }
        },
        "AnswerCreateView.form_valid": {
            "name": "form_valid",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "AnswerCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/qa/__init__.py": {},
    "Color-master/color/qa/migrations/0001_initial.py": {},
    "Color-master/color/qa/migrations/__init__.py": {},
    "Color-master/color/qa/tests/test_models.py": {
        "TestQAmodels.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQAmodels.test___str__": {
            "name": "test___str__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQAmodels.test_get_answer_num": {
            "name": "test_get_answer_num",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQAmodels.test_get_all_answers": {
            "name": "test_get_all_answers",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQAmodels.test_get_vote_number": {
            "name": "test_get_vote_number",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQAmodels.test_accept_answers": {
            "name": "test_accept_answers",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQAmodels.test_get_null_answer_questions": {
            "name": "test_get_null_answer_questions",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQAmodels.test_get_upvoters": {
            "name": "test_get_upvoters",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQAmodels.test_get_downvoters": {
            "name": "test_get_downvoters",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/qa/tests/test_views.py": {
        "BaseQATestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QATest.test_get_context_data": {
            "name": "test_get_context_data",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/qa/tests/__init__.py": {},
    "Color-master/color/search/apps.py": {},
    "Color-master/color/search/search_indexes.py": {
        "NewsIndex.get_model": {
            "name": "get_model",
            "location": 16,
            "return": [
                "list",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsIndex.index_queryset": {
            "name": "index_queryset",
            "location": 19,
            "return": [
                "str",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "ArticleIndex.get_model": {
            "name": "get_model",
            "location": 27,
            "return": [
                "list",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArticleIndex.index_queryset": {
            "name": "index_queryset",
            "location": 30,
            "return": [
                "str",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "QuestionIndex.get_model": {
            "name": "get_model",
            "location": 38,
            "return": [
                "list",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionIndex.index_queryset": {
            "name": "index_queryset",
            "location": 41,
            "return": [
                "str",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "TagIndex.get_model": {
            "name": "get_model",
            "location": 50,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagIndex.index_queryset": {
            "name": "index_queryset",
            "location": 53,
            "return": [
                "str",
                "BaseException",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "UserIndex.get_model": {
            "name": "get_model",
            "location": 61,
            "return": [
                "zam_repondeur.models.Lecture",
                "set",
                "bool",
                "Iterable[str]",
                "zerver.models.UserProfile",
                "Dict[str, Any]",
                "user.transfer.models.User",
                "List[zerver.models.UserProfile]",
                "contests.models.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIndex.index_queryset": {
            "name": "index_queryset",
            "location": 64,
            "return": [
                "str",
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ]
            }
        }
    },
    "Color-master/color/taskapp/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CeleryAppConfig.ready": {
            "name": "ready",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/taskapp/__init__.py": {},
    "Color-master/color/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 10,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ],
                "sociallogin": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "Color-master/color/users/admin.py": {},
    "Color-master/color/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.get_nick_name": {
            "name": "get_nick_name",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/users/urls.py": {},
    "Color-master/color/users/views.py": {
        "UserDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.form_valid": {
            "name": "form_valid",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        }
    },
    "Color-master/color/users/__init__.py": {},
    "Color-master/color/users/migrations/0001_initial.py": {},
    "Color-master/color/users/migrations/0002_auto_20190724_1039.py": {},
    "Color-master/color/users/migrations/0003_auto_20190724_1544.py": {},
    "Color-master/color/users/migrations/0004_auto_20190724_1645.py": {},
    "Color-master/color/users/migrations/0005_auto_20190726_1603.py": {},
    "Color-master/color/users/migrations/0006_auto_20190729_1105.py": {},
    "Color-master/color/users/migrations/0007_auto_20190729_1417.py": {},
    "Color-master/color/users/migrations/0008_auto_20190729_1742.py": {},
    "Color-master/color/users/migrations/0009_auto_20190729_2139.py": {},
    "Color-master/color/users/migrations/0010_auto_20190730_0930.py": {},
    "Color-master/color/users/migrations/0011_auto_20190731_2053.py": {},
    "Color-master/color/users/migrations/0012_auto_20190731_2103.py": {},
    "Color-master/color/users/migrations/0013_auto_20190802_1510.py": {},
    "Color-master/color/users/migrations/0014_auto_20190805_2118.py": {},
    "Color-master/color/users/migrations/0015_auto_20190806_0855.py": {},
    "Color-master/color/users/migrations/__init__.py": {},
    "Color-master/color/users/tests/test_models.py": {
        "TestUser.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test___str__": {
            "name": "test___str__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_get_absolute_url": {
            "name": "test_get_absolute_url",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_get_nick_name": {
            "name": "test_get_nick_name",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/users/tests/test_urls.py": {
        "TestUserUrls.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUrls.test_update_reverse": {
            "name": "test_update_reverse",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUrls.test_update_resolve": {
            "name": "test_update_resolve",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUrls.test_detail_reverse": {
            "name": "test_detail_reverse",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUrls.test_detail_resolve": {
            "name": "test_detail_resolve",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/users/tests/test_views.py": {
        "TestBase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateView.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Color-master/color/users/tests/__init__.py": {},
    "Color-master/config/asgi.py": {},
    "Color-master/config/routing.py": {},
    "Color-master/config/urls.py": {},
    "Color-master/config/wsgi.py": {},
    "Color-master/config/__init__.py": {},
    "Color-master/config/settings/base.py": {},
    "Color-master/config/settings/local.py": {},
    "Color-master/config/settings/production.py": {},
    "Color-master/config/settings/test.py": {},
    "Color-master/config/settings/__init__.py": {}
}
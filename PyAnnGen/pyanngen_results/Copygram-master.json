{
    "Copygram-master/backend-project-cookiecutter/nomadgram/manage.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/config/urls.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/config/wsgi.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/config/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/config/settings/base.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/config/settings/local.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/config/settings/production.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/config/settings/test.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/config/settings/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str,Any]]",
                "bool",
                "List"
            ],
            "arguments": {}
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/views.py": {
        "ReactView.get": {
            "name": "get",
            "location": 8,
            "return": [
                "HttpResponse",
                "int",
                "Dict[str,str]",
                "str",
                "Dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/contrib/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/contrib/sites/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/contrib/sites/migrations/0001_initial.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/contrib/sites/migrations/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/admin.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/apps.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/models.py": {
        "Image.like_count": {
            "name": "like_count",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.comment_count": {
            "name": "comment_count",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Image.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Like.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/serializers.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/tests.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/urls.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/views.py": {
        "Images.get": {
            "name": "get",
            "location": 11,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "Images.post": {
            "name": "post",
            "location": 32,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "ImageDetail.find_own_image": {
            "name": "find_own_image",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_id": [],
                "user": []
            }
        },
        "ImageDetail.get": {
            "name": "get",
            "location": 51,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "ImageDetail.put": {
            "name": "put",
            "location": 60,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "ImageDetail.delete": {
            "name": "delete",
            "location": 73,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "LikeImage.get": {
            "name": "get",
            "location": 83,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "LikeImage.post": {
            "name": "post",
            "location": 91,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "UnLikeImage.delete": {
            "name": "delete",
            "location": 119,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "CommentOnImage.post": {
            "name": "post",
            "location": 139,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "Comment.delete": {
            "name": "delete",
            "location": 163,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 175,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "ModeratedComments.delete": {
            "name": "delete",
            "location": 193,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "image_id": [],
                "comment_id": [],
                "format": [
                    "None"
                ]
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/migrations/0001_initial.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/migrations/0002_auto_20181220_2255.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/migrations/0003_auto_20181223_0147.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/migrations/0004_auto_20181223_0247.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/migrations/0005_auto_20181223_0312.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/migrations/0006_auto_20181223_0349.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/migrations/0007_auto_20181223_0349.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/migrations/0008_image_tags.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/images/migrations/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/admin.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/apps.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/models.py": {
        "Notification.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/serializers.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/tests.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/urls.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/views.py": {
        "create_notification": {
            "name": "create_notification",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "creator": [
                    "str",
                    "float",
                    "zerver.models.Realm",
                    "zerver.models.Message",
                    "core.models.User",
                    "tartare.core.models.Contributor"
                ],
                "to": [
                    "str",
                    "float",
                    "zerver.models.Realm",
                    "zerver.models.Message",
                    "core.models.User",
                    "tartare.core.models.Contributor"
                ],
                "type": [
                    "str",
                    "float",
                    "zerver.models.Realm",
                    "zerver.models.Message",
                    "core.models.User",
                    "tartare.core.models.Contributor"
                ],
                "image": [
                    "None",
                    "str",
                    "zerver.models.Realm",
                    "float",
                    "zerver.models.Message",
                    "core.models.User",
                    "tartare.core.models.Contributor"
                ],
                "comment": [
                    "None",
                    "str",
                    "zerver.models.Realm",
                    "float",
                    "zerver.models.Message",
                    "core.models.User",
                    "tartare.core.models.Contributor"
                ]
            }
        },
        "Notifications.get": {
            "name": "get",
            "location": 8,
            "return": [
                "Response",
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "fromat": [
                    "rest_framework.requesRequest",
                    "Dict[str,str]",
                    "None",
                    "Dict"
                ]
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/migrations/0001_initial.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/migrations/0002_auto_20190108_0056.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/migrations/0003_notification_comment.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/migrations/0004_auto_20190114_0201.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/notifications/migrations/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 17,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ],
                "sociallogin": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/admin.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.post_count": {
            "name": "post_count",
            "location": 34,
            "return": [
                "str",
                "int",
                "Set[Optional[str]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.followers_count": {
            "name": "followers_count",
            "location": 38,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.following_count": {
            "name": "following_count",
            "location": 42,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/serializers.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/urls.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/views.py": {
        "ExploreUsers.get": {
            "name": "get",
            "location": 14,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "FollowUser.post": {
            "name": "post",
            "location": 21,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "user_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "UnFollowUser.post": {
            "name": "post",
            "location": 36,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "user_id": [],
                "format": [
                    "None"
                ]
            }
        },
        "UserProfile.get_user": {
            "name": "get_user",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "UserProfile.get": {
            "name": "get",
            "location": 55,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        },
        "UserProfile.put": {
            "name": "put",
            "location": 65,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        },
        "UserFollowers.get": {
            "name": "get",
            "location": 81,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        },
        "UserFollowing.get": {
            "name": "get",
            "location": 93,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 107,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [
                    "None"
                ]
            }
        },
        "ChangePassword.put": {
            "name": "put",
            "location": 121,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "format": [
                    "None"
                ]
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/migrations/0001_initial.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/migrations/0002_auto_20181220_2057.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/migrations/0003_auto_20181220_2300.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/migrations/0004_user_profile_image.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/migrations/0005_auto_20190107_2211.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/migrations/__init__.py": {},
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ]
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "Copygram-master/backend-project-cookiecutter/nomadgram/nomadgram/users/tests/__init__.py": {}
}
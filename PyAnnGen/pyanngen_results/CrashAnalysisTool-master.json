{
    "CrashAnalysisTool-master/crash_analysis/analysis.py": {
        "stem_frequency": {
            "name": "stem_frequency",
            "location": 41,
            "return": [
                "Tuple[(Any, List[Tuple[(str, int)]], int)]"
            ],
            "arguments": {
                "df": [
                    "float",
                    "int",
                    "pandas.DataFrame",
                    "None",
                    "wkconnecutils.types.Box3D",
                    "starfish.core.types._decoded_spots.DecodedSpots",
                    "Optional[int]"
                ],
                "column": [
                    "Optional[str]"
                ],
                "_map": [
                    "Optional[Callable[([T], Any)]]"
                ],
                "print_output": [
                    "bool"
                ],
                "top": [
                    "int"
                ]
            }
        },
        "count_entries": {
            "name": "count_entries",
            "location": 96,
            "return": [
                "Tuple[(Dict[(Any, nothing)], int)]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict",
                    "Callable"
                ]
            }
        },
        "create_vocab_frame": {
            "name": "create_vocab_frame",
            "location": 120,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "text_df_column": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "associate_by_keyterms": {
            "name": "associate_by_keyterms",
            "location": 139,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int"
                ],
                "text_column": [
                    "str"
                ],
                "field": [
                    "typing.Text",
                    "int",
                    "Optional[int]"
                ],
                "print_output": [
                    "bool",
                    "str",
                    "int"
                ],
                "min_count": [
                    "int",
                    "float"
                ]
            }
        },
        "TextAnalysis.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_or_dataframe": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TextAnalysis.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextAnalysis.__clear_worker": {
            "name": "__clear_worker",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CrashAnalysisTool-master/crash_analysis/dataframe_helper.py": {
        "remove_empty": {
            "name": "remove_empty",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bytes"
                ]
            }
        },
        "fill_empty": {
            "name": "fill_empty",
            "location": 39,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "Tuple[float, float, float]"
                ],
                "val": [
                    "typing.Text",
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "is_df_set": {
            "name": "is_df_set",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "df": [
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "pandas.DataFrame",
                    "mypy.types.Type",
                    "Type",
                    "Dict[str, Any]",
                    "Type[Any]"
                ]
            }
        },
        "get_columns": {
            "name": "get_columns",
            "location": 88,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "pandas.DataFrame",
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "read_csv": {
            "name": "read_csv",
            "location": 106,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "csv_file_path": [
                    "crash_analysis.types.PathStr"
                ]
            }
        },
        "get_column": {
            "name": "get_column",
            "location": 123,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "pandas.DataFrame",
                    "list[str]",
                    "Optional[float]",
                    "List[str]"
                ],
                "col_name": [
                    "str"
                ]
            }
        },
        "filter_dataframe": {
            "name": "filter_dataframe",
            "location": 183,
            "return": [
                "str",
                "list[str]",
                "float",
                "Callable[[None], bool]",
                "pandas.DataFrame",
                "List[str]",
                "int"
            ],
            "arguments": {
                "df": [
                    "list[str]",
                    "float",
                    "Callable[[None], bool]",
                    "pandas.DataFrame",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "CrashAnalysisTool-master/crash_analysis/downloader.py": {
        "download_time_range": {
            "name": "download_time_range",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "datetime.datetime"
                ],
                "end": [
                    "datetime.datetime"
                ],
                "dest": [
                    "Optional[crash_analysis.types.PathStr]"
                ]
            }
        },
        "download_file": {
            "name": "download_file",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "ticket": [
                    "str"
                ],
                "dest": [
                    "Optional[crash_analysis.types.PathStr]"
                ]
            }
        }
    },
    "CrashAnalysisTool-master/crash_analysis/kmeans.py": {
        "vectorize_corpus": {
            "name": "vectorize_corpus",
            "location": 18,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "working_df": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "train_or_load_kmeans": {
            "name": "train_or_load_kmeans",
            "location": 48,
            "return": [
                "KMeans",
                "bool",
                "Dict[str, int]",
                "float",
                "str"
            ],
            "arguments": {
                "tfidf_mx": [
                    "bool",
                    "str",
                    "int",
                    "list[str]",
                    "List[str]"
                ],
                "k": [
                    "int",
                    "str",
                    "list",
                    "List[str]"
                ],
                "recompute": [
                    "bool",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "top_terms_per_cluster": {
            "name": "top_terms_per_cluster",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": [
                    "int",
                    "str"
                ],
                "km": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None",
                    "Optional[Set[str]]",
                    "set[str]"
                ],
                "num_clusters": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "vocab_frame": [
                    "str",
                    "bool",
                    "int"
                ],
                "terms": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "CrashAnalysisTool-master/crash_analysis/lda.py": {
        "lda": {
            "name": "lda",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "preprocessed_df": [
                    "str",
                    "list[str]",
                    "float",
                    "dict[str, int]",
                    "List[str]",
                    "Optional[Dict[str, int]]"
                ],
                "version": [
                    "str",
                    "None",
                    "bool",
                    "Optional[bytes]",
                    "bytes"
                ],
                "product_id": [
                    "str",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "dict[str, str]",
                    "Union[str, os.PathLike]",
                    "int",
                    "Optional[Union[int, Any]]",
                    "typing.Any"
                ],
                "num_topics": [
                    "int",
                    "Optional[int]"
                ],
                "recompute": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "multicore": [
                    "bool",
                    "int",
                    "models.order_action.Parameters",
                    "article.transfer.models.ArticleNumber",
                    "Set[int]",
                    "Optional[str]"
                ]
            }
        },
        "print_topics": {
            "name": "print_topics",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "lda_model": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable[[], None]",
                    "bool"
                ],
                "num_words": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Callable[[], None]",
                    "bool"
                ]
            }
        }
    },
    "CrashAnalysisTool-master/crash_analysis/parser.py": {
        "extract_zipfiles": {
            "name": "extract_zipfiles",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "zipfile_dir": [
                    "crash_analysis.types.PathStr"
                ]
            }
        },
        "xmldocs_to_dataframe": {
            "name": "xmldocs_to_dataframe",
            "location": 35,
            "return": [
                "int",
                "bytes",
                "dict[, ]",
                "str",
                "IO",
                "list[int]",
                "List[str]",
                "list[list[int]]"
            ],
            "arguments": {
                "xml_dir": [
                    "crash_analysis.types.PathStr"
                ]
            }
        },
        "__trees_to_dataframe": {
            "name": "__trees_to_dataframe",
            "location": 65,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "roots": [
                    "List[List[etree.Element]]"
                ]
            }
        },
        "__parse_etrees": {
            "name": "__parse_etrees",
            "location": 76,
            "return": [
                "Iterator[dict]"
            ],
            "arguments": {
                "roots": [
                    "List[List[etree.Element]]"
                ]
            }
        },
        "__xml_to_tree": {
            "name": "__xml_to_tree",
            "location": 106,
            "return": [
                "etree.Element"
            ],
            "arguments": {
                "xml_filename": [
                    "crash_analysis.types.PathStr"
                ]
            }
        }
    },
    "CrashAnalysisTool-master/crash_analysis/preprocess.py": {
        "preprocess": {
            "name": "preprocess",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None",
                    "bool",
                    "str"
                ],
                "_map": [
                    "Optional[Callable[([T], Any)]]"
                ]
            }
        },
        "strip_proper_pos": {
            "name": "strip_proper_pos",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "tokenize_and_stop": {
            "name": "tokenize_and_stop",
            "location": 56,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "tokenize_stem_stop": {
            "name": "tokenize_stem_stop",
            "location": 77,
            "return": [
                "list"
            ],
            "arguments": {
                "text": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 101,
            "return": [
                "Sequence"
            ],
            "arguments": {
                "text": [
                    "Union[(str, List[str])]"
                ],
                "stem": [
                    "bool"
                ],
                "stop": [
                    "bool"
                ]
            }
        },
        "lower_and_tokenize": {
            "name": "lower_and_tokenize",
            "location": 141,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "ngram": {
            "name": "ngram",
            "location": 160,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "_input": [
                    "List[str]"
                ],
                "N": [
                    "int"
                ],
                "skip": [
                    "Optional[int]"
                ],
                "delim": [
                    "str"
                ],
                "skip_delim": [
                    "str"
                ]
            }
        },
        "skipgram": {
            "name": "skipgram",
            "location": 198,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "_input": [
                    "List[str]"
                ],
                "N": [
                    "int"
                ],
                "skip": [
                    "Optional[int]"
                ],
                "delim": [
                    "str"
                ],
                "skip_delim": [
                    "str"
                ]
            }
        },
        "__get_stopwords": {
            "name": "__get_stopwords",
            "location": 236,
            "return": [
                "str",
                "bool",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {}
        },
        "__join_if_list": {
            "name": "__join_if_list",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "text_or_list": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "__map_and_filter": {
            "name": "__map_and_filter",
            "location": 265,
            "return": [
                "MutableSequence"
            ],
            "arguments": {
                "_input": [
                    "MutableSequence[T]"
                ],
                "_map": [
                    "Callable[([T], Any)]"
                ],
                "_filter": [
                    "Callable[([T], bool)]"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 285,
            "return": [
                "int",
                "str",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "tokenize.identity": {
            "name": "identity",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "tokenize.allow_all": {
            "name": "allow_all",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "tokenize.not_stopword": {
            "name": "not_stopword",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "CrashAnalysisTool-master/crash_analysis/quickbase.py": {
        "to_xml_name": {
            "name": "to_xml_name",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "int",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ],
                "msg": [
                    "str",
                    "bytes",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]",
                    "float",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "response": [
                    "str",
                    "None",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Client._build_request": {
            "name": "_build_request",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Client._parse_records": {
            "name": "_parse_records",
            "location": 97,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "response": [
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "dict",
                    "str"
                ],
                "path_or_tag": [
                    "typing.Text",
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "dict",
                    "str"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "None"
                ],
                "password": [
                    "str",
                    "None"
                ],
                "base_url": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "app_token": [
                    "str",
                    "bool",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "timeout": [
                    "str",
                    "int"
                ],
                "authenticate": [
                    "str",
                    "bool"
                ],
                "database": [
                    "str",
                    "None"
                ]
            }
        },
        "Client.make_url": {
            "name": "make_url",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str"
                ]
            }
        },
        "Client.request": {
            "name": "request",
            "location": 132,
            "return": [
                "Union[(dict, xml.etree.ElementTree.Element)]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "float",
                    "Optional[bytes]",
                    "dict"
                ],
                "database": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "request": [],
                "required": [
                    "Optional[bytes]",
                    "bytes"
                ],
                "ticket": [
                    "bool",
                    "float",
                    "Optional[bytes]",
                    "str",
                    "dict"
                ]
            }
        },
        "Client.authenticate": {
            "name": "authenticate",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.do_query": {
            "name": "do_query",
            "location": 217,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "None",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[int]"
                ],
                "qid": [
                    "bool",
                    "None",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[int]"
                ],
                "qname": [
                    "bool",
                    "None",
                    "str",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[int]"
                ],
                "columns": [
                    "str",
                    "bool"
                ],
                "sort": [
                    "str",
                    "bool"
                ],
                "structured": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "str"
                ],
                "num": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "only_new": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "str"
                ],
                "skip": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "ascending": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "str"
                ],
                "include_rids": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "str"
                ],
                "database": [
                    "Optional[list]",
                    "int",
                    "None",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "path_or_tag": [
                    "typing.Text",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[object]",
                    "dict"
                ]
            }
        },
        "Client.edit_record": {
            "name": "edit_record",
            "location": 257,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "rid": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "fields": [
                    "dict[, ]",
                    "Set[str]",
                    "dict[str, typing.Type]",
                    "dict[str, 'LabwareDefinition']",
                    "dict",
                    "Dict[str, type]",
                    "Dict[str, 'LabwareDefinition']",
                    "Optional[str]",
                    "str"
                ],
                "named": [
                    "bool",
                    "str",
                    "Type[T]"
                ],
                "database": [
                    "str",
                    "None",
                    "bytes",
                    "Optional[Mapping[str, str]]",
                    "typing.Mapping"
                ]
            }
        },
        "Client._build_request.add_sub_element": {
            "name": "add_sub_element",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "field": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "Sequence[MutableMapping]",
                    "dict"
                ]
            }
        }
    },
    "CrashAnalysisTool-master/crash_analysis/types.py": {},
    "CrashAnalysisTool-master/crash_analysis/__init__.py": {}
}
{
    "DCGCN-master/images/__init__.py": {},
    "DCGCN-master/preprocess/nmt_preprocess.py": {
        "add_global_node": {
            "name": "add_global_node",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "dirt": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "dep_to_levi": {
            "name": "dep_to_levi",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "dirt": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "Optional[str]"
                ],
                "Sequential": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "gen_tokdeps": {
            "name": "gen_tokdeps",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "dirt": [
                    "str",
                    "bool",
                    "IO[Any]",
                    "dict"
                ],
                "name": [
                    "str",
                    "bool",
                    "IO[Any]",
                    "dict"
                ]
            }
        }
    },
    "DCGCN-master/preprocess/amr_preprocess/amr.py": {
        "clean_grammar_file": {
            "name": "clean_grammar_file",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "test": {
            "name": "test",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Var.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Var.is_constant": {
            "name": "is_constant",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Var.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "align_key": [
                    "typing.Text"
                ],
                "append": [
                    "bool"
                ]
            }
        },
        "Var.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "that": []
            }
        },
        "Var.__hash__": {
            "name": "__hash__",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concept.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Concept.is_constant": {
            "name": "is_constant",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concept.is_frame": {
            "name": "is_frame",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concept.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concept.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "align_key": [
                    "typing.Text"
                ]
            }
        },
        "Concept.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Concept.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "that": []
            }
        },
        "Concept.__hash__": {
            "name": "__hash__",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMRConstant.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AMRConstant.is_constant": {
            "name": "is_constant",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMRConstant.is_frame": {
            "name": "is_frame",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMRConstant.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMRConstant.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "align_key": [
                    "typing.Text"
                ]
            }
        },
        "AMRConstant.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AMRConstant.__eq__": {
            "name": "__eq__",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "that": []
            }
        },
        "AMRConstant.__hash__": {
            "name": "__hash__",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMRString.__str__": {
            "name": "__str__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "align_key": [
                    "typing.Text"
                ]
            }
        },
        "AMRString.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMRNumber.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMR.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anno": [],
                "tokens": [
                    "None"
                ]
            }
        },
        "AMR.triples": {
            "name": "triples",
            "location": 347,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "head": [
                    "None"
                ],
                "rel": [
                    "None"
                ],
                "dep": [
                    "None"
                ],
                "normalize_inverses": [
                    "bool"
                ],
                "normalize_mod": [
                    "bool"
                ]
            }
        },
        "AMR.role_triples": {
            "name": "role_triples",
            "location": 390,
            "return": [
                "List[Tuple[(Any, Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMR.constants": {
            "name": "constants",
            "location": 403,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMR.concept": {
            "name": "concept",
            "location": 406,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "AMR.concepts": {
            "name": "concepts",
            "location": 409,
            "return": [
                "dict_items"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMR.var2concept": {
            "name": "var2concept",
            "location": 412,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMR.alignments": {
            "name": "alignments",
            "location": 415,
            "return": [
                "Dict[(Tuple[(Any, Any, Any)], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMR.role_alignments": {
            "name": "role_alignments",
            "location": 418,
            "return": [
                "Dict[(Tuple[(Any, Any, Any)], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMR.tokens": {
            "name": "tokens",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AMR.reentrancies": {
            "name": "reentrancies",
            "location": 424,
            "return": [
                "Counter[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMR.__call__": {
            "name": "__call__",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AMR.__str__": {
            "name": "__str__",
            "location": 442,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alignments": [
                    "bool"
                ],
                "tokens": [
                    "bool"
                ],
                "compressed": [
                    "bool"
                ],
                "indent": [
                    "typing.Text"
                ]
            }
        },
        "AMR.__repr__": {
            "name": "__repr__",
            "location": 501,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AMR._analyze": {
            "name": "_analyze",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "AMR.__str__.alignment_str": {
            "name": "alignment_str",
            "location": 455,
            "return": [],
            "arguments": {
                "align_key": []
            }
        },
        "AMR._analyze.intern_elt": {
            "name": "intern_elt",
            "location": 511,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "AMR._analyze.walk": {
            "name": "walk",
            "location": 514,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "DCGCN-master/preprocess/amr_preprocess/global_node.py": {
        "add_global_node": {
            "name": "add_global_node",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "dirt": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "gen_amrgrh": {
            "name": "gen_amrgrh",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "dirt": [
                    "str",
                    "bool",
                    "IO[Any]",
                    "dict"
                ],
                "name": [
                    "str",
                    "bool",
                    "IO[Any]",
                    "dict"
                ]
            }
        }
    },
    "DCGCN-master/preprocess/amr_preprocess/ne_clusters.py": {},
    "DCGCN-master/preprocess/amr_preprocess/plot_amr.py": {
        "gen_dot": {
            "name": "gen_dot",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "nodes": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "triples": [
                    "str"
                ]
            }
        }
    },
    "DCGCN-master/preprocess/amr_preprocess/preproc_amr.py": {
        "simplify": {
            "name": "simplify",
            "location": 48,
            "return": [
                "list"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "list[str]",
                    "Union[str, Sequence[str]]",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[bool]"
                ],
                "v2c": [
                    "str"
                ]
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 80,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[Sequence[str]]",
                    "str"
                ],
                "v2c": [
                    "str",
                    "int"
                ]
            }
        },
        "get_nodes": {
            "name": "get_nodes",
            "location": 97,
            "return": [
                "Tuple[(Dict[(Any, str)], list)]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "get_nodes2": {
            "name": "get_nodes2",
            "location": 116,
            "return": [
                "Tuple[(Dict[(Any, str)], list)]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "list",
                    "List[Tuple[float, str]]",
                    "int",
                    "bool",
                    "Callable[[None], None]"
                ]
            }
        },
        "get_triples": {
            "name": "get_triples",
            "location": 137,
            "return": [
                "List[Tuple[(Any, Any, Any)]]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str",
                    "float"
                ],
                "v_ids": [
                    "list[]",
                    "list[list[int]]",
                    "list",
                    "list[typing.Sequence[str]]",
                    "List[List[int]]",
                    "bool",
                    "int",
                    "List[int]",
                    "dict",
                    "str",
                    "List[Sequence[str]]"
                ],
                "rev_v_ids": [
                    "int",
                    "list[int]",
                    "str",
                    "List[int]",
                    "list[dict[, ]]",
                    "bool",
                    "List[dict]"
                ]
            }
        },
        "anonymize_nes": {
            "name": "anonymize_nes",
            "location": 171,
            "return": [
                "Tuple[(_T2, _T4, _T5, _T6)]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "bool",
                    "Tuple[float, float]",
                    "bytes"
                ],
                "triples": [
                    "tuple[typing.Union[float,float]]",
                    "bool",
                    "int",
                    "Tuple[float, float]"
                ],
                "output_triples": [
                    "_T2"
                ],
                "v2c": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "anon_ids": [
                    "_T4"
                ],
                "anon_map": [
                    "_T5"
                ],
                "anon_surf": [
                    "_T6"
                ]
            }
        },
        "anonymize_dates": {
            "name": "anonymize_dates",
            "location": 241,
            "return": [
                "Tuple[(_T2, _T4, _T5, _T6)]"
            ],
            "arguments": {
                "graph": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[str]",
                    "Optional[str]",
                    "Tuple[int, int, int]"
                ],
                "triples": [
                    "list[]",
                    "int",
                    "list[str]",
                    "list",
                    "Optional[float]",
                    "Optional[List[str]]"
                ],
                "output_triples": [
                    "_T2"
                ],
                "v2c": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "anon_ids": [
                    "_T4"
                ],
                "anon_map": [
                    "_T5"
                ],
                "anon_surf": [
                    "_T6"
                ]
            }
        },
        "anonymize_quants": {
            "name": "anonymize_quants",
            "location": 314,
            "return": [
                "Tuple[(_T2, _T4, _T5, _T6)]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int",
                    "Union[str, None]",
                    "float"
                ],
                "triples": [
                    "list[float]",
                    "List[float]",
                    "str",
                    "int",
                    "bytes",
                    "list[]",
                    "Union[int, str]",
                    "list[str]",
                    "list",
                    "List[str]"
                ],
                "output_triples": [
                    "_T2"
                ],
                "v2c": [
                    "str",
                    "Dict[str, List[Any]]",
                    "dict[str, list[typing.Any]]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Type[Any]]",
                    "dict[str, typing.Type]"
                ],
                "anon_ids": [
                    "_T4"
                ],
                "anon_map": [
                    "_T5"
                ],
                "anon_surf": [
                    "_T6"
                ]
            }
        },
        "anonymize": {
            "name": "anonymize",
            "location": 396,
            "return": [
                "Tuple[(Any, Any, List[str], dict)]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "Dict[str, AsyncGenerator]",
                    "int"
                ],
                "surf": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "get_line_graph": {
            "name": "get_line_graph",
            "location": 442,
            "return": [
                "Tuple[(list, List[Tuple[(int, int, str)]], Union[(str, _T1)], Any, Optional[str])]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ],
                "surf": [
                    "_T1"
                ],
                "anon": [
                    "bool",
                    "str",
                    "Callable",
                    "Set[str]"
                ],
                "scope": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "add_scope_markers": {
            "name": "add_scope_markers",
            "location": 516,
            "return": [
                "Tuple[(_T0, list)]"
            ],
            "arguments": {
                "nodes": [
                    "_T0"
                ],
                "triples": [
                    "int"
                ],
                "top_node": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_marker": {
            "name": "add_marker",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "nodes": [
                    "list[]",
                    "str",
                    "list",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "triples": [
                    "set[int]",
                    "str",
                    "int",
                    "Set[int]"
                ],
                "adj_list": [
                    "str",
                    "list[]",
                    "int",
                    "Set[int]",
                    "Optional[str]",
                    "IO[bytes]",
                    "list"
                ],
                "node_id": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Union[str, None]",
                    "int"
                ],
                "stack": [
                    "int",
                    "str"
                ],
                "visited": [
                    "int",
                    "str"
                ]
            }
        },
        "has_child": {
            "name": "has_child",
            "location": 606,
            "return": [
                "bool"
            ],
            "arguments": {
                "node_id": [
                    "bool",
                    "\"Pipeline\"",
                    "str"
                ],
                "adj_list": [
                    "str",
                    "\"Pipeline\"",
                    "bool"
                ],
                "visited": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "build_adj_list": {
            "name": "build_adj_list",
            "location": 623,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "triples": [
                    "str",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "print_simplified": {
            "name": "print_simplified",
            "location": 634,
            "return": [
                "list"
            ],
            "arguments": {
                "graph_triples": [
                    "list[]",
                    "list",
                    "Optional[int]",
                    "Optional[Dict[str, str]]",
                    "Sequence[str]",
                    "str"
                ],
                "v2c": [
                    "List[T]",
                    "list[T]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "AMRTree.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "list[list[typing.Any]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AMRTree.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "int",
                "Dict[str, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DCGCN-master/preprocess/amr_preprocess/split_amr.py": {},
    "DCGCN-master/results/__init__.py": {},
    "DCGCN-master/sockeye/arguments.py": {
        "save_args": {
            "name": "save_args",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "fname": [
                    "str"
                ]
            }
        },
        "load_args": {
            "name": "load_args",
            "location": 88,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "regular_file": {
            "name": "regular_file",
            "location": 93,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "regular_folder": {
            "name": "regular_folder",
            "location": 110,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "int_greater_or_equal": {
            "name": "int_greater_or_equal",
            "location": 126,
            "return": [
                "Callable"
            ],
            "arguments": {
                "threshold": [
                    "int"
                ]
            }
        },
        "learning_schedule": {
            "name": "learning_schedule",
            "location": 143,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "simple_dict": {
            "name": "simple_dict",
            "location": 162,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "multiple_values": {
            "name": "multiple_values",
            "location": 195,
            "return": [
                "Callable"
            ],
            "arguments": {
                "num_values": [
                    "int"
                ],
                "greater_or_equal": [
                    "Optional[float]"
                ],
                "data_type": [
                    "Callable"
                ]
            }
        },
        "file_or_stdin": {
            "name": "file_or_stdin",
            "location": 225,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "add_average_args": {
            "name": "add_average_args",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_extract_args": {
            "name": "add_extract_args",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_rerank_args": {
            "name": "add_rerank_args",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_lexicon_args": {
            "name": "add_lexicon_args",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_lexicon_create_args": {
            "name": "add_lexicon_create_args",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "List[str]",
                    "dict",
                    "int",
                    "Callable"
                ]
            }
        },
        "add_lexicon_inspect_args": {
            "name": "add_lexicon_inspect_args",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Callable",
                    "int",
                    "core.types.UserRole"
                ]
            }
        },
        "add_logging_args": {
            "name": "add_logging_args",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Tuple[Optional[float], Optional[float]]",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_training_data_args": {
            "name": "add_training_data_args",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "argparse.Namespace",
                    "List[str]",
                    "bool"
                ],
                "required": [
                    "bool",
                    "argparse._SubParsersAction",
                    "argparse.Namespace",
                    "List[str]"
                ]
            }
        },
        "add_validation_data_params": {
            "name": "add_validation_data_params",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ]
            }
        },
        "add_prepared_data_args": {
            "name": "add_prepared_data_args",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "str",
                    "dict[str, typing.Any]",
                    "argparse.Namespace",
                    "typing.Sequence[str]",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ]
            }
        },
        "add_monitoring_args": {
            "name": "add_monitoring_args",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_training_output_args": {
            "name": "add_training_output_args",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "List[str]",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_training_io_args": {
            "name": "add_training_io_args",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "Dict[str, Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "add_bucketing_args": {
            "name": "add_bucketing_args",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser",
                    "argparse._ArgumentGroup"
                ]
            }
        },
        "add_prepare_data_cli_args": {
            "name": "add_prepare_data_cli_args",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "str",
                    "dict"
                ]
            }
        },
        "add_device_args": {
            "name": "add_device_args",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_vocab_args": {
            "name": "add_vocab_args",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "argparse._ArgumentGroup",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_model_parameters": {
            "name": "add_model_parameters",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "List[str]",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "add_training_args": {
            "name": "add_training_args",
            "location": 805,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_train_cli_args": {
            "name": "add_train_cli_args",
            "location": 1106,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_translate_cli_args": {
            "name": "add_translate_cli_args",
            "location": 1114,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "add_max_output_cli_args": {
            "name": "add_max_output_cli_args",
            "location": 1120,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "int"
                ]
            }
        },
        "add_inference_args": {
            "name": "add_inference_args",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_evaluate_args": {
            "name": "add_evaluate_args",
            "location": 1280,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_build_vocab_args": {
            "name": "add_build_vocab_args",
            "location": 1309,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction"
                ]
            }
        },
        "add_init_embedding_args": {
            "name": "add_init_embedding_args",
            "location": 1315,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "argparse._ArgumentGroup",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "ConfigArgumentParser.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigArgumentParser._register_argument": {
            "name": "_register_argument",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_action": [
                    "str",
                    "list",
                    "list[]",
                    "tuple",
                    "tuple[]",
                    "Callable[[], None]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "ConfigArgumentParser._overwrite_add_argument": {
            "name": "_overwrite_add_argument",
            "location": 53,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "original_object": [
                    "_T0"
                ]
            }
        },
        "ConfigArgumentParser.add_argument_group": {
            "name": "add_argument_group",
            "location": 64,
            "return": [
                "argparse._ArgumentGroup"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigArgumentParser.parse_args": {
            "name": "parse_args",
            "location": 68,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "None"
                ],
                "namespace": [
                    "List[str]",
                    "int",
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "regular_file.check_regular_file": {
            "name": "check_regular_file",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "value_to_check": [
                    "str"
                ]
            }
        },
        "regular_folder.check_regular_directory": {
            "name": "check_regular_directory",
            "location": 117,
            "return": [
                "str",
                "bytes",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "value_to_check": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "int_greater_or_equal.check_greater_equal": {
            "name": "check_greater_equal",
            "location": 134,
            "return": [
                "int",
                "str",
                "bytes",
                "Optional[float]"
            ],
            "arguments": {
                "value_to_check": [
                    "int",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "learning_schedule.parse": {
            "name": "parse",
            "location": 151,
            "return": [],
            "arguments": {
                "schedule_str": []
            }
        },
        "simple_dict.parse": {
            "name": "parse",
            "location": 171,
            "return": [],
            "arguments": {
                "dict_str": []
            }
        },
        "multiple_values.parse": {
            "name": "parse",
            "location": 208,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "file_or_stdin.parse": {
            "name": "parse",
            "location": 230,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "ConfigArgumentParser._overwrite_add_argument._new_add_argument": {
            "name": "_new_add_argument",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "this_self": [
                    "Callable",
                    "str",
                    "Sequence[str]",
                    "tuple"
                ]
            }
        },
        "simple_dict.parse._parse": {
            "name": "_parse",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Tuple[str, str, str]",
                    "Union[int, str]",
                    "float",
                    "bool",
                    "Tuple[str]",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/average.py": {
        "average": {
            "name": "average",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "param_paths": [
                    "Iterable[str]"
                ]
            }
        },
        "find_checkpoints": {
            "name": "find_checkpoints",
            "location": 70,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ],
                "size": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, int]"
                ],
                "strategy": [
                    "typing.Text",
                    "int",
                    "bool",
                    "str"
                ],
                "metric": [
                    "str"
                ]
            }
        },
        "_strategy_best": {
            "name": "_strategy_best",
            "location": 113,
            "return": [
                "list"
            ],
            "arguments": {
                "points": [
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "list[str]",
                    "int",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[dict[, ]]",
                    "Optional[Dict[str, Any]]",
                    "List[Dict]"
                ],
                "size": [
                    "int",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "List[Dict]"
                ],
                "maximize": [
                    "list",
                    "list[]",
                    "int",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "List[Dict]",
                    "None",
                    "list[dict[, ]]"
                ]
            }
        },
        "_strategy_last": {
            "name": "_strategy_last",
            "location": 118,
            "return": [
                "str",
                "int",
                "list[int]"
            ],
            "arguments": {
                "points": [
                    "str",
                    "int",
                    "list[list[int]]",
                    "List[List[int]]"
                ],
                "size": [
                    "int",
                    "float"
                ],
                "maximize": [
                    "list[]",
                    "bool",
                    "list",
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ]
            }
        },
        "_strategy_lifespan": {
            "name": "_strategy_lifespan",
            "location": 125,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "points": [
                    "str",
                    "int",
                    "Iterable",
                    "Tuple[int, int]"
                ],
                "size": [
                    "List[Tuple[Any, Any]]",
                    "List[tuple]"
                ],
                "maximize": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "average_parameters": {
            "name": "average_parameters",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/checkpoint_decoder.py": {
        "parallel_subsample": {
            "name": "parallel_subsample",
            "location": 187,
            "return": [
                "list"
            ],
            "arguments": {
                "parallel_sequences": [
                    "List[list]"
                ],
                "sample_size": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "write_to_file": {
            "name": "write_to_file",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "List[str]"
                ],
                "fname": [
                    "str"
                ]
            }
        },
        "CheckpointDecoder.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "inputs": [
                    "List[str]"
                ],
                "graph": [
                    "str"
                ],
                "references": [
                    "str"
                ],
                "model": [
                    "str"
                ],
                "edge_vocab": [
                    "Dict[(str, int)]"
                ],
                "max_input_len": [
                    "Optional[int]"
                ],
                "batch_size": [
                    "int"
                ],
                "beam_size": [
                    "int"
                ],
                "bucket_width_source": [
                    "int"
                ],
                "length_penalty_alpha": [
                    "float"
                ],
                "length_penalty_beta": [
                    "float"
                ],
                "softmax_temperature": [
                    "Optional[float]"
                ],
                "max_output_length_num_stds": [
                    "int"
                ],
                "ensemble_mode": [
                    "str"
                ],
                "sample_size": [
                    "int"
                ],
                "random_seed": [
                    "int"
                ]
            }
        },
        "CheckpointDecoder.decode_and_evaluate": {
            "name": "decode_and_evaluate",
            "location": 124,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "checkpoint": [
                    "Optional[int]"
                ],
                "output_name": [
                    "str"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/compare.py": {
        "get_gcn": {
            "name": "get_gcn",
            "location": 12,
            "return": [
                "GCNCell"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "dict[str, list[str]]",
                    "cerise.config.Config",
                    "backup.config.Config",
                    "app.config.MQConfig",
                    "config.Config",
                    "Dict[str, List[str]]"
                ],
                "prefix": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "dict[str, list[str]]",
                    "cerise.config.Config",
                    "backup.config.Config",
                    "app.config.MQConfig",
                    "config.Config",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "GCNConfig.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int"
                ],
                "output_dim": [
                    "int"
                ],
                "directions": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "adj_norm": [
                    "bool"
                ],
                "activation": [
                    "str"
                ],
                "dropout": [
                    "float"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "GCNCell.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "None",
                    "float",
                    "Optional[\"ShippingRateInputType\"]",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "output_dim": [
                    "float",
                    "bool",
                    "str",
                    "list[]",
                    "list",
                    "Optional[List[Any]]"
                ],
                "directions": [
                    "list[]",
                    "int",
                    "list",
                    "str",
                    "set[tuple[typing.Union[str,str]]]",
                    "bytes",
                    "bool",
                    "Set[Tuple[str, str]]",
                    "list[str]",
                    "List[str]"
                ],
                "num_layers": [
                    "bool",
                    "dict[tuple[typing.Union[int,...]], int]",
                    "int",
                    "Dict[Tuple[int, ...], int]"
                ],
                "adj_norm": [
                    "bool",
                    "float",
                    "int",
                    "bytes",
                    "torch.utils.data.DataLoader",
                    "Iterator[int]",
                    "Tuple[int]"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "list",
                    "List[str]",
                    "Tuple[str, str]"
                ],
                "activation": [
                    "typing.Text",
                    "list",
                    "int",
                    "bool",
                    "Set[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "dropout": [
                    "float",
                    "list",
                    "int",
                    "bool",
                    "Set[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "GCNCell.convolve": {
            "name": "convolve",
            "location": 99,
            "return": [
                "list[bytes]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "adj": [
                    "BaseException"
                ],
                "inputs": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "seq_len": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GCNCell.reset": {
            "name": "reset",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphConvolution.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "heads": [
                    "int"
                ],
                "output_dim": [
                    "int"
                ],
                "directions": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "norm": [
                    "bool"
                ],
                "activation": [
                    "str"
                ]
            }
        },
        "GraphConvolution.__call__": {
            "name": "__call__",
            "location": 176,
            "return": [
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]",
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "adj": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "inputs": [
                    "str",
                    "float",
                    "int",
                    "typing.Type",
                    "Type",
                    "logging.LogRecord"
                ]
            }
        },
        "GraphConvolution._convolve": {
            "name": "_convolve",
            "location": 196,
            "return": [
                "str",
                "List[int]",
                "dict[, ]",
                "dict[str, str]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "adj": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list",
                    "bool"
                ],
                "inputs": [
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ],
                "i": [
                    "list",
                    "int",
                    "list[]",
                    "float",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/config.py": {
        "TaggedYamlObjectMetaclass.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "TaggedYamlObjectMetaclass"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "bases": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "kwds": [
                    "dict[str, typing.Any]",
                    "dict[str, object]",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, object]",
                    "Mapping[str, str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__setattr__": {
            "name": "__setattr__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Config.__setstate__": {
            "name": "__setstate__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Config.freeze": {
            "name": "freeze",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "dict",
                    "None",
                    "Dict[str, Any]",
                    "dict[, ]"
                ]
            }
        },
        "Config.__del_frozen": {
            "name": "__del_frozen",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__add_frozen": {
            "name": "__add_frozen",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.save": {
            "name": "save",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "Config.load": {
            "name": "load",
            "location": 111,
            "return": [
                "Config"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "Config.copy": {
            "name": "copy",
            "location": 123,
            "return": [
                "Config"
            ],
            "arguments": {
                "self": [
                    "_TConfig"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/constants.py": {},
    "DCGCN-master/sockeye/convolution.py": {
        "ConvolutionConfig.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kernel_width": [
                    "int"
                ],
                "num_hidden": [
                    "int"
                ],
                "act_type": [
                    "str"
                ],
                "weight_normalization": [
                    "bool"
                ]
            }
        },
        "ConvolutionBlock.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "ConvolutionConfig"
                ],
                "pad_type": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "ConvolutionBlock._pre_activation_num_hidden": {
            "name": "_pre_activation_num_hidden",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionBlock.__call__": {
            "name": "__call__",
            "location": 89,
            "return": [
                "str",
                "Union[str, Dict]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "dict[, ]"
                ],
                "data_length": [
                    "dict",
                    "dict[, ]"
                ],
                "seq_len": [
                    "int"
                ]
            }
        },
        "ConvolutionBlock.step": {
            "name": "step",
            "location": 133,
            "return": [
                "int",
                "str",
                "bytes",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "dict[, ]",
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "ConvolutionBlock._post_convolution": {
            "name": "_post_convolution",
            "location": 161,
            "return": [
                "str",
                "int",
                "list[str]",
                "dict[str, str]",
                "dict[, ]",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "data_conv": [
                    "int",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/coverage.py": {
        "get_coverage": {
            "name": "get_coverage",
            "location": 49,
            "return": [
                "Coverage"
            ],
            "arguments": {
                "config": [
                    "CoverageConfig"
                ]
            }
        },
        "mask_coverage": {
            "name": "mask_coverage",
            "location": 307,
            "return": [
                "bool"
            ],
            "arguments": {
                "coverage": [
                    "bool"
                ],
                "source_length": [
                    "bool"
                ]
            }
        },
        "CoverageConfig.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "num_hidden": [
                    "int"
                ],
                "layer_normalization": [
                    "bool"
                ]
            }
        },
        "Coverage.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Coverage.on": {
            "name": "on",
            "location": 76,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "CountCoverage.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountCoverage.on": {
            "name": "on",
            "location": 108,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "GRUCoverage.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage_num_hidden": [
                    "int"
                ],
                "layer_normalization": [
                    "bool"
                ]
            }
        },
        "GRUCoverage.on": {
            "name": "on",
            "location": 152,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "ActivationCoverage.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage_num_hidden": [
                    "int"
                ],
                "activation": [
                    "str"
                ],
                "layer_normalization": [
                    "bool"
                ]
            }
        },
        "ActivationCoverage.on": {
            "name": "on",
            "location": 232,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "Coverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "prev_hidden": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "attention_prob_scores": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "prev_coverage": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "CountCoverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 118,
            "return": [
                "None",
                "float",
                "str",
                "recidiviz.common.constants.enum_overrides.EnumOverrides",
                "int",
                "bool"
            ],
            "arguments": {
                "prev_hidden": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "attention_prob_scores": [
                    "float",
                    "str",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "int",
                    "bool"
                ],
                "prev_coverage": [
                    "float",
                    "str",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "int",
                    "bool"
                ]
            }
        },
        "GRUCoverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 162,
            "return": [
                "bool",
                "str",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "prev_hidden": [
                    "bool",
                    "Tuple[int, int]"
                ],
                "attention_prob_scores": [
                    "int",
                    "str"
                ],
                "prev_coverage": [
                    "bool",
                    "bytearray",
                    "dict",
                    "raiden.utils.Address"
                ]
            }
        },
        "ActivationCoverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 250,
            "return": [
                "bool",
                "str",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "prev_hidden": [
                    "str"
                ],
                "attention_prob_scores": [
                    "str",
                    "int",
                    "float",
                    "Sequence['cirq.Qid']",
                    "bool"
                ],
                "prev_coverage": [
                    "int",
                    "str",
                    "List[Tuple[int, bytes]]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/data_io.py": {
        "define_buckets": {
            "name": "define_buckets",
            "location": 39,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "max_seq_len": [
                    "int"
                ],
                "step": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "define_parallel_buckets": {
            "name": "define_parallel_buckets",
            "location": 55,
            "return": [
                "List[Tuple[(int, int)]]"
            ],
            "arguments": {
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "bucket_width": [
                    "int"
                ],
                "length_ratio": [
                    "float"
                ]
            }
        },
        "define_empty_source_parallel_buckets": {
            "name": "define_empty_source_parallel_buckets",
            "location": 94,
            "return": [
                "List[Tuple[(int, int)]]"
            ],
            "arguments": {
                "max_seq_len_target": [
                    "int"
                ],
                "bucket_width": [
                    "int"
                ]
            }
        },
        "get_bucket": {
            "name": "get_bucket",
            "location": 116,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "seq_len": [
                    "int"
                ],
                "buckets": [
                    "List[int]"
                ]
            }
        },
        "define_bucket_batch_sizes": {
            "name": "define_bucket_batch_sizes",
            "location": 143,
            "return": [
                "List[BucketBatchSize]"
            ],
            "arguments": {
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ],
                "batch_size": [
                    "int"
                ],
                "batch_by_words": [
                    "bool"
                ],
                "batch_num_devices": [
                    "int"
                ],
                "data_target_average_len": [
                    "List[Optional[float]]"
                ]
            }
        },
        "calculate_length_statistics": {
            "name": "calculate_length_statistics",
            "location": 207,
            "return": [
                "LengthStatistics"
            ],
            "arguments": {
                "source_iterables": [
                    "Sequence[Iterable]"
                ],
                "target_iterable": [
                    "Iterable"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ]
            }
        },
        "analyze_sequence_lengths": {
            "name": "analyze_sequence_lengths",
            "location": 240,
            "return": [
                "LengthStatistics"
            ],
            "arguments": {
                "sources": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "vocab_sources": [
                    "List[Dict[(str, int)]]"
                ],
                "vocab_target": [
                    "Dict[(str, int)]"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ]
            }
        },
        "are_token_parallel": {
            "name": "are_token_parallel",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {
                "sequences": [
                    "Sequence[Sized]"
                ]
            }
        },
        "shard_data": {
            "name": "shard_data",
            "location": 348,
            "return": [
                "Tuple[(List[Tuple[(List[str], str, DataStatistics)]], DataStatistics)]"
            ],
            "arguments": {
                "source_fnames": [
                    "List[str]"
                ],
                "target_fname": [
                    "str"
                ],
                "source_vocabs": [
                    "List[Dict[(str, int)]]"
                ],
                "target_vocab": [
                    "Dict[(str, int)]"
                ],
                "num_shards": [
                    "int"
                ],
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ],
                "length_ratio_mean": [
                    "float"
                ],
                "length_ratio_std": [
                    "float"
                ],
                "output_prefix": [
                    "str"
                ]
            }
        },
        "get_num_shards": {
            "name": "get_num_shards",
            "location": 601,
            "return": [
                "int"
            ],
            "arguments": {
                "num_samples": [
                    "int"
                ],
                "samples_per_shard": [
                    "int"
                ],
                "min_num_shards": [
                    "int"
                ]
            }
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "source_fnames": [
                    "List[str]"
                ],
                "target_fname": [
                    "str"
                ],
                "source_vocabs": [
                    "List[Dict[(str, int)]]"
                ],
                "target_vocab": [
                    "Dict[(str, int)]"
                ],
                "source_vocab_paths": [
                    "List[Optional[str]]"
                ],
                "target_vocab_path": [
                    "Optional[str]"
                ],
                "shared_vocab": [
                    "bool"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "bucketing": [
                    "bool"
                ],
                "bucket_width": [
                    "int"
                ],
                "samples_per_shard": [
                    "int"
                ],
                "min_num_shards": [
                    "int"
                ],
                "output_prefix": [
                    "str"
                ],
                "keep_tmp_shard_files": [
                    "bool"
                ]
            }
        },
        "get_data_statistics": {
            "name": "get_data_statistics",
            "location": 703,
            "return": [
                "DataStatistics"
            ],
            "arguments": {
                "source_readers": [
                    "Sequence[Iterable]"
                ],
                "target_reader": [
                    "Iterable"
                ],
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ],
                "length_ratio_mean": [
                    "float"
                ],
                "length_ratio_std": [
                    "float"
                ],
                "source_vocabs": [
                    "List[Dict[(str, int)]]"
                ],
                "target_vocab": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "get_validation_data_iter": {
            "name": "get_validation_data_iter",
            "location": 725,
            "return": [
                "ParallelSampleIter"
            ],
            "arguments": {
                "data_loader": [
                    "RawParallelDatasetLoader"
                ],
                "validation_sources": [
                    "List[str]"
                ],
                "validation_target": [
                    "str"
                ],
                "val_src_graphs": [
                    "str"
                ],
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ],
                "bucket_batch_sizes": [
                    "List[BucketBatchSize]"
                ],
                "source_vocabs": [
                    "List[Dict[(str, int)]]"
                ],
                "target_vocab": [
                    "Dict[(str, int)]"
                ],
                "edge_vocab": [
                    "Dict[(str, int)]"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "fill_up": [
                    "str"
                ]
            }
        },
        "get_prepared_data_iters": {
            "name": "get_prepared_data_iters",
            "location": 774,
            "return": [
                "Tuple[(BaseParallelSampleIter, BaseParallelSampleIter, DataConfig, List[Dict[(str, int)]], Dict[(str, int)])]"
            ],
            "arguments": {
                "prepared_data_dir": [
                    "str"
                ],
                "validation_sources": [
                    "List[str]"
                ],
                "validation_target": [
                    "str"
                ],
                "shared_vocab": [
                    "bool"
                ],
                "batch_size": [
                    "int"
                ],
                "batch_by_words": [
                    "bool"
                ],
                "batch_num_devices": [
                    "int"
                ],
                "fill_up": [
                    "str"
                ]
            }
        },
        "get_training_data_iters": {
            "name": "get_training_data_iters",
            "location": 858,
            "return": [
                "Tuple[(BaseParallelSampleIter, BaseParallelSampleIter, DataConfig, DataInfo)]"
            ],
            "arguments": {
                "sources": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "source_graphs": [
                    "str"
                ],
                "validation_sources": [
                    "List[str]"
                ],
                "validation_target": [
                    "str"
                ],
                "val_source_graphs": [
                    "str"
                ],
                "source_vocabs": [
                    "List[Dict[(str, int)]]"
                ],
                "target_vocab": [
                    "Dict[(str, int)]"
                ],
                "edge_vocab": [
                    "Dict[(str, int)]"
                ],
                "source_vocab_paths": [
                    "List[Optional[str]]"
                ],
                "target_vocab_path": [
                    "Optional[str]"
                ],
                "shared_vocab": [
                    "bool"
                ],
                "batch_size": [
                    "int"
                ],
                "batch_by_words": [
                    "bool"
                ],
                "batch_num_devices": [
                    "int"
                ],
                "fill_up": [
                    "str"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "bucketing": [
                    "bool"
                ],
                "bucket_width": [
                    "int"
                ]
            }
        },
        "describe_data_and_buckets": {
            "name": "describe_data_and_buckets",
            "location": 1032,
            "return": [
                "None"
            ],
            "arguments": {
                "data_statistics": [
                    "DataStatistics"
                ],
                "bucket_batch_sizes": [
                    "List[BucketBatchSize]"
                ]
            }
        },
        "read_content": {
            "name": "read_content",
            "location": 1089,
            "return": [
                "Iterator[List[str]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "limit": [
                    "Optional[int]"
                ]
            }
        },
        "tokens2ids": {
            "name": "tokens2ids",
            "location": 1104,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "tokens": [
                    "Iterable[str]"
                ],
                "vocab": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "strids2ids": {
            "name": "strids2ids",
            "location": 1115,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "tokens": [
                    "Iterable[str]"
                ]
            }
        },
        "ids2strids": {
            "name": "ids2strids",
            "location": 1125,
            "return": [
                "str"
            ],
            "arguments": {
                "ids": [
                    "Iterable[int]"
                ]
            }
        },
        "process_edges": {
            "name": "process_edges",
            "location": 1135,
            "return": [
                "List[Tuple[(int, int, int)]]"
            ],
            "arguments": {
                "graph_tokens": [
                    "Iterable[str]"
                ],
                "vocab": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "create_graph_readers": {
            "name": "create_graph_readers",
            "location": 1218,
            "return": [
                "Tuple[(List[SequenceReader], SequenceReader, GraphReader)]"
            ],
            "arguments": {
                "sources": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "source_graph": [
                    "str"
                ],
                "vocab_sources": [
                    "List[Dict[(str, int)]]"
                ],
                "vocab_target": [
                    "Dict[(str, int)]"
                ],
                "vocab_edges": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "create_sequence_readers": {
            "name": "create_sequence_readers",
            "location": 1238,
            "return": [
                "Tuple[(List[SequenceReader], SequenceReader)]"
            ],
            "arguments": {
                "sources": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "vocab_sources": [
                    "List[Dict[(str, int)]]"
                ],
                "vocab_target": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "parallel_graph_iter": {
            "name": "parallel_graph_iter",
            "location": 1256,
            "return": [
                "Generator[(Tuple[(Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "source_iters": [
                    "Sequence[Iterable]"
                ],
                "target_iterable": [
                    "Iterable"
                ],
                "graph_iterable": [
                    "Iterable"
                ]
            }
        },
        "parallel_iter": {
            "name": "parallel_iter",
            "location": 1284,
            "return": [
                "Generator[(Tuple[(nothing, nothing)], Any, None)]"
            ],
            "arguments": {
                "source_iters": [
                    "Sequence[Iterable]"
                ],
                "target_iterable": [
                    "Iterable"
                ]
            }
        },
        "get_default_bucket_key": {
            "name": "get_default_bucket_key",
            "location": 1337,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ]
            }
        },
        "get_parallel_bucket": {
            "name": "get_parallel_bucket",
            "location": 1347,
            "return": [
                "Tuple[(Optional[int], Optional[Tuple[(int, int)]])]"
            ],
            "arguments": {
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ],
                "length_source": [
                    "int"
                ],
                "length_target": [
                    "int"
                ]
            }
        },
        "get_target_bucket": {
            "name": "get_target_bucket",
            "location": 1365,
            "return": [
                "Optional[Tuple[(int, Tuple[(int, int)])]]"
            ],
            "arguments": {
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ],
                "length_target": [
                    "int"
                ]
            }
        },
        "get_permutations": {
            "name": "get_permutations",
            "location": 1511,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "bucket_counts": [
                    "List[int]"
                ]
            }
        },
        "get_batch_indices": {
            "name": "get_batch_indices",
            "location": 1536,
            "return": [
                "List[Tuple[(int, int)]]"
            ],
            "arguments": {
                "data": [
                    "ParallelDataSet"
                ],
                "bucket_batch_sizes": [
                    "List[BucketBatchSize]"
                ]
            }
        },
        "BucketBatchSize.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "Tuple[(int, int)]"
                ],
                "batch_size": [
                    "int"
                ],
                "average_words_per_batch": [
                    "float"
                ]
            }
        },
        "DataStatisticsAccumulator.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ],
                "vocab_source": [
                    "Optional[Dict[(str, int)]]"
                ],
                "vocab_target": [
                    "Dict[(str, int)]"
                ],
                "length_ratio_mean": [
                    "float"
                ],
                "length_ratio_std": [
                    "float"
                ]
            }
        },
        "DataStatisticsAccumulator.sequence_pair": {
            "name": "sequence_pair",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "List[int]"
                ],
                "target": [
                    "List[int]"
                ],
                "bucket_idx": [
                    "Optional[int]"
                ]
            }
        },
        "DataStatisticsAccumulator.mean_len_target_per_bucket": {
            "name": "mean_len_target_per_bucket",
            "location": 324,
            "return": [
                "list[None]",
                "bool",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStatisticsAccumulator.statistics": {
            "name": "statistics",
            "location": 329,
            "return": [
                "DataStatistics",
                "raiden.utils.signer.Signer",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawParallelDatasetLoader.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ],
                "eos_id": [
                    "int"
                ],
                "pad_id": [
                    "int"
                ],
                "forward_id": [
                    "int"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "RawParallelDatasetLoader.load": {
            "name": "load",
            "location": 441,
            "return": [
                "ParallelDataSet"
            ],
            "arguments": {
                "self": [],
                "source_iterables": [
                    "Sequence[Iterable]"
                ],
                "target_iterable": [
                    "Iterable"
                ],
                "graph_iterable": [
                    "Iterable"
                ],
                "num_samples_per_bucket": [
                    "List[int]"
                ]
            }
        },
        "RawParallelDatasetLoader._convert_to_adj_matrix": {
            "name": "_convert_to_adj_matrix",
            "location": 518,
            "return": [
                "Tuple[(np.ndarray, list)]"
            ],
            "arguments": {
                "self": [],
                "bucket_size": [
                    "int",
                    "None",
                    "Optional[int]",
                    "tuple[]",
                    "typing.Callable[, ]",
                    "numpy.ndarray",
                    "tuple",
                    "bool",
                    "Callable"
                ],
                "data_src_graphs": [
                    "numpy.ndarray",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "str",
                    "bytes",
                    "Iterator[bytes]",
                    "Callable[[int], float]"
                ]
            }
        },
        "RawParallelDatasetLoader._get_graph_positions": {
            "name": "_get_graph_positions",
            "location": 551,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "bucket_size": [
                    "float",
                    "str",
                    "int",
                    "list[str]",
                    "raiden.utils.AdditionalHash",
                    "list[int]",
                    "List[str]",
                    "List[int]"
                ],
                "data_src_graphs": [
                    "bytes",
                    "int"
                ],
                "global_index_list": [
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "RawParallelDatasetLoader._find_root": {
            "name": "_find_root",
            "location": 571,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "adj": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[int]",
                    "logging.LogRecord"
                ]
            }
        },
        "RawParallelDatasetLoader._fill_pos": {
            "name": "_fill_pos",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dist": [
                    "int",
                    "metrics_backend.utils.Address"
                ],
                "curr_node": [
                    "List[int]",
                    "list[int]",
                    "List[T]",
                    "str",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "positions": [
                    "raiden.utils.Any",
                    "float",
                    "list",
                    "Set[int]"
                ],
                "adj": [
                    "float",
                    "bool",
                    "raiden.utils.Address"
                ]
            }
        },
        "LengthStatistics.__init__": {
            "name": "__init__",
            "location": 975,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_sents": [
                    "int"
                ],
                "length_ratio_mean": [
                    "float"
                ],
                "length_ratio_std": [
                    "float"
                ]
            }
        },
        "DataStatistics.__init__": {
            "name": "__init__",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_sents": [
                    "int"
                ],
                "num_discarded": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "num_tokens_source": [
                    "bool",
                    "str",
                    "int",
                    "list[D]",
                    "Optional[List[\"CustomLineItemDraft\"]]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "num_tokens_target": [
                    "str",
                    "bool",
                    "tuple[typing.Union[int,int,int]]",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "num_unks_source": [
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "num_unks_target": [
                    "int",
                    "tuple",
                    "tuple[]"
                ],
                "max_observed_len_source": [
                    "bool",
                    "float",
                    "int",
                    "None",
                    "Optional[Union[float, int]]",
                    "Optional[int]"
                ],
                "max_observed_len_target": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "size_vocab_source": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "list[int]",
                    "List[int]"
                ],
                "size_vocab_target": [
                    "int",
                    "str",
                    "bool"
                ],
                "length_ratio_mean": [
                    "bool",
                    "tuple[]",
                    "str",
                    "int",
                    "tuple",
                    "None",
                    "Optional[str]",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]"
                ],
                "length_ratio_std": [
                    "bool",
                    "tuple[]",
                    "str",
                    "int",
                    "tuple",
                    "None",
                    "Optional[str]",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]"
                ],
                "buckets": [
                    "List[Tuple[(int, int)]]"
                ],
                "num_sents_per_bucket": [
                    "List[int]"
                ],
                "mean_len_target_per_bucket": [
                    "List[Optional[float]]"
                ]
            }
        },
        "DataStatistics.log": {
            "name": "log",
            "location": 1020,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_batch_sizes": [
                    "Optional[List[BucketBatchSize]]"
                ]
            }
        },
        "DataInfo.__init__": {
            "name": "__init__",
            "location": 1054,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]"
                ],
                "target": [
                    "str"
                ],
                "source_vocabs": [
                    "List[Optional[str]]"
                ],
                "target_vocab": [
                    "Optional[str]"
                ],
                "shared_vocab": [
                    "bool"
                ],
                "num_shards": [
                    "int"
                ]
            }
        },
        "DataConfig.__init__": {
            "name": "__init__",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_statistics": [
                    "DataStatistics"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "num_source_factors": [
                    "int"
                ],
                "source_with_eos": [
                    "bool"
                ]
            }
        },
        "GraphReader.__init__": {
            "name": "__init__",
            "location": 1152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "vocabulary": [
                    "Optional[Dict[(str, int)]]"
                ],
                "limit": [
                    "Optional[int]"
                ]
            }
        },
        "GraphReader.__iter__": {
            "name": "__iter__",
            "location": 1160,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceReader.__init__": {
            "name": "__init__",
            "location": 1179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "vocabulary": [
                    "Optional[Dict[(str, int)]]"
                ],
                "add_bos": [
                    "bool"
                ],
                "add_eos": [
                    "bool"
                ],
                "limit": [
                    "Optional[int]"
                ]
            }
        },
        "SequenceReader.__iter__": {
            "name": "__iter__",
            "location": 1202,
            "return": [
                "Generator[(Optional[list], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileListReader.__init__": {
            "name": "__init__",
            "location": 1318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "FileListReader.__next__": {
            "name": "__next__",
            "location": 1326,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.__init__": {
            "name": "__init__",
            "location": 1388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "list"
                ],
                "target": [
                    "list"
                ],
                "label": [
                    "list"
                ],
                "src_graphs": [
                    "list"
                ],
                "src_positions": [
                    "list"
                ]
            }
        },
        "ParallelDataSet.__len__": {
            "name": "__len__",
            "location": 1404,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.get_bucket_counts": {
            "name": "get_bucket_counts",
            "location": 1407,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.save": {
            "name": "save",
            "location": 1410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "ParallelDataSet.load": {
            "name": "load",
            "location": 1417,
            "return": [
                "ParallelDataSet"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "ParallelDataSet.fill_up": {
            "name": "fill_up",
            "location": 1431,
            "return": [
                "ParallelDataSet"
            ],
            "arguments": {
                "self": [
                    "_TParallelDataSet"
                ],
                "bucket_batch_sizes": [
                    "List[BucketBatchSize]"
                ],
                "fill_up": [
                    "str"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "ParallelDataSet.permute": {
            "name": "permute",
            "location": 1482,
            "return": [
                "ParallelDataSet"
            ],
            "arguments": {
                "self": [
                    "_TParallelDataSet"
                ],
                "permutations": [
                    "list"
                ]
            }
        },
        "BaseParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "str",
                    "Optional[str]"
                ],
                "batch_size": [
                    "str",
                    "bytes",
                    "int"
                ],
                "bucket_batch_sizes": [
                    "bytes",
                    "str",
                    "int"
                ],
                "source_data_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "target_data_name": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "os.PathLike"
                ],
                "src_graphs_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "src_positions_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "label_name": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "num_factors": [
                    "int"
                ],
                "dtype": [
                    "typing.Text",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "BaseParallelSampleIter.reset": {
            "name": "reset",
            "location": 1627,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1631,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.next": {
            "name": "next",
            "location": 1635,
            "return": [
                "mxnet.io.DataBatch",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "BaseParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "ShardedParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shards_fnames": [
                    "List[str]"
                ],
                "buckets": [
                    "int",
                    "float",
                    "typing.Sequence[typing.Sequence[int]]",
                    "bool",
                    "Sequence[Sequence[int]]"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "typing.Sequence[typing.Sequence[int]]",
                    "bool",
                    "Sequence[Sequence[int]]"
                ],
                "bucket_batch_sizes": [
                    "int",
                    "float",
                    "typing.Sequence[typing.Sequence[int]]",
                    "bool",
                    "Sequence[Sequence[int]]"
                ],
                "fill_up": [
                    "str"
                ],
                "source_data_name": [
                    "int",
                    "bool",
                    "Sequence[Sequence[int]]",
                    "float"
                ],
                "target_data_name": [
                    "int",
                    "bool",
                    "Sequence[Sequence[int]]",
                    "float"
                ],
                "label_name": [
                    "int",
                    "bool",
                    "Sequence[Sequence[int]]",
                    "float"
                ],
                "num_factors": [
                    "int"
                ],
                "dtype": [
                    "typing.Text",
                    "int",
                    "bool",
                    "Sequence[Sequence[int]]",
                    "float"
                ]
            }
        },
        "ShardedParallelSampleIter._load_shard": {
            "name": "_load_shard",
            "location": 1674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.reset": {
            "name": "reset",
            "location": 1688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1712,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.next": {
            "name": "next",
            "location": 1716,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "ShardedParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "ParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "ParallelDataSet"
                ],
                "buckets": [
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "batch_size": [
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "bucket_batch_sizes": [
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "source_data_name": [
                    "bool",
                    "int",
                    "List[int]"
                ],
                "target_data_name": [
                    "bool",
                    "int",
                    "List[int]"
                ],
                "src_graphs_name": [
                    "bool",
                    "int",
                    "List[int]"
                ],
                "src_positions_name": [
                    "bool",
                    "int",
                    "List[int]"
                ],
                "label_name": [
                    "bool",
                    "int",
                    "List[int]"
                ],
                "num_factors": [
                    "int"
                ],
                "dtype": [
                    "typing.Text",
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ParallelSampleIter.reset": {
            "name": "reset",
            "location": 1776,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1791,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.next": {
            "name": "next",
            "location": 1797,
            "return": [
                "bytes",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "ParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/decoder.py": {
        "get_decoder": {
            "name": "get_decoder",
            "location": 37,
            "return": [
                "Decoder"
            ],
            "arguments": {
                "config": [
                    "Union[(ConvolutionalDecoderConfig, RecurrentDecoderConfig, transformer.TransformerConfig)]"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "Decoder.register": {
            "name": "register",
            "location": 56,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": [],
                "config_type": [
                    "Type[Union[(ConvolutionalDecoderConfig, RecurrentDecoderConfig, transformer.TransformerConfig)]]"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "Decoder.get_decoder": {
            "name": "get_decoder",
            "location": 72,
            "return": [
                "Decoder"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDecoder]"
                ],
                "config": [
                    "Union[(ConvolutionalDecoderConfig, RecurrentDecoderConfig, transformer.TransformerConfig)]"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "Decoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [
                    "int"
                ],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [
                    "int"
                ]
            }
        },
        "Decoder.decode_step": {
            "name": "decode_step",
            "location": 116,
            "return": [
                "Tuple[(Any, Any, list)]"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "int"
                ],
                "target_embed_prev": [],
                "source_encoded_max_length": [
                    "int"
                ]
            }
        },
        "Decoder.reset": {
            "name": "reset",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.init_states": {
            "name": "init_states",
            "location": 150,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [
                    "int"
                ]
            }
        },
        "Decoder.state_variables": {
            "name": "state_variables",
            "location": 166,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "target_max_length": [
                    "int"
                ]
            }
        },
        "Decoder.state_shapes": {
            "name": "state_shapes",
            "location": 176,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "target_max_length": [
                    "int"
                ],
                "source_encoded_max_length": [
                    "int"
                ],
                "source_encoded_depth": [
                    "int"
                ]
            }
        },
        "Decoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 193,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "transformer.TransformerConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "TransformerDecoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [
                    "int"
                ],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [
                    "int"
                ]
            }
        },
        "TransformerDecoder.decode_step": {
            "name": "decode_step",
            "location": 280,
            "return": [
                "Tuple[(Any, Any, list)]"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "int"
                ],
                "target_embed_prev": [],
                "source_encoded_max_length": [
                    "int"
                ]
            }
        },
        "TransformerDecoder._get_cache_per_layer": {
            "name": "_get_cache_per_layer",
            "location": 343,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "list"
                ]
            }
        },
        "TransformerDecoder.reset": {
            "name": "reset",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 360,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.init_states": {
            "name": "init_states",
            "location": 366,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [
                    "int"
                ]
            }
        },
        "TransformerDecoder.state_variables": {
            "name": "state_variables",
            "location": 381,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "target_max_length": [
                    "int"
                ]
            }
        },
        "TransformerDecoder.state_shapes": {
            "name": "state_shapes",
            "location": 396,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "target_max_length": [
                    "int"
                ],
                "source_encoded_max_length": [
                    "int"
                ],
                "source_encoded_depth": [
                    "int"
                ]
            }
        },
        "TransformerDecoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 426,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoderConfig.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_seq_len_source": [
                    "int"
                ],
                "rnn_config": [
                    "rnn.RNNConfig"
                ],
                "attention_config": [
                    "rnn_attention.AttentionConfig"
                ],
                "hidden_dropout": [
                    "float"
                ],
                "state_init": [
                    "str"
                ],
                "state_init_lhuc": [
                    "bool"
                ],
                "context_gating": [
                    "bool"
                ],
                "layer_normalization": [
                    "bool"
                ],
                "attention_in_upper_layers": [
                    "bool"
                ],
                "dtype": [
                    "str"
                ],
                "enc_last_hidden_concat_to_embedding": [
                    "bool"
                ]
            }
        },
        "RecurrentDecoder.__init__": {
            "name": "__init__",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "RecurrentDecoderConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "RecurrentDecoder._create_state_init_parameters": {
            "name": "_create_state_init_parameters",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [
                    "int"
                ],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [
                    "int"
                ]
            }
        },
        "RecurrentDecoder.decode_step": {
            "name": "decode_step",
            "location": 621,
            "return": [
                "Tuple[(Any, Any, list)]"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "int"
                ],
                "target_embed_prev": [],
                "source_encoded_max_length": [
                    "int"
                ]
            }
        },
        "RecurrentDecoder.reset": {
            "name": "reset",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 686,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.init_states": {
            "name": "init_states",
            "location": 692,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [
                    "int"
                ]
            }
        },
        "RecurrentDecoder.state_variables": {
            "name": "state_variables",
            "location": 711,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "target_max_length": [
                    "int"
                ]
            }
        },
        "RecurrentDecoder.state_shapes": {
            "name": "state_shapes",
            "location": 725,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "target_max_length": [
                    "int"
                ],
                "source_encoded_max_length": [
                    "int"
                ],
                "source_encoded_depth": [
                    "int"
                ]
            }
        },
        "RecurrentDecoder.get_rnn_cells": {
            "name": "get_rnn_cells",
            "location": 758,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.get_initial_state": {
            "name": "get_initial_state",
            "location": 767,
            "return": [
                "RecurrentDecoderState"
            ],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_length": []
            }
        },
        "RecurrentDecoder._step": {
            "name": "_step",
            "location": 830,
            "return": [
                "Tuple[(RecurrentDecoderState, rnn_attention.AttentionState)]"
            ],
            "arguments": {
                "self": [],
                "word_vec_prev": [],
                "state": [
                    "RecurrentDecoderState"
                ],
                "attention_func": [
                    "Callable"
                ],
                "attention_state": [
                    "rnn_attention.AttentionState"
                ],
                "seq_idx": [
                    "int"
                ],
                "enc_last_hidden": [
                    "None"
                ]
            }
        },
        "RecurrentDecoder._hidden_mlp": {
            "name": "_hidden_mlp",
            "location": 891,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_concat": [],
                "seq_idx": [
                    "int"
                ]
            }
        },
        "RecurrentDecoder._context_gate": {
            "name": "_context_gate",
            "location": 905,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_concat": [],
                "rnn_output": [],
                "attention_state": [
                    "rnn_attention.AttentionState"
                ],
                "seq_idx": [
                    "int"
                ]
            }
        },
        "ConvolutionalDecoderConfig.__init__": {
            "name": "__init__",
            "location": 954,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cnn_config": [
                    "convolution.ConvolutionConfig"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "num_embed": [
                    "int"
                ],
                "encoder_num_hidden": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "positional_embedding_type": [
                    "str"
                ],
                "project_qkv": [
                    "bool"
                ],
                "hidden_dropout": [
                    "float"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "ConvolutionalDecoder.__init__": {
            "name": "__init__",
            "location": 996,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "ConvolutionalDecoderConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "ConvolutionalDecoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 1028,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [
                    "int"
                ],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [
                    "int"
                ]
            }
        },
        "ConvolutionalDecoder._decode": {
            "name": "_decode",
            "location": 1057,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": [
                    "int"
                ]
            }
        },
        "ConvolutionalDecoder.decode_step": {
            "name": "decode_step",
            "location": 1100,
            "return": [
                "Tuple[(Any, Any, list)]"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "int"
                ],
                "target_embed_prev": [],
                "source_encoded_max_length": [
                    "int"
                ]
            }
        },
        "ConvolutionalDecoder.reset": {
            "name": "reset",
            "location": 1184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1187,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalDecoder.init_states": {
            "name": "init_states",
            "location": 1193,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [
                    "int"
                ]
            }
        },
        "ConvolutionalDecoder.state_variables": {
            "name": "state_variables",
            "location": 1220,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "target_max_length": [
                    "int"
                ]
            }
        },
        "ConvolutionalDecoder.state_shapes": {
            "name": "state_shapes",
            "location": 1233,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "target_max_length": [
                    "int"
                ],
                "source_encoded_max_length": [
                    "int"
                ],
                "source_encoded_depth": [
                    "int"
                ]
            }
        },
        "ConvolutionalDecoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 1259,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.register.wrapper": {
            "name": "wrapper",
            "location": 65,
            "return": [],
            "arguments": {
                "target_cls": []
            }
        }
    },
    "DCGCN-master/sockeye/embeddings.py": {
        "compute_sims": {
            "name": "compute_sims",
            "location": 36,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "normalize": [
                    "bool"
                ]
            }
        },
        "nearest_k": {
            "name": "nearest_k",
            "location": 56,
            "return": [
                "Iterable[Tuple[(int, float)]]"
            ],
            "arguments": {
                "similarity_matrix": [
                    "str",
                    "int",
                    "float"
                ],
                "query_word_id": [
                    "int"
                ],
                "k": [
                    "int"
                ],
                "gamma": [
                    "float"
                ]
            }
        },
        "get_embedding_parameter_names": {
            "name": "get_embedding_parameter_names",
            "location": 74,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "config": [
                    "model.ModelConfig"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "embeddings": {
            "name": "embeddings",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/encoder.py": {
        "get_encoder": {
            "name": "get_encoder",
            "location": 39,
            "return": [
                "Encoder"
            ],
            "arguments": {
                "config": [
                    "Union[(ConvolutionalEncoderConfig, EmptyEncoderConfig, RecurrentEncoderConfig, transformer.TransformerConfig)]"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "get_recurrent_encoder": {
            "name": "get_recurrent_encoder",
            "location": 140,
            "return": [
                "Encoder"
            ],
            "arguments": {
                "config": [
                    "RecurrentEncoderConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "get_convolutional_encoder": {
            "name": "get_convolutional_encoder",
            "location": 193,
            "return": [
                "Encoder"
            ],
            "arguments": {
                "config": [
                    "ConvolutionalEncoderConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "get_gcn_encoder": {
            "name": "get_gcn_encoder",
            "location": 213,
            "return": [
                "Encoder"
            ],
            "arguments": {
                "config": [
                    "GraphConvolutionEncoderConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "get_transformer_encoder": {
            "name": "get_transformer_encoder",
            "location": 237,
            "return": [
                "Encoder"
            ],
            "arguments": {
                "config": [
                    "transformer.TransformerConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "_get_positional_embedding_params": {
            "name": "_get_positional_embedding_params",
            "location": 778,
            "return": [
                "Tuple[(Callable, dict)]"
            ],
            "arguments": {
                "positional_embedding_type": [
                    "str"
                ],
                "num_embed": [
                    "int"
                ],
                "max_seq_len": [
                    "int"
                ],
                "embed_dropout": [
                    "float"
                ],
                "fixed_pos_embed_scale_up_input": [
                    "bool"
                ],
                "fixed_pos_embed_scale_down_positions": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "get_positional_embedding": {
            "name": "get_positional_embedding",
            "location": 805,
            "return": [
                "PositionalEncoder"
            ],
            "arguments": {
                "positional_embedding_type": [
                    "str"
                ],
                "num_embed": [
                    "int"
                ],
                "max_seq_len": [
                    "int"
                ],
                "fixed_pos_embed_scale_up_input": [
                    "bool"
                ],
                "fixed_pos_embed_scale_down_positions": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "RecurrentEncoderConfig.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_config": [
                    "rnn.RNNConfig"
                ],
                "conv_config": [
                    "Optional[ConvolutionalEmbeddingConfig]"
                ],
                "reverse_input": [
                    "bool"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "GraphConvolutionEncoderConfig.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gcn_config": [
                    "gcn.GCNConfig"
                ],
                "positional_embedding_type": [
                    "str"
                ],
                "num_embed": [
                    "int"
                ],
                "embed_dropout": [
                    "float"
                ],
                "pos_num_embed": [
                    "int"
                ],
                "max_seq_len": [
                    "int"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "ConvolutionalEncoderConfig.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "cnn_config": [
                    "convolution.ConvolutionConfig"
                ],
                "num_layers": [
                    "int"
                ],
                "positional_embedding_type": [
                    "str"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "EmptyEncoderConfig.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int"
                ],
                "num_hidden": [
                    "int"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "Encoder.encode": {
            "name": "encode",
            "location": 276,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "dict[, ]",
                    "str",
                    "dict",
                    "typing.AnyStr",
                    "AnyStr",
                    "bool"
                ],
                "data_length": [
                    "int",
                    "dict[, ]",
                    "str",
                    "dict",
                    "typing.AnyStr",
                    "AnyStr",
                    "bool"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "Encoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 292,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Encoder.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 298,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "seq_len": [
                    "int"
                ]
            }
        },
        "Encoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 304,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertLayout.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_layout": [
                    "str"
                ],
                "num_hidden": [
                    "int"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "ConvertLayout.encode": {
            "name": "encode",
            "location": 326,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str"
                ],
                "data_length": [
                    "int",
                    "str"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "ConvertLayout.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 342,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseSequence.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "ReverseSequence.encode": {
            "name": "encode",
            "location": 357,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "data_length": [
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "ReverseSequence.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 365,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactorConfig.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int"
                ],
                "num_embed": [
                    "int"
                ]
            }
        },
        "EmbeddingConfig.__init__": {
            "name": "__init__",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int"
                ],
                "num_embed": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "factor_configs": [
                    "Optional[List[FactorConfig]]"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "Embedding.__init__": {
            "name": "__init__",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "EmbeddingConfig"
                ],
                "prefix": [
                    "str"
                ],
                "embed_weight": [
                    "config.Config",
                    "None"
                ],
                "is_source": [
                    "bool"
                ]
            }
        },
        "Embedding.encode": {
            "name": "encode",
            "location": 428,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "Tuple[int, int, bytearray]",
                    "tuple[typing.Union[int,int,bytearray]]"
                ],
                "data_length": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "Embedding.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 472,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassThroughEmbeddingConfig.__init__": {
            "name": "__init__",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassThroughEmbedding.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "PassThroughEmbeddingConfig"
                ]
            }
        },
        "PassThroughEmbedding.encode": {
            "name": "encode",
            "location": 497,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str"
                ],
                "data_length": [
                    "int",
                    "str"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "PassThroughEmbedding.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 511,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionalEncoder.encode_positions": {
            "name": "encode_positions",
            "location": 520,
            "return": [
                "mxnet.sym.Symbol",
                "None"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ]
            }
        },
        "AddSinCosPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "scale_up_input": [
                    "bool"
                ],
                "scale_down_positions": [
                    "bool"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "AddSinCosPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 557,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "List[bytes]",
                    "str",
                    "bytes"
                ],
                "data_length": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "seq_len": [
                    "int"
                ]
            }
        },
        "AddSinCosPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 582,
            "return": [
                "Iterable[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "data": [
                    "int",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "AddSinCosPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 614,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddLearnedPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int"
                ],
                "max_seq_len": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "embed_weight": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "AddLearnedPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 645,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "str",
                    "defaultdict",
                    "typing.DefaultDict"
                ],
                "data_length": [
                    "dict",
                    "bytes",
                    "dict[, ]"
                ],
                "seq_len": [
                    "int"
                ]
            }
        },
        "AddLearnedPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 667,
            "return": [
                "Iterable[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "raiden.utils.Address"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "AddLearnedPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 684,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddLearnedPositionalEmbeddings.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 687,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatLearnedPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int"
                ],
                "max_seq_len": [
                    "int"
                ],
                "embed_dropout": [
                    "float"
                ],
                "prefix": [
                    "str"
                ],
                "embed_weight": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "ConcatLearnedPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 711,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "data_length": [
                    "bytes",
                    "bool",
                    "str",
                    "dict[, ]",
                    "raiden.utils.Any",
                    "dict"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "ConcatLearnedPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 732,
            "return": [
                "Iterable[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "raiden.utils.Address"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "ConcatLearnedPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 744,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatLearnedPositionalEmbeddings.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 747,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoOpPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 759,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "NoOpPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 763,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "str"
                ],
                "data_length": [
                    "int",
                    "str"
                ],
                "seq_len": [
                    "int"
                ]
            }
        },
        "NoOpPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 769,
            "return": [
                "bool",
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ]
            }
        },
        "NoOpPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 774,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncoderSequence.__init__": {
            "name": "__init__",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoders": [
                    "List[Encoder]"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "EncoderSequence.encode": {
            "name": "encode",
            "location": 832,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "data_length": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "bytes",
                    "None",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Union[int, bytes]"
                ]
            }
        },
        "EncoderSequence.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 850,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncoderSequence.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 856,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "seq_len": [
                    "int"
                ]
            }
        },
        "EncoderSequence.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 864,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncoderSequence.append": {
            "name": "append",
            "location": 872,
            "return": [
                "Encoder"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "infer_hidden": [
                    "bool"
                ]
            }
        },
        "EmptyEncoder.__init__": {
            "name": "__init__",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "EmptyEncoderConfig"
                ]
            }
        },
        "EmptyEncoder.encode": {
            "name": "encode",
            "location": 907,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "float",
                    "list[int]",
                    "Union[int, float]",
                    "List[int]",
                    "bool"
                ],
                "data_length": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "EmptyEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 923,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.__init__": {
            "name": "__init__",
            "location": 939,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_config": [
                    "rnn.RNNConfig"
                ],
                "prefix": [
                    "str"
                ],
                "layout": [
                    "str"
                ]
            }
        },
        "RecurrentEncoder.encode": {
            "name": "encode",
            "location": 948,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ],
                "data_length": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "RecurrentEncoder.get_rnn_cells": {
            "name": "get_rnn_cells",
            "location": 965,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 971,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BiDirectionalRNNEncoder.__init__": {
            "name": "__init__",
            "location": 989,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_config": [
                    "rnn.RNNConfig"
                ],
                "prefix": [
                    "config.ConfigFile",
                    "config.Config",
                    "Callable",
                    "pyramid.config.Configurator"
                ],
                "layout": [
                    "config.ConfigFile",
                    "config.Config",
                    "Callable",
                    "pyramid.config.Configurator"
                ],
                "encoder_class": [
                    "Callable"
                ]
            }
        },
        "BiDirectionalRNNEncoder.encode": {
            "name": "encode",
            "location": 1012,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "bytes",
                    "bytearray",
                    "int"
                ],
                "data_length": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "BiDirectionalRNNEncoder._encode": {
            "name": "_encode",
            "location": 1032,
            "return": [
                "int",
                "dict[, ]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "defaultdict",
                    "typing.DefaultDict"
                ],
                "data_length": [
                    "int",
                    "defaultdict",
                    "typing.DefaultDict"
                ],
                "seq_len": [
                    "int"
                ]
            }
        },
        "BiDirectionalRNNEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1051,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BiDirectionalRNNEncoder.get_rnn_cells": {
            "name": "get_rnn_cells",
            "location": 1057,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalEncoder.__init__": {
            "name": "__init__",
            "location": 1072,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "ConvolutionalEncoderConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "ConvolutionalEncoder.encode": {
            "name": "encode",
            "location": 1088,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "dict[, ]"
                ],
                "data_length": [
                    "bool",
                    "bytes",
                    "str",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]",
                    "type",
                    "typing.Type",
                    "Match[str]",
                    "typing.Match"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "ConvolutionalEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1114,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphConvolutionEncoder.__init__": {
            "name": "__init__",
            "location": 1120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "gcn.GCNConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "GraphConvolutionEncoder.encode": {
            "name": "encode",
            "location": 1127,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int"
                ],
                "data_length": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "str",
                    "int",
                    "list[str]",
                    "List[str]"
                ]
            }
        },
        "GraphConvolutionEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1138,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 1153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "transformer.TransformerConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "TransformerEncoder.encode": {
            "name": "encode",
            "location": 1165,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int"
                ],
                "data_length": [
                    "int",
                    "str",
                    "raiden.utils.Address"
                ],
                "seq_len": [
                    "int"
                ],
                "metadata": [
                    "int",
                    "None",
                    "dict",
                    "str",
                    "AnyStr",
                    "dict[, ]",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "TransformerEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1196,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalEmbeddingConfig.__init__": {
            "name": "__init__",
            "location": 1218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embed": [
                    "int"
                ],
                "output_dim": [
                    "int"
                ],
                "max_filter_width": [
                    "int"
                ],
                "num_filters": [
                    "Tuple[(int, ...)]"
                ],
                "pool_stride": [
                    "int"
                ],
                "num_highway_layers": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "add_positional_encoding": [
                    "bool"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "ConvolutionalEmbeddingEncoder.__init__": {
            "name": "__init__",
            "location": 1255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "ConvolutionalEmbeddingConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "ConvolutionalEmbeddingEncoder.encode": {
            "name": "encode",
            "location": 1289,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "data_length": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]",
                    "List[int]",
                    "list[int]"
                ],
                "seq_len": [
                    "int"
                ]
            }
        },
        "ConvolutionalEmbeddingEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1404,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalEmbeddingEncoder.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 1410,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "seq_len": [
                    "int"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/evaluate.py": {
        "raw_corpus_bleu": {
            "name": "raw_corpus_bleu",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]"
                ],
                "references": [
                    "Iterable[str]"
                ],
                "offset": [
                    "Optional[float]"
                ]
            }
        },
        "raw_corpus_chrf": {
            "name": "raw_corpus_chrf",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]"
                ],
                "references": [
                    "Iterable[str]"
                ]
            }
        },
        "raw_corpus_rouge1": {
            "name": "raw_corpus_rouge1",
            "location": 60,
            "return": [
                "float"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]"
                ],
                "references": [
                    "Iterable[str]"
                ]
            }
        },
        "raw_corpus_rouge2": {
            "name": "raw_corpus_rouge2",
            "location": 71,
            "return": [
                "float"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]"
                ],
                "references": [
                    "Iterable[str]"
                ]
            }
        },
        "raw_corpus_rougel": {
            "name": "raw_corpus_rougel",
            "location": 82,
            "return": [
                "float"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]"
                ],
                "references": [
                    "Iterable[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_print_mean_std_score": {
            "name": "_print_mean_std_score",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics": [
                    "List[Tuple[(str, Callable)]]"
                ],
                "scores": [
                    "Dict[(str, List[float])]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/extract_parameters.py": {
        "_extract": {
            "name": "_extract",
            "location": 33,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "param_names": [
                    "List[str]"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ],
                "ext_params": [
                    "Dict[(str, np.ndarray)]"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 53,
            "return": [
                "Dict[(str, np.ndarray)]"
            ],
            "arguments": {
                "param_path": [
                    "str"
                ],
                "param_names": [
                    "List[str]"
                ],
                "list_all": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "extract_parameters": {
            "name": "extract_parameters",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/gcn.py": {
        "get_gcn": {
            "name": "get_gcn",
            "location": 12,
            "return": [
                "GCNCell"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "dict[str, list[str]]",
                    "cerise.config.Config",
                    "backup.config.Config",
                    "app.config.MQConfig",
                    "config.Config",
                    "Dict[str, List[str]]"
                ],
                "prefix": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "dict[str, list[str]]",
                    "cerise.config.Config",
                    "backup.config.Config",
                    "app.config.MQConfig",
                    "config.Config",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "GCNConfig.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int"
                ],
                "output_dim": [
                    "int"
                ],
                "directions": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "adj_norm": [
                    "bool"
                ],
                "activation": [
                    "str"
                ],
                "dropout": [
                    "float"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "GCNCell.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "None",
                    "float",
                    "Optional[\"ShippingRateInputType\"]",
                    "list[str]",
                    "bool",
                    "List[str]"
                ],
                "output_dim": [
                    "float",
                    "bool",
                    "str",
                    "list[]",
                    "list",
                    "Optional[List[Any]]"
                ],
                "directions": [
                    "list[]",
                    "int",
                    "list",
                    "str",
                    "set[tuple[typing.Union[str,str]]]",
                    "bytes",
                    "bool",
                    "Set[Tuple[str, str]]",
                    "list[str]",
                    "List[str]"
                ],
                "num_layers": [
                    "int",
                    "str",
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "adj_norm": [
                    "bool",
                    "float",
                    "int",
                    "bytes",
                    "torch.utils.data.DataLoader",
                    "Iterator[int]",
                    "Tuple[int]"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "list",
                    "List[str]",
                    "Tuple[str, str]"
                ],
                "activation": [
                    "typing.Text",
                    "list",
                    "int",
                    "bool",
                    "Set[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "dropout": [
                    "float",
                    "list",
                    "int",
                    "bool",
                    "Set[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "GCNCell.convolve": {
            "name": "convolve",
            "location": 99,
            "return": [
                "list[bytes]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "adj": [
                    "BaseException"
                ],
                "inputs": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "seq_len": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GCNCell.reset": {
            "name": "reset",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphConvolution.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "heads": [
                    "int"
                ],
                "output_dim": [
                    "int"
                ],
                "directions": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "norm": [
                    "bool"
                ],
                "activation": [
                    "str"
                ]
            }
        },
        "GraphConvolution.__call__": {
            "name": "__call__",
            "location": 176,
            "return": [
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]",
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "adj": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "inputs": [
                    "str",
                    "float",
                    "int",
                    "typing.Type",
                    "Type",
                    "logging.LogRecord"
                ]
            }
        },
        "GraphConvolution._convolve": {
            "name": "_convolve",
            "location": 196,
            "return": [
                "str",
                "List[int]",
                "dict[, ]",
                "dict[str, str]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "adj": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list",
                    "bool"
                ],
                "inputs": [
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ],
                "i": [
                    "list",
                    "int",
                    "list[]",
                    "float",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/inference.py": {
        "load_models": {
            "name": "load_models",
            "location": 378,
            "return": [
                "Tuple[(List[InferenceModel], List[Dict[(str, int)]], Dict[(str, int)], Dict[(str, int)])]"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "Optional[float]",
                    "float",
                    "int",
                    "None"
                ],
                "max_input_len": [
                    "Optional[int]"
                ],
                "beam_size": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "edge_vocab": [
                    "Dict[(str, int)]"
                ],
                "model_folders": [
                    "List[str]"
                ],
                "checkpoints": [
                    "Optional[List[int]]"
                ],
                "softmax_temperature": [
                    "Optional[float]"
                ],
                "max_output_length_num_stds": [
                    "int"
                ],
                "decoder_return_logit_inputs": [
                    "bool"
                ],
                "cache_output_layer_w_b": [
                    "bool"
                ],
                "forced_max_output_len": [
                    "Optional[int]"
                ],
                "override_dtype": [
                    "Optional[str]"
                ]
            }
        },
        "models_max_input_output_length": {
            "name": "models_max_input_output_length",
            "location": 491,
            "return": [
                "Tuple[(int, Callable)]"
            ],
            "arguments": {
                "models": [
                    "List[InferenceModel]"
                ],
                "num_stds": [
                    "int"
                ],
                "forced_max_input_len": [
                    "Optional[int]"
                ],
                "forced_max_output_len": [
                    "Optional[int]"
                ]
            }
        },
        "get_max_input_output_length": {
            "name": "get_max_input_output_length",
            "location": 529,
            "return": [
                "Tuple[(int, Callable)]"
            ],
            "arguments": {
                "supported_max_seq_len_source": [
                    "Optional[int]"
                ],
                "supported_max_seq_len_target": [
                    "Optional[int]"
                ],
                "training_max_seq_len_source": [
                    "Optional[int]"
                ],
                "length_ratio_mean": [
                    "float"
                ],
                "length_ratio_std": [
                    "float"
                ],
                "num_stds": [
                    "int"
                ],
                "forced_max_input_len": [
                    "Optional[int]"
                ],
                "forced_max_output_len": [
                    "Optional[int]"
                ]
            }
        },
        "_bad_input": {
            "name": "_bad_input",
            "location": 692,
            "return": [
                "BadTranslatorInput"
            ],
            "arguments": {
                "sentence_id": [
                    "Union[(int, str)]"
                ],
                "reason": [
                    "str"
                ]
            }
        },
        "make_input_from_plain_string": {
            "name": "make_input_from_plain_string",
            "location": 697,
            "return": [
                "TranslatorInput"
            ],
            "arguments": {
                "sentence_id": [
                    "Union[(int, str)]"
                ],
                "string": [
                    "str"
                ],
                "graph": [
                    "str",
                    "bool",
                    "Dict[str, bool]",
                    "dict[str, bool]",
                    "float",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]"
                ],
                "edge_vocab": [
                    "str",
                    "bool"
                ]
            }
        },
        "make_input_from_json_string": {
            "name": "make_input_from_json_string",
            "location": 711,
            "return": [
                "TranslatorInput"
            ],
            "arguments": {
                "sentence_id": [
                    "Union[(int, str)]"
                ],
                "json_string": [
                    "str"
                ]
            }
        },
        "make_input_from_factored_string": {
            "name": "make_input_from_factored_string",
            "location": 760,
            "return": [
                "TranslatorInput"
            ],
            "arguments": {
                "sentence_id": [
                    "Union[(int, str)]"
                ],
                "factored_string": [
                    "str"
                ],
                "graph": [
                    "str"
                ],
                "translator": [
                    "Translator"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "make_input_from_multiple_strings": {
            "name": "make_input_from_multiple_strings",
            "location": 801,
            "return": [
                "TranslatorInput"
            ],
            "arguments": {
                "sentence_id": [
                    "Union[(int, str)]"
                ],
                "strings": [
                    "List[str]"
                ],
                "graph": [
                    "str"
                ],
                "edge_vocab": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "empty_translation": {
            "name": "empty_translation",
            "location": 869,
            "return": [
                "Translation"
            ],
            "arguments": {}
        },
        "_concat_translations": {
            "name": "_concat_translations",
            "location": 955,
            "return": [
                "Translation"
            ],
            "arguments": {
                "translations": [
                    "List[Translation]"
                ],
                "stop_ids": [
                    "Set[int]"
                ],
                "length_penalty": [
                    "LengthPenalty"
                ]
            }
        },
        "InferenceModel.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "model.ModelConfig"
                ],
                "params_fname": [
                    "str"
                ],
                "context": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "list[int]",
                    "List[int]"
                ],
                "edge_vocab_size": [
                    "int"
                ],
                "beam_size": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "softmax_temperature": [
                    "Optional[float]"
                ],
                "max_output_length_num_stds": [
                    "int"
                ],
                "decoder_return_logit_inputs": [
                    "bool"
                ],
                "cache_output_layer_w_b": [
                    "bool"
                ],
                "forced_max_output_len": [
                    "Optional[int]"
                ],
                "skip_softmax": [
                    "bool"
                ]
            }
        },
        "InferenceModel.num_source_factors": {
            "name": "num_source_factors",
            "location": 102,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.initialize": {
            "name": "initialize",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_input_length": [
                    "int"
                ],
                "get_max_output_length_function": [
                    "Callable"
                ]
            }
        },
        "InferenceModel._get_encoder_module": {
            "name": "_get_encoder_module",
            "location": 158,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel._get_decoder_module": {
            "name": "_get_decoder_module",
            "location": 204,
            "return": [
                "Tuple[(Any, Tuple[(int, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel._get_encoder_data_shapes": {
            "name": "_get_encoder_data_shapes",
            "location": 268,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "bucket_key": [
                    "int"
                ]
            }
        },
        "InferenceModel._get_decoder_data_shapes": {
            "name": "_get_decoder_data_shapes",
            "location": 286,
            "return": [
                "Union[str, IO]",
                "str"
            ],
            "arguments": {
                "self": [],
                "bucket_key": [
                    "Tuple[int, int]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "InferenceModel.run_encoder": {
            "name": "run_encoder",
            "location": 300,
            "return": [
                "ModelState"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "bool",
                    "metrics_backend.utils.Address"
                ],
                "source_max_length": [
                    "int"
                ],
                "source_graph": [
                    "str",
                    "int",
                    "bool",
                    "metrics_backend.utils.Address"
                ],
                "source_positions": [
                    "str",
                    "int",
                    "bool",
                    "metrics_backend.utils.Address"
                ]
            }
        },
        "InferenceModel.run_decoder": {
            "name": "run_decoder",
            "location": 327,
            "return": [
                "Tuple[(Any, Any, ModelState)]"
            ],
            "arguments": {
                "self": [],
                "prev_word": [
                    "bytes",
                    "TextIO",
                    "str",
                    "typing.TextIO",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "bucket_key": [
                    "Tuple[(int, int)]"
                ],
                "model_state": [
                    "ModelState"
                ]
            }
        },
        "InferenceModel.training_max_seq_len_source": {
            "name": "training_max_seq_len_source",
            "location": 346,
            "return": [
                "int",
                "Optional[Union[int, float]]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.training_max_seq_len_target": {
            "name": "training_max_seq_len_target",
            "location": 351,
            "return": [
                "int",
                "Optional[Union[int, float]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.max_supported_seq_len_source": {
            "name": "max_supported_seq_len_source",
            "location": 356,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.max_supported_seq_len_target": {
            "name": "max_supported_seq_len_target",
            "location": 361,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.length_ratio_mean": {
            "name": "length_ratio_mean",
            "location": 366,
            "return": [
                "int",
                "Optional[Union[int, float]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.length_ratio_std": {
            "name": "length_ratio_std",
            "location": 370,
            "return": [
                "int",
                "Optional[Union[int, float]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.source_with_eos": {
            "name": "source_with_eos",
            "location": 374,
            "return": [
                "str",
                "int",
                "Optional[logging.Logger]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_max_input_output_length.get_max_output_length": {
            "name": "get_max_output_length",
            "location": 586,
            "return": [
                "str",
                "raiden.utils.Any"
            ],
            "arguments": {
                "input_length": [
                    "int",
                    "str"
                ]
            }
        },
        "TranslatorInput.__init__": {
            "name": "__init__",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence_id": [
                    "Union[(int, str)]"
                ],
                "tokens": [
                    "List[str]"
                ],
                "graph": [
                    "List[Tuple[(int, int, int)]]"
                ],
                "factors": [
                    "Optional[List[List[str]]]"
                ],
                "constraints": [
                    "Optional[List[List[str]]]"
                ],
                "avoid_list": [
                    "Optional[List[List[str]]]"
                ]
            }
        },
        "TranslatorInput.__str__": {
            "name": "__str__",
            "location": 632,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.__len__": {
            "name": "__len__",
            "location": 636,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_factors": {
            "name": "num_factors",
            "location": 640,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.chunks": {
            "name": "chunks",
            "location": 646,
            "return": [
                "Generator[(TranslatorInput, None, None)]"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "TranslatorInput.with_eos": {
            "name": "with_eos",
            "location": 673,
            "return": [
                "ranslatorInput"
            ],
            "arguments": {
                "self": [
                    "_TTranslatorInput"
                ]
            }
        },
        "BadTranslatorInput.__init__": {
            "name": "__init__",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence_id": [
                    "Union[(int, str)]"
                ],
                "tokens": [
                    "List[str]"
                ]
            }
        },
        "TranslatorOutput.__init__": {
            "name": "__init__",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence_id": [
                    "Union[(int, str)]"
                ],
                "translation": [
                    "str"
                ],
                "tokens": [
                    "List[str]"
                ],
                "attention_matrix": [
                    "np.ndarray"
                ],
                "score": [
                    "float"
                ],
                "beam_histories": [
                    "Optional[List[Dict[(str, list)]]]"
                ]
            }
        },
        "Translation.__init__": {
            "name": "__init__",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_ids": [
                    "List[int]"
                ],
                "attention_matrix": [
                    "np.ndarray"
                ],
                "score": [
                    "float"
                ],
                "beam_history": [
                    "List[Dict[(str, list)]]"
                ]
            }
        },
        "ModelState.__init__": {
            "name": "__init__",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "list"
                ]
            }
        },
        "ModelState.sort_state": {
            "name": "sort_state",
            "location": 909,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "best_hyp_indices": [
                    "int",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "T"
                ]
            }
        },
        "LengthPenalty.__init__": {
            "name": "__init__",
            "location": 928,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alpha": [
                    "float"
                ],
                "beta": [
                    "float"
                ]
            }
        },
        "LengthPenalty.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 934,
            "return": [
                "float",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "F": [
                    "Callable[..., T]",
                    "typing.Callable[..., T]",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "lengths": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor",
                    "Dict[str, str]"
                ]
            }
        },
        "LengthPenalty.get": {
            "name": "get",
            "location": 945,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "lengths": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        },
        "Translator.__init__": {
            "name": "__init__",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "list[str]",
                    "list[]",
                    "List[str]",
                    "int",
                    "list",
                    "numpy.ndarray"
                ],
                "ensemble_mode": [
                    "str"
                ],
                "bucket_source_width": [
                    "int"
                ],
                "length_penalty": [
                    "LengthPenalty"
                ],
                "beam_prune": [
                    "float"
                ],
                "beam_search_stop": [
                    "str"
                ],
                "models": [
                    "List[InferenceModel]"
                ],
                "source_vocabs": [
                    "List[Dict[(str, int)]]"
                ],
                "target_vocab": [
                    "Dict[(str, int)]"
                ],
                "edge_vocab": [
                    "Dict[(str, int)]"
                ],
                "restrict_lexicon": [
                    "Optional[lexicon.TopKLexicon]"
                ],
                "avoid_list": [
                    "Optional[str]"
                ],
                "store_beam": [
                    "bool"
                ],
                "strip_unknown_words": [
                    "bool"
                ],
                "skip_topk": [
                    "bool"
                ]
            }
        },
        "Translator.max_input_length": {
            "name": "max_input_length",
            "location": 1145,
            "return": [
                "bool",
                "float",
                "Optional[int]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translator.num_source_factors": {
            "name": "num_source_factors",
            "location": 1155,
            "return": [
                "Set[str]",
                "bool",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translator._get_interpolation_func": {
            "name": "_get_interpolation_func",
            "location": 1159,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "ensemble_mode": [
                    "bool",
                    "bytes",
                    "str",
                    "Callable[[], None]",
                    "typing.Callable[[], None]",
                    "List[List[dict]]",
                    "list[list[dict[, ]]]"
                ]
            }
        },
        "Translator._linear_interpolation": {
            "name": "_linear_interpolation",
            "location": 1168,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "predictions": [
                    "float",
                    "str",
                    "typing.Callable[, ]",
                    "logging.LogRecord",
                    "numpy.ndarray",
                    "Callable"
                ]
            }
        },
        "Translator._log_linear_interpolation": {
            "name": "_log_linear_interpolation",
            "location": 1173,
            "return": [
                "float",
                "numpy.ndarray",
                "bool",
                "tuple",
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "predictions": [
                    "dict[, ]",
                    "dict",
                    "int"
                ]
            }
        },
        "Translator.translate": {
            "name": "translate",
            "location": 1181,
            "return": [
                "List[TranslatorOutput]"
            ],
            "arguments": {
                "self": [],
                "trans_inputs": [
                    "List[TranslatorInput]"
                ]
            }
        },
        "Translator._get_inference_input": {
            "name": "_get_inference_input",
            "location": 1284,
            "return": [
                "Tuple[(Any, int, Any, Any, List[Optional[List[List[int]]]], List[Optional[List[List[int]]]], Any)]"
            ],
            "arguments": {
                "self": [],
                "trans_inputs": [
                    "List[TranslatorInput]"
                ]
            }
        },
        "Translator._find_root": {
            "name": "_find_root",
            "location": 1360,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "adj": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[int]",
                    "logging.LogRecord"
                ]
            }
        },
        "Translator._fill_pos": {
            "name": "_fill_pos",
            "location": 1371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dist": [
                    "int",
                    "metrics_backend.utils.Address",
                    "busboy.model.TripId"
                ],
                "curr_node": [
                    "List[int]",
                    "list[int]",
                    "List[T]",
                    "str",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "positions": [
                    "raiden.utils.Any",
                    "float",
                    "list",
                    "Set[int]"
                ],
                "adj": [
                    "float",
                    "bool",
                    "raiden.utils.Address"
                ]
            }
        },
        "Translator._make_result": {
            "name": "_make_result",
            "location": 1385,
            "return": [
                "TranslatorOutput"
            ],
            "arguments": {
                "self": [],
                "trans_input": [
                    "TranslatorInput"
                ],
                "translation": [
                    "Translation"
                ]
            }
        },
        "Translator._concat_translations": {
            "name": "_concat_translations",
            "location": 1412,
            "return": [
                "Translation"
            ],
            "arguments": {
                "self": [],
                "translations": [
                    "List[Translation]"
                ]
            }
        },
        "Translator._translate_nd": {
            "name": "_translate_nd",
            "location": 1421,
            "return": [
                "List[Translation]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "Sequence",
                    "typing.Sequence[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Match[str]",
                    "typing.Match"
                ],
                "source_length": [
                    "int"
                ],
                "source_graph": [
                    "int",
                    "Sequence",
                    "typing.Sequence[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Match[str]",
                    "typing.Match"
                ],
                "source_positions": [
                    "int",
                    "Sequence",
                    "typing.Sequence[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Match[str]",
                    "typing.Match"
                ],
                "raw_constraints": [
                    "List[Optional[List[List[int]]]]"
                ],
                "raw_avoid_list": [
                    "List[Optional[List[List[int]]]]"
                ],
                "max_output_lengths": [
                    "int",
                    "Sequence",
                    "typing.Sequence[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Match[str]",
                    "typing.Match"
                ]
            }
        },
        "Translator._encode": {
            "name": "_encode",
            "location": 1441,
            "return": [
                "List[ModelState]"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "source_graph": [
                    "int"
                ],
                "source_positions": [
                    "int"
                ]
            }
        },
        "Translator._decode_step": {
            "name": "_decode_step",
            "location": 1454,
            "return": [
                "Tuple[(Any, Any, List[ModelState])]"
            ],
            "arguments": {
                "self": [],
                "prev_word": [
                    "int",
                    "str"
                ],
                "step": [
                    "int"
                ],
                "source_length": [
                    "int"
                ],
                "states": [
                    "List[ModelState]"
                ],
                "models_output_layer_w": [
                    "list"
                ],
                "models_output_layer_b": [
                    "list"
                ]
            }
        },
        "Translator._combine_predictions": {
            "name": "_combine_predictions",
            "location": 1498,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "probs": [
                    "list"
                ],
                "attention_probs": [
                    "list"
                ]
            }
        },
        "Translator._beam_search": {
            "name": "_beam_search",
            "location": 1521,
            "return": [
                "Tuple[(np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray, List[Optional[constrained.ConstrainedHypothesis]], Optional[List[Dict[(str, list)]]])]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bytearray"
                ],
                "source_length": [
                    "int"
                ],
                "source_graph": [
                    "list[]",
                    "list",
                    "str",
                    "list[str]",
                    "List[str]",
                    "Union[str, List[str]]"
                ],
                "source_positions": [
                    "list[]",
                    "list",
                    "str",
                    "list[str]",
                    "List[str]",
                    "Union[str, List[str]]"
                ],
                "raw_constraint_list": [
                    "List[Optional[List[List[int]]]]"
                ],
                "raw_avoid_list": [
                    "List[Optional[List[List[int]]]]"
                ],
                "max_output_lengths": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Translator._get_best_from_beam": {
            "name": "_get_best_from_beam",
            "location": 1783,
            "return": [
                "List[Translation]"
            ],
            "arguments": {
                "self": [],
                "best_hyp_indices": [
                    "np.ndarray"
                ],
                "best_word_indices": [
                    "np.ndarray"
                ],
                "attentions": [
                    "np.ndarray"
                ],
                "seq_scores": [
                    "np.ndarray"
                ],
                "lengths": [
                    "np.ndarray"
                ],
                "constraints": [
                    "List[Optional[constrained.ConstrainedHypothesis]]"
                ],
                "beam_histories": [
                    "Optional[List[Dict[(str, list)]]]"
                ]
            }
        },
        "Translator._get_best_word_indeces_for_kth_hypotheses": {
            "name": "_get_best_word_indeces_for_kth_hypotheses",
            "location": 1825,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "ks": [
                    "np.ndarray"
                ],
                "all_hyp_indices": [
                    "np.ndarray"
                ]
            }
        },
        "Translator._assemble_translation": {
            "name": "_assemble_translation",
            "location": 1850,
            "return": [
                "Translation"
            ],
            "arguments": {
                "sequence": [
                    "np.ndarray"
                ],
                "length": [
                    "np.ndarray"
                ],
                "attention_lists": [
                    "np.ndarray"
                ],
                "seq_score": [
                    "np.ndarray"
                ],
                "beam_history": [
                    "Optional[Dict[(str, list)]]"
                ]
            }
        },
        "Translator._print_beam": {
            "name": "_print_beam",
            "location": 1874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequences": [
                    "str",
                    "list[tuple[typing.Union[float,float]]]",
                    "List[Tuple[float, float]]",
                    "list[list[str]]",
                    "List[List[str]]",
                    "typing.Callable[int, None]",
                    "Callable[[int], None]",
                    "Callable[..., Awaitable[Any]]"
                ],
                "accumulated_scores": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "finished": [
                    "int",
                    "str"
                ],
                "inactive": [
                    "bool"
                ],
                "constraints": [
                    "List[Optional[constrained.ConstrainedHypothesis]]"
                ],
                "timestep": [
                    "int"
                ]
            }
        },
        "PruneHypotheses.__init__": {
            "name": "__init__",
            "location": 1911,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ],
                "beam_size": [
                    "int"
                ]
            }
        },
        "PruneHypotheses.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1916,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "F": [
                    "gluonts.model.common.Tensor",
                    "float",
                    "str",
                    "int"
                ],
                "best_word_indices": [
                    "typing.AbstractSet",
                    "gluonts.model.common.Tensor",
                    "dict[str, typing.Any]",
                    "AbstractSet[int]",
                    "Dict[str, Any]"
                ],
                "scores": [
                    "int",
                    "str",
                    "float",
                    "gluonts.model.common.Tensor"
                ],
                "finished": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]",
                    "Callable[[B], C]"
                ],
                "inf_array": [
                    "int",
                    "gluonts.model.common.Tensor",
                    "typing.Sequence[typing.Any]",
                    "typing.AbstractSet",
                    "Sequence[Any]",
                    "AbstractSet[int]"
                ],
                "zeros_array": [
                    "typing.AbstractSet",
                    "gluonts.model.common.Tensor",
                    "dict[str, typing.Any]",
                    "AbstractSet[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SortByIndex.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1938,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "F": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "indices": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TopK.__init__": {
            "name": "__init__",
            "location": 1947,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "vocab_size": [
                    "int"
                ]
            }
        },
        "TopK.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1961,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "F": [
                    "gluonts.model.common.Tensor"
                ],
                "scores": [
                    "gluonts.model.common.Tensor"
                ],
                "offset": [
                    "TextIO",
                    "bool",
                    "typing.TextIO"
                ]
            }
        },
        "Top1.__init__": {
            "name": "__init__",
            "location": 1988,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "Top1.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1999,
            "return": [
                "Tuple[(_T2, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "F": [
                    "bool",
                    "int"
                ],
                "scores": [
                    "bool",
                    "typing.Callable[[], typing.Any]",
                    "int",
                    "Callable[[], Any]"
                ],
                "offset": [
                    "_T2"
                ]
            }
        },
        "NormalizeAndUpdateFinished.__init__": {
            "name": "__init__",
            "location": 2023,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pad_id": [
                    "int"
                ],
                "eos_id": [
                    "int"
                ],
                "length_penalty_alpha": [
                    "float"
                ],
                "length_penalty_beta": [
                    "float"
                ]
            }
        },
        "NormalizeAndUpdateFinished.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 2033,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "F": [
                    "numpy.ndarray",
                    "int",
                    "List[T]"
                ],
                "best_word_indices": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[T]",
                    "List[Tuple[str, str]]",
                    "List[T]"
                ],
                "max_output_lengths": [
                    "float",
                    "gluonts.model.common.Tensor",
                    "numpy.array",
                    "T"
                ],
                "finished": [
                    "T",
                    "numpy.ndarray"
                ],
                "scores_accumulated": [
                    "int",
                    "list[float]",
                    "gluonts.model.common.Tensor",
                    "List[float]"
                ],
                "lengths": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "UpdateScores.__init__": {
            "name": "__init__",
            "location": 2062,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateScores.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 2066,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "F": [
                    "gluonts.model.common.Tensor",
                    "int"
                ],
                "scores": [
                    "int",
                    "bool"
                ],
                "finished": [
                    "typing.Callable[[], typing.Any]",
                    "int",
                    "Callable[[], Any]",
                    "gluonts.model.common.Tensor"
                ],
                "inactive": [
                    "typing.Callable[[], typing.Any]",
                    "int",
                    "Callable[[], Any]",
                    "gluonts.model.common.Tensor"
                ],
                "scores_accumulated": [
                    "int",
                    "gluonts.model.common.Tensor"
                ],
                "inf_array": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[], Any]",
                    "gluonts.model.common.Tensor"
                ],
                "pad_dist": [
                    "typing.Callable[, ]",
                    "int",
                    "Callable",
                    "bool",
                    "cmk.gui.plugins.visuals.utils.Filter"
                ]
            }
        },
        "InferenceModel._get_encoder_module.sym_gen": {
            "name": "sym_gen",
            "location": 167,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "source_seq_len": []
            }
        },
        "InferenceModel._get_decoder_module.sym_gen": {
            "name": "sym_gen",
            "location": 216,
            "return": [
                "tuple[list[]]",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "bucket_key": [
                    "Tuple[int, int]",
                    "str",
                    "int",
                    "Optional[bool]",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/initializer.py": {
        "get_initializer": {
            "name": "get_initializer",
            "location": 25,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "default_init_type": [
                    "str"
                ],
                "default_init_scale": [
                    "float"
                ],
                "default_init_xavier_rand_type": [
                    "str"
                ],
                "default_init_xavier_factor_type": [
                    "str"
                ],
                "embed_init_type": [
                    "str"
                ],
                "embed_init_sigma": [
                    "float"
                ],
                "rnn_init_type": [
                    "str"
                ],
                "extra_initializers": [
                    "Optional[List[Tuple[(str, Any)]]]"
                ]
            }
        },
        "StackedOrthogonalInit.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float",
                    "bool",
                    "int",
                    "List[float]",
                    "List[str]"
                ],
                "rand_type": [
                    "typing.Text",
                    "str",
                    "bool"
                ]
            }
        },
        "StackedOrthogonalInit._init_weight": {
            "name": "_init_weight",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sym_name": [
                    "str",
                    "int",
                    "Union[int, float]",
                    "float"
                ],
                "arr": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/init_embedding.py": {
        "init_weight": {
            "name": "init_weight",
            "location": 74,
            "return": [
                "str",
                "float",
                "int",
                "bool",
                "tuple[typing.Union[int,int]]"
            ],
            "arguments": {
                "weight": [
                    "np.ndarray"
                ],
                "vocab_in": [
                    "Dict[(str, int)]"
                ],
                "vocab_out": [
                    "Dict[(str, int)]"
                ],
                "initializer": [
                    "int",
                    "list[int]",
                    "numpy.array",
                    "List[int]"
                ]
            }
        },
        "load_weight": {
            "name": "load_weight",
            "location": 98,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "weight_file": [
                    "str"
                ],
                "weight_name": [
                    "str"
                ],
                "weight_file_cache": [
                    "Dict[(str, dict)]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init_embeddings": {
            "name": "init_embeddings",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/layers.py": {
        "activation": {
            "name": "activation",
            "location": 27,
            "return": [
                "float",
                "str",
                "raiden.utils.signer.Signer",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "int",
                    "Optional[Dict]",
                    "Iterable[str]"
                ],
                "act_type": [
                    "str"
                ]
            }
        },
        "split_heads": {
            "name": "split_heads",
            "location": 229,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "typing.Sequence[int]",
                    "numpy.ndarray",
                    "Sequence[int]"
                ],
                "depth_per_head": [
                    "int"
                ],
                "heads": [
                    "int"
                ]
            }
        },
        "combine_heads": {
            "name": "combine_heads",
            "location": 246,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bool"
                ],
                "depth_per_head": [
                    "int"
                ],
                "heads": [
                    "int"
                ]
            }
        },
        "broadcast_to_heads": {
            "name": "broadcast_to_heads",
            "location": 263,
            "return": [
                "list[]",
                "int",
                "List[int]",
                "list[list[int]]",
                "utils.Node",
                "str",
                "trezor.utils.Writer",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "bool"
                ],
                "num_heads": [
                    "int"
                ],
                "ndim": [
                    "int"
                ],
                "fold_heads": [
                    "bool"
                ]
            }
        },
        "dot_attention": {
            "name": "dot_attention",
            "location": 287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "queries": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "None",
                    "dict",
                    "list[str]",
                    "dict[, ]"
                ],
                "keys": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "None",
                    "dict",
                    "list[str]",
                    "dict[, ]"
                ],
                "values": [
                    "typing.Type",
                    "str",
                    "SupportsFloat",
                    "Type"
                ],
                "lengths": [
                    "None",
                    "str",
                    "Optional[object]",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "dropout": [
                    "float"
                ],
                "bias": [
                    "Optional[str]",
                    "None",
                    "Optional[object]",
                    "str"
                ],
                "prefix": [
                    "Optional[str]"
                ]
            }
        },
        "LayerNormalization.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "scale": [
                    "Optional[int]",
                    "None",
                    "Optional[Iterable[int]]",
                    "int",
                    "typing.Iterable[int]"
                ],
                "shift": [
                    "Optional[int]",
                    "None",
                    "Optional[Iterable[int]]",
                    "int",
                    "typing.Iterable[int]"
                ],
                "scale_init": [
                    "float"
                ],
                "shift_init": [
                    "float"
                ]
            }
        },
        "LayerNormalization.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "Sequence[int]",
                "bytes",
                "Optional[bool]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]"
                ],
                "eps": [
                    "float"
                ]
            }
        },
        "LHUC.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int"
                ],
                "weight": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "float"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "LHUC.__call__": {
            "name": "__call__",
            "location": 116,
            "return": [
                "Set[str]",
                "str",
                "Optional[Union[str, Any]]",
                "dict[int, str]",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "WeightNormalization.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "float",
                    "int",
                    "str",
                    "tuple[]",
                    "tuple",
                    "bool"
                ],
                "num_hidden": [
                    "float",
                    "int",
                    "str"
                ],
                "ndim": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "numpy.ndarray",
                    "List[str]",
                    "Optional[bool]"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "WeightNormalization.__call__": {
            "name": "__call__",
            "location": 148,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "Optional[float]",
                    "None",
                    "float"
                ],
                "scale": [
                    "Optional[float]",
                    "None",
                    "float"
                ]
            }
        },
        "OutputLayer.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int"
                ],
                "vocab_size": [
                    "int"
                ],
                "weight": [
                    "bytes",
                    "bool",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "typing.Callable[, ]",
                    "int",
                    "list[]",
                    "Optional[Callable]",
                    "Optional[List]"
                ],
                "weight_normalization": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "OutputLayer.__call__": {
            "name": "__call__",
            "location": 198,
            "return": [
                "numpy.ndarray",
                "BinaryIO",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "hidden": [
                    "int",
                    "Union[int, slice]"
                ],
                "weight": [
                    "Iterable[str]",
                    "bool",
                    "None",
                    "typing.Iterable[str]"
                ],
                "bias": [
                    "Iterable[str]",
                    "bool",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "MultiHeadAttentionBase.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "depth_att": [
                    "int"
                ],
                "heads": [
                    "int"
                ],
                "depth_out": [
                    "int"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "MultiHeadAttentionBase._attend": {
            "name": "_attend",
            "location": 360,
            "return": [
                "str",
                "int",
                "Callable",
                "typing.Iterator",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "Union[int, str]",
                    "int"
                ],
                "keys": [
                    "str"
                ],
                "values": [
                    "Optional[object]",
                    "None",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "lengths": [
                    "int",
                    "None",
                    "Optional[object]",
                    "typing.Type",
                    "Type",
                    "bool"
                ],
                "bias": [
                    "None"
                ]
            }
        },
        "MultiHeadSelfAttention.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "depth_att": [
                    "int"
                ],
                "heads": [
                    "int"
                ],
                "depth_out": [
                    "int"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "MultiHeadSelfAttention.__call__": {
            "name": "__call__",
            "location": 422,
            "return": [
                "bool",
                "\"Namespace\"",
                "numpy.ndarray",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "input_lengths": [
                    "Type",
                    "None",
                    "Sequence[Any]",
                    "typing.Type",
                    "typing.Sequence[typing.Any]"
                ],
                "bias": [
                    "Type",
                    "None",
                    "Sequence[Any]",
                    "typing.Type",
                    "typing.Sequence[typing.Any]"
                ],
                "cache": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "MultiHeadAttention.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "depth_att": [
                    "int"
                ],
                "heads": [
                    "int"
                ],
                "depth_out": [
                    "int"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "MultiHeadAttention.__call__": {
            "name": "__call__",
            "location": 486,
            "return": [
                "bool",
                "\"Namespace\"",
                "numpy.ndarray",
                "dict"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "memory": [],
                "memory_lengths": [
                    "bytes",
                    "None"
                ],
                "bias": [
                    "bytes",
                    "None"
                ]
            }
        },
        "ProjectedDotAttention.__init__": {
            "name": "__init__",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "num_hidden": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "ProjectedDotAttention.__call__": {
            "name": "__call__",
            "location": 552,
            "return": [
                "Callable",
                "dict[, ]",
                "int",
                "list[str]",
                "float",
                "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                "dict[str, typing.Sequence[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "queries": [],
                "memory": [
                    "int",
                    "numpy.ndarray"
                ],
                "memory_lengths": [
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.AnyStr",
                    "AnyStr",
                    "T"
                ]
            }
        },
        "PlainDotAttention.__call__": {
            "name": "__call__",
            "location": 597,
            "return": [
                "Callable",
                "int",
                "set[]",
                "float",
                "set[str]",
                "str",
                "list[str]",
                "list[float]"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "memory": [
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "memory_lengths": [
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "PositionalEncodings.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "PositionalEncodings.get_encodings": {
            "name": "get_encodings",
            "location": 630,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str",
                    "None",
                    "float",
                    "Optional[int]",
                    "slice",
                    "bool"
                ],
                "depth": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PositionalEncodings.forward": {
            "name": "forward",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_train": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "req": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "in_data": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "out_data": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "aux": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ]
            }
        },
        "PositionalEncodings.backward": {
            "name": "backward",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "out_grad": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "in_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "out_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "in_grad": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "aux": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "PositionalEncodingsProp.__init__": {
            "name": "__init__",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ],
                "depth": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "PositionalEncodingsProp.list_arguments": {
            "name": "list_arguments",
            "location": 662,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionalEncodingsProp.list_outputs": {
            "name": "list_outputs",
            "location": 665,
            "return": [
                "list[typing.Text]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionalEncodingsProp.infer_shape": {
            "name": "infer_shape",
            "location": 668,
            "return": [
                "tuple[list[tuple[int]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "in_shape": [
                    "bool",
                    "typing.Callable[[], bool]",
                    "int",
                    "list[str]",
                    "Callable[[], bool]",
                    "List[str]"
                ]
            }
        },
        "PositionalEncodingsProp.infer_type": {
            "name": "infer_type",
            "location": 671,
            "return": [
                "tuple[list[]]",
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "self": [],
                "in_type": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "int"
                ]
            }
        },
        "PositionalEncodingsProp.create_operator": {
            "name": "create_operator",
            "location": 674,
            "return": [
                "PositionalEncodings",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        }
    },
    "DCGCN-master/sockeye/lexical_constraints.py": {
        "init_batch": {
            "name": "init_batch",
            "location": 395,
            "return": [
                "List[Optional[ConstrainedHypothesis]]"
            ],
            "arguments": {
                "raw_constraints": [
                    "List[Optional[List[List[int]]]]"
                ],
                "beam_size": [
                    "int"
                ],
                "start_id": [
                    "int"
                ],
                "eos_id": [
                    "int"
                ]
            }
        },
        "get_bank_sizes": {
            "name": "get_bank_sizes",
            "location": 418,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "num_constraints": [
                    "int"
                ],
                "beam_size": [
                    "int"
                ],
                "candidate_counts": [
                    "List[int]"
                ]
            }
        },
        "topk": {
            "name": "topk",
            "location": 486,
            "return": [
                "Tuple[(Any, Any, Any, List[ConstrainedHypothesis], Any)]"
            ],
            "arguments": {
                "batch_size": [
                    "int"
                ],
                "beam_size": [
                    "int"
                ],
                "inactive": [],
                "scores": [],
                "hypotheses": [
                    "List[ConstrainedHypothesis]"
                ],
                "best_ids": [],
                "best_word_ids": [],
                "seq_scores": [],
                "context": []
            }
        },
        "_topk": {
            "name": "_topk",
            "location": 536,
            "return": [
                "Tuple[(Any, Any, Any, List[ConstrainedHypothesis], Any)]"
            ],
            "arguments": {
                "beam_size": [
                    "int"
                ],
                "inactive": [
                    "list[int]",
                    "list[]",
                    "int",
                    "List[int]",
                    "Sized",
                    "list",
                    "bool"
                ],
                "scores": [
                    "int",
                    "bytes",
                    "str"
                ],
                "hypotheses": [
                    "List[ConstrainedHypothesis]"
                ],
                "best_ids": [
                    "int"
                ],
                "best_word_ids": [
                    "int"
                ],
                "sequence_scores": [
                    "int"
                ],
                "context": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "str",
                    "List[bytes]",
                    "list[bytes]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "AvoidTrie.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_phrases": [
                    "Optional[List[List[int]]]"
                ]
            }
        },
        "AvoidTrie.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvoidTrie.__len__": {
            "name": "__len__",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvoidTrie.add_trie": {
            "name": "add_trie",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trie": [
                    "AvoidTrie"
                ],
                "phrase": [
                    "Optional[List[int]]"
                ]
            }
        },
        "AvoidTrie.add_phrase": {
            "name": "add_phrase",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "phrase": [
                    "List[int]"
                ]
            }
        },
        "AvoidTrie.step": {
            "name": "step",
            "location": 81,
            "return": [
                "Optional[AvoidTrie]"
            ],
            "arguments": {
                "self": [],
                "word_id": [
                    "int"
                ]
            }
        },
        "AvoidTrie.final": {
            "name": "final",
            "location": 90,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvoidState.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "avoid_trie": [
                    "AvoidTrie"
                ],
                "state": [
                    "AvoidTrie"
                ]
            }
        },
        "AvoidState.consume": {
            "name": "consume",
            "location": 115,
            "return": [
                "AvoidState"
            ],
            "arguments": {
                "self": [
                    "_TAvoidState"
                ],
                "word_id": [
                    "int"
                ]
            }
        },
        "AvoidState.avoid": {
            "name": "avoid",
            "location": 139,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvoidState.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvoidBatch.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "beam_size": [
                    "int"
                ],
                "avoid_list": [
                    "Optional[List[List[List[int]]]]"
                ],
                "global_avoid_trie": [
                    "Optional[AvoidTrie]"
                ]
            }
        },
        "AvoidBatch.reorder": {
            "name": "reorder",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "numpy.ndarray",
                    "list",
                    "float",
                    "int"
                ]
            }
        },
        "AvoidBatch.consume": {
            "name": "consume",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_ids": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "AvoidBatch.avoid": {
            "name": "avoid",
            "location": 206,
            "return": [
                "Tuple[(Tuple[int], Tuple[int])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constraint_list": [
                    "List[List[int]]"
                ],
                "eos_id": [
                    "int"
                ]
            }
        },
        "ConstrainedHypothesis.__len__": {
            "name": "__len__",
            "location": 274,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.__str__": {
            "name": "__str__",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.size": {
            "name": "size",
            "location": 288,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.num_met": {
            "name": "num_met",
            "location": 294,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.num_needed": {
            "name": "num_needed",
            "location": 300,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.allowed": {
            "name": "allowed",
            "location": 306,
            "return": [
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.finished": {
            "name": "finished",
            "location": 331,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.is_valid": {
            "name": "is_valid",
            "location": 339,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "wordid": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]",
                    "float",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ConstrainedHypothesis.advance": {
            "name": "advance",
            "location": 348,
            "return": [
                "ConstrainedHypothesis"
            ],
            "arguments": {
                "self": [
                    "_TConstrainedHypothesis"
                ],
                "word_id": [
                    "int"
                ]
            }
        },
        "ConstrainedCandidate.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int"
                ],
                "col": [
                    "int"
                ],
                "score": [
                    "float"
                ],
                "hypothesis": [
                    "ConstrainedHypothesis"
                ]
            }
        },
        "ConstrainedCandidate.__hash__": {
            "name": "__hash__",
            "location": 476,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedCandidate.__eq__": {
            "name": "__eq__",
            "location": 479,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "ConstrainedCandidate.__str__": {
            "name": "__str__",
            "location": 482,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DCGCN-master/sockeye/lexicon.py": {
        "lexicon_iterator": {
            "name": "lexicon_iterator",
            "location": 34,
            "return": [
                "Generator[(Tuple[(int, int, float)], None, None)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "vocab_source": [
                    "Dict[(str, int)]"
                ],
                "vocab_target": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "read_lexicon": {
            "name": "read_lexicon",
            "location": 58,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "vocab_source": [
                    "Dict[(str, int)]"
                ],
                "vocab_target": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "inspect": {
            "name": "inspect",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 236,
            "return": [
                "Optional[int]"
            ],
            "arguments": {}
        },
        "LexiconInitializer.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lexicon": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LexiconInitializer._init_default": {
            "name": "_init_default",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym_name": [
                    "str"
                ],
                "arr": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]",
                    "type",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TopKLexicon.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_source": [
                    "Dict[(str, int)]"
                ],
                "vocab_target": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "TopKLexicon.create": {
            "name": "create",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "TopKLexicon.save": {
            "name": "save",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TopKLexicon.load": {
            "name": "load",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "k": [
                    "Optional[int]"
                ]
            }
        },
        "TopKLexicon.get_trg_ids": {
            "name": "get_trg_ids",
            "location": 186,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "src_ids": [
                    "np.ndarray"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/log.py": {
        "is_python34": {
            "name": "is_python34",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "setup_main_logger": {
            "name": "setup_main_logger",
            "location": 105,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "file_logging": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "console": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "path": [
                    "Optional[str]"
                ]
            }
        },
        "log_sockeye_version": {
            "name": "log_sockeye_version",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "bool",
                    "list[str]",
                    "logging.Logger",
                    "List[str]"
                ]
            }
        },
        "log_mxnet_version": {
            "name": "log_mxnet_version",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "bool",
                    "list[str]",
                    "logging.Logger",
                    "List[str]"
                ]
            }
        },
        "setup_main_logger.exception_hook": {
            "name": "exception_hook",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exc_type": [
                    "Callable",
                    "Type[Any]"
                ],
                "exc_value": [
                    "Type[BaseException]",
                    "str",
                    "Union[Callable, str]",
                    "Optional[str]",
                    "Optional[Type[BaseException]]"
                ],
                "exc_traceback": [
                    "Callable",
                    "Type[Any]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/loss.py": {
        "get_loss": {
            "name": "get_loss",
            "location": 52,
            "return": [
                "Loss"
            ],
            "arguments": {
                "loss_config": [
                    "LossConfig"
                ]
            }
        },
        "LossConfig.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "vocab_size": [
                    "int"
                ],
                "normalization_type": [
                    "str"
                ],
                "label_smoothing": [
                    "float"
                ]
            }
        },
        "Loss.get_loss": {
            "name": "get_loss",
            "location": 73,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "List[dict]",
                    "list[dict[, ]]"
                ],
                "labels": [
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "Loss.create_metric": {
            "name": "create_metric",
            "location": 84,
            "return": [
                "mxnet.metric.EvalMetric",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossEntropyLoss.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss_config": [
                    "LossConfig"
                ]
            }
        },
        "CrossEntropyLoss.get_loss": {
            "name": "get_loss",
            "location": 103,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "int"
                ],
                "labels": [
                    "int"
                ]
            }
        },
        "CrossEntropyLoss.create_metric": {
            "name": "create_metric",
            "location": 125,
            "return": [
                "CrossEntropyMetric"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossEntropyMetric.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss_config": [
                    "LossConfig"
                ],
                "name": [
                    "str"
                ],
                "output_names": [
                    "Optional[List[str]]"
                ],
                "label_names": [
                    "Optional[List[str]]"
                ]
            }
        },
        "CrossEntropyMetric.cross_entropy": {
            "name": "cross_entropy",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "logprob": [
                    "float",
                    "List[str]",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "label": [
                    "float",
                    "List[str]",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "CrossEntropyMetric.cross_entropy_smoothed": {
            "name": "cross_entropy_smoothed",
            "location": 153,
            "return": [
                "list[]",
                "int",
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "logprob": [
                    "bool",
                    "bytes",
                    "Optional[int]",
                    "Union[int, str]"
                ],
                "label": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "alpha": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Any]"
                ],
                "num_classes": [
                    "str",
                    "type",
                    "Dict[str, Any]"
                ]
            }
        },
        "CrossEntropyMetric.update": {
            "name": "update",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "preds": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "Sequence[Sequence[str]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/lr_scheduler.py": {
        "get_lr_scheduler": {
            "name": "get_lr_scheduler",
            "location": 253,
            "return": [
                "Optional[LearningRateScheduler]"
            ],
            "arguments": {
                "scheduler_type": [
                    "str"
                ],
                "updates_per_checkpoint": [
                    "int"
                ],
                "learning_rate_half_life": [
                    "int"
                ],
                "learning_rate_reduce_factor": [
                    "float"
                ],
                "learning_rate_reduce_num_not_improved": [
                    "int"
                ],
                "learning_rate_schedule": [
                    "Optional[List[Tuple[(float, int)]]]"
                ],
                "learning_rate_warmup": [
                    "Optional[int]"
                ]
            }
        },
        "LearningRateScheduler.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warmup": [
                    "int"
                ]
            }
        },
        "LearningRateScheduler.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_updates": [
                    "int",
                    "list[]",
                    "bool",
                    "list"
                ]
            }
        },
        "LearningRateScheduler._warmup": {
            "name": "_warmup",
            "location": 35,
            "return": [
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "num_updates": [
                    "int",
                    "float"
                ]
            }
        },
        "AdaptiveLearningRateScheduler.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "bool"
                ]
            }
        },
        "LearningRateSchedulerFixedStep.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "List[Tuple[(float, int)]]"
                ],
                "updates_per_checkpoint": [
                    "int"
                ]
            }
        },
        "LearningRateSchedulerFixedStep.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "bool"
                ]
            }
        },
        "LearningRateSchedulerFixedStep._update_rate": {
            "name": "_update_rate",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "int"
                ]
            }
        },
        "LearningRateSchedulerFixedStep.__call__": {
            "name": "__call__",
            "location": 113,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int"
                ]
            }
        },
        "LearningRateSchedulerFixedStep.parse_schedule_str": {
            "name": "parse_schedule_str",
            "location": 118,
            "return": [
                "List[Tuple[(float, int)]]"
            ],
            "arguments": {
                "schedule_str": [
                    "str"
                ]
            }
        },
        "LearningRateSchedulerInvSqrtT.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updates_per_checkpoint": [
                    "int"
                ],
                "half_life": [
                    "int"
                ],
                "warmup": [
                    "int"
                ]
            }
        },
        "LearningRateSchedulerInvSqrtT.__call__": {
            "name": "__call__",
            "location": 152,
            "return": [
                "float",
                "Callable",
                "int",
                "list[]",
                "tuple[typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "num_updates": [
                    "int"
                ]
            }
        },
        "LearningRateSchedulerInvT.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updates_per_checkpoint": [
                    "int"
                ],
                "half_life": [
                    "int"
                ],
                "warmup": [
                    "int"
                ]
            }
        },
        "LearningRateSchedulerInvT.__call__": {
            "name": "__call__",
            "location": 183,
            "return": [
                "float",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "num_updates": [
                    "int"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reduce_factor": [
                    "float"
                ],
                "reduce_num_not_improved": [
                    "int"
                ],
                "warmup": [
                    "int"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "bool"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.__call__": {
            "name": "__call__",
            "location": 239,
            "return": [
                "int",
                "Callable",
                "float",
                "dict[, ]",
                "tuple[]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.__repr__": {
            "name": "__repr__",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DCGCN-master/sockeye/model.py": {
        "ModelConfig.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_data": [
                    "data_io.DataConfig"
                ],
                "vocab_source_size": [
                    "int"
                ],
                "vocab_target_size": [
                    "int"
                ],
                "config_embed_source": [
                    "encoder.EmbeddingConfig"
                ],
                "config_embed_target": [
                    "encoder.EmbeddingConfig"
                ],
                "config_encoder": [
                    "Union[(encoder.ConvolutionalEncoderConfig, encoder.EmptyEncoderConfig, encoder.RecurrentEncoderConfig, sockeye.transformer.TransformerConfig)]"
                ],
                "config_decoder": [
                    "Union[(decoder.ConvolutionalDecoderConfig, decoder.RecurrentDecoderConfig, sockeye.transformer.TransformerConfig)]"
                ],
                "config_loss": [
                    "loss.LossConfig"
                ],
                "weight_tying": [
                    "bool"
                ],
                "weight_tying_type": [
                    "Optional[str]"
                ],
                "weight_normalization": [
                    "bool"
                ],
                "lhuc": [
                    "bool"
                ]
            }
        },
        "SockeyeModel.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "ModelConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "SockeyeModel.save_config": {
            "name": "save_config",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ]
            }
        },
        "SockeyeModel.load_config": {
            "name": "load_config",
            "location": 145,
            "return": [
                "ModelConfig"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "SockeyeModel.save_params_to_file": {
            "name": "save_params_to_file",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "SockeyeModel.load_params_from_file": {
            "name": "load_params_from_file",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "SockeyeModel.save_version": {
            "name": "save_version",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": [
                    "str"
                ]
            }
        },
        "SockeyeModel._get_embed_weights": {
            "name": "_get_embed_weights",
            "location": 195,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "SockeyeModel.get_source_embed_params": {
            "name": "get_source_embed_params",
            "location": 237,
            "return": [
                "None",
                "str",
                "Iterable[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.get_target_embed_params": {
            "name": "get_target_embed_params",
            "location": 242,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.get_output_embed_params": {
            "name": "get_output_embed_params",
            "location": 247,
            "return": [
                "None",
                "str",
                "bool",
                "List[Dict[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DCGCN-master/sockeye/optimizers.py": {
        "OptimizerConfig.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ],
                "kvstore": [
                    "str"
                ],
                "initializer": [
                    "int",
                    "tuple[str]",
                    "bool",
                    "tuple[typing.Union[int,int,int]]",
                    "Tuple[str]",
                    "Tuple[int, int, int]"
                ],
                "gradient_clipping_type": [
                    "str"
                ],
                "gradient_clipping_threshold": [
                    "Optional[float]"
                ]
            }
        },
        "OptimizerConfig.lr_scheduler": {
            "name": "lr_scheduler",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizerConfig.set_lr_scheduler": {
            "name": "set_lr_scheduler",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr_scheduler": [
                    "Optional[sockeye.lr_scheduler.LearningRateScheduler]"
                ]
            }
        },
        "SockeyeOptimizer.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_optimized_metric": [
                    "bool"
                ]
            }
        },
        "SockeyeOptimizer.pre_update_batch": {
            "name": "pre_update_batch",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_state": [
                    "BatchState"
                ]
            }
        },
        "SockeyeOptimizer.pre_update_checkpoint": {
            "name": "pre_update_checkpoint",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checkpoint_state": [
                    "CheckpointState"
                ]
            }
        },
        "SockeyeOptimizer.update": {
            "name": "update",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "set[str]",
                    "Set[str]",
                    "list[dict[str, str]]",
                    "List[Dict[str, str]]",
                    "list[]",
                    "list",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "weight": [
                    "str",
                    "bool",
                    "set[str]",
                    "Set[str]",
                    "list[dict[str, str]]",
                    "List[Dict[str, str]]",
                    "list[]",
                    "list",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "grad": [
                    "str",
                    "bool",
                    "set[str]",
                    "Set[str]",
                    "list[dict[str, str]]",
                    "List[Dict[str, str]]",
                    "list[]",
                    "list",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "state": [
                    "str",
                    "bool",
                    "set[str]",
                    "Set[str]",
                    "list[dict[str, str]]",
                    "List[Dict[str, str]]",
                    "list[]",
                    "list",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "EveState.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "int",
                    "str",
                    "config.Rule"
                ]
            }
        },
        "Eve.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "Tuple[int, int]"
                ],
                "beta1": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "beta2": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "beta3_batch": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "beta3_checkpoint": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "epsilon": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "k_lo": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "k_hi": [
                    "int",
                    "float",
                    "bool",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "schedule_decay": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[List[Any]]"
                ],
                "use_batch_objective": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ],
                "use_checkpoint_objective": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ],
                "use_nesterov_momentum": [
                    "bool"
                ]
            }
        },
        "Eve.create_state": {
            "name": "create_state",
            "location": 167,
            "return": [
                "EveState",
                "bool",
                "str",
                "cmk.gui.config.LoggedInUser"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "bool",
                    "raiden.utils.Address"
                ],
                "weight": [
                    "bool",
                    "dict[, ]",
                    "dict",
                    "raiden.utils.SecreHash",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "Eve.update": {
            "name": "update",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "set[str]",
                    "Set[str]",
                    "list[dict[str, str]]",
                    "List[Dict[str, str]]",
                    "list[]",
                    "list",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "weight": [
                    "int",
                    "str",
                    "Optional[str]",
                    "TextIO",
                    "set",
                    "bool"
                ],
                "grad": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "List[str]",
                    "list[str]"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "Eve.update.compute_d": {
            "name": "compute_d",
            "location": 187,
            "return": [
                "tuple[float]",
                "str",
                "tuple"
            ],
            "arguments": {
                "t": [
                    "int",
                    "float"
                ],
                "f": [
                    "int",
                    "list",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "Optional[Union[int, slice]]"
                ],
                "f_hat_prev": [
                    "int",
                    "list",
                    "Optional[Union[int, slice]]"
                ],
                "d_prev": [
                    "bool",
                    "List[int]",
                    "Optional[int]",
                    "List[str]",
                    "int"
                ],
                "beta": [
                    "bool",
                    "List[int]",
                    "Optional[int]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/output_handler.py": {
        "get_output_handler": {
            "name": "get_output_handler",
            "location": 25,
            "return": [
                "OutputHandler"
            ],
            "arguments": {
                "output_type": [
                    "str"
                ],
                "output_fname": [
                    "Optional[str]"
                ],
                "sure_align_threshold": [
                    "float"
                ]
            }
        },
        "OutputHandler.handle": {
            "name": "handle",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput"
                ],
                "t_walltime": [
                    "float"
                ]
            }
        },
        "StringOutputHandler.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "StringOutputHandler.handle": {
            "name": "handle",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput"
                ],
                "t_walltime": [
                    "float"
                ]
            }
        },
        "StringWithScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "StringWithScoreOutputHandler.handle": {
            "name": "handle",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput"
                ],
                "t_walltime": [
                    "float"
                ]
            }
        },
        "StringWithAlignmentsOutputHandler.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "StringWithAlignmentsOutputHandler.handle": {
            "name": "handle",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput"
                ],
                "t_walltime": [
                    "float"
                ]
            }
        },
        "StringWithAlignmentMatrixOutputHandler.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "StringWithAlignmentMatrixOutputHandler.handle": {
            "name": "handle",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput"
                ],
                "t_walltime": [
                    "float"
                ]
            }
        },
        "BenchmarkOutputHandler.handle": {
            "name": "handle",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput"
                ],
                "t_walltime": [
                    "float"
                ]
            }
        },
        "AlignPlotHandler.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plot_prefix": [
                    "str"
                ]
            }
        },
        "AlignPlotHandler.handle": {
            "name": "handle",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput"
                ],
                "t_walltime": [
                    "float"
                ]
            }
        },
        "AlignTextHandler.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ]
            }
        },
        "AlignTextHandler.handle": {
            "name": "handle",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput"
                ],
                "t_walltime": [
                    "float"
                ]
            }
        },
        "BeamStoringHandler.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BeamStoringHandler.handle": {
            "name": "handle",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput"
                ],
                "t_walltime": [
                    "float"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/postprocess.py": {
        "replace_date": {
            "name": "replace_date",
            "location": 11,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "tok": [
                    "_T0"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/prepare_data.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/rerank.py": {
        "rerank": {
            "name": "rerank",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Reranker.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "return_score": [
                    "bool"
                ]
            }
        },
        "Reranker.rerank_hypotheses": {
            "name": "rerank_hypotheses",
            "location": 55,
            "return": [
                "RerankOutput"
            ],
            "arguments": {
                "self": [],
                "hypotheses": [
                    "List[str]"
                ],
                "reference": [
                    "str"
                ]
            }
        },
        "Reranker.rerank_top1": {
            "name": "rerank_top1",
            "location": 78,
            "return": [
                "RerankOutput"
            ],
            "arguments": {
                "self": [],
                "hypotheses": [
                    "List[str]"
                ],
                "reference": [
                    "str"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/rnn.py": {
        "get_stacked_rnn": {
            "name": "get_stacked_rnn",
            "location": 117,
            "return": [
                "dict[str, typing.Union[int,str]]",
                "str",
                "SequentialRNNCellParallelInput",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "config": [
                    "RNNConfig"
                ],
                "prefix": [
                    "str"
                ],
                "parallel_inputs": [
                    "bool"
                ],
                "layers": [
                    "Optional[Iterable[int]]"
                ]
            }
        },
        "RNNConfig.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell_type": [
                    "str"
                ],
                "num_hidden": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "dropout_inputs": [
                    "float"
                ],
                "dropout_states": [
                    "float"
                ],
                "dropout_recurrent": [
                    "float"
                ],
                "residual": [
                    "bool"
                ],
                "first_residual_layer": [
                    "int"
                ],
                "forget_bias": [
                    "float"
                ],
                "lhuc": [
                    "bool"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "SequentialRNNCellParallelInput.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ],
                "parallel_inputs": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ],
                "states": [
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "ParallelInputCell.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ],
                "parallel_inputs": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ],
                "states": [
                    "int"
                ]
            }
        },
        "ResidualCellParallelInput.__call__": {
            "name": "__call__",
            "location": 110,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "parallel_inputs": [
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "dict",
                    "dict[, ]"
                ],
                "states": [
                    "int"
                ]
            }
        },
        "LayerNormLSTMCell.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "params": [
                    "Optional[str]",
                    "str",
                    "None",
                    "int",
                    "float",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "forget_bias": [
                    "float"
                ],
                "norm_scale": [
                    "float"
                ],
                "norm_shift": [
                    "float"
                ]
            }
        },
        "LayerNormLSTMCell.__call__": {
            "name": "__call__",
            "location": 208,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "states": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "LayerNormPerGateLSTMCell.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "params": [
                    "int",
                    "float",
                    "None"
                ],
                "forget_bias": [
                    "float"
                ],
                "norm_scale": [
                    "float"
                ],
                "norm_shift": [
                    "float"
                ]
            }
        },
        "LayerNormPerGateLSTMCell.__call__": {
            "name": "__call__",
            "location": 269,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "states": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "LHUCCell.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_cell": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "num_hidden": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "None"
                ],
                "dtype": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "int",
                    "typing.Mapping",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Tuple['cirq.Qid']",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "LHUCCell.__call__": {
            "name": "__call__",
            "location": 314,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "float"
                ],
                "states": [
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "RecurrentDropoutLSTMCell.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "float",
                    "bool",
                    "int"
                ],
                "params": [
                    "str",
                    "None",
                    "float",
                    "bool",
                    "int"
                ],
                "forget_bias": [
                    "float",
                    "str",
                    "bool",
                    "int"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "RecurrentDropoutLSTMCell.__call__": {
            "name": "__call__",
            "location": 331,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "states": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "LayerNormGRUCell.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "params": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "norm_scale": [
                    "float"
                ],
                "norm_shift": [
                    "float"
                ]
            }
        },
        "LayerNormGRUCell.__call__": {
            "name": "__call__",
            "location": 387,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "states": [
                    "float",
                    "Sequence",
                    "int"
                ]
            }
        },
        "LayerNormPerGateGRUCell.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "params": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "norm_scale": [
                    "float"
                ],
                "norm_shift": [
                    "float"
                ]
            }
        },
        "LayerNormPerGateGRUCell.__call__": {
            "name": "__call__",
            "location": 451,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "states": [
                    "float",
                    "Sequence",
                    "int"
                ]
            }
        },
        "VariationalDropoutCell.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_cell": [
                    "list",
                    "list[]",
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "dropout_inputs": [
                    "float"
                ],
                "dropout_states": [
                    "float"
                ]
            }
        },
        "VariationalDropoutCell.__call__": {
            "name": "__call__",
            "location": 506,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "int",
                    "torch.nn.utils.rnn.PackedSequence",
                    "dict"
                ],
                "states": []
            }
        },
        "VariationalDropoutCell.reset": {
            "name": "reset",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DCGCN-master/sockeye/rnn_attention.py": {
        "_instantiate": {
            "name": "_instantiate",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "get_attention": {
            "name": "get_attention",
            "location": 91,
            "return": [
                "Attention"
            ],
            "arguments": {
                "config": [
                    "AttentionConfig"
                ],
                "max_seq_len": [
                    "int"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "get_context_and_attention_probs": {
            "name": "get_context_and_attention_probs",
            "location": 775,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "values": [],
                "length": [],
                "logits": [],
                "dtype": [
                    "str"
                ]
            }
        },
        "AttentionConfig.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "num_hidden": [
                    "int"
                ],
                "input_previous_word": [
                    "bool"
                ],
                "source_num_hidden": [
                    "int"
                ],
                "query_num_hidden": [
                    "int"
                ],
                "layer_normalization": [
                    "bool"
                ],
                "config_coverage": [
                    "Optional[coverage.CoverageConfig]"
                ],
                "num_heads": [
                    "Optional[int]"
                ],
                "is_scaled": [
                    "bool"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "Attention.register": {
            "name": "register",
            "location": 144,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": [],
                "att_type": [
                    "str"
                ]
            }
        },
        "Attention.get_attention_cls": {
            "name": "get_attention_cls",
            "location": 151,
            "return": [
                "Type[Attention]"
            ],
            "arguments": {
                "cls": [],
                "att_type": [
                    "str"
                ]
            }
        },
        "Attention.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_previous_word": [
                    "bool"
                ],
                "dynamic_source_num_hidden": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "Attention.on": {
            "name": "on",
            "location": 166,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "Attention.get_initial_state": {
            "name": "get_initial_state",
            "location": 190,
            "return": [
                "AttentionState"
            ],
            "arguments": {
                "self": [],
                "source_length": [],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "Attention.make_input": {
            "name": "make_input",
            "location": 202,
            "return": [
                "AttentionInput"
            ],
            "arguments": {
                "self": [],
                "seq_idx": [
                    "int"
                ],
                "word_vec_prev": [],
                "decoder_state": []
            }
        },
        "BilinearAttention.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_num_hidden": [
                    "int"
                ],
                "dtype": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "BilinearAttention.on": {
            "name": "on",
            "location": 243,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "DotAttention.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_previous_word": [
                    "bool"
                ],
                "source_num_hidden": [
                    "int"
                ],
                "query_num_hidden": [
                    "int"
                ],
                "num_hidden": [
                    "int"
                ],
                "is_scaled": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "DotAttention.on": {
            "name": "on",
            "location": 327,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "MultiHeadDotAttention.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_previous_word": [
                    "bool"
                ],
                "source_num_hidden": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "MultiHeadDotAttention.on": {
            "name": "on",
            "location": 420,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "EncoderLastStateAttention.on": {
            "name": "on",
            "location": 507,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "LocationAttention.__init__": {
            "name": "__init__",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_previous_word": [
                    "bool"
                ],
                "max_seq_len": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "LocationAttention.on": {
            "name": "on",
            "location": 555,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "MlpAttention.__init__": {
            "name": "__init__",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_previous_word": [
                    "bool"
                ],
                "num_hidden": [
                    "int"
                ],
                "layer_normalization": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "MlpAttention.on": {
            "name": "on",
            "location": 650,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": [
                    "int"
                ]
            }
        },
        "MlpCovAttention.__init__": {
            "name": "__init__",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_previous_word": [
                    "bool"
                ],
                "num_hidden": [
                    "int"
                ],
                "layer_normalization": [
                    "bool"
                ],
                "config_coverage": [
                    "coverage.CoverageConfig"
                ],
                "prefix": [
                    "str"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "Attention.register.wrapper": {
            "name": "wrapper",
            "location": 145,
            "return": [],
            "arguments": {
                "target_cls": []
            }
        },
        "Attention.on.attend": {
            "name": "attend",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "BilinearAttention.on.attend": {
            "name": "attend",
            "location": 263,
            "return": [
                "AttentionState"
            ],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "DotAttention.on.attend": {
            "name": "attend",
            "location": 350,
            "return": [
                "AttentionState"
            ],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "MultiHeadDotAttention.on.attend": {
            "name": "attend",
            "location": 447,
            "return": [
                "AttentionState"
            ],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "EncoderLastStateAttention.on.attend": {
            "name": "attend",
            "location": 522,
            "return": [
                "AttentionState"
            ],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "LocationAttention.on.attend": {
            "name": "attend",
            "location": 567,
            "return": [
                "AttentionState"
            ],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "MlpAttention.on.attend": {
            "name": "attend",
            "location": 673,
            "return": [
                "AttentionState"
            ],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        }
    },
    "DCGCN-master/sockeye/train.py": {
        "none_if_negative": {
            "name": "none_if_negative",
            "location": 55,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "val": [
                    "_T0"
                ]
            }
        },
        "_list_to_tuple": {
            "name": "_list_to_tuple",
            "location": 59,
            "return": [
                "Union[(tuple, _T0)]"
            ],
            "arguments": {
                "v": [
                    "_T0"
                ]
            }
        },
        "_dict_difference": {
            "name": "_dict_difference",
            "location": 66,
            "return": [
                "set"
            ],
            "arguments": {
                "dict1": [
                    "dict"
                ],
                "dict2": [
                    "dict"
                ]
            }
        },
        "check_arg_compatibility": {
            "name": "check_arg_compatibility",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "check_resume": {
            "name": "check_resume",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "output_folder": [
                    "str"
                ]
            }
        },
        "create_checkpoint_decoder": {
            "name": "create_checkpoint_decoder",
            "location": 161,
            "return": [
                "Optional[checkpoint_decoder.CheckpointDecoder]"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "exit_stack": [
                    "contextlib.ExitStack"
                ],
                "edge_vocab": [
                    "Dict[(str, int)]"
                ],
                "train_context": [
                    "list"
                ]
            }
        },
        "use_shared_vocab": {
            "name": "use_shared_vocab",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "create_data_iters_and_vocabs": {
            "name": "create_data_iters_and_vocabs",
            "location": 226,
            "return": [
                "Tuple[(data_io.BaseParallelSampleIter, data_io.BaseParallelSampleIter, data_io.DataConfig, List[Dict[(str, int)]], Dict[(str, int)], Dict[(str, int)])]"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "shared_vocab": [
                    "bool"
                ],
                "resume_training": [
                    "bool"
                ],
                "output_folder": [
                    "str"
                ]
            }
        },
        "create_encoder_config": {
            "name": "create_encoder_config",
            "location": 380,
            "return": [
                "Tuple[(Union[(encoder.ConvolutionalEncoderConfig, encoder.EmptyEncoderConfig, encoder.RecurrentEncoderConfig, transformer.TransformerConfig)], int)]"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "vocab_edge_size": [
                    "int"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "config_conv": [
                    "Optional[encoder.ConvolutionalEmbeddingConfig]"
                ]
            }
        },
        "create_graph_encoder_config": {
            "name": "create_graph_encoder_config",
            "location": 472,
            "return": [
                "Tuple[(Union[(encoder.ConvolutionalEncoderConfig, encoder.EmptyEncoderConfig, encoder.RecurrentEncoderConfig, transformer.TransformerConfig)], int)]"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "vocab_edge_size": [
                    "int"
                ],
                "max_seq_len_source": [
                    "int"
                ]
            }
        },
        "create_decoder_config": {
            "name": "create_decoder_config",
            "location": 501,
            "return": [
                "Union[(decoder.ConvolutionalDecoderConfig, decoder.RecurrentDecoderConfig, transformer.TransformerConfig)]"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "encoder_num_hidden": [
                    "int"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ]
            }
        },
        "check_encoder_decoder_args": {
            "name": "check_encoder_decoder_args",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_model_config": {
            "name": "create_model_config",
            "location": 630,
            "return": [
                "model.ModelConfig"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "source_vocab_sizes": [
                    "List[int]"
                ],
                "target_vocab_size": [
                    "int"
                ],
                "edge_vocab_size": [
                    "int"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "config_data": [
                    "data_io.DataConfig"
                ]
            }
        },
        "create_training_model": {
            "name": "create_training_model",
            "location": 713,
            "return": [
                "TrainingModel",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "model.ModelConfig"
                ],
                "context": [
                    "list"
                ],
                "output_dir": [
                    "str"
                ],
                "train_iter": [
                    "data_io.BaseParallelSampleIter"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "gradient_compression_params": {
            "name": "gradient_compression_params",
            "location": 741,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "create_optimizer_config": {
            "name": "create_optimizer_config",
            "location": 752,
            "return": [
                "sockeye.optimizers.OptimizerConfig"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ],
                "source_vocab_sizes": [
                    "List[int]"
                ],
                "extra_initializers": [
                    "List[Tuple[(str, Any)]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 817,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 824,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/training.py": {
        "global_norm": {
            "name": "global_norm",
            "location": 371,
            "return": [
                "float"
            ],
            "arguments": {
                "ndarrays": [
                    "list"
                ]
            }
        },
        "_decode_and_evaluate": {
            "name": "_decode_and_evaluate",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "decoder": [
                    "checkpoint_decoder.CheckpointDecoder"
                ],
                "checkpoint": [
                    "int"
                ],
                "output_name": [
                    "str"
                ],
                "queue": [
                    "mp.queues.Queue"
                ]
            }
        },
        "TrainingModel.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "model.ModelConfig"
                ],
                "context": [
                    "list"
                ],
                "output_dir": [
                    "str"
                ],
                "provide_data": [
                    "list"
                ],
                "provide_label": [
                    "list"
                ],
                "default_bucket_key": [
                    "Tuple[(int, int)]"
                ],
                "bucketing": [
                    "bool"
                ],
                "gradient_compression_params": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "fixed_param_names": [
                    "Optional[List[str]]"
                ]
            }
        },
        "TrainingModel._initialize": {
            "name": "_initialize",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provide_data": [
                    "list"
                ],
                "provide_label": [
                    "list"
                ],
                "default_bucket_key": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "TrainingModel.run_forward_backward": {
            "name": "run_forward_backward",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [],
                "metric": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TrainingModel.update": {
            "name": "update",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.get_gradients": {
            "name": "get_gradients",
            "location": 202,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.get_global_gradient_norm": {
            "name": "get_global_gradient_norm",
            "location": 211,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.rescale_gradients": {
            "name": "rescale_gradients",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "float"
                ]
            }
        },
        "TrainingModel.prepare_batch": {
            "name": "prepare_batch",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TrainingModel.evaluate": {
            "name": "evaluate",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eval_iter": [
                    "data_io.BaseParallelSampleIter"
                ],
                "eval_metric": [
                    "dict[str, typing.Any]",
                    "raiden.utils.signer.Signer",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "TrainingModel.current_module": {
            "name": "current_module",
            "location": 248,
            "return": [
                "bool",
                "int",
                "float",
                "str",
                "Optional[int]",
                "raiden.utils.PaymentAmount",
                "raiden.utils.PaymentID"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.executor_group": {
            "name": "executor_group",
            "location": 254,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.executors": {
            "name": "executors",
            "location": 258,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.loss": {
            "name": "loss",
            "location": 262,
            "return": [
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.optimizer": {
            "name": "optimizer",
            "location": 266,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.initialize_optimizer": {
            "name": "initialize_optimizer",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sockeye.optimizers.OptimizerConfig"
                ]
            }
        },
        "TrainingModel.save_optimizer_states": {
            "name": "save_optimizer_states",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "TrainingModel.load_optimizer_states": {
            "name": "load_optimizer_states",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "TrainingModel.initialize_parameters": {
            "name": "initialize_parameters",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initializer": [
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "allow_missing_params": [
                    "bool"
                ]
            }
        },
        "TrainingModel.log_parameters": {
            "name": "log_parameters",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.save_params_to_file": {
            "name": "save_params_to_file",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "TrainingModel.load_params_from_file": {
            "name": "load_params_from_file",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ],
                "allow_missing_params": [
                    "bool"
                ]
            }
        },
        "TrainingModel.install_monitor": {
            "name": "install_monitor",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monitor_pattern": [
                    "str"
                ],
                "monitor_stat_func_name": [
                    "str"
                ]
            }
        },
        "TrainingModel.monitor": {
            "name": "monitor",
            "location": 367,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainState.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "early_stopping_metric": [
                    "str"
                ]
            }
        },
        "TrainState.save": {
            "name": "save",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "TrainState.load": {
            "name": "load",
            "location": 410,
            "return": [
                "TrainState"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "EarlyStoppingTrainer.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "TrainingModel"
                ],
                "optimizer_config": [
                    "sockeye.optimizers.OptimizerConfig"
                ],
                "max_params_files_to_keep": [
                    "int"
                ],
                "source_vocabs": [
                    "List[Dict[(str, int)]]"
                ],
                "target_vocab": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "EarlyStoppingTrainer.fit": {
            "name": "fit",
            "location": 443,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "train_iter": [
                    "data_io.BaseParallelSampleIter"
                ],
                "validation_iter": [
                    "data_io.BaseParallelSampleIter"
                ],
                "early_stopping_metric": [],
                "metrics": [
                    "List[str]"
                ],
                "checkpoint_frequency": [
                    "int"
                ],
                "max_num_not_improved": [
                    "int"
                ],
                "min_samples": [
                    "Optional[int]"
                ],
                "max_samples": [
                    "Optional[int]"
                ],
                "min_updates": [
                    "Optional[int]"
                ],
                "max_updates": [
                    "Optional[int]"
                ],
                "min_epochs": [
                    "Optional[int]"
                ],
                "max_epochs": [
                    "Optional[int]"
                ],
                "lr_decay_param_reset": [
                    "bool"
                ],
                "lr_decay_opt_states_reset": [
                    "str"
                ],
                "decoder": [
                    "Optional[checkpoint_decoder.CheckpointDecoder]"
                ],
                "mxmonitor_pattern": [
                    "Optional[str]"
                ],
                "mxmonitor_stat_func": [
                    "Optional[str]"
                ],
                "allow_missing_parameters": [
                    "bool"
                ],
                "existing_parameters": [
                    "Optional[str]"
                ]
            }
        },
        "EarlyStoppingTrainer._step": {
            "name": "_step",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "TrainingModel"
                ],
                "batch": [
                    "float",
                    "str",
                    "int"
                ],
                "checkpoint_frequency": [
                    "int"
                ],
                "metric_train": [
                    "str"
                ],
                "metric_loss": []
            }
        },
        "EarlyStoppingTrainer._evaluate": {
            "name": "_evaluate",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val_iter": [
                    "data_io.BaseParallelSampleIter"
                ],
                "val_metric": [
                    "data_io.BaseParallelSampleIter",
                    "bool"
                ]
            }
        },
        "EarlyStoppingTrainer._update_metrics": {
            "name": "_update_metrics",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_train": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "metric_val": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "process_manager": [
                    "Optional[DecoderProcessManager]"
                ]
            }
        },
        "EarlyStoppingTrainer._cleanup": {
            "name": "_cleanup",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr_decay_opt_states_reset": [
                    "str"
                ],
                "process_manager": [
                    "Optional[DecoderProcessManager]"
                ]
            }
        },
        "EarlyStoppingTrainer._initialize_parameters": {
            "name": "_initialize_parameters",
            "location": 776,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Optional[str]"
                ],
                "allow_missing_params": [
                    "bool"
                ]
            }
        },
        "EarlyStoppingTrainer._initialize_optimizer": {
            "name": "_initialize_optimizer",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._adjust_learning_rate": {
            "name": "_adjust_learning_rate",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "bool"
                ],
                "lr_decay_param_reset": [
                    "bool"
                ],
                "lr_decay_opt_states_reset": [
                    "str"
                ]
            }
        },
        "EarlyStoppingTrainer.best_params_fname": {
            "name": "best_params_fname",
            "location": 809,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.current_params_fname": {
            "name": "current_params_fname",
            "location": 813,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.metrics_fname": {
            "name": "metrics_fname",
            "location": 817,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.training_state_dirname": {
            "name": "training_state_dirname",
            "location": 821,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._create_eval_metric": {
            "name": "_create_eval_metric",
            "location": 825,
            "return": [
                "numpy.array",
                "numpy.ndarray",
                "int",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "metric_name": [
                    "str"
                ]
            }
        },
        "EarlyStoppingTrainer._create_eval_metric_composite": {
            "name": "_create_eval_metric_composite",
            "location": 838,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "metric_names": [
                    "List[str]"
                ]
            }
        },
        "EarlyStoppingTrainer._create_metrics": {
            "name": "_create_metrics",
            "location": 845,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "List[str]"
                ],
                "optimizer": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ],
                "loss": [
                    "loss.Loss"
                ]
            }
        },
        "EarlyStoppingTrainer._update_best_params_link": {
            "name": "_update_best_params_link",
            "location": 861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._update_best_optimizer_states": {
            "name": "_update_best_optimizer_states",
            "location": 871,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr_decay_opt_states_reset": [
                    "str"
                ]
            }
        },
        "EarlyStoppingTrainer._save_initial_optimizer_states": {
            "name": "_save_initial_optimizer_states",
            "location": 875,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr_decay_opt_states_reset": [
                    "str"
                ]
            }
        },
        "EarlyStoppingTrainer._check_args": {
            "name": "_check_args",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "List[str]"
                ],
                "early_stopping_metric": [
                    "str"
                ],
                "lr_decay_opt_states_reset": [
                    "str"
                ],
                "lr_decay_param_reset": [
                    "bool"
                ],
                "cp_decoder": [
                    "Optional[checkpoint_decoder.CheckpointDecoder]"
                ]
            }
        },
        "EarlyStoppingTrainer._save_params": {
            "name": "_save_params",
            "location": 916,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._save_training_state": {
            "name": "_save_training_state",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_iter": [
                    "data_io.BaseParallelSampleIter"
                ]
            }
        },
        "EarlyStoppingTrainer._load_training_state": {
            "name": "_load_training_state",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_iter": [
                    "data_io.BaseParallelSampleIter"
                ]
            }
        },
        "TensorboardLogger.__init__": {
            "name": "__init__",
            "location": 1017,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logdir": [
                    "str"
                ],
                "source_vocab": [
                    "Optional[Dict[(str, int)]]"
                ],
                "target_vocab": [
                    "Optional[Dict[(str, int)]]"
                ]
            }
        },
        "TensorboardLogger.log_metrics": {
            "name": "log_metrics",
            "location": 1032,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "Dict[(str, Any)]"
                ],
                "checkpoint": [
                    "int"
                ]
            }
        },
        "TensorboardLogger.log_graph": {
            "name": "log_graph",
            "location": 1042,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "int",
                    "str"
                ]
            }
        },
        "TensorboardLogger.log_source_embedding": {
            "name": "log_source_embedding",
            "location": 1047,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding": [
                    "int",
                    "str",
                    "float"
                ],
                "checkpoint": [
                    "int"
                ]
            }
        },
        "TensorboardLogger.log_target_embedding": {
            "name": "log_target_embedding",
            "location": 1052,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "checkpoint": [
                    "int"
                ]
            }
        },
        "TensorboardLogger.log_output_embedding": {
            "name": "log_output_embedding",
            "location": 1057,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "checkpoint": [
                    "int"
                ]
            }
        },
        "Speedometer.__init__": {
            "name": "__init__",
            "location": 1068,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frequency": [
                    "int"
                ],
                "auto_reset": [
                    "bool"
                ]
            }
        },
        "Speedometer.__call__": {
            "name": "__call__",
            "location": 1078,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "int"
                ],
                "updates": [
                    "int"
                ],
                "samples": [
                    "int"
                ],
                "tokens": [
                    "int"
                ],
                "metric": [
                    "None",
                    "Dict[str, Set[str]]",
                    "Optional[bool]",
                    "dict",
                    "int",
                    "Optional[numpy.ndarray]",
                    "List[Tuple[bytes, bytes]]"
                ]
            }
        },
        "DecoderProcessManager.__init__": {
            "name": "__init__",
            "location": 1118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_folder": [
                    "str"
                ],
                "decoder": [
                    "checkpoint_decoder.CheckpointDecoder"
                ]
            }
        },
        "DecoderProcessManager.start_decoder": {
            "name": "start_decoder",
            "location": 1127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checkpoint": [
                    "int"
                ]
            }
        },
        "DecoderProcessManager.collect_results": {
            "name": "collect_results",
            "location": 1141,
            "return": [
                "Optional[Tuple[(int, Dict[(str, float)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoderProcessManager.wait_to_finish": {
            "name": "wait_to_finish",
            "location": 1153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel._initialize.sym_gen": {
            "name": "sym_gen",
            "location": 110,
            "return": [
                "tuple[]",
                "str",
                "Optional[constants.AgeClass]",
                "int"
            ],
            "arguments": {
                "seq_lens": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/transformer.py": {
        "get_variable_length_bias": {
            "name": "get_variable_length_bias",
            "location": 337,
            "return": [
                "str"
            ],
            "arguments": {
                "lengths": [
                    "int",
                    "str"
                ],
                "max_length": [
                    "int"
                ],
                "num_heads": [
                    "Optional[int]"
                ],
                "fold_heads": [
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "get_autoregressive_bias": {
            "name": "get_autoregressive_bias",
            "location": 360,
            "return": [
                "Callable"
            ],
            "arguments": {
                "max_length": [
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "TransformerConfig.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_size": [
                    "int"
                ],
                "attention_heads": [
                    "int"
                ],
                "feed_forward_num_hidden": [
                    "int"
                ],
                "act_type": [
                    "str"
                ],
                "num_layers": [
                    "int"
                ],
                "dropout_attention": [
                    "float"
                ],
                "dropout_act": [
                    "float"
                ],
                "dropout_prepost": [
                    "float"
                ],
                "positional_embedding_type": [
                    "str"
                ],
                "preprocess_sequence": [
                    "str"
                ],
                "postprocess_sequence": [
                    "str"
                ],
                "max_seq_len_source": [
                    "int"
                ],
                "max_seq_len_target": [
                    "int"
                ],
                "conv_config": [
                    "Optional[encoder.ConvolutionalEmbeddingConfig]"
                ],
                "lhuc": [
                    "bool"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "TransformerEncoderBlock.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "TransformerConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "TransformerEncoderBlock.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "bias": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ]
            }
        },
        "TransformerDecoderBlock.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "TransformerConfig"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "TransformerDecoderBlock.__call__": {
            "name": "__call__",
            "location": 168,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "numpy.array"
                ],
                "target_bias": [
                    "bool"
                ],
                "source": [
                    "int",
                    "numpy.ndarray"
                ],
                "source_bias": [
                    "int",
                    "numpy.ndarray"
                ],
                "cache": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "TransformerProcessBlock.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "str"
                ],
                "dropout": [
                    "float"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "TransformerProcessBlock.__call__": {
            "name": "__call__",
            "location": 216,
            "return": [
                "str",
                "bytes",
                "dict[, ]",
                "bool",
                "List[Dict[str, Any]]",
                "typing.Callable[, ]",
                "List[numpy.ndarray]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict[, ]",
                    "str",
                    "T",
                    "typing.Callable[, ]",
                    "dict",
                    "numpy.ndarray",
                    "Callable"
                ],
                "prev": [
                    "Iterable",
                    "int",
                    "typing.Iterable[]"
                ]
            }
        },
        "TransformerFeedForward.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int"
                ],
                "num_model": [
                    "int"
                ],
                "act_type": [
                    "str"
                ],
                "dropout": [
                    "float"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "TransformerFeedForward.__call__": {
            "name": "__call__",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.ndarray",
                    "list[int]",
                    "List[int]"
                ]
            }
        },
        "VariableLengthBias.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [
                    "int"
                ]
            }
        },
        "VariableLengthBias.forward": {
            "name": "forward",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_train": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "req": [
                    "Optional[Callable[[Any], Any]]"
                ],
                "in_data": [
                    "Callable[[Any], None]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "out_data": [
                    "Optional[Callable[[Any], Any]]"
                ],
                "aux": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ]
            }
        },
        "VariableLengthBias.backward": {
            "name": "backward",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "out_grad": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "in_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "out_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "in_grad": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "aux": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "VariableLengthBiasProp.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [
                    "int",
                    "Dict[str, int]",
                    "float"
                ]
            }
        },
        "VariableLengthBiasProp.list_arguments": {
            "name": "list_arguments",
            "location": 320,
            "return": [
                "list[typing.Text]",
                "str",
                "dict",
                "bool",
                "Optional[Dict[str, Any]]",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthBiasProp.list_outputs": {
            "name": "list_outputs",
            "location": 323,
            "return": [
                "list[typing.Text]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthBiasProp.infer_shape": {
            "name": "infer_shape",
            "location": 326,
            "return": [
                "bool",
                "tuple[typing.Union[tuple[typing.Union[int,int]],list[tuple[typing.Union[int,str,list[int]]]]]]"
            ],
            "arguments": {
                "self": [],
                "in_shape": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "bool",
                    "Union[Tuple[int, int], int]",
                    "Union[int, float]"
                ]
            }
        },
        "VariableLengthBiasProp.infer_type": {
            "name": "infer_type",
            "location": 330,
            "return": [
                "bool",
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "in_type": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "VariableLengthBiasProp.create_operator": {
            "name": "create_operator",
            "location": 333,
            "return": [
                "VariableLengthBias",
                "dict",
                "Type",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        },
        "AutoRegressiveBias.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ],
                "dtype": [
                    "str"
                ],
                "ctx": [
                    "bool",
                    "str",
                    "None",
                    "int",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "AutoRegressiveBias.get_bias": {
            "name": "get_bias",
            "location": 390,
            "return": [
                "int",
                "Iterable[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "length": [
                    "int"
                ],
                "dtype": [
                    "str"
                ],
                "ctx": [
                    "bool",
                    "int"
                ]
            }
        },
        "AutoRegressiveBias.forward": {
            "name": "forward",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_train": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "req": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "in_data": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "out_data": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "aux": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ]
            }
        },
        "AutoRegressiveBias.backward": {
            "name": "backward",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "out_grad": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "in_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "out_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "in_grad": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "aux": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "AutoRegressiveBiasProp.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ],
                "dtype": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AutoRegressiveBiasProp.list_arguments": {
            "name": "list_arguments",
            "location": 412,
            "return": [
                "list[]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoRegressiveBiasProp.list_outputs": {
            "name": "list_outputs",
            "location": 415,
            "return": [
                "list[typing.Text]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoRegressiveBiasProp.infer_shape": {
            "name": "infer_shape",
            "location": 418,
            "return": [
                "tuple[list[tuple[int]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "in_shape": [
                    "bool",
                    "typing.Callable[[], bool]",
                    "int",
                    "list[str]",
                    "Callable[[], bool]",
                    "List[str]"
                ]
            }
        },
        "AutoRegressiveBiasProp.infer_type": {
            "name": "infer_type",
            "location": 421,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "in_type": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "int"
                ]
            }
        },
        "AutoRegressiveBiasProp.create_operator": {
            "name": "create_operator",
            "location": 424,
            "return": [
                "AutoRegressiveBias",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "int"
                ],
                "shapes": [],
                "dtypes": []
            }
        }
    },
    "DCGCN-master/sockeye/translate.py": {
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_translate": {
            "name": "run_translate",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "make_inputs": {
            "name": "make_inputs",
            "location": 123,
            "return": [
                "Generator[(inference.TranslatorInput, None, None)]"
            ],
            "arguments": {
                "input_file": [
                    "Optional[str]"
                ],
                "translator": [
                    "inference.Translator"
                ],
                "input_is_json": [
                    "bool"
                ],
                "input_factors": [
                    "Optional[List[str]]"
                ]
            }
        },
        "read_and_translate": {
            "name": "read_and_translate",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "translator": [
                    "inference.Translator"
                ],
                "output_handler": [
                    "sockeye.output_handler.OutputHandler"
                ],
                "chunk_size": [
                    "Optional[int]"
                ],
                "input_file": [
                    "Optional[str]"
                ],
                "input_factors": [
                    "Optional[List[str]]"
                ],
                "input_is_json": [
                    "bool"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 214,
            "return": [
                "float"
            ],
            "arguments": {
                "output_handler": [
                    "sockeye.output_handler.OutputHandler"
                ],
                "trans_inputs": [
                    "List[inference.TranslatorInput]"
                ],
                "translator": [
                    "inference.Translator"
                ]
            }
        }
    },
    "DCGCN-master/sockeye/utils.py": {
        "check_version": {
            "name": "check_version",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "load_version": {
            "name": "load_version",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "parse_version": {
            "name": "parse_version",
            "location": 75,
            "return": [
                "Tuple[(str, str, str)]"
            ],
            "arguments": {
                "version_string": [
                    "str"
                ]
            }
        },
        "log_basic_info": {
            "name": "log_basic_info",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "seed_rngs": {
            "name": "seed_rngs",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "int"
                ]
            }
        },
        "check_condition": {
            "name": "check_condition",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "condition": [
                    "bool"
                ],
                "error_message": [
                    "str"
                ]
            }
        },
        "save_graph": {
            "name": "save_graph",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "symbol": [
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "filename": [
                    "str"
                ],
                "hide_weights": [
                    "bool"
                ]
            }
        },
        "compute_lengths": {
            "name": "compute_lengths",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sequence_data": [
                    "str",
                    "int"
                ]
            }
        },
        "save_params": {
            "name": "save_params",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "arg_params": [
                    "Mapping[(str, Any)]"
                ],
                "fname": [
                    "str"
                ],
                "aux_params": [
                    "Optional[Mapping[(str, Any)]]"
                ]
            }
        },
        "load_params": {
            "name": "load_params",
            "location": 158,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "top1": {
            "name": "top1",
            "location": 255,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "scores": [
                    "numpy.ndarray",
                    "bool"
                ],
                "offset": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "topk": {
            "name": "topk",
            "location": 277,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "Dict[int, Dict[int, Any]]",
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "Callable"
                ],
                "k": [
                    "int"
                ],
                "offset": [
                    "bool",
                    "Dict[str, Any]",
                    "List['cirq.Circuit']"
                ],
                "use_mxnet_topk": [
                    "bool"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 318,
            "return": [
                "Iterable[list]"
            ],
            "arguments": {
                "some_list": [
                    "list"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "get_tokens": {
            "name": "get_tokens",
            "location": 324,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "is_gzip_file": {
            "name": "is_gzip_file",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "smart_open": {
            "name": "smart_open",
            "location": 342,
            "return": [
                "Union[(gzip.GzipFile, TextIO, IO[Union[(bytes, str)]])]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ],
                "ftype": [
                    "str"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "plot_attention": {
            "name": "plot_attention",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "attention_matrix": [
                    "np.ndarray"
                ],
                "source_tokens": [
                    "List[str]"
                ],
                "target_tokens": [
                    "List[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "print_attention_text": {
            "name": "print_attention_text",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "attention_matrix": [
                    "np.ndarray"
                ],
                "source_tokens": [
                    "List[str]"
                ],
                "target_tokens": [
                    "List[str]"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "get_alignments": {
            "name": "get_alignments",
            "location": 433,
            "return": [
                "Iterator[Tuple[(int, int)]]"
            ],
            "arguments": {
                "attention_matrix": [
                    "np.ndarray"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "average_arrays": {
            "name": "average_arrays",
            "location": 448,
            "return": [
                "int",
                "Dict['cirq.Qid', float]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "arrays": [
                    "list"
                ]
            }
        },
        "get_num_gpus": {
            "name": "get_num_gpus",
            "location": 463,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_gpu_memory_usage": {
            "name": "get_gpu_memory_usage",
            "location": 472,
            "return": [
                "Dict[(int, Tuple[(int, int)])]"
            ],
            "arguments": {
                "ctx": [
                    "list"
                ]
            }
        },
        "log_gpu_memory_usage": {
            "name": "log_gpu_memory_usage",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "memory_data": [
                    "Dict[(int, Tuple[(int, int)])]"
                ]
            }
        },
        "determine_context": {
            "name": "determine_context",
            "location": 510,
            "return": [
                "list"
            ],
            "arguments": {
                "device_ids": [
                    "List[int]"
                ],
                "use_cpu": [
                    "bool"
                ],
                "disable_device_locking": [
                    "bool"
                ],
                "lock_dir": [
                    "str"
                ],
                "exit_stack": [
                    "contextlib.ExitStack"
                ]
            }
        },
        "expand_requested_device_ids": {
            "name": "expand_requested_device_ids",
            "location": 539,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "requested_device_ids": [
                    "List[int]"
                ]
            }
        },
        "_expand_requested_device_ids": {
            "name": "_expand_requested_device_ids",
            "location": 555,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "requested_device_ids": [
                    "List[int]"
                ],
                "num_gpus_available": [
                    "int"
                ]
            }
        },
        "acquire_gpus": {
            "name": "acquire_gpus",
            "location": 576,
            "return": [
                "typing.Generator[list[]]",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "requested_device_ids": [
                    "list[int]",
                    "list[str]",
                    "List[int]",
                    "int",
                    "str",
                    "List[bool]",
                    "List[str]",
                    "Optional[int]"
                ],
                "lock_dir": [
                    "str",
                    "typing.Text"
                ],
                "retry_wait_min": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "retry_wait_rand": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "num_gpus_available": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Union[Exception, str]",
                    "int",
                    "Exception"
                ]
            }
        },
        "read_metrics_file": {
            "name": "read_metrics_file",
            "location": 736,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_metrics_file": {
            "name": "write_metrics_file",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics": [
                    "List[Dict[(str, Any)]]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "get_validation_metric_points": {
            "name": "get_validation_metric_points",
            "location": 771,
            "return": [
                "List[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ],
                "metric": [
                    "str"
                ]
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 847,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "iterable": [
                    "Iterable"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "metric_value_is_better": {
            "name": "metric_value_is_better",
            "location": 863,
            "return": [
                "bool"
            ],
            "arguments": {
                "new": [
                    "float"
                ],
                "old": [
                    "float"
                ],
                "metric": [
                    "str"
                ]
            }
        },
        "cleanup_params_files": {
            "name": "cleanup_params_files",
            "location": 873,
            "return": [
                "None"
            ],
            "arguments": {
                "output_folder": [
                    "str"
                ],
                "max_to_keep": [
                    "int"
                ],
                "checkpoint": [
                    "int"
                ],
                "best_checkpoint": [
                    "int"
                ]
            }
        },
        "cast_conditionally": {
            "name": "cast_conditionally",
            "location": 893,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "bytes"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "uncast_conditionally": {
            "name": "uncast_conditionally",
            "location": 907,
            "return": [
                "bytes",
                "int",
                "str",
                "bool",
                "typing.IO",
                "Callable[[bytes], bytes]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "IO[Any]",
                    "typing.IO"
                ],
                "dtype": [
                    "str"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 921,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bool"
                ],
                "num_outputs": [
                    "int"
                ],
                "axis": [
                    "int"
                ],
                "squeeze_axis": [
                    "bool"
                ]
            }
        },
        "Accuracy.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "float"
                ],
                "output_names": [
                    "str",
                    "float",
                    "None"
                ],
                "label_names": [
                    "str",
                    "float",
                    "None"
                ],
                "ignore_label": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Accuracy.update": {
            "name": "update",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Union[str, Iterable[str]]",
                    "None",
                    "numpy.random.RandomState",
                    "Optional[numpy.dtype]"
                ],
                "preds": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "Union[str, Iterable[str]]",
                    "None",
                    "numpy.random.RandomState",
                    "Optional[numpy.dtype]"
                ]
            }
        },
        "OnlineMeanAndVariance.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.update": {
            "name": "update",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "OnlineMeanAndVariance.count": {
            "name": "count",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.mean": {
            "name": "mean",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.variance": {
            "name": "variance",
            "location": 248,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GpuFileLock.__init__": {
            "name": "__init__",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "List[GpuDeviceType]"
                ],
                "lock_dir": [
                    "str"
                ]
            }
        },
        "GpuFileLock.__enter__": {
            "name": "__enter__",
            "location": 692,
            "return": [
                "Optional[GpuDeviceType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GpuFileLock.__exit__": {
            "name": "__exit__",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "PrintValue.__init__": {
            "name": "__init__",
            "location": 795,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "print_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "print_grad": [
                    "str"
                ],
                "use_logger": [
                    "str"
                ]
            }
        },
        "PrintValue.__print_nd__": {
            "name": "__print_nd__",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nd": [
                    "Optional[Dict]",
                    "Callable",
                    "str",
                    "int"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "PrintValue.forward": {
            "name": "forward",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_train": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "req": [
                    "Optional[Callable[[Any], Any]]"
                ],
                "in_data": [
                    "str",
                    "Optional[str]"
                ],
                "out_data": [
                    "Optional[Callable[[Any], Any]]"
                ],
                "aux": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ]
            }
        },
        "PrintValue.backward": {
            "name": "backward",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "Dict[str, List[str]]"
                ],
                "out_grad": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "Dict[str, List[str]]"
                ],
                "in_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "out_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "in_grad": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "Dict[str, List[str]]"
                ],
                "aux": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "PrintValueProp.__init__": {
            "name": "__init__",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "print_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "print_grad": [
                    "bool",
                    "str",
                    "Optional[Mapping]",
                    "Optional[str]"
                ],
                "use_logger": [
                    "bool"
                ]
            }
        },
        "PrintValueProp.list_arguments": {
            "name": "list_arguments",
            "location": 829,
            "return": [
                "list[typing.Text]",
                "str",
                "dict",
                "bool",
                "Optional[Dict[str, Any]]",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintValueProp.list_outputs": {
            "name": "list_outputs",
            "location": 832,
            "return": [
                "list[typing.Text]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintValueProp.infer_shape": {
            "name": "infer_shape",
            "location": 835,
            "return": [
                "tuple[typing.Union[int,list[],str,typing.Sequence[T]]]",
                "bool",
                "List[str]",
                "str",
                "List[Dict[str, str]]",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "in_shape": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "numpy.ndarray",
                    "typing.Sequence[T]",
                    "Sequence[T]"
                ]
            }
        },
        "PrintValueProp.infer_type": {
            "name": "infer_type",
            "location": 838,
            "return": [
                "bool",
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "in_type": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "PrintValueProp.create_operator": {
            "name": "create_operator",
            "location": 841,
            "return": [
                "PrintValue",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        }
    },
    "DCGCN-master/sockeye/vocab.py": {
        "build_from_paths": {
            "name": "build_from_paths",
            "location": 34,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "paths": [
                    "List[str]"
                ],
                "num_words": [
                    "Optional[int]"
                ],
                "min_count": [
                    "int"
                ],
                "pad_to_multiple_of": [
                    "Optional[int]"
                ]
            }
        },
        "build_vocab": {
            "name": "build_vocab",
            "location": 53,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "data": [
                    "Iterable[str]"
                ],
                "num_words": [
                    "Optional[int]"
                ],
                "min_count": [
                    "int"
                ],
                "pad_to_multiple_of": [
                    "Optional[int]"
                ]
            }
        },
        "vocab_to_json": {
            "name": "vocab_to_json",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "vocab": [
                    "Dict[(str, int)]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "vocab_from_json": {
            "name": "vocab_from_json",
            "location": 115,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "save_source_vocabs": {
            "name": "save_source_vocabs",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "source_vocabs": [
                    "List[Dict[(str, int)]]"
                ],
                "folder": [
                    "str"
                ]
            }
        },
        "save_target_vocab": {
            "name": "save_target_vocab",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "target_vocab": [
                    "Dict[(str, int)]"
                ],
                "folder": [
                    "str"
                ]
            }
        },
        "load_source_vocabs": {
            "name": "load_source_vocabs",
            "location": 150,
            "return": [
                "List[Dict[(str, int)]]"
            ],
            "arguments": {
                "folder": [
                    "str"
                ]
            }
        },
        "load_target_vocab": {
            "name": "load_target_vocab",
            "location": 162,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "folder": [
                    "str"
                ]
            }
        },
        "load_or_create_vocab": {
            "name": "load_or_create_vocab",
            "location": 172,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "vocab_path": [
                    "Optional[str]"
                ],
                "num_words": [
                    "int"
                ],
                "word_min_count": [
                    "int"
                ],
                "pad_to_multiple_of": [
                    "Optional[int]"
                ]
            }
        },
        "load_or_create_vocabs": {
            "name": "load_or_create_vocabs",
            "location": 185,
            "return": [
                "Tuple[(List[Dict[(str, int)]], Dict[(str, int)])]"
            ],
            "arguments": {
                "source_paths": [
                    "List[str]"
                ],
                "target_path": [
                    "str"
                ],
                "source_vocab_paths": [
                    "List[Optional[str]]"
                ],
                "target_vocab_path": [
                    "Optional[str]"
                ],
                "shared_vocab": [
                    "bool"
                ],
                "num_words_source": [
                    "Optional[int]"
                ],
                "word_min_count_source": [
                    "int"
                ],
                "num_words_target": [
                    "Optional[int]"
                ],
                "word_min_count_target": [
                    "int"
                ],
                "pad_to_multiple_of": [
                    "Optional[int]"
                ]
            }
        },
        "reverse_vocab": {
            "name": "reverse_vocab",
            "location": 260,
            "return": [
                "Dict[(int, str)]"
            ],
            "arguments": {
                "vocab": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "get_ordered_tokens_from_vocab": {
            "name": "get_ordered_tokens_from_vocab",
            "location": 270,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "vocab": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "are_identical": {
            "name": "are_identical",
            "location": 280,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DCGCN-master/sockeye/__init__.py": {},
    "DCGCN-master/sockeye_contrib/rouge.py": {
        "_get_ngrams": {
            "name": "_get_ngrams",
            "location": 32,
            "return": [
                "Set[tuple]"
            ],
            "arguments": {
                "n": [],
                "text": []
            }
        },
        "_split_into_words": {
            "name": "_split_into_words",
            "location": 50,
            "return": [
                "list"
            ],
            "arguments": {
                "sentences": []
            }
        },
        "_get_word_ngrams": {
            "name": "_get_word_ngrams",
            "location": 55,
            "return": [
                "Set[tuple]"
            ],
            "arguments": {
                "n": [],
                "sentences": []
            }
        },
        "_len_lcs": {
            "name": "_len_lcs",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_lcs": {
            "name": "_lcs",
            "location": 83,
            "return": [
                "Dict[(Tuple[(int, int)], int)]"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_recon_lcs": {
            "name": "_recon_lcs",
            "location": 110,
            "return": [
                "tuple"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "rouge_n": {
            "name": "rouge_n",
            "location": 140,
            "return": [
                "Tuple[(float, float, float)]"
            ],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": [],
                "n": [
                    "int"
                ]
            }
        },
        "_f_p_r_lcs": {
            "name": "_f_p_r_lcs",
            "location": 186,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "llcs": [],
                "m": [],
                "n": []
            }
        },
        "rouge_l_sentence_level": {
            "name": "rouge_l_sentence_level",
            "location": 209,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": []
            }
        },
        "_union_lcs": {
            "name": "_union_lcs",
            "location": 246,
            "return": [
                "float"
            ],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentence": []
            }
        },
        "rouge_l_summary_level": {
            "name": "rouge_l_summary_level",
            "location": 283,
            "return": [
                "Tuple[(float, float, float)]"
            ],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": []
            }
        },
        "rouge": {
            "name": "rouge",
            "location": 327,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_1": {
            "name": "rouge_1",
            "location": 368,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_2": {
            "name": "rouge_2",
            "location": 379,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_l": {
            "name": "rouge_l",
            "location": 390,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "_recon_lcs._recon": {
            "name": "_recon",
            "location": 125,
            "return": [
                "list[]"
            ],
            "arguments": {
                "i": [],
                "j": []
            }
        }
    },
    "DCGCN-master/sockeye_contrib/__init__.py": {},
    "DCGCN-master/sockeye_contrib/autopilot/autopilot.py": {
        "identify_raw_files": {
            "name": "identify_raw_files",
            "location": 101,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "task": [
                    "sockeye_contrib.autopilot.tasks.Task"
                ],
                "test_mode": [
                    "bool"
                ]
            }
        },
        "download_extract_raw_files": {
            "name": "download_extract_raw_files",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "List[str]"
                ],
                "cache_dir": [
                    "str"
                ],
                "dest_dir": [
                    "str"
                ]
            }
        },
        "md5sum": {
            "name": "md5sum",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "populate_parallel_text": {
            "name": "populate_parallel_text",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "extract_dir": [
                    "str"
                ],
                "file_sets": [
                    "List[Tuple[(str, str, str)]]"
                ],
                "dest_prefix": [
                    "str"
                ],
                "keep_separate": [
                    "bool"
                ],
                "head_n": [
                    "int"
                ]
            }
        },
        "copy_parallel_text": {
            "name": "copy_parallel_text",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "file_list": [
                    "List[str]"
                ],
                "dest_prefix": [
                    "str"
                ]
            }
        },
        "plain_text_iter": {
            "name": "plain_text_iter",
            "location": 267,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ],
                "text_type": [
                    "str"
                ],
                "data_side": [
                    "str"
                ]
            }
        },
        "touch_file": {
            "name": "touch_file",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "renew_step_dir": {
            "name": "renew_step_dir",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "step_dir": [
                    "str"
                ]
            }
        },
        "call_sockeye_train": {
            "name": "call_sockeye_train",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "str"
                ],
                "bpe_dir": [
                    "str"
                ],
                "model_dir": [
                    "str"
                ],
                "log_fname": [
                    "str"
                ],
                "num_gpus": [
                    "int"
                ],
                "test_mode": [
                    "bool"
                ]
            }
        },
        "call_sockeye_average": {
            "name": "call_sockeye_average",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "model_dir": [
                    "str"
                ],
                "log_fname": [
                    "str"
                ]
            }
        },
        "call_sockeye_translate": {
            "name": "call_sockeye_translate",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "List[str]"
                ],
                "input_fname": [
                    "str"
                ],
                "output_fname": [
                    "str"
                ],
                "model_dir": [
                    "str"
                ],
                "log_fname": [
                    "str"
                ],
                "use_cpu": [
                    "bool"
                ]
            }
        },
        "call_sacrebleu": {
            "name": "call_sacrebleu",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "input_fname": [
                    "str"
                ],
                "ref_fname": [
                    "str"
                ],
                "output_fname": [
                    "str"
                ],
                "log_fname": [
                    "str"
                ],
                "tokenized": [
                    "bool"
                ]
            }
        },
        "print_command": {
            "name": "print_command",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "List[str]"
                ],
                "fname": [
                    "str"
                ]
            }
        },
        "run_steps": {
            "name": "run_steps",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_steps.report_data": {
            "name": "report_data",
            "location": 513,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "file_sets": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "Iterable[str]",
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye_contrib/autopilot/models.py": {},
    "DCGCN-master/sockeye_contrib/autopilot/tasks.py": {},
    "DCGCN-master/sockeye_contrib/autopilot/test.py": {
        "run_test": {
            "name": "run_test",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "List[str]"
                ],
                "workspace": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DCGCN-master/sockeye_contrib/autopilot/third_party.py": {
        "bin_open": {
            "name": "bin_open",
            "location": 51,
            "return": [
                "Union[(gzip.GzipFile, BinaryIO)]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "check_git": {
            "name": "check_git",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_perl": {
            "name": "check_perl",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "checkout_moses_tokenizer": {
            "name": "checkout_moses_tokenizer",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace_dir": [
                    "str"
                ]
            }
        },
        "checkout_subword_nmt": {
            "name": "checkout_subword_nmt",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace_dir": [
                    "str"
                ]
            }
        },
        "confirm_checkout": {
            "name": "confirm_checkout",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "dest": [
                    "str"
                ],
                "commit": [
                    "str"
                ]
            }
        },
        "call_moses_tokenizer": {
            "name": "call_moses_tokenizer",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace_dir": [
                    "str"
                ],
                "input_fname": [
                    "str"
                ],
                "output_fname": [
                    "str"
                ],
                "lang_code": [
                    "str"
                ],
                "num_threads": [
                    "int"
                ]
            }
        },
        "call_moses_detokenizer": {
            "name": "call_moses_detokenizer",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace_dir": [
                    "str"
                ],
                "input_fname": [
                    "str"
                ],
                "output_fname": [
                    "str"
                ],
                "lang_code": [
                    "Optional[str]"
                ]
            }
        },
        "call_learn_bpe": {
            "name": "call_learn_bpe",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace_dir": [
                    "str"
                ],
                "source_fname": [
                    "str"
                ],
                "target_fname": [
                    "str"
                ],
                "model_fname": [
                    "str"
                ],
                "num_ops": [
                    "int"
                ]
            }
        },
        "call_apply_bpe": {
            "name": "call_apply_bpe",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace_dir": [
                    "str"
                ],
                "input_fname": [
                    "str"
                ],
                "output_fname": [
                    "str"
                ],
                "model_fname": [
                    "str"
                ]
            }
        },
        "merge_bpe": {
            "name": "merge_bpe",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "input_fname": [
                    "str"
                ],
                "output_fname": [
                    "str"
                ]
            }
        },
        "copy_out": {
            "name": "copy_out",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "Iterable[bytes]"
                ],
                "dest": [
                    "io.BytesIO"
                ],
                "use_placeholders": [
                    "bool"
                ]
            }
        }
    },
    "DCGCN-master/sockeye_contrib/autopilot/__init__.py": {},
    "DCGCN-master/sockeye_contrib/sacrebleu/sacrebleu.py": {
        "tokenize_13a": {
            "name": "tokenize_13a",
            "location": 495,
            "return": [
                "str"
            ],
            "arguments": {
                "line": []
            }
        },
        "tokenize_v14_international": {
            "name": "tokenize_v14_international",
            "location": 540,
            "return": [
                "str"
            ],
            "arguments": {
                "string": []
            }
        },
        "tokenize_zh": {
            "name": "tokenize_zh",
            "location": 567,
            "return": [
                "str"
            ],
            "arguments": {
                "sentence": []
            }
        },
        "smart_open": {
            "name": "smart_open",
            "location": 692,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "file": [],
                "mode": [
                    "typing.Text"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "my_log": {
            "name": "my_log",
            "location": 702,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "num": []
            }
        },
        "bleu_signature": {
            "name": "bleu_signature",
            "location": 715,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "numrefs": []
            }
        },
        "chrf_signature": {
            "name": "chrf_signature",
            "location": 750,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "numrefs": []
            }
        },
        "extract_ngrams": {
            "name": "extract_ngrams",
            "location": 786,
            "return": [
                "Counter"
            ],
            "arguments": {
                "line": [],
                "min_order": [
                    "int"
                ],
                "max_order": []
            }
        },
        "extract_char_ngrams": {
            "name": "extract_char_ngrams",
            "location": 804,
            "return": [
                "Counter"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "ref_stats": {
            "name": "ref_stats",
            "location": 811,
            "return": [
                "Tuple[(Counter, Optional[int], Optional[int])]"
            ],
            "arguments": {
                "output": [],
                "refs": []
            }
        },
        "_clean": {
            "name": "_clean",
            "location": 833,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "process_to_text": {
            "name": "process_to_text",
            "location": 843,
            "return": [
                "None"
            ],
            "arguments": {
                "rawfile": [],
                "txtfile": []
            }
        },
        "print_test_set": {
            "name": "print_test_set",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "test_set": [],
                "langpair": [],
                "side": []
            }
        },
        "download_test_set": {
            "name": "download_test_set",
            "location": 884,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "test_set": [],
                "langpair": [
                    "None"
                ]
            }
        },
        "compute_bleu": {
            "name": "compute_bleu",
            "location": 951,
            "return": [
                "BLEU"
            ],
            "arguments": {
                "correct": [
                    "List[int]"
                ],
                "total": [
                    "List[int]"
                ],
                "sys_len": [
                    "int"
                ],
                "ref_len": [
                    "int"
                ],
                "smooth": [
                    "typing.Text"
                ],
                "smooth_floor": [
                    "float"
                ],
                "use_effective_order": [
                    "bool"
                ]
            }
        },
        "sentence_bleu": {
            "name": "sentence_bleu",
            "location": 999,
            "return": [],
            "arguments": {
                "hypothesis": [
                    "str"
                ],
                "reference": [
                    "str"
                ],
                "smooth_floor": [
                    "float"
                ],
                "use_effective_order": [
                    "bool"
                ]
            }
        },
        "corpus_bleu": {
            "name": "corpus_bleu",
            "location": 1022,
            "return": [
                "BLEU"
            ],
            "arguments": {
                "sys_stream": [],
                "ref_streams": [],
                "smooth": [
                    "typing.Text"
                ],
                "smooth_floor": [
                    "float"
                ],
                "force": [
                    "bool"
                ],
                "lowercase": [
                    "bool"
                ],
                "tokenize": [],
                "use_effective_order": [
                    "bool"
                ]
            }
        },
        "raw_corpus_bleu": {
            "name": "raw_corpus_bleu",
            "location": 1083,
            "return": [
                "BLEU"
            ],
            "arguments": {
                "sys_stream": [],
                "ref_streams": [],
                "smooth_floor": [
                    "float"
                ]
            }
        },
        "delete_whitespace": {
            "name": "delete_whitespace",
            "location": 1094,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "get_sentence_statistics": {
            "name": "get_sentence_statistics",
            "location": 1101,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "hypothesis": [
                    "str"
                ],
                "reference": [
                    "str"
                ],
                "order": [
                    "int"
                ],
                "remove_whitespace": [
                    "bool"
                ]
            }
        },
        "get_corpus_statistics": {
            "name": "get_corpus_statistics",
            "location": 1119,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]"
                ],
                "references": [
                    "Iterable[str]"
                ],
                "order": [
                    "int"
                ],
                "remove_whitespace": [
                    "bool"
                ]
            }
        },
        "_avg_precision_and_recall": {
            "name": "_avg_precision_and_recall",
            "location": 1131,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "statistics": [
                    "List[float]"
                ],
                "order": [
                    "int"
                ]
            }
        },
        "_chrf": {
            "name": "_chrf",
            "location": 1150,
            "return": [
                "float"
            ],
            "arguments": {
                "avg_precision": [],
                "avg_recall": [],
                "beta": [
                    "int"
                ]
            }
        },
        "corpus_chrf": {
            "name": "corpus_chrf",
            "location": 1158,
            "return": [
                "float"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]"
                ],
                "references": [
                    "Iterable[str]"
                ],
                "order": [
                    "int"
                ],
                "beta": [
                    "float"
                ],
                "remove_whitespace": [
                    "bool"
                ]
            }
        },
        "sentence_chrf": {
            "name": "sentence_chrf",
            "location": 1178,
            "return": [
                "float"
            ],
            "arguments": {
                "hypothesis": [
                    "str"
                ],
                "reference": [
                    "str"
                ],
                "order": [
                    "int"
                ],
                "beta": [
                    "float"
                ],
                "remove_whitespace": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 1198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UnicodeRegex._property_chars": {
            "name": "_property_chars",
            "location": 531,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "UnicodeRegex"
                ]
            }
        },
        "tokenize_zh.is_chinese_char": {
            "name": "is_chinese_char",
            "location": 597,
            "return": [
                "bool"
            ],
            "arguments": {
                "uchar": []
            }
        }
    },
    "DCGCN-master/sockeye_contrib/sacrebleu/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "DCGCN-master/sockeye_contrib/sacrebleu/__init__.py": {},
    "DCGCN-master/sockeye_contrib/vistools/generate_graphs.py": {
        "_add_graph_level": {
            "name": "_add_graph_level",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "bool",
                    "T"
                ],
                "level": [
                    "int",
                    "bytes"
                ],
                "parent_ids": [
                    "str"
                ],
                "names": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Union[int, float]]",
                    "int",
                    "float"
                ],
                "scores": [
                    "typing.Iterable[int]",
                    "str",
                    "Iterable[int]",
                    "float",
                    "int",
                    "Union[int, float]"
                ],
                "normalized_scores": [
                    "int",
                    "dict[str, str]",
                    "str",
                    "bool",
                    "float",
                    "Dict[str, str]",
                    "Union[int, float]",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "include_pad": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "create_graph": {
            "name": "create_graph",
            "location": 99,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "predicted_ids": [
                    "str",
                    "List[str]"
                ],
                "parent_ids": [
                    "int",
                    "str",
                    "float"
                ],
                "scores": [
                    "int",
                    "str",
                    "float"
                ],
                "normalized_scores": [
                    "int",
                    "str",
                    "float"
                ],
                "include_pad": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "input_data": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "output_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "include_pad": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DCGCN-master/sockeye_contrib/vistools/test/test_integration.py": {
        "test_beam_generation": {
            "name": "test_beam_generation",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "beams": [
                    "int"
                ],
                "expected_output": [
                    "str",
                    "IO[bytes]",
                    "typing.IO"
                ],
                "tmpdir": [
                    "typing.IO",
                    "IO[bytes]",
                    "IO[Any]"
                ]
            }
        }
    },
    "DCGCN-master/sockeye_contrib/vistools/test/__init__.py": {}
}
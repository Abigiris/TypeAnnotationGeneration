{
    "DHCP-UI-master/dhcp-ui-backend/test.py": {
        "Test.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DHCP-UI-master/dhcp-ui-backend/src/dhcp-ui.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 28,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "leases": {
            "name": "leases",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "generate_dnssec": {
            "name": "generate_dnssec",
            "location": 47,
            "return": [
                "str",
                "float",
                "int",
                "bytearray"
            ],
            "arguments": {}
        },
        "generate_config": {
            "name": "generate_config",
            "location": 80,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {}
        },
        "handle_leases_changed": {
            "name": "handle_leases_changed",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "sender": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "DHCP-UI-master/dhcp-ui-backend/src/lease_parser.py": {
        "_date_parser": {
            "name": "_date_parser",
            "location": 108,
            "return": [
                "Callable[([List[str]], Any)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "set_lease_value": [
                    "Callable[([str, Any], None)]"
                ]
            }
        },
        "_binding_state_parser": {
            "name": "_binding_state_parser",
            "location": 116,
            "return": [
                "Callable[([List[str]], Any)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "set_lease_value": [
                    "Callable[([str, Any], None)]"
                ]
            }
        },
        "_set_parser": {
            "name": "_set_parser",
            "location": 123,
            "return": [
                "Callable[([List[str]], Any)]"
            ],
            "arguments": {
                "set_lease_value": [
                    "Callable[([str, Any], None)]"
                ]
            }
        },
        "_option_parser": {
            "name": "_option_parser",
            "location": 131,
            "return": [
                "Callable[([List[str]], Any)]"
            ],
            "arguments": {
                "set_lease_value": [
                    "Callable[([str, Any], None)]"
                ]
            }
        },
        "Lease.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "ipaddress.IPv4Address"
                ]
            }
        },
        "Lease.get_serializable": {
            "name": "get_serializable",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lease.set_value": {
            "name": "set_value",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Parser._set_lease_value": {
            "name": "_set_lease_value",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Parser.reset": {
            "name": "reset",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.get_leases": {
            "name": "get_leases",
            "location": 52,
            "return": [
                "List[Lease]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser._scan_statement": {
            "name": "_scan_statement",
            "location": 76,
            "return": [
                "Optional[Tuple[(str, List[str])]]"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Parser._begin_lease": {
            "name": "_begin_lease",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Parser._end_lease": {
            "name": "_end_lease",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Parser._lease_hardware": {
            "name": "_lease_hardware",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Parser._lease_uid": {
            "name": "_lease_uid",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Parser._lease_client_hostname": {
            "name": "_lease_client_hostname",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "List[str]"
                ]
            }
        },
        "_date_parser._parse": {
            "name": "_parse",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_binding_state_parser._parse": {
            "name": "_parse",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_set_parser._parse": {
            "name": "_parse",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_option_parser._parse": {
            "name": "_parse",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "DHCP-UI-master/dhcp-ui-backend/src/watcher.py": {
        "Watcher.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "signal": [
                    "str",
                    "List[Union[int, Any]]",
                    "list[typing.Union[int,typing.Any]]",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Watcher.stop": {
            "name": "stop",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Watcher._changed": {
            "name": "_changed",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WatcherEventHandler.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "callback": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "WatcherEventHandler.on_modified": {
            "name": "on_modified",
            "location": 32,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.TextIO",
                    "TextIO",
                    "watchdog.events.FileSystemEvent"
                ]
            }
        }
    }
}
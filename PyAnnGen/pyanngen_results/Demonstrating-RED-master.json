{
    "Demonstrating-RED-master/src/helpers.py": {
        "generate_mahimahi_command": {
            "name": "generate_mahimahi_command",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "mahimahi_settings": [
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "get_open_udp_port": {
            "name": "get_open_udp_port",
            "location": 52,
            "return": [
                "str",
                "List[List[int]]",
                "list",
                "List[str]"
            ],
            "arguments": {}
        },
        "print_performance": {
            "name": "print_performance",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "senders": [
                    "Tuple[tuple[Union[int,Any]]]",
                    "int",
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "Tuple[Tuple[int,Any]]",
                    "List[Tuple[int,int]]"
                ],
                "num_seconds": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "run_with_mahi_settings": {
            "name": "run_with_mahi_settings",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "mahimahi_settings": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "seconds_to_run": [
                    "bool",
                    "List[T]",
                    "str",
                    "Mapping",
                    "int"
                ],
                "senders": [
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "Demonstrating-RED-master/src/receiver.py": {
        "Peer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Tuple[Union[int,int]]",
                    "bool",
                    "Union[int,Tuple[int,int]]"
                ],
                "window_size": [
                    "Tuple[int]",
                    "str",
                    "Optional[int]",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "Peer.window_has_no_missing_segments": {
            "name": "window_has_no_missing_segments",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peer.update_high_water_mark": {
            "name": "update_high_water_mark",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peer.process_window": {
            "name": "process_window",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peer.add_segment": {
            "name": "add_segment",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ack": [
                    "int",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "Peer.next_ack": {
            "name": "next_ack",
            "location": 64,
            "return": [
                "\"Predictor\""
            ],
            "arguments": {
                "self": []
            }
        },
        "Receiver.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "running_time": [
                    "str",
                    "bool",
                    "Tuple",
                    "List[int]",
                    "None",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "peers": [
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict]"
                ],
                "window_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "Receiver.cleanup": {
            "name": "cleanup",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Receiver.construct_ack": {
            "name": "construct_ack",
            "location": 85,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "serialized_data": [
                    "dict",
                    "T",
                    "Sequence[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Receiver.perform_handshakes": {
            "name": "perform_handshakes",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Receiver.run": {
            "name": "run",
            "location": 136,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Demonstrating-RED-master/src/senders.py": {
        "Sender.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Tuple[Union[str,int]]",
                    "Tuple[str,int]",
                    "Mapping",
                    "Mapping[str,str]",
                    "bool"
                ],
                "strategy": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Sender.send": {
            "name": "send",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sender.recv": {
            "name": "recv",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sender.handshake": {
            "name": "handshake",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sender.run": {
            "name": "run",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds_to_run": [
                    "int"
                ]
            }
        }
    },
    "Demonstrating-RED-master/src/strategies.py": {
        "SenderStrategy.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SenderStrategy.next_packet_to_send": {
            "name": "next_packet_to_send",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SenderStrategy.process_ack": {
            "name": "process_ack",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "ack": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "FixedWindowStrategy.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cwnd": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FixedWindowStrategy.window_is_open": {
            "name": "window_is_open",
            "location": 36,
            "return": [
                "bool",
                "int",
                "str",
                "Union[Dict,List]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedWindowStrategy.next_packet_to_send": {
            "name": "next_packet_to_send",
            "location": 40,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedWindowStrategy.process_ack": {
            "name": "process_ack",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_ack": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "CubicStrategy.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "float"
                ]
            }
        },
        "CubicStrategy.compute_w_est": {
            "name": "compute_w_est",
            "location": 105,
            "return": [
                "float",
                "str",
                "Optional[bool]",
                "Optional[int]",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubicStrategy.compute_w_cubic": {
            "name": "compute_w_cubic",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "str"
                ]
            }
        },
        "CubicStrategy.average_rtt": {
            "name": "average_rtt",
            "location": 119,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubicStrategy.window_is_open": {
            "name": "window_is_open",
            "location": 122,
            "return": [
                "bool",
                "int",
                "str",
                "Union[Dict,List]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubicStrategy.next_packet_to_send": {
            "name": "next_packet_to_send",
            "location": 129,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubicStrategy.process_ack": {
            "name": "process_ack",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_ack": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "TahoeStrategy.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slow_start_thresh": [
                    "int",
                    "float",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "initial_cwnd": [
                    "int",
                    "Dict"
                ]
            }
        },
        "TahoeStrategy.window_is_open": {
            "name": "window_is_open",
            "location": 273,
            "return": [
                "bool",
                "int",
                "str",
                "Union[Dict,List]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TahoeStrategy.next_packet_to_send": {
            "name": "next_packet_to_send",
            "location": 280,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TahoeStrategy.process_ack": {
            "name": "process_ack",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_ack": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "Demonstrating-RED-master/src/__init__.py": {},
    "Demonstrating-RED-master/tests/test_receiver.py": {
        "TestPeer.test_first_segment": {
            "name": "test_first_segment",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeer.test_out_of_order_segment": {
            "name": "test_out_of_order_segment",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeer.test_recovery": {
            "name": "test_recovery",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeer.test_clears_out_window": {
            "name": "test_clears_out_window",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Demonstrating-RED-master/tests/test_strategies.py": {
        "TestTahoeStrategy.test_segments_received_in_order": {
            "name": "test_segments_received_in_order",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTahoeStrategy.test_retransmitting_packets": {
            "name": "test_retransmitting_packets",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTahoeStrategy.test_partial_ack": {
            "name": "test_partial_ack",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRenoSender.test_segments_received_in_order": {
            "name": "test_segments_received_in_order",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Demonstrating-RED-master/tests/__init__.py": {}
}
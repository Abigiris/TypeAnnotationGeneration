{
    "DiscordBdBot-master/bot.py": {},
    "DiscordBdBot-master/tests.py": {},
    "DiscordBdBot-master/cogs/custom_command.py": {
        "setup": {
            "name": "setup",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "IO[str]"
                ],
                "kwargs": []
            }
        },
        "Custom_Command.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "session": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "DiscordBdBot-master/cogs/event.py": {
        "setup": {
            "name": "setup",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "discord.excommands.Bot",
                    "int"
                ],
                "kwargs": [
                    "Dict[(str, sqlalchemy.orm.session.Session)]"
                ]
            }
        },
        "EventCmd.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "nox.sessions.Session"
                ],
                "session": [
                    "Optional[sqlalchemy.orm.session.Session]"
                ]
            }
        }
    },
    "DiscordBdBot-master/cogs/level.py": {
        "setup": {
            "name": "setup",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "discord.excommands.boBot",
                    "discord.excommands.Bot",
                    "str",
                    "int"
                ],
                "kwargs": [
                    "Dict[(str, sqlalchemy.orm.session.Session)]"
                ]
            }
        },
        "Level.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "nox.sessions.Session"
                ],
                "session": [
                    "Optional[sqlalchemy.orm.session.Session]"
                ]
            }
        }
    },
    "DiscordBdBot-master/cogs/music.py": {
        "setup": {
            "name": "setup",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "discord.excommands.Bot",
                    "int"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "VoiceEntry.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "int",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "List[int]",
                    "asyncio.AbstractEventLoop"
                ],
                "player": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "VoiceEntry.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoiceState.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int"
                ]
            }
        },
        "VoiceState.is_playing": {
            "name": "is_playing",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoiceState.player": {
            "name": "player",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoiceState.skip": {
            "name": "skip",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoiceState.toggle_next": {
            "name": "toggle_next",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Music.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Music.get_voice_state": {
            "name": "get_voice_state",
            "location": 76,
            "return": [
                "VoiceState"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Music.__unload": {
            "name": "__unload",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DiscordBdBot-master/cogs/ping.py": {
        "setup": {
            "name": "setup",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "discord.excommands.Bot",
                    "int"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "Ping.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "DiscordBdBot-master/cogs/stats.py": {
        "setup": {
            "name": "setup",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "discord.excommands.Bot",
                    "int"
                ],
                "kwargs": [
                    "Dict[(str, sqlalchemy.orm.session.Session)]"
                ]
            }
        },
        "Stats.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "nox.sessions.Session"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "DiscordBdBot-master/cogs/wowtoken.py": {
        "setup": {
            "name": "setup",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "discord.excommands.Bot",
                    "int"
                ],
                "kwargs": []
            }
        },
        "WowToken.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "session": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "WowToken.get_daily_api_token": {
            "name": "get_daily_api_token",
            "location": 37,
            "return": [
                "str",
                "int",
                "accounts.models.AccountPermissionType",
                "dict[str, str]",
                "Callable[[KT], VT]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WowToken.get_wow_token_price": {
            "name": "get_wow_token_price",
            "location": 43,
            "return": [
                "str",
                "bool",
                "int",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        }
    },
    "DiscordBdBot-master/db/models.py": {},
    "DiscordBdBot-master/db/__init__.py": {},
    "DiscordBdBot-master/tests/__init__.py": {},
    "DiscordBdBot-master/tests/database/test_database.py": {
        "TestDatabase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_add_wrong_user": {
            "name": "test_add_wrong_user",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_add_user": {
            "name": "test_add_user",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_add_wrong_event": {
            "name": "test_add_wrong_event",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_add_event": {
            "name": "test_add_event",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_add_member": {
            "name": "test_add_member",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_add_wrong_token": {
            "name": "test_add_wrong_token",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_add_token": {
            "name": "test_add_token",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.tearDown": {
            "name": "tearDown",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DiscordBdBot-master/tests/database/__init__.py": {},
    "DiscordBdBot-master/website/app.py": {
        "index": {
            "name": "index",
            "location": 23,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "oauth2_token_updater": {
            "name": "oauth2_token_updater",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "oauth2_session": {
            "name": "oauth2_session",
            "location": 29,
            "return": [
                "OAuth2Session",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "token": [
                    "str",
                    "None",
                    "List[str]",
                    "Tuple[str]",
                    "list[str]",
                    "tuple[str]"
                ],
                "state": [
                    "str",
                    "None",
                    "List[str]",
                    "Tuple[str]",
                    "list[str]",
                    "tuple[str]"
                ],
                "scope": [
                    "str",
                    "None",
                    "List[str]",
                    "Tuple[str]",
                    "list[str]",
                    "tuple[str]"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 44,
            "return": [
                "str",
                "bool",
                "dict",
                "Union[str, Dict]"
            ],
            "arguments": {}
        },
        "discord_get_user": {
            "name": "discord_get_user",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Set[str]",
                    "set[str]",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "callback": {
            "name": "callback",
            "location": 68,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "me": {
            "name": "me",
            "location": 85,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_user_managed_servers": {
            "name": "get_user_managed_servers",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "user": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "guilds": [
                    "list[dict[, ]]",
                    "sqlalchemy.orm.session.Session",
                    "list[dict[str, typing.Any]]",
                    "List[dict]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "select_server": {
            "name": "select_server",
            "location": 101,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "disable_cog": {
            "name": "disable_cog",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "Distributed-Tensorflow-Template-master/setup.py": {},
    "Distributed-Tensorflow-Template-master/base/data_loader.py": {
        "DataLoader.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "\"Step\""
                ],
                "mode": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "DataLoader.input_fn": {
            "name": "input_fn",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLoader._parse_example": {
            "name": "_parse_example",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DataLoader.__len__": {
            "name": "__len__",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Distributed-Tensorflow-Template-master/base/model.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BaseModel.model": {
            "name": "model",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "str",
                    "Dict[str,tensorflow.Tensor]",
                    "bool",
                    "List[dict]",
                    "tensorflow.Tensor"
                ],
                "labels": [
                    "str",
                    "Dict[str,tensorflow.Tensor]",
                    "bool",
                    "List[dict]",
                    "tensorflow.Tensor"
                ],
                "mode": [
                    "str",
                    "Dict[str,tensorflow.Tensor]",
                    "bool",
                    "List[dict]",
                    "tensorflow.Tensor"
                ]
            }
        },
        "BaseModel._create_model": {
            "name": "_create_model",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "List[Type]",
                    "tensorflow.Tensor",
                    "List[Type[Exception]]",
                    "int"
                ],
                "is_training": [
                    "bool",
                    "List[Type]",
                    "tensorflow.Tensor",
                    "List[Type[Exception]]",
                    "int"
                ]
            }
        }
    },
    "Distributed-Tensorflow-Template-master/base/trainer.py": {
        "BaseTrain.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "int",
                    "model.Config"
                ],
                "model": [
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "train": [
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "val": [
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "pred": [
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "BaseTrain.run": {
            "name": "run",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTrain._export_model": {
            "name": "_export_model",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "str",
                    "bool",
                    "None",
                    "Dict",
                    "tensorflow.estimator.Estimator",
                    "Optional[str]"
                ],
                "save_location": [
                    "str",
                    "bool",
                    "None",
                    "Dict",
                    "tensorflow.estimator.Estimator",
                    "Optional[str]"
                ]
            }
        },
        "BaseTrain._predict": {
            "name": "_predict",
            "location": 47,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "pred_fn": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "Distributed-Tensorflow-Template-master/base/__init__.py": {},
    "Distributed-Tensorflow-Template-master/data_loader/data_loader.py": {
        "TFRecordDataLoader.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ],
                "mode": [
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "TFRecordDataLoader.input_fn": {
            "name": "input_fn",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFRecordDataLoader._parse_example": {
            "name": "_parse_example",
            "location": 54,
            "return": [
                "Tuple[(Dict[(str, Any)], Any)]"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "TFRecordDataLoader._augment": {
            "name": "_augment",
            "location": 81,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "example": [
                    "int",
                    "tensorflow.Tensor",
                    "bool"
                ]
            }
        },
        "TFRecordDataLoader.__len__": {
            "name": "__len__",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Distributed-Tensorflow-Template-master/data_loader/__init__.py": {},
    "Distributed-Tensorflow-Template-master/initialisers/task.py": {
        "init": {
            "name": "init",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Distributed-Tensorflow-Template-master/initialisers/__init__.py": {},
    "Distributed-Tensorflow-Template-master/models/example_model.py": {
        "_fc_block": {
            "name": "_fc_block",
            "location": 92,
            "return": [
                "str",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "tensorflow.Tensor",
                    "int"
                ],
                "size": [
                    "int",
                    "float",
                    "Union[int,Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "Dict[str,str]",
                    "List[float]",
                    "Optional[int]",
                    "None"
                ],
                "is_training": [
                    "bool",
                    "float",
                    "tensorflow.Tensor",
                    "Union[int,float]",
                    "int"
                ],
                "drop": [
                    "float",
                    "bool"
                ]
            }
        },
        "_conv_block": {
            "name": "_conv_block",
            "location": 107,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "tensorflow.Tensor",
                    "Tuple[Union[list[Any],list[str]]]",
                    "Tuple[List[Any],List[str]]"
                ],
                "layers": [
                    "int",
                    "tensorflow.Tensor"
                ],
                "filters": [
                    "int",
                    "str",
                    "bool",
                    "text_recognizer.models.base.Model"
                ],
                "is_training": [
                    "bool",
                    "float",
                    "Dict[str,str]",
                    "Callable[[str],float]",
                    "Callable[str,float]"
                ]
            }
        },
        "_create_model": {
            "name": "_create_model",
            "location": 125,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[str]",
                    "tensorflow.Tensor",
                    "bool"
                ],
                "drop": [
                    "float",
                    "bool",
                    "Callable[[str],float]",
                    "Set",
                    "Callable[str,float]"
                ],
                "is_training": [
                    "bool",
                    "tensorflow.Tensor",
                    "int"
                ]
            }
        },
        "Mnist.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ]
            }
        },
        "Mnist.model": {
            "name": "model",
            "location": 14,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "labels": [
                    "bytes",
                    "float",
                    "bool",
                    "base.Vertex"
                ],
                "mode": [
                    "bytes",
                    "str",
                    "float",
                    "Tuple",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "Distributed-Tensorflow-Template-master/models/model.py": {
        "RawModel.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ]
            }
        },
        "RawModel.model": {
            "name": "model",
            "location": 13,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "labels": [
                    "bytes",
                    "float",
                    "bool",
                    "base.Vertex"
                ],
                "mode": [
                    "bytes",
                    "str",
                    "float",
                    "Tuple",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "RawModel._create_model": {
            "name": "_create_model",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "List[Type]",
                    "tensorflow.Tensor",
                    "List[Type[Exception]]",
                    "int"
                ],
                "is_training": [
                    "bool",
                    "List[Type]",
                    "tensorflow.Tensor",
                    "List[Type[Exception]]",
                    "int"
                ]
            }
        }
    },
    "Distributed-Tensorflow-Template-master/models/__init__.py": {},
    "Distributed-Tensorflow-Template-master/trainers/example_train.py": {
        "ExampleTrainer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ],
                "model": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ],
                "train": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ],
                "val": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ],
                "pred": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ]
            }
        },
        "ExampleTrainer.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleTrainer._export_model": {
            "name": "_export_model",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "str",
                    "OrderedDict",
                    "dict",
                    "bool",
                    "List[str]"
                ],
                "save_location": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "List",
                    "int",
                    "Optional[List]"
                ]
            }
        },
        "ExampleTrainer._predict": {
            "name": "_predict",
            "location": 87,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "Callable",
                    "tensorflow.estimator.Estimator",
                    "int",
                    "str"
                ],
                "pred_fn": [
                    "Callable",
                    "int",
                    "str",
                    "tensorflow.estimator.Estimator"
                ]
            }
        }
    },
    "Distributed-Tensorflow-Template-master/trainers/train.py": {
        "RawTrainer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ],
                "model": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ],
                "train": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ],
                "val": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ],
                "pred": [
                    "Dict",
                    "data_loader.data_loader.TFRecordDataLoader"
                ]
            }
        },
        "RawTrainer.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawTrainer._export_model": {
            "name": "_export_model",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "str",
                    "OrderedDict",
                    "human_activities.model.DirectoryViews",
                    "dict",
                    "bool",
                    "List[str]"
                ],
                "save_location": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "List",
                    "int",
                    "Optional[List]"
                ]
            }
        },
        "RawTrainer._predict": {
            "name": "_predict",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "pred_fn": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "Distributed-Tensorflow-Template-master/trainers/__init__.py": {},
    "Distributed-Tensorflow-Template-master/utils/make_tfrec.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_extract_data": {
            "name": "_extract_data",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Distributed-Tensorflow-Template-master/utils/utils.py": {
        "process_config": {
            "name": "process_config",
            "location": 6,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "get_args": {
            "name": "get_args",
            "location": 16,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "Distributed-Tensorflow-Template-master/utils/__init__.py": {}
}
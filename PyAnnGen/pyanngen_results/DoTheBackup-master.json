{
    "DoTheBackup-master/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "DoTheBackup-master/setup.py": {
        "_read": {
            "name": "_read",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "DoTheBackup-master/docs/conf.py": {},
    "DoTheBackup-master/src/dothebackup/constants.py": {},
    "DoTheBackup-master/src/dothebackup/logger.py": {
        "Logger.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_dir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "IO[Any]",
                    "IO"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]"
                ],
                "keep": [
                    "bool",
                    "List",
                    "Sequence[Dict[str,str]]",
                    "Sequence[dict[str,str]]",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Logger._old_logs": {
            "name": "_old_logs",
            "location": 23,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[T]",
                "List[str]",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.rotate": {
            "name": "rotate",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.logfile": {
            "name": "logfile",
            "location": 100,
            "return": [
                "Iterator[IO[str]]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.create_log_dir": {
            "name": "create_log_dir",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/plugins.py": {
        "load_plugins": {
            "name": "load_plugins",
            "location": 15,
            "return": [
                "Dict[Union[str,dict[str,Any],dict[str,str],list[str]],]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "required_keys": {
            "name": "required_keys",
            "location": 39,
            "return": [
                "str",
                "Sequence['cirq.Qid']",
                "logging.LogRecord"
            ],
            "arguments": {
                "key_list": [
                    "List[str]",
                    "str",
                    "bytes",
                    "float",
                    "Hashable"
                ]
            }
        },
        "required_executables": {
            "name": "required_executables",
            "location": 62,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "types.signals.SignalHandlerT"
            ],
            "arguments": {
                "dep_list": [
                    "List[Tuple[str,str]]",
                    "Sequence[dict]",
                    "List[tuple[Union[str,str]]]",
                    "List",
                    "List[str]",
                    "bool",
                    "Iterator[tuple]",
                    "Iterator"
                ]
            }
        },
        "required_keys.decorated_function": {
            "name": "decorated_function",
            "location": 46,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "required_executables.decorated_function": {
            "name": "decorated_function",
            "location": 69,
            "return": [
                "Tuple[float, float, float]",
                "mypy.types.Type"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "required_keys.decorated_function.func_wrapper": {
            "name": "func_wrapper",
            "location": 49,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "required_executables.decorated_function.func_wrapper": {
            "name": "func_wrapper",
            "location": 72,
            "return": [
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "config": [
                    "dothebackup.types.CONFIGTYPE",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/runner.py": {
        "parse_config": {
            "name": "parse_config",
            "location": 24,
            "return": [
                "str",
                "dict",
                "Callable",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "configfile": [
                    "IO",
                    "str",
                    "bytes",
                    "Union[str,IO]",
                    "IO[str]"
                ]
            }
        },
        "check_config_keys": {
            "name": "check_config_keys",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Dict[str,float]",
                    "dothebackup.types.CONFIGTYPE",
                    "Union[str,List[str]]",
                    "str",
                    "bytes",
                    "bool",
                    "Exception"
                ],
                "key_list": [
                    "List",
                    "str",
                    "Optional[bytes]",
                    "List[str]",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "check_plugin": {
            "name": "check_plugin",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "check_if_already_running": {
            "name": "check_if_already_running",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "builder": {
            "name": "builder",
            "location": 68,
            "return": [
                "Dict",
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "config": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Dict[str,LabwareDefinition]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "print_commands": {
            "name": "print_commands",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "commands": [
                    "Dict[str,list[Any]]",
                    "Dict[str,object]",
                    "Dict[str,List[Any]]",
                    "Dict[str,dict[str,int]]",
                    "Dict[str,Any]",
                    "Dict[str,Dict[str,int]]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "run_commands": {
            "name": "run_commands",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "commands": [
                    "Dict[str,list[Any]]",
                    "Dict[str,List[Any]]",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Union[int,float]",
                    "bool"
                ],
                "test": [
                    "bool",
                    "str",
                    "Dict[str,str]",
                    "float",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "int"
                ],
                "log_dir": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "log_keep": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_started": {
            "name": "get_started",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "configfile": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "test": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/types.py": {},
    "DoTheBackup-master/src/dothebackup/ui.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "configfile": [
                    "str",
                    "bool",
                    "IO",
                    "Hashable"
                ],
                "name": [
                    "str",
                    "bool",
                    "IO",
                    "Hashable"
                ],
                "test": [
                    "str",
                    "bool",
                    "IO",
                    "Hashable"
                ],
                "debug": [
                    "str",
                    "bool",
                    "Callable[,Iterable[Any]]"
                ]
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/utils.py": {
        "absolutenormpath": {
            "name": "absolutenormpath",
            "location": 16,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "path": [
                    "str",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "today": {
            "name": "today",
            "location": 28,
            "return": [
                "str",
                "datetime.date",
                "datetime.datetime",
                "int",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "git_cloned_yet": {
            "name": "git_cloned_yet",
            "location": 36,
            "return": [
                "str",
                "bool",
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "git_something_to_commit": {
            "name": "git_something_to_commit",
            "location": 48,
            "return": [
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "return_code": {
            "name": "return_code",
            "location": 64,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "exitcodes": [
                    "List[int]",
                    "Dict",
                    "str"
                ]
            }
        },
        "pidfile": {
            "name": "pidfile",
            "location": 79,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {}
        }
    },
    "DoTheBackup-master/src/dothebackup/__init__.py": {},
    "DoTheBackup-master/src/dothebackup/plugs/borg.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "List[list[Text]]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "OrderedDict",
                    "dict"
                ]
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/plugs/git.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "List[list[Text]]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "dothebackup.types.CONFIGTYPE",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/plugs/github.py": {
        "get_repos": {
            "name": "get_repos",
            "location": 15,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "List[list[Union[Text,list[str]]]]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/plugs/mysql.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "List[list[Text]]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "dothebackup.types.CONFIGTYPE",
                    "Dict[str, Any]",
                    "OrderedDict",
                    "dict"
                ]
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/plugs/rsync.py": {
        "normalize_path": {
            "name": "normalize_path",
            "location": 14,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "List[list[Union[Text,list[str],Generator[Union[str,None,None]]]]]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/plugs/slapcat.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "List[list[Text]]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "DoTheBackup-master/src/dothebackup/plugs/tar.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "List[list[Text]]",
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str,Any]",
                    "dothebackup.types.CONFIGTYPE",
                    "Union[int,str]",
                    "Dict[str,str]"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/conftest.py": {
        "plugins": {
            "name": "plugins",
            "location": 9,
            "return": [
                "int",
                "List[List[int]]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "rsync_found": {
            "name": "rsync_found",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "rsync_not_found": {
            "name": "rsync_not_found",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "float",
                    "int",
                    "List[Tuple[int, float, float]]"
                ]
            }
        },
        "fake_data": {
            "name": "fake_data",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "today_is_00": {
            "name": "today_is_00",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str"
                ]
            }
        },
        "something_to_commit": {
            "name": "something_to_commit",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "nothing_to_commit": {
            "name": "nothing_to_commit",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/helper.py": {
        "inode_list": {
            "name": "inode_list",
            "location": 6,
            "return": [
                "List",
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "filelist": [
                    "List",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/test_borg.py": {
        "borg_found": {
            "name": "borg_found",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[str]",
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]",
                    "None"
                ],
                "expected": [
                    "Optional[str]",
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]",
                    "None"
                ],
                "borg_found": [
                    "str",
                    "bool",
                    "int"
                ],
                "plugins": [
                    "Optional[str]",
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]",
                    "None"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/test_git.py": {
        "dot_git_exists": {
            "name": "dot_git_exists",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int",
                    "Set[str]",
                    "Optional[str]",
                    "Union[List[str], str]"
                ]
            }
        },
        "git_executable": {
            "name": "git_executable",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "test_main_not_cloned_yet": {
            "name": "test_main_not_cloned_yet",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "Dict",
                    "str",
                    "List[str]"
                ],
                "plugins": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "test_main_cloned": {
            "name": "test_main_cloned",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "List[str]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "dot_git_exists": [
                    "Dict",
                    "str",
                    "Optional[Callable[[Any],None]]",
                    "List[str]",
                    "Callable[Any,None]",
                    "None"
                ],
                "plugins": [
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/test_github.py": {
        "get_repos": {
            "name": "get_repos",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Dict[Tuple[int, int], int]",
                    "Tuple[Any, Any, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "git_executable": {
            "name": "git_executable",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "test_main_not_cloned_yet": {
            "name": "test_main_not_cloned_yet",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "plugins": [
                    "str"
                ],
                "get_repos": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_repos": {
            "name": "test_get_repos",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_requests": []
            }
        }
    },
    "DoTheBackup-master/tests/test_logger.py": {
        "test__old_logs": {
            "name": "test__old_logs",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "logfiles": [
                    "str",
                    "bytes",
                    "List[int]",
                    "Optional[bytes]",
                    "Optional[List[int]]"
                ],
                "expected": [
                    "str"
                ],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_rotate": {
            "name": "test_rotate",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "logfiles": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[bytes]"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "tmpdir": [
                    "str",
                    "BinaryIO",
                    "Set[str]"
                ]
            }
        },
        "test_logfile": {
            "name": "test_logfile",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "DoTheBackup-master/tests/test_mysql.py": {
        "mysqldump_executable": {
            "name": "mysqldump_executable",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "git_executable": {
            "name": "git_executable",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "test_main_nothing_there_yet": {
            "name": "test_main_nothing_there_yet",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "bool",
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "expected": [
                    "bool",
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "nothing_to_commit": [
                    "str"
                ],
                "plugins": [
                    "bool",
                    "str",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "test_main_git_already_cloned_new_dump": {
            "name": "test_main_git_already_cloned_new_dump",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes",
                    "float",
                    "str"
                ],
                "something_to_commit": [],
                "plugins": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_main_git_already_cloned_nothing_new": {
            "name": "test_main_git_already_cloned_nothing_new",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "nothing_to_commit": [],
                "plugins": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/test_plugins.py": {
        "test_required_keys": {
            "name": "test_required_keys",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "Dict"
                ],
                "expected": [
                    "str"
                ],
                "capsys": [
                    "str"
                ],
                "rsync_found": [
                    "str",
                    "bool"
                ],
                "plugins": [
                    "str",
                    "Dict"
                ]
            }
        },
        "test_required_executables": {
            "name": "test_required_executables",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "rsync_not_found": [
                    "bool",
                    "Callable"
                ],
                "capsys": [
                    "float",
                    "Dict[str, Dict[str, Any]]",
                    "BaseException"
                ],
                "plugins": [
                    "str"
                ]
            }
        },
        "test_load_plugins": {
            "name": "test_load_plugins",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "Callable",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/test_rsync.py": {
        "config_once": {
            "name": "config_once",
            "location": 110,
            "return": [
                "Dict[Text,Union[dict[Text,int],dict[Text,dict[Text,Text]]]]",
                "str",
                "List[str]",
                "Iterable[str]",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "temp_dir": [
                    "str"
                ]
            }
        },
        "config_link_dest": {
            "name": "config_link_dest",
            "location": 128,
            "return": [
                "Dict[Text,Union[dict[Text,int],dict[Text,dict[Text,Text]]]]",
                "Dict",
                "str",
                "Iterable[str]",
                "Dict[str,Any]",
                "Dict[str,str]",
                "List[str]"
            ],
            "arguments": {
                "temp_dir": [
                    "str"
                ]
            }
        },
        "test_mode_once": {
            "name": "test_mode_once",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "check_if_already_running_mock": [],
                "pidfile_mock": [
                    "bool",
                    "Dict"
                ],
                "fake_data": [
                    "str",
                    "Union[str,TextIO]"
                ]
            }
        },
        "test_mode_month": {
            "name": "test_mode_month",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "check_if_already_running_mock": [],
                "pidfile_mock": [
                    "bool",
                    "Dict"
                ],
                "fake_data": [
                    "str",
                    "Dict",
                    "TextIO",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable",
                    "Dict"
                ],
                "expected": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable",
                    "Dict"
                ],
                "rsync_found": [
                    "str",
                    "bool"
                ],
                "plugins": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable",
                    "Dict"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/test_runner.py": {
        "test_check_config_keys_abort": {
            "name": "test_check_config_keys_abort",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_check_plugin_abort": {
            "name": "test_check_plugin_abort",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_check_if_already_running": {
            "name": "test_check_if_already_running",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "path_mock": [
                    "mock.MagicMock"
                ],
                "sys_mock": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_check_if_already_running_abort": {
            "name": "test_check_if_already_running_abort",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "path_mock": [
                    "mock.MagicMock"
                ],
                "capsys": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_run_commands_test": {
            "name": "test_run_commands_test",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "int",
                    "float"
                ],
                "capsys": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_enabled_missing_in_builder": {
            "name": "test_enabled_missing_in_builder",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int"
                ]
            }
        },
        "test_enabled_missing_in_builder_exit_code": {
            "name": "test_enabled_missing_in_builder_exit_code",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_sys": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_builder_name": {
            "name": "test_builder_name",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_builder_name_name_not_found": {
            "name": "test_builder_name_name_not_found",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int"
                ]
            }
        },
        "test_builder_date": {
            "name": "test_builder_date",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "bool",
                    "Optional[Type[Exception]]",
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "expected": [
                    "bool",
                    "Optional[Type[Exception]]",
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "today_is_00": [
                    "bool",
                    "List[Tuple[str,int]]",
                    "List[tuple[Union[str,int]]]"
                ]
            }
        },
        "test_builder_date_skipping": {
            "name": "test_builder_date_skipping",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "Optional[str]",
                    "str",
                    "Dict",
                    "None",
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "List[Any]",
                    "Optional[Union[str,Any]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Any",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "Optional[str]",
                    "str",
                    "Dict",
                    "None",
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "List[Any]",
                    "Optional[Union[str,Any]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Any",
                    "Dict[str,Any]"
                ],
                "capsys": [
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "today_is_00": [
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "test_builder_not_enabled": {
            "name": "test_builder_not_enabled",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_log": [
                    "Tuple[str, mock.Mock]"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/test_slapcat.py": {
        "mysqldump_executable": {
            "name": "mysqldump_executable",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "git_executable": {
            "name": "git_executable",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "test_main_nothing_there_yet": {
            "name": "test_main_nothing_there_yet",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "bool",
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "expected": [
                    "bool",
                    "str",
                    "Union[str,int]",
                    "int"
                ],
                "nothing_to_commit": [
                    "str"
                ],
                "plugins": [
                    "bool",
                    "str",
                    "Union[str,int]",
                    "int"
                ]
            }
        },
        "test_main_git_already_cloned_new_dump": {
            "name": "test_main_git_already_cloned_new_dump",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes",
                    "float",
                    "str"
                ],
                "something_to_commit": [],
                "plugins": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_main_git_already_cloned_nothing_new": {
            "name": "test_main_git_already_cloned_nothing_new",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "nothing_to_commit": [],
                "plugins": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/test_tar.py": {
        "tar_found": {
            "name": "tar_found",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable",
                    "Dict"
                ],
                "expected": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable",
                    "Dict"
                ],
                "tar_found": [
                    "str",
                    "bool"
                ],
                "plugins": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable",
                    "Dict"
                ]
            }
        }
    },
    "DoTheBackup-master/tests/test_ui.py": {
        "test_main": {
            "name": "test_main",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_run_commands": [],
                "mock_check_if_already_running": [
                    "mock.Mock"
                ],
                "mock_pidfile": [
                    "mock.Mock"
                ],
                "config": [],
                "args": [],
                "expected_log_level": [],
                "expected_cmds": [],
                "tmpdir": []
            }
        }
    },
    "DoTheBackup-master/tests/test_utils.py": {
        "test_absolutenormpath": {
            "name": "test_absolutenormpath",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_git_cloned_yet": {
            "name": "test_git_cloned_yet",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "pathlib.Path",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_git_something_to_commit": {
            "name": "test_git_something_to_commit",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "something_to_commit": [
                    "List[int]",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_git_nothing_to_commit": {
            "name": "test_git_nothing_to_commit",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "nothing_to_commit": [
                    "List[int]",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_return_code": {
            "name": "test_return_code",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_pidfile": {
            "name": "test_pidfile",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_path": [
                    "pathlib.Path"
                ],
                "tmpdir": []
            }
        },
        "test_pidfile_finally": {
            "name": "test_pidfile_finally",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_path": [
                    "pathlib.Path"
                ],
                "tmpdir": []
            }
        }
    }
}
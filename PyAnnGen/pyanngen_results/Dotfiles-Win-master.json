{
    "Dotfiles-Win-master/.vim/after/ftplugin/markdown/convert.py": {
        "PandocCmd.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "stylesheet": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "javascript": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "from_fmt": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "to_fmt": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "exts": [
                    "List",
                    "str",
                    "List[meta.Ext]",
                    "List[Tuple[str,int]]"
                ],
                "no_exts": [
                    "List",
                    "str",
                    "List[meta.Ext]",
                    "List[Tuple[str,int]]"
                ],
                "long_opts": [
                    "Dict[,Union[None,Text]]",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str,str]]",
                    "Type[Dict[str,Any]]"
                ],
                "code_style": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "mathjax_version": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "mathjax_conf": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "width": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "toc_depth": [
                    "int",
                    "str",
                    "Tuple",
                    "bool",
                    "raiden.utils.BlockNumber",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "PandocCmd.set_from_fmt": {
            "name": "set_from_fmt",
            "location": 101,
            "return": [
                "PandocCmd",
                "str",
                "bool",
                "Optional[int]",
                "List",
                "int"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PandocCmd.set_opt": {
            "name": "set_opt",
            "location": 106,
            "return": [
                "PandocCmd",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable",
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Union[int,slice]"
                ],
                "val": [
                    "Hashable",
                    "None",
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Union[int,slice]"
                ]
            }
        },
        "PandocCmd.set_opts": {
            "name": "set_opts",
            "location": 110,
            "return": [
                "PandocCmd",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "Dict[meta.LongOpt,Optional[str]]",
                    "Dict[str,Any]",
                    "Dict[meta.LongOpt,Union[str,None]]",
                    "Dict"
                ]
            }
        },
        "PandocCmd.set_to_fmt": {
            "name": "set_to_fmt",
            "location": 115,
            "return": [
                "PandocCmd",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "Sequence",
                    "int",
                    "Dict[str,int]",
                    "bool",
                    "raiden.utils.SecretHash"
                ]
            }
        },
        "PandocCmd.set_input_file": {
            "name": "set_input_file",
            "location": 119,
            "return": [
                "PandocCmd",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "PandocCmd.set_width": {
            "name": "set_width",
            "location": 124,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "PandocCmd.set_stylesheet": {
            "name": "set_stylesheet",
            "location": 128,
            "return": [
                "Set[str]",
                "str",
                "List[str]",
                "Dict[str, Set[str]]",
                "set",
                "int"
            ],
            "arguments": {
                "self": [],
                "css_path": [
                    "str",
                    "Optional[path.Path]",
                    "None",
                    "IO[Any]",
                    "IO"
                ]
            }
        },
        "PandocCmd.set_javascript": {
            "name": "set_javascript",
            "location": 132,
            "return": [
                "PandocCmd",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "js_path": [
                    "str"
                ]
            }
        },
        "PandocCmd.set_toc_depth": {
            "name": "set_toc_depth",
            "location": 137,
            "return": [
                "Set[str]",
                "str",
                "Tuple[Hashable]",
                "set",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "PandocCmd.set_code_style": {
            "name": "set_code_style",
            "location": 141,
            "return": [
                "List[str]",
                "Dict[str, Set[str]]",
                "bool",
                "Callable[..., None]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "style": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "PandocCmd.set_mathjax": {
            "name": "set_mathjax",
            "location": 144,
            "return": [
                "Set[str]",
                "str",
                "List[str]",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Optional[Container[str]]",
                    "Container",
                    "None"
                ],
                "cfg": [
                    "float",
                    "bool",
                    "List[bytes]",
                    "str",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "PandocCmd.set_exts": {
            "name": "set_exts",
            "location": 158,
            "return": [
                "PandocCmd",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "exts": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "PandocCmd.set_ext": {
            "name": "set_ext",
            "location": 163,
            "return": [
                "PandocCmd",
                "Optional[str]",
                "str",
                "cmk.utils.type_defs.EventRule",
                "Dict[str,Any]",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "int",
                    "List[torch.nn.utils.rnn.PackedSequence]",
                    "Dict",
                    "List[S]"
                ]
            }
        },
        "PandocCmd.set_no_ext": {
            "name": "set_no_ext",
            "location": 167,
            "return": [
                "PandocCmd",
                "str",
                "Optional[str]",
                "int",
                "Dict[str,Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "bool",
                    "Dict[str,str]",
                    "List[torch.nn.utils.rnn.PackedSequence]",
                    "List[S]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "PandocCmd.set_no_exts": {
            "name": "set_no_exts",
            "location": 171,
            "return": [
                "PandocCmd",
                "int",
                "List"
            ],
            "arguments": {
                "self": [],
                "exts": [
                    "str",
                    "List[int]",
                    "int",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "PandocCmd.args": {
            "name": "args",
            "location": 177,
            "return": [
                "List[Union[Text,list,dict[str,Union[Any,Any,Any,Any,Any]],KeysView,set,OrderedDict]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandocCmd.before": {
            "name": "before",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "PandocCmd.after": {
            "name": "after",
            "location": 215,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Dict[str,bool]",
                    "int"
                ]
            }
        },
        "PandocCmd.execute": {
            "name": "execute",
            "location": 250,
            "return": [
                "str",
                "Callable",
                "float",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Dotfiles-Win-master/.vim/after/ftplugin/markdown/meta.py": {},
    "Dotfiles-Win-master/.vim/after/ftplugin/markdown/utils.py": {
        "up_by_n_dirs": {
            "name": "up_by_n_dirs",
            "location": 10,
            "return": [
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "None",
                    "pathpy.core.path.Path.Collection",
                    "Optional[str]"
                ],
                "n": [
                    "int",
                    "str",
                    "pathpy.core.path.Path.Collection",
                    "Optional[str]"
                ]
            }
        },
        "vimdir_path": {
            "name": "vimdir_path",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "require_exists": {
            "name": "require_exists",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "fpath": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ensure_exists": {
            "name": "ensure_exists",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "fpath": [
                    "int",
                    "Callable"
                ]
            }
        },
        "validate_executables": {
            "name": "validate_executables",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "xs": [
                    "str",
                    "bytes",
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "List",
                    "T"
                ]
            }
        }
    },
    "Dotfiles-Win-master/.vim/templates/python/template.py": {}
}
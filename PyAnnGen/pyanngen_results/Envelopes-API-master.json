{
    "Envelopes-API-master/app.py": {},
    "Envelopes-API-master/config/settings.py": {},
    "Envelopes-API-master/config/__init__.py": {},
    "Envelopes-API-master/envelopes/apps.py": {},
    "Envelopes-API-master/envelopes/forms.py": {},
    "Envelopes-API-master/envelopes/models.py": {
        "JsonModelMixin.to_dict": {
            "name": "to_dict",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "include": [
                    "List[zerver.models.DefaultStreamGroup]",
                    "None",
                    "bool",
                    "list[zerver.models.DefaultStreamGroup]",
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "exclude": [
                    "str",
                    "None",
                    "int",
                    "Optional[\"Outcome\"]",
                    "app.models.Article"
                ]
            }
        },
        "JsonModelMixin.to_json": {
            "name": "to_json",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "include": [
                    "dict",
                    "None",
                    "str",
                    "bool",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "exclude": [
                    "dict",
                    "None",
                    "str",
                    "bool",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Account.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Envelope.create": {
            "name": "create",
            "location": 70,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [
                    "models.User",
                    "id3c.db.session.DatabaseSession",
                    "app.models.user.User",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]"
                ],
                "user": [
                    "models.User"
                ],
                "dt": [
                    "models.User"
                ],
                "account": [
                    "models.User",
                    "id3c.db.session.DatabaseSession",
                    "app.models.user.User",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]"
                ]
            }
        },
        "Envelope.deposit": {
            "name": "deposit",
            "location": 95,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ],
                "uuid": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ],
                "deposited_by": [
                    "int",
                    "str",
                    "float",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.BlockTimeout",
                    "Union[int, str]"
                ],
                "amount": [
                    "int",
                    "str",
                    "T",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentID"
                ],
                "dt": [
                    "int",
                    "str",
                    "T"
                ],
                "description": [
                    "bool",
                    "None",
                    "Hashable",
                    "Optional[int]",
                    "typing.Hashable"
                ],
                "comment": [
                    "bool",
                    "None",
                    "str",
                    "Hashable",
                    "typing.Hashable",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Envelope.withdraw": {
            "name": "withdraw",
            "location": 119,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ],
                "uuid": [
                    "str",
                    "Exception",
                    "Optional[str]",
                    "None"
                ],
                "withdrawn_by": [
                    "int",
                    "str",
                    "float",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.BlockTimeout",
                    "Union[int, str]"
                ],
                "amount": [
                    "int",
                    "str",
                    "T",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentID"
                ],
                "dt": [
                    "int",
                    "str",
                    "T"
                ],
                "description": [
                    "bool",
                    "None",
                    "Hashable",
                    "Optional[int]",
                    "typing.Hashable"
                ],
                "comment": [
                    "bool",
                    "None",
                    "str",
                    "Hashable",
                    "typing.Hashable",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Category.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.create": {
            "name": "create",
            "location": 178,
            "return": [
                "int",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "excars.models.user.User",
                    "zerver.models.Realm",
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "str",
                    "None",
                    "grouper.models.group.Group",
                    "Optional[str]"
                ],
                "envelope": [
                    "str",
                    "None",
                    "grouper.models.group.Group",
                    "Optional[str]"
                ],
                "action_type": [
                    "bool",
                    "str",
                    "excars.models.user.User",
                    "zerver.models.Realm",
                    "zerver.models.UserProfile"
                ],
                "delta": [
                    "str",
                    "None",
                    "grouper.models.group.Group",
                    "Optional[str]"
                ],
                "dt": [
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ],
                "description": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[zerver.models.UserProfile]"
                ],
                "comment": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "typing.Iterable[str]",
                    "Optional[zerver.models.UserProfile]",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "Envelopes-API-master/envelopes/schemas.py": {
        "must_be_action_type": {
            "name": "must_be_action_type",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "Account.make_account": {
            "name": "make_account",
            "location": 17,
            "return": [
                "Account",
                "dict",
                "List[str]",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Iterable[T]"
                ]
            }
        },
        "Envelope.make_envelope": {
            "name": "make_envelope",
            "location": 34,
            "return": [
                "Envelope",
                "dict",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "str",
                    "float",
                    "Tuple[Tuple[str, ...]]",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Category.make_category": {
            "name": "make_category",
            "location": 43,
            "return": [
                "Category",
                "dict",
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes"
                ]
            }
        }
    },
    "Envelopes-API-master/envelopes/types.py": {},
    "Envelopes-API-master/envelopes/utils.py": {
        "encode": {
            "name": "encode",
            "location": 12,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "num": [
                    "str",
                    "int",
                    "Optional[bytes]",
                    "bytes",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "Envelopes-API-master/envelopes/views.py": {
        "retrieve": {
            "name": "retrieve",
            "location": 17,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "queryset": [
                    "_T0"
                ]
            }
        },
        "handle_error": {
            "name": "handle_error",
            "location": 28,
            "return": [
                "Response",
                "List[str]",
                "Dict[str, Any]",
                "Optional[str]",
                "int",
                "float",
                "bytes"
            ],
            "arguments": {
                "props": [
                    "list[str]",
                    "List[str]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "list_accounts": {
            "name": "list_accounts",
            "location": 34,
            "return": [
                "dict",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Union[str, Set]]",
                "Exception",
                "tartare.core.models.Job",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth"
                ],
                "auth": [
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ]
            }
        },
        "get_account": {
            "name": "get_account",
            "location": 40,
            "return": [
                "Dict[str, str]",
                "Response",
                "str",
                "dict[str, str]",
                "set[typing.Optional[str]]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "auth": [
                    "str",
                    "int",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "str",
                    "int",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ],
                "uuid": [
                    "str",
                    "int",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ]
            }
        },
        "create_account": {
            "name": "create_account",
            "location": 51,
            "return": [
                "Response",
                "core.models.User",
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "list[int]",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest",
                    "List[int]"
                ],
                "auth": [
                    "str",
                    "apistar.interfaces.Auth",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "session": [
                    "int",
                    "str",
                    "apistar.backends.django_orm.Session"
                ],
                "data": [
                    "dict[str, typing.Any]",
                    "apistar.http.RequestData",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "update_account": {
            "name": "update_account",
            "location": 62,
            "return": [
                "Response",
                "str",
                "Tuple[str, Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "list[int]",
                    "apistar.http.Request",
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth",
                    "List[int]"
                ],
                "auth": [
                    "int",
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "session": [
                    "int",
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "data": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "requests.Session"
                ],
                "uuid": [
                    "int",
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ]
            }
        },
        "delete_account": {
            "name": "delete_account",
            "location": 74,
            "return": [
                "Iterable['Notification']",
                "Response"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth"
                ],
                "auth": [
                    "int",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "session": [
                    "int",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "uuid": [
                    "int",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ]
            }
        },
        "list_envelopes": {
            "name": "list_envelopes",
            "location": 83,
            "return": [
                "bool",
                "Optional[float]",
                "str",
                "dict"
            ],
            "arguments": {
                "request": [
                    "str",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "auth": [
                    "str",
                    "apistar.backends.django_orm.Session",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "str",
                    "apistar.backends.django_orm.Session",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ]
            }
        },
        "get_envelope": {
            "name": "get_envelope",
            "location": 89,
            "return": [
                "int",
                "str",
                "Response",
                "Optional[int]",
                "dict",
                "Exception",
                "float",
                "dict[int, str]",
                "set[]"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth"
                ],
                "auth": [
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "session": [
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "uuid": [
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ]
            }
        },
        "create_envelope": {
            "name": "create_envelope",
            "location": 100,
            "return": [
                "Response",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth"
                ],
                "auth": [
                    "str",
                    "apistar.interfaces.Auth",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "session": [
                    "int",
                    "apistar.backends.django_orm.Session",
                    "apistar.http.RequestData"
                ],
                "data": [
                    "apistar.http.RequestData",
                    "int",
                    "Callable[..., Coroutine]"
                ]
            }
        },
        "update_envelope": {
            "name": "update_envelope",
            "location": 111,
            "return": [
                "bool",
                "Response"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth"
                ],
                "auth": [
                    "str",
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "session": [
                    "str",
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "data": [
                    "str",
                    "apistar.backends.sqlalchemy_backend.Session"
                ],
                "uuid": [
                    "str",
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ]
            }
        },
        "delete_envelope": {
            "name": "delete_envelope",
            "location": 123,
            "return": [
                "Response",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "django.http.HttpRequest",
                    "apistar.interfaces.Auth"
                ],
                "auth": [
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ],
                "uuid": [
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ]
            }
        },
        "list_categories": {
            "name": "list_categories",
            "location": 132,
            "return": [
                "bool",
                "Optional[float]",
                "str",
                "dict"
            ],
            "arguments": {
                "request": [
                    "str",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "auth": [
                    "str",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "get_category": {
            "name": "get_category",
            "location": 138,
            "return": [
                "int",
                "str",
                "Response",
                "Optional[int]",
                "dict",
                "Exception",
                "float",
                "dict[int, str]",
                "set[]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "auth": [
                    "str",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "session": [
                    "str",
                    "django.http.HttpRequest",
                    "recidiviz.persistence.database.session.Session"
                ],
                "name": [
                    "str",
                    "django.http.HttpRequest",
                    "recidiviz.persistence.database.session.Session"
                ]
            }
        },
        "create_category": {
            "name": "create_category",
            "location": 149,
            "return": [
                "Response",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth"
                ],
                "auth": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth"
                ],
                "session": [
                    "int",
                    "apistar.backends.django_orm.Session",
                    "apistar.http.RequestData"
                ],
                "data": [
                    "list[R]",
                    "apistar.http.RequestData",
                    "List[_models.Response]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "update_category": {
            "name": "update_category",
            "location": 158,
            "return": [
                "bool",
                "Response"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "auth": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ],
                "session": [
                    "str",
                    "None",
                    "django.http.HttpRequest",
                    "recidiviz.persistence.database.session.Session",
                    "Optional[str]"
                ],
                "data": [
                    "bool",
                    "list[]",
                    "apistar.backends.django_orm.Session",
                    "list"
                ],
                "name": [
                    "str",
                    "None",
                    "django.http.HttpRequest",
                    "recidiviz.persistence.database.session.Session",
                    "Optional[str]"
                ]
            }
        },
        "delete_category": {
            "name": "delete_category",
            "location": 170,
            "return": [
                "Response",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ],
                "auth": [
                    "str",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "str",
                    "django.http.HttpRequest",
                    "asgard.backends.users.UsersBackend"
                ],
                "name": [
                    "str",
                    "django.http.HttpRequest",
                    "asgard.backends.users.UsersBackend"
                ]
            }
        },
        "list_transactions": {
            "name": "list_transactions",
            "location": 179,
            "return": [
                "Union[Dict, List]",
                "dict",
                "Callable",
                "bool",
                "str",
                "Exception"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "auth": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "get_transaction": {
            "name": "get_transaction",
            "location": 185,
            "return": [
                "Response",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "auth": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "int",
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ],
                "friendly_id": [
                    "int",
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session",
                    "django.http.HttpRequest"
                ]
            }
        },
        "create_transaction": {
            "name": "create_transaction",
            "location": 196,
            "return": [
                "Response",
                "str",
                "int",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "request": [
                    "list[int]",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest",
                    "List[int]"
                ],
                "auth": [
                    "list[int]",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest",
                    "List[int]"
                ],
                "session": [
                    "int",
                    "apistar.backends.django_orm.Session",
                    "apistar.backends.sqlalchemy_backend.Session"
                ],
                "data": [
                    "bytes",
                    "int",
                    "apistar.http.RequestData",
                    "django.http.HttpRequest"
                ]
            }
        },
        "update_transaction": {
            "name": "update_transaction",
            "location": 205,
            "return": [
                "Response",
                "Dict[str, str]",
                "apistar.types.WSGIEnviron",
                "int"
            ],
            "arguments": {
                "request": [
                    "list[int]",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest",
                    "List[int]"
                ],
                "auth": [
                    "list[int]",
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest",
                    "List[int]"
                ],
                "session": [
                    "int",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "data": [
                    "bytes",
                    "apistar.http.RequestData",
                    "str",
                    "dict[str, str]",
                    "Dict[str, str]"
                ],
                "friendly_id": [
                    "int",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ]
            }
        },
        "delete_transaction": {
            "name": "delete_transaction",
            "location": 217,
            "return": [
                "Iterable['Notification']",
                "Response"
            ],
            "arguments": {
                "request": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "auth": [
                    "apistar.http.Request",
                    "apistar.interfaces.Auth",
                    "django.http.HttpRequest"
                ],
                "session": [
                    "int",
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ],
                "friendly_id": [
                    "int",
                    "str",
                    "apistar.interfaces.Auth",
                    "apistar.backends.django_orm.Session"
                ]
            }
        }
    },
    "Envelopes-API-master/envelopes/__init__.py": {},
    "Envelopes-API-master/envelopes/migrations/0001_initial.py": {},
    "Envelopes-API-master/envelopes/migrations/0002_category_envelope_transaction.py": {},
    "Envelopes-API-master/envelopes/migrations/0003_auto_20171014_2121.py": {},
    "Envelopes-API-master/envelopes/migrations/0004_auto_20171014_2131.py": {},
    "Envelopes-API-master/envelopes/migrations/__init__.py": {},
    "Envelopes-API-master/tests/test_views.py": {
        "create_auth": {
            "name": "create_auth",
            "location": 17,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "user": [
                    "int",
                    "services.user.transfer.models.User",
                    "dict[, ]",
                    "models.user.User",
                    "Union[server.models.User, int]",
                    "dict"
                ]
            }
        },
        "auth": {
            "name": "auth",
            "location": 28,
            "return": [
                "Callable",
                "dict",
                "int",
                "bytes",
                "core.models.Grouping",
                "core.models.Registration",
                "str",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {}
        },
        "accounts": {
            "name": "accounts",
            "location": 37,
            "return": [
                "list[typing.Union[str,int,dict[str, str],list[str],tuple[typing.Union[str,str]]]]",
                "services.ticketing.models.ticket_evenTicketEvent",
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {}
        },
        "test_list_accounts": {
            "name": "test_list_accounts",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "auth": [
                    "aiohttp.test_utils.TestClient"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_get_account": {
            "name": "test_get_account",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "auth": [
                    "str",
                    "aiohttp.test_utils.TestClient",
                    "list[str]",
                    "core.models.Recipe",
                    "List[str]"
                ],
                "accounts": [
                    "str",
                    "tuple[str]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "bool",
                    "asgard.models.accounAccount"
                ]
            }
        },
        "test_create_account": {
            "name": "test_create_account",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "auth": [
                    "Dict[str, str]",
                    "core.models.Recipe",
                    "aiohttp.test_utils.TestClient"
                ]
            }
        },
        "test_update_account": {
            "name": "test_update_account",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "accounts": [
                    "int",
                    "server.models.User",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ]
            }
        },
        "test_delete_account": {
            "name": "test_delete_account",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "accounts": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "Envelopes-API-master/tests/__init__.py": {}
}
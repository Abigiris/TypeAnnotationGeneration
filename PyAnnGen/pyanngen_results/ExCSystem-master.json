{
    "ExCSystem-master/functional_tests.py": {
        "NewVisitorTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewVisitorTest.tearDown": {
            "name": "tearDown",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewVisitorTest.test_get_browser_title": {
            "name": "test_get_browser_title",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/manage.py": {},
    "ExCSystem-master/tasks.py": {
        "populate_database": {
            "name": "populate_database",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reset_database": {
            "name": "reset_database",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_task": {
            "name": "run_task",
            "location": 30,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "task_name": [
                    "str"
                ]
            }
        }
    },
    "ExCSystem-master/api/admin.py": {},
    "ExCSystem-master/api/apps.py": {},
    "ExCSystem-master/api/models.py": {
        "RfidCheckManager.create": {
            "name": "create",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "rfid": [
                    "None",
                    "Type",
                    "str",
                    "typing.Type",
                    "ddionrails.studies.models.Study",
                    "dict[, ]",
                    "zam_repondeur.models.Amendement",
                    "Optional[dict]"
                ]
            }
        }
    },
    "ExCSystem-master/api/tests.py": {
        "MemberRFIDCheckTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "MemberRFIDCheckTest.make_test_member": {
            "name": "make_test_member",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rfid": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "group_name": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MemberRFIDCheckTest.gen_rfid": {
            "name": "gen_rfid",
            "location": 29,
            "return": [
                "str",
                "int",
                "list[]",
                "Callable",
                "models.Question"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberRFIDCheckTest.do_gate_check": {
            "name": "do_gate_check",
            "location": 38,
            "return": [
                "str",
                "Optional[int]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "rfid": [
                    "str"
                ]
            }
        },
        "MemberRFIDCheckTest.is_valid_member_rfid": {
            "name": "is_valid_member_rfid",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rfid": [
                    "str",
                    "float"
                ]
            }
        },
        "MemberRFIDCheckTest.test_random_rfid_not_valid": {
            "name": "test_random_rfid_not_valid",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberRFIDCheckTest.test_new_member_not_valid": {
            "name": "test_new_member_not_valid",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberRFIDCheckTest.test_expired_member_not_valid": {
            "name": "test_expired_member_not_valid",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberRFIDCheckTest.test_active_member_is_valid": {
            "name": "test_active_member_is_valid",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberRFIDCheckTest.test_staffer_is_valid": {
            "name": "test_staffer_is_valid",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberRFIDCheckTest.test_board_member_is_valid": {
            "name": "test_board_member_is_valid",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/api/urls.py": {},
    "ExCSystem-master/api/views.py": {
        "ActiveMemberView.test_func": {
            "name": "test_func",
            "location": 18,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveMemberView.get_context_data": {
            "name": "get_context_data",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckIfActiveMemberView.get": {
            "name": "get",
            "location": 32,
            "return": [
                "HttpResponse",
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ],
                "rfid": []
            }
        },
        "RFIDCheckLogViewList.test_func": {
            "name": "test_func",
            "location": 45,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]",
                "django.tesClient"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/api/__init__.py": {},
    "ExCSystem-master/api/migrations/0001_initial.py": {},
    "ExCSystem-master/api/migrations/__init__.py": {},
    "ExCSystem-master/core/apps.py": {},
    "ExCSystem-master/core/convinience.py": {
        "get_all_rfids": {
            "name": "get_all_rfids",
            "location": 5,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_email_template": {
            "name": "get_email_template",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "notify_admin": {
            "name": "notify_admin",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "typing.Text",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "Exception"
                ],
                "message": [
                    "typing.Text",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "Exception"
                ]
            }
        },
        "notify_info": {
            "name": "notify_info",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "typing.Text",
                    "dict",
                    "str",
                    "float"
                ],
                "message": [
                    "typing.Text",
                    "dict",
                    "str",
                    "float"
                ]
            }
        }
    },
    "ExCSystem-master/core/DatabaseUpdates.py": {
        "expire_members": {
            "name": "expire_members",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "identify_missing_gear": {
            "name": "identify_missing_gear",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "expire_gear": {
            "name": "expire_gear",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ExCSystem-master/core/emailing.py": {
        "send_email": {
            "name": "send_email",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "to_emails": [
                    "str",
                    "list[str]",
                    "dict[str, list[typing.Any]]",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, List[Any]]",
                    "bool"
                ],
                "title": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "body": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "from_email": [
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[List[str]]",
                    "list[typing.Any]",
                    "Optional[Union[str, Any]]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "typing.Any",
                    "dict[str, typing.Any]"
                ],
                "smtp_password": [
                    "Optional[str]",
                    "None",
                    "Optional[Union[str, Any]]",
                    "str",
                    "bool",
                    "Optional[Callable[[Any], bool]]",
                    "typing.Any",
                    "Optional[bool]",
                    "typing.Callable[typing.Any, bool]"
                ],
                "from_name": [
                    "typing.Text",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "receiver_names": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "Optional[bool]",
                    "Optional[Union[str, Any]]",
                    "typing.Any"
                ]
            }
        },
        "send_membership_email": {
            "name": "send_membership_email",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "to_emails": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, None]",
                    "dict[str, None]",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "title": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, None]",
                    "dict[str, None]",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "body": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, None]",
                    "dict[str, None]",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "receiver_names": [
                    "str",
                    "None",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, None]",
                    "dict[str, dict[str, str]]",
                    "dict",
                    "dict[str, None]",
                    "Optional[str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "ExCSystem-master/core/tasks.py": {
        "test_task": {
            "name": "test_task",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_listserv": {
            "name": "update_listserv",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "expire_members": {
            "name": "expire_members",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "expire_gear": {
            "name": "expire_gear",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "email_overdue_gear": {
            "name": "email_overdue_gear",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ExCSystem-master/core/tests.py": {},
    "ExCSystem-master/core/urls.py": {},
    "ExCSystem-master/core/__init__.py": {},
    "ExCSystem-master/core/admin/ExcAdminSite.py": {
        "ExcursionAdmin._build_app_dict": {
            "name": "_build_app_dict",
            "location": 14,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "label": [
                    "str",
                    "None",
                    "dict",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "Optional[dict]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ExCSystem-master/core/admin/GearAdmin.py": {
        "GearAdmin.get_fieldsets": {
            "name": "get_fieldsets",
            "location": 43,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "dict"
                ]
            }
        },
        "GearAdmin.get_form": {
            "name": "get_form",
            "location": 55,
            "return": [
                "int",
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "int",
                    "None",
                    "django.http.HttpRequest",
                    "dict[str, typing.Any]",
                    "core.Core",
                    "Dict[str, Any]"
                ]
            }
        },
        "GearAdmin.response_add": {
            "name": "response_add",
            "location": 90,
            "return": [
                "HttpResponseRedirect",
                "Dict[str, Any]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int"
                ],
                "obj": [
                    "typing.Iterable[bytes]",
                    "str",
                    "Iterable[bytes]",
                    "typing.IO",
                    "typing.TextIO",
                    "tracim.lib.core.contenContentApi",
                    "IO[bytes]",
                    "Tuple[str, str]",
                    "Union[str, TextIO]"
                ],
                "post_url_continue": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "GearTypeAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ],
                "obj": [
                    "None",
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ]
            }
        },
        "CustomDataFieldAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ],
                "obj": [
                    "None",
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ]
            }
        }
    },
    "ExCSystem-master/core/admin/MemberAdmin.py": {
        "MemberAdmin.get_urls": {
            "name": "get_urls",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberAdmin.wrap": {
            "name": "wrap",
            "location": 109,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MemberAdmin.response_add": {
            "name": "response_add",
            "location": 116,
            "return": [
                "HttpResponseRedirect",
                "Dict[str, Any]",
                "Optional[str]",
                "bool",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "int",
                    "typing.Callable[..., collections.abc.Coroutine]",
                    "bytes",
                    "Callable[..., Coroutine]",
                    "django.contrib.auth.models.User",
                    "preacher.core.verification.ResponseDescription",
                    "apistar.http.RequestData"
                ],
                "post_url_continue": [
                    "None",
                    "zerver.models.UserProfile",
                    "int",
                    "bytes",
                    "django.http.HttpRequest"
                ]
            }
        },
        "MemberAdmin.can_edit_profile": {
            "name": "can_edit_profile",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "member": [
                    "django.http.HttpRequest",
                    "int",
                    "None"
                ]
            }
        },
        "MemberAdmin.can_edit_all_data": {
            "name": "can_edit_all_data",
            "location": 138,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, models.DeviceRow]"
            ],
            "arguments": {
                "request": [
                    "set[str]",
                    "Set[str]",
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "MemberAdmin.has_view_or_change_permission": {
            "name": "has_view_or_change_permission",
            "location": 141,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MemberAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 146,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "purplship.core.utils.xml.Element",
                    "django.http.HttpRequest",
                    "preacher.core.verification.ResponseDescription"
                ],
                "obj": [
                    "None",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "http.MITMRequest",
                    "dict"
                ]
            }
        },
        "MemberAdmin.change_view": {
            "name": "change_view",
            "location": 152,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "object_id": [
                    "str",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ],
                "form_url": [
                    "typing.Text",
                    "zerver.models.UserProfile",
                    "str",
                    "django.http.HttpRequest"
                ],
                "extra_context": [
                    "None",
                    "str",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ]
            }
        },
        "MemberAdmin.get_fieldsets": {
            "name": "get_fieldsets",
            "location": 163,
            "return": [
                "Tuple[(Tuple[(Optional[Union[(str, Dict[(str, Tuple[(str, ...)])])]], ...)], ...)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "None"
                ]
            }
        },
        "MemberAdmin.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 183,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "django.http.HttpRequest",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "StafferAdmin.get_form": {
            "name": "get_form",
            "location": 202,
            "return": [
                "bool",
                "dict",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "None"
                ]
            }
        },
        "StafferAdmin.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 212,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "django.http.HttpRequest",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "StafferAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 218,
            "return": [
                "bool",
                "str",
                "dict[str, list[typing.Any]]",
                "list[tuple[typing.Union[str,typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "obj": [
                    "None",
                    "Optional[dict]",
                    "dict[, ]",
                    "bytes",
                    "django.http.HttpRequest",
                    "dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "dict"
                ]
            }
        },
        "StafferAdmin.delete_model": {
            "name": "delete_model",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "tuple[int]",
                    "django.http.HttpRequest",
                    "viewer.models.Archive",
                    "Tuple[int]"
                ],
                "obj": [
                    "tuple[int]",
                    "django.http.HttpRequest",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Tuple[int]",
                    "Dict[str, Any]",
                    "viewer.models.Archive",
                    "dict"
                ]
            }
        },
        "MemberAdmin.wrap.wrapper": {
            "name": "wrapper",
            "location": 110,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {}
        }
    },
    "ExCSystem-master/core/admin/OtherAdmins.py": {},
    "ExCSystem-master/core/admin/TransactionAdmin.py": {
        "TransactionAdmin.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "TransactionAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "dict[, ]"
                ],
                "obj": [
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "ExCSystem-master/core/admin/ViewableAdmin.py": {
        "ViewableModelAdmin.get_detail_view": {
            "name": "get_detail_view",
            "location": 26,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewableModelAdmin.has_view_permission": {
            "name": "has_view_permission",
            "location": 41,
            "return": [
                "str",
                "dict",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "obj": [
                    "None",
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ]
            }
        },
        "ViewableModelAdmin.get_model_perms": {
            "name": "get_model_perms",
            "location": 46,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "ViewableModelAdmin.get_changelist": {
            "name": "get_changelist",
            "location": 59,
            "return": [
                "Type[core.views.ViewList.RestrictedViewList]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "django.http.HttpRequest",
                    "dict[, ]",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "ViewableModelAdmin.viewlist_view": {
            "name": "viewlist_view",
            "location": 63,
            "return": [
                "SimpleTemplateResponse",
                "Dict[str, Any]",
                "HttpResponseRedirect",
                "Optional[str]",
                "TemplateResponse",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "ViewableModelAdmin.changelist_view": {
            "name": "changelist_view",
            "location": 129,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "extra_context": [
                    "django.http.HttpRequest",
                    "str",
                    "None"
                ]
            }
        },
        "ViewableModelAdmin.get_urls": {
            "name": "get_urls",
            "location": 140,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewableModelAdmin.response_change": {
            "name": "response_change",
            "location": 158,
            "return": [
                "recidiviz.common.ingest_metadata.IngestMetadata",
                "int",
                "Optional[str]",
                "werkzeug.exceptions.HTTPException"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "str",
                    "int",
                    "dict"
                ],
                "obj": [
                    "tuple[int]",
                    "Tuple[int]",
                    "dict[, ]",
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "ViewableModelAdmin.get_detail_view.wrap": {
            "name": "wrap",
            "location": 29,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "view": [
                    "str",
                    "List[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "ViewableModelAdmin.get_detail_view.wrap.wrapper": {
            "name": "wrapper",
            "location": 30,
            "return": [
                "trezor.utils.Writer",
                "Callable",
                "utils.Node",
                "Dict[str, int]"
            ],
            "arguments": {}
        }
    },
    "ExCSystem-master/core/admin/__init__.py": {},
    "ExCSystem-master/core/forms/GearForms.py": {
        "GearChangeForm.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearChangeForm.clean_gear_data": {
            "name": "clean_gear_data",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearChangeForm.save": {
            "name": "save",
            "location": 40,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "GearAddForm.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearAddForm.build_gear_data": {
            "name": "build_gear_data",
            "location": 72,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearAddForm.clean_rfid": {
            "name": "clean_rfid",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearAddForm.save": {
            "name": "save",
            "location": 89,
            "return": [
                "core.models.GearModels.Gear"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        }
    },
    "ExCSystem-master/core/forms/MemberForms.py": {
        "MemberCreationForm.clean_username": {
            "name": "clean_username",
            "location": 66,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[str]",
                "bool",
                "list",
                "Optional[Union[Any, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberCreationForm.clean_rfid": {
            "name": "clean_rfid",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberCreationForm.clean_password1": {
            "name": "clean_password1",
            "location": 92,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberCreationForm.clean_password2": {
            "name": "clean_password2",
            "location": 99,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberCreationForm.clean_membership": {
            "name": "clean_membership",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberCreationForm.is_new_membership": {
            "name": "is_new_membership",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "membership": [
                    "str"
                ]
            }
        },
        "MemberCreationForm.save": {
            "name": "save",
            "location": 135,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "MemberFinishForm.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberFinishForm.as_table_member": {
            "name": "as_table_member",
            "location": 223,
            "return": [
                "str",
                "Optional[Any]",
                "int",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberFinishForm.as_table_emergency": {
            "name": "as_table_emergency",
            "location": 227,
            "return": [
                "str",
                "Optional[Any]",
                "int",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberFinishForm.as_table_quiz": {
            "name": "as_table_quiz",
            "location": 231,
            "return": [
                "str",
                "Optional[Any]",
                "int",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberFinishForm.as_table_subset": {
            "name": "as_table_subset",
            "location": 235,
            "return": [
                "int",
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "subset_field_names": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MemberFinishForm.get_fields_subset": {
            "name": "get_fields_subset",
            "location": 263,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": [],
                "field_name_list": [
                    "str",
                    "bool",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "MemberFinishForm.get_question_cleaner": {
            "name": "get_question_cleaner",
            "location": 269,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": [],
                "question_name": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MemberFinishForm.clean_image": {
            "name": "clean_image",
            "location": 281,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberFinishForm.save": {
            "name": "save",
            "location": 297,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "StafferCreateForm.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StafferCreateForm.clean_nickname": {
            "name": "clean_nickname",
            "location": 403,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StafferCreateForm.save": {
            "name": "save",
            "location": 410,
            "return": [
                "list[str]",
                "str",
                "tuple[typing.Union[str,str,str,str,str,str,str,str]]",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "MemberChangeForm.clean_groups": {
            "name": "clean_groups",
            "location": 447,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberChangeForm.save": {
            "name": "save",
            "location": 454,
            "return": [
                "List[dict]",
                "str",
                "Dict[str, Any]",
                "float",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool",
                    "int",
                    "str",
                    "models.Name",
                    "Tuple[str, int]"
                ]
            }
        },
        "MemberFinishForm.get_question_cleaner.cleaner": {
            "name": "cleaner",
            "location": 272,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "ExCSystem-master/core/forms/widgets.py": {
        "RFIDWidget.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "bool",
                    "None",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "RFIDWidget.get_context": {
            "name": "get_context",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ],
                "attrs": [
                    "str",
                    "int"
                ]
            }
        },
        "ExistingImageWidget.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_type": [
                    "str"
                ],
                "attrs": [
                    "Iterable[str]",
                    "None",
                    "bytes",
                    "typing.Iterable[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "ExistingImageWidget.get_available_images": {
            "name": "get_available_images",
            "location": 43,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExistingImageWidget.get_context": {
            "name": "get_context",
            "location": 77,
            "return": [
                "dict[str, dict[str, typing.Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "attrs": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GearImageWidget.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "bytes",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "ExCEmailWidget.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExCEmailWidget.get_context": {
            "name": "get_context",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "attrs": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "ExCSystem-master/core/forms/__init__.py": {},
    "ExCSystem-master/core/forms/fields/RFIDField.py": {
        "RFIDField.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[Union[int, float]]"
                ],
                "min_length": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[Union[int, float]]"
                ]
            }
        },
        "RFIDField.to_python": {
            "name": "to_python",
            "location": 16,
            "return": [
                "int",
                "str",
                "float",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list[]",
                    "Optional[List]",
                    "float",
                    "None",
                    "Optional[static_frame.core.util.IndexInitializer]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "Iterable",
                    "Optional[object]",
                    "T",
                    "Union[type, Tuple[type, ...]]"
                ]
            }
        }
    },
    "ExCSystem-master/core/forms/fields/__init__.py": {},
    "ExCSystem-master/core/migrations/0001_initial.py": {},
    "ExCSystem-master/core/migrations/0002_auto_kiosk-overhaul_merge.py": {},
    "ExCSystem-master/core/migrations/0003_auto_20190116_2153.py": {},
    "ExCSystem-master/core/migrations/0004_auto_add_staffer_fields.py": {},
    "ExCSystem-master/core/migrations/__init__.py": {},
    "ExCSystem-master/core/models/CertificationModels.py": {
        "Certification.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certification.get_page_url": {
            "name": "get_page_url",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/models/DepartmentModels.py": {
        "Department.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Department.stl_names": {
            "name": "stl_names",
            "location": 34,
            "return": [
                "list[]",
                "str",
                "FrozenSet[str]",
                "Union[str, List[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Department.notify_STL": {
            "name": "notify_STL",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "message": [
                    "str",
                    "Exception",
                    "int",
                    "Type",
                    "typing.Type",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Department.notify_gear_removed": {
            "name": "notify_gear_removed",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gear": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        }
    },
    "ExCSystem-master/core/models/FileModels.py": {
        "get_upload_path": {
            "name": "get_upload_path",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "AlreadyUploadedImage.url": {
            "name": "url",
            "location": 37,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlreadyUploadedImage.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlreadyUploadedImage.image_tag": {
            "name": "image_tag",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/models/GearModels.py": {
        "CustomDataField.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomDataField.serialize_rfid": {
            "name": "serialize_rfid",
            "location": 75,
            "return": [
                "Dict[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "rfid": [
                    "_T0"
                ]
            }
        },
        "CustomDataField.serialize_text": {
            "name": "serialize_text",
            "location": 78,
            "return": [
                "Dict[(str, Union[(_T0, _T1, _T2, _T3)])]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "_T0"
                ],
                "max_length": [
                    "_T1"
                ],
                "min_length": [
                    "_T2"
                ],
                "strip": [
                    "_T3"
                ]
            }
        },
        "CustomDataField.serialize_string": {
            "name": "serialize_string",
            "location": 86,
            "return": [
                "Dict[(str, Union[(_T0, _T1, _T2, _T3)])]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "_T0"
                ],
                "max_length": [
                    "_T1"
                ],
                "min_length": [
                    "_T2"
                ],
                "strip": [
                    "_T3"
                ]
            }
        },
        "CustomDataField.serialize_boolean": {
            "name": "serialize_boolean",
            "location": 96,
            "return": [
                "Dict[(str, Union[(_T0, _T1)])]"
            ],
            "arguments": {
                "self": [],
                "boolean": [
                    "_T0"
                ],
                "required": [
                    "_T1"
                ]
            }
        },
        "CustomDataField.serialize_int": {
            "name": "serialize_int",
            "location": 99,
            "return": [
                "Dict[(str, Union[(_T0, _T1, _T2)])]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ],
                "min_value": [
                    "_T1"
                ],
                "max_value": [
                    "_T2"
                ]
            }
        },
        "CustomDataField.serialize_float": {
            "name": "serialize_float",
            "location": 102,
            "return": [
                "Dict[(str, Union[(_T0, _T1, _T2)])]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ],
                "min_value": [
                    "_T1"
                ],
                "max_value": [
                    "_T2"
                ]
            }
        },
        "CustomDataField.serialize_choice": {
            "name": "serialize_choice",
            "location": 105,
            "return": [
                "Dict[(str, Union[(tuple, _T0)])]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ],
                "choices": [
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "CustomDataField.serialize": {
            "name": "serialize",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "required": [
                    "str",
                    "None",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "Iterable[models.Course]",
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]"
                ],
                "label": [
                    "str",
                    "bytes",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "initial": [
                    "str",
                    "None",
                    "int",
                    "Set[str]",
                    "set[str]",
                    "Iterable[models.Course]",
                    "dict[str, int]",
                    "bool",
                    "Dict[str, int]"
                ],
                "help_text": [
                    "str",
                    "None",
                    "int",
                    "List[\"ItemShippingTarget\"]",
                    "Optional[str]",
                    "list[I]"
                ]
            }
        },
        "CustomDataField.get_value": {
            "name": "get_value",
            "location": 129,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "List[int]",
                "list"
            ],
            "arguments": {
                "self": [],
                "data_dict": [
                    "str",
                    "bool",
                    "Mapping",
                    "dict"
                ]
            }
        },
        "CustomDataField.get_str": {
            "name": "get_str",
            "location": 133,
            "return": [
                "None",
                "str",
                "Mapping",
                "bool",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "data_dict": [
                    "tuple[]",
                    "tuple[typing.Union[int,int]]",
                    "tuple",
                    "Dict[simulation.core.common.PowerBowl, int]",
                    "bool",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "CustomDataField.get_field": {
            "name": "get_field",
            "location": 152,
            "return": [
                "List[str]",
                "list[str]",
                "bool",
                "MutableMapping[str, int]",
                "list[]",
                "str",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]",
                "dict[str, tuple[typing.Union[str,str]]]",
                "typing.Mapping",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "None",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "GearType.__str__": {
            "name": "__str__",
            "location": 189,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearType.requires_certs": {
            "name": "requires_certs",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearType.get_field_names": {
            "name": "get_field_names",
            "location": 195,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearType.build_empty_data": {
            "name": "build_empty_data",
            "location": 202,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearManager._create": {
            "name": "_create",
            "location": 211,
            "return": [
                "Gear"
            ],
            "arguments": {
                "self": [],
                "rfid": [
                    "str",
                    "int",
                    "corporate.models.Customer",
                    "excars.models.locations.Location"
                ],
                "geartype": [
                    "bool",
                    "None",
                    "Optional[zerver.models.UserProfile]",
                    "int"
                ],
                "image": [
                    "str",
                    "int",
                    "corporate.models.Customer",
                    "excars.models.locations.Location"
                ]
            }
        },
        "GearManager._add": {
            "name": "_add",
            "location": 233,
            "return": [
                "dict",
                "bool",
                "mtg_ssm.scryfall.models.ScryCard"
            ],
            "arguments": {
                "self": [],
                "rfid": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "geartype": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Gear.__str__": {
            "name": "__str__",
            "location": 291,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.__getattr__": {
            "name": "__getattr__",
            "location": 294,
            "return": [
                "Gear",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Gear.get_display_gear_data": {
            "name": "get_display_gear_data",
            "location": 310,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.edit_gear_url": {
            "name": "edit_gear_url",
            "location": 320,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.view_gear_url": {
            "name": "view_gear_url",
            "location": 324,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.is_overdue": {
            "name": "is_overdue",
            "location": 328,
            "return": [
                "bool",
                "str",
                "datetime.datetime",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.get_extra_fieldset": {
            "name": "get_extra_fieldset",
            "location": 331,
            "return": [
                "Tuple[(_T0, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "_T0"
                ],
                "classes": [
                    "tuple[typing.Text]",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "Gear.get_status": {
            "name": "get_status",
            "location": 339,
            "return": [
                "core.models.User",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.image_url": {
            "name": "image_url",
            "location": 343,
            "return": [
                "str",
                "bytes",
                "django.contrib.sites.models.Site"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.name": {
            "name": "name",
            "location": 348,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.get_department": {
            "name": "get_department",
            "location": 372,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.is_available": {
            "name": "is_available",
            "location": 377,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.is_rented_out": {
            "name": "is_rented_out",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.is_active": {
            "name": "is_active",
            "location": 384,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gear.is_existent": {
            "name": "is_existent",
            "location": 391,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/models/MemberModels.py": {
        "get_profile_pic_upload_location": {
            "name": "get_profile_pic_upload_location",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "instance": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "MemberManager.create_member": {
            "name": "create_member",
            "location": 37,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "int",
                    "supersemodels.core.Database",
                    "str",
                    "float",
                    "core.models.User",
                    "None",
                    "Optional[str]"
                ],
                "rfid": [
                    "int",
                    "supersemodels.core.Database",
                    "str",
                    "float",
                    "core.models.User",
                    "None",
                    "Optional[str]"
                ],
                "membership_duration": [
                    "str",
                    "None",
                    "datetime.date",
                    "bytes",
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "datetime"
                ],
                "password": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "MemberManager.create_superuser": {
            "name": "create_superuser",
            "location": 61,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "rfid": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "StafferManager.upgrade_to_staffer": {
            "name": "upgrade_to_staffer",
            "location": 84,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "datetime.datetime",
                    "datetime.tzinfo",
                    "datetime.date",
                    "bool",
                    "employees.models.Report"
                ],
                "staff_name": [
                    "str",
                    "int"
                ],
                "autobiography": [
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Callable[[], None]",
                    "typing.Any",
                    "Tuple[type]",
                    "typing.Callable[[], None]",
                    "tuple[typing.Type]"
                ]
            }
        },
        "Member.is_active_member": {
            "name": "is_active_member",
            "location": 150,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.is_staff": {
            "name": "is_staff",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.is_staffer": {
            "name": "is_staffer",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.edit_profile_url": {
            "name": "edit_profile_url",
            "location": 167,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.view_profile_url": {
            "name": "view_profile_url",
            "location": 171,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.make_staff_url": {
            "name": "make_staff_url",
            "location": 175,
            "return": [
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.has_name": {
            "name": "has_name",
            "location": 178,
            "return": [
                "bool",
                "str",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.get_full_name": {
            "name": "get_full_name",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.get_short_name": {
            "name": "get_short_name",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.get_all_certifications": {
            "name": "get_all_certifications",
            "location": 195,
            "return": [
                "str",
                "int",
                "set",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.has_no_certifications": {
            "name": "has_no_certifications",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.__str__": {
            "name": "__str__",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.update_admin": {
            "name": "update_admin",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.expire": {
            "name": "expire",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.promote_to_active": {
            "name": "promote_to_active",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.extend_membership": {
            "name": "extend_membership",
            "location": 226,
            "return": [
                "Member"
            ],
            "arguments": {
                "self": [
                    "_TMember"
                ],
                "duration": [
                    "str",
                    "float",
                    "int"
                ],
                "rfid": [
                    "str",
                    "typing.Text"
                ],
                "password": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "Member.send_email": {
            "name": "send_email",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "body": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "from_email": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "email_host_password": [
                    "str",
                    "bool",
                    "list[int]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Member.send_membership_email": {
            "name": "send_membership_email",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "body": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Member.send_intro_email": {
            "name": "send_intro_email",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finish_signup_url": [
                    "str",
                    "Dict[str, Union[str, int]]",
                    "dict[str, typing.Union[str,int]]"
                ]
            }
        },
        "Member.send_expires_soon_email": {
            "name": "send_expires_soon_email",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.send_expired_email": {
            "name": "send_expired_email",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.send_missing_gear_email": {
            "name": "send_missing_gear_email",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_gear": [
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Member.send_new_staff_email": {
            "name": "send_new_staff_email",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "staffer": [
                    "str",
                    "Mapping",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Member.has_module_perms": {
            "name": "has_module_perms",
            "location": 312,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Member.has_permission": {
            "name": "has_permission",
            "location": 316,
            "return": [
                "Dict[str, str]",
                "NamedTuple",
                "List[str]",
                "type"
            ],
            "arguments": {
                "self": [],
                "permission_name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Member.move_to_group": {
            "name": "move_to_group",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "str"
                ]
            }
        },
        "Staffer.full_name": {
            "name": "full_name",
            "location": 363,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Staffer.__str__": {
            "name": "__str__",
            "location": 367,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Staffer.fav_trip_list": {
            "name": "fav_trip_list",
            "location": 372,
            "return": [
                "List[int]",
                "list[typing.Text]",
                "List[str]",
                "int",
                "bytes",
                "float",
                "bool",
                "list[]",
                "Sequence[int]",
                "list[typing.Callable[[], bool]]",
                "str",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Staffer.edit_profile_url": {
            "name": "edit_profile_url",
            "location": 380,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/models/QuizModels.py": {
        "Answer.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Answer.as_choice": {
            "name": "as_choice",
            "location": 17,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.get_choices": {
            "name": "get_choices",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.is_correct": {
            "name": "is_correct",
            "location": 50,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "selected_answer_phrase": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        }
    },
    "ExCSystem-master/core/models/TransactionModels.py": {
        "validate_auth": {
            "name": "validate_auth",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "authorizer": [
                    "zerver.models.Realm",
                    "Dict[str, Any]",
                    "allennlp.models.archival.Archive"
                ]
            }
        },
        "validate_can_rent": {
            "name": "validate_can_rent",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "member": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "validate_available": {
            "name": "validate_available",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "gear": [
                    "str",
                    "Set[str]",
                    "int",
                    "List[graphx.core.entities.Edge]"
                ]
            }
        },
        "validate_rfid": {
            "name": "validate_rfid",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "rfid": [
                    "str",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "validate_required_certs": {
            "name": "validate_required_certs",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "member": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "gear": []
            }
        },
        "TransactionManager.__make_transaction": {
            "name": "__make_transaction",
            "location": 77,
            "return": [
                "int",
                "str",
                "Sequence[str]",
                "list[str]",
                "bool",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "type": [
                    "str",
                    "Type",
                    "typing.Type"
                ],
                "gear": [
                    "str",
                    "Type",
                    "typing.Type"
                ],
                "member": [
                    "str",
                    "None",
                    "Type",
                    "typing.Type"
                ],
                "comments": [
                    "typing.Text",
                    "str",
                    "Type"
                ]
            }
        },
        "TransactionManager.make_checkout": {
            "name": "make_checkout",
            "location": 106,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "None",
                    "Iterable[dict]",
                    "float",
                    "Optional[dict]",
                    "Optional[float]"
                ],
                "gear_rfid": [
                    "bool",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "Optional[Union[int, str]]",
                    "None",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "member_rfid": [
                    "bool",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "Optional[Union[int, str]]",
                    "None",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "return_date": [
                    "typing.Sequence[str]",
                    "str",
                    "datetime.datetime",
                    "datetime.date",
                    "Sequence[str]"
                ]
            }
        },
        "TransactionManager.add_gear": {
            "name": "add_gear",
            "location": 143,
            "return": [
                "Tuple[(Any, core.models.GearModels.Gear)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "bool",
                    "str",
                    "bytes",
                    "List[int]",
                    "list[int]"
                ],
                "gear_rfid": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]",
                    "list[int]",
                    "Union[int, float]",
                    "float"
                ],
                "geartype": [
                    "bool",
                    "str",
                    "Optional[Union[int, str]]",
                    "None",
                    "int",
                    "tuple[]",
                    "Optional[int]",
                    "tuple"
                ],
                "gear_image": [
                    "bool",
                    "str",
                    "Optional[Union[int, str]]",
                    "None",
                    "int",
                    "tuple[]",
                    "Optional[int]",
                    "tuple"
                ]
            }
        },
        "TransactionManager.check_in_gear": {
            "name": "check_in_gear",
            "location": 200,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "str",
                    "tuple[]",
                    "bool",
                    "models.User",
                    "tuple",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ],
                "gear_rfid": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TransactionManager.retag_gear": {
            "name": "retag_gear",
            "location": 225,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "bool",
                    "str",
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "Optional[Tuple[int, ...]]",
                    "None"
                ],
                "old_rfid": [
                    "int",
                    "str",
                    "bool"
                ],
                "new_rfid": [
                    "float",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TransactionManager.fix_gear": {
            "name": "fix_gear",
            "location": 252,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[Tuple[int, ...]]",
                    "tuple[typing.Union[int,...]]"
                ],
                "gear_rfid": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "int",
                    "Mapping[str, Any]"
                ],
                "repairs_description": [
                    "bool",
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "typing.Type",
                    "Callable[[Any], None]",
                    "dict[, ]",
                    "faustypes.models.CoercionHandler",
                    "Type",
                    "Callable[..., T]",
                    "dict"
                ],
                "person_repairing": [
                    "bool",
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "typing.Type",
                    "Callable[[Any], None]",
                    "dict[, ]",
                    "faustypes.models.CoercionHandler",
                    "Type",
                    "Callable[..., T]",
                    "dict"
                ]
            }
        },
        "TransactionManager.break_gear": {
            "name": "break_gear",
            "location": 280,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[Tuple[int, ...]]",
                    "tuple[typing.Union[int,...]]"
                ],
                "gear_rfid": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "int",
                    "Mapping[str, Any]"
                ],
                "damage_description": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[Tuple[int, ...]]",
                    "tuple[typing.Union[int,...]]"
                ]
            }
        },
        "TransactionManager.missing_gear": {
            "name": "missing_gear",
            "location": 305,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "str",
                    "int",
                    "zam_repondeur.models.Lecture",
                    "T"
                ],
                "gear_rfid": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "zam_repondeur.models.Amendement"
                ]
            }
        },
        "TransactionManager.expire_gear": {
            "name": "expire_gear",
            "location": 330,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "str",
                    "int",
                    "zam_repondeur.models.Lecture",
                    "T"
                ],
                "gear_rfid": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "zam_repondeur.models.Amendement"
                ]
            }
        },
        "TransactionManager.delete_gear": {
            "name": "delete_gear",
            "location": 356,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "preacher.core.extraction.analysis.Analyzer"
                ],
                "gear_rfid": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "reason": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "preacher.core.extraction.analysis.Analyzer"
                ]
            }
        },
        "TransactionManager.override": {
            "name": "override",
            "location": 382,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "authorizer_rfid": [
                    "str",
                    "zam_repondeur.models.Lecture"
                ],
                "gear_rfid": [
                    "str",
                    "int",
                    "zerver.models.Realm",
                    "bool"
                ]
            }
        },
        "Transaction.__str__": {
            "name": "__str__",
            "location": 509,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.detail_url": {
            "name": "detail_url",
            "location": 513,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/models/__init__.py": {},
    "ExCSystem-master/core/models/fields/PrimaryKeyField.py": {
        "make_id": {
            "name": "make_id",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "reverse_id": {
            "name": "reverse_id",
            "location": 22,
            "return": [
                "int",
                "Type[T]",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "big_id": [
                    "int",
                    "str"
                ]
            }
        },
        "PrimaryKeyField.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/models/fields/RFIDField.py": {
        "RFIDField.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RFIDField.deconstruct": {
            "name": "deconstruct",
            "location": 19,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/models/fields/__init__.py": {},
    "ExCSystem-master/core/views/common.py": {
        "get_default_context": {
            "name": "get_default_context",
            "location": 9,
            "return": [
                "_T1"
            ],
            "arguments": {
                "view": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Type[django.db.models.Model]",
                    "typing.Type"
                ],
                "context": [
                    "_T1"
                ]
            }
        },
        "ModelDetailView.get_html_repr": {
            "name": "get_html_repr",
            "location": 39,
            "return": [
                "str",
                "bool",
                "typing.Type",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ModelDetailView.get_field_sets": {
            "name": "get_field_sets",
            "location": 119,
            "return": [
                "Tuple[Tuple[(str, Dict[(str, list)])]]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "ModelDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 125,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/views/DocumentCreateView.py": {
        "DocumentCreateView.get_context_data": {
            "name": "get_context_data",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/views/email.py": {},
    "ExCSystem-master/core/views/GearViews.py": {
        "GearDetailView.test_func": {
            "name": "test_func",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearDetailView.post": {
            "name": "post",
            "location": 33,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "tracim.models.auth.User",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "list[]",
                    "dict",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "GearDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 37,
            "return": [
                "dict",
                "Callable[[None, None], bool]",
                "Callable",
                "List[str]",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearViewList.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearViewList.test_func": {
            "name": "test_func",
            "location": 67,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]",
                "django.tesClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearViewList.can_view_all": {
            "name": "can_view_all",
            "location": 71,
            "return": [
                "dict",
                "Dict[str, str]",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GearViewList.set_restriction_filters": {
            "name": "set_restriction_filters",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/views/MemberViews.py": {
        "MemberListView.can_view_all": {
            "name": "can_view_all",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, str]",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberListView.set_restriction_filters": {
            "name": "set_restriction_filters",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResendIntroEmailView.test_func": {
            "name": "test_func",
            "location": 39,
            "return": [
                "str",
                "bool",
                "dict[str, str]",
                "Optional[bool]",
                "Tuple[int, int, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResendIntroEmailView.get": {
            "name": "get",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Callable[[Dict], bool]]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResendIntroEmailView.get_context_data": {
            "name": "get_context_data",
            "location": 60,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberDetailView.test_func": {
            "name": "test_func",
            "location": 79,
            "return": [
                "str",
                "bool",
                "tuple[typing.Union[str,str]]",
                "Optional[bool]",
                "Tuple[int, int, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberDetailView.post": {
            "name": "post",
            "location": 86,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "tracim.models.auth.User",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "list[]",
                    "dict",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "MemberDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 90,
            "return": [
                "dict",
                "Callable[[None, None], bool]",
                "Callable",
                "List[str]",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberFinishView.test_func": {
            "name": "test_func",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberFinishView.get_context_data": {
            "name": "get_context_data",
            "location": 123,
            "return": [
                "str",
                "int",
                "typing.Final",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                "typing.Counter"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberFinishView.get_success_url": {
            "name": "get_success_url",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StafferDetailView.test_func": {
            "name": "test_func",
            "location": 142,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]",
                "django.tesClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "StafferDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 146,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/core/views/OtherModelViews.py": {
        "CertificationDetailView.test_func": {
            "name": "test_func",
            "location": 15,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]",
                "django.tesClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificationDetailView.post": {
            "name": "post",
            "location": 18,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "tracim.models.auth.User",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "list[]",
                    "dict",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "DepartmentDetailView.test_func": {
            "name": "test_func",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]",
                "django.tesClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepartmentDetailView.post": {
            "name": "post",
            "location": 33,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "tracim.models.auth.User",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "list[]",
                    "dict",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "ExCSystem-master/core/views/TransactionViews.py": {
        "TransactionListView.test_func": {
            "name": "test_func",
            "location": 8,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionListView.can_view_all": {
            "name": "can_view_all",
            "location": 11,
            "return": [
                "dict",
                "Dict[str, str]",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionListView.set_restriction_filters": {
            "name": "set_restriction_filters",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionDetailView.test_func": {
            "name": "test_func",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionDetailView.post": {
            "name": "post",
            "location": 34,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "tracim.models.auth.User",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "list[]",
                    "dict",
                    "list",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "ExCSystem-master/core/views/ViewList.py": {
        "ViewList.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewList.url_for_result": {
            "name": "url_for_result",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "Union[str, dict]",
                    "T"
                ]
            }
        },
        "RestrictedViewList.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "typing.Iterator",
                    "dict",
                    "Iterator"
                ]
            }
        },
        "RestrictedViewList.test_func": {
            "name": "test_func",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictedViewList.can_view_all": {
            "name": "can_view_all",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictedViewList.set_restriction_filters": {
            "name": "set_restriction_filters",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictedViewList.get_queryset": {
            "name": "get_queryset",
            "location": 58,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "ExCSystem-master/core/views/__init__.py": {},
    "ExCSystem-master/excsystem/settings/prod2.py": {},
    "ExCSystem-master/frontpage/admin.py": {},
    "ExCSystem-master/frontpage/apps.py": {},
    "ExCSystem-master/frontpage/models.py": {},
    "ExCSystem-master/frontpage/tests.py": {
        "HomePageTests.test_home_page_status_code": {
            "name": "test_home_page_status_code",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HomePageTests.test_home_contains_correct_html": {
            "name": "test_home_contains_correct_html",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/frontpage/urls.py": {},
    "ExCSystem-master/frontpage/views.py": {
        "index": {
            "name": "index",
            "location": 4,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "ExCSystem-master/frontpage/__init__.py": {},
    "ExCSystem-master/frontpage/migrations/__init__.py": {},
    "ExCSystem-master/helper_scripts/build_basic_data.py": {
        "build_all": {
            "name": "build_all",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_images": {
            "name": "build_images",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_site": {
            "name": "build_site",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_permissions": {
            "name": "build_permissions",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_question": {
            "name": "save_question",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "question_name": [
                    "str",
                    "None",
                    "List[zerver.models.UserProfile]",
                    "Optional[str]",
                    "list[zerver.models.UserProfile]",
                    "List[str]",
                    "list[str]"
                ],
                "question_text": [
                    "str",
                    "None",
                    "List[zerver.models.UserProfile]",
                    "Optional[str]",
                    "list[zerver.models.UserProfile]",
                    "List[str]",
                    "list[str]"
                ],
                "choices": [
                    "list[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[int]",
                    "Type"
                ],
                "correct_answer_index": [
                    "int",
                    "str",
                    "List[zerver.models.UserProfile]",
                    "Optional[str]",
                    "List[str]"
                ],
                "error_message": [
                    "typing.Text",
                    "str",
                    "List[zerver.models.UserProfile]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "build_quiz_questions": {
            "name": "build_quiz_questions",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_certifications": {
            "name": "build_certifications",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_departments": {
            "name": "build_departments",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ExCSystem-master/helper_scripts/build_permissions.py": {
        "build_all": {
            "name": "build_all",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_just_joined": {
            "name": "build_just_joined",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_expired": {
            "name": "build_expired",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_member": {
            "name": "build_member",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_staffer": {
            "name": "build_staffer",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_board": {
            "name": "build_board",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_admin": {
            "name": "build_admin",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_group": {
            "name": "add_group",
            "location": 309,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[\"Period\"]"
                ],
                "permissions": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "add_permission": {
            "name": "add_permission",
            "location": 322,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, Tuple[int, int]]",
                "app.models.Article"
            ],
            "arguments": {
                "codename": [
                    "str",
                    "None",
                    "int",
                    "zerver.models.Realm",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Optional[zerver.models.UserProfile]"
                ],
                "name": [
                    "str",
                    "None",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "content_type": [
                    "str",
                    "None",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "ExCSystem-master/helper_scripts/fix_member_group.py": {
        "fix_all_group_names": {
            "name": "fix_all_group_names",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy": [
                    "bool",
                    "str",
                    "Exception",
                    "int",
                    "zam_repondeur.models.Article"
                ],
                "blank": [
                    "bool",
                    "str",
                    "Exception",
                    "int",
                    "zam_repondeur.models.Article"
                ]
            }
        }
    },
    "ExCSystem-master/helper_scripts/listserv_interface.py": {
        "get_active_emails": {
            "name": "get_active_emails",
            "location": 15,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "write_emails": {
            "name": "write_emails",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "email_list": [
                    "str",
                    "Callable[[str, str], None]",
                    "typing.Callable[str,str, None]"
                ]
            }
        },
        "get_email_file": {
            "name": "get_email_file",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "push_to_listserv": {
            "name": "push_to_listserv",
            "location": 34,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "emails_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "run_update": {
            "name": "run_update",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ExCSystem-master/helper_scripts/make_all_active.py": {},
    "ExCSystem-master/helper_scripts/populate_database.py": {
        "gen_rfid": {
            "name": "gen_rfid",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "gen_phone_num": {
            "name": "gen_phone_num",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "gen_duration": {
            "name": "gen_duration",
            "location": 67,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "pick_random": {
            "name": "pick_random",
            "location": 73,
            "return": [
                "str",
                "Set[str]",
                "magic.models.Deck",
                "Optional[Union[Any, str]]",
                "MutableMapping[str, int]"
            ],
            "arguments": {
                "element_list": [
                    "list"
                ]
            }
        },
        "generate_member": {
            "name": "generate_member",
            "location": 78,
            "return": [
                "core.models.MemberModels.Member"
            ],
            "arguments": {}
        }
    },
    "ExCSystem-master/helper_scripts/port_member_data.py": {},
    "ExCSystem-master/helper_scripts/remove_member.py": {
        "wrap_str": {
            "name": "wrap_str",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "start_str": [
                    "str",
                    "int"
                ],
                "length": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ExCSystem-master/helper_scripts/restart_database.py": {},
    "ExCSystem-master/helper_scripts/setup_django.py": {},
    "ExCSystem-master/helper_scripts/set_gear_to_shaka.py": {},
    "ExCSystem-master/helper_scripts/__init__.py": {},
    "ExCSystem-master/kiosk/admin.py": {},
    "ExCSystem-master/kiosk/apps.py": {},
    "ExCSystem-master/kiosk/CheckoutLogic.py": {
        "do_checkout": {
            "name": "do_checkout",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "staffer_rfid": [
                    "str"
                ],
                "member_rfid": [
                    "str"
                ],
                "gear_rfid": [
                    "str"
                ]
            }
        },
        "do_checkin": {
            "name": "do_checkin",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "staffer_rfid": [
                    "str"
                ],
                "gear_rfid": [
                    "str"
                ]
            }
        }
    },
    "ExCSystem-master/kiosk/forms.py": {},
    "ExCSystem-master/kiosk/models.py": {},
    "ExCSystem-master/kiosk/urls.py": {},
    "ExCSystem-master/kiosk/views.py": {
        "get_member": {
            "name": "get_member",
            "location": 232,
            "return": [
                "core.models.MemberModels.Member"
            ],
            "arguments": {
                "member_rfid": [
                    "str"
                ],
                "member": [
                    "str",
                    "None",
                    "django.template.RequestContext"
                ]
            }
        },
        "get_checked_out_gear": {
            "name": "get_checked_out_gear",
            "location": 241,
            "return": [
                "list"
            ],
            "arguments": {
                "member_rfid": [
                    "str"
                ]
            }
        },
        "HomeView.get": {
            "name": "get",
            "location": 29,
            "return": [
                "int",
                "dict",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "HomeView.post": {
            "name": "post",
            "location": 35,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "CheckOutView.get": {
            "name": "get",
            "location": 76,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "rfid": [
                    "str"
                ]
            }
        },
        "CheckOutView.post": {
            "name": "post",
            "location": 101,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "dict",
                    "django.http.HttpRequest",
                    "models.WalletRequest"
                ],
                "rfid": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "GearView.get": {
            "name": "get",
            "location": 133,
            "return": [
                "str",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "rfid": [
                    "str"
                ]
            }
        },
        "GearView.post": {
            "name": "post",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "rfid": [
                    "str"
                ]
            }
        },
        "RetagGearView.get": {
            "name": "get",
            "location": 226,
            "return": [
                "str",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "rfid": [
                    "str"
                ]
            }
        }
    },
    "ExCSystem-master/kiosk/__init__.py": {},
    "ExCSystem-master/kiosk/migrations/__init__.py": {},
    "ExCSystem-master/kiosk/static/__init__.py": {},
    "ExCSystem-master/kiosk/static/kiosk/__init__.py": {},
    "ExCSystem-master/kiosk/tests/test_checkout_logic.py": {
        "CheckoutLogicTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "CheckoutLogicTest.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckoutLogicTest.test_checkout_gear": {
            "name": "test_checkout_gear",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckoutLogicTest.test_checkout_gear_to_self": {
            "name": "test_checkout_gear_to_self",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckoutLogicTest.test_checkout_of_checked_out_gear": {
            "name": "test_checkout_of_checked_out_gear",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckoutLogicTest.test_checkout_of_nonexistent_gear": {
            "name": "test_checkout_of_nonexistent_gear",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckoutLogicTest.test_checkout_to_nonexistent_member": {
            "name": "test_checkout_to_nonexistent_member",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckoutLogicTest.test_checkout_by_nonexistent_member": {
            "name": "test_checkout_by_nonexistent_member",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckoutLogicTest.test_checkin_gear": {
            "name": "test_checkin_gear",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckoutLogicTest.test_checkin_gear_by_nonexistent_member": {
            "name": "test_checkin_gear_by_nonexistent_member",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckoutLogicTest.test_checkin_of_already_returned_gear": {
            "name": "test_checkin_of_already_returned_gear",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/kiosk/tests/test_forms.py": {
        "FormTest.test_valid_home_form": {
            "name": "test_valid_home_form",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTest.test_blank_home_form": {
            "name": "test_blank_home_form",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTest.test_invalid_home_form": {
            "name": "test_invalid_home_form",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTest.test_starting_zero_home_form": {
            "name": "test_starting_zero_home_form",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/kiosk/tests/test_login.py": {
        "LoginTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "LoginTest.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginTest.test_redirect_if_not_logged_in": {
            "name": "test_redirect_if_not_logged_in",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginTest.test_valid_user_login": {
            "name": "test_valid_user_login",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginTest.test_invalid_user_login": {
            "name": "test_invalid_user_login",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/kiosk/tests/test_views.py": {
        "HelpMethodTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "HelpMethodTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelpMethodTest.test_get_name": {
            "name": "test_get_name",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelpMethodTest.test_get_name_no_name": {
            "name": "test_get_name_no_name",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/kiosk/tests/__init__.py": {},
    "ExCSystem-master/uwccsystem/urls.py": {},
    "ExCSystem-master/uwccsystem/wsgi.py": {},
    "ExCSystem-master/uwccsystem/__init__.py": {},
    "ExCSystem-master/uwccsystem/settings/base.py": {},
    "ExCSystem-master/uwccsystem/settings/ci.py": {},
    "ExCSystem-master/uwccsystem/settings/development.py": {},
    "ExCSystem-master/uwccsystem/settings/production.py": {},
    "ExCSystem-master/uwccsystem/settings/staging.py": {},
    "ExCSystem-master/uwccsystem/settings/storage_backends.py": {},
    "ExCSystem-master/uwccsystem/settings/__init__.py": {},
    "ExCSystem-master/uwccsystem/tests/test_views.py": {
        "ViewTestCase.assertStatusCode": {
            "name": "assertStatusCode",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "code": [
                    "int",
                    "dict",
                    "Callable"
                ]
            }
        },
        "SmokeTest.test_home_page_status_code": {
            "name": "test_home_page_status_code",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTest.test_view_url_by_name": {
            "name": "test_view_url_by_name",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTest.test_view_uses_correct_template": {
            "name": "test_view_uses_correct_template",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ExCSystem-master/uwccsystem/tests/__init__.py": {}
}
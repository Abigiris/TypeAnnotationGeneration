{
    "FAIRshake-master/run.py": {},
    "FAIRshake-master/app/ioc.py": {
        "model": {
            "name": "model",
            "location": 12,
            "return": [
                "Callable",
                "Optional[str]",
                "Type"
            ],
            "arguments": {
                "mod": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "str",
                    "Type",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "interface": {
            "name": "interface",
            "location": 18,
            "return": [
                "dict[str, str]",
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "iface": [
                    "dict[str, str]",
                    "float",
                    "Dict[str, str]",
                    "denite.util.UserContext"
                ]
            }
        },
        "implements": {
            "name": "implements",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iface": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "interface.not_constructable": {
            "name": "not_constructable",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "implements.implements_decorator": {
            "name": "implements_decorator",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "impl": [
                    "Dict[str, object]",
                    "int"
                ]
            }
        }
    },
    "FAIRshake-master/app/types.py": {},
    "FAIRshake-master/app/__init__.py": {},
    "FAIRshake-master/app/entities/Assessment/mock.py": {
        "MockAssessmentAPI.get": {
            "name": "get",
            "location": 9,
            "return": [
                "list[AssessmentModel]",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "id": [
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "types.Optional[types.Timestamp]",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "user": [
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "types.Optional[types.Timestamp]",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "object": [
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "types.Optional[types.Timestamp]",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "rubric": [
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "types.Optional[types.Timestamp]",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "timestamp": [
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "types.Optional[types.Timestamp]",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "skip": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "limit": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MockAssessmentAPI.post": {
            "name": "post",
            "location": 45,
            "return": [
                "HTTPResponse",
                "List[str]",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "body": [
                    "int",
                    "str",
                    "interfaces.Repository.DigitalObjectModel",
                    "None",
                    "typing.Mapping",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Assessment/FAIRshakeAssessment/api.py": {
        "FAIRshakeAssessment.get": {
            "name": "get",
            "location": 16,
            "return": [
                "bool",
                "str",
                "int",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "id": [
                    "None",
                    "types.Optional[types.UUID]",
                    "float",
                    "int",
                    "str",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]"
                ],
                "user": [
                    "None",
                    "types.Optional[types.UUID]",
                    "float",
                    "int",
                    "str",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]"
                ],
                "object": [
                    "None",
                    "types.Optional[types.UUID]",
                    "float",
                    "int",
                    "str",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]"
                ],
                "rubric": [
                    "None",
                    "types.Optional[types.UUID]",
                    "float",
                    "int",
                    "str",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]"
                ],
                "timestamp": [
                    "None",
                    "types.Optional[types.UUID]",
                    "float",
                    "int",
                    "str",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]"
                ],
                "skip": [
                    "None",
                    "types.Optional[types.UUID]",
                    "float",
                    "int",
                    "str",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]"
                ],
                "limit": [
                    "None",
                    "types.Optional[types.UUID]",
                    "float",
                    "int",
                    "str",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]"
                ]
            }
        },
        "FAIRshakeAssessment.post": {
            "name": "post",
            "location": 43,
            "return": [
                "types.HTTPResponse[None]",
                "None"
            ],
            "arguments": {
                "body": [
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Assessment/FAIRshakeAssessment/model.py": {
        "RepositorySQLAlchemyBaseModule.provide_SQLAlchemyBase": {
            "name": "provide_SQLAlchemyBase",
            "location": 36,
            "return": [
                "list[]",
                "str",
                "types.ModuleType",
                "Callable[[], str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FAIRshake-master/app/entities/FAIRshakeWeb/view.py": {
        "get_project_id": {
            "name": "get_project_id",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "repository": [
                    "str",
                    "interfaces.Repository.DigitalObjectModel",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "Dict[str, Any]",
                    "None",
                    "Type['BaseConfig']",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "current_user": {
            "name": "current_user",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "repository": [
                    "interfaces.Repository.RepositoryAPI",
                    "str",
                    "bool"
                ]
            }
        },
        "projects": {
            "name": "projects",
            "location": 52,
            "return": [
                "int",
                "starlette.types.Message"
            ],
            "arguments": {
                "repository": [
                    "interfaces.Repository.RepositoryAPI",
                    "Union[object, type]"
                ]
            }
        },
        "start_project": {
            "name": "start_project",
            "location": 59,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "chrome_extension": {
            "name": "chrome_extension",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "bookmarklet": {
            "name": "bookmarklet",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "resources": {
            "name": "resources",
            "location": 83,
            "return": [
                "str",
                "Union[str, IO]",
                "dict",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "repository": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "dict[int, dict[int, typing.Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[int, Dict[int, Any]]",
                    "Union[Dict, List]"
                ],
                "assessment": [
                    "tuple[]",
                    "exporwiki.types.BiomeZoneVolume",
                    "None",
                    "interfaces.Repository.RepositoryAPI",
                    "str",
                    "Optional[Tuple]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "score": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "Type[T]",
                    "typing.Type"
                ],
                "project": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[int, Dict[int, Any]]",
                    "dict[int, dict[int, typing.Any]]",
                    "Union[Dict, List]",
                    "list[]"
                ]
            }
        },
        "my_evaluations": {
            "name": "my_evaluations",
            "location": 107,
            "return": [
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "repository": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "exporwiki.types.BiomeZoneVolume"
                ],
                "assessment": [
                    "dict",
                    "dict[, ]",
                    "float",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "score": [
                    "dict[, ]",
                    "Optional[Dict]",
                    "bool",
                    "None",
                    "dict",
                    "Optional[bool]"
                ],
                "project": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "exporwiki.types.BiomeZoneVolume"
                ]
            }
        },
        "evaluation": {
            "name": "evaluation",
            "location": 134,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "repository": [
                    "dict[str, collections.abc.AsyncGenerator]",
                    "interfaces.AssessmenAssessmentAPI",
                    "interfaces.Repository.RepositoryAPI",
                    "Dict[str, AsyncGenerator]"
                ],
                "rubric": [
                    "dict[str, collections.abc.AsyncGenerator]",
                    "interfaces.AssessmenAssessmentAPI",
                    "interfaces.Repository.RepositoryAPI",
                    "Dict[str, AsyncGenerator]"
                ],
                "assessment": [
                    "interfaces.AssessmenAssessmentAPI",
                    "interfaces.Repository.RepositoryAPI",
                    "Dict[str, AsyncGenerator]"
                ]
            }
        },
        "evaluated_projects": {
            "name": "evaluated_projects",
            "location": 168,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]",
                "List[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "repository": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "assessment": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 192,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 196,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/app/entities/FAIRshakeWeb/__init__.py": {
        "FAIRshakeWeb.provide_web_app": {
            "name": "provide_web_app",
            "location": 10,
            "return": [
                "\"App\""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FAIRshake-master/app/entities/Repository/mock.py": {
        "MockRepositoryAPI.get": {
            "name": "get",
            "location": 9,
            "return": [
                "DigitalObjectModel",
                "Set[str]",
                "FrozenSet[str]",
                "List[int]",
                "Optional[dict]",
                "List[str]",
                "List[List[int]]"
            ],
            "arguments": {
                "id": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[types.UUID]",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "tags": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[types.UUID]",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "user": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[types.UUID]",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "name": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[types.UUID]",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "url": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[types.UUID]",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "timestamp": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[types.UUID]",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "skip": [
                    "None",
                    "types.Optional[int]",
                    "int",
                    "str",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "limit": [
                    "int",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[int]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]",
                    "str"
                ]
            }
        },
        "MockRepositoryAPI.post": {
            "name": "post",
            "location": 97,
            "return": [
                "HTTPResponse",
                "List[str]",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "body": [
                    "int",
                    "str",
                    "interfaces.Repository.DigitalObjectModel",
                    "None",
                    "typing.Mapping",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Repository/FAIRshakeRepository/api.py": {
        "FAIRshakeRepository.get": {
            "name": "get",
            "location": 17,
            "return": [
                "Optional[str]",
                "exporwiki.types.PrimalEngramEntry",
                "Callable[[], str]",
                "Sequence[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "id": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.List[str]]",
                    "types.Optional[types.Timestamp]"
                ],
                "tags": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.List[str]]",
                    "types.Optional[types.Timestamp]"
                ],
                "user": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.List[str]]",
                    "types.Optional[types.Timestamp]"
                ],
                "name": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.List[str]]",
                    "types.Optional[types.Timestamp]"
                ],
                "url": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.List[str]]",
                    "types.Optional[types.Timestamp]"
                ],
                "timestamp": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.List[str]]",
                    "types.Optional[types.Timestamp]"
                ],
                "skip": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.List[str]]",
                    "types.Optional[types.Timestamp]"
                ],
                "limit": [
                    "None",
                    "str",
                    "types.Optional[str]",
                    "int",
                    "types.Optional[int]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.List[str]]",
                    "types.Optional[types.Timestamp]"
                ]
            }
        },
        "FAIRshakeRepository.post": {
            "name": "post",
            "location": 49,
            "return": [
                "types.HTTPResponse[None]",
                "None"
            ],
            "arguments": {
                "body": [
                    "str",
                    "interfaces.Repository.DigitalObjectModel"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Repository/FAIRshakeRepository/model.py": {
        "RepositorySQLAlchemyBaseModule.provide_SQLAlchemyBase": {
            "name": "provide_SQLAlchemyBase",
            "location": 36,
            "return": [
                "list[]",
                "str",
                "types.ModuleType",
                "Callable[[], str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FAIRshake-master/app/entities/Rubric/mock.py": {
        "MockRubricAPI.get": {
            "name": "get",
            "location": 9,
            "return": [
                "list[RubricModel]",
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "id": [
                    "None",
                    "str",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]"
                ],
                "user": [
                    "None",
                    "str",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]"
                ],
                "object": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "timestamp": [
                    "None",
                    "str",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]"
                ],
                "skip": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "limit": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MockRubricAPI.post": {
            "name": "post",
            "location": 42,
            "return": [
                "HTTPResponse",
                "List[str]",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "body": [
                    "int",
                    "str",
                    "interfaces.Repository.DigitalObjectModel",
                    "None",
                    "typing.Mapping",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Rubric/__init__.py": {},
    "FAIRshake-master/app/entities/Rubric/FAIRshakeRubric/api.py": {
        "FAIRshakeRubric.get": {
            "name": "get",
            "location": 19,
            "return": [
                "bool",
                "str",
                "int",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "id": [
                    "None",
                    "int",
                    "types.Optional[int]",
                    "str",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]"
                ],
                "user": [
                    "None",
                    "int",
                    "types.Optional[int]",
                    "str",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]"
                ],
                "object": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "timestamp": [
                    "None",
                    "int",
                    "types.Optional[int]",
                    "str",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]"
                ],
                "skip": [
                    "None",
                    "int",
                    "types.Optional[int]",
                    "str",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]"
                ],
                "limit": [
                    "None",
                    "int",
                    "types.Optional[int]",
                    "str",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]"
                ]
            }
        },
        "FAIRshakeRubric.post": {
            "name": "post",
            "location": 45,
            "return": [
                "types.HTTPResponse[None]",
                "None"
            ],
            "arguments": {
                "body": [
                    "int"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Rubric/FAIRshakeRubric/model.py": {
        "RepositorySQLAlchemyBaseModule.provide_SQLAlchemyBase": {
            "name": "provide_SQLAlchemyBase",
            "location": 49,
            "return": [
                "list[]",
                "str",
                "types.ModuleType",
                "Callable[[], str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FAIRshake-master/app/entities/Rubric/FAIRshakeRubric/util.py": {
        "answer_value": {
            "name": "answer_value",
            "location": 2,
            "return": [
                "float",
                "int",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Rubric/FAIRshakeRubric/__init__.py": {},
    "FAIRshake-master/app/entities/Runtime/config.py": {
        "ConfigureModule.provide_environment": {
            "name": "provide_environment",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigureModule.provide_cmdline": {
            "name": "provide_cmdline",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigureModule.provide_defaults": {
            "name": "provide_defaults",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigureModule.provide_config": {
            "name": "provide_config",
            "location": 43,
            "return": [
                "bool",
                "List[Dict]",
                "int",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "int",
                    "str",
                    "float",
                    "list[list[int]]",
                    "List[List[int]]",
                    "fklearn.types.ExtractorFnType"
                ],
                "environ": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "bool",
                    "Callable"
                ],
                "defaults": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Runtime/dump.py": {
        "CommandLineDump.run": {
            "name": "run",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/app/entities/Runtime/flask.py": {
        "ConnexionAppModule.provide_app": {
            "name": "provide_app",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "api": [
                    "dict[, ]",
                    "str",
                    "neuromation.api.Config",
                    "dict",
                    "config.Config",
                    "cerise.config.Config"
                ],
                "api_spec": [
                    "Mapping[str, Any]",
                    "str",
                    "typing.Mapping"
                ],
                "config": [
                    "str",
                    "dict",
                    "Optional[int]"
                ],
                "injector": [
                    "str",
                    "injector.Injector",
                    "dict[, ]",
                    "dict"
                ]
            }
        },
        "FlaskAppModule.provide_flask_app": {
            "name": "provide_flask_app",
            "location": 27,
            "return": [
                "dict[, dict[, ]]",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "flask_app": [
                    "dict[, ]",
                    "types.FlaskApp",
                    "types.Config",
                    "dict",
                    "config.Config",
                    "evtstrd.config.Config"
                ],
                "oidc": [
                    "str",
                    "dict",
                    "list"
                ],
                "config": [
                    "types.Config",
                    "types.FlaskApp",
                    "dict",
                    "config.Config"
                ],
                "injector": [
                    "dict[, ]",
                    "injector.Injector",
                    "backup.config.Config",
                    "meier.config.Config",
                    "config.Config",
                    "dict",
                    "homeassistancore.Config"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Runtime/help.py": {
        "CommandLineHelp.run": {
            "name": "run",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/app/entities/Runtime/runtime.py": {
        "AppModule.provide_app": {
            "name": "provide_app",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "apps": [
                    "types.Config",
                    "Dict[str, Any]",
                    "dict"
                ],
                "config": [
                    "types.Config",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Runtime/sqlalchemy.py": {
        "SQLAlchemyModule.provide_SQLAlchemyEngine": {
            "name": "provide_SQLAlchemyEngine",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "dict[, ]",
                    "dict",
                    "list[]",
                    "list",
                    "bool"
                ],
                "config": []
            }
        },
        "SQLAlchemyModule.provide_SQLAlchemy": {
            "name": "provide_SQLAlchemy",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Score/mock.py": {
        "MockScoreAPI.get": {
            "name": "get",
            "location": 9,
            "return": [
                "bool",
                "typing.Text",
                "list[ScoreModel]"
            ],
            "arguments": {
                "object": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "T",
                    "dict"
                ],
                "kind": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Score/__init__.py": {},
    "FAIRshake-master/app/entities/Score/FAIRshakeInsignia/api.py": {
        "answer_value": {
            "name": "answer_value",
            "location": 14,
            "return": [
                "float",
                "int",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "get_or_create": {
            "name": "get_or_create",
            "location": 20,
            "return": [
                "bool",
                "tuple[typing.Union[dict[str, str],dict[, ],bool]]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "model": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]"
                ],
                "defaults": [
                    "None",
                    "Dict[str, object]",
                    "str",
                    "dict[str, object]",
                    "dict",
                    "dict[, ]",
                    "sqlalchemy.orm.session.Session",
                    "Dict[str, Any]"
                ]
            }
        },
        "FAIRshakeInsignia.get": {
            "name": "get",
            "location": 36,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "object": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "types.UUID"
                ],
                "kind": [
                    "str",
                    "None",
                    "apistar.types.WSGIEnviron",
                    "Optional[str]"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Score/FAIRshakeInsignia/model.py": {
        "ScoreSQLAlchemyBaseModule.provide_SQLAlchemyBase": {
            "name": "provide_SQLAlchemyBase",
            "location": 25,
            "return": [
                "list[]",
                "str",
                "types.ModuleType",
                "Callable[[], str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "FAIRshake-master/app/entities/Score/FAIRshakeInsignia/util.py": {
        "nearest_sq": {
            "name": "nearest_sq",
            "location": 3,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "linearize": {
            "name": "linearize",
            "location": 7,
            "return": [
                "float",
                "Dict[str, int]",
                "str",
                "int"
            ],
            "arguments": {
                "x1": [
                    "float",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "y1": [
                    "float",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "x2": [
                    "float",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "y2": [
                    "float",
                    "int",
                    "Tuple[float, float, float, float]"
                ],
                "val": [
                    "float",
                    "int",
                    "Tuple[float, float, float, float]"
                ]
            }
        },
        "build_insignia_svg": {
            "name": "build_insignia_svg",
            "location": 11,
            "return": [
                "",
                "typing.Generator[str]"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "List[int]",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Score/FAIRshakeInsignia/views.py": {
        "register_kind": {
            "name": "register_kind",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "kind": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "application_json": {
            "name": "application_json",
            "location": 12,
            "return": [
                "tuple[typing.Union[int,str,typing.Iterable['Context']]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "text_html": {
            "name": "text_html",
            "location": 19,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "str",
                "float"
            ],
            "arguments": {
                "scores": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "unknown_kind": {
            "name": "unknown_kind",
            "location": 28,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "register_kind.register_kind_decorator": {
            "name": "register_kind_decorator",
            "location": 5,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        }
    },
    "FAIRshake-master/app/entities/Score/FAIRshakeInsignia/__init__.py": {},
    "FAIRshake-master/app/interfaces/Assessment.py": {
        "AssessmentAPI.get": {
            "name": "get",
            "location": 95,
            "return": [
                "types.HTTPResponse[types.List[AssessmentModel]]",
                "None"
            ],
            "arguments": {
                "id": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "user": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "object": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "rubric": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "timestamp": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "skip": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "limit": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "AssessmentAPI.post": {
            "name": "post",
            "location": 157,
            "return": [
                "types.HTTPResponse[None]",
                "None"
            ],
            "arguments": {
                "body": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "typing.Mapping",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "FAIRshake-master/app/interfaces/Repository.py": {
        "RepositoryAPI.get": {
            "name": "get",
            "location": 81,
            "return": [
                "types.HTTPResponse[types.List[DigitalObjectModel]]",
                "None"
            ],
            "arguments": {
                "id": [
                    "None",
                    "types.Optional[int]",
                    "int",
                    "str",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "tags": [
                    "None",
                    "types.Optional[int]",
                    "int",
                    "str",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "user": [
                    "None",
                    "types.Optional[int]",
                    "int",
                    "str",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "name": [
                    "None",
                    "types.Optional[int]",
                    "int",
                    "str",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "url": [
                    "None",
                    "types.Optional[int]",
                    "int",
                    "str",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "timestamp": [
                    "None",
                    "types.Optional[int]",
                    "int",
                    "str",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "skip": [
                    "None",
                    "types.Optional[int]",
                    "int",
                    "str",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ],
                "limit": [
                    "None",
                    "types.Optional[int]",
                    "int",
                    "str",
                    "types.Optional[str]",
                    "types.Optional[types.UUID]",
                    "types.Optional[types.Timestamp]",
                    "types.Optional[types.List[str]]"
                ]
            }
        },
        "RepositoryAPI.post": {
            "name": "post",
            "location": 150,
            "return": [
                "types.HTTPResponse[None]",
                "None"
            ],
            "arguments": {
                "body": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "typing.Mapping",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "FAIRshake-master/app/interfaces/Rubric.py": {
        "RubricAPI.get": {
            "name": "get",
            "location": 110,
            "return": [
                "types.HTTPResponse[types.List[RubricModel]]",
                "None"
            ],
            "arguments": {
                "id": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "user": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "object": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "timestamp": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "skip": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "limit": [
                    "types.Optional[int]",
                    "None",
                    "types.Optional[types.UUID]",
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "RubricAPI.post": {
            "name": "post",
            "location": 164,
            "return": [
                "types.HTTPResponse[None]",
                "None"
            ],
            "arguments": {
                "body": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "typing.Mapping",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "FAIRshake-master/app/interfaces/Score.py": {
        "ScoreAPI.get": {
            "name": "get",
            "location": 61,
            "return": [
                "types.HTTPResponse[types.Any]",
                "None"
            ],
            "arguments": {
                "object": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ],
                "kind": [
                    "bool",
                    "None",
                    "str",
                    "T",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "FAIRshake-master/app/interfaces/__init__.py": {},
    "FAIRshake-master/app/util/annotations.py": {
        "func_to_annotations": {
            "name": "func_to_annotations",
            "location": 7,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "Optional[List[str]]",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "annotations_to_str": {
            "name": "annotations_to_str",
            "location": 15,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "annotations": [
                    "Dict[str, Type]",
                    "Mapping[str, str]",
                    "set",
                    "Optional[Tuple[str, ...]]",
                    "Mapping",
                    "dict"
                ]
            }
        },
        "annotation_subset": {
            "name": "annotation_subset",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "iface": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "impl": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "FAIRshake-master/app/util/bind.py": {
        "bind": {
            "name": "bind",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.IO",
                    "T",
                    "IO[bytes]"
                ]
            }
        },
        "bind.bind_wrapper": {
            "name": "bind_wrapper",
            "location": 4,
            "return": [
                "Tuple[str, str]"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/app/util/command_line_parse.py": {
        "json_with_fallback": {
            "name": "json_with_fallback",
            "location": 11,
            "return": [
                "bool",
                "str",
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "None",
                    "T"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 21,
            "return": [
                "tuple[typing.Union[list[],dict[, ]]]",
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "FAIRshake-master/app/util/deep_getattr.py": {
        "deep_getattr": {
            "name": "deep_getattr",
            "location": 3,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]"
                ],
                "attr": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        }
    },
    "FAIRshake-master/app/util/filter_none_kwargs.py": {
        "filter_none_kwargs": {
            "name": "filter_none_kwargs",
            "location": 1,
            "return": [
                "dict",
                "tuple",
                "List[Mapping[str, str]]",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "__": [
                    "dict[, ]",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "List[str]",
                    "Optional[Union[str, Any, Any, Any]]"
                ]
            }
        }
    },
    "FAIRshake-master/app/util/first_and_only.py": {
        "first": {
            "name": "first",
            "location": 3,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "first_and_only": {
            "name": "first_and_only",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "FAIRshake-master/app/util/generate_spec.py": {
        "yml_to_json": {
            "name": "yml_to_json",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "Set[str]",
                    "int",
                    "dict",
                    "List[Dict]"
                ]
            }
        },
        "json_to_yml": {
            "name": "json_to_yml",
            "location": 25,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "list[]",
                    "list",
                    "list[list[str]]",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "docs_of": {
            "name": "docs_of",
            "location": 30,
            "return": [
                "dict[tuple[typing.Union[str,typing.Any]], ]",
                "Dict[str, Union[str, Any]]",
                "bool"
            ],
            "arguments": {
                "objs": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "generate_spec": {
            "name": "generate_spec",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "objs": [
                    "list[]",
                    "dict",
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "FAIRshake-master/app/util/generate_uuid.py": {
        "generate_uuid": {
            "name": "generate_uuid",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/app/util/importer.py": {
        "walk_directory": {
            "name": "walk_directory",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "parent_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "mod_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "package": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "FAIRshake-master/app/util/mock_api.py": {
        "MockAPISwagger": {
            "name": "MockAPISwagger",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "api": [
                    "str",
                    "Union[bool, str]",
                    "bool"
                ]
            }
        }
    },
    "FAIRshake-master/app/util/module_resolver.py": {
        "RestyResolverEx.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "default_module_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "MutableSequence[str]",
                    "typing.MutableSequence"
                ],
                "collection_endpoint_name": [
                    "typing.Text",
                    "str",
                    "bool",
                    "[str]",
                    "Optional[str]"
                ]
            }
        },
        "RestyResolverEx.resolve_operation_id": {
            "name": "resolve_operation_id",
            "location": 19,
            "return": [
                "str",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "RestyResolverEx.resolve_operation_id_using_rest_semantics": {
            "name": "resolve_operation_id_using_rest_semantics",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "list[dict[, ]]",
                    "str",
                    "List[dict]",
                    "bool",
                    "typing.Callable[[], T]",
                    "Callable[[], T]",
                    "T"
                ]
            }
        },
        "ModuleResolver.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Sequence[typing.Any]",
                    "typing.Mapping"
                ],
                "collection_endpoint_name": [
                    "typing.Text",
                    "Optional[str]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "ModuleResolver.get_function_from_name": {
            "name": "get_function_from_name",
            "location": 79,
            "return": [
                "List[str]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str",
                    "Optional[str]",
                    "typing.Callable[typing.Any, str]",
                    "Callable[[Any], str]"
                ]
            }
        },
        "RestyResolverEx.resolve_operation_id_using_rest_semantics.get_controller_name": {
            "name": "get_controller_name",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "RestyResolverEx.resolve_operation_id_using_rest_semantics.get_function_name": {
            "name": "get_function_name",
            "location": 53,
            "return": [
                "str",
                "type",
                "list",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/app/util/__init__.py": {},
    "FAIRshake-master/tests/test_app.py": {
        "test_app": {
            "name": "test_app",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/tests/__init__.py": {},
    "FAIRshake-master/tests/test_interfaces/test_connexion_flask_injector.py": {
        "test_connexion_inject": {
            "name": "test_connexion_inject",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "SomeInterface.echo": {
            "name": "echo",
            "location": 15,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "typing.AnyStr",
                    "Union[bytes, bytearray]",
                    "bool",
                    "bytes",
                    "str",
                    "Iterable[T]",
                    "bytearray",
                    "typing.Iterable[T]"
                ]
            }
        },
        "SomeInterfaceImpl.echo": {
            "name": "echo",
            "location": 20,
            "return": [
                "str",
                "float",
                "typing.AnyStr",
                "bytes",
                "bytearray",
                "typing.Iterable[T]",
                "bool"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "typing.AnyStr",
                    "Union[bytes, bytearray]",
                    "bool",
                    "bytes",
                    "str",
                    "Iterable[T]",
                    "bytearray",
                    "typing.Iterable[T]"
                ]
            }
        },
        "TestAPIInterface.get": {
            "name": "get",
            "location": 44,
            "return": [
                "app.types.HTTPResponse[builtins.str]",
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "None",
                    "bool",
                    "Set[int]",
                    "set[int]",
                    "Iterable[T]",
                    "Optional[int]"
                ]
            }
        },
        "TestAPI.get": {
            "name": "get",
            "location": 65,
            "return": [
                "str",
                "tuple[int]"
            ],
            "arguments": {
                "impl": [
                    "str",
                    "Pattern"
                ],
                "a": [
                    "str",
                    "None",
                    "Pattern",
                    "typing.Pattern"
                ]
            }
        },
        "ImplModule.provide_some_interface": {
            "name": "provide_some_interface",
            "location": 80,
            "return": [
                "SomeInterfaceImpl",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImplModule.provide_api": {
            "name": "provide_api",
            "location": 85,
            "return": [
                "TestAPI",
                "bool",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoodStatusModule.provide_good_status": {
            "name": "provide_good_status",
            "location": 91,
            "return": [
                "int",
                "bytearray",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskInjectorModule.provide_flask_injected": {
            "name": "provide_flask_injected",
            "location": 98,
            "return": [
                "abilian.app.Application",
                "app.App",
                "app.executor.Application"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "int",
                    "str"
                ],
                "injector": [
                    "injector.Injector",
                    "tuple[]",
                    "bool",
                    "Optional[tuple]",
                    "None"
                ]
            }
        },
        "FlaskInjectorModule.provide_flask_test_client": {
            "name": "provide_flask_test_client",
            "location": 108,
            "return": [
                "Tuple[Callable, Callable]"
            ],
            "arguments": {
                "self": [],
                "flask_app": []
            }
        }
    },
    "FAIRshake-master/tests/test_util/test_annotations.py": {
        "test_func_to_annotations": {
            "name": "test_func_to_annotations",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_func_partial_annotations": {
            "name": "test_func_partial_annotations",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_annotations_to_str": {
            "name": "test_annotations_to_str",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_annotation_subset": {
            "name": "test_annotation_subset",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_func_to_annotations.test_func": {
            "name": "test_func",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_func_partial_annotations.test_func": {
            "name": "test_func",
            "location": 15,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "float",
                    "int"
                ],
                "b": [
                    "str",
                    "float",
                    "int"
                ],
                "c": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "test_annotation_subset.test_func_iface": {
            "name": "test_func_iface",
            "location": 40,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "float",
                    "int"
                ],
                "b": [
                    "str",
                    "float",
                    "int"
                ],
                "c": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "test_annotation_subset.test_func_impl": {
            "name": "test_func_impl",
            "location": 43,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "b": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "c": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "d": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ]
            }
        },
        "test_annotation_subset.test_func_bad_impl": {
            "name": "test_func_bad_impl",
            "location": 46,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "b": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "c": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ],
                "d": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ]
            }
        }
    },
    "FAIRshake-master/tests/test_util/test_bind.py": {
        "test_bind": {
            "name": "test_bind",
            "location": 3,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_bind.test_func": {
            "name": "test_func",
            "location": 4,
            "return": [
                "bool",
                "Sequence[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/tests/test_util/test_command_line_parse.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/tests/test_util/test_filter_none_kwargs.py": {
        "test_filter_none_kwargs": {
            "name": "test_filter_none_kwargs",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/tests/test_util/test_first_and_only.py": {
        "test_first": {
            "name": "test_first",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_first_and_only": {
            "name": "test_first_and_only",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/tests/test_util/test_generate_spec.py": {
        "test_generate_spec": {
            "name": "test_generate_spec",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_spec.T.k": {
            "name": "k",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_spec.T.l.j": {
            "name": "j",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/tests/test_util/test_importer.py": {
        "test_walk_directory": {
            "name": "test_walk_directory",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "FAIRshake-master/tests/test_util/test_module_resolver.py": {
        "test_module_resolver": {
            "name": "test_module_resolver",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestAPI.get": {
            "name": "get",
            "location": 22,
            "return": [
                "tuple[typing.Union[str,bool,set[int],None]]",
                "str",
                "int"
            ],
            "arguments": {
                "a": [
                    "str",
                    "bool",
                    "set[int]",
                    "Set[int]",
                    "None",
                    "Iterable[T]",
                    "Optional[int]"
                ]
            }
        },
        "TestAPI.test.post": {
            "name": "post",
            "location": 41,
            "return": [
                "Tuple[int, int]",
                "tuple[int]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "Sequence[Union[str, int]]",
                    "List[str]",
                    "Iterable[T]",
                    "bool"
                ]
            }
        }
    },
    "FAIRshake-master/tests/test_util/__init__.py": {},
    "FAIRshake-master/tests/test_util/test_importer/a.py": {},
    "FAIRshake-master/tests/test_util/test_importer/b.py": {},
    "FAIRshake-master/tests/test_util/test_importer/__init__.py": {}
}
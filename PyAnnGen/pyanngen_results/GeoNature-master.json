{
    "GeoNature-master/setup.py": {},
    "GeoNature-master/backend/geonature/app.py": {
        "configure_alembic": {
            "name": "configure_alembic",
            "location": 33,
            "return": [],
            "arguments": {
                "alembic_config": []
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 68,
            "return": [
                "Flask"
            ],
            "arguments": {
                "with_external_mods": [
                    "bool"
                ]
            }
        },
        "MyJSONEncoder.default": {
            "name": "default",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "create_app.on_before_models_committed": {
            "name": "on_before_models_committed",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "changes": []
            }
        },
        "create_app.load_current_user": {
            "name": "load_current_user",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/__init__.py": {},
    "GeoNature-master/backend/geonature/core/errors.py": {
        "handle_unauthenticated_request": {
            "name": "handle_unauthenticated_request",
            "location": 12,
            "return": [
                "Optional[Any]",
                "Tuple[str, int, Dict[str, str]]"
            ],
            "arguments": {
                "e": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "Dict[KT, VT]"
                ]
            }
        },
        "handle_http_exception": {
            "name": "handle_http_exception",
            "location": 36,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]",
                "str",
                "Sequence"
            ],
            "arguments": {
                "e": [
                    "Union[Dict, Tuple]",
                    "Match",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "handle_internal_server_error": {
            "name": "handle_internal_server_error",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "Sequence",
                "Callable",
                "str",
                "dict"
            ],
            "arguments": {
                "e": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 70,
            "return": [],
            "arguments": {
                "e": [
                    "str",
                    "Optional[str]",
                    "Match[str]",
                    "Iterable[str]",
                    "int"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/routes.py": {
        "get_config": {
            "name": "get_config",
            "location": 24,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/core/utils.py": {
        "ModelCruvedAutorization.user_is_observer_or_digitiser": {
            "name": "user_is_observer_or_digitiser",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ModelCruvedAutorization.user_is_in_dataset_actor": {
            "name": "user_is_in_dataset_actor",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ModelCruvedAutorization.user_is_allowed_to": {
            "name": "user_is_allowed_to",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "level": []
            }
        },
        "ModelCruvedAutorization.check_if_allowed": {
            "name": "check_if_allowed",
            "location": 60,
            "return": [
                "ModelCruvedAutorization"
            ],
            "arguments": {
                "self": [],
                "info_role": [],
                "action": [],
                "level_scope": []
            }
        },
        "ModelCruvedAutorization.get_model_cruved": {
            "name": "get_model_cruved",
            "location": 79,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "user_cruved": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/__init__.py": {},
    "GeoNature-master/backend/geonature/core/admin/admin.py": {
        "MyHomeView.is_accessible": {
            "name": "is_accessible",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CruvedProtectedMixin.is_accessible": {
            "name": "is_accessible",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CruvedProtectedMixin._can_action": {
            "name": "_can_action",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "CruvedProtectedMixin.can_create": {
            "name": "can_create",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CruvedProtectedMixin.can_edit": {
            "name": "can_edit",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CruvedProtectedMixin.can_delete": {
            "name": "can_delete",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CruvedProtectedMixin.can_export": {
            "name": "can_export",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/admin/__init__.py": {},
    "GeoNature-master/backend/geonature/core/auth/routes.py": {
        "loginCas": {
            "name": "loginCas",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "logout_cruved": {
            "name": "logout_cruved",
            "location": 115,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "get_user_from_id_inpn_ws": {
            "name": "get_user_from_id_inpn_ws",
            "location": 129,
            "return": [],
            "arguments": {
                "id_user": []
            }
        },
        "insert_user_and_org": {
            "name": "insert_user_and_org",
            "location": 143,
            "return": [],
            "arguments": {
                "info_user": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/auth/__init__.py": {},
    "GeoNature-master/backend/geonature/core/command/create_gn_module.py": {
        "install_packaged_gn_module": {
            "name": "install_packaged_gn_module",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "module_path": [],
                "module_code": [],
                "build": []
            }
        },
        "install_gn_module": {
            "name": "install_gn_module",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "module_path": [],
                "url": [],
                "conf_file": [],
                "build": [],
                "enable_backend": []
            }
        },
        "run_install_gn_module": {
            "name": "run_install_gn_module",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "module_path": []
            }
        },
        "activate_gn_module": {
            "name": "activate_gn_module",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "module_code": [],
                "frontend": [],
                "backend": []
            }
        },
        "deactivate_gn_module": {
            "name": "deactivate_gn_module",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "module_code": [],
                "frontend": [],
                "backend": []
            }
        },
        "update_module_configuration": {
            "name": "update_module_configuration",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "module_code": [],
                "build": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/command/main.py": {
        "normalize": {
            "name": "normalize",
            "location": 43,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "generate_frontend_config": {
            "name": "generate_frontend_config",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "build": []
            }
        },
        "dev_back": {
            "name": "dev_back",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "host": [],
                "port": []
            }
        },
        "dev_front": {
            "name": "dev_front",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "frontend_build": {
            "name": "frontend_build",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "build_sass": []
            }
        },
        "generate_frontend_modules_route": {
            "name": "generate_frontend_modules_route",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_frontend_tsconfig": {
            "name": "generate_frontend_tsconfig",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_frontend_tsconfig_app": {
            "name": "generate_frontend_tsconfig_app",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_configuration": {
            "name": "update_configuration",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "build": []
            }
        },
        "import_jdd_from_mtd": {
            "name": "import_jdd_from_mtd",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "table_name": []
            }
        },
        "autoupgrade": {
            "name": "autoupgrade",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [],
                "sql": [],
                "tag": [],
                "x_arg": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/command/__init__.py": {},
    "GeoNature-master/backend/geonature/core/command/__main__.py": {},
    "GeoNature-master/backend/geonature/core/gn_commons/admin.py": {},
    "GeoNature-master/backend/geonature/core/gn_commons/file_manager.py": {
        "remove_dir": {
            "name": "remove_dir",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "dirpath": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "remove_file": {
            "name": "remove_file",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "rename_file": {
            "name": "rename_file",
            "location": 35,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "old_path": [
                    "str"
                ],
                "new_path": [
                    "str"
                ]
            }
        },
        "upload_file": {
            "name": "upload_file",
            "location": 43,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "file": [
                    "str",
                    "BinaryIO"
                ],
                "file_folder": [
                    "str",
                    "Tuple[pathlib.Path]"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "removeDisallowedFilenameChars": {
            "name": "removeDisallowedFilenameChars",
            "location": 65,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "uncleanString": [
                    "str"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_commons/repositories.py": {
        "get_table_location_id": {
            "name": "get_table_location_id",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_name": [],
                "table_name": []
            }
        },
        "TMediaRepository.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None"
                ],
                "file": [
                    "None"
                ],
                "id_media": [
                    "None"
                ]
            }
        },
        "TMediaRepository.create_or_update_media": {
            "name": "create_or_update_media",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository._persist_media_db": {
            "name": "_persist_media_db",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.absolute_file_path": {
            "name": "absolute_file_path",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "thumbnail_height": [
                    "None"
                ]
            }
        },
        "TMediaRepository.test_video_link": {
            "name": "test_video_link",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.test_header_content_type": {
            "name": "test_header_content_type",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "content_type": []
            }
        },
        "TMediaRepository.test_url": {
            "name": "test_url",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.file_path": {
            "name": "file_path",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "thumbnail_height": [
                    "None"
                ]
            }
        },
        "TMediaRepository.upload_file": {
            "name": "upload_file",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.is_img": {
            "name": "is_img",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.media_type": {
            "name": "media_type",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.get_image": {
            "name": "get_image",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.get_image_with_exp": {
            "name": "get_image_with_exp",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.has_thumbnails": {
            "name": "has_thumbnails",
            "location": 278,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.has_thumbnail": {
            "name": "has_thumbnail",
            "location": 288,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "TMediaRepository.create_thumbnails": {
            "name": "create_thumbnails",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository.create_thumbnail": {
            "name": "create_thumbnail",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "image": []
            }
        },
        "TMediaRepository.get_thumbnail_url": {
            "name": "get_thumbnail_url",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "TMediaRepository.delete": {
            "name": "delete",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMediaRepository._load_from_id": {
            "name": "_load_from_id",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "id_media": []
            }
        },
        "TMediumRepository.get_medium_for_entity": {
            "name": "get_medium_for_entity",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "entity_uuid": []
            }
        },
        "TMediumRepository.sync_medias": {
            "name": "sync_medias",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/core/gn_commons/routes.py": {
        "get_modules": {
            "name": "get_modules",
            "location": 39,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "get_module": {
            "name": "get_module",
            "location": 90,
            "return": [],
            "arguments": {
                "module_code": []
            }
        },
        "get_parameters_list": {
            "name": "get_parameters_list",
            "location": 97,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_one_parameter": {
            "name": "get_one_parameter",
            "location": 112,
            "return": [
                "list"
            ],
            "arguments": {
                "param_name": [],
                "id_org": [
                    "None"
                ]
            }
        },
        "get_additional_fields": {
            "name": "get_additional_fields",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "get_t_mobile_apps": {
            "name": "get_t_mobile_apps",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "api_get_id_table_location": {
            "name": "api_get_id_table_location",
            "location": 232,
            "return": [],
            "arguments": {
                "schema_dot_table": []
            }
        },
        "list_places": {
            "name": "list_places",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "add_place": {
            "name": "add_place",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "delete_place": {
            "name": "delete_place",
            "location": 278,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "id_place": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_commons/schemas.py": {
        "MediaSchema.make_media": {
            "name": "make_media",
            "location": 38,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_commons/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_commons/medias/routes.py": {
        "get_medias": {
            "name": "get_medias",
            "location": 27,
            "return": [
                "list"
            ],
            "arguments": {
                "uuid_attached_row": []
            }
        },
        "get_media": {
            "name": "get_media",
            "location": 40,
            "return": [],
            "arguments": {
                "id_media": []
            }
        },
        "insert_or_update_media": {
            "name": "insert_or_update_media",
            "location": 54,
            "return": [
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "id_media": [
                    "None"
                ]
            }
        },
        "delete_media": {
            "name": "delete_media",
            "location": 104,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "id_media": []
            }
        },
        "get_media_thumb": {
            "name": "get_media_thumb",
            "location": 119,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[typing.Union[dict[typing.Text, str],int]]"
            ],
            "arguments": {
                "id_media": [],
                "size": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_commons/medias/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_commons/models/additional_fields.py": {
        "TAdditionalFields.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_commons/models/base.py": {
        "_resolve_import_cor_object_module": {
            "name": "_resolve_import_cor_object_module",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "TModules.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TMedias.__before_commit_delete__": {
            "name": "__before_commit_delete__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMedias.remove_file": {
            "name": "remove_file",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMedias.remove_thumbnails": {
            "name": "remove_thumbnails",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BibWidgets.__str__": {
            "name": "__str__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_commons/models/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_commons/validation/routes.py": {
        "get_hist": {
            "name": "get_hist",
            "location": 21,
            "return": [
                "Tuple[Union[Text,int]]",
                "Dict",
                "List[dict[Text,str]]",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "uuid_attached_row": [
                    "bool",
                    "str",
                    "int",
                    "zerver.models.Stream",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_commons/validation/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_meta/models.py": {
        "FilterMixin.compute_filter": {
            "name": "compute_filter",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CorAcquisitionFrameworkActor.get_actor": {
            "name": "get_actor",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "id_acquisition_framework": [],
                "id_nomenclature_actor_role": [],
                "id_role": [
                    "None"
                ],
                "id_organism": [
                    "None"
                ]
            }
        },
        "CorDatasetActor.actor": {
            "name": "actor",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CorDatasetActor.display": {
            "name": "display",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorDatasetActor.get_actor": {
            "name": "get_actor",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "id_dataset": [],
                "id_nomenclature_actor_role": [],
                "id_role": [
                    "None"
                ],
                "id_organism": [
                    "None"
                ]
            }
        },
        "CruvedMixin.get_object_cruved": {
            "name": "get_object_cruved",
            "location": 283,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "user_cruved": []
            }
        },
        "TDatasetsQuery._get_read_scope": {
            "name": "_get_read_scope",
            "location": 318,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "None"
                ]
            }
        },
        "TDatasetsQuery._get_create_scope": {
            "name": "_get_create_scope",
            "location": 327,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "module_code": [],
                "user": [
                    "None"
                ]
            }
        },
        "TDatasetsQuery.filter_by_scope": {
            "name": "filter_by_scope",
            "location": 336,
            "return": [
                "TDatasetsQuery"
            ],
            "arguments": {
                "self": [],
                "scope": [],
                "user": [
                    "None"
                ]
            }
        },
        "TDatasetsQuery.filter_by_params": {
            "name": "filter_by_params",
            "location": 352,
            "return": [
                "TDatasetsQuery"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict"
                ]
            }
        },
        "TDatasetsQuery.filter_by_readable": {
            "name": "filter_by_readable",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "None"
                ]
            }
        },
        "TDatasetsQuery.filter_by_creatable": {
            "name": "filter_by_creatable",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "module_code": [],
                "user": [
                    "None"
                ]
            }
        },
        "TDatasets.user_actors": {
            "name": "user_actors",
            "location": 523,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TDatasets.organism_actors": {
            "name": "organism_actors",
            "location": 527,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TDatasets.is_deletable": {
            "name": "is_deletable",
            "location": 530,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TDatasets.has_instance_permission": {
            "name": "has_instance_permission",
            "location": 533,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scope": [],
                "_through_af": [
                    "bool"
                ]
            }
        },
        "TDatasets.__str__": {
            "name": "__str__",
            "location": 548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TDatasets.get_id": {
            "name": "get_id",
            "location": 552,
            "return": [],
            "arguments": {
                "uuid_dataset": []
            }
        },
        "TDatasets.get_uuid": {
            "name": "get_uuid",
            "location": 563,
            "return": [],
            "arguments": {
                "id_dataset": []
            }
        },
        "TDatasets.compute_filter": {
            "name": "compute_filter",
            "location": 574,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TAcquisitionFrameworkQuery._get_read_scope": {
            "name": "_get_read_scope",
            "location": 592,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAcquisitionFrameworkQuery.filter_by_scope": {
            "name": "filter_by_scope",
            "location": 599,
            "return": [
                "TAcquisitionFrameworkQuery"
            ],
            "arguments": {
                "self": [],
                "scope": [],
                "user": [
                    "None"
                ]
            }
        },
        "TAcquisitionFrameworkQuery.filter_by_readable": {
            "name": "filter_by_readable",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TAcquisitionFrameworkQuery.filter_by_params": {
            "name": "filter_by_params",
            "location": 632,
            "return": [],
            "arguments": {
                "self": [],
                "params": [
                    "dict"
                ]
            }
        },
        "TAcquisitionFramework.user_actors": {
            "name": "user_actors",
            "location": 760,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAcquisitionFramework.organism_actors": {
            "name": "organism_actors",
            "location": 764,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAcquisitionFramework.is_deletable": {
            "name": "is_deletable",
            "location": 767,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TAcquisitionFramework.has_instance_permission": {
            "name": "has_instance_permission",
            "location": 774,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scope": [],
                "_through_ds": [
                    "bool"
                ]
            }
        },
        "TAcquisitionFramework.get_id": {
            "name": "get_id",
            "location": 788,
            "return": [],
            "arguments": {
                "uuid_af": []
            }
        },
        "TAcquisitionFramework.get_user_af": {
            "name": "get_user_af",
            "location": 803,
            "return": [
                "list"
            ],
            "arguments": {
                "user": [],
                "only_query": [
                    "bool"
                ],
                "only_user": [
                    "bool"
                ]
            }
        },
        "TAcquisitionFramework.compute_filter": {
            "name": "compute_filter",
            "location": 837,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_meta/repositories.py": {
        "cruved_filter": {
            "name": "cruved_filter",
            "location": 37,
            "return": [
                "str",
                "dict",
                "purplship.core.models.TrackingRequest",
                "bytes"
            ],
            "arguments": {
                "q": [
                    "List[dict]",
                    "str"
                ],
                "model": [
                    "search_service.models.search_resulSearchResult",
                    "zerver.models.UserProfile",
                    "daylighdb.models.User",
                    "Dict[str, Any]",
                    "app.model.User",
                    "abilian.core.models.subjects.User",
                    "models.user.User",
                    "pykechain.models.sidebar.sidebar_button.SideBarButton"
                ],
                "info_role": [
                    "zerver.models.UserProfile",
                    "zerver.models.Message",
                    "str",
                    "supersemodels.core.Database"
                ]
            }
        },
        "cruved_ds_filter": {
            "name": "cruved_ds_filter",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "model": [
                    "Optional[Any]",
                    "Sequence[Any]",
                    "List[str]",
                    "Optional[Callable[[Type, Dict], Any]]"
                ],
                "info_role": [
                    "Type",
                    "raiden.utils.Any",
                    "core.D.Event"
                ]
            }
        },
        "cruved_af_filter": {
            "name": "cruved_af_filter",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "model": [
                    "Type",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "contenusers.User"
                ],
                "info_role": [
                    "contenusers.User",
                    "Type",
                    "esm.models.service_type.ServiceType",
                    "app.models.User"
                ]
            }
        },
        "get_metadata_list": {
            "name": "get_metadata_list",
            "location": 100,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "db.models.Taxon"
            ],
            "arguments": {
                "info_role": [
                    "str",
                    "grouper.models.group.Group",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "float",
                    "Optional[dict]"
                ],
                "args": [],
                "exclude_cols": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_meta/routes.py": {
        "get_datasets": {
            "name": "get_datasets",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "get_af_from_id": {
            "name": "get_af_from_id",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "id_af": [],
                "af_list": []
            }
        },
        "get_dataset": {
            "name": "get_dataset",
            "location": 143,
            "return": [],
            "arguments": {
                "info_role": [],
                "id_dataset": []
            }
        },
        "upload_canvas": {
            "name": "upload_canvas",
            "location": 189,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "delete_dataset": {
            "name": "delete_dataset",
            "location": 205,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "info_role": [],
                "ds_id": []
            }
        },
        "uuid_report": {
            "name": "uuid_report",
            "location": 225,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "sensi_report": {
            "name": "sensi_report",
            "location": 282,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "my_csv_resp": {
            "name": "my_csv_resp",
            "location": 407,
            "return": [
                "Response"
            ],
            "arguments": {
                "filename": [],
                "data": [],
                "columns": [],
                "_header": [],
                "separator": [
                    "typing.Text"
                ]
            }
        },
        "update_sensitivity": {
            "name": "update_sensitivity",
            "location": 418,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "info_role": []
            }
        },
        "update_sensitivity_query": {
            "name": "update_sensitivity_query",
            "location": 479,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "id_syntheses": []
            }
        },
        "datasetHandler": {
            "name": "datasetHandler",
            "location": 499,
            "return": [],
            "arguments": {
                "dataset": [],
                "data": []
            }
        },
        "create_dataset": {
            "name": "create_dataset",
            "location": 516,
            "return": [],
            "arguments": {}
        },
        "update_dataset": {
            "name": "update_dataset",
            "location": 528,
            "return": [],
            "arguments": {
                "id_dataset": [],
                "info_role": []
            }
        },
        "get_export_pdf_dataset": {
            "name": "get_export_pdf_dataset",
            "location": 545,
            "return": [],
            "arguments": {
                "id_dataset": [],
                "info_role": []
            }
        },
        "get_acquisition_frameworks": {
            "name": "get_acquisition_frameworks",
            "location": 599,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "get_acquisition_frameworks_list": {
            "name": "get_acquisition_frameworks_list",
            "location": 669,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "get_export_pdf_acquisition_frameworks": {
            "name": "get_export_pdf_acquisition_frameworks",
            "location": 717,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "id_acquisition_framework": [],
                "info_role": []
            }
        },
        "get_acquisition_framework": {
            "name": "get_acquisition_framework",
            "location": 826,
            "return": [],
            "arguments": {
                "info_role": [],
                "id_acquisition_framework": []
            }
        },
        "delete_acquisition_framework": {
            "name": "delete_acquisition_framework",
            "location": 876,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "info_role": [],
                "af_id": []
            }
        },
        "acquisitionFrameworkHandler": {
            "name": "acquisitionFrameworkHandler",
            "location": 893,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "create_acquisition_framework": {
            "name": "create_acquisition_framework",
            "location": 928,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "updateAcquisitionFramework": {
            "name": "updateAcquisitionFramework",
            "location": 943,
            "return": [],
            "arguments": {
                "id_acquisition_framework": [],
                "info_role": []
            }
        },
        "get_acquisition_framework_stats": {
            "name": "get_acquisition_framework_stats",
            "location": 959,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "info_role": [],
                "id_acquisition_framework": []
            }
        },
        "get_acquisition_framework_bbox": {
            "name": "get_acquisition_framework_bbox",
            "location": 1008,
            "return": [
                "None"
            ],
            "arguments": {
                "info_role": [],
                "id_acquisition_framework": []
            }
        },
        "publish_acquisition_framework_mail": {
            "name": "publish_acquisition_framework_mail",
            "location": 1025,
            "return": [
                "None"
            ],
            "arguments": {
                "af": [],
                "info_role": []
            }
        },
        "publish_acquisition_framework": {
            "name": "publish_acquisition_framework",
            "location": 1095,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "info_role": [],
                "af_id": []
            }
        },
        "get_cd_nomenclature": {
            "name": "get_cd_nomenclature",
            "location": 1132,
            "return": [
                "None"
            ],
            "arguments": {
                "id_type": [],
                "cd_nomenclature": []
            }
        },
        "mtd_sync": {
            "name": "mtd_sync",
            "location": 1143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "synchronize_mtd": {
            "name": "synchronize_mtd",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_sensitivity.update_sensitivity_task": {
            "name": "update_sensitivity_task",
            "location": 462,
            "return": [],
            "arguments": {
                "id_syntheses": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_meta/schemas.py": {
        "CruvedSchemaMixin.get_user_cruved": {
            "name": "get_user_cruved",
            "location": 22,
            "return": [
                "None",
                "str",
                "daylighdb.models.Profile"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "float",
                    "salon.models.Stylist",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
                ]
            }
        },
        "DatasetActorSchema.make_dataset_actor": {
            "name": "make_dataset_actor",
            "location": 38,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BibliographicReferenceSchema.make_biblio_ref": {
            "name": "make_biblio_ref",
            "location": 87,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AcquisitionFrameworkActorSchema.make_af_actor": {
            "name": "make_af_actor",
            "location": 105,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_meta/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_meta/mtd/mtd_utils.py": {
        "create_cor_object_actors": {
            "name": "create_cor_object_actors",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "actors": [],
                "new_object": []
            }
        },
        "post_acquisition_framework": {
            "name": "post_acquisition_framework",
            "location": 130,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "uuid": [
                    "None"
                ]
            }
        },
        "add_dataset_module": {
            "name": "add_dataset_module",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": []
            }
        },
        "post_jdd_from_user": {
            "name": "post_jdd_from_user",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "id_user": [
                    "None"
                ]
            }
        },
        "import_all_dataset_af_and_actors": {
            "name": "import_all_dataset_af_and_actors",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "table_name": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_meta/mtd/mtd_webservice.py": {
        "get_acquisition_framework": {
            "name": "get_acquisition_framework",
            "location": 8,
            "return": [
                "int",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "uuid_af": [
                    "str",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "get_jdd_by_user_id": {
            "name": "get_jdd_by_user_id",
            "location": 27,
            "return": [
                "bool",
                "str",
                "Optional[List[str]]",
                "List[float]"
            ],
            "arguments": {
                "id_user": [
                    "str"
                ]
            }
        },
        "get_jdd_by_uuid": {
            "name": "get_jdd_by_uuid",
            "location": 44,
            "return": [
                "int",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "uuid": [
                    "str"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_meta/mtd/xml_parser.py": {
        "get_tag_content": {
            "name": "get_tag_content",
            "location": 16,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "zerver.models.DefaultStreamGroup"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "tag_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "default_value": [
                    "None",
                    "str",
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "parse_actors_xml": {
            "name": "parse_actors_xml",
            "location": 34,
            "return": [
                "List[dict[Text,]]",
                "str",
                "List[Dict]",
                "Optional[Type]",
                "List[int]",
                "List[str]"
            ],
            "arguments": {
                "actors": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "parse_acquisition_framwork_xml": {
            "name": "parse_acquisition_framwork_xml",
            "location": 64,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "xml": [
                    "str"
                ]
            }
        },
        "parse_acquisition_framework": {
            "name": "parse_acquisition_framework",
            "location": 75,
            "return": [
                "Dict[Text,Union[None,list]]",
                "Tuple[int,int]",
                "List[str]",
                "bytes",
                "List[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "ca": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "parse_jdd_xml": {
            "name": "parse_jdd_xml",
            "location": 121,
            "return": [
                "str",
                "List[Dict]",
                "Optional[Type]",
                "List[int]",
                "List[str]"
            ],
            "arguments": {
                "xml": [
                    "str"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_meta/mtd/__init__.py": {
        "add_unexisting_digitizer": {
            "name": "add_unexisting_digitizer",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "id_digitizer": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "add_or_update_organism": {
            "name": "add_or_update_organism",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "bool"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]"
                ],
                "nom": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]"
                ],
                "email": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]"
                ]
            }
        },
        "associate_actors": {
            "name": "associate_actors",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "actors": [
                    "bool",
                    "Union[bool, Iterable[str]]",
                    "Iterable[int]",
                    "Optional[Callable[[], None]]",
                    "list",
                    "Union[Callable, str]",
                    "core.DEPENDENCIES_TYPE"
                ],
                "CorActor": [
                    "bool"
                ],
                "pk_name": [
                    "bool"
                ],
                "pk_value": [
                    "bool"
                ]
            }
        },
        "sync_af_and_ds": {
            "name": "sync_af_and_ds",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MTDInstanceApi.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_endpoint": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "instance_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "MTDInstanceApi._get_xml": {
            "name": "_get_xml",
            "location": 29,
            "return": [
                "str",
                "dict",
                "Optional[List[str]]",
                "tartare.core.models.Job",
                "int",
                "Optional[dict]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "MTDInstanceApi._get_af_xml": {
            "name": "_get_af_xml",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MTDInstanceApi.get_af_list": {
            "name": "get_af_list",
            "location": 39,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MTDInstanceApi._get_ds_xml": {
            "name": "_get_ds_xml",
            "location": 48,
            "return": [
                "str",
                "Sequence[str]",
                "Optional[str]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "MTDInstanceApi.get_ds_list": {
            "name": "get_ds_list",
            "location": 51,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "INPNCAS._get_user_json": {
            "name": "_get_user_json",
            "location": 63,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "INPNCAS.get_user": {
            "name": "get_user",
            "location": 70,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "zerver.models.UserProfile",
                "bool",
                "asgard.models.user.User",
                "daylighdb.models.User"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "transfer.models.ArticleID",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session"
                ],
                "user_id": [
                    "int",
                    "transfer.models.ArticleID",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_monitoring/config_manager.py": {
        "generate_config": {
            "name": "generate_config",
            "location": 21,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "find_field_config": {
            "name": "find_field_config",
            "location": 34,
            "return": [
                "dict"
            ],
            "arguments": {
                "config_data": []
            }
        },
        "parse_field": {
            "name": "parse_field",
            "location": 58,
            "return": [],
            "arguments": {
                "fieldlist": []
            }
        },
        "get_app_id": {
            "name": "get_app_id",
            "location": 98,
            "return": [],
            "arguments": {
                "module_code": []
            }
        },
        "format_nomenclature_list": {
            "name": "format_nomenclature_list",
            "location": 115,
            "return": [],
            "arguments": {
                "params": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_monitoring/models.py": {
        "TBaseSites.get_geofeature": {
            "name": "get_geofeature",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "recursif": [
                    "bool"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_monitoring/routes.py": {
        "get_list_sites": {
            "name": "get_list_sites",
            "location": 18,
            "return": [
                "str",
                "List"
            ],
            "arguments": {}
        },
        "get_onelist_site": {
            "name": "get_onelist_site",
            "location": 57,
            "return": [
                "Dict[Text,]",
                "str",
                "bool",
                "Optional[str]",
                "Dict[str,tonga.models.structs.positioning.BasePositioning]",
                "djmoney.contrib.exchange.models.Rate"
            ],
            "arguments": {
                "id_site": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "get_site_areas": {
            "name": "get_site_areas",
            "location": 75,
            "return": [
                "FeatureCollection",
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "id_site": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "transfer.models.Channel.ID"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_monitoring/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_permissions/decorators.py": {
        "login_required": {
            "name": "login_required",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "view_func": [
                    "Callable",
                    "Callable[..., Dict]",
                    "bool"
                ]
            }
        },
        "check_cruved_scope": {
            "name": "check_cruved_scope",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "action": [
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "get_role": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "module_code": [
                    "None",
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "object_code": [
                    "None",
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "redirect_on_expiration": [
                    "None",
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "redirect_on_invalid_token": [
                    "None",
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "get_scope": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "login_required.decorated_view": {
            "name": "decorated_view",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "check_cruved_scope._check_cruved_scope": {
            "name": "_check_cruved_scope",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "check_cruved_scope._check_cruved_scope.__check_cruved_scope": {
            "name": "__check_cruved_scope",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/core/gn_permissions/models.py": {
        "VUsersPermissions.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "str",
                "float",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TObjects.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [
                "Text",
                "str",
                "zerver.models.Realm",
                "float",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorRoleActionFilterModuleObject.is_permission_already_exist": {
            "name": "is_permission_already_exist",
            "location": 135,
            "return": [
                "str",
                "Callable[..., None]",
                "Callable",
                "Union[str, None]"
            ],
            "arguments": {
                "self": [],
                "id_role": [
                    "List[int]",
                    "str",
                    "Dict[int, int]",
                    "list",
                    "bool",
                    "List['cirq.Circuit']",
                    "Optional[int]"
                ],
                "id_action": [
                    "List[int]",
                    "str",
                    "Dict[int, int]",
                    "list",
                    "bool",
                    "List['cirq.Circuit']",
                    "Optional[int]"
                ],
                "id_module": [
                    "List[int]",
                    "str",
                    "Dict[int, int]",
                    "list",
                    "bool",
                    "List['cirq.Circuit']",
                    "Optional[int]"
                ],
                "id_filter_type": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "transfer.models.CategoryID",
                    "Dict[bytes, int]",
                    "bool",
                    "str"
                ],
                "id_object": [
                    "int",
                    "List[int]",
                    "str",
                    "Dict[int,int]",
                    "List",
                    "bool",
                    "List[cirq.Circuit]",
                    "Optional[int]"
                ]
            }
        },
        "CorRoleActionFilterModuleObject.__str__": {
            "name": "__str__",
            "location": 158,
            "return": [
                "Text",
                "str",
                "zerver.models.Realm",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_permissions/routes.py": {
        "get_cruved": {
            "name": "get_cruved",
            "location": 24,
            "return": [
                "Dict",
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "info_role": [
                    "users.models.JustfixUser",
                    "Mapping",
                    "models.LTI1p3Provider",
                    "ultron8.api.models.user.UserCreate",
                    "models.User"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 77,
            "return": [
                "Response",
                "bytes",
                "Dict",
                "flask.Response"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/core/gn_permissions/tools.py": {
        "user_from_token": {
            "name": "user_from_token",
            "location": 29,
            "return": [],
            "arguments": {
                "token": [],
                "secret_key": [
                    "None"
                ]
            }
        },
        "log_expiration_warning": {
            "name": "log_expiration_warning",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_user_from_token_and_raise": {
            "name": "get_user_from_token_and_raise",
            "location": 50,
            "return": [],
            "arguments": {
                "request": [],
                "secret_key": [
                    "None"
                ],
                "redirect_on_expiration": [
                    "None"
                ],
                "redirect_on_invalid_token": [
                    "None"
                ]
            }
        },
        "get_user_permissions": {
            "name": "get_user_permissions",
            "location": 282,
            "return": [],
            "arguments": {
                "user": [],
                "code_filter_type": [],
                "code_action": [
                    "None"
                ],
                "module_code": [
                    "None"
                ],
                "code_object": [
                    "None"
                ]
            }
        },
        "beautifulize_cruved": {
            "name": "beautifulize_cruved",
            "location": 332,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "actions": [],
                "cruved": []
            }
        },
        "cruved_scope_for_user_in_module": {
            "name": "cruved_scope_for_user_in_module",
            "location": 350,
            "return": [
                "tuple[tuple]"
            ],
            "arguments": {
                "id_role": [
                    "None"
                ],
                "module_code": [
                    "None"
                ],
                "object_code": [
                    "None"
                ],
                "get_id": [
                    "bool"
                ],
                "get_herited_obj": [
                    "bool"
                ],
                "append_to_select": [
                    "None"
                ]
            }
        },
        "get_scopes_by_action": {
            "name": "get_scopes_by_action",
            "location": 385,
            "return": [
                "dict[, int]"
            ],
            "arguments": {
                "id_role": [
                    "None"
                ],
                "module_code": [
                    "None"
                ],
                "object_code": [
                    "None"
                ]
            }
        },
        "get_or_fetch_user_cruved": {
            "name": "get_or_fetch_user_cruved",
            "location": 393,
            "return": [],
            "arguments": {
                "session": [],
                "id_role": [
                    "None"
                ],
                "module_code": [
                    "None"
                ],
                "object_code": [
                    "None"
                ]
            }
        },
        "UserCruved.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_role": [],
                "code_filter_type": [],
                "module_code": [
                    "None"
                ],
                "object_code": [
                    "None"
                ],
                "append_to_select": [
                    "None"
                ]
            }
        },
        "UserCruved._build_permission_select_list": {
            "name": "_build_permission_select_list",
            "location": 108,
            "return": [
                "dict[tuple[typing.Union[int,list]], tuple[typing.Union[int,list]]]"
            ],
            "arguments": {
                "self": [],
                "append_to_select": []
            }
        },
        "UserCruved._build_query_permission": {
            "name": "_build_query_permission",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "code_action": [
                    "None"
                ]
            }
        },
        "UserCruved.get_user_perm_list": {
            "name": "get_user_perm_list",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "code_action": [
                    "None"
                ]
            }
        },
        "UserCruved.get_max_perm": {
            "name": "get_max_perm",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "perm_list": []
            }
        },
        "UserCruved.build_herited_user_cruved": {
            "name": "build_herited_user_cruved",
            "location": 174,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "user_permissions": []
            }
        },
        "UserCruved.get_herited_user_cruved": {
            "name": "get_herited_user_cruved",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCruved.get_perm_for_all_actions": {
            "name": "get_perm_for_all_actions",
            "location": 220,
            "return": [
                "tuple[typing.Union[dict[, typing.Text],bool,None]]"
            ],
            "arguments": {
                "self": [],
                "get_id": []
            }
        },
        "UserCruved.get_herited_user_cruved_by_action": {
            "name": "get_herited_user_cruved_by_action",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_permissions/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_permissions/backoffice/forms.py": {
        "CruvedScopeForm.init_choices": {
            "name": "init_choices",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CruvedScopeForm.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OtherPermissionsForm.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_filter_type": [
                    "Optional[str]",
                    "str",
                    "fal.models.Season",
                    "grouper.models.base.session.Session",
                    "int",
                    "tracim.models.data.Workspace"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_permissions/backoffice/views.py": {
        "permission_form": {
            "name": "permission_form",
            "location": 56,
            "return": [],
            "arguments": {
                "info_role": [],
                "id_module": [],
                "id_role": [],
                "id_object": [
                    "None"
                ]
            }
        },
        "users": {
            "name": "users",
            "location": 166,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "user_cruved": {
            "name": "user_cruved",
            "location": 207,
            "return": [],
            "arguments": {
                "id_role": []
            }
        },
        "user_other_permissions": {
            "name": "user_other_permissions",
            "location": 266,
            "return": [],
            "arguments": {
                "id_role": []
            }
        },
        "other_permissions_form": {
            "name": "other_permissions_form",
            "location": 305,
            "return": [],
            "arguments": {
                "id_role": [],
                "id_filter_type": [],
                "id_permission": [
                    "None"
                ]
            }
        },
        "filter_form": {
            "name": "filter_form",
            "location": 355,
            "return": [],
            "arguments": {
                "id_filter_type": [],
                "id_filter": [
                    "None"
                ]
            }
        },
        "filter_list": {
            "name": "filter_list",
            "location": 395,
            "return": [],
            "arguments": {
                "id_filter_type": []
            }
        },
        "delete_filter": {
            "name": "delete_filter",
            "location": 409,
            "return": [],
            "arguments": {
                "id_filter": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_permissions/backoffice/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_profiles/models.py": {
        "VmValidProfiles.get_geofeature": {
            "name": "get_geofeature",
            "location": 53,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "salon.models.Stylist",
                "str"
            ],
            "arguments": {
                "self": [],
                "recursif": [
                    "bool",
                    "List[str]",
                    "Tuple[int,int]",
                    "int",
                    "Optional[str]",
                    "str",
                    "List[Photo]"
                ],
                "columns": [
                    "Tuple",
                    "List[str]",
                    "Tuple[int,int]",
                    "int",
                    "Optional[str]",
                    "str",
                    "List[Photo]"
                ]
            }
        },
        "VConsistancyData.score": {
            "name": "score",
            "location": 83,
            "return": [
                "int",
                "str",
                "dss.config.Replica"
            ],
            "arguments": {
                "cls": [
                    "static_frame.core.frame.Frame",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_profiles/routes.py": {
        "get_phenology": {
            "name": "get_phenology",
            "location": 23,
            "return": [
                "list",
                "None"
            ],
            "arguments": {
                "cd_ref": []
            }
        },
        "get_profile": {
            "name": "get_profile",
            "location": 60,
            "return": [],
            "arguments": {
                "cd_ref": []
            }
        },
        "get_consistancy_data": {
            "name": "get_consistancy_data",
            "location": 80,
            "return": [],
            "arguments": {
                "id_synthese": []
            }
        },
        "get_observation_score": {
            "name": "get_observation_score",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "update": {
            "name": "update",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/core/gn_profiles/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_synthese/models.py": {
        "synthese_export_serialization": {
            "name": "synthese_export_serialization",
            "location": 405,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SyntheseQuery.join_nomenclatures": {
            "name": "join_nomenclatures",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntheseQuery.lateraljoin_last_validation": {
            "name": "lateraljoin_last_validation",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntheseQuery.filter_by_scope": {
            "name": "filter_by_scope",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [],
                "user": []
            }
        },
        "Synthese.get_geofeature": {
            "name": "get_geofeature",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "recursif": [],
                "fields": []
            }
        },
        "Synthese.has_instance_permission": {
            "name": "has_instance_permission",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "VSyntheseForWebApp.get_geofeature": {
            "name": "get_geofeature",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "recursif": [],
                "fields": []
            }
        },
        "synthese_export_serialization.serialize_order_fn": {
            "name": "serialize_order_fn",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "synthese_export_serialization.serialize_geofn": {
            "name": "serialize_geofn",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "geoCol": [],
                "idCol": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_synthese/routes.py": {
        "current_milli_time": {
            "name": "current_milli_time",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "get_observations_for_web": {
            "name": "get_observations_for_web",
            "location": 72,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "get_synthese": {
            "name": "get_synthese",
            "location": 183,
            "return": [
                "dict[typing.Text, typing.Union[FeatureCollection,bool]]"
            ],
            "arguments": {
                "info_role": []
            }
        },
        "get_one_synthese": {
            "name": "get_one_synthese",
            "location": 229,
            "return": [],
            "arguments": {
                "info_role": [],
                "id_synthese": []
            }
        },
        "export_taxon_web": {
            "name": "export_taxon_web",
            "location": 281,
            "return": [
                "tuple[typing.Union[dict[typing.Text, str],int]]"
            ],
            "arguments": {
                "info_role": []
            }
        },
        "export_observations_web": {
            "name": "export_observations_web",
            "location": 359,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "export_metadata": {
            "name": "export_metadata",
            "location": 465,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "export_status": {
            "name": "export_status",
            "location": 520,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "general_stats": {
            "name": "general_stats",
            "location": 621,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "info_role": []
            }
        },
        "get_taxon_tree": {
            "name": "get_taxon_tree",
            "location": 655,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_autocomplete_taxons_synthese": {
            "name": "get_autocomplete_taxons_synthese",
            "location": 669,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_sources": {
            "name": "get_sources",
            "location": 709,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "getDefaultsNomenclatures": {
            "name": "getDefaultsNomenclatures",
            "location": 720,
            "return": [],
            "arguments": {}
        },
        "get_color_taxon": {
            "name": "get_color_taxon",
            "location": 756,
            "return": [],
            "arguments": {}
        },
        "get_taxa_count": {
            "name": "get_taxa_count",
            "location": 799,
            "return": [],
            "arguments": {}
        },
        "get_observation_count": {
            "name": "get_observation_count",
            "location": 825,
            "return": [],
            "arguments": {}
        },
        "get_bbox": {
            "name": "get_bbox",
            "location": 852,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "observation_count_per_column": {
            "name": "observation_count_per_column",
            "location": 879,
            "return": [],
            "arguments": {
                "column": []
            }
        },
        "get_taxa_distribution": {
            "name": "get_taxa_distribution",
            "location": 897,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/core/gn_synthese/synthese_config.py": {},
    "GeoNature-master/backend/geonature/core/gn_synthese/__init__.py": {},
    "GeoNature-master/backend/geonature/core/gn_synthese/utils/process.py": {
        "import_from_table": {
            "name": "import_from_table",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_name": [],
                "table_name": [],
                "field_name": [],
                "value": [],
                "limit": [
                    "int"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_synthese/utils/query_select_sqla.py": {
        "SyntheseQuery.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "query": [],
                "filters": [],
                "id_synthese_column": [
                    "typing.Text"
                ],
                "id_dataset_column": [
                    "typing.Text"
                ],
                "observers_column": [
                    "typing.Text"
                ],
                "id_digitiser_column": [
                    "typing.Text"
                ],
                "with_generic_table": [
                    "bool"
                ],
                "query_joins": [
                    "None"
                ]
            }
        },
        "SyntheseQuery.add_join": {
            "name": "add_join",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_table": [],
                "right_column": [],
                "left_column": [],
                "join_type": [
                    "typing.Text"
                ]
            }
        },
        "SyntheseQuery.add_join_multiple_cond": {
            "name": "add_join_multiple_cond",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_table": [],
                "conditions": []
            }
        },
        "SyntheseQuery.filter_query_with_cruved": {
            "name": "filter_query_with_cruved",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "SyntheseQuery.filter_taxonomy": {
            "name": "filter_taxonomy",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheseQuery.filter_other_filters": {
            "name": "filter_other_filters",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheseQuery.filter_query_all_filters": {
            "name": "filter_query_all_filters",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/gn_synthese/utils/__init__.py": {},
    "GeoNature-master/backend/geonature/core/ref_geo/models.py": {
        "LiMunicipalities.nom_com_dept": {
            "name": "nom_com_dept",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/ref_geo/routes.py": {
        "getGeoInfo": {
            "name": "getGeoInfo",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "getAltitude": {
            "name": "getAltitude",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "getAreasIntersection": {
            "name": "getAreasIntersection",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "get_municipalities": {
            "name": "get_municipalities",
            "location": 156,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_areas": {
            "name": "get_areas",
            "location": 174,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {}
        },
        "get_area_size": {
            "name": "get_area_size",
            "location": 217,
            "return": [],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/core/ref_geo/__init__.py": {},
    "GeoNature-master/backend/geonature/core/sensitivity/models.py": {
        "before_insert_sensitivity_criteria": {
            "name": "before_insert_sensitivity_criteria",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "mapper": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "connection": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "CorSensitivityCriteria.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "criteria": [
                    "None",
                    "int",
                    "Optional[bool]",
                    "bool",
                    "Callable"
                ],
                "sensitivity_rule": [
                    "None",
                    "int",
                    "Optional[bool]",
                    "bool",
                    "Callable"
                ],
                "nomenclature_type": [
                    "int",
                    "None"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/sensitivity/routes.py": {
        "update_synthese": {
            "name": "update_synthese",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/core/sensitivity/__init__.py": {},
    "GeoNature-master/backend/geonature/core/taxonomie/models.py": {},
    "GeoNature-master/backend/geonature/core/taxonomie/schemas.py": {},
    "GeoNature-master/backend/geonature/core/taxonomie/__init__.py": {},
    "GeoNature-master/backend/geonature/core/users/models.py": {
        "CorRole.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_group": [
                    "str",
                    "int",
                    "tuple"
                ],
                "id_role": [
                    "str",
                    "int",
                    "tuple"
                ]
            }
        },
        "UserRigth.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_role": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Mapping[str,str]"
                ],
                "id_organisme": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Mapping[str,str]"
                ],
                "code_action": [
                    "None",
                    "bool",
                    "str",
                    "Optional[zerver.models.Stream]",
                    "Optional[str]",
                    "int"
                ],
                "value_filter": [
                    "None",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "module_code": [
                    "None",
                    "int",
                    "str",
                    "List[int]",
                    "float",
                    "List[str]",
                    "Optional[int]"
                ],
                "nom_role": [
                    "None",
                    "bool",
                    "str",
                    "Optional[zerver.models.Stream]",
                    "Optional[str]",
                    "int"
                ],
                "prenom_role": [
                    "None",
                    "bool",
                    "str",
                    "Optional[zerver.models.Stream]",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/core/users/register_post_actions.py": {
        "validate_temp_user": {
            "name": "validate_temp_user",
            "location": 23,
            "return": [
                "dict[typing.Text, str]",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "data": []
            }
        },
        "execute_actions_after_validation": {
            "name": "execute_actions_after_validation",
            "location": 65,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "data": []
            }
        },
        "create_dataset_user": {
            "name": "create_dataset_user",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        },
        "inform_user": {
            "name": "inform_user",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        },
        "send_email_for_recovery": {
            "name": "send_email_for_recovery",
            "location": 157,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "GeoNature-master/backend/geonature/core/users/routes.py": {
        "getRolesByMenuId": {
            "name": "getRolesByMenuId",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "id_menu": []
            }
        },
        "getRolesByMenuCode": {
            "name": "getRolesByMenuCode",
            "location": 87,
            "return": [
                "list"
            ],
            "arguments": {
                "code_liste": []
            }
        },
        "getListes": {
            "name": "getListes",
            "location": 114,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_role": {
            "name": "get_role",
            "location": 124,
            "return": [],
            "arguments": {
                "id_role": []
            }
        },
        "get_roles": {
            "name": "get_roles",
            "location": 141,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_organismes": {
            "name": "get_organismes",
            "location": 163,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "get_organismes_jdd": {
            "name": "get_organismes_jdd",
            "location": 183,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "inscription": {
            "name": "inscription",
            "location": 214,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[Response]"
            ],
            "arguments": {}
        },
        "login_recovery": {
            "name": "login_recovery",
            "location": 239,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[Response]"
            ],
            "arguments": {}
        },
        "confirmation": {
            "name": "confirmation",
            "location": 260,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[Response]"
            ],
            "arguments": {}
        },
        "after_confirmation": {
            "name": "after_confirmation",
            "location": 287,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "update_role": {
            "name": "update_role",
            "location": 302,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "info_role": []
            }
        },
        "change_password": {
            "name": "change_password",
            "location": 345,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "id_role": []
            }
        },
        "new_password": {
            "name": "new_password",
            "location": 397,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/core/users/__init__.py": {},
    "GeoNature-master/backend/geonature/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/migrations/ref_geo_utils.py": {
        "delete_area_with_type": {
            "name": "delete_area_with_type",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "area_type": []
            }
        },
        "create_temporary_grids_table": {
            "name": "create_temporary_grids_table",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "temp_table_name": []
            }
        },
        "insert_grids_and_drop_temporary_table": {
            "name": "insert_grids_and_drop_temporary_table",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "temp_table_name": [],
                "area_type": []
            }
        }
    },
    "GeoNature-master/backend/geonature/migrations/__init__.py": {},
    "GeoNature-master/backend/geonature/migrations/versions/05a0ae652c13_ref_geo_french_regions_1970.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/0dfdbfbccd63_ref_geo_french_municipalities.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/1715cf31a75d_insert_ign_250m_bd_alti_in_dem.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/1eb624249f2b_add_default_value_in_additionalfields_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/2a2e5c519fd1_synthese_get_default_nomenclature_value.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/2aa558b1be3a_add_schema_gn_profiles.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/3d0bf4ee67d1_geonature_samples.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/3fdaa1805575_ref_geo_french_departments.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/4882d6141a41_add_regions_in_area_types.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/586613e2faeb_ref_geo_inpn_grids_1.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/5f4c4b644844_delete_cascade_cor_dataset_territory.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/61e46813d621_update_synthese_sensitivity.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/6afe74833ed0_ref_geo.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/6f7d5549d49e_delete_view_v_synthese_validation_forwebapp.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/7077aa76da3d_bump_dependencies.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/7471f51011c8_change_index_vm_valid_profiles_cd_ref_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/7d6e98441e4c_ref_geo_inpn_grids_5.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/7dfd0a813f86_insert_inpn_sensitivity_referential.py": {
        "get_id_from_cd": {
            "name": "get_id_from_cd",
            "location": 42,
            "return": [],
            "arguments": {
                "cd_nomenc": []
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/87651375c2e8_vectorize_ign_bd_alti.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/9a9f4971edcd_fix_altitude_trigger.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/ac08dcf3f27b_diffusion_level.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/c0fdf2ee7f4f_auto_update_cor_area_synthese.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/d02f4563bebe_ref_geo_french_regions.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/dde31e76ce45_remove_old_profile_function.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/dfec5f64ac73_fix_sensitivity_algo.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/e0ac4c9f5c0a_add_indexes_on_fk_referencing_id_area.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/ede150d9afd9_ref_geo_inpn_grids_10.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/f06cc80cc8ba_2_7_5.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/migrations/versions/__init__.py": {},
    "GeoNature-master/backend/geonature/tests/conftest.py": {},
    "GeoNature-master/backend/geonature/tests/fixtures.py": {
        "app": {
            "name": "app",
            "location": 30,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "users": {
            "name": "users",
            "location": 51,
            "return": [
                "Dict[Union[Text,Organisme],]",
                "models.Course",
                "zam_repondeur.models.Dossier",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "Application",
                    "bool",
                    "flask.app.Flask"
                ]
            }
        },
        "_session": {
            "name": "_session",
            "location": 111,
            "return": [
                "Dict[str, List[Callable]]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "str"
            ],
            "arguments": {
                "app": [
                    "routemaster.utils.WSGICallable",
                    "Callable"
                ]
            }
        },
        "acquisition_frameworks": {
            "name": "acquisition_frameworks",
            "location": 116,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "users": [
                    "str",
                    "ebl.users.domain.user.User",
                    "server.models.User",
                    "Optional[Dict]"
                ]
            }
        },
        "datasets": {
            "name": "datasets",
            "location": 145,
            "return": [
                "Dict[Union[Text,None],]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "users": [
                    "Dict[str, Any]",
                    "viewer.models.Archive",
                    "Union[server.models.User, int]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "zerver.models.UserProfile",
                    "amundsen_application.models.user.User",
                    "Union[bool, int, str]"
                ],
                "acquisition_frameworks": [
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "str",
                    "multinedb.models.user.User"
                ]
            }
        },
        "taxon_attribut": {
            "name": "taxon_attribut",
            "location": 190,
            "return": [
                "CorTaxonAttribut",
                "Dict[str,Any]",
                "Dict[str,Dict[str,int]]",
                "str",
                "Optional[int]",
                "Set"
            ],
            "arguments": {}
        },
        "synthese_data": {
            "name": "synthese_data",
            "location": 204,
            "return": [
                "List[Synthese]",
                "Dict[str,List[int]]",
                "Dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "users": [
                    "str",
                    "zilencer.models.RemoteZulipServer",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "tracim.models.User"
                ],
                "datasets": [
                    "str",
                    "zilencer.models.RemoteZulipServer",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "tracim.models.User"
                ]
            }
        },
        "users.create_user": {
            "name": "create_user",
            "location": 65,
            "return": [
                "User",
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "Set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "username": [
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "organisme": [
                    "None",
                    "bool",
                    "List[str]",
                    "Dict[str,str]",
                    "bytes"
                ],
                "scope": [
                    "None",
                    "user_models.User",
                    "Iterable[int]",
                    "django.db.models.query.QuerySet",
                    "int",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "audiopyle.lib.models.resulFeatureMeta"
                ]
            }
        },
        "acquisition_frameworks.create_af": {
            "name": "create_af",
            "location": 120,
            "return": [
                "TAcquisitionFramework",
                "bool",
                "float"
            ],
            "arguments": {
                "creator": [
                    "None",
                    "str",
                    "daylighdb.models.Profile",
                    "models.Profile",
                    "bool",
                    "Optional[zerver.models.Realm]"
                ]
            }
        },
        "datasets.create_dataset": {
            "name": "create_dataset",
            "location": 150,
            "return": [
                "TDatasets",
                "bool",
                "float"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]"
                ],
                "digitizer": [
                    "None",
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_gn_commons.py": {
        "place": {
            "name": "place",
            "location": 27,
            "return": [],
            "arguments": {
                "users": []
            }
        },
        "additional_field": {
            "name": "additional_field",
            "location": 35,
            "return": [],
            "arguments": {
                "app": [],
                "datasets": []
            }
        },
        "TestCommons.test_list_places": {
            "name": "test_list_places",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "place": [],
                "users": []
            }
        },
        "TestCommons.test_add_place": {
            "name": "test_add_place",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": []
            }
        },
        "TestCommons.test_delete_place": {
            "name": "test_delete_place",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "place": [],
                "users": []
            }
        },
        "TestCommons.test_additional_data": {
            "name": "test_additional_data",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasets": [],
                "additional_field": []
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_gn_meta.py": {
        "TestGNMeta.test_acquisition_frameworks_permissions": {
            "name": "test_acquisition_frameworks_permissions",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.testing.FlaskClient"
                ],
                "acquisition_frameworks": [],
                "datasets": [
                    "slice"
                ],
                "users": [
                    "str"
                ]
            }
        },
        "TestGNMeta.test_acquisition_framework_is_deletable": {
            "name": "test_acquisition_framework_is_deletable",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "int",
                    "str",
                    "flask.Flask"
                ],
                "acquisition_frameworks": [
                    "flask.Flask"
                ],
                "datasets": [
                    "int",
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "TestGNMeta.test_delete_acquisition_framework": {
            "name": "test_delete_acquisition_framework",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "users": [
                    "flask.ctx.AppContext",
                    "flask.Flask"
                ],
                "acquisition_frameworks": [],
                "datasets": []
            }
        },
        "TestGNMeta.test_get_acquisition_frameworks": {
            "name": "test_get_acquisition_frameworks",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": []
            }
        },
        "TestGNMeta.test_list_acquisition_frameworks": {
            "name": "test_list_acquisition_frameworks",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": []
            }
        },
        "TestGNMeta.test_get_acquisition_framework": {
            "name": "test_get_acquisition_framework",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "List[str]",
                    "raiden.utils.Address",
                    "sqlalchemy.Table"
                ],
                "acquisition_frameworks": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "int",
                    "deeplearning.ml4pl.models.logger.Logger",
                    "core_lib.core.models.Event",
                    "django.contrib.auth.models.User",
                    "daylighdb.models.User"
                ]
            }
        },
        "TestGNMeta.test_datasets_permissions": {
            "name": "test_datasets_permissions",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "datasets": [
                    "Optional[projects.models.projects.Project]",
                    "models.Project",
                    "models.User"
                ],
                "users": []
            }
        },
        "TestGNMeta.test_dataset_is_deletable": {
            "name": "test_dataset_is_deletable",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "Optional[bool]"
                ],
                "synthese_data": [
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "Optional[bool]"
                ],
                "datasets": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestGNMeta.test_delete_dataset": {
            "name": "test_delete_dataset",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "tests.fixtures.cloud_uploader.Uploader"
                ],
                "users": [],
                "synthese_data": [
                    "str",
                    "tests.fixtures.cloud_uploader.Uploader"
                ],
                "acquisition_frameworks": [
                    "str",
                    "tests.fixtures.cloud_uploader.Uploader"
                ],
                "datasets": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "TestGNMeta.test_list_datasets": {
            "name": "test_list_datasets",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": []
            }
        },
        "TestGNMeta.test_create_dataset": {
            "name": "test_create_dataset",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": []
            }
        },
        "TestGNMeta.test_get_dataset": {
            "name": "test_get_dataset",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "List[str]",
                    "raiden.utils.Address",
                    "sqlalchemy.Table"
                ],
                "datasets": [
                    "str",
                    "homeassistanauth.models.User"
                ]
            }
        },
        "TestGNMeta.test_dataset_pdf_export": {
            "name": "test_dataset_pdf_export",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "raiden.utils.Address"
                ],
                "datasets": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestGNMeta.test_uuid_report": {
            "name": "test_uuid_report",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": []
            }
        },
        "TestGNMeta.test_sensi_report": {
            "name": "test_sensi_report",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": []
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_gn_profiles.py": {
        "create_synthese_record": {
            "name": "create_synthese_record",
            "location": 23,
            "return": [
                "Synthese",
                "int",
                "str"
            ],
            "arguments": {
                "cd_nom": [
                    "None",
                    "int",
                    "str",
                    "datetime.datetime"
                ],
                "date_min": [
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.date]"
                ],
                "date_max": [
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.date]"
                ],
                "x": [
                    "float",
                    "int",
                    "Optional[datetime.datetime]",
                    "str",
                    "Optional[datetime.timedelta]",
                    "List[str]"
                ],
                "y": [
                    "float",
                    "int",
                    "Optional[datetime.datetime]",
                    "str",
                    "Optional[datetime.timedelta]",
                    "List[str]"
                ],
                "altitude_min": [
                    "None",
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.date]"
                ],
                "altitude_max": [
                    "None",
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.date]"
                ],
                "id_dataset": [
                    "None",
                    "datetime.datetime",
                    "Optional[int]",
                    "Optional[datetime.datetime]"
                ],
                "nom_cite": [
                    "Text",
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.date]"
                ],
                "id_nomenclature_valid_status": [
                    "None",
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.date]"
                ],
                "id_nomenclature_life_stage": [
                    "None",
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "Optional[datetime.date]"
                ]
            }
        },
        "sample_synthese_records_for_profile": {
            "name": "sample_synthese_records_for_profile",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Optional[\"Game\"]"
                ],
                "datasets": [
                    "Optional[\"Game\"]"
                ]
            }
        },
        "TestGnProfiles.test_checks": {
            "name": "test_checks",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "int",
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "TestGnProfiles.test_get_phenology": {
            "name": "test_get_phenology",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "int",
                    "flask.Flask"
                ]
            }
        },
        "TestGnProfiles.test_valid_profile": {
            "name": "test_valid_profile",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "int",
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "TestGnProfiles.test_get_consistancy_data": {
            "name": "test_get_consistancy_data",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "int",
                    "flask.Flask"
                ]
            }
        },
        "TestGnProfiles.test_get_observation_score": {
            "name": "test_get_observation_score",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "int",
                    "flask.Flask"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_mtd.py": {
        "TestMTD.test_mtd": {
            "name": "test_mtd",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_pr_occtax.py": {
        "releve_data": {
            "name": "releve_data",
            "location": 16,
            "return": [
                "Dict[Text,Union[int,dict[Text,Union[Text,list[float]]],dict[Text,Union[int,Text,None,list[int]]]]]",
                "Dict[str,List[int]]",
                "Dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "datasets": [
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestOcctax.test_post_releve": {
            "name": "test_post_releve",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "str",
                    "raiden.utils.Address",
                    "bytes"
                ],
                "releve_data": [
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "TestOcctax.test_get_defaut_nomenclatures": {
            "name": "test_get_defaut_nomenclatures",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_ref_geo.py": {
        "has_french_dem": {
            "name": "has_french_dem",
            "location": 58,
            "return": [
                "bool",
                "Optional[bool]",
                "Iterable[cirq.Qid]",
                "str"
            ],
            "arguments": {}
        },
        "TestRefGeo.test_get_geo_info": {
            "name": "test_get_geo_info",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRefGeo.test_get_altitude": {
            "name": "test_get_altitude",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRefGeo.test_get_area_intersection": {
            "name": "test_get_area_intersection",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRefGeo.test_get_municipalities": {
            "name": "test_get_municipalities",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRefGeo.test_get_areas": {
            "name": "test_get_areas",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRefGeo.test_get_area_size": {
            "name": "test_get_area_size",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_sensitivity.py": {
        "clean_all_sensitivity_rules": {
            "name": "clean_all_sensitivity_rules",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSensitivity.test_get_id_nomenclature_sensitivity": {
            "name": "test_get_id_nomenclature_sensitivity",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestSensitivity.test_synthese_sensitivity": {
            "name": "test_synthese_sensitivity",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_synthese.py": {
        "source": {
            "name": "source",
            "location": 19,
            "return": [
                "TSources"
            ],
            "arguments": {}
        },
        "TestSynthese.test_synthese_scope_filtering": {
            "name": "test_synthese_scope_filtering",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "users": [],
                "synthese_data": []
            }
        },
        "TestSynthese.test_list_sources": {
            "name": "test_list_sources",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "TestSynthese.test_get_defaut_nomenclatures": {
            "name": "test_get_defaut_nomenclatures",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthese.test_get_synthese_data": {
            "name": "test_get_synthese_data",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "taxon_attribut": []
            }
        },
        "TestSynthese.test_get_synthese_data_cruved": {
            "name": "test_get_synthese_data_cruved",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthese.test_filter_cor_observers": {
            "name": "test_filter_cor_observers",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthese.test_export": {
            "name": "test_export",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthese.test_export_status": {
            "name": "test_export_status",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthese.test_export_metadata": {
            "name": "test_export_metadata",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthese.test_general_stat": {
            "name": "test_general_stat",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthese.test_get_one_synthese_record": {
            "name": "test_get_one_synthese_record",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "users": [],
                "synthese_data": []
            }
        },
        "TestSynthese.test_color_taxon": {
            "name": "test_color_taxon",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSynthese.test_taxa_distribution": {
            "name": "test_taxa_distribution",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "synthese_data": []
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_users_login.py": {
        "TestUsersLogin.user": {
            "name": "user",
            "location": 16,
            "return": [
                "User",
                "models.Course",
                "zam_repondeur.models.Dossier",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application",
                    "flask.Flask"
                ]
            }
        },
        "TestUsersLogin.test_current_user": {
            "name": "test_current_user",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "dict"
                ],
                "user": [
                    "dict",
                    "flask.testing.FlaskClient",
                    "abilian.app.Application"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/test_validation.py": {
        "TestValidation.test_get_synthese_data": {
            "name": "test_get_synthese_data",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "str",
                    "bool"
                ],
                "synthese_data": [
                    "str",
                    "tracim.models.data.Content",
                    "dict",
                    "Optional[bytes]",
                    "Tuple[int, int]",
                    "Dict[str, str]"
                ]
            }
        },
        "TestValidation.test_get_status_names": {
            "name": "test_get_status_names",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "List[Tuple[str, str]]",
                    "Callable",
                    "dict"
                ],
                "synthese_data": [
                    "Dict[str, Any]",
                    "preacher.core.requesExecutionReport",
                    "Dict[str, str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "TestValidation.test_add_validation_status": {
            "name": "test_add_validation_status",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "str",
                    "bool"
                ],
                "synthese_data": [
                    "dict",
                    "List[List[int]]",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/utils.py": {
        "login": {
            "name": "login",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "username": [
                    "Text",
                    "str",
                    "bool"
                ],
                "password": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "set_logged_user_cookie": {
            "name": "set_logged_user_cookie",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "zerver.models.UserProfile",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "user": [
                    "bool",
                    "zerver.models.UserProfile",
                    "tildes.models.user.User",
                    "Dict[str, services.user.transfer.models.User]",
                    "musictaxonomy.spotify.models.SpotifyUser"
                ]
            }
        },
        "logged_user_headers": {
            "name": "logged_user_headers",
            "location": 29,
            "return": [
                "List[Text]",
                "List[dict]",
                "Optional[Dict[str,str]]",
                "Dict",
                "Optional[Dict[str,Any]]",
                "Dict[str,Dict[str,str]]",
                "Dict[str,Union[int,str]]"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "zerver.models.UserProfile",
                    "Dict[str, services.user.transfer.models.User]",
                    "int",
                    "core.models.MyUser",
                    "grouper.models.user.User"
                ],
                "headers": [
                    "Headers",
                    "Dict",
                    "List[tracim.models.data.Content]",
                    "List",
                    "List[str]",
                    "Optional[List[T]]",
                    "List[src.scrape.models.ProductSearchResult]",
                    "str"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/tests/__init__.py": {},
    "GeoNature-master/backend/geonature/utils/command.py": {
        "start_geonature_front": {
            "name": "start_geonature_front",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_geonature_front": {
            "name": "build_geonature_front",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "rebuild_sass": [
                    "bool"
                ]
            }
        },
        "frontend_routes_templating": {
            "name": "frontend_routes_templating",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "None"
                ]
            }
        },
        "tsconfig_templating": {
            "name": "tsconfig_templating",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tsconfig_app_templating": {
            "name": "tsconfig_app_templating",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "None"
                ]
            }
        },
        "create_frontend_config": {
            "name": "create_frontend_config",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_app_configuration": {
            "name": "update_app_configuration",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "build": [
                    "bool"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/config.py": {},
    "GeoNature-master/backend/geonature/utils/config_schema.py": {
        "EmailStrOrListOfEmailStrField._deserialize": {
            "name": "_deserialize",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "attr": [],
                "data": []
            }
        },
        "EmailStrOrListOfEmailStrField._check_email": {
            "name": "_check_email",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GnPySchemaConf.unwrap_usershub": {
            "name": "unwrap_usershub",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GnPySchemaConf.validate_enable_usershub_and_mail": {
            "name": "validate_enable_usershub_and_mail",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GnGeneralSchemaConf.validate_enable_sign_up": {
            "name": "validate_enable_sign_up",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GnGeneralSchemaConf.validate_account_autovalidation": {
            "name": "validate_account_autovalidation",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/env.py": {
        "import_requirements": {
            "name": "import_requirements",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "req_file": [
                    "str",
                    "TextIO",
                    "List[str]"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/errors.py": {
        "ConfigError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "value": []
            }
        },
        "ConfigError.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeonatureApiError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "GeonatureApiError.to_dict": {
            "name": "to_dict",
            "location": 43,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeonatureApiError.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/filemanager.py": {
        "remove_file": {
            "name": "remove_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "List[str]",
                    "raiden.utils.Address"
                ],
                "absolute_path": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "rename_file": {
            "name": "rename_file",
            "location": 28,
            "return": [
                "str",
                "int",
                "List[int]",
                "dict"
            ],
            "arguments": {
                "old_chemin": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "old_title": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "new_title": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "upload_file": {
            "name": "upload_file",
            "location": 39,
            "return": [
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "file": [
                    "str",
                    "Optional[str]"
                ],
                "id_media": [
                    "str",
                    "Optional[str]"
                ],
                "cd_ref": [
                    "str",
                    "Optional[str]"
                ],
                "titre": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "removeDisallowedFilenameChars": {
            "name": "removeDisallowedFilenameChars",
            "location": 52,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "uncleanString": [
                    "str"
                ]
            }
        },
        "delete_recursively": {
            "name": "delete_recursively",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "path_folder": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "period": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Tuple[str]]",
                    "Optional[Dict]"
                ],
                "excluded_files": [
                    "List",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "generate_pdf": {
            "name": "generate_pdf",
            "location": 85,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "template": [
                    "Dict[str, T]",
                    "str",
                    "werkzeug.datastructures.ImmutableMultiDict"
                ],
                "data": [
                    "Dict[str, T]",
                    "str",
                    "werkzeug.datastructures.ImmutableMultiDict"
                ],
                "filename": [
                    "Optional[str]",
                    "bytes"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/gn_module_import.py": {
        "check_gn_module_file": {
            "name": "check_gn_module_file",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "module_path": []
            }
        },
        "check_manifest": {
            "name": "check_manifest",
            "location": 49,
            "return": [],
            "arguments": {
                "module_path": []
            }
        },
        "copy_in_external_mods": {
            "name": "copy_in_external_mods",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "module_path": [],
                "module_code": []
            }
        },
        "gn_module_register_config": {
            "name": "gn_module_register_config",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "module_code": []
            }
        },
        "gn_module_import_requirements": {
            "name": "gn_module_import_requirements",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "module_path": []
            }
        },
        "gn_module_activate": {
            "name": "gn_module_activate",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "module_code": [],
                "activ_front": [],
                "activ_back": []
            }
        },
        "gn_module_deactivate": {
            "name": "gn_module_deactivate",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "module_code": [],
                "activ_front": [],
                "activ_back": []
            }
        },
        "check_codefile_validity": {
            "name": "check_codefile_validity",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "module_path": [],
                "module_code": []
            }
        },
        "create_external_assets_symlink": {
            "name": "create_external_assets_symlink",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "module_path": [],
                "module_code": []
            }
        },
        "install_frontend_dependencies": {
            "name": "install_frontend_dependencies",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "module_path": []
            }
        },
        "add_application_db": {
            "name": "add_application_db",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": [],
                "module_code": [],
                "url": [],
                "enable_frontend": [],
                "enable_backend": []
            }
        },
        "remove_application_db": {
            "name": "remove_application_db",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "module_code": []
            }
        },
        "create_module_config": {
            "name": "create_module_config",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "module_code": [],
                "build": [
                    "bool"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/logs.py": {
        "config_loggers": {
            "name": "config_loggers",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "SSLSMTPHandler.emit": {
            "name": "emit",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "IO",
                    "BinaryIO"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/module.py": {
        "import_legacy_module": {
            "name": "import_legacy_module",
            "location": 17,
            "return": [
                "Tuple[dict[Text,str]]",
                "bool",
                "Optional[str]",
                "str",
                "models.DotFlowContainer",
                "models.DotBotContainer"
            ],
            "arguments": {
                "module_object": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "import_packaged_module": {
            "name": "import_packaged_module",
            "location": 44,
            "return": [
                "Tuple[Optional[dict[Text,]]]",
                "Optional[str]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "module_dist": [
                    "Optional[Callable]",
                    "list",
                    "Callable[[Dict], None]",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "module_object": [
                    "str",
                    "dict",
                    "pathlib.Path",
                    "List[str]",
                    "zerver.models.UserProfile",
                    "Mapping[str, str]"
                ]
            }
        },
        "get_dist_from_code": {
            "name": "get_dist_from_code",
            "location": 74,
            "return": [
                "str",
                "int",
                "Tuple[int, int, int]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "module_code": [
                    "str",
                    "int"
                ]
            }
        },
        "import_gn_module": {
            "name": "import_gn_module",
            "location": 80,
            "return": [
                "Tuple",
                "List[str]",
                "Optional[bool]",
                "Optional[cmk.utils.type_defs.HostName]",
                "bool"
            ],
            "arguments": {
                "module_object": [
                    "zerver.models.UserProfile",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "import_backend_enabled_modules": {
            "name": "import_backend_enabled_modules",
            "location": 94,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "list_frontend_enabled_modules": {
            "name": "list_frontend_enabled_modules",
            "location": 107,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/utils/utilsgeometry.py": {
        "create_shapes_generic": {
            "name": "create_shapes_generic",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [],
                "srid": [],
                "db_cols": [],
                "data": [],
                "dir_path": [],
                "file_name": [],
                "geom_col": [],
                "geojson_col": []
            }
        },
        "shapeserializable": {
            "name": "shapeserializable",
            "location": 282,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "circle_from_point": {
            "name": "circle_from_point",
            "location": 335,
            "return": [],
            "arguments": {
                "point": [],
                "radius": [],
                "nb_point": [
                    "int"
                ]
            }
        },
        "convert_to_2d": {
            "name": "convert_to_2d",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "geojson": []
            }
        },
        "remove_third_dimension": {
            "name": "remove_third_dimension",
            "location": 362,
            "return": [],
            "arguments": {
                "geom": []
            }
        },
        "FionaShapeService.create_shapes_struct": {
            "name": "create_shapes_struct",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "db_cols": [],
                "srid": [],
                "dir_path": [],
                "file_name": [],
                "col_mapping": [
                    "None"
                ]
            }
        },
        "FionaShapeService.create_feature": {
            "name": "create_feature",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "data": [],
                "geom": []
            }
        },
        "FionaShapeService.create_features_generic": {
            "name": "create_features_generic",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "view": [],
                "data": [],
                "geom_col": [],
                "geojson_col": [
                    "None"
                ]
            }
        },
        "FionaShapeService.write_a_feature": {
            "name": "write_a_feature",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "feature": [],
                "geom_wkt": []
            }
        },
        "FionaShapeService.save_and_zip_shapefiles": {
            "name": "save_and_zip_shapefiles",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "FionaShapeService.close_files": {
            "name": "close_files",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "shapeserializable.to_shape_fn": {
            "name": "to_shape_fn",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "geom_col": [
                    "None"
                ],
                "geojson_col": [
                    "None"
                ],
                "srid": [
                    "None"
                ],
                "data": [],
                "dir_path": [
                    "None"
                ],
                "file_name": [
                    "None"
                ],
                "columns": [
                    "None"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/utilsgeometrytools.py": {
        "export_as_geo_file": {
            "name": "export_as_geo_file",
            "location": 9,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "export_format": [],
                "export_view": [],
                "db_cols": [],
                "geojson_col": [],
                "data": [],
                "file_name": []
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/utilsmails.py": {
        "send_mail": {
            "name": "send_mail",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "recipients": [],
                "subject": [],
                "msg_html": []
            }
        },
        "clean_recipients": {
            "name": "clean_recipients",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "recipients": []
            }
        },
        "split_name_address": {
            "name": "split_name_address",
            "location": 82,
            "return": [
                "tuple"
            ],
            "arguments": {
                "email": []
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/utilsrequests.py": {
        "get": {
            "name": "get",
            "location": 4,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "Optional[dict]",
                    "requests.Session",
                    "Dict[str, Any]"
                ],
                "auth": [
                    "None",
                    "str",
                    "Dict",
                    "Optional[dict]",
                    "requests.Session",
                    "Dict[str,Any]"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 12,
            "return": [
                "List[str]",
                "str",
                "dict",
                "List[Mapping[str, Any]]",
                "Iterable[str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "json": [
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/utilssqlalchemy.py": {
        "test_is_uuid": {
            "name": "test_is_uuid",
            "location": 30,
            "return": [],
            "arguments": {
                "uuid_string": []
            }
        },
        "testDataType": {
            "name": "testDataType",
            "location": 42,
            "return": [],
            "arguments": {
                "value": [],
                "sqlType": [],
                "paramName": []
            }
        },
        "test_type_and_generate_query": {
            "name": "test_type_and_generate_query",
            "location": 66,
            "return": [],
            "arguments": {
                "param_name": [],
                "value": [],
                "model": [],
                "q": []
            }
        },
        "get_geojson_feature": {
            "name": "get_geojson_feature",
            "location": 107,
            "return": [],
            "arguments": {
                "wkb": []
            }
        },
        "serializeQuery": {
            "name": "serializeQuery",
            "location": 340,
            "return": [],
            "arguments": {
                "data": [],
                "columnDef": []
            }
        },
        "serializeQueryOneResult": {
            "name": "serializeQueryOneResult",
            "location": 352,
            "return": [],
            "arguments": {
                "row": [],
                "column_def": []
            }
        },
        "serializeQueryTest": {
            "name": "serializeQueryTest",
            "location": 361,
            "return": [],
            "arguments": {
                "data": [],
                "column_def": []
            }
        },
        "serializable": {
            "name": "serializable",
            "location": 380,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "geoserializable": {
            "name": "geoserializable",
            "location": 453,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "json_resp": {
            "name": "json_resp",
            "location": 498,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "to_json_resp": {
            "name": "to_json_resp",
            "location": 521,
            "return": [],
            "arguments": {
                "res": [],
                "status": [],
                "filename": [],
                "as_file": [],
                "indent": [],
                "extension": []
            }
        },
        "csv_resp": {
            "name": "csv_resp",
            "location": 549,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "to_csv_resp": {
            "name": "to_csv_resp",
            "location": 569,
            "return": [],
            "arguments": {
                "filename": [],
                "data": [],
                "columns": [],
                "separator": []
            }
        },
        "generate_csv_content": {
            "name": "generate_csv_content",
            "location": 583,
            "return": [],
            "arguments": {
                "columns": [],
                "data": [],
                "separator": []
            }
        },
        "GenericTable.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "tableName": [],
                "schemaName": [],
                "geometry_field": [],
                "srid": []
            }
        },
        "GenericTable.get_serialized_columns": {
            "name": "get_serialized_columns",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "serializers": []
            }
        },
        "GenericTable.as_dict": {
            "name": "as_dict",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "columns": []
            }
        },
        "GenericTable.as_geofeature": {
            "name": "as_geofeature",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "columns": []
            }
        },
        "GenericTable.as_shape": {
            "name": "as_shape",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "db_cols": [],
                "geojson_col": [],
                "data": [],
                "dir_path": [],
                "file_name": []
            }
        },
        "GenericQuery.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "db_session": [],
                "tableName": [],
                "schemaName": [],
                "geometry_field": [],
                "filters": [],
                "limit": [],
                "offset": []
            }
        },
        "GenericQuery.build_query_filters": {
            "name": "build_query_filters",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "parameters": []
            }
        },
        "GenericQuery.build_query_filter": {
            "name": "build_query_filter",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "param_name": [],
                "param_value": []
            }
        },
        "GenericQuery.build_query_order": {
            "name": "build_query_order",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "parameters": []
            }
        },
        "GenericQuery.return_query": {
            "name": "return_query",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "serializable.serializefn": {
            "name": "serializefn",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "recursif": [],
                "columns": [],
                "relationships": []
            }
        },
        "geoserializable.serializegeofn": {
            "name": "serializegeofn",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "geoCol": [],
                "idCol": [],
                "recursif": [],
                "columns": [],
                "relationships": []
            }
        },
        "json_resp._json_resp": {
            "name": "_json_resp",
            "location": 508,
            "return": [],
            "arguments": {}
        },
        "csv_resp._csv_resp": {
            "name": "_csv_resp",
            "location": 558,
            "return": [],
            "arguments": {}
        }
    },
    "GeoNature-master/backend/geonature/utils/utilstoml.py": {
        "load_and_validate_toml": {
            "name": "load_and_validate_toml",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "toml_file": [
                    "str",
                    "pathlib.Path"
                ],
                "config_schema": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "load_toml": {
            "name": "load_toml",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "toml_file": [
                    "pathlib.Path",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "BinaryIO",
                    "str",
                    "Path"
                ]
            }
        }
    },
    "GeoNature-master/backend/geonature/utils/__init__.py": {},
    "GeoNature-master/backend/tests/bootstrap_test.py": {
        "app": {
            "name": "app",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "post_json": {
            "name": "post_json",
            "location": 22,
            "return": [],
            "arguments": {
                "client": [],
                "url": [],
                "json_dict": [],
                "query_string": [
                    "None"
                ]
            }
        },
        "json_of_response": {
            "name": "json_of_response",
            "location": 32,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "get_token": {
            "name": "get_token",
            "location": 41,
            "return": [],
            "arguments": {
                "client": [],
                "login": [
                    "typing.Text"
                ],
                "password": [
                    "typing.Text"
                ]
            }
        },
        "releve_data": {
            "name": "releve_data",
            "location": 56,
            "return": [
                "dict[typing.Text, typing.Union[int,dict[typing.Text, typing.Union[typing.Text,list[float]]],dict[typing.Text, typing.Union[int,typing.Text,None,list[int],list[dict[typing.Text, typing.Union[None,list[dict[typing.Text, typing.Union[int,None]]],typing.Text,int]]]]]]]"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "GeoNature-master/backend/tests/conftest.py": {
        "pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "list",
                    "Iterable"
                ]
            }
        },
        "execute_script": {
            "name": "execute_script",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "GeoNature-master/backend/tests/test_gn_commons.py": {
        "TestAPIMedias._get_media": {
            "name": "_get_media",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_media": []
            }
        },
        "TestAPIMedias._save_media": {
            "name": "_save_media",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "TestAPIMedias._update_media": {
            "name": "_update_media",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestAPIMedias._delete_media": {
            "name": "_delete_media",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_media": []
            }
        },
        "TestAPIMedias.test_media_action": {
            "name": "test_media_action",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "TestAPIGNCommons._create_config_files": {
            "name": "_create_config_files",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPIGNCommons.test_get_t_mobile_apps": {
            "name": "test_get_t_mobile_apps",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPIGNCommons.test_module_orders": {
            "name": "test_module_orders",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/test_gn_core.py": {},
    "GeoNature-master/backend/tests/test_gn_meta.py": {
        "TestGnMeta.test_list_datasets": {
            "name": "test_list_datasets",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnMeta.test_one_dataset": {
            "name": "test_one_dataset",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnMeta.test_dataset_cruved_2": {
            "name": "test_dataset_cruved_2",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnMeta.test_dataset_cruved_1": {
            "name": "test_dataset_cruved_1",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnMeta.test_post_and_update_dataset": {
            "name": "test_post_and_update_dataset",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnMeta.test_post_ca": {
            "name": "test_post_ca",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnMeta.test_get_af_list": {
            "name": "test_get_af_list",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnMeta.test_get_afs": {
            "name": "test_get_afs",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/test_gn_permission.py": {
        "TestGnPermissionsTools.test_user_from_token": {
            "name": "test_user_from_token",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsTools.test_user_from_token_and_raise_fail": {
            "name": "test_user_from_token_and_raise_fail",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsTools.test_get_user_permissions": {
            "name": "test_get_user_permissions",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsTools.test_cruved_scope_for_user_in_module": {
            "name": "test_cruved_scope_for_user_in_module",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_get_users": {
            "name": "test_get_users",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_get_user_cruveds": {
            "name": "test_get_user_cruveds",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_get_cruved_scope_form_allowed": {
            "name": "test_get_cruved_scope_form_allowed",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_post_cruved_scope_form": {
            "name": "test_post_cruved_scope_form",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_get_user_cruved": {
            "name": "test_get_user_cruved",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_get_user_other_permissions": {
            "name": "test_get_user_other_permissions",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_post_or_update_other_perm": {
            "name": "test_post_or_update_other_perm",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_post_or_update_filter": {
            "name": "test_post_or_update_filter",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_get_filters_list": {
            "name": "test_get_filters_list",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGnPermissionsView.test_delete_filter": {
            "name": "test_delete_filter",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/test_gn_validation.py": {
        "TestValidation.test_get_data": {
            "name": "test_get_data",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/test_nomenclature.py": {
        "TestAPINomenclature.test_gn_nomenclature_get_by_mnemonique": {
            "name": "test_gn_nomenclature_get_by_mnemonique",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPINomenclature.test_get_nomenclature_by_type_list": {
            "name": "test_get_nomenclature_by_type_list",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPINomenclature.test_get_all_nomenclatures_with_taxo": {
            "name": "test_get_all_nomenclatures_with_taxo",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/test_occtax.py": {
        "TestApiModulePrOcctax.test_get_releves": {
            "name": "test_get_releves",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiModulePrOcctax.test_insert_update_delete_releves": {
            "name": "test_insert_update_delete_releves",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "releve_data": []
            }
        },
        "TestApiModulePrOcctax.test_get_export_sinp": {
            "name": "test_get_export_sinp",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiModulePrOcctax.test_export_sinp_multiformat": {
            "name": "test_export_sinp_multiformat",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiModulePrOcctax.test_get_and_delete_releve": {
            "name": "test_get_and_delete_releve",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiModulePrOcctax.test_user_cannot_delete_releve": {
            "name": "test_user_cannot_delete_releve",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/test_pypnusershub.py": {
        "TestApiPyPnUsershub.test_login": {
            "name": "test_login",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/test_ref_geo.py": {
        "TestRefGeo.test_geoinfo": {
            "name": "test_geoinfo",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRefGeo.test_area_intersection": {
            "name": "test_area_intersection",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRefGeo.test_municipalities": {
            "name": "test_municipalities",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/test_releve_model.py": {
        "TestReleveModel.test_user_is_observers": {
            "name": "test_user_is_observers",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReleveModel.test_user_is_in_dataset": {
            "name": "test_user_is_in_dataset",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReleveModel.test_user_not_in_dataset": {
            "name": "test_user_not_in_dataset",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReleveModel.test_user_not_observer": {
            "name": "test_user_not_observer",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReleveModel.test_user_low_digitiser": {
            "name": "test_user_low_digitiser",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReleveModel.test_get_releve_cruved": {
            "name": "test_get_releve_cruved",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/test_users.py": {
        "TestApiUsersMenu.test_menu_exists": {
            "name": "test_menu_exists",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiUsersMenu.test_menu_notexists": {
            "name": "test_menu_notexists",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/__init__.py": {},
    "GeoNature-master/backend/tests/usershub-geonature/test_register.py": {
        "TestApiRegister.test_inscription_success": {
            "name": "test_inscription_success",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiRegister.test_inscirption_same_id": {
            "name": "test_inscirption_same_id",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiRegister.test_inscirption_wrong_pass": {
            "name": "test_inscirption_wrong_pass",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiRegister.test_password_recovery": {
            "name": "test_password_recovery",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/backend/tests/usershub-geonature/__init__.py": {},
    "GeoNature-master/contrib/gn_module_occhab/setup.py": {},
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/blueprint.py": {
        "post_station": {
            "name": "post_station",
            "location": 46,
            "return": [
                "str",
                "models.Profile"
            ],
            "arguments": {
                "info_role": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "sqlalchemy.orm.Session",
                    "recidiviz.persistence.database.session.Session"
                ]
            }
        },
        "get_one_station": {
            "name": "get_one_station",
            "location": 112,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "id_station": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "grouper.models.base.session.Session",
                    "transfer.models.Badge.ID",
                    "int"
                ],
                "info_role": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[int]",
                    "datetime.datetime",
                    "List[str]"
                ]
            }
        },
        "delete_one_station": {
            "name": "delete_one_station",
            "location": 139,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "Union[str,int]",
                "Optional[List[str]]",
                "models.Telegram_Chat"
            ],
            "arguments": {
                "id_station": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "transfer.models.Badge.ID",
                    "grouper.models.base.session.Session",
                    "transfer.models.CategoryID",
                    "Optional[str]"
                ],
                "info_role": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "get_all_habitats": {
            "name": "get_all_habitats",
            "location": 159,
            "return": [
                "FeatureCollection",
                "str",
                "utils.Node",
                "raiden.utils.Tuple[int,int]",
                "bytes"
            ],
            "arguments": {
                "info_role": [
                    "users.models.JustfixUser",
                    "flask.Response"
                ]
            }
        },
        "export_all_habitats": {
            "name": "export_all_habitats",
            "location": 200,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "int",
                "models.Name"
            ],
            "arguments": {
                "info_role": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "export_format": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "Optional[Set[int]]"
                ]
            }
        },
        "getDefaultNomenclatures": {
            "name": "getDefaultNomenclatures",
            "location": 279,
            "return": [
                "Dict[,None]",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/conf_schema_toml.py": {},
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/models.py": {
        "TStationsOcchab.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TStationsOcchab.get_geofeature": {
            "name": "get_geofeature",
            "location": 111,
            "return": [
                "List[str]",
                "Tuple[int, int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneStation.get_geofeature": {
            "name": "get_geofeature",
            "location": 169,
            "return": [
                "List[str]",
                "Tuple[int, int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/query.py": {
        "filter_query_with_cruved": {
            "name": "filter_query_with_cruved",
            "location": 11,
            "return": [
                "bool",
                "str",
                "set",
                "List[str]"
            ],
            "arguments": {
                "model": [
                    "zerver.models.UserProfile",
                    "int",
                    "esm.models.last_operation.LastOperation",
                    "Union[server.models.User, int]",
                    "zerver.models.Client",
                    "Optional[annofabapi.models.InspectionStatus]"
                ],
                "q": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "user": [
                    "Dict[str,str]",
                    "Optional[str]",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "tartare.core.models.Contributor",
                    "grouper.models.group.Group",
                    "float",
                    "str",
                    "int"
                ],
                "id_station_col": [
                    "Text",
                    "str",
                    "models.User",
                    "src.autoks.core.gp_model.GPModel",
                    "Optional[str]"
                ],
                "id_dataset_column": [
                    "Text",
                    "str",
                    "models.User",
                    "src.autoks.core.gp_model.GPModel",
                    "Optional[str]"
                ],
                "observers_column": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Tuple"
                ],
                "id_digitiser_column": [
                    "Text",
                    "str",
                    "models.User",
                    "src.autoks.core.gp_model.GPModel",
                    "Optional[str]"
                ],
                "filter_on_obs_txt": [
                    "bool",
                    "List[Dict[str,Any]]",
                    "Optional[List[str]]",
                    "str"
                ],
                "with_generic_table": [
                    "bool",
                    "List[Dict[str,Any]]",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        }
    },
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/repositories.py": {},
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/__init__.py": {},
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/migrations/21f661247023_insert_occhab_sample_data.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/migrations/2984569d5df6_create_occhab_schema.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/migrations/__init__.py": {},
    "GeoNature-master/contrib/gn_module_occhab/backend/gn_module_occhab/migrations/data/__init__.py": {},
    "GeoNature-master/contrib/gn_module_validation/setup.py": {},
    "GeoNature-master/contrib/gn_module_validation/backend/gn_module_validation/blueprint.py": {
        "get_synthese_data": {
            "name": "get_synthese_data",
            "location": 39,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "get_statusNames": {
            "name": "get_statusNames",
            "location": 212,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "post_status": {
            "name": "post_status",
            "location": 229,
            "return": [],
            "arguments": {
                "info_role": [],
                "id_synthese": []
            }
        },
        "get_validation_date": {
            "name": "get_validation_date",
            "location": 281,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "uuid": []
            }
        }
    },
    "GeoNature-master/contrib/gn_module_validation/backend/gn_module_validation/conf_schema_toml.py": {},
    "GeoNature-master/contrib/gn_module_validation/backend/gn_module_validation/__init__.py": {},
    "GeoNature-master/contrib/occtax/setup.py": {},
    "GeoNature-master/contrib/occtax/backend/occtax/blueprint.py": {
        "getReleves": {
            "name": "getReleves",
            "location": 60,
            "return": [
                "dict[typing.Text, typing.Union[int,FeatureCollection]]"
            ],
            "arguments": {
                "info_role": []
            }
        },
        "getOccurrences": {
            "name": "getOccurrences",
            "location": 125,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "getOneCounting": {
            "name": "getOneCounting",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "id_counting": []
            }
        },
        "getOneReleve": {
            "name": "getOneReleve",
            "location": 176,
            "return": [],
            "arguments": {
                "id_releve": [],
                "info_role": []
            }
        },
        "getViewReleveOccurrence": {
            "name": "getViewReleveOccurrence",
            "location": 214,
            "return": [
                "dict[typing.Text, FeatureCollection]",
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "info_role": []
            }
        },
        "insertOrUpdateOneReleve": {
            "name": "insertOrUpdateOneReleve",
            "location": 275,
            "return": [],
            "arguments": {
                "info_role": []
            }
        },
        "releveHandler": {
            "name": "releveHandler",
            "location": 399,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "createReleve": {
            "name": "createReleve",
            "location": 446,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "info_role": []
            }
        },
        "updateReleve": {
            "name": "updateReleve",
            "location": 490,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "id_releve": [],
                "info_role": []
            }
        },
        "occurrenceHandler": {
            "name": "occurrenceHandler",
            "location": 513,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "createOccurrence": {
            "name": "createOccurrence",
            "location": 547,
            "return": [],
            "arguments": {
                "id_releve": [],
                "info_role": []
            }
        },
        "updateOccurrence": {
            "name": "updateOccurrence",
            "location": 563,
            "return": [],
            "arguments": {
                "id_occurrence": [],
                "info_role": []
            }
        },
        "deleteOneReleve": {
            "name": "deleteOneReleve",
            "location": 578,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "id_releve": [],
                "info_role": []
            }
        },
        "deleteOneOccurence": {
            "name": "deleteOneOccurence",
            "location": 594,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "id_occ": []
            }
        },
        "deleteOneOccurenceCounting": {
            "name": "deleteOneOccurenceCounting",
            "location": 614,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "id_count": []
            }
        },
        "getDefaultNomenclatures": {
            "name": "getDefaultNomenclatures",
            "location": 630,
            "return": [],
            "arguments": {}
        },
        "export": {
            "name": "export",
            "location": 663,
            "return": [],
            "arguments": {
                "info_role": []
            }
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/conf_schema_toml.py": {},
    "GeoNature-master/contrib/occtax/backend/occtax/models.py": {
        "ReleveModel.user_is_observer_or_digitiser": {
            "name": "user_is_observer_or_digitiser",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ReleveModel.user_is_in_dataset_actor": {
            "name": "user_is_in_dataset_actor",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ReleveModel.user_is_allowed_to": {
            "name": "user_is_allowed_to",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "level": []
            }
        },
        "ReleveModel.get_releve_if_allowed": {
            "name": "get_releve_if_allowed",
            "location": 63,
            "return": [
                "ReleveModel"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ReleveModel.get_releve_cruved": {
            "name": "get_releve_cruved",
            "location": 78,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "user_cruved": []
            }
        },
        "TRelevesOccurrence.get_geofeature": {
            "name": "get_geofeature",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [
                    "list"
                ],
                "depth": [
                    "None"
                ]
            }
        },
        "VReleveOccurrence.get_geofeature": {
            "name": "get_geofeature",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "recursif": [
                    "bool"
                ]
            }
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/repositories.py": {
        "get_query_occtax_filters": {
            "name": "get_query_occtax_filters",
            "location": 203,
            "return": [],
            "arguments": {
                "args": [],
                "mappedView": [],
                "q": [],
                "from_generic_table": [
                    "bool"
                ],
                "obs_txt_column": [
                    "typing.Text"
                ]
            }
        },
        "get_query_occtax_order": {
            "name": "get_query_occtax_order",
            "location": 338,
            "return": [],
            "arguments": {
                "orderby": [],
                "mappedView": [],
                "q": [],
                "from_generic_table": [
                    "bool"
                ]
            }
        },
        "ReleveRepository.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "ReleveRepository.input": {
            "name": "input",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "col": [],
                "val": []
            }
        },
        "ReleveRepository.get_one": {
            "name": "get_one",
            "location": 40,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "id_releve": [],
                "info_user": []
            }
        },
        "ReleveRepository.update": {
            "name": "update",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "releve": [],
                "info_user": [],
                "geom": []
            }
        },
        "ReleveRepository.delete": {
            "name": "delete",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "id_releve": [],
                "info_user": []
            }
        },
        "ReleveRepository.filter_query_with_autorization": {
            "name": "filter_query_with_autorization",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ReleveRepository.filter_query_generic_table": {
            "name": "filter_query_generic_table",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ReleveRepository.get_all": {
            "name": "get_all",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "info_user": []
            }
        },
        "ReleveRepository.get_filtered_query": {
            "name": "get_filtered_query",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "info_user": [],
                "from_generic_table": [
                    "bool"
                ]
            }
        },
        "ReleveRepository.add_media_in_export": {
            "name": "add_media_in_export",
            "location": 175,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "columns": []
            }
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/schemas.py": {
        "remove_additional_none_val": {
            "name": "remove_additional_none_val",
            "location": 23,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "int",
                "Dict[str, List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "src.main.core.models.area.Area"
                ]
            }
        },
        "GeojsonSerializationField._serialize": {
            "name": "_serialize",
            "location": 28,
            "return": [
                "None",
                "Dict",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Awaitable[None]]",
                    "dict",
                    "Optional[Sequence[Any]]",
                    "Optional[Iterable[str]]",
                    "Union[None, str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "GeojsonSerializationField._deserialize": {
            "name": "_deserialize",
            "location": 38,
            "return": [
                "str",
                "Set[cmk.utils.type_defs.HostName]",
                "Dict[str, Any]",
                "dict",
                "Optional[float]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Union[str, bytes]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "ObserverSchema.make_observer": {
            "name": "make_observer",
            "location": 66,
            "return": [
                "int",
                "str",
                "Dict[str,Any]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, str]",
                    "Union[List, Dict]",
                    "Iterator[KT]"
                ]
            }
        },
        "CountingSchema.make_counting": {
            "name": "make_counting",
            "location": 87,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ReleveSchema.make_releve": {
            "name": "make_releve",
            "location": 131,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "GeojsonReleveSchema.make_geojsonReleve": {
            "name": "make_geojsonReleve",
            "location": 151,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GeojsonReleveSchema.set_": {
            "name": "set_",
            "location": 157,
            "return": [
                "bytes",
                "str",
                "Dict[str, Any]",
                "Optional[float]",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/utils.py": {
        "get_nomenclature_filters": {
            "name": "get_nomenclature_filters",
            "location": 31,
            "return": [
                "Tuple[list]",
                "Tuple[float,float]",
                "bool",
                "str"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "int"
                ]
            }
        },
        "is_already_joined": {
            "name": "is_already_joined",
            "location": 51,
            "return": [
                "bool",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "my_class": [
                    "str",
                    "Iterable[T]"
                ],
                "query": [
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "as_dict_with_add_cols": {
            "name": "as_dict_with_add_cols",
            "location": 62,
            "return": [
                "int",
                "Optional[List[str]]",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "export_view": [
                    "dict",
                    "str",
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "Dict[str, str]"
                ],
                "row": [
                    "str",
                    "Dict[str, Union[float, str]]",
                    "dict",
                    "Dict[Union[int, str], int]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "additional_cols_key": [
                    "str"
                ],
                "addition_cols_to_export": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Mapping[str, Any]",
                    "Dict[str, List[Any]]"
                ]
            }
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/__init__.py": {},
    "GeoNature-master/contrib/occtax/backend/occtax/migrations/29c199e07eaa_create_occtax_schema.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/migrations/494cb2245a43_trigger_comportement.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/migrations/944072911ff7_update_synthese_data_bug_occtax_trigger.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/migrations/addb71d8efad_create_occtax_export_view.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/migrations/cce08a64eb4f_insert_occtax_sample_data.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/migrations/f57107d2d0ad_get_default_nomenclature_value.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/contrib/occtax/backend/occtax/migrations/__init__.py": {},
    "GeoNature-master/contrib/occtax/backend/occtax/migrations/data/__init__.py": {},
    "GeoNature-master/data/__init__.py": {},
    "GeoNature-master/data/core/__init__.py": {},
    "GeoNature-master/data/scripts/import_ginco/import_ca.py": {
        "get_single_data": {
            "name": "get_single_data",
            "location": 69,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "node": [],
                "path": [],
                "tag": []
            }
        },
        "get_tuple_data": {
            "name": "get_tuple_data",
            "location": 85,
            "return": [
                "typing.Text",
                "list[str]"
            ],
            "arguments": {
                "node": [],
                "path": [],
                "tag": []
            }
        },
        "get_inner_data": {
            "name": "get_inner_data",
            "location": 100,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "object": [],
                "iter": [],
                "tag": []
            }
        },
        "get_known_af": {
            "name": "get_known_af",
            "location": 126,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "insert_update_t_acquisition_frameworks": {
            "name": "insert_update_t_acquisition_frameworks",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "CURRENT_AF_ROOT": [],
                "action": [],
                "cur_af_uuid": []
            }
        },
        "get_known_ds": {
            "name": "get_known_ds",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "insert_CA": {
            "name": "insert_CA",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": []
            }
        }
    },
    "GeoNature-master/data/scripts/import_ginco/import_mtd.py": {
        "get_single_data": {
            "name": "get_single_data",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [],
                "path": [],
                "tag": []
            }
        },
        "get_tuple_data": {
            "name": "get_tuple_data",
            "location": 85,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "node": [],
                "path": [],
                "tag": []
            }
        },
        "get_inner_data": {
            "name": "get_inner_data",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "object": [],
                "iter": [],
                "tag": []
            }
        },
        "get_known_protocols": {
            "name": "get_known_protocols",
            "location": 121,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "insert_sinp_datatype_protocols": {
            "name": "insert_sinp_datatype_protocols",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_protocol_name": [],
                "cur_protocol_desc": [],
                "cur_protocol_url": []
            }
        },
        "update_sinp_datatype_protocols": {
            "name": "update_sinp_datatype_protocols",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_protocol_name": [],
                "cur_protocol_desc": [],
                "cur_protocol_url": []
            }
        },
        "get_known_publications": {
            "name": "get_known_publications",
            "location": 157,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "insert_sinp_datatype_publications": {
            "name": "insert_sinp_datatype_publications",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_publication": [],
                "cur_url": []
            }
        },
        "update_sinp_datatype_publications": {
            "name": "update_sinp_datatype_publications",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_publication": [],
                "cur_url": []
            }
        },
        "get_known_organisms": {
            "name": "get_known_organisms",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "insert_organism": {
            "name": "insert_organism",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_organism_uuid": [],
                "cur_organism_name": []
            }
        },
        "update_organism": {
            "name": "update_organism",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_organism_uuid": [],
                "cur_organism_name": []
            }
        },
        "get_known_persons": {
            "name": "get_known_persons",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "insert_person": {
            "name": "insert_person",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_person_name": [],
                "cur_person_mail": []
            }
        },
        "update_person": {
            "name": "update_person",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_person_name": [],
                "cur_person_mail": []
            }
        },
        "get_known_af": {
            "name": "get_known_af",
            "location": 263,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "insert_update_t_acquisition_frameworks": {
            "name": "insert_update_t_acquisition_frameworks",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "CURRENT_AF_ROOT": [],
                "action": [],
                "cur_af_uuid": []
            }
        },
        "delete_cor_af": {
            "name": "delete_cor_af",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [],
                "cur_af_uuid": []
            }
        },
        "insert_cor_af_voletsinp": {
            "name": "insert_cor_af_voletsinp",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_volet_sinp": []
            }
        },
        "insert_cor_af_objectifs": {
            "name": "insert_cor_af_objectifs",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_objectif": []
            }
        },
        "insert_cor_af_territory": {
            "name": "insert_cor_af_territory",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_territory": []
            }
        },
        "insert_cor_af_publications": {
            "name": "insert_cor_af_publications",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "af_publications": []
            }
        },
        "insert_cor_af_actor_organism": {
            "name": "insert_cor_af_actor_organism",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_organism_uuid": [],
                "cur_actor_role": []
            }
        },
        "insert_cor_af_actor_person": {
            "name": "insert_cor_af_actor_person",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_person_name": [],
                "cur_actor_role": []
            }
        },
        "get_known_ds": {
            "name": "get_known_ds",
            "location": 487,
            "return": [],
            "arguments": {}
        },
        "insert_update_t_datasets": {
            "name": "insert_update_t_datasets",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "CURRENT_DS_ROOT": [],
                "action": [],
                "cur_ds_uuid": [],
                "id_ca": []
            }
        },
        "delete_cor_ds": {
            "name": "delete_cor_ds",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [],
                "cur_ds_uuid": []
            }
        },
        "insert_cor_ds_territory": {
            "name": "insert_cor_ds_territory",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_territory": []
            }
        },
        "insert_cor_ds_protocol": {
            "name": "insert_cor_ds_protocol",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_protocol": []
            }
        },
        "insert_cor_ds_actor_organism": {
            "name": "insert_cor_ds_actor_organism",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_organism_uuid": [],
                "cur_actor_role": []
            }
        },
        "insert_cor_ds_actor_person": {
            "name": "insert_cor_ds_actor_person",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_person_name": [],
                "cur_actor_role": []
            }
        },
        "insert_CA": {
            "name": "insert_CA",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": []
            }
        }
    },
    "GeoNature-master/data/scripts/import_mtd/import_jdd_and_ca.py": {
        "get_single_data": {
            "name": "get_single_data",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [],
                "path": [],
                "tag": []
            }
        },
        "get_tuple_data": {
            "name": "get_tuple_data",
            "location": 68,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "node": [],
                "path": [],
                "tag": []
            }
        },
        "get_inner_data": {
            "name": "get_inner_data",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "object": [],
                "iter": [],
                "tag": []
            }
        },
        "get_known_protocols": {
            "name": "get_known_protocols",
            "location": 104,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "insert_sinp_datatype_protocols": {
            "name": "insert_sinp_datatype_protocols",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_protocol_name": [],
                "cur_protocol_desc": [],
                "cur_protocol_url": []
            }
        },
        "update_sinp_datatype_protocols": {
            "name": "update_sinp_datatype_protocols",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_protocol_name": [],
                "cur_protocol_desc": [],
                "cur_protocol_url": []
            }
        },
        "get_known_publications": {
            "name": "get_known_publications",
            "location": 135,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "insert_sinp_datatype_publications": {
            "name": "insert_sinp_datatype_publications",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_publication": [],
                "cur_url": []
            }
        },
        "update_sinp_datatype_publications": {
            "name": "update_sinp_datatype_publications",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_publication": [],
                "cur_url": []
            }
        },
        "get_known_organisms": {
            "name": "get_known_organisms",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "insert_organism": {
            "name": "insert_organism",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_organism_uuid": [],
                "cur_organism_name": []
            }
        },
        "update_organism": {
            "name": "update_organism",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_organism_uuid": [],
                "cur_organism_name": []
            }
        },
        "get_known_persons": {
            "name": "get_known_persons",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "insert_person": {
            "name": "insert_person",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_person_name": [],
                "cur_person_mail": []
            }
        },
        "update_person": {
            "name": "update_person",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_person_name": [],
                "cur_person_mail": []
            }
        },
        "get_known_af": {
            "name": "get_known_af",
            "location": 219,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "insert_update_t_acquisition_frameworks": {
            "name": "insert_update_t_acquisition_frameworks",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "CURRENT_AF_ROOT": [],
                "action": [],
                "cur_af_uuid": []
            }
        },
        "delete_cor_af": {
            "name": "delete_cor_af",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [],
                "cur_af_uuid": []
            }
        },
        "insert_cor_af_voletsinp": {
            "name": "insert_cor_af_voletsinp",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_volet_sinp": []
            }
        },
        "insert_cor_af_objectifs": {
            "name": "insert_cor_af_objectifs",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_objectif": []
            }
        },
        "insert_cor_af_territory": {
            "name": "insert_cor_af_territory",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_territory": []
            }
        },
        "insert_cor_af_publications": {
            "name": "insert_cor_af_publications",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "af_publications": []
            }
        },
        "insert_cor_af_actor_organism": {
            "name": "insert_cor_af_actor_organism",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_organism_uuid": [],
                "cur_actor_role": []
            }
        },
        "insert_cor_af_actor_person": {
            "name": "insert_cor_af_actor_person",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_person_name": [],
                "cur_actor_role": []
            }
        },
        "get_known_ds": {
            "name": "get_known_ds",
            "location": 410,
            "return": [],
            "arguments": {}
        },
        "insert_update_t_datasets": {
            "name": "insert_update_t_datasets",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "CURRENT_DS_ROOT": [],
                "action": [],
                "cur_ds_uuid": [],
                "id_ca": []
            }
        },
        "delete_cor_ds": {
            "name": "delete_cor_ds",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [],
                "cur_ds_uuid": []
            }
        },
        "insert_cor_ds_territory": {
            "name": "insert_cor_ds_territory",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_territory": []
            }
        },
        "insert_cor_ds_protocol": {
            "name": "insert_cor_ds_protocol",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_protocol": []
            }
        },
        "insert_cor_ds_actor_organism": {
            "name": "insert_cor_ds_actor_organism",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_organism_uuid": [],
                "cur_actor_role": []
            }
        },
        "insert_cor_ds_actor_person": {
            "name": "insert_cor_ds_actor_person",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_person_name": [],
                "cur_actor_role": []
            }
        },
        "insert_CA": {
            "name": "insert_CA",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": []
            }
        }
    },
    "GeoNature-master/data/scripts/import_mtd/run_import_mtd.py": {
        "get_single_data": {
            "name": "get_single_data",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [],
                "tag": []
            }
        },
        "get_tuple_data": {
            "name": "get_tuple_data",
            "location": 61,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "path": [],
                "tag": []
            }
        },
        "get_inner_data": {
            "name": "get_inner_data",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "object": [],
                "iter": [],
                "tag": []
            }
        },
        "get_known_protocols": {
            "name": "get_known_protocols",
            "location": 97,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "insert_sinp_datatype_protocols": {
            "name": "insert_sinp_datatype_protocols",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_protocol_name": [],
                "cur_protocol_desc": [],
                "cur_protocol_url": []
            }
        },
        "update_sinp_datatype_protocols": {
            "name": "update_sinp_datatype_protocols",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_protocol_name": [],
                "cur_protocol_desc": [],
                "cur_protocol_url": []
            }
        },
        "get_known_publications": {
            "name": "get_known_publications",
            "location": 128,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "insert_sinp_datatype_publications": {
            "name": "insert_sinp_datatype_publications",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_publication": [],
                "cur_url": []
            }
        },
        "update_sinp_datatype_publications": {
            "name": "update_sinp_datatype_publications",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_publication": [],
                "cur_url": []
            }
        },
        "get_known_organisms": {
            "name": "get_known_organisms",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "insert_organism": {
            "name": "insert_organism",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_organism_uuid": [],
                "cur_organism_name": []
            }
        },
        "update_organism": {
            "name": "update_organism",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_organism_uuid": [],
                "cur_organism_name": []
            }
        },
        "get_known_persons": {
            "name": "get_known_persons",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "insert_person": {
            "name": "insert_person",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_person_name": [],
                "cur_person_mail": []
            }
        },
        "update_person": {
            "name": "update_person",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_person_name": [],
                "cur_person_mail": []
            }
        },
        "get_known_af": {
            "name": "get_known_af",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "insert_update_t_acquisition_frameworks": {
            "name": "insert_update_t_acquisition_frameworks",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [],
                "cur_af_uuid": []
            }
        },
        "delete_cor_af": {
            "name": "delete_cor_af",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [],
                "cur_af_uuid": []
            }
        },
        "insert_cor_af_voletsinp": {
            "name": "insert_cor_af_voletsinp",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_volet_sinp": []
            }
        },
        "insert_cor_af_objectifs": {
            "name": "insert_cor_af_objectifs",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_objectif": []
            }
        },
        "insert_cor_af_territory": {
            "name": "insert_cor_af_territory",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_territory": []
            }
        },
        "insert_cor_af_publications": {
            "name": "insert_cor_af_publications",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "af_publications": []
            }
        },
        "insert_cor_af_actor_organism": {
            "name": "insert_cor_af_actor_organism",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_organism_uuid": [],
                "cur_actor_role": []
            }
        },
        "insert_cor_af_actor_person": {
            "name": "insert_cor_af_actor_person",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_af_uuid": [],
                "cur_person_name": [],
                "cur_actor_role": []
            }
        },
        "get_known_ds": {
            "name": "get_known_ds",
            "location": 352,
            "return": [],
            "arguments": {}
        },
        "insert_update_t_datasets": {
            "name": "insert_update_t_datasets",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [],
                "cur_ds_uuid": []
            }
        },
        "delete_cor_ds": {
            "name": "delete_cor_ds",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [],
                "cur_ds_uuid": []
            }
        },
        "insert_cor_ds_territory": {
            "name": "insert_cor_ds_territory",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_territory": []
            }
        },
        "insert_cor_ds_protocol": {
            "name": "insert_cor_ds_protocol",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_protocol": []
            }
        },
        "insert_cor_ds_actor_organism": {
            "name": "insert_cor_ds_actor_organism",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_organism_uuid": [],
                "cur_actor_role": []
            }
        },
        "insert_cor_ds_actor_person": {
            "name": "insert_cor_ds_actor_person",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "cur_ds_uuid": [],
                "cur_person_name": [],
                "cur_actor_role": []
            }
        }
    },
    "GeoNature-master/data/utilisateurs/__init__.py": {},
    "GeoNature-master/docs/-old.conf.py": {},
    "GeoNature-master/docs/conf.py": {},
    "GeoNature-master/install/deploy_gn/config.sample.py": {},
    "GeoNature-master/install/deploy_gn/connection.py": {
        "connect": {
            "name": "connect",
            "location": 5,
            "return": [
                "Connection",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "GeoNature-master/install/deploy_gn/run.py": {
        "deploy": {
            "name": "deploy",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
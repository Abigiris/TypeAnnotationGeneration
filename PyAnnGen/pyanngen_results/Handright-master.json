{
    "Handright-master/setup.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "abs_path": {
            "name": "abs_path",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "Handright-master/handright/_core.py": {
        "handwrite": {
            "name": "handwrite",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "template": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "seed": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "mapper": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "_draft": {
            "name": "_draft",
            "location": 57,
            "return": [
                "Iterator[Page]",
                "typing.Generator[]"
            ],
            "arguments": {
                "text": [
                    "Tuple[int]",
                    "tuple[int]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Union[str, List]",
                    "str",
                    "Pattern",
                    "list[]",
                    "List[str]",
                    "typing.Pattern",
                    "list[str]"
                ],
                "templates": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "seed": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "_preprocess_text": {
            "name": "_preprocess_text",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_check_template": {
            "name": "_check_template",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "page": [
                    "str",
                    "bool"
                ],
                "tpl": []
            }
        },
        "_draw_page": {
            "name": "_draw_page",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "page": [
                    "int",
                    "float",
                    "Optional[str]",
                    "str"
                ],
                "text": [
                    "int"
                ],
                "start": [
                    "int"
                ],
                "tpl": [
                    "handright._template.Template"
                ],
                "rand": [
                    "random.Random"
                ]
            }
        },
        "_flow_layout": {
            "name": "_flow_layout",
            "location": 130,
            "return": [
                "float"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "int",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str",
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "char": [
                    "str",
                    "int",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ],
                "tpl": [
                    "handright._template.Template"
                ],
                "rand": [
                    "random.Random"
                ]
            }
        },
        "_grid_layout": {
            "name": "_grid_layout",
            "location": 144,
            "return": [
                "float"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "int",
                    "bytes"
                ],
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "str",
                    "int"
                ],
                "char": [
                    "str",
                    "int",
                    "bytes"
                ],
                "tpl": [
                    "handright._template.Template"
                ],
                "rand": [
                    "random.Random"
                ]
            }
        },
        "_get_font": {
            "name": "_get_font",
            "location": 155,
            "return": [
                "bool",
                "bytes",
                "Callable",
                "int",
                "str"
            ],
            "arguments": {
                "tpl": [
                    "handright._template.Template"
                ],
                "rand": [
                    "random.Random"
                ]
            }
        },
        "_draw_char": {
            "name": "_draw_char",
            "location": 165,
            "return": [
                "int"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "char": [
                    "str"
                ],
                "xy": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "font": [
                    "str",
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "_to_picklable": {
            "name": "_to_picklable",
            "location": 208,
            "return": [
                "str",
                "dict[str, list[str]]",
                "Type[Any]",
                "list[dict[str, str]]",
                "tuple[str]"
            ],
            "arguments": {
                "templates": [
                    "int",
                    "str"
                ]
            }
        },
        "_get_template": {
            "name": "_get_template",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "templates": [
                    "str",
                    "int",
                    "Container[str]"
                ],
                "index": [
                    "str",
                    "int",
                    "Container[str]"
                ]
            }
        },
        "_extract_strokes": {
            "name": "_extract_strokes",
            "location": 219,
            "return": [
                "handright._util.NumericOrderedSet"
            ],
            "arguments": {
                "bitmap": [
                    "str",
                    "bool",
                    "dict",
                    "int",
                    "Sequence[Tuple[float, float]]"
                ],
                "bbox": [
                    "tuple[typing.Union[int,int,int,int]]",
                    "Tuple[int, int, int, int]",
                    "int",
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "_extract_stroke": {
            "name": "_extract_stroke",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "bitmap": [
                    "int",
                    "bool"
                ],
                "start": [
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "strokes": [
                    "int",
                    "bool"
                ],
                "bbox": [
                    "Tuple[int, int, int, int]",
                    "int",
                    "tuple[typing.Union[int,int,int,int]]",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_draw_strokes": {
            "name": "_draw_strokes",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "bitmap": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "strokes": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "tpl": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "rand": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_draw_stroke": {
            "name": "_draw_stroke",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "bitmap": [
                    "bool",
                    "str",
                    "Union[str, int]"
                ],
                "stroke": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "tpl": [
                    "handright._template.Template"
                ],
                "center": [
                    "float"
                ],
                "rand": [
                    "float"
                ]
            }
        },
        "_rotate": {
            "name": "_rotate",
            "location": 302,
            "return": [
                "tuple[typing.Union[float,int]]",
                "tuple[]",
                "int",
                "float",
                "List[int]",
                "str",
                "Type"
            ],
            "arguments": {
                "center": [
                    "float"
                ],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "theta": [
                    "float"
                ]
            }
        },
        "_xy": {
            "name": "_xy",
            "location": 316,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "_x_y": {
            "name": "_x_y",
            "location": 320,
            "return": [
                "tuple[int]",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "xy": [
                    "int"
                ]
            }
        },
        "_Renderer.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "templates": [
                    "str",
                    "bool",
                    "typing.Type",
                    "Type['GenericList']",
                    "int"
                ],
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "Optional[Sequence]",
                    "Optional[Type]",
                    "Type",
                    "int"
                ]
            }
        },
        "_Renderer.__call__": {
            "name": "__call__",
            "location": 189,
            "return": [
                "PIL.Image.Image"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "str",
                    "Union[Callable, Coroutine]",
                    "typing.Callable[, ]",
                    "collections.abc.Coroutine"
                ]
            }
        },
        "_Renderer._perturb_and_merge": {
            "name": "_perturb_and_merge",
            "location": 197,
            "return": [
                "PIL.Image.Image"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "IO",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Handright-master/handright/_exceptions.py": {},
    "Handright-master/handright/_template.py": {
        "copy_templates": {
            "name": "copy_templates",
            "location": 314,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "templates": []
            }
        },
        "Template.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "background": [
                    "PIL.Image.Image"
                ],
                "font": [],
                "line_spacing": [
                    "None"
                ],
                "fill": [
                    "None"
                ],
                "left_margin": [
                    "int"
                ],
                "top_margin": [
                    "int"
                ],
                "right_margin": [
                    "int"
                ],
                "bottom_margin": [
                    "int"
                ],
                "word_spacing": [
                    "int"
                ],
                "line_spacing_sigma": [
                    "None"
                ],
                "font_size_sigma": [
                    "None"
                ],
                "word_spacing_sigma": [
                    "None"
                ],
                "end_chars": [
                    "str"
                ],
                "perturb_x_sigma": [
                    "None"
                ],
                "perturb_y_sigma": [
                    "None"
                ],
                "perturb_theta_sigma": [
                    "float"
                ],
                "features": []
            }
        },
        "Template.__eq__": {
            "name": "__eq__",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Template.set_background": {
            "name": "set_background",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "background": [
                    "PIL.Image.Image"
                ]
            }
        },
        "Template.set_line_spacing": {
            "name": "set_line_spacing",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_spacing": [
                    "None"
                ]
            }
        },
        "Template.set_font": {
            "name": "set_font",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font": []
            }
        },
        "Template.set_fill": {
            "name": "set_fill",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fill": [
                    "None"
                ]
            }
        },
        "Template.set_left_margin": {
            "name": "set_left_margin",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left_margin": [
                    "int"
                ]
            }
        },
        "Template.set_top_margin": {
            "name": "set_top_margin",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top_margin": [
                    "int"
                ]
            }
        },
        "Template.set_right_margin": {
            "name": "set_right_margin",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_margin": [
                    "int"
                ]
            }
        },
        "Template.set_bottom_margin": {
            "name": "set_bottom_margin",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bottom_margin": [
                    "int"
                ]
            }
        },
        "Template.set_word_spacing": {
            "name": "set_word_spacing",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_spacing": [
                    "int"
                ]
            }
        },
        "Template.set_features": {
            "name": "set_features",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": []
            }
        },
        "Template.set_line_spacing_sigma": {
            "name": "set_line_spacing_sigma",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_spacing_sigma": [
                    "None"
                ]
            }
        },
        "Template.set_font_size_sigma": {
            "name": "set_font_size_sigma",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_size_sigma": [
                    "None"
                ]
            }
        },
        "Template.set_word_spacing_sigma": {
            "name": "set_word_spacing_sigma",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_spacing_sigma": [
                    "None"
                ]
            }
        },
        "Template.set_end_chars": {
            "name": "set_end_chars",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "end_chars": [
                    "str"
                ]
            }
        },
        "Template.set_perturb_x_sigma": {
            "name": "set_perturb_x_sigma",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perturb_x_sigma": [
                    "None"
                ]
            }
        },
        "Template.set_perturb_y_sigma": {
            "name": "set_perturb_y_sigma",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perturb_y_sigma": [
                    "None"
                ]
            }
        },
        "Template.set_perturb_theta_sigma": {
            "name": "set_perturb_theta_sigma",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perturb_theta_sigma": [
                    "float"
                ]
            }
        },
        "Template.get_background": {
            "name": "get_background",
            "location": 231,
            "return": [
                "PIL.Image.Image"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_line_spacing": {
            "name": "get_line_spacing",
            "location": 234,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_font": {
            "name": "get_font",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Template.get_fill": {
            "name": "get_fill",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Template.get_left_margin": {
            "name": "get_left_margin",
            "location": 243,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_top_margin": {
            "name": "get_top_margin",
            "location": 246,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_right_margin": {
            "name": "get_right_margin",
            "location": 249,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_bottom_margin": {
            "name": "get_bottom_margin",
            "location": 252,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_word_spacing": {
            "name": "get_word_spacing",
            "location": 255,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_features": {
            "name": "get_features",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Template.get_line_spacing_sigma": {
            "name": "get_line_spacing_sigma",
            "location": 261,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_font_size_sigma": {
            "name": "get_font_size_sigma",
            "location": 264,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_word_spacing_sigma": {
            "name": "get_word_spacing_sigma",
            "location": 267,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_end_chars": {
            "name": "get_end_chars",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_perturb_x_sigma": {
            "name": "get_perturb_x_sigma",
            "location": 273,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_perturb_y_sigma": {
            "name": "get_perturb_y_sigma",
            "location": 276,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_perturb_theta_sigma": {
            "name": "get_perturb_theta_sigma",
            "location": 279,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.get_size": {
            "name": "get_size",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Template.release_font_resource": {
            "name": "release_font_resource",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Template.__repr__": {
            "name": "__repr__",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Handright-master/handright/_util.py": {
        "gauss": {
            "name": "gauss",
            "location": 11,
            "return": [
                "Union[(float, _T0)]"
            ],
            "arguments": {
                "rand": [
                    "random.Random"
                ],
                "mu": [
                    "_T0"
                ],
                "sigma": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "count_bands": {
            "name": "count_bands",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "mode": [
                    "str"
                ]
            }
        },
        "Page.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ],
                "color": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "num": [
                    "int"
                ]
            }
        },
        "Page.draw": {
            "name": "draw",
            "location": 38,
            "return": [
                "PIL.ImageDraw.ImageDraw"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.matrix": {
            "name": "matrix",
            "location": 41,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.size": {
            "name": "size",
            "location": 44,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.width": {
            "name": "width",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.height": {
            "name": "height",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumericOrderedSet.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typecode": [
                    "str"
                ],
                "privileged": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "NumericOrderedSet.add": {
            "name": "add",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "NumericOrderedSet.add_privileged": {
            "name": "add_privileged",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumericOrderedSet.__contains__": {
            "name": "__contains__",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "NumericOrderedSet.__iter__": {
            "name": "__iter__",
            "location": 91,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumericOrderedSet.clear": {
            "name": "clear",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumericOrderedSet.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumericOrderedSet.typecode": {
            "name": "typecode",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumericOrderedSet.privileged": {
            "name": "privileged",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Handright-master/handright/__init__.py": {},
    "Handright-master/handright/tests/test_util.py": {
        "test_count_bands": {
            "name": "test_count_bands",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_page_image": {
            "name": "test_page_image",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_page_num": {
            "name": "test_page_num",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_page_size": {
            "name": "test_page_size",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_page_width": {
            "name": "test_page_width",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_page_height": {
            "name": "test_page_height",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nos_privileged": {
            "name": "test_nos_privileged",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nos_typecode": {
            "name": "test_nos_typecode",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nos_order_with_privileged": {
            "name": "test_nos_order_with_privileged",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nos_order": {
            "name": "test_nos_order",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nos_len": {
            "name": "test_nos_len",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Handright-master/handright/tests/__init__.py": {},
    "Handright-master/tests/test_handwrite.py": {
        "get_default_template": {
            "name": "get_default_template",
            "location": 17,
            "return": [
                "handright._template.Template"
            ],
            "arguments": {}
        },
        "test_side_effect": {
            "name": "test_side_effect",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_null_text": {
            "name": "test_null_text",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blank_text": {
            "name": "test_blank_text",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_seed": {
            "name": "test_seed",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_line_and_page_breaks": {
            "name": "test_line_and_page_breaks",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_line_separators": {
            "name": "test_line_separators",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Handright-master/tests/test_multi_templates.py": {
        "get_default_templates": {
            "name": "get_default_templates",
            "location": 16,
            "return": [
                "Tuple[(handright._template.Template, handright._template.Template)]"
            ],
            "arguments": {}
        },
        "test_one_background": {
            "name": "test_one_background",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_seed": {
            "name": "test_seed",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mapper": {
            "name": "test_mapper",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_1_image": {
            "name": "test_1_image",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_l_image": {
            "name": "test_l_image",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgba_image": {
            "name": "test_rgba_image",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_image": {
            "name": "test_rgb_image",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Handright-master/tests/test_template.py": {
        "build_template": {
            "name": "build_template",
            "location": 11,
            "return": [
                "handright._template.Template"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_copy_templates": {
            "name": "test_copy_templates",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_release_font_resource": {
            "name": "test_release_font_resource",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Handright-master/tests/util.py": {
        "visually_equal": {
            "name": "visually_equal",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "image1": [],
                "image2": []
            }
        },
        "abs_path": {
            "name": "abs_path",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_short_text": {
            "name": "get_short_text",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_long_text": {
            "name": "get_long_text",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_default_font": {
            "name": "get_default_font",
            "location": 37,
            "return": [
                "PIL.ImageFont.FreeTypeFont"
            ],
            "arguments": {
                "size": []
            }
        }
    },
    "Handright-master/tests/watch.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_watch_flow_layout": {
            "name": "_watch_flow_layout",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_watch_gird_layout": {
            "name": "_watch_gird_layout",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_like_it": {
            "name": "_like_it",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Handright-master/tests/__init__.py": {}
}
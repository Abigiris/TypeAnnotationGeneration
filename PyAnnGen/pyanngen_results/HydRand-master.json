{
    "HydRand-master/local_launcher.py": {
        "start_node": {
            "name": "start_node",
            "location": 26,
            "return": [
                "subprocess.Popen[bytes]"
            ],
            "arguments": {
                "node_id": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "start_time": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "start_nodes": {
            "name": "start_nodes",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "None",
                    "datetime.datetime"
                ],
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "stop_nodes": {
            "name": "stop_nodes",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "kill_nodes": {
            "name": "kill_nodes",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cleanup": {
            "name": "cleanup",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/setup.py": {},
    "HydRand-master/evaluation/aws/manage.py": {
        "lookup": {
            "name": "lookup",
            "location": 237,
            "return": [
                "Instances"
            ],
            "arguments": {
                "what": []
            }
        },
        "get_instance_id": {
            "name": "get_instance_id",
            "location": 254,
            "return": [],
            "arguments": {
                "dnsname": []
            }
        },
        "status": {
            "name": "status",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "refresh": {
            "name": "refresh",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "what": []
            }
        },
        "refresh_until": {
            "name": "refresh_until",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "break_condition": [
                    "Callable[([], bool)]"
                ],
                "instances": [
                    "Instances"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "wait_for_startup": {
            "name": "wait_for_startup",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "what": []
            }
        },
        "start_instances": {
            "name": "start_instances",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [],
                "dryrun": []
            }
        },
        "stop_instances": {
            "name": "stop_instances",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [],
                "dryrun": []
            }
        },
        "terminate_instances": {
            "name": "terminate_instances",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [],
                "dryrun": []
            }
        },
        "reboot_instances": {
            "name": "reboot_instances",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [],
                "dryrun": []
            }
        },
        "_create_instances": {
            "name": "_create_instances",
            "location": 382,
            "return": [],
            "arguments": {
                "region": [],
                "num_instances": [],
                "instance_type": [],
                "dryrun": []
            }
        },
        "launch_instances": {
            "name": "launch_instances",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "instance_count_per_region": [],
                "dryrun": []
            }
        },
        "test_ssh_connection": {
            "name": "test_ssh_connection",
            "location": 450,
            "return": [
                "bool"
            ],
            "arguments": {
                "what": []
            }
        },
        "assign_security_group_to_all_instances": {
            "name": "assign_security_group_to_all_instances",
            "location": 470,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "group_name": []
            }
        },
        "create_or_update_security_groups": {
            "name": "create_or_update_security_groups",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ssh_connect": {
            "name": "ssh_connect",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ssh_run": {
            "name": "ssh_run",
            "location": 550,
            "return": [],
            "arguments": {
                "command": [],
                "raise_exception_on_failure": [],
                "sudo": [],
                "user": [],
                "stop_on_errors": [],
                "use_pty": [],
                "host_args": [],
                "shell": [],
                "encoding": [],
                "timeout": [],
                "greenlet_timeout": []
            }
        },
        "ssh_run_raw": {
            "name": "ssh_run_raw",
            "location": 580,
            "return": [],
            "arguments": {
                "command": [],
                "sudo": [],
                "user": [],
                "stop_on_errors": [],
                "use_pty": [],
                "host_args": [],
                "shell": [],
                "encoding": [],
                "timeout": [],
                "greenlet_timeout": []
            }
        },
        "Popen": {
            "name": "Popen",
            "location": 590,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "stdout": [],
                "stderr": []
            }
        },
        "load_ami_image_ids": {
            "name": "load_ami_image_ids",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_hydrand": {
            "name": "update_hydrand",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "always_unpack": []
            }
        },
        "update_hydrand_network_config": {
            "name": "update_hydrand_network_config",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cleanup_benchmark": {
            "name": "cleanup_benchmark",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_benchmark": {
            "name": "run_benchmark",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "num_nodes": [],
                "num_rounds": [],
                "duration": [],
                "propose_duration": [],
                "acknowledge_duration": [],
                "vote_duration": [],
                "startup_delay": [],
                "connection_lead_time": [],
                "simulate_adversary": []
            }
        },
        "collect_results": {
            "name": "collect_results",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {
                "num_nodes": [],
                "num_rounds": [],
                "propose_duration": [],
                "acknowledge_duration": [],
                "vote_duration": [],
                "tstart": [],
                "tend": [],
                "num_rounds_per_node_dict": []
            }
        },
        "collect_logs": {
            "name": "collect_logs",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "tstart": []
            }
        },
        "download_file": {
            "name": "download_file",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "tstart": [],
                "remote_path": [],
                "instances": []
            }
        },
        "InstanceState.parse": {
            "name": "parse",
            "location": 100,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Instance.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "region": [
                    "str"
                ],
                "dnsname": [
                    "str"
                ],
                "state": [
                    "InstanceState"
                ]
            }
        },
        "Instance.state": {
            "name": "state",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Instance.load_properties": {
            "name": "load_properties",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_dict": [],
                "status_dict": []
            }
        },
        "Instance.__repr__": {
            "name": "__repr__",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instances.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instances_dict": [
                    "Optional[Dict[(str, Instance)]]"
                ]
            }
        },
        "Instances.by_region": {
            "name": "by_region",
            "location": 151,
            "return": [
                "Union[(dict_items[(str, Any)], collections.defaultdict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "return_dict": []
            }
        },
        "Instances.ids": {
            "name": "ids",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instances.all": {
            "name": "all",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instances.running": {
            "name": "running",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instances.pending": {
            "name": "pending",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instances.stopped": {
            "name": "stopped",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instances.stopping": {
            "name": "stopping",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instances.terminated": {
            "name": "terminated",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instances.__len__": {
            "name": "__len__",
            "location": 187,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instances.__getitem__": {
            "name": "__getitem__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "index_or_key": [
                    "Union[(int, str)]"
                ]
            }
        },
        "Instances.get": {
            "name": "get",
            "location": 201,
            "return": [
                "Union[(Instance, _T1)]"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": [
                    "_T1"
                ]
            }
        },
        "Instances.__setitem__": {
            "name": "__setitem__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "Instance"
                ]
            }
        },
        "Instances.__repr__": {
            "name": "__repr__",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DryRunHandler.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dryrun": []
            }
        },
        "DryRunHandler.__enter__": {
            "name": "__enter__",
            "location": 222,
            "return": [
                "DryRunHandler"
            ],
            "arguments": {
                "self": [
                    "_TDryRunHandler"
                ]
            }
        },
        "DryRunHandler.__exit__": {
            "name": "__exit__",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "exc_traceback": []
            }
        },
        "SSHResult.__str__": {
            "name": "__str__",
            "location": 514,
            "return": [
                "Union[(str, List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHResult.__repr__": {
            "name": "__repr__",
            "location": 519,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "HydRand-master/hydrand/benchmark_pvss.py": {},
    "HydRand-master/hydrand/benchmark_verification.py": {
        "create_recovery_certificate_signature": {
            "name": "create_recovery_certificate_signature",
            "location": 43,
            "return": [
                "Signature",
                "str",
                "int",
                "T",
                "Callable"
            ],
            "arguments": {
                "keypair": [
                    "str",
                    "dict",
                    "int",
                    "dict[, ]",
                    "list",
                    "list[]"
                ],
                "rnd": [
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "verify_recovery_certificate_signature": {
            "name": "verify_recovery_certificate_signature",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "str",
                    "bool",
                    "hydrand.data.Signature",
                    "hydrand.ed25519.Point",
                    "int"
                ],
                "public_key": [
                    "str",
                    "bool",
                    "hydrand.data.Signature",
                    "hydrand.ed25519.Point",
                    "int"
                ],
                "rnd": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "get_verification_time_approx": {
            "name": "get_verification_time_approx",
            "location": 73,
            "return": [
                "float"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/hydrand/cliconfig.py": {},
    "HydRand-master/hydrand/config.py": {
        "init_arg_parser": {
            "name": "init_arg_parser",
            "location": 60,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "parse_cli_arguments": {
            "name": "parse_cli_arguments",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_info": {
            "name": "print_info",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_network_config": {
            "name": "load_network_config",
            "location": 158,
            "return": [
                "Tuple[(List[str], List[int])]"
            ],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 169,
            "return": [
                "list"
            ],
            "arguments": {
                "n": [
                    "Optional[str]",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "generate_sample_config": {
            "name": "generate_sample_config",
            "location": 214,
            "return": [
                "list"
            ],
            "arguments": {
                "n": [
                    "Optional[int]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "int",
                    "dict",
                    "dict[str, str]",
                    "Optional[list]",
                    "dict[, ]",
                    "list[]"
                ],
                "write_to_disk": [
                    "bool",
                    "int",
                    "str",
                    "List[str]",
                    "Iterable[T]",
                    "Type[Exception]"
                ]
            }
        },
        "save_config": {
            "name": "save_config",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "node_infos": [
                    "str",
                    "bytes",
                    "Union[int, float, str]"
                ]
            }
        }
    },
    "HydRand-master/hydrand/data.py": {
        "serialize": {
            "name": "serialize",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "bytes",
                    "Union[int, float]",
                    "float"
                ]
            }
        },
        "deserialize": {
            "name": "deserialize",
            "location": 223,
            "return": [
                "List[str]",
                "str",
                "int",
                "Optional[Union[Any, str]]"
            ],
            "arguments": {
                "buffer": [
                    "bool",
                    "str",
                    "int",
                    "dict[, ]",
                    "dict"
                ],
                "obj_type": [
                    "str",
                    "int",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "get_message_type": {
            "name": "get_message_type",
            "location": 626,
            "return": [
                "Optional[str]",
                "MessageType"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "typing.Type",
                    "Iterable",
                    "type"
                ]
            }
        },
        "get_message_sender": {
            "name": "get_message_sender",
            "location": 630,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Iterator",
                    "typing.Iterator"
                ]
            }
        },
        "get_message_round": {
            "name": "get_message_round",
            "location": 637,
            "return": [
                "Optional[Dict]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Serializeable.__post_init__": {
            "name": "__post_init__",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializeable.size": {
            "name": "size",
            "location": 36,
            "return": [
                "int",
                "Sequence[int]",
                "list[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializeable.serialized": {
            "name": "serialized",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializeable.serialize": {
            "name": "serialize",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializeable.deserialize": {
            "name": "deserialize",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[Any]",
                    "typing.Any",
                    "float",
                    "Callable",
                    "None",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "buffer": [
                    "str",
                    "T"
                ]
            }
        },
        "Serializeable._serialize": {
            "name": "_serialize",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "AnyStr",
                    "typing.AnyStr",
                    "Union[bytes, bytearray]",
                    "bool",
                    "bytes",
                    "str",
                    "Iterable[T]",
                    "bytearray",
                    "typing.Iterable[T]"
                ]
            }
        },
        "Serializeable._deserialize": {
            "name": "_deserialize",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "AnyStr",
                    "typing.AnyStr",
                    "Union[bytes, bytearray]",
                    "bool",
                    "bytes",
                    "str",
                    "Iterable[T]",
                    "bytearray",
                    "typing.Iterable[T]"
                ]
            }
        },
        "Signature.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Signature.create_later": {
            "name": "create_later",
            "location": 81,
            "return": [
                "Signature",
                "bool",
                "float"
            ],
            "arguments": {
                "get_data": [
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "dict",
                    "Optional[str]",
                    "dict[, ]"
                ],
                "signing_key": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "Optional[Union[int, str]]",
                    "None"
                ]
            }
        },
        "Signature.signed_data": {
            "name": "signed_data",
            "location": 89,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "IO[bytes]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signature._serialize": {
            "name": "_serialize",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Signature.__repr__": {
            "name": "__repr__",
            "location": 102,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer_or_buffersize": [
                    "float",
                    "int"
                ]
            }
        },
        "Serializer.write_bytes": {
            "name": "write_bytes",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Set[str]",
                    "List[str]",
                    "list",
                    "bytes",
                    "bytearray",
                    "List[Union[int, float]]"
                ]
            }
        },
        "Serializer.read_bytes": {
            "name": "read_bytes",
            "location": 124,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "num_bytes": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Serializer.write_u32": {
            "name": "write_u32",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "Serializer.write_u32s": {
            "name": "write_u32s",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "bytes",
                    "str",
                    "bytearray",
                    "List[int]",
                    "int",
                    "Set[str]",
                    "Tuple[int]"
                ]
            }
        },
        "Serializer.read_u32": {
            "name": "read_u32",
            "location": 137,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.read_u32s": {
            "name": "read_u32s",
            "location": 142,
            "return": [
                "list[]",
                "str",
                "int",
                "Type[T]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "num_values": [
                    "list[]",
                    "dict",
                    "list",
                    "Callable"
                ]
            }
        },
        "Serializer.write_signature": {
            "name": "write_signature",
            "location": 147,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Sequence[str]",
                    "SupportsBytes",
                    "Sequence[str]"
                ]
            }
        },
        "Serializer.write_signatures": {
            "name": "write_signatures",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "bytes",
                    "bool",
                    "int",
                    "Optional[int]",
                    "Iterable[T]"
                ]
            }
        },
        "Serializer.read_signature": {
            "name": "read_signature",
            "location": 154,
            "return": [
                "Signature",
                "int",
                "Set[str]",
                "List[str]",
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.read_signatures": {
            "name": "read_signatures",
            "location": 157,
            "return": [
                "list[Signature]",
                "List[List[int]]",
                "List[str]",
                "FrozenSet[int]",
                "Set[str]",
                "Set[int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "num_values": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "Serializer.write_hash": {
            "name": "write_hash",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "bytes",
                    "Union[int, slice]",
                    "int"
                ]
            }
        },
        "Serializer.write_hashes": {
            "name": "write_hashes",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "list[hydrand.merkle.Hash]",
                    "List[hydrand.merkle.Hash]",
                    "bool"
                ]
            }
        },
        "Serializer.read_hash": {
            "name": "read_hash",
            "location": 167,
            "return": [
                "Hash",
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.read_hashes": {
            "name": "read_hashes",
            "location": 170,
            "return": [
                "list[Hash]",
                "str",
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "num_values": [
                    "int",
                    "bytes",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "Serializer.write_scalar": {
            "name": "write_scalar",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str",
                    "bytes",
                    "hydrand.merkle.Hash"
                ]
            }
        },
        "Serializer.write_scalars": {
            "name": "write_scalars",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Serializer.read_scalar": {
            "name": "read_scalar",
            "location": 180,
            "return": [
                "List[str]",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.read_scalars": {
            "name": "read_scalars",
            "location": 183,
            "return": [
                "list[]",
                "List[str]",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "num_values": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]",
                    "Tuple[int]",
                    "tuple[int]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Serializer.write_point": {
            "name": "write_point",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str",
                    "bytes",
                    "hydrand.merkle.Hash"
                ]
            }
        },
        "Serializer.write_points": {
            "name": "write_points",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "list[]",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Serializer.read_point": {
            "name": "read_point",
            "location": 193,
            "return": [
                "List[str]",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.read_points": {
            "name": "read_points",
            "location": 196,
            "return": [
                "list[]",
                "List[str]",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "num_values": [
                    "int",
                    "float",
                    "List[int]",
                    "list[int]",
                    "Tuple[int]",
                    "tuple[int]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Serializer.write_object": {
            "name": "write_object",
            "location": 199,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Any",
                    "Any",
                    "slice"
                ]
            }
        },
        "Serializer.read_object": {
            "name": "read_object",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj_type": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[type]",
                    "typing.Type",
                    "Dict[str, type]",
                    "None",
                    "dict[str, typing.Type]"
                ]
            }
        },
        "RecoveryCertificate._serialize": {
            "name": "_serialize",
            "location": 242,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "RecoveryCertificate._deserialize": {
            "name": "_deserialize",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Dict[str, bool]",
                    "dict[str, bool]"
                ]
            }
        },
        "ConfirmationCertificate._serialize": {
            "name": "_serialize",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ConfirmationCertificate._deserialize": {
            "name": "_deserialize",
            "location": 265,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "int"
                ]
            }
        },
        "ShareCorrectnessProof._serialize": {
            "name": "_serialize",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "ShareCorrectnessProof._deserialize": {
            "name": "_deserialize",
            "location": 285,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Union[int, str, bool]"
                ]
            }
        },
        "ShareDecryptionProof._serialize": {
            "name": "_serialize",
            "location": 299,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ShareDecryptionProof._deserialize": {
            "name": "_deserialize",
            "location": 303,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "RecoveredShare._serialize": {
            "name": "_serialize",
            "location": 318,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "RecoveredShare._deserialize": {
            "name": "_deserialize",
            "location": 323,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "DatasetHeader.compute_size": {
            "name": "compute_size",
            "location": 339,
            "return": [
                "int",
                "Exception",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetHeader.compute_header_size": {
            "name": "compute_header_size",
            "location": 342,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetHeader.serialized_header": {
            "name": "serialized_header",
            "location": 350,
            "return": [
                "Optional[str]",
                "dict",
                "bytes",
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetHeader.header_digest": {
            "name": "header_digest",
            "location": 354,
            "return": [
                "Hash",
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetHeader._serialize": {
            "name": "_serialize",
            "location": 360,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DatasetHeader._deserialize": {
            "name": "_deserialize",
            "location": 368,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        },
        "Dataset.size": {
            "name": "size",
            "location": 386,
            "return": [
                "bool",
                "Exception",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.header_only": {
            "name": "header_only",
            "location": 396,
            "return": [
                "",
                "bool",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "List[str]",
                    "T",
                    "List[float]"
                ]
            }
        },
        "Dataset.compute_size": {
            "name": "compute_size",
            "location": 399,
            "return": [
                "float",
                "int",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset._serialize": {
            "name": "_serialize",
            "location": 410,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Tuple[int]",
                    "tuple[int]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Dataset._deserialize": {
            "name": "_deserialize",
            "location": 422,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MessageType.to_phase": {
            "name": "to_phase",
            "location": 442,
            "return": [
                "Phase",
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProposeMessage.type": {
            "name": "type",
            "location": 449,
            "return": [
                "Callable[[T], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProposeMessage.compute_size": {
            "name": "compute_size",
            "location": 457,
            "return": [
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProposeMessage._serialize": {
            "name": "_serialize",
            "location": 460,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "ProposeMessage._deserialize": {
            "name": "_deserialize",
            "location": 467,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "geometry.structs.Point",
                    "bool",
                    "str"
                ]
            }
        },
        "ProposeMessage.round_idx": {
            "name": "round_idx",
            "location": 475,
            "return": [
                "list",
                "str",
                "Tuple[int, int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcknowledgeMessage.type": {
            "name": "type",
            "location": 482,
            "return": [
                "Callable[[T], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcknowledgeMessage.compute_size": {
            "name": "compute_size",
            "location": 489,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcknowledgeMessage._serialize": {
            "name": "_serialize",
            "location": 492,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "AcknowledgeMessage._deserialize": {
            "name": "_deserialize",
            "location": 498,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "bool",
                    "geometry.structs.Point",
                    "str"
                ]
            }
        },
        "AcknowledgeMessage.round_idx": {
            "name": "round_idx",
            "location": 505,
            "return": [
                "int",
                "dict",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmMessage.type": {
            "name": "type",
            "location": 512,
            "return": [
                "Callable[[T], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmMessage.compute_size": {
            "name": "compute_size",
            "location": 519,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmMessage._serialize": {
            "name": "_serialize",
            "location": 522,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "ConfirmMessage._deserialize": {
            "name": "_deserialize",
            "location": 528,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "geometry.structs.Point",
                    "bool"
                ]
            }
        },
        "RecoverMessage.type": {
            "name": "type",
            "location": 538,
            "return": [
                "Callable[[T], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecoverMessage.compute_size": {
            "name": "compute_size",
            "location": 546,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecoverMessage._serialize": {
            "name": "_serialize",
            "location": 549,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "RecoverMessage._deserialize": {
            "name": "_deserialize",
            "location": 558,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bool",
                    "geometry.structs.Point"
                ]
            }
        },
        "SignedMessage.type": {
            "name": "type",
            "location": 575,
            "return": [
                "Callable[[T], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedMessage.compute_size": {
            "name": "compute_size",
            "location": 581,
            "return": [
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedMessage._serialize": {
            "name": "_serialize",
            "location": 584,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "SignedMessage._deserialize": {
            "name": "_deserialize",
            "location": 588,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "SignedMessage.verify_signature": {
            "name": "verify_signature",
            "location": 602,
            "return": [
                "float",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "Union[bytes, bytearray]",
                    "bytearray"
                ]
            }
        }
    },
    "HydRand-master/hydrand/merkle.py": {
        "compute_root": {
            "name": "compute_root",
            "location": 11,
            "return": [
                "Hash",
                "Dict[str, Any]",
                "\"Step\"",
                "dict"
            ],
            "arguments": {
                "data": [
                    "List[Hash]"
                ],
                "start": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "end": [
                    "int",
                    "bytes"
                ]
            }
        },
        "compute_branch": {
            "name": "compute_branch",
            "location": 33,
            "return": [
                "List[Hash]"
            ],
            "arguments": {
                "data": [
                    "List[Hash]"
                ],
                "target": [
                    "int"
                ]
            }
        },
        "branch_length": {
            "name": "branch_length",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "_compute_branch": {
            "name": "_compute_branch",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "List[Hash]"
                ],
                "target": [
                    "int"
                ],
                "result": [
                    "List[Hash]"
                ]
            }
        },
        "verify_branch": {
            "name": "verify_branch",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "branch": [
                    "List[Hash]"
                ],
                "root": [
                    "bytes"
                ],
                "target": [
                    "int"
                ],
                "num_leaves": [
                    "int"
                ]
            }
        },
        "get_leaf": {
            "name": "get_leaf",
            "location": 75,
            "return": [
                "Hash"
            ],
            "arguments": {
                "branch": [
                    "List[Hash]"
                ],
                "target": [
                    "int"
                ],
                "num_leaves": [
                    "int"
                ]
            }
        },
        "_eval_branch": {
            "name": "_eval_branch",
            "location": 86,
            "return": [
                "Tuple[(Hash, Any)]"
            ],
            "arguments": {
                "branch": [
                    "List[Hash]"
                ],
                "target": [
                    "int"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "pos": [
                    "int"
                ]
            }
        },
        "next_power_of_two": {
            "name": "next_power_of_two",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "v": [
                    "int"
                ]
            }
        }
    },
    "HydRand-master/hydrand/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "Optional[int]"
                ]
            }
        },
        "Node.run": {
            "name": "run",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.run_round": {
            "name": "run_round",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._run_round": {
            "name": "_run_round",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.startup": {
            "name": "startup",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.shutdown": {
            "name": "shutdown",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._shutdown": {
            "name": "_shutdown",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Node.running": {
            "name": "running",
            "location": 284,
            "return": [
                "bool",
                "Awaitable",
                "Iterable[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.shutdown_requested": {
            "name": "shutdown_requested",
            "location": 288,
            "return": [
                "bytes",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "dict",
                "Dict[str, digipathos.data.dataseDataset]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.beacon": {
            "name": "beacon",
            "location": 297,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.prev_beacon": {
            "name": "prev_beacon",
            "location": 301,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.compute_beacon": {
            "name": "compute_beacon",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "revealed_secret": [
                    "ed25519.Scalar"
                ],
                "recovered_secret": [
                    "ed25519.Point"
                ]
            }
        },
        "Node.leader": {
            "name": "leader",
            "location": 329,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.is_leader": {
            "name": "is_leader",
            "location": 333,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.compute_leader": {
            "name": "compute_leader",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._recovered_nodes": {
            "name": "_recovered_nodes",
            "location": 359,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bool"
                ]
            }
        },
        "Node.dataset": {
            "name": "dataset",
            "location": 383,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.propose_message": {
            "name": "propose_message",
            "location": 387,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.acknowlegde_messages": {
            "name": "acknowlegde_messages",
            "location": 391,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.recover_messages": {
            "name": "recover_messages",
            "location": 395,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.confirmations": {
            "name": "confirmations",
            "location": 399,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.confirmation_certificate": {
            "name": "confirmation_certificate",
            "location": 403,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.confirmation_counter": {
            "name": "confirmation_counter",
            "location": 407,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.recovery_certificate": {
            "name": "recovery_certificate",
            "location": 411,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.certificate_available": {
            "name": "certificate_available",
            "location": 415,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.last_confirmation_certificate": {
            "name": "last_confirmation_certificate",
            "location": 419,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[float]",
                "Tuple[str, str]",
                "Dict[int, List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.last_confirmed_round": {
            "name": "last_confirmed_round",
            "location": 423,
            "return": [
                "Optional[Union[str, Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.shares_for_recovery": {
            "name": "shares_for_recovery",
            "location": 427,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.propose": {
            "name": "propose",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.acknowledge": {
            "name": "acknowledge",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.confirm": {
            "name": "confirm",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.recover": {
            "name": "recover",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.lookup_share_for_recovery": {
            "name": "lookup_share_for_recovery",
            "location": 513,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.create_recovery_certificate_signature": {
            "name": "create_recovery_certificate_signature",
            "location": 541,
            "return": [
                "str",
                "int",
                "T",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.process_message": {
            "name": "process_message",
            "location": 557,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.process_messages": {
            "name": "process_messages",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.process_propose": {
            "name": "process_propose",
            "location": 617,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        },
        "Node.process_acknowledge": {
            "name": "process_acknowledge",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "Node.process_confirm": {
            "name": "process_confirm",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signed_msg": [
                    "hydrand.data.SignedMessage",
                    "str",
                    "bytes"
                ]
            }
        },
        "Node.process_recover": {
            "name": "process_recover",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "float"
                ]
            }
        },
        "Node.lookup_merkle_root": {
            "name": "lookup_merkle_root",
            "location": 730,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "bytes",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.create_confirmation_certificate": {
            "name": "create_confirmation_certificate",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_header_digest": [
                    "str",
                    "dict",
                    "int",
                    "list",
                    "bytes"
                ]
            }
        },
        "Node.recover_shared_secret": {
            "name": "recover_shared_secret",
            "location": 751,
            "return": [
                "int",
                "str",
                "List[str]",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.create_recovery_certificate": {
            "name": "create_recovery_certificate",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.verify_recovery_certificate_signature": {
            "name": "verify_recovery_certificate_signature",
            "location": 779,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "hydrand.data.Signature",
                    "hydrand.ed25519.Point",
                    "int",
                    "str",
                    "argonautica.config.Backend",
                    "argonautica.config.Version",
                    "float"
                ],
                "public_key": [
                    "ed25519.Point"
                ]
            }
        },
        "Node.verify_raw_message": {
            "name": "verify_raw_message",
            "location": 795,
            "return": [
                "Union[(ValueError, bool)]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bytes"
                ]
            }
        },
        "Node.verify_proposal": {
            "name": "verify_proposal",
            "location": 830,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "hydrand.data.ProposeMessage",
                    "int",
                    "sideeye.data.Trial",
                    "str",
                    "float"
                ]
            }
        },
        "Node.verify_dataset_header": {
            "name": "verify_dataset_header",
            "location": 841,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "hydrand.data.Signature",
                    "bytes",
                    "Dict[str, str]",
                    "int"
                ],
                "header_signature": [
                    "hydrand.data.Signature",
                    "bytes",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "Node.verify_revealed_secret": {
            "name": "verify_revealed_secret",
            "location": 851,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "revealed_secret": [
                    "ed25519.Scalar"
                ]
            }
        },
        "Node.actual_time": {
            "name": "actual_time",
            "location": 877,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "Node.virtual_time": {
            "name": "virtual_time",
            "location": 882,
            "return": [
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.round": {
            "name": "round",
            "location": 892,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.prev_round_with_same_leader": {
            "name": "prev_round_with_same_leader",
            "location": 899,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Iterable[Any]]",
                "List[str]",
                "T",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.phase": {
            "name": "phase",
            "location": 908,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.advance_round": {
            "name": "advance_round",
            "location": 911,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.update_phase": {
            "name": "update_phase",
            "location": 939,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "new_phase": [
                    "dict",
                    "Dict[str, Dict[str, float]]",
                    "int"
                ]
            }
        },
        "Node.virtual_round": {
            "name": "virtual_round",
            "location": 961,
            "return": [
                "int",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.next_timeout": {
            "name": "next_timeout",
            "location": 967,
            "return": [
                "int",
                "str",
                "type",
                "List[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.start_listening": {
            "name": "start_listening",
            "location": 993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.connect": {
            "name": "connect",
            "location": 1010,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.disconnect": {
            "name": "disconnect",
            "location": 1021,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.stop_listening": {
            "name": "stop_listening",
            "location": 1028,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.enqueue_message": {
            "name": "enqueue_message",
            "location": 1037,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "MessageQueueItem"
                ]
            }
        },
        "Node.next_message": {
            "name": "next_message",
            "location": 1043,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.dequeue_message": {
            "name": "dequeue_message",
            "location": 1050,
            "return": [
                "MessageQueueItem"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.drop_message": {
            "name": "drop_message",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.broadcast_message": {
            "name": "broadcast_message",
            "location": 1060,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "Node.receive_message": {
            "name": "receive_message",
            "location": 1078,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]"
                ]
            }
        },
        "Node.receive_messages": {
            "name": "receive_messages",
            "location": 1112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.receive_bytes": {
            "name": "receive_bytes",
            "location": 1116,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]"
                ]
            }
        },
        "Node.flag_adversary": {
            "name": "flag_adversary",
            "location": 1134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ]
            }
        }
    },
    "HydRand-master/hydrand/pvss.py": {
        "keygen": {
            "name": "keygen",
            "location": 64,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "share_random_secret": {
            "name": "share_random_secret",
            "location": 72,
            "return": [
                "tuple[typing.Optional[list[]]]"
            ],
            "arguments": {
                "receiver_public_keys": [],
                "recovery_threshold": [],
                "secret_scalar": [
                    "None"
                ]
            }
        },
        "decrypt_share": {
            "name": "decrypt_share",
            "location": 99,
            "return": [],
            "arguments": {
                "share": [],
                "secret_key": []
            }
        },
        "_listify": {
            "name": "_listify",
            "location": 103,
            "return": [
                "list[list[]]"
            ],
            "arguments": {}
        },
        "_DLEQ_prove": {
            "name": "_DLEQ_prove",
            "location": 110,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "g": [],
                "x": [],
                "h": [],
                "y": [],
                "\u03b1": []
            }
        },
        "_DLEQ_verify": {
            "name": "_DLEQ_verify",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "g": [],
                "x": [],
                "h": [],
                "y": [],
                "e": [],
                "z": []
            }
        },
        "_DLEQ_derive_challenge": {
            "name": "_DLEQ_derive_challenge",
            "location": 143,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "a1": [],
                "a2": []
            }
        },
        "prove_share_correctness": {
            "name": "prove_share_correctness",
            "location": 157,
            "return": [
                "ShareCorrectnessProof"
            ],
            "arguments": {
                "shares": [],
                "encrypted_shares": [],
                "public_keys": []
            }
        },
        "verify_shares": {
            "name": "verify_shares",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "encrypted_shares": [],
                "proof": [],
                "public_keys": [],
                "recovery_threshold": []
            }
        },
        "verify_secret": {
            "name": "verify_secret",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "secret": [],
                "commitments": [],
                "recovery_threshold": []
            }
        },
        "prove_share_decryption": {
            "name": "prove_share_decryption",
            "location": 226,
            "return": [
                "ShareDecryptionProof"
            ],
            "arguments": {
                "decrypted_share": [],
                "encrypted_share": [],
                "secret_key": [],
                "public_key": []
            }
        },
        "verify_decrypted_share": {
            "name": "verify_decrypted_share",
            "location": 234,
            "return": [],
            "arguments": {
                "decrypted_share": [],
                "encrypted_share": [],
                "public_key": [],
                "proof": []
            }
        },
        "recover": {
            "name": "recover",
            "location": 242,
            "return": [],
            "arguments": {
                "indexed_shares": []
            }
        },
        "_random_codeword": {
            "name": "_random_codeword",
            "location": 254,
            "return": [
                "list[]"
            ],
            "arguments": {
                "num_nodes": [],
                "recovery_threshold": []
            }
        },
        "_lagrange_coefficient": {
            "name": "_lagrange_coefficient",
            "location": 268,
            "return": [],
            "arguments": {
                "i": [],
                "idxs": []
            }
        },
        "Polynomial.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coeffs": []
            }
        },
        "Polynomial.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "Polynomial.random": {
            "name": "random",
            "location": 32,
            "return": [
                "Polynomial"
            ],
            "arguments": {
                "degree": [],
                "secret": [
                    "None"
                ]
            }
        }
    },
    "HydRand-master/hydrand/test_config.py": {
        "test_save_load": {
            "name": "test_save_load",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/hydrand/test_merkle.py": {
        "test_compose": {
            "name": "test_compose",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compose_uneven": {
            "name": "test_compose_uneven",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_branch_power_of_two": {
            "name": "test_branch_power_of_two",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "leaves": [
                    "str"
                ]
            }
        },
        "test_branch_power_all": {
            "name": "test_branch_power_all",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "leaves": [
                    "str"
                ]
            }
        }
    },
    "HydRand-master/hydrand/test_node.py": {
        "nodes_setup_and_teardown": {
            "name": "nodes_setup_and_teardown",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_run": {
            "name": "test_run",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/hydrand/test_node_stepwise.py": {
        "nodes_setup_and_teardown": {
            "name": "nodes_setup_and_teardown",
            "location": 25,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_start_nodes": {
            "name": "test_start_nodes",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initial_round_leader": {
            "name": "test_initial_round_leader",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_propose_basics": {
            "name": "test_propose_basics",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reveal_verification": {
            "name": "test_reveal_verification",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_round_step": {
            "name": "test_round_step",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_2rounds_step": {
            "name": "test_2rounds_step",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_round": {
            "name": "test_run_round",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recover_first_round": {
            "name": "test_recover_first_round",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/hydrand/test_pvss.py": {
        "test_dleq": {
            "name": "test_dleq",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dleq_invalid_challenge": {
            "name": "test_dleq_invalid_challenge",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dleq_non_equal": {
            "name": "test_dleq_non_equal",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dleq_parallel": {
            "name": "test_dleq_parallel",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verification_of_decrypted_share": {
            "name": "test_verification_of_decrypted_share",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_share_verification": {
            "name": "test_share_verification",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_share_verification_invalid_commitments": {
            "name": "test_share_verification_invalid_commitments",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_share_verification_invalid_challenge": {
            "name": "test_share_verification_invalid_challenge",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_share_verification_invalid_response": {
            "name": "test_share_verification_invalid_response",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recover_secret": {
            "name": "test_recover_secret",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_obtain_v0": {
            "name": "test_obtain_v0",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verify_secret": {
            "name": "test_verify_secret",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_verify_invalid_secret": {
            "name": "test_verify_invalid_secret",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/hydrand/test_serialization.py": {
        "get": {
            "name": "get",
            "location": 30,
            "return": [
                "list[]",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "obj_type": [
                    "bool",
                    "str",
                    "int"
                ],
                "num_elements": [
                    "int",
                    "None",
                    "bool",
                    "str",
                    "typing.Iterable[int]",
                    "Optional[Iterable[int]]",
                    "float",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "test_serialization": {
            "name": "test_serialization",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj_type": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_serialization_round_specific": {
            "name": "test_serialization_round_specific",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "obj_type": [
                    "bytes",
                    "int",
                    "Optional[int]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "config.config_reader.CustomConfigParser",
                    "bool"
                ],
                "kwargs": []
            }
        },
        "test_serialization_signed_message": {
            "name": "test_serialization_signed_message",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "msg_type": [
                    "str",
                    "utils.CWLObjectType"
                ],
                "kwargs": []
            }
        },
        "test_serialization_no_recovered_share": {
            "name": "test_serialization_no_recovered_share",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signature_verification": {
            "name": "test_signature_verification",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/hydrand/test_utils.py": {
        "all_equal": {
            "name": "all_equal",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "items": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "all_equal_to": {
            "name": "all_equal_to",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "items": [
                    "str",
                    "int",
                    "T"
                ],
                "target": [
                    "str",
                    "bool",
                    "list[float]",
                    "List[float]",
                    "Iterable[str]"
                ]
            }
        },
        "all_none": {
            "name": "all_none",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "items": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "force_close_port": {
            "name": "force_close_port",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "OpResult.__new__": {
            "name": "__new__",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Tuple[type]",
                    "tuple[typing.Type]",
                    "dict",
                    "dict[, ]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "values": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]",
                    "T",
                    "Optional[int]"
                ]
            }
        },
        "OpResult.all_none": {
            "name": "all_none",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpResult.all_not_none": {
            "name": "all_not_none",
            "location": 26,
            "return": [
                "bool",
                "dict",
                "tuple",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpResult.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "typing.Iterable[T]",
                    "Union[int, float]",
                    "int",
                    "float"
                ]
            }
        },
        "OpResult.__iter__": {
            "name": "__iter__",
            "location": 42,
            "return": [
                "Optional[mypy.nodes.Node]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpResult.__ne__": {
            "name": "__ne__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        },
        "OpResult.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpResult.__bool__": {
            "name": "__bool__",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyNode.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[hydrand.node.Node]"
                ]
            }
        },
        "AnyNode.__getattribute__": {
            "name": "__getattribute__",
            "location": 59,
            "return": [
                "OpResult",
                "AsyncGenerator",
                "type",
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "LeaderNode.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[hydrand.node.Node]"
                ]
            }
        },
        "LeaderNode.__getattribute__": {
            "name": "__getattribute__",
            "location": 78,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "NoLeaderNode.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[hydrand.node.Node]"
                ]
            }
        },
        "NoLeaderNode.__getattribute__": {
            "name": "__getattribute__",
            "location": 91,
            "return": [
                "OpResult",
                "AsyncGenerator",
                "type",
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "NoLeaderNode.__iter__": {
            "name": "__iter__",
            "location": 105,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyNode.__getattribute__.mux_func": {
            "name": "mux_func",
            "location": 66,
            "return": [
                "OpResult",
                "str",
                "bool",
                "int",
                "Sequence[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "NoLeaderNode.__getattribute__.mux_func": {
            "name": "mux_func",
            "location": 98,
            "return": [
                "OpResult",
                "str",
                "bool",
                "int",
                "Sequence[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/hydrand/utils.py": {
        "deterministic_random_bytes": {
            "name": "deterministic_random_bytes",
            "location": 8,
            "return": [
                "bytes"
            ],
            "arguments": {
                "num_bytes": [
                    "int"
                ],
                "purpose": [
                    "Optional[str]"
                ],
                "counter": [
                    "Optional[int]"
                ]
            }
        },
        "deterministic_random_scalar": {
            "name": "deterministic_random_scalar",
            "location": 20,
            "return": [
                "hydrand.ed25519.Scalar"
            ],
            "arguments": {
                "purpose": [
                    "Optional[str]"
                ],
                "counter": [
                    "Optional[int]"
                ]
            }
        },
        "determinisitic_random_keypair": {
            "name": "determinisitic_random_keypair",
            "location": 25,
            "return": [
                "hydrand.ed25519.KeyPair"
            ],
            "arguments": {
                "node_id": [
                    "int"
                ]
            }
        }
    },
    "HydRand-master/hydrand/__init__.py": {},
    "HydRand-master/hydrand/__main__.py": {},
    "HydRand-master/hydrand/ed25519/fe.py": {
        "add": {
            "name": "add",
            "location": 13,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ]
            }
        },
        "sub": {
            "name": "sub",
            "location": 17,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ]
            }
        },
        "mul": {
            "name": "mul",
            "location": 21,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ]
            }
        },
        "mod_inv": {
            "name": "mod_inv",
            "location": 25,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "div": {
            "name": "div",
            "location": 29,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float"
                ],
                "y": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "recover_x": {
            "name": "recover_x",
            "location": 40,
            "return": [
                "Optional[int]",
                "int",
                "Optional[float]",
                "None"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "Callable[[int], bool]",
                    "List[list]"
                ],
                "sign": []
            }
        }
    },
    "HydRand-master/hydrand/ed25519/testvectors.py": {},
    "HydRand-master/hydrand/ed25519/test_key_derivation.py": {
        "test_key_derivation": {
            "name": "test_key_derivation",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/hydrand/ed25519/test_point.py": {
        "test_base_multiply_by_one": {
            "name": "test_base_multiply_by_one",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiply_by_zero_fails": {
            "name": "test_multiply_by_zero_fails",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_times_zero_fails": {
            "name": "test_base_times_zero_fails",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_double_eq_times_2": {
            "name": "test_double_eq_times_2",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_double_inplace": {
            "name": "test_double_inplace",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minus": {
            "name": "test_minus",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minus_inplace": {
            "name": "test_minus_inplace",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiply_inplace": {
            "name": "test_multiply_inplace",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multipy_flipped_order": {
            "name": "test_multipy_flipped_order",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_neg_base_point": {
            "name": "test_neg_base_point",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_uniform": {
            "name": "test_from_uniform",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "HydRand-master/hydrand/ed25519/test_scalar.py": {
        "test_create": {
            "name": "test_create",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_random_scalar": {
            "name": "test_create_random_scalar",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_conversion": {
            "name": "test_int_conversion",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_random_range": {
            "name": "test_create_random_range",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_negative_scalar": {
            "name": "test_create_negative_scalar",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_out_of_range_scalar": {
            "name": "test_create_out_of_range_scalar",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_from_bytes_correct_byte_order": {
            "name": "test_create_from_bytes_correct_byte_order",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_from_bytes_little_endian": {
            "name": "test_create_from_bytes_little_endian",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_from_bytes_big_endian": {
            "name": "test_create_from_bytes_big_endian",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_from_invalid_bytes_length": {
            "name": "test_create_from_invalid_bytes_length",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_from_invalid_bytes_range": {
            "name": "test_create_from_invalid_bytes_range",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ]
            }
        },
        "test_sub": {
            "name": "test_sub",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_mul": {
            "name": "test_mul",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_iadd": {
            "name": "test_iadd",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_isub": {
            "name": "test_isub",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_imul": {
            "name": "test_imul",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "test_negate": {
            "name": "test_negate",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Tuple[Any, Any, Any]",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]"
                ]
            }
        },
        "test_negate_inplace": {
            "name": "test_negate_inplace",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "str",
                    "Tuple[Any, Any, Any]",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]"
                ]
            }
        },
        "test_inverse": {
            "name": "test_inverse",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_invert": {
            "name": "test_invert",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_div": {
            "name": "test_div",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "List[List[int]]",
                    "list[list[int]]",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "int",
                    "List[List[int]]",
                    "list[list[int]]",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "test_idiv": {
            "name": "test_idiv",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_pow": {
            "name": "test_pow",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_ipow": {
            "name": "test_ipow",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_inverse_does_not_exists": {
            "name": "test_inverse_does_not_exists",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invert_does_not_exists": {
            "name": "test_invert_does_not_exists",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "test_ne": {
            "name": "test_ne",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "HydRand-master/hydrand/ed25519/test_signatures.py": {
        "test_raw": {
            "name": "test_raw",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "float",
                    "int"
                ]
            }
        },
        "test_with_libsodium": {
            "name": "test_with_libsodium",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "typing.Type",
                    "Type[Tuple[Any, Any, Any]]",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list[list[int]]",
                    "List[List[int]]",
                    "T"
                ]
            }
        }
    },
    "HydRand-master/hydrand/ed25519/__init__.py": {
        "load_libsodium": {
            "name": "load_libsodium",
            "location": 23,
            "return": [
                "ctypes.CDLL"
            ],
            "arguments": {}
        },
        "_get_read_buffer_ptr": {
            "name": "_get_read_buffer_ptr",
            "location": 44,
            "return": [
                "ctypes.c_void_p"
            ],
            "arguments": {
                "value": [
                    "bytes"
                ],
                "offset": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "_get_write_buffer_ptr": {
            "name": "_get_write_buffer_ptr",
            "location": 54,
            "return": [
                "ctypes.c_void_p"
            ],
            "arguments": {
                "value": [
                    "bytes"
                ],
                "offset": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "H": {
            "name": "H",
            "location": 380,
            "return": [
                "Scalar",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "bytes"
                ]
            }
        },
        "_loadkey": {
            "name": "_loadkey",
            "location": 386,
            "return": [
                "Tuple[(Any, Any, bytes)]"
            ],
            "arguments": {
                "secret_key_seed": [
                    "bytes"
                ]
            }
        },
        "_sign": {
            "name": "_sign",
            "location": 404,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "secret_key_seed": [
                    "bytes"
                ],
                "message": [
                    "bytes"
                ]
            }
        },
        "sign_detached": {
            "name": "sign_detached",
            "location": 469,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "message": [
                    "bytes"
                ],
                "secret_key": [
                    "SecretKey"
                ]
            }
        },
        "verify_detached": {
            "name": "verify_detached",
            "location": 485,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "bytes"
                ],
                "signature": [
                    "bytes"
                ],
                "public_key": [
                    "Point"
                ]
            }
        },
        "verify_attached": {
            "name": "verify_attached",
            "location": 491,
            "return": [
                "bool"
            ],
            "arguments": {
                "signed_message": [
                    "bytes"
                ],
                "public_key": [
                    "Point"
                ]
            }
        },
        "load_libsodium.version_check": {
            "name": "version_check",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "required_version": [
                    "str"
                ]
            }
        },
        "Point.__new__": {
            "name": "__new__",
            "location": 75,
            "return": [
                "bytes",
                "str",
                "int"
            ],
            "arguments": {
                "self": [
                    "Type[Point]"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Point._create_raw": {
            "name": "_create_raw",
            "location": 90,
            "return": [
                "Point"
            ],
            "arguments": {
                "value": [
                    "bytes"
                ],
                "readonly": [
                    "bool",
                    "Tuple['T']",
                    "float",
                    "bytes",
                    "T",
                    "str"
                ]
            }
        },
        "Point.from_bytes": {
            "name": "from_bytes",
            "location": 104,
            "return": [
                "Point"
            ],
            "arguments": {
                "value": [
                    "bytes"
                ]
            }
        },
        "Point.from_uniform": {
            "name": "from_uniform",
            "location": 116,
            "return": [
                "Point"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "Point.base_times": {
            "name": "base_times",
            "location": 126,
            "return": [
                "Point"
            ],
            "arguments": {
                "scalar": [
                    "Scalar"
                ]
            }
        },
        "Point.x": {
            "name": "x",
            "location": 135,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.y": {
            "name": "y",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.sign": {
            "name": "sign",
            "location": 144,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.is_valid": {
            "name": "is_valid",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.__ne__": {
            "name": "__ne__",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.__add__": {
            "name": "__add__",
            "location": 164,
            "return": [
                "Point"
            ],
            "arguments": {
                "self": [
                    "_TPoint"
                ],
                "other": [
                    "Point"
                ]
            }
        },
        "Point.__sub__": {
            "name": "__sub__",
            "location": 172,
            "return": [
                "Point"
            ],
            "arguments": {
                "self": [
                    "_TPoint"
                ],
                "other": [
                    "Point"
                ]
            }
        },
        "Point.__mul__": {
            "name": "__mul__",
            "location": 180,
            "return": [
                "Point"
            ],
            "arguments": {
                "self": [
                    "_TPoint"
                ],
                "other": [
                    "Scalar"
                ]
            }
        },
        "Point.__bytes__": {
            "name": "__bytes__",
            "location": 190,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__copy__": {
            "name": "__copy__",
            "location": 193,
            "return": [
                "Point"
            ],
            "arguments": {
                "self": [
                    "_TPoint"
                ]
            }
        },
        "Point.__len__": {
            "name": "__len__",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__repr__": {
            "name": "__repr__",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scalar.__new__": {
            "name": "__new__",
            "location": 216,
            "return": [
                "int",
                "bool",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "str",
                    "int",
                    "typing.Callable[None, None]",
                    "Type",
                    "Type[T]",
                    "Callable[[None], None]"
                ],
                "scalar": [
                    "int"
                ]
            }
        },
        "Scalar.from_bytes": {
            "name": "from_bytes",
            "location": 223,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "Scalar.reduce": {
            "name": "reduce",
            "location": 232,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "Scalar._create_raw": {
            "name": "_create_raw",
            "location": 245,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "value": [
                    "bytes"
                ],
                "readonly": [
                    "bool",
                    "Tuple['T']",
                    "float",
                    "bytes",
                    "T",
                    "str"
                ]
            }
        },
        "Scalar.is_valid": {
            "name": "is_valid",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scalar.random": {
            "name": "random",
            "location": 266,
            "return": [
                "Scalar"
            ],
            "arguments": {}
        },
        "Scalar.__eq__": {
            "name": "__eq__",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Scalar.__ne__": {
            "name": "__ne__",
            "location": 276,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Scalar.__add__": {
            "name": "__add__",
            "location": 283,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "self": [
                    "_TScalar"
                ],
                "other": [
                    "Scalar"
                ]
            }
        },
        "Scalar.__sub__": {
            "name": "__sub__",
            "location": 290,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "self": [
                    "_TScalar"
                ],
                "other": [
                    "Scalar"
                ]
            }
        },
        "Scalar.__mul__": {
            "name": "__mul__",
            "location": 297,
            "return": [
                "float",
                "bool",
                "list[]",
                "int",
                "dict",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Scalar.__truediv__": {
            "name": "__truediv__",
            "location": 306,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "self": [
                    "_TScalar"
                ],
                "other": [
                    "Scalar"
                ]
            }
        },
        "Scalar.__neg__": {
            "name": "__neg__",
            "location": 311,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "self": [
                    "_TScalar"
                ]
            }
        },
        "Scalar.__pow__": {
            "name": "__pow__",
            "location": 319,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "self": [
                    "_TScalar"
                ],
                "other": [
                    "dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Scalar.negate": {
            "name": "negate",
            "location": 326,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "self": [
                    "_TScalar"
                ]
            }
        },
        "Scalar.inverse": {
            "name": "inverse",
            "location": 333,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "self": [
                    "_TScalar"
                ]
            }
        },
        "Scalar.invert": {
            "name": "invert",
            "location": 342,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "self": [
                    "_TScalar"
                ]
            }
        },
        "Scalar.__bytes__": {
            "name": "__bytes__",
            "location": 350,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scalar.__int__": {
            "name": "__int__",
            "location": 353,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scalar.__len__": {
            "name": "__len__",
            "location": 356,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scalar.__copy__": {
            "name": "__copy__",
            "location": 359,
            "return": [
                "Scalar"
            ],
            "arguments": {
                "self": [
                    "_TScalar"
                ]
            }
        },
        "Scalar.__repr__": {
            "name": "__repr__",
            "location": 362,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretKey.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecretKey.__bytes__": {
            "name": "__bytes__",
            "location": 376,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyPair.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "bytes"
                ]
            }
        },
        "KeyPair.__eq__": {
            "name": "__eq__",
            "location": 460,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KeyPair.random": {
            "name": "random",
            "location": 465,
            "return": [
                "KeyPair"
            ],
            "arguments": {}
        },
        "load_libsodium.version_check.astuple": {
            "name": "astuple",
            "location": 29,
            "return": [
                "tuple[]",
                "str",
                "Callable",
                "list"
            ],
            "arguments": {
                "version_str": [
                    "str",
                    "Mapping[str, str]",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "HydRand-master/hydrand/ed25519_ref/test_all.py": {
        "test": {
            "name": "test",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "v": [
                    "float",
                    "dict",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        }
    },
    "HydRand-master/hydrand/ed25519_ref/__init__.py": {
        "sha512": {
            "name": "sha512",
            "location": 10,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ]
            }
        },
        "modp_inv": {
            "name": "modp_inv",
            "location": 18,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "sha512_modq": {
            "name": "sha512_modq",
            "location": 29,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "typing.AnyStr",
                    "AnyStr",
                    "Union[str, bytes]"
                ]
            }
        },
        "point_add": {
            "name": "point_add",
            "location": 39,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "P": [
                    "str",
                    "list[int]",
                    "int",
                    "Collection[int]",
                    "List[int]",
                    "Iterator[Any]",
                    "Iterable[Any]"
                ],
                "Q": [
                    "str",
                    "list[int]",
                    "int",
                    "Collection[int]",
                    "List[int]",
                    "Iterator[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "point_mul": {
            "name": "point_mul",
            "location": 47,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "str"
                ],
                "P": [
                    "int",
                    "str"
                ]
            }
        },
        "point_equal": {
            "name": "point_equal",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "P": [
                    "str",
                    "int",
                    "Callable"
                ],
                "Q": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "recover_x": {
            "name": "recover_x",
            "location": 73,
            "return": [
                "Optional[int]",
                "None",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "Callable[[int], bool]",
                    "List[list]"
                ],
                "sign": []
            }
        },
        "point_compress": {
            "name": "point_compress",
            "location": 101,
            "return": [
                "bytes"
            ],
            "arguments": {
                "P": [
                    "list[]",
                    "int",
                    "str",
                    "tuple[]",
                    "list",
                    "tuple"
                ]
            }
        },
        "point_decompress": {
            "name": "point_decompress",
            "location": 108,
            "return": [
                "Optional[Tuple[(Any, int, int, Any)]]"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "secret_expand": {
            "name": "secret_expand",
            "location": 125,
            "return": [
                "Tuple[(int, bytes)]"
            ],
            "arguments": {
                "secret": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "secret_to_public": {
            "name": "secret_to_public",
            "location": 135,
            "return": [
                "bytes"
            ],
            "arguments": {
                "secret": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 143,
            "return": [
                "bytes"
            ],
            "arguments": {
                "secret": [
                    "str",
                    "bool",
                    "bytes",
                    "Union[str, bytes]"
                ],
                "msg": [
                    "str",
                    "bool",
                    "bytes",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "public": [
                    "bytes",
                    "int",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "msg": [
                    "str",
                    "int",
                    "bool",
                    "float",
                    "Tuple[Any, Any, Any]"
                ],
                "signature": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "HydRand-master/lib/test_load_lib.py": {
        "test_load_lib": {
            "name": "test_load_lib",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_lib.random_scalar": {
            "name": "random_scalar",
            "location": 9,
            "return": [
                "None",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "result": [
                    "None",
                    "int",
                    "List[bytes]",
                    "bytes"
                ]
            }
        }
    }
}
{
    "IFX-master/fabfile.py": {
        "host_type": {
            "name": "host_type",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "apt_install": {
            "name": "apt_install",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "uptime": {
            "name": "uptime",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "apt_upgrade": {
            "name": "apt_upgrade",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_postgres_su": {
            "name": "create_postgres_su",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clone_project": {
            "name": "clone_project",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_venv": {
            "name": "create_venv",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "virtualenv": {
            "name": "virtualenv",
            "location": 121,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "upgrade_pip": {
            "name": "upgrade_pip",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pip_install": {
            "name": "pip_install",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "m": {
            "name": "m",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "bool"
                ],
                "pty": [
                    "bool",
                    "str"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "send_test_mail": {
            "name": "send_test_mail",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "createsuperuser": {
            "name": "createsuperuser",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "git_pull": {
            "name": "git_pull",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_db": {
            "name": "create_db",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "migrate": {
            "name": "migrate",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_uwsgi_conf": {
            "name": "create_uwsgi_conf",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_nginx_conf": {
            "name": "create_nginx_conf",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "nginx_log": {
            "name": "nginx_log",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "uwsgi_log": {
            "name": "uwsgi_log",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "collect_static": {
            "name": "collect_static",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reload_app": {
            "name": "reload_app",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lock_requirements": {
            "name": "lock_requirements",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upgrade": {
            "name": "upgrade",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_backup": {
            "name": "make_backup",
            "location": 299,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "remote_backup_db": {
            "name": "remote_backup_db",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "backup_db": {
            "name": "backup_db",
            "location": 319,
            "return": [
                "None",
                "Path"
            ],
            "arguments": {}
        },
        "load_local_db_from_file": {
            "name": "load_local_db_from_file",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "load_local_db_from_latest": {
            "name": "load_local_db_from_latest",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install_celery": {
            "name": "install_celery",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "celery": {
            "name": "celery",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "Text",
                    "List[str]",
                    "str"
                ]
            }
        },
        "stop_celery": {
            "name": "stop_celery",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start_celery": {
            "name": "start_celery",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install_certbot": {
            "name": "install_certbot",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_cert": {
            "name": "get_cert",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "backup_cert": {
            "name": "backup_cert",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "renew_cert": {
            "name": "renew_cert",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup_certbot_crontab": {
            "name": "setup_certbot_crontab",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "IFX-master/manage.py": {},
    "IFX-master/curation/admin.py": {},
    "IFX-master/curation/apps.py": {},
    "IFX-master/curation/forms.py": {},
    "IFX-master/curation/models.py": {
        "Collection.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.title_he": {
            "name": "title_he",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.title_en": {
            "name": "title_en",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionMovie.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/curation/tests.py": {},
    "IFX-master/curation/urls.py": {},
    "IFX-master/curation/views.py": {},
    "IFX-master/curation/__init__.py": {},
    "IFX-master/curation/migrations/0001_initial.py": {},
    "IFX-master/curation/migrations/0002_auto_20180223_1437.py": {},
    "IFX-master/curation/migrations/__init__.py": {},
    "IFX-master/editing_logs/admin.py": {},
    "IFX-master/editing_logs/api.py": {
        "fix": {
            "name": "fix",
            "location": 8,
            "return": [
                "datetime_@_datetime",
                "str",
                "models.characters.mods_base.SlotTypes",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 14,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "entity": [
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "flask_sqlalchemy.Model",
                    "Callable"
                ]
            }
        },
        "Recorder.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "None",
                    "int",
                    "bool",
                    "server.models.User",
                    "lms.lmsdb.models.User"
                ],
                "note": [
                    "None",
                    "int",
                    "bool",
                    "server.models.User",
                    "lms.lmsdb.models.User"
                ],
                "using": [
                    "None",
                    "str",
                    "app.models.models.User"
                ],
                "savepoint": [
                    "None",
                    "str",
                    "app.models.models.User"
                ]
            }
        },
        "Recorder.__enter__": {
            "name": "__enter__",
            "location": 25,
            "return": [
                "Recorder"
            ],
            "arguments": {
                "self": [
                    "_TRecorder@@Recorder@@"
                ]
            }
        },
        "Recorder.add_row": {
            "name": "add_row",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "entity": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "Recorder.record_addition": {
            "name": "record_addition",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "T",
                    "Exception",
                    "Callable",
                    "dict"
                ]
            }
        },
        "Recorder.record_update_before": {
            "name": "record_update_before",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "dict",
                    "tildes.models.scraper.ScraperResult",
                    "Exception",
                    "tartare.core.models.Job",
                    "Dict[str, str]"
                ]
            }
        },
        "Recorder.record_update_after": {
            "name": "record_update_after",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "dict",
                    "Type['Declared']"
                ]
            }
        },
        "Recorder.record_delete": {
            "name": "record_delete",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "Optional[Any]",
                    "dict",
                    "zilencer.models.RemoteZulipServer"
                ]
            }
        },
        "Recorder.create": {
            "name": "create",
            "location": 77,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "kls": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[datetime.datetime]",
                    "List[transaction.Transaction]"
                ]
            }
        },
        "Recorder.save": {
            "name": "save",
            "location": 82,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "Set[str]"
                ]
            }
        },
        "Recorder.soft_delete": {
            "name": "soft_delete",
            "location": 89,
            "return": [
                "dict",
                "Any",
                "bytes",
                "MutableMapping",
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "int",
                    "List[Tuple[float, str]]",
                    "List[\"Outcome\"]",
                    "currencies.models.Currency"
                ]
            }
        }
    },
    "IFX-master/editing_logs/apps.py": {},
    "IFX-master/editing_logs/models.py": {
        "LogItem.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/editing_logs/tests.py": {},
    "IFX-master/editing_logs/urls.py": {},
    "IFX-master/editing_logs/views.py": {
        "EntityLogItemListView.get_breadcrumbs": {
            "name": "get_breadcrumbs",
            "location": 29,
            "return": [
                "Tuple[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityLogItemListView.get_queryset": {
            "name": "get_queryset",
            "location": 34,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/editing_logs/__init__.py": {},
    "IFX-master/editing_logs/migrations/0001_initial.py": {},
    "IFX-master/editing_logs/migrations/0002_logitem_user.py": {},
    "IFX-master/editing_logs/migrations/0003_auto_20180223_1437.py": {},
    "IFX-master/editing_logs/migrations/0004_logitemrow_data.py": {},
    "IFX-master/editing_logs/migrations/0005_auto_20180420_1149.py": {},
    "IFX-master/editing_logs/migrations/__init__.py": {},
    "IFX-master/enrich/admin.py": {},
    "IFX-master/enrich/apps.py": {},
    "IFX-master/enrich/forms.py": {},
    "IFX-master/enrich/lookup.py": {
        "create_suggestion": {
            "name": "create_suggestion",
            "location": 27,
            "return": [
                "django.db.models.Model",
                "fastapi.openapi.models.OAuthFlows",
                "int",
                "django.contrib.auth.models.AbstractBaseUser",
                "Dict[str, Any]"
            ],
            "arguments": {
                "o": [
                    "Optional[int]",
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "query_suggestion": {
            "name": "query_suggestion",
            "location": 37,
            "return": [
                "Union[(bool, _T0)]"
            ],
            "arguments": {
                "o": [
                    "List[str]",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_missing_links": {
            "name": "create_missing_links",
            "location": 60,
            "return": [
                "Counter[nothing]"
            ],
            "arguments": {
                "obj": [
                    "core_lib.core.models.Venue",
                    "Dict[str, Any]",
                    "Dict[Hashable, Any]",
                    "int"
                ]
            }
        },
        "get_movies_for_person": {
            "name": "get_movies_for_person",
            "location": 97,
            "return": [
                "Generator[(SparqlMovie, Any, None)]"
            ],
            "arguments": {
                "wikidata_id": [
                    "str",
                    "int"
                ]
            }
        },
        "create_sitelinks": {
            "name": "create_sitelinks",
            "location": 115,
            "return": [
                "Counter[nothing]"
            ],
            "arguments": {
                "obj": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "models.characters.states.Stateful"
                ]
            }
        }
    },
    "IFX-master/enrich/models.py": {
        "Suggestion.found": {
            "name": "found",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Suggestion.status_tag": {
            "name": "status_tag",
            "location": 152,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Suggestion.search_url": {
            "name": "search_url",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/enrich/tasks.py": {
        "lookup_suggestion_by_id": {
            "name": "lookup_suggestion_by_id",
            "location": 8,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "int"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "IFX-master/enrich/tests.py": {
        "WikidataTestCase.test_get_one_wikidata_result": {
            "name": "test_get_one_wikidata_result",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikidataTestCase.test_get_many_wikidata_result": {
            "name": "test_get_many_wikidata_result",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikidataTestCase.test_get_no_wikidata_result": {
            "name": "test_get_no_wikidata_result",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupTestCase.test_query_suggestion": {
            "name": "test_query_suggestion",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupTestCase.test_query_movie_people": {
            "name": "test_query_movie_people",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyTestCase.setUp": {
            "name": "setUp",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyTestCase.test_verify_movie_correct": {
            "name": "test_verify_movie_correct",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyTestCase.test_verify_movie_wrong": {
            "name": "test_verify_movie_wrong",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyTestCase.test_verify_and_update_movie": {
            "name": "test_verify_and_update_movie",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyTestCase.test_verify_person_correct": {
            "name": "test_verify_person_correct",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyTestCase.test_verify_movie_suggestion": {
            "name": "test_verify_movie_suggestion",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyTestCase.test_verify_person_suggestion": {
            "name": "test_verify_person_suggestion",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/enrich/types.py": {},
    "IFX-master/enrich/urls.py": {},
    "IFX-master/enrich/verify.py": {
        "get_people_by_pid": {
            "name": "get_people_by_pid",
            "location": 17,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "movie": [
                    "str",
                    "dict",
                    "int",
                    "bytes",
                    "models.seat_group.SeatGroup",
                    "ticketing.models.ticket_bundle.TicketBundle"
                ]
            }
        },
        "get_movies_by_pid": {
            "name": "get_movies_by_pid",
            "location": 24,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "person": [
                    "str",
                    "dict",
                    "int",
                    "bytes",
                    "models.seat_group.SeatGroup",
                    "ticketing.models.ticket_bundle.TicketBundle"
                ]
            }
        },
        "is_same_person": {
            "name": "is_same_person",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "claim": [
                    "int",
                    "zerver.models.Realm"
                ],
                "person": [
                    "int",
                    "zerver.models.Realm"
                ]
            }
        },
        "is_same_movie": {
            "name": "is_same_movie",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "claim": [
                    "int",
                    "Optional[abilian.core.models.Model]",
                    "bool"
                ],
                "movie": [
                    "int",
                    "Optional[abilian.core.models.Model]",
                    "bool"
                ]
            }
        },
        "validate_wikidata_movie_people": {
            "name": "validate_wikidata_movie_people",
            "location": 51,
            "return": [
                "dict"
            ],
            "arguments": {
                "wikidata_id": [
                    "str",
                    "Union[str, int]",
                    "int",
                    "Optional[str]"
                ],
                "people_by_pid": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, tonga.models.structs.positioning.BasePositioning]",
                    "app.utils.types.JSON",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "validate_wikidata_person_movies": {
            "name": "validate_wikidata_person_movies",
            "location": 67,
            "return": [
                "dict"
            ],
            "arguments": {
                "wikidata_id": [
                    "str",
                    "int",
                    "transfer.models.ItemID",
                    "Optional[str]"
                ],
                "movies_by_pid": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, tonga.models.structs.positioning.BasePositioning]",
                    "app.utils.types.JSON",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "verify_movie": {
            "name": "verify_movie",
            "location": 84,
            "return": [
                "dict"
            ],
            "arguments": {
                "m": [
                    "int",
                    "float"
                ],
                "wikidata_id": [
                    "bytes",
                    "int"
                ]
            }
        },
        "verify_person": {
            "name": "verify_person",
            "location": 92,
            "return": [
                "dict"
            ],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "bytes"
                ],
                "wikidata_id": [
                    "str",
                    "Optional[int]",
                    "Union['KspNativeControl', int]"
                ]
            }
        },
        "verify_and_update_entity": {
            "name": "verify_and_update_entity",
            "location": 100,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "e": [
                    "str",
                    "bool",
                    "Union[str, int]"
                ],
                "wikidata_id": [
                    "str",
                    "int",
                    "Union[server.models.Bike, int]"
                ]
            }
        },
        "verify_suggestion": {
            "name": "verify_suggestion",
            "location": 124,
            "return": [
                "Tuple[(bool, int)]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "IFX-master/enrich/views.py": {
        "SuggestionForceLookupView.post": {
            "name": "post",
            "location": 43,
            "return": [
                "zerver.models.UserProfile",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "SetWikiDataIDView.post": {
            "name": "post",
            "location": 59,
            "return": [
                "int",
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "Callable[[list], None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "IFX-master/enrich/wikidata.py": {
        "get_suggestions": {
            "name": "get_suggestions",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "query": [
                    "Optional[str]",
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ],
                "lang": [
                    "Text",
                    "Optional[str]",
                    "Optional[Dict]",
                    "Dict[str,Any]",
                    "str",
                    "int"
                ]
            }
        },
        "get_wikidata_result": {
            "name": "get_wikidata_result",
            "location": 34,
            "return": [
                "bool",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "query": [
                    "Optional[str]",
                    "Optional[bool]",
                    "List['Product']"
                ],
                "classifier_pid": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "get_props_by_pids": {
            "name": "get_props_by_pids",
            "location": 54,
            "return": [
                "dict"
            ],
            "arguments": {
                "qid": [
                    "str",
                    "dict",
                    "bool"
                ],
                "pids": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_sitelinks_by_linktype": {
            "name": "get_sitelinks_by_linktype",
            "location": 68,
            "return": [
                "dict"
            ],
            "arguments": {
                "qid": [
                    "str",
                    "dict",
                    "bool"
                ],
                "linktypes": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "TooManyResults.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "IFX-master/enrich/__init__.py": {},
    "IFX-master/enrich/management/__init__.py": {},
    "IFX-master/enrich/management/commands/create_suggestions.py": {
        "create_suggestions": {
            "name": "create_suggestions",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "qs": [
                    "str",
                    "Dict[str, str]",
                    "Dict[int, Set[str]]",
                    "Optional[str]"
                ],
                "attr": [
                    "str",
                    "Optional[str]",
                    "Type[T]",
                    "static_frame.core.util.NameType",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/enrich/management/commands/lookup_sitelinks.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workers": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "IFX-master/enrich/management/commands/lookup_suggestions.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workers": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "IFX-master/enrich/management/commands/lookup_wikidata_props.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workers": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "IFX-master/enrich/management/commands/verify_suggestions.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workers": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "IFX-master/enrich/management/commands/__init__.py": {},
    "IFX-master/enrich/migrations/0001_initial.py": {},
    "IFX-master/enrich/migrations/0002_auto_20180223_1437.py": {},
    "IFX-master/enrich/migrations/__init__.py": {},
    "IFX-master/general/admin.py": {},
    "IFX-master/general/apps.py": {},
    "IFX-master/general/entities.py": {},
    "IFX-master/general/fields.py": {
        "LocaleModelChoiceField.label_from_instance": {
            "name": "label_from_instance",
            "location": 6,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "django.db.migrations.state.StateApps",
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "IFX-master/general/models.py": {},
    "IFX-master/general/tests.py": {},
    "IFX-master/general/views.py": {
        "HomePage.random_movies": {
            "name": "random_movies",
            "location": 20,
            "return": [
                "str",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "HomePage.random_people": {
            "name": "random_people",
            "location": 23,
            "return": [
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Optional[float]",
                    "float",
                    "bool"
                ]
            }
        },
        "AboutView.get_html_content": {
            "name": "get_html_content",
            "location": 32,
            "return": [
                "int",
                "str",
                "recidiviz.utils.regions.Region",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/general/__init__.py": {},
    "IFX-master/general/migrations/__init__.py": {},
    "IFX-master/general/templatetags/ifx.py": {
        "switch_lang": {
            "name": "switch_lang",
            "location": 18,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "pagination": {
            "name": "pagination",
            "location": 24,
            "return": [
                "Dict[Text,]",
                "str",
                "Dict[str,Any]",
                "Optional[str]",
                "Dict"
            ],
            "arguments": {
                "context": [
                    "int",
                    "Callable",
                    "str"
                ],
                "page_obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "qs": {
            "name": "qs",
            "location": 32,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        },
        "u": {
            "name": "u",
            "location": 38,
            "return": [
                "bool",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "instance": [
                    "str"
                ],
                "title_attr": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "autoescape": [
                    "None",
                    "bool",
                    "Callable",
                    "List"
                ]
            }
        },
        "bd": {
            "name": "bd",
            "location": 52,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "bool",
                    "Callable[[], None]"
                ],
                "field": [
                    "str",
                    "bool",
                    "Callable[[], None]"
                ]
            }
        },
        "ut": {
            "name": "ut",
            "location": 58,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "instance": [
                    "django.db.models.Model",
                    "bool",
                    "int",
                    "str",
                    "List[float]"
                ],
                "field": [
                    "Text",
                    "str",
                    "django.db.models.fields.Field",
                    "Dict[str,Any]",
                    "ValueError",
                    "Type",
                    "Dict"
                ]
            }
        },
        "un": {
            "name": "un",
            "location": 65,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "bdtitle": {
            "name": "bdtitle",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "bdtitle_plus": {
            "name": "bdtitle_plus",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "ut_plus": {
            "name": "ut_plus",
            "location": 85,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "List[str]"
                ],
                "field": [
                    "str",
                    "Text"
                ]
            }
        },
        "utpp": {
            "name": "utpp",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instance": [
                    "django.db.models.Model",
                    "bool",
                    "int",
                    "str",
                    "List[float]"
                ],
                "field": [
                    "str",
                    "Text"
                ]
            }
        },
        "bdorder": {
            "name": "bdorder",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "duration": {
            "name": "duration",
            "location": 107,
            "return": [
                "str",
                "int",
                "List[str]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "google_search": {
            "name": "google_search",
            "location": 112,
            "return": [
                "Dict[Text,Text]",
                "int",
                "Callable",
                "cmk.utils.type_defs.UserId",
                "Dict",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "imdb_search": {
            "name": "imdb_search",
            "location": 122,
            "return": [
                "Dict[Text,Text]",
                "int",
                "Callable",
                "cmk.utils.type_defs.UserId",
                "Dict",
                "Dict[str,str]",
                "str"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "wikidata_search": {
            "name": "wikidata_search",
            "location": 132,
            "return": [
                "Dict[Text,Text]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "wikipedia_search": {
            "name": "wikipedia_search",
            "location": 142,
            "return": [
                "Dict[Text,Text]",
                "Tuple[float,float]",
                "str",
                "bool",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "lang": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "q": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "search_links": {
            "name": "search_links",
            "location": 152,
            "return": [
                "Dict[Text,Text]",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "q": [
                    "str",
                    "float",
                    "int"
                ],
                "lang": [
                    "Text",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "tolist": {
            "name": "tolist",
            "location": 160,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[str]",
                "Union[List,Tuple]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "wikidata_query_link": {
            "name": "wikidata_query_link",
            "location": 165,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "template_name": [
                    "str",
                    "Text"
                ]
            }
        },
        "wikidata_icon": {
            "name": "wikidata_icon",
            "location": 171,
            "return": [
                "Dict[Text,]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "IFX-master/general/templatetags/__init__.py": {},
    "IFX-master/ifx/base_models.py": {
        "UndeletableQueryset.active": {
            "name": "active",
            "location": 6,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndeletableQueryset.deleted": {
            "name": "deleted",
            "location": 9,
            "return": [
                "bool",
                "str",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Undeletable.soft_delete": {
            "name": "soft_delete",
            "location": 21,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikiDataEntity.wikidata_url": {
            "name": "wikidata_url",
            "location": 48,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/ifx/base_settings.py": {},
    "IFX-master/ifx/base_views.py": {
        "IFXMixin.dispatch": {
            "name": "dispatch",
            "location": 26,
            "return": [
                "str",
                "Optional[cmk.base.api.agent_based.type_defs.CheckPlugin]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "IFXMixin.predispatch": {
            "name": "predispatch",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFXMixin.get_model_plural_name": {
            "name": "get_model_plural_name",
            "location": 35,
            "return": [
                "Type",
                "Callable",
                "type",
                "str",
                "int",
                "models.Credentials"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFXMixin.get_model_name": {
            "name": "get_model_name",
            "location": 38,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFXMixin.get_title": {
            "name": "get_title",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFXMixin.get_header": {
            "name": "get_header",
            "location": 53,
            "return": [
                "Optional[str]",
                "cmk.utils.type_defs.UserId",
                "models.Dashboard",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFXMixin.get_breadcrumbs": {
            "name": "get_breadcrumbs",
            "location": 58,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IFXMixin.get_context_data": {
            "name": "get_context_data",
            "location": 64,
            "return": [
                "str",
                "dict",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataContributorOnlyMixin.predispatch": {
            "name": "predispatch",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityActionMixin.get_title": {
            "name": "get_title",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityActionMixin.get_breadcrumbs": {
            "name": "get_breadcrumbs",
            "location": 84,
            "return": [
                "bool",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityEditMixin.form_valid": {
            "name": "form_valid",
            "location": 93,
            "return": [
                "str",
                "Union[str, IO]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Union[int, str]"
                ]
            }
        },
        "PostToWikiDataView.get_link_types": {
            "name": "get_link_types",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostToWikiDataView.get_form": {
            "name": "get_form",
            "location": 119,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "form_class": [
                    "None",
                    "str",
                    "Dict[str,Union[str,Set]]",
                    "grouper.models.group.Group"
                ]
            }
        },
        "PostToWikiDataView.post": {
            "name": "post",
            "location": 130,
            "return": [
                "dict",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "int",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "PostToWikiDataView.form_valid": {
            "name": "form_valid",
            "location": 134,
            "return": [
                "str",
                "Union[str, IO]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        }
    },
    "IFX-master/ifx/celery.py": {},
    "IFX-master/ifx/converters.py": {
        "IFXEntityConverter.to_python": {
            "name": "to_python",
            "location": 4,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "IFXEntityConverter.to_url": {
            "name": "to_url",
            "location": 7,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[str, int]",
                    "T",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "IFX-master/ifx/forms.py": {},
    "IFX-master/ifx/quirks.py": {
        "patch_dns": {
            "name": "patch_dns",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patch_dns.new_getaddrinfo": {
            "name": "new_getaddrinfo",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "IFX-master/ifx/settings.py": {},
    "IFX-master/ifx/urls.py": {},
    "IFX-master/ifx/util.py": {
        "is_hebrew": {
            "name": "is_hebrew",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "is_english": {
            "name": "is_english",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        }
    },
    "IFX-master/ifx/wsgi.py": {},
    "IFX-master/ifx/__init__.py": {},
    "IFX-master/links/admin.py": {
        "LinkAdmin.entity_link": {
            "name": "entity_link",
            "location": 34,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "List[\"LoadableRelation\"]",
                    "zerver.models.Realm",
                    "List[str]",
                    "zerver.models.Recipient"
                ]
            }
        }
    },
    "IFX-master/links/apps.py": {},
    "IFX-master/links/consts.py": {},
    "IFX-master/links/forms.py": {},
    "IFX-master/links/models.py": {
        "LinkTypeQuerySet.get_by_natural_key": {
            "name": "get_by_natural_key",
            "location": 21,
            "return": [
                "str",
                "Iterable[float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "slug": [
                    "str",
                    "int"
                ]
            }
        },
        "LinkType.natural_key": {
            "name": "natural_key",
            "location": 47,
            "return": [
                "Tuple[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkType.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.url": {
            "name": "url",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/links/tasks.py": {
        "add_links": {
            "name": "add_links",
            "location": 9,
            "return": [
                "bool",
                "models.User",
                "T",
                "Set[str]",
                "List[dict]"
            ],
            "arguments": {
                "entity": [
                    "str",
                    "bool",
                    "int",
                    "salon.models.Stylist"
                ]
            }
        },
        "add_links_by_id": {
            "name": "add_links_by_id",
            "location": 15,
            "return": [
                "models.Subtask",
                "Sequence[str]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "entity_type": [
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Dict[int, str]"
                ],
                "id": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "Optional[int]"
                ]
            }
        },
        "add_links_by_movie_id": {
            "name": "add_links_by_movie_id",
            "location": 22,
            "return": [
                "models.Subtask",
                "int",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "add_links_by_person_id": {
            "name": "add_links_by_person_id",
            "location": 28,
            "return": [
                "models.Subtask",
                "int",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "IFX-master/links/tests.py": {},
    "IFX-master/links/urls.py": {},
    "IFX-master/links/views.py": {
        "LinkMixin.dispatch": {
            "name": "dispatch",
            "location": 21,
            "return": [
                "Union[str, List[str]]",
                "List[str]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "list"
                ]
            }
        },
        "LinkMixin.get_breadcrumbs": {
            "name": "get_breadcrumbs",
            "location": 35,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkMixin.get_form": {
            "name": "get_form",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "form_class": [
                    "None",
                    "str",
                    "Dict[str,Union[str,Set]]",
                    "grouper.models.group.Group"
                ]
            }
        },
        "LinkCreateView.get_entity_and_model": {
            "name": "get_entity_and_model",
            "location": 48,
            "return": [
                "Tuple[(Any, Type[Union[(movies.models.Movie, people.models.Person)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkCreateView.form_valid": {
            "name": "form_valid",
            "location": 53,
            "return": [
                "Optional[Dict]",
                "str",
                "Optional[str]",
                "Optional",
                "bool"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "LinkUpdateView.get_entity_and_model": {
            "name": "get_entity_and_model",
            "location": 64,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkUpdateView.form_valid": {
            "name": "form_valid",
            "location": 68,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "zam_repondeur.models.Lecture",
                    "Union[int, str]",
                    "salon.models.Stylist"
                ]
            }
        }
    },
    "IFX-master/links/__init__.py": {},
    "IFX-master/links/migrations/0001_initial.py": {},
    "IFX-master/links/migrations/0002_auto_20180223_1437.py": {},
    "IFX-master/links/migrations/0003_auto_20180224_1559.py": {},
    "IFX-master/links/migrations/0004_link.py": {},
    "IFX-master/links/migrations/0005_move_generic_links.py": {
        "forwards_func": {
            "name": "forwards_func",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ],
                "schema_editor": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "IFX-master/links/migrations/0006_auto_20180227_0200.py": {},
    "IFX-master/links/migrations/__init__.py": {},
    "IFX-master/movies/admin.py": {},
    "IFX-master/movies/apps.py": {},
    "IFX-master/movies/forms.py": {},
    "IFX-master/movies/models.py": {
        "Field.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "Text",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 40,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.get_tags": {
            "name": "get_tags",
            "location": 43,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "Text",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 71,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.active_movies": {
            "name": "active_movies",
            "location": 74,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movie.__str__": {
            "name": "__str__",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movie.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movie.get_title": {
            "name": "get_title",
            "location": 126,
            "return": [
                "Text",
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movie.get_extra_data": {
            "name": "get_extra_data",
            "location": 133,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "short": [
                    "bool",
                    "Mapping[str,Any]",
                    "str",
                    "int"
                ]
            }
        },
        "Movie.get_short_data": {
            "name": "get_short_data",
            "location": 144,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movie.get_short_roles": {
            "name": "get_short_roles",
            "location": 147,
            "return": [
                "bool",
                "str",
                "Optional[float]",
                "float",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movie.title_and_year_he": {
            "name": "title_and_year_he",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Movie.title_and_year_en": {
            "name": "title_and_year_en",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovieTag.__str__": {
            "name": "__str__",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovieTag.title_he": {
            "name": "title_he",
            "location": 184,
            "return": [
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovieTag.title_en": {
            "name": "title_en",
            "location": 188,
            "return": [
                "List[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/movies/tests.py": {},
    "IFX-master/movies/urls.py": {},
    "IFX-master/movies/views.py": {
        "get_tags": {
            "name": "get_tags",
            "location": 27,
            "return": [
                "Generator[(Tuple[(Any, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "MovieFilter.title_filter": {
            "name": "title_filter",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "queryset": [],
                "name": [],
                "value": []
            }
        },
        "MovieFilter.summary_filter": {
            "name": "summary_filter",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "queryset": [],
                "name": [],
                "value": []
            }
        },
        "MovieDetailView.predispatch": {
            "name": "predispatch",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovieDetailView.possible_duplicates": {
            "name": "possible_duplicates",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostMovieToWikiDataView.get_initial": {
            "name": "get_initial",
            "location": 126,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostMovieToWikiDataView.upload": {
            "name": "upload",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "d": [],
                "ids": [],
                "o": []
            }
        },
        "MergeIntoView.dispatch": {
            "name": "dispatch",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "MergeIntoView.get_form": {
            "name": "get_form",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "form_class": [
                    "None"
                ]
            }
        },
        "MergeIntoView.form_valid": {
            "name": "form_valid",
            "location": 194,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "FieldListView.get_queryset": {
            "name": "get_queryset",
            "location": 260,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagDetailView.get_breadcrumbs": {
            "name": "get_breadcrumbs",
            "location": 285,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/movies/__init__.py": {},
    "IFX-master/movies/management/__init__.py": {},
    "IFX-master/movies/management/commands/create_movies.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "IFX-master/movies/management/commands/dump_fields_and_tags.py": {
        "Command.handle": {
            "name": "handle",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/movies/management/commands/dump_roles.py": {
        "get_roles": {
            "name": "get_roles",
            "location": 8,
            "return": [
                "Generator[(Dict[(str, Any)], Any, None)]"
            ],
            "arguments": {}
        },
        "Command.handle": {
            "name": "handle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/movies/management/commands/export_movies.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "int",
                    "IO[bytes]",
                    "IO",
                    "bytes"
                ]
            }
        }
    },
    "IFX-master/movies/management/commands/fix_movie_titles.py": {
        "clear": {
            "name": "clear",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "m": [
                    "int"
                ],
                "attr": [
                    "Callable",
                    "bool",
                    "Dict[int, str]",
                    "Mapping[Tuple[str, str], Any]",
                    "Mapping[int, str]",
                    "float",
                    "list"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/movies/management/commands/import_description.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Command.update_summary_he": {
            "name": "update_summary_he",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "movie": [
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "int",
                    "bool"
                ],
                "summary": [
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "int",
                    "bool"
                ],
                "counter": [
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Command.update_summary_en": {
            "name": "update_summary_en",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "movie": [
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "int",
                    "bool"
                ],
                "summary": [
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "int",
                    "bool"
                ],
                "counter": [
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "IFX-master/movies/management/commands/import_fields.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "IFX-master/movies/management/commands/import_fields_and_tags.py": {
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/movies/management/commands/import_movies.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 30,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "dict"
                ]
            }
        },
        "Command.update_title": {
            "name": "update_title",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "movie": [
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "int",
                    "bool"
                ],
                "title": [
                    "float",
                    "str",
                    "int"
                ],
                "lang": [
                    "str",
                    "Callable[[T], bool]",
                    "int",
                    "Callable[[int], bool]",
                    "bytes",
                    "list"
                ]
            }
        }
    },
    "IFX-master/movies/management/commands/import_movie_titles.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "IFX-master/movies/management/commands/import_person.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "IFX-master/movies/management/commands/import_relationship.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "IFX-master/movies/management/commands/import_roles.py": {
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/movies/management/commands/import_strings.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        }
    },
    "IFX-master/movies/management/commands/import_tags.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "IFX-master/movies/management/commands/__init__.py": {},
    "IFX-master/movies/migrations/0001_initial.py": {},
    "IFX-master/movies/migrations/0002_auto_20180223_1437.py": {},
    "IFX-master/movies/migrations/0003_auto_20180224_1559.py": {},
    "IFX-master/movies/migrations/0004_auto_20180420_1149.py": {},
    "IFX-master/movies/migrations/0005_movie_merged_into.py": {},
    "IFX-master/movies/migrations/__init__.py": {},
    "IFX-master/movies/templatetags/movies.py": {
        "get_description": {
            "name": "get_description",
            "location": 8,
            "return": [
                "Text",
                "Callable",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "obj": [
                    "Callable",
                    "str",
                    "List[List[int]]"
                ]
            }
        }
    },
    "IFX-master/movies/templatetags/__init__.py": {},
    "IFX-master/people/admin.py": {},
    "IFX-master/people/apps.py": {},
    "IFX-master/people/forms.py": {},
    "IFX-master/people/models.py": {
        "Person.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.distinct_roles": {
            "name": "distinct_roles",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.movies_flat": {
            "name": "movies_flat",
            "location": 64,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.title_he": {
            "name": "title_he",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.title_en": {
            "name": "title_en",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Role.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "Text",
                "int",
                "bytes",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovieRolePerson.title_he": {
            "name": "title_he",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovieRolePerson.title_en": {
            "name": "title_en",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/people/tests.py": {},
    "IFX-master/people/urls.py": {},
    "IFX-master/people/views.py": {
        "get_roles": {
            "name": "get_roles",
            "location": 21,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {}
        },
        "PersonFilter.name_filter": {
            "name": "name_filter",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "queryset": [],
                "name": [],
                "value": []
            }
        },
        "PersonListView.get_queryset": {
            "name": "get_queryset",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersonListView.get_ordering": {
            "name": "get_ordering",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersonDetailView.predispatch": {
            "name": "predispatch",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersonDetailView.possible_duplicates": {
            "name": "possible_duplicates",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeIntoView.dispatch": {
            "name": "dispatch",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "MergeIntoView.get_form": {
            "name": "get_form",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "form_class": [
                    "None"
                ]
            }
        },
        "MergeIntoView.form_valid": {
            "name": "form_valid",
            "location": 136,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "PostPersonToWikiDataView.upload": {
            "name": "upload",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "d": [],
                "ids": [],
                "o": []
            }
        }
    },
    "IFX-master/people/__init__.py": {},
    "IFX-master/people/management/commands/fix_person_names.py": {
        "clear": {
            "name": "clear",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "m": [
                    "int"
                ],
                "attr": [
                    "Callable",
                    "bool",
                    "Dict[int, str]",
                    "Mapping[Tuple[str, str], Any]",
                    "Mapping[int, str]",
                    "float",
                    "list"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/people/migrations/0001_initial.py": {},
    "IFX-master/people/migrations/0002_auto_20180223_1437.py": {},
    "IFX-master/people/migrations/0003_auto_20180224_1559.py": {},
    "IFX-master/people/migrations/0004_auto_20180421_1959.py": {},
    "IFX-master/people/migrations/0005_person_merged_into.py": {},
    "IFX-master/people/migrations/__init__.py": {},
    "IFX-master/reports/admin.py": {},
    "IFX-master/reports/apps.py": {},
    "IFX-master/reports/models.py": {},
    "IFX-master/reports/tests.py": {},
    "IFX-master/reports/urls.py": {},
    "IFX-master/reports/views.py": {
        "add_report": {
            "name": "add_report",
            "location": 14,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "add_report.df": {
            "name": "df",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "view": [
                    "int",
                    "bytes",
                    "str",
                    "keras.utils.Sequence",
                    "list",
                    "Dict[str, object]",
                    "List[tuple]"
                ]
            }
        },
        "NoTitleMovieReport.get_queryset": {
            "name": "get_queryset",
            "location": 50,
            "return": [
                "str",
                "bool",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoEnglishTitleMovieReport.get_queryset": {
            "name": "get_queryset",
            "location": 58,
            "return": [
                "str",
                "bool",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoYearMovieReport.get_queryset": {
            "name": "get_queryset",
            "location": 66,
            "return": [
                "str",
                "Optional[str]",
                "cmk.utils.type_defs.Ruleset"
            ],
            "arguments": {
                "self": []
            }
        },
        "DuplicateTitleMovieReport.get_queryset": {
            "name": "get_queryset",
            "location": 75,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoNamePersonReport.get_queryset": {
            "name": "get_queryset",
            "location": 110,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "int",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/reports/__init__.py": {},
    "IFX-master/reports/migrations/__init__.py": {},
    "IFX-master/search/admin.py": {},
    "IFX-master/search/apps.py": {},
    "IFX-master/search/models.py": {},
    "IFX-master/search/tests.py": {},
    "IFX-master/search/urls.py": {},
    "IFX-master/search/views.py": {
        "MoviesSearchListView.get_queryset": {
            "name": "get_queryset",
            "location": 11,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoviesSearchListView.get_filters": {
            "name": "get_filters",
            "location": 19,
            "return": [
                "int",
                "str",
                "List[List[int]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "float"
                ],
                "search_type": [
                    "str",
                    "Union[str, int]",
                    "Type",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "IFX-master/search/__init__.py": {},
    "IFX-master/search/migrations/__init__.py": {},
    "IFX-master/users/admin.py": {
        "FixedChangeForm.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/users/apps.py": {},
    "IFX-master/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "Text",
                "str",
                "Type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_access_token": {
            "name": "get_access_token",
            "location": 42,
            "return": [
                "None",
                "str",
                "AccessToken",
                "Optional[str]",
                "bool",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_wikidata_oauth1": {
            "name": "get_wikidata_oauth1",
            "location": 48,
            "return": [
                "OAuth1",
                "str",
                "Callable",
                "Optional[zerver.models.Realm]",
                "core.models.Grouping",
                "core.models.Registration",
                "Union[int,float,complex]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_editor": {
            "name": "is_editor",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFX-master/users/oauth_urls.py": {},
    "IFX-master/users/tests.py": {},
    "IFX-master/users/urls.py": {},
    "IFX-master/users/views.py": {
        "WikidataAuthView.get": {
            "name": "get",
            "location": 31,
            "return": [
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Optional[str]"
                ]
            }
        },
        "WikidataAuthCallbackView.get": {
            "name": "get",
            "location": 39,
            "return": [
                "Optional[str]",
                "tracim.models.auth.User",
                "cmk.utils.type_defs.UserId",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "WikidataLogoutAuthView.post": {
            "name": "post",
            "location": 70,
            "return": [
                "int",
                "str",
                "Callable[[list], None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "IFX-master/users/__init__.py": {},
    "IFX-master/users/migrations/0001_initial.py": {},
    "IFX-master/users/migrations/0002_auto_20180420_1320.py": {},
    "IFX-master/users/migrations/__init__.py": {},
    "IFX-master/wikidata_edit/build.py": {
        "build_claims": {
            "name": "build_claims",
            "location": 13,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "claims": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "create_claim": {
            "name": "create_claim",
            "location": 20,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Union[(str, _T0, _T1, _T2)])])])]"
            ],
            "arguments": {
                "prop": [
                    "str"
                ],
                "data_type": [
                    "str"
                ],
                "data_value": [
                    "str"
                ]
            }
        },
        "create_external_id_claim": {
            "name": "create_external_id_claim",
            "location": 32,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, Union[(str, _T1)])], _T0)])])])]"
            ],
            "arguments": {
                "prop": [
                    "Optional[int]",
                    "int",
                    "Iterable[int]",
                    "str"
                ],
                "id": [
                    "Optional[int]",
                    "int",
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "create_item_claim": {
            "name": "create_item_claim",
            "location": 39,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, Union[(str, _T1)])])])], _T0)])])])]"
            ],
            "arguments": {
                "prop": [
                    "int",
                    "str"
                ],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "create_instance_of_claim": {
            "name": "create_instance_of_claim",
            "location": 50,
            "return": [
                "str",
                "Any"
            ],
            "arguments": {
                "item_type": [
                    "int",
                    "str"
                ]
            }
        },
        "create_year_claim": {
            "name": "create_year_claim",
            "location": 54,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, Union[(int, str)])])])])])])])]"
            ],
            "arguments": {
                "year": [
                    "int",
                    "dict"
                ]
            }
        },
        "create_duration_claim": {
            "name": "create_duration_claim",
            "location": 69,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, str)])])])])])])]"
            ],
            "arguments": {
                "duration": [
                    "int",
                    "dict"
                ]
            }
        },
        "build_entity": {
            "name": "build_entity",
            "location": 80,
            "return": [
                "Dict[(str, Union[(collections.defaultdict, Dict[(Any, Dict[(str, Any)])])])]"
            ],
            "arguments": {
                "claims": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "descs": [
                    "dict",
                    "list",
                    "str",
                    "MutableMapping[str, Any]",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "ext_ids": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "labels": [
                    "dict",
                    "list",
                    "str",
                    "MutableMapping[str, Any]",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "build_movie_entity": {
            "name": "build_movie_entity",
            "location": 94,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "descs": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "duration": [
                    "bool",
                    "bytes",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "List[float]"
                ],
                "ext_ids": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "labels": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "year": [
                    "bool",
                    "bytes",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "List[float]"
                ]
            }
        },
        "build_person_entity": {
            "name": "build_person_entity",
            "location": 105,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "descs": [
                    "int",
                    "str"
                ],
                "ext_ids": [
                    "int",
                    "str"
                ],
                "labels": [
                    "int",
                    "str"
                ],
                "gender": [
                    "str",
                    "List[str]",
                    "List[dict]",
                    "List[Dict[str, Any]]",
                    "Set[int]",
                    "int"
                ]
            }
        }
    },
    "IFX-master/wikidata_edit/upload.py": {
        "upload_entity": {
            "name": "upload_entity",
            "location": 12,
            "return": [
                "List[str]",
                "MutableMapping[str, Any]",
                "List[Optional[str]]",
                "MutableMapping[str, int]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "auth": [
                    "requests_oauthlib.OAuth1",
                    "str",
                    "dict",
                    "Union[Dict[str, Any], None]",
                    "Optional[Dict[str, str]]",
                    "Literal",
                    "bool"
                ],
                "entity": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "requests.models.Response"
                ]
            }
        },
        "upload_movie": {
            "name": "upload_movie",
            "location": 35,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "auth": [
                    "requests_oauthlib.OAuth1",
                    "str",
                    "dict"
                ],
                "labels": [
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "List[str]",
                    "str"
                ],
                "descs": [
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "List[str]",
                    "str"
                ],
                "ext_ids": [
                    "None",
                    "Dict[str,str]",
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "List[str]",
                    "str"
                ],
                "year": [
                    "None",
                    "Dict[str,str]",
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "List[str]",
                    "str"
                ],
                "duration": [
                    "None",
                    "Dict[str,str]",
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "upload_person": {
            "name": "upload_person",
            "location": 47,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "auth": [
                    "requests_oauthlib.OAuth1",
                    "str",
                    "dict"
                ],
                "labels": [
                    "Dict[str, str]",
                    "int"
                ],
                "descs": [
                    "Dict[str, str]",
                    "int"
                ],
                "ext_ids": [
                    "None",
                    "Dict[str,str]",
                    "int"
                ],
                "gender": [
                    "None",
                    "Dict[str,str]",
                    "int"
                ]
            }
        }
    },
    "IFX-master/wikidata_edit/__init__.py": {}
}
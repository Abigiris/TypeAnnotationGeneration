{
    "IO20172018-master/kod/scrapy_crawler/scrapy_crawler/items.py": {
        "cleanWord": {
            "name": "cleanWord",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "BaseException"
                ]
            }
        },
        "remove": {
            "name": "remove",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "signs": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ScrapyComment.save": {
            "name": "save",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapyComment.toJSON": {
            "name": "toJSON",
            "location": 52,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapyComment.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IO20172018-master/kod/scrapy_crawler/scrapy_crawler/middlewares.py": {
        "ScrapyCrawlerSpiderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 17,
            "return": [
                "ScrapyCrawlerSpiderMiddleware"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScrapyCrawlerSpiderMiddleware]"
                ],
                "crawler": []
            }
        },
        "ScrapyCrawlerSpiderMiddleware.process_spider_input": {
            "name": "process_spider_input",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "spider": []
            }
        },
        "ScrapyCrawlerSpiderMiddleware.process_spider_output": {
            "name": "process_spider_output",
            "location": 30,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "result": [],
                "spider": []
            }
        },
        "ScrapyCrawlerSpiderMiddleware.process_spider_exception": {
            "name": "process_spider_exception",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "exception": [],
                "spider": []
            }
        },
        "ScrapyCrawlerSpiderMiddleware.process_start_requests": {
            "name": "process_start_requests",
            "location": 46,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "start_requests": [],
                "spider": []
            }
        },
        "ScrapyCrawlerSpiderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        },
        "ScrapyCrawlerDownloaderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 65,
            "return": [
                "ScrapyCrawlerDownloaderMiddleware"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScrapyCrawlerDownloaderMiddleware]"
                ],
                "crawler": []
            }
        },
        "ScrapyCrawlerDownloaderMiddleware.process_request": {
            "name": "process_request",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "spider": []
            }
        },
        "ScrapyCrawlerDownloaderMiddleware.process_response": {
            "name": "process_response",
            "location": 83,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "response": [
                    "_T1@@"
                ],
                "spider": []
            }
        },
        "ScrapyCrawlerDownloaderMiddleware.process_exception": {
            "name": "process_exception",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "exception": [],
                "spider": []
            }
        },
        "ScrapyCrawlerDownloaderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        }
    },
    "IO20172018-master/kod/scrapy_crawler/scrapy_crawler/pipelines.py": {
        "ScrapyCrawlerPipeline.process_item": {
            "name": "process_item",
            "location": 10,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[Sequence, 'SweepFixedValues']",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bytes",
                    "int",
                    "str"
                ],
                "spider": [
                    "List[str]",
                    "Callable",
                    "List",
                    "T"
                ]
            }
        }
    },
    "IO20172018-master/kod/scrapy_crawler/scrapy_crawler/settings.py": {},
    "IO20172018-master/kod/scrapy_crawler/scrapy_crawler/__init__.py": {},
    "IO20172018-master/kod/scrapy_crawler/scrapy_crawler/spiders/comments_spider.py": {
        "CommentSpider.start_requests": {
            "name": "start_requests",
            "location": 13,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentSpider.splash_request": {
            "name": "splash_request",
            "location": 17,
            "return": [
                "SplashRequest",
                "Dict",
                "Dict[int,List[str]]",
                "Dict[int,Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "WPSpider.parse": {
            "name": "parse",
            "location": 43,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str,Any]",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "IO20172018-master/kod/scrapy_crawler/scrapy_crawler/spiders/parser.py": {
        "strIsTime": {
            "name": "strIsTime",
            "location": 7,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "dateStr": []
            }
        },
        "extract_comment": {
            "name": "extract_comment",
            "location": 52,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "body": []
            }
        },
        "strIsTime.fnormal": {
            "name": "fnormal",
            "location": 8,
            "return": [],
            "arguments": {
                "matchObj": []
            }
        },
        "strIsTime.fyesterday": {
            "name": "fyesterday",
            "location": 13,
            "return": [],
            "arguments": {
                "matchObj": []
            }
        },
        "strIsTime.fminutesAgo": {
            "name": "fminutesAgo",
            "location": 20,
            "return": [],
            "arguments": {
                "matchObj": []
            }
        },
        "strIsTime.fhoursAgo": {
            "name": "fhoursAgo",
            "location": 25,
            "return": [],
            "arguments": {
                "matchObj": []
            }
        },
        "strIsTime.fdaysAgo": {
            "name": "fdaysAgo",
            "location": 30,
            "return": [],
            "arguments": {
                "matchObj": []
            }
        },
        "TestExtract.test_extract_comment": {
            "name": "test_extract_comment",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IO20172018-master/kod/scrapy_crawler/scrapy_crawler/spiders/__init__.py": {},
    "IO20172018-master/kod/trendspotter/manage.py": {},
    "IO20172018-master/kod/trendspotter/crawler/admin.py": {},
    "IO20172018-master/kod/trendspotter/crawler/apps.py": {},
    "IO20172018-master/kod/trendspotter/crawler/crawler.py": {
        "wp_scraper": {
            "name": "wp_scraper",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "domain": [
                    "str",
                    "Dict[str,str]",
                    "Match[str]",
                    "Match"
                ],
                "url": [
                    "str",
                    "Dict[str,str]",
                    "Match[str]",
                    "Match"
                ]
            }
        },
        "one_time_crawling": {
            "name": "one_time_crawling",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Crawler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "int",
                    "float",
                    "str"
                ],
                "scraper": [
                    "int",
                    "float",
                    "str"
                ],
                "visited_page_limit": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Crawler.scrape": {
            "name": "scrape",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Crawler.context": {
            "name": "context",
            "location": 19,
            "return": [
                "Dict[Text,]",
                "str",
                "List[Dict[str,Any]]",
                "Dict[str,int]",
                "Dict",
                "Dict[str,List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crawler.log_start": {
            "name": "log_start",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crawler.log_scrape": {
            "name": "log_scrape",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Crawler.log_end": {
            "name": "log_end",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crawler.crawl": {
            "name": "crawl",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IO20172018-master/kod/trendspotter/crawler/models.py": {
        "date_filter": {
            "name": "date_filter",
            "location": 29,
            "return": [
                "dict",
                "Dict[str, Dict[str, str]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "query_set": [
                    "int",
                    "Tuple[str, str]"
                ],
                "time_begin": [
                    "int",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "time_end": [
                    "int",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "Domain.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordQuery.count": {
            "name": "count",
            "location": 38,
            "return": [
                "str",
                "dict",
                "Dict[str, Set[str]]"
            ],
            "arguments": {}
        },
        "WordQuery.interval": {
            "name": "interval",
            "location": 42,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "time_begin": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "time_end": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "WordQuery.one_interval": {
            "name": "one_interval",
            "location": 45,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "time_begin": [
                    "float",
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "time_end": [
                    "float",
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "IO20172018-master/kod/trendspotter/crawler/tests.py": {},
    "IO20172018-master/kod/trendspotter/crawler/urls.py": {},
    "IO20172018-master/kod/trendspotter/crawler/views.py": {
        "HomeView.get": {
            "name": "get",
            "location": 15,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "SearchView.post": {
            "name": "post",
            "location": 28,
            "return": [
                "dict",
                "List[str]",
                "bool",
                "Dict[str, str]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "SearchView.get": {
            "name": "get",
            "location": 74,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "List",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "PreviousView.get": {
            "name": "get",
            "location": 81,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "SignUpView.get": {
            "name": "get",
            "location": 93,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str,str]",
                    "Dict",
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "SignUpView.post": {
            "name": "post",
            "location": 98,
            "return": [
                "Optional[Dict]",
                "dict",
                "bool",
                "str",
                "zam_repondeur.models.Lecture",
                "models.Dashboard"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "IO20172018-master/kod/trendspotter/crawler/__init__.py": {},
    "IO20172018-master/kod/trendspotter/crawler/migrations/0001_initial.py": {},
    "IO20172018-master/kod/trendspotter/crawler/migrations/__init__.py": {},
    "IO20172018-master/kod/trendspotter/trendspotter/settings.py": {},
    "IO20172018-master/kod/trendspotter/trendspotter/urls.py": {},
    "IO20172018-master/kod/trendspotter/trendspotter/wsgi.py": {},
    "IO20172018-master/kod/trendspotter/trendspotter/__init__.py": {}
}
{
    "Image-Caption-Generator-master/image_caption_generator/__init__.py": {},
    "Image-Caption-Generator-master/image_caption_generator/datasets/coco2014.py": {
        "COCO2014.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_validation_set": [
                    "bool",
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "is_test_set": [
                    "bool",
                    "str",
                    "Optional[Union[str,pathlib.Path]]",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "COCO2014.__len__": {
            "name": "__len__",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "COCO2014.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [
                "str",
                "int",
                "Callable",
                "bool",
                "Tuple[Union[str,bool,LongTensor]]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Dict",
                    "bool",
                    "bytes"
                ]
            }
        },
        "COCO2014.load_dataset": {
            "name": "load_dataset",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COCO2014._create_img_filename": {
            "name": "_create_img_filename",
            "location": 92,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "is_img_id": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict"
                ]
            }
        },
        "COCO2014._create_img_to_lbl_csv": {
            "name": "_create_img_to_lbl_csv",
            "location": 110,
            "return": [
                "Exception",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, bool]",
                "str",
                "Union[Dict, str]"
            ],
            "arguments": {
                "self": [],
                "ds_path": [
                    "str",
                    "int",
                    "None",
                    "bytes",
                    "Union[str,pathlib.Path]",
                    "Optional[str]"
                ],
                "anns_file_path": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "csv_filename": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/datasets/dataset.py": {
        "Dataset.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_path": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "List[str]",
                    "Optional[pathlib.Path]",
                    "Optional[List[str]]"
                ],
                "metadata_path": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "List[str]",
                    "Optional[pathlib.Path]",
                    "Optional[List[str]]"
                ],
                "is_validation_set": [
                    "bool",
                    "MutableMapping[str,str]",
                    "Dict",
                    "List[str]",
                    "int",
                    "Sequence[str]",
                    "Iterable[pathlib.Path]"
                ],
                "is_test_set": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "autorecurse.gnumake.data.Target",
                    "Callable",
                    "Optional[pathlib.Path]",
                    "Dict[str,Any]",
                    "path.Path"
                ],
                "img_size": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "Dataset.__len__": {
            "name": "__len__",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__getitem__": {
            "name": "__getitem__",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "Hashable",
                    "slice"
                ]
            }
        },
        "Dataset.load_dataset": {
            "name": "load_dataset",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.create_dataloader": {
            "name": "create_dataloader",
            "location": 44,
            "return": [
                "DataLoader",
                "Dict",
                "Callable",
                "Dict[str,Any]",
                "Callable[[str],T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/datasets/util.py": {
        "download_from_url": {
            "name": "download_from_url",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "bool"
                ],
                "dst": [
                    "str",
                    "bool"
                ]
            }
        },
        "extract_zip": {
            "name": "extract_zip",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "zip_file_path": [
                    "str",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ],
                "destination_file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "save_to_json": {
            "name": "save_to_json",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "int",
                    "bytes"
                ],
                "file_path": [
                    "str",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "load_json": {
            "name": "load_json",
            "location": 63,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Union[str,pathlib.Path]"
                ]
            }
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/datasets/vocab.py": {
        "Vocab.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds_path": [
                    "str"
                ],
                "train_csv_file_path": [
                    "str"
                ],
                "val_csv_file_path": [
                    "str",
                    "None"
                ],
                "lang_id": [
                    "Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Vocab.preprocess_annotation": {
            "name": "preprocess_annotation",
            "location": 36,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "annotation": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Vocab.pad_annotations": {
            "name": "pad_annotations",
            "location": 47,
            "return": [
                "Tuple[(Any, Any, List[int])]"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "List[tuple[Union[torch.Tensor,torch.Tensor]]]",
                    "List[dict]",
                    "List[Tuple[torch.Tensor,torch.Tensor]]",
                    "str",
                    "List[str]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "pandas.DataFrame",
                    "float",
                    "[]"
                ]
            }
        },
        "Vocab._load_stoi": {
            "name": "_load_stoi",
            "location": 57,
            "return": [
                "Dict[Text,int]",
                "str",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocab._load_vocab": {
            "name": "_load_vocab",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_file_path": [
                    "str"
                ]
            }
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/datasets/__init__.py": {},
    "Image-Caption-Generator-master/image_caption_generator/datasets/pycocotools/coco.py": {
        "_isArrayLike": {
            "name": "_isArrayLike",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "COCO.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "COCO.createIndex": {
            "name": "createIndex",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COCO.info": {
            "name": "info",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COCO.getAnnIds": {
            "name": "getAnnIds",
            "location": 129,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "imgIds": [
                    "List",
                    "List[int]",
                    "int"
                ],
                "catIds": [
                    "List",
                    "List[int]",
                    "int"
                ],
                "areaRng": [
                    "int",
                    "List[int]",
                    "list",
                    "str"
                ],
                "iscrowd": [
                    "None",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Iterable[int]",
                    "T",
                    "Optional[Iterable[int]]",
                    "Optional[bool]"
                ]
            }
        },
        "COCO.getCatIds": {
            "name": "getCatIds",
            "location": 157,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "catNms": [
                    "List",
                    "numpy.ndarray",
                    "str",
                    "bytearray",
                    "int"
                ],
                "supNms": [
                    "List",
                    "numpy.ndarray",
                    "str",
                    "bytearray",
                    "int"
                ],
                "catIds": [
                    "List",
                    "int",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "COCO.getImgIds": {
            "name": "getImgIds",
            "location": 179,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "imgIds": [
                    "List",
                    "List[int]",
                    "int"
                ],
                "catIds": [
                    "List",
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "COCO.loadAnns": {
            "name": "loadAnns",
            "location": 200,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "List",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "COCO.loadCats": {
            "name": "loadCats",
            "location": 211,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "List",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "COCO.loadImgs": {
            "name": "loadImgs",
            "location": 222,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "List",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "COCO.showAnns": {
            "name": "showAnns",
            "location": 233,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "anns": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "COCO.loadRes": {
            "name": "loadRes",
            "location": 297,
            "return": [
                "COCO"
            ],
            "arguments": {
                "self": [
                    "_TCOCO@@COCO@@"
                ],
                "resFile": [
                    "List[str]",
                    "AbstractSet[str]"
                ]
            }
        },
        "COCO.download": {
            "name": "download",
            "location": 358,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "tarDir": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "imgIds": [
                    "str",
                    "Dict[int, int]",
                    "int"
                ]
            }
        },
        "COCO.loadNumpyAnnotations": {
            "name": "loadNumpyAnnotations",
            "location": 382,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "COCO.annToRLE": {
            "name": "annToRLE",
            "location": 405,
            "return": [
                "float",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ann": [
                    "Tuple[Union[float,float]]",
                    "int",
                    "Tuple[float,float]"
                ]
            }
        },
        "COCO.annToMask": {
            "name": "annToMask",
            "location": 426,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ann": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/datasets/pycocotools/cocoeval.py": {
        "COCOeval.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cocoGt": [
                    "Dict[str, float]",
                    "int"
                ],
                "cocoDt": [
                    "int",
                    "None",
                    "str",
                    "Tuple[float,float,float,float]",
                    "bool",
                    "Tuple[Union[float,float,float,float]]"
                ],
                "iouType": [
                    "Text",
                    "bool",
                    "str",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "COCOeval._prepare": {
            "name": "_prepare",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COCOeval.evaluate": {
            "name": "evaluate",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COCOeval.computeIoU": {
            "name": "computeIoU",
            "location": 163,
            "return": [
                "List",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "imgId": [
                    "int",
                    "str",
                    "float"
                ],
                "catId": [
                    "int",
                    "str"
                ]
            }
        },
        "COCOeval.computeOks": {
            "name": "computeOks",
            "location": 192,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "imgId": [
                    "int",
                    "str"
                ],
                "catId": [
                    "int",
                    "str"
                ]
            }
        },
        "COCOeval.evaluateImg": {
            "name": "evaluateImg",
            "location": 235,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "imgId": [
                    "int",
                    "str",
                    "Dict[str,Any]"
                ],
                "catId": [
                    "str",
                    "bytes",
                    "float",
                    "int"
                ],
                "aRng": [
                    "List",
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "maxDet": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "COCOeval.accumulate": {
            "name": "accumulate",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "None",
                    "Optional[bytes]",
                    "Optional[Outcome]",
                    "bytes"
                ]
            }
        },
        "COCOeval.summarize": {
            "name": "summarize",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COCOeval.__str__": {
            "name": "__str__",
            "location": 495,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.setDetParams": {
            "name": "setDetParams",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.setKpParams": {
            "name": "setKpParams",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.__init__": {
            "name": "__init__",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iouType": [
                    "Text",
                    "str",
                    "Type",
                    "int",
                    "Optional[type]",
                    "Dict[str,type]"
                ]
            }
        },
        "COCOeval._prepare._toMask": {
            "name": "_toMask",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "anns": [
                    "dict",
                    "IO",
                    "Iterable[numpy.ndarray]",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ],
                "coco": [
                    "numpy.ndarray",
                    "float",
                    "Dict[str, numpy.ndarray]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "COCOeval.summarize._summarize": {
            "name": "_summarize",
            "location": 427,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "ap": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "iouThr": [
                    "None",
                    "str",
                    "bool",
                    "Tuple[int,int,str]"
                ],
                "areaRng": [
                    "Text",
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[int]"
                ],
                "maxDets": [
                    "int",
                    "float"
                ]
            }
        },
        "COCOeval.summarize._summarizeDets": {
            "name": "_summarizeDets",
            "location": 458,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "COCOeval.summarize._summarizeKps": {
            "name": "_summarizeKps",
            "location": 473,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/datasets/pycocotools/mask.py": {
        "encode": {
            "name": "encode",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bimask": [
                    "bytes",
                    "str",
                    "float"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rleObjs": [
                    "str",
                    "Dict[str,Any]",
                    "List[object]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "area": {
            "name": "area",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rleObjs": [
                    "float",
                    "str",
                    "Callable",
                    "Optional[Union[str,Any]]",
                    "List",
                    "Any",
                    "None",
                    "Union[int,slice]",
                    "int"
                ]
            }
        },
        "toBbox": {
            "name": "toBbox",
            "location": 99,
            "return": [
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "rleObjs": [
                    "float",
                    "str",
                    "List",
                    "Optional[Union[str,Any]]",
                    "Dict[str,Any]",
                    "Any",
                    "None",
                    "Union[int,slice]",
                    "int"
                ]
            }
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/datasets/pycocotools/__init__.py": {},
    "Image-Caption-Generator-master/image_caption_generator/models/image_caption_generator_model.py": {
        "ImageCaptionGeneratorModel.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_ds": [
                    "bool",
                    "Tuple",
                    "List[str]",
                    "int"
                ],
                "network_cls": [
                    "bool",
                    "int",
                    "tuple",
                    "List[str]"
                ],
                "network_kwargs": [
                    "bool",
                    "None",
                    "Tuple",
                    "int",
                    "List[str]"
                ],
                "val_ds": [
                    "bool",
                    "None",
                    "Tuple",
                    "int",
                    "List[str]"
                ],
                "test_ds": [
                    "bool",
                    "None",
                    "Tuple",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ImageCaptionGeneratorModel.learning_rate": {
            "name": "learning_rate",
            "location": 22,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/models/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_cls": [
                    "float",
                    "int"
                ],
                "train_ds": [
                    "int",
                    "bool"
                ],
                "val_ds": [
                    "int",
                    "None",
                    "bool"
                ],
                "test_ds": [
                    "int",
                    "None",
                    "bool"
                ],
                "network_kwargs": [
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "Model.optimizer": {
            "name": "optimizer",
            "location": 27,
            "return": [
                "SGD",
                "Callable[[KT,VT],bool]",
                "float",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.loss_fn": {
            "name": "loss_fn",
            "location": 34,
            "return": [
                "CrossEntropyLoss",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.learning_rate": {
            "name": "learning_rate",
            "location": 38,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.momentum": {
            "name": "momentum",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.weight_decay": {
            "name": "weight_decay",
            "location": 46,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.train": {
            "name": "train",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_epochs": [
                    "int",
                    "float"
                ],
                "train_dl_kwargs": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "val_dl_kwargs": [
                    "float",
                    "Optional[float]",
                    "int",
                    "None"
                ],
                "use_wandb": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Model._run_epoch": {
            "name": "_run_epoch",
            "location": 79,
            "return": [
                "float",
                "str",
                "int",
                "bool",
                "List"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "int",
                    "float",
                    "torch.utils.data.DataLoader",
                    "str",
                    "Dataset"
                ],
                "dataloader": [
                    "int",
                    "float",
                    "torch.utils.data.DataLoader",
                    "str",
                    "Dataset"
                ],
                "loss_fn": [
                    "bool",
                    "torch.optim.optimizer.Optimizer",
                    "List[tuple[Union[int,int]]]",
                    "float",
                    "List[Tuple[int,int]]",
                    "None",
                    "Optional[float]"
                ],
                "optimizer": [
                    "torch.optim.optimizer.Optimizer",
                    "bool",
                    "List[Tuple[int, int]]",
                    "Optional[float]",
                    "float"
                ],
                "is_training": [
                    "bool",
                    "List[int]",
                    "List[str]",
                    "Iterable[Any]",
                    "int",
                    "List[Tuple]"
                ],
                "use_wandb": [
                    "bool",
                    "List[int]",
                    "List[str]",
                    "Iterable[Any]",
                    "int",
                    "List[Tuple]"
                ]
            }
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/models/__init__.py": {},
    "Image-Caption-Generator-master/image_caption_generator/networks/resnet101_lstm.py": {
        "ResNet101LSTM.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ResNet101LSTM.forward": {
            "name": "forward",
            "location": 17,
            "return": [
                "int",
                "str",
                "float",
                "Callable",
                "models.Question"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "torch.Tensor"
                ],
                "y": [
                    "int",
                    "float",
                    "gluonts.model.common.Tensor",
                    "torch.Tensor"
                ],
                "y_lengths": [
                    "bool"
                ]
            }
        },
        "ResNet101LSTM._create_modules": {
            "name": "_create_modules",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_img_features": [
                    "int",
                    "float",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "embedding_dim": [
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "hidden_size": [
                    "int",
                    "List",
                    "float",
                    "None",
                    "Optional[int]",
                    "Dict[str,tuple[Union[str,int,int]]]",
                    "bool",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "bidirectional": [
                    "bool",
                    "int",
                    "List",
                    "float",
                    "torch.Tensor",
                    "tensorflow.Tensor",
                    "Tuple[int,int]"
                ],
                "num_layers": [
                    "int",
                    "List",
                    "bool",
                    "float",
                    "torch.Tensor",
                    "tensorflow.Tensor",
                    "Tuple[int,int]"
                ],
                "dropout": [
                    "int",
                    "List",
                    "bool",
                    "float",
                    "torch.Tensor",
                    "tensorflow.Tensor",
                    "Tuple[int,int]"
                ]
            }
        }
    },
    "Image-Caption-Generator-master/image_caption_generator/networks/__init__.py": {},
    "Image-Caption-Generator-master/training/train.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_initialize_wandb": {
            "name": "_initialize_wandb",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 69,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    }
}
{
    "Insight_Project-master/flask_app_instabrand/helper_methods.py": {
        "get_user_timeline": {
            "name": "get_user_timeline",
            "location": 11,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "user": [
                    "str"
                ],
                "db_session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ]
            }
        },
        "get_top_brands": {
            "name": "get_top_brands",
            "location": 32,
            "return": [
                "typing.DefaultDict",
                "int",
                "str",
                "bool",
                "Optional[str]",
                "List[Dict]"
            ],
            "arguments": {
                "mysql_engine": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "get_top_influencers": {
            "name": "get_top_influencers",
            "location": 53,
            "return": [
                "typing.DefaultDict",
                "int",
                "str",
                "bool",
                "Optional[str]",
                "List[Dict]"
            ],
            "arguments": {
                "mysql_engine": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "get_brand_metrics": {
            "name": "get_brand_metrics",
            "location": 73,
            "return": [
                "frozenset",
                "list[list[int]]",
                "dict[typing.Any, set[]]",
                "str"
            ],
            "arguments": {
                "mysql_engine": [
                    "int",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "Insight_Project-master/flask_app_instabrand/run.py": {},
    "Insight_Project-master/flask_app_instabrand/views.py": {
        "dashboard": {
            "name": "dashboard",
            "location": 36,
            "return": [
                "str",
                "int",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "render_map": {
            "name": "render_map",
            "location": 56,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "user_photos": {
            "name": "user_photos",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "bool",
                    "Dict[type, Any]",
                    "str",
                    "dict[typing.Type, typing.Any]"
                ]
            }
        },
        "page_not_found": {
            "name": "page_not_found",
            "location": 87,
            "return": [
                "tuple[int]",
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "str",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "brand_metrics": {
            "name": "brand_metrics",
            "location": 98,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "consume_photos": {
            "name": "consume_photos",
            "location": 113,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/kafka_producers/main.py": {
        "generate_random_events": {
            "name": "generate_random_events",
            "location": 26,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "events": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]"
                ]
            }
        },
        "query_for_users": {
            "name": "query_for_users",
            "location": 39,
            "return": [
                "List[Tuple[str]]"
            ],
            "arguments": {
                "mysql_session": [
                    "pymysql.connections.Connection"
                ]
            }
        },
        "query_for_tags": {
            "name": "query_for_tags",
            "location": 56,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "mysql_session": [
                    "pymysql.connections.Connection"
                ]
            }
        },
        "query_for_locations": {
            "name": "query_for_locations",
            "location": 73,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "mysql_session": [
                    "pymysql.connections.Connection"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "servers": [
                    "List[str]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/comment.py": {
        "get_text": {
            "name": "get_text",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "comment_producer": {
            "name": "comment_producer",
            "location": 28,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "users": [
                    "List[Tuple[str]]"
                ],
                "photos": [
                    "Deque[Tuple[(str, str)]]"
                ],
                "tags": [
                    "List[Tuple[str]]"
                ],
                "locations": [
                    "List[Tuple[(str, str)]]"
                ],
                "producer": [
                    "str",
                    "kafka.producer.KeyedProducer",
                    "list[str]",
                    "dict[str, dict[str, str]]",
                    "List[str]",
                    "dict[typing.Any, str]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[Any, str]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/create_user.py": {
        "remove_non_alpha_chars": {
            "name": "remove_non_alpha_chars",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "fake_user": {
            "name": "fake_user",
            "location": 32,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {}
        },
        "create_user_producer": {
            "name": "create_user_producer",
            "location": 50,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "users": [
                    "List[Tuple[str]]"
                ],
                "photos": [
                    "Deque[Tuple[(str, str)]]"
                ],
                "tags": [
                    "List[Tuple[str]]"
                ],
                "locations": [
                    "List[Tuple[(str, str)]]"
                ],
                "producer": [
                    "dict[str, dict[str, str]]",
                    "kafka.producer.KeyedProducer",
                    "bytes",
                    "list[str]",
                    "Dict[str, Dict[str, str]]",
                    "str",
                    "List[str]",
                    "dict[typing.Any, str]",
                    "Dict[Any, str]",
                    "dict[str, bytes]",
                    "Dict[str, bytes]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/follow.py": {
        "follow_producer": {
            "name": "follow_producer",
            "location": 16,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "users": [
                    "List[Tuple[str]]"
                ],
                "photos": [
                    "Deque[Tuple[(str, str)]]"
                ],
                "tags": [
                    "List[Tuple[str]]"
                ],
                "locations": [
                    "List[Tuple[(str, str)]]"
                ],
                "producer": [
                    "str",
                    "kafka.producer.KeyedProducer",
                    "list[str]",
                    "dict[str, dict[str, str]]",
                    "List[str]",
                    "dict[typing.Any, str]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[Any, str]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/helper_functions.py": {
        "get_datetime": {
            "name": "get_datetime",
            "location": 11,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/kafka_producers/pkg/like.py": {
        "like_producer": {
            "name": "like_producer",
            "location": 16,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "users": [
                    "List[Tuple[str]]"
                ],
                "photos": [
                    "Deque[Tuple[(str, str)]]"
                ],
                "tags": [
                    "List[Tuple[str]]"
                ],
                "locations": [
                    "List[Tuple[(str, str)]]"
                ],
                "producer": [
                    "str",
                    "kafka.producer.KeyedProducer",
                    "list[str]",
                    "dict[str, dict[str, str]]",
                    "List[str]",
                    "dict[typing.Any, str]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[Any, str]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/photo_upload.py": {
        "create_photo_producer": {
            "name": "create_photo_producer",
            "location": 16,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "users": [
                    "List[Tuple[str]]"
                ],
                "photos": [
                    "Deque[Tuple[(str, str)]]"
                ],
                "tags": [
                    "List[Tuple[(str, str)]]"
                ],
                "locations": [
                    "List[Tuple[(str, str)]]"
                ],
                "producer": [
                    "bytes",
                    "kafka.producer.KeyedProducer",
                    "str",
                    "typing.Pattern",
                    "dict[str, bytes]",
                    "Pattern[str]",
                    "Dict[str, bytes]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/unfollow.py": {
        "unfollow_producer": {
            "name": "unfollow_producer",
            "location": 16,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "users": [
                    "List[Tuple[str]]"
                ],
                "photos": [
                    "Deque[Tuple[(str, str)]]"
                ],
                "tags": [
                    "List[Tuple[str]]"
                ],
                "locations": [
                    "List[Tuple[(str, str)]]"
                ],
                "producer": [
                    "str",
                    "kafka.producer.KeyedProducer",
                    "list[str]",
                    "dict[str, dict[str, str]]",
                    "List[str]",
                    "dict[typing.Any, str]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[Any, str]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/__init__.py": {},
    "Insight_Project-master/spark/python_backup/kafka_comment_consumer.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 22,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "sparkConf": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 31,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ]
            }
        },
        "process_comments": {
            "name": "process_comments",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/spark/python_backup/kafka_create_users.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 16,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "sparkConf": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 26,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ]
            }
        },
        "process_users": {
            "name": "process_users",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": [
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/spark/python_backup/kafka_follows_consumer.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "sparkConf": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 26,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]",
                    "int",
                    "set[str]",
                    "dict",
                    "Set[str]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "process_follows": {
            "name": "process_follows",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/spark/python_backup/kafka_photo_consumer.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 22,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "sparkConf": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 31,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "dict[, ]"
                ]
            }
        },
        "process_photos": {
            "name": "process_photos",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/spark/python_backup/kafka_unfollow_consumer.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 16,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "sparkConf": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 24,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]",
                    "int",
                    "set[str]",
                    "dict",
                    "Set[str]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "process_follows": {
            "name": "process_follows",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
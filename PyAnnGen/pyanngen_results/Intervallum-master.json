{
    "Intervallum-master/setup.py": {},
    "Intervallum-master/intervallum/box.py": {
        "Box.__new__": {
            "name": "__new__",
            "location": 13,
            "return": [
                "str",
                "int",
                "float",
                "Dict",
                "Dict[str,Union[Any,Any,Any,Any]]"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Warning",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict]",
                    "None",
                    "Dict"
                ]
            }
        },
        "Box.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "int",
                    "List[int]",
                    "str",
                    "Mapping[Any,Any]",
                    "Mapping",
                    "Optional[GraphLogger]",
                    "None"
                ]
            }
        },
        "Box.__ne__": {
            "name": "__ne__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Box.__copy__": {
            "name": "__copy__",
            "location": 31,
            "return": [
                "Box",
                "List[int]",
                "List[List[int]]",
                "int",
                "Tuple[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.lb": {
            "name": "lb",
            "location": 35,
            "return": [
                "numpy.ndarray",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.ub": {
            "name": "ub",
            "location": 39,
            "return": [
                "numpy.ndarray",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.middle": {
            "name": "middle",
            "location": 43,
            "return": [
                "numpy.ndarray",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.width": {
            "name": "width",
            "location": 47,
            "return": [
                "Tuple[Union[list,int]]",
                "List[str]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box._try_to_reduce": {
            "name": "_try_to_reduce",
            "location": 52,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Intervallum-master/intervallum/box_functions.py": {
        "split": {
            "name": "split",
            "location": 12,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "b": [
                    "int",
                    "list",
                    "bool",
                    "Set[int]",
                    "str"
                ],
                "ratios": [
                    "int",
                    "List[Tuple[int, int]]",
                    "dict",
                    "bool",
                    "str"
                ],
                "split_id": [
                    "str",
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "bisect": {
            "name": "bisect",
            "location": 32,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "b": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ],
                "split_id": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "List[str]"
                ]
            }
        },
        "constrain": {
            "name": "constrain",
            "location": 36,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "int",
                    "List[cirq.Circuit]"
                ],
                "area": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "shrink": {
            "name": "shrink",
            "location": 43,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "alpha": [
                    "bytes",
                    "List[cirq.Circuit]",
                    "List[str]",
                    "int",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]"
                ],
                "shrink_components": [
                    "Match",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[Tuple[Any,Any]]",
                    "Tuple[Union[Any,Any]]",
                    "Optional[T]",
                    "Optional[str]",
                    "Any",
                    "Optional[Any]"
                ]
            }
        }
    },
    "Intervallum-master/intervallum/inclusion_functions.py": {
        "RS_SubinclusionFunction.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "List[str]",
                    "float",
                    "str",
                    "int",
                    "Dict",
                    "List[Union[str,SqlFile]]",
                    "Callable[...,None]",
                    "Callable",
                    "bool"
                ],
                "number_of_samples": [
                    "str",
                    "int",
                    "Union[int,float]",
                    "float",
                    "None",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "bool"
                ]
            }
        },
        "RS_SubinclusionFunction.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "intervallum.interval.Interval"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "numpy.array",
                    "Union[int,float,str]",
                    "Union[str,float]"
                ]
            }
        },
        "RS_SubinclusionFunction.__call__.generate_point": {
            "name": "generate_point",
            "location": 16,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "list"
            ],
            "arguments": {
                "b": [
                    "intervallum.box.Box",
                    "int",
                    "tuple",
                    "str"
                ]
            }
        }
    },
    "Intervallum-master/intervallum/interval.py": {
        "reduce_result": {
            "name": "reduce_result",
            "location": 10,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Iterable[Any]",
                    "str",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "monotonic": {
            "name": "monotonic",
            "location": 18,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "reduce_result.wrapper": {
            "name": "wrapper",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "monotonic.wrapper": {
            "name": "wrapper",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Interval.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower_bound": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[str]"
                ],
                "upper_bound": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[str]"
                ],
                "fix": [
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "Dict[str,Callable]",
                    "Exception",
                    "Callable[...,bool]"
                ]
            }
        },
        "Interval.from_point": {
            "name": "from_point",
            "location": 47,
            "return": [
                "Interval"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInterval]"
                ],
                "point_value": [
                    "int",
                    "str",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "bool"
                ]
            }
        },
        "Interval.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.lb": {
            "name": "lb",
            "location": 61,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "lower_bound": [
                    "bytes",
                    "Dict[str, Any]",
                    "Iterable[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Interval.ub": {
            "name": "ub",
            "location": 72,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "upper_bound": [
                    "str",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "Interval.middle": {
            "name": "middle",
            "location": 79,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.width": {
            "name": "width",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.__copy__": {
            "name": "__copy__",
            "location": 86,
            "return": [
                "Interval"
            ],
            "arguments": {
                "self": [
                    "_TInterval@@Interval@@"
                ]
            }
        },
        "Interval._try_to_reduce": {
            "name": "_try_to_reduce",
            "location": 89,
            "return": [
                "float",
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.inner_subtraction": {
            "name": "inner_subtraction",
            "location": 97,
            "return": [
                "Interval",
                "int",
                "bytes"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "List[str]"
                ],
                "i2": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Interval.__lshift__": {
            "name": "__lshift__",
            "location": 102,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Interval.__eq__": {
            "name": "__eq__",
            "location": 105,
            "return": [
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Interval.__ne__": {
            "name": "__ne__",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Interval.__lt__": {
            "name": "__lt__",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "SupportsInt"
                ]
            }
        },
        "Interval.__le__": {
            "name": "__le__",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "SupportsInt"
                ]
            }
        },
        "Interval.__gt__": {
            "name": "__gt__",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "SupportsInt"
                ]
            }
        },
        "Interval.__ge__": {
            "name": "__ge__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "SupportsInt"
                ]
            }
        },
        "Interval.__add__": {
            "name": "__add__",
            "location": 146,
            "return": [
                "Interval",
                "bool",
                "float",
                "Optional[int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Interval.__radd__": {
            "name": "__radd__",
            "location": 152,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Interval.__neg__": {
            "name": "__neg__",
            "location": 156,
            "return": [
                "Interval",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.__sub__": {
            "name": "__sub__",
            "location": 159,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Interval.__rsub__": {
            "name": "__rsub__",
            "location": 162,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Interval.__mul__": {
            "name": "__mul__",
            "location": 166,
            "return": [
                "Interval",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]"
                ]
            }
        },
        "Interval.__rmul__": {
            "name": "__rmul__",
            "location": 175,
            "return": [
                "float",
                "Interval",
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Interval.__invert__": {
            "name": "__invert__",
            "location": 179,
            "return": [
                "Interval",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.__truediv__": {
            "name": "__truediv__",
            "location": 189,
            "return": [
                "Interval",
                "bool",
                "float",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "SupportsInt"
                ]
            }
        },
        "Interval.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 195,
            "return": [
                "float",
                "int",
                "bool",
                "str",
                "List[str]",
                "Iterable[T]",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Interval._power_even": {
            "name": "_power_even",
            "location": 200,
            "return": [
                "Tuple[Union[Callable,list[float]]]",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "exponent": [
                    "int",
                    "List",
                    "Tuple[str]",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator"
                ]
            }
        },
        "Interval._power_odd": {
            "name": "_power_odd",
            "location": 207,
            "return": [
                "Interval",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "exponent": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Interval.__pow__": {
            "name": "__pow__",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "power": [
                    "int",
                    "Callable",
                    "str"
                ],
                "modulo": [
                    "int",
                    "None",
                    "str",
                    "Iterable[Context]",
                    "Iterable[C]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "IntervalExceptions.WrongBoundsException.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "received_lb": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "received_ub": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "IntervalExceptions.OperationIsNotDefined.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str",
                    "Dict[str, float]",
                    "int",
                    "bool"
                ],
                "i": [
                    "str",
                    "Dict[str, float]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Intervallum-master/intervallum/interval_functions.py": {
        "_get_points_for_trig": {
            "name": "_get_points_for_trig",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Dict[str,Any]"
                ],
                "right": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "sin": {
            "name": "sin",
            "location": 19,
            "return": [
                "Tuple[Union[Callable,list[float]]]",
                "Tuple[Callable]",
                "int",
                "List[int]",
                "Optional[int]",
                "Tuple[Tuple[int,Any]]",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "float",
                    "intervallum.interval.Interval.Number"
                ]
            }
        },
        "cos": {
            "name": "cos",
            "location": 30,
            "return": [
                "Tuple[Union[Callable,list[float]]]",
                "Tuple[Callable]",
                "int",
                "List[int]",
                "Optional[int]",
                "Tuple[Tuple[int,Any]]",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "float",
                    "intervallum.interval.Interval.Number"
                ]
            }
        },
        "abs": {
            "name": "abs",
            "location": 41,
            "return": [
                "Tuple[Union[Callable,list[float]]]",
                "int",
                "List[int]",
                "Optional[int]",
                "Tuple[Tuple[int,Any]]",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "intervallum.interval.Interval.Number",
                    "Tuple[Union[float,float,float,float]]",
                    "Tuple[float,float,float,float]"
                ]
            }
        },
        "exp": {
            "name": "exp",
            "location": 52,
            "return": [
                "Tuple[Union[Callable,list[float]]]",
                "Tuple[Union[Callable,list]]",
                "int",
                "List[int]",
                "Optional[int]",
                "Tuple[Tuple[int,Any]]",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "intervallum.interval.Interval.Number",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        },
        "sqrt": {
            "name": "sqrt",
            "location": 61,
            "return": [
                "str",
                "Tuple[list[float]]",
                "Tuple[list]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "intervallum.interval.Interval.Number"
                ]
            }
        },
        "log": {
            "name": "log",
            "location": 75,
            "return": [
                "str",
                "Tuple[list[float]]",
                "bytes",
                "Tuple[list]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "intervallum.interval.Interval.Number"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 87,
            "return": [
                "list"
            ],
            "arguments": {
                "i": [
                    "int",
                    "intervallum.interval.Interval.Number"
                ],
                "ratios": [
                    "int",
                    "bytearray"
                ]
            }
        },
        "bisect": {
            "name": "bisect",
            "location": 101,
            "return": [
                "list"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Iterator",
                    "intervallum.interval.Interval.Number"
                ]
            }
        },
        "constrain": {
            "name": "constrain",
            "location": 105,
            "return": [
                "Union[(intervallum.interval.Interval, _T0, _T1, _T2)]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "intervallum.interval.Interval.Number",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "min_": [
                    "float",
                    "int",
                    "List",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "max_": [
                    "float",
                    "int",
                    "List",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "shrink": {
            "name": "shrink",
            "location": 118,
            "return": [
                "Union[(intervallum.interval.Interval, _T0)]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "intervallum.interval.Interval.Number"
                ],
                "alpha": [
                    "int"
                ]
            }
        },
        "_hausdorff_distance_part": {
            "name": "_hausdorff_distance_part",
            "location": 127,
            "return": [
                "float",
                "Dict",
                "Dict[str,bool]",
                "str",
                "OrderedDict[str,Any]"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "List[str]",
                    "float"
                ],
                "i2": [
                    "int",
                    "List[str]",
                    "float"
                ]
            }
        },
        "hausdorff_distance": {
            "name": "hausdorff_distance",
            "location": 139,
            "return": [
                "str",
                "List[int]",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "intervallum.interval.Interval.Number"
                ],
                "i2": [
                    "int",
                    "intervallum.interval.Interval.Number"
                ]
            }
        },
        "sqrt.f": {
            "name": "f",
            "location": 62,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "log.f": {
            "name": "f",
            "location": 76,
            "return": [
                "int",
                "str",
                "type"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "constrain.fix_point": {
            "name": "fix_point",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "Callable",
                    "str"
                ],
                "min__": [
                    "int",
                    "Callable",
                    "str"
                ],
                "max__": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Intervallum-master/intervallum/__init__.py": {},
    "Intervallum-master/tests/test_box.py": {
        "b1": {
            "name": "b1",
            "location": 13,
            "return": [
                "Box",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "b2": {
            "name": "b2",
            "location": 18,
            "return": [
                "Box",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "b3": {
            "name": "b3",
            "location": 23,
            "return": [
                "Box",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "b4": {
            "name": "b4",
            "location": 28,
            "return": [
                "Box",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "test_base": {
            "name": "test_base",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "List[str]",
                    "str",
                    "intervallum.box.Box",
                    "int"
                ]
            }
        },
        "test_str_repr": {
            "name": "test_str_repr",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "Callable",
                    "List[dict]",
                    "intervallum.box.Box",
                    "int",
                    "numpy.array",
                    "numpy.ndarray"
                ]
            }
        },
        "test_dim": {
            "name": "test_dim",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "str",
                    "int",
                    "intervallum.box.Box",
                    "bool"
                ],
                "b2": [
                    "str",
                    "int",
                    "intervallum.box.Box",
                    "bool"
                ]
            }
        },
        "test_lb_ub": {
            "name": "test_lb_ub",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "List[int]",
                    "intervallum.box.Box",
                    "Dict[str,Any]",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "test_middle": {
            "name": "test_middle",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "OrderedDict",
                    "intervallum.box.Box",
                    "List[int]",
                    "Dict",
                    "None",
                    "List[str]",
                    "Optional[numpy.ndarray]",
                    "Optional[List[str]]"
                ],
                "b2": [
                    "OrderedDict",
                    "intervallum.box.Box",
                    "List[int]",
                    "Dict",
                    "None",
                    "List[str]",
                    "Optional[numpy.ndarray]",
                    "Optional[List[str]]"
                ]
            }
        },
        "test_width": {
            "name": "test_width",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "int",
                    "str",
                    "bytearray",
                    "None",
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "b2": [
                    "int",
                    "str",
                    "bytearray",
                    "None",
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "b3": [
                    "int",
                    "str",
                    "bytearray",
                    "None",
                    "numpy.ndarray",
                    "Optional[int]"
                ]
            }
        },
        "test_eq": {
            "name": "test_eq",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "int",
                    "str",
                    "bytes",
                    "intervallum.box.Box",
                    "numpy.array"
                ],
                "b2": [
                    "str",
                    "int",
                    "intervallum.box.Box",
                    "bool"
                ]
            }
        },
        "test_try_to_reduce": {
            "name": "test_try_to_reduce",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "bytes",
                    "Callable[bytes,bytes]",
                    "numpy.ndarray",
                    "str",
                    "int",
                    "IO",
                    "Dict",
                    "Callable[[bytes],bytes]",
                    "IO[str]"
                ],
                "b4": [
                    "int"
                ]
            }
        },
        "test_multiply_by_scalar": {
            "name": "test_multiply_by_scalar",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "Dict",
                    "int",
                    "intervallum.box.Box"
                ]
            }
        },
        "test_addition": {
            "name": "test_addition",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "int",
                    "intervallum.box.Box"
                ],
                "b2": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "Union[numpy.ndarray,numpy.void]"
                ],
                "b3": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "float"
                ]
            }
        },
        "test_split": {
            "name": "test_split",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "Dict",
                    "intervallum.box.Box",
                    "str",
                    "Type",
                    "None",
                    "Optional[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_constrain": {
            "name": "test_constrain",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "b3": [
                    "Tuple[Union[float,float]]",
                    "intervallum.box.Box",
                    "str",
                    "bytearray",
                    "bytes",
                    "Tuple[float,float]",
                    "float"
                ]
            }
        },
        "test_shrink": {
            "name": "test_shrink",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "b1": [
                    "int",
                    "bytes",
                    "intervallum.box.Box",
                    "List[list[str]]",
                    "List[List[str]]",
                    "pyimgtool.data_structures.Box"
                ]
            }
        }
    },
    "Intervallum-master/tests/test_interval.py": {
        "i1": {
            "name": "i1",
            "location": 10,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "i2": {
            "name": "i2",
            "location": 15,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "i3": {
            "name": "i3",
            "location": 20,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "i4": {
            "name": "i4",
            "location": 25,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "i5": {
            "name": "i5",
            "location": 30,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "i6": {
            "name": "i6",
            "location": 35,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "i7": {
            "name": "i7",
            "location": 40,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "test_interval_exceptions": {
            "name": "test_interval_exceptions",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_representation": {
            "name": "test_string_representation",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "List[int]"
                ],
                "i4": [
                    "int",
                    "List[int]"
                ],
                "i6": [
                    "bool",
                    "int",
                    "str",
                    "List[Callable]",
                    "Optional[List[Callable]]",
                    "None"
                ]
            }
        },
        "test_equality": {
            "name": "test_equality",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int"
                ],
                "i2": [
                    "int",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ]
            }
        },
        "test_lt": {
            "name": "test_lt",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "float"
                ],
                "i2": [
                    "int",
                    "float"
                ],
                "i6": [
                    "int",
                    "float"
                ],
                "i7": [
                    "int",
                    "float"
                ]
            }
        },
        "test_le": {
            "name": "test_le",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ],
                "i2": [
                    "List[str]"
                ]
            }
        },
        "test_gt": {
            "name": "test_gt",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "float"
                ],
                "i2": [
                    "int",
                    "float"
                ],
                "i6": [
                    "int",
                    "float"
                ],
                "i7": [
                    "int",
                    "float"
                ]
            }
        },
        "test_ge": {
            "name": "test_ge",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "None"
                ],
                "i2": [
                    "float",
                    "str",
                    "int",
                    "Tuple[int]",
                    "List[float]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_middle": {
            "name": "test_middle",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "i2": [
                    "float",
                    "int",
                    "Union[int,slice]",
                    "numpy.ndarray",
                    "bool"
                ],
                "i3": [
                    "float",
                    "int",
                    "Union[int,slice]",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "test_width": {
            "name": "test_width",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "i7": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "i4": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "test_reduction": {
            "name": "test_reduction",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "i4": [
                    "int"
                ]
            }
        },
        "test_addition": {
            "name": "test_addition",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "float",
                    "int",
                    "List",
                    "Dict[str,bool]",
                    "bool"
                ],
                "i2": [
                    "int",
                    "float",
                    "bool"
                ],
                "i3": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ],
                "i4": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ],
                "i5": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ]
            }
        },
        "test_subtraction": {
            "name": "test_subtraction",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "float",
                    "int",
                    "List",
                    "Dict[str,bool]",
                    "bool"
                ],
                "i2": [
                    "int",
                    "float",
                    "bool"
                ],
                "i3": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ],
                "i4": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ],
                "i5": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ]
            }
        },
        "test_multiplication": {
            "name": "test_multiplication",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "float",
                    "int",
                    "List",
                    "Dict[str,bool]",
                    "bool"
                ],
                "i2": [
                    "int",
                    "float",
                    "bool"
                ],
                "i3": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ],
                "i4": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ],
                "i5": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ]
            }
        },
        "test_division": {
            "name": "test_division",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "float"
                ],
                "i2": [
                    "int",
                    "float"
                ],
                "i3": [
                    "int",
                    "List",
                    "float",
                    "Sequence[int]",
                    "bool",
                    "numpy.ndarray"
                ],
                "i4": [
                    "bool",
                    "Sequence[int]",
                    "int"
                ],
                "i5": [
                    "int",
                    "List",
                    "float",
                    "Sequence[int]",
                    "bool",
                    "numpy.ndarray"
                ],
                "i6": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ],
                "i7": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]",
                    "bool"
                ]
            }
        },
        "test_power": {
            "name": "test_power",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "float",
                    "MutableMapping[str,str]",
                    "MutableMapping"
                ],
                "i2": [
                    "int",
                    "float",
                    "MutableMapping[str,str]",
                    "MutableMapping"
                ],
                "i5": [
                    "int",
                    "float",
                    "MutableMapping[str,str]",
                    "MutableMapping"
                ]
            }
        },
        "test_sin": {
            "name": "test_sin",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "List[str]"
                ],
                "i2": [
                    "List[str]"
                ],
                "i3": [
                    "List[str]"
                ],
                "i6": [
                    "List[str]"
                ]
            }
        },
        "test_cos": {
            "name": "test_cos",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "List[str]"
                ],
                "i2": [
                    "List[str]"
                ],
                "i3": [
                    "List[str]"
                ],
                "i6": [
                    "List[str]"
                ]
            }
        },
        "test_abs": {
            "name": "test_abs",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "float",
                    "List[list[int]]",
                    "numpy.ndarray",
                    "bool",
                    "List[List[int]]"
                ],
                "i2": [
                    "int",
                    "float",
                    "List[list[int]]",
                    "numpy.ndarray",
                    "bool",
                    "List[List[int]]"
                ],
                "i3": [
                    "int",
                    "float",
                    "List[list[int]]",
                    "numpy.ndarray",
                    "bool",
                    "List[List[int]]"
                ],
                "i4": [
                    "int",
                    "float",
                    "List[list[int]]",
                    "numpy.ndarray",
                    "bool",
                    "List[List[int]]"
                ],
                "i5": [
                    "int",
                    "float",
                    "List[list[int]]",
                    "numpy.ndarray",
                    "bool",
                    "List[List[int]]"
                ],
                "i6": [
                    "int",
                    "float",
                    "List[list[int]]",
                    "numpy.ndarray",
                    "bool",
                    "List[List[int]]"
                ],
                "i7": [
                    "int",
                    "float",
                    "List[list[int]]",
                    "numpy.ndarray",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "test_exp": {
            "name": "test_exp",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "List[str]"
                ],
                "i2": [
                    "List[str]"
                ],
                "i3": [
                    "List[str]"
                ]
            }
        },
        "test_sqrt": {
            "name": "test_sqrt",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "i3": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "i5": [
                    "int",
                    "Dict",
                    "str",
                    "List[tuple[Union[Any,Any]]]",
                    "bool",
                    "List[Tuple[Any,Any]]"
                ]
            }
        },
        "test_log": {
            "name": "test_log",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "str",
                    "Callable",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[numpy.dtype]",
                    "None"
                ],
                "i2": [
                    "int",
                    "str",
                    "Callable",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[numpy.dtype]",
                    "None"
                ],
                "i3": [
                    "int",
                    "float",
                    "List[str]",
                    "List[int]",
                    "bool"
                ],
                "i4": [
                    "int",
                    "float",
                    "List[str]",
                    "List[int]",
                    "bool"
                ],
                "i5": [
                    "str",
                    "int",
                    "float",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "i6": [
                    "str",
                    "int",
                    "float",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "i7": [
                    "int",
                    "str",
                    "Callable",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[numpy.dtype]",
                    "None"
                ]
            }
        },
        "test_constrain": {
            "name": "test_constrain",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "i4": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "i7": [
                    "int"
                ]
            }
        },
        "test_splitting": {
            "name": "test_splitting",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "str",
                    "int"
                ]
            }
        },
        "test_shrinking": {
            "name": "test_shrinking",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "i3": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_hausdorff": {
            "name": "test_hausdorff",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "i1": [
                    "int"
                ]
            }
        }
    },
    "Intervallum-master/tests/test_interval_functions.py": {
        "test_base": {
            "name": "test_base",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base.f": {
            "name": "f",
            "location": 10,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Intervallum-master/tests/__init__.py": {}
}
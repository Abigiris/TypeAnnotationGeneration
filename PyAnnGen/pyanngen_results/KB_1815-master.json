{
    "KB_1815-master/config_loader.py": {
        "load": {
            "name": "load",
            "location": 10,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "config_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "IO[Any]"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "save_dir": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "out_name": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "int",
                    "Union[str, bytes, IO[bytes]]",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "KB_1815-master/src/letter_classifier/detect.py": {
        "detect_diff": {
            "name": "detect_diff",
            "location": 15,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img_before": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "img_after": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "diff_threthold": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "diff_threshold": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "stddev_threshold": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "float",
                    "Optional[Tuple[int, int]]"
                ],
                "resize": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "float",
                    "Optional[Tuple[int, int]]"
                ],
                "size_extract": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "float",
                    "Optional[Tuple[int, int]]"
                ],
                "center_position": [
                    "bool",
                    "None",
                    "int",
                    "tuple",
                    "tuple[]"
                ],
                "gray_scale": [
                    "bool",
                    "int",
                    "tuple"
                ]
            }
        }
    },
    "KB_1815-master/src/letter_classifier/pic2type_letter.py": {
        "predict_mail_type": {
            "name": "predict_mail_type",
            "location": 12,
            "return": [
                "typing.Text",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "img": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "typing.IO",
                    "Union[str, pathlib3x.Path, IO[str]]",
                    "int"
                ],
                "resize": [
                    "None",
                    "numpy.ndarray",
                    "int",
                    "Union[None, int]",
                    "typing.Type",
                    "typing.Any",
                    "Optional[int]",
                    "Optional[Type[Any]]",
                    "Optional[Any]"
                ],
                "threshold_stddev": [
                    "int",
                    "bool",
                    "Union[int, float]"
                ],
                "size_extract": [
                    "tuple[int]",
                    "Tuple[int, int]",
                    "bool",
                    "float",
                    "str",
                    "Collection[int]",
                    "int",
                    "Optional[int]"
                ],
                "center_position": [
                    "None",
                    "Tuple[int, int]",
                    "bool",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Collection[int]",
                    "typing.Collection",
                    "int",
                    "Optional[int]"
                ],
                "gray_scale": [
                    "bool",
                    "Tuple[int, int]",
                    "float",
                    "str",
                    "Collection[int]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "_extract_center_position": {
            "name": "_extract_center_position",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img_array": [
                    "int",
                    "bool",
                    "float",
                    "numpy.ndarray"
                ],
                "size_extract": [
                    "tuple[int]",
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "numpy.ndarray"
                ],
                "center_position": [
                    "None",
                    "tuple",
                    "int",
                    "tuple[]",
                    "Optional[int]",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "Exception",
                    "Optional[Exception]",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "gray_scale": [
                    "bool",
                    "Iterable[T]",
                    "int"
                ]
            }
        }
    },
    "KB_1815-master/src/letter_classifier/take_pic.py": {
        "detect_diff": {
            "name": "detect_diff",
            "location": 26,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img_before": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "img_after": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "diff_threthold": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cam_device": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "KB_1815-master/src/letter_classifier/__init__.py": {},
    "KB_1815-master/src/line/app.py": {
        "important": {
            "name": "important",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "who": {
            "name": "who",
            "location": 14,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "body": []
            }
        },
        "callback": {
            "name": "callback",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "message_text": {
            "name": "message_text",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "my_service": {
            "name": "my_service",
            "location": 265,
            "return": [],
            "arguments": {}
        },
        "launch_request_handler": {
            "name": "launch_request_handler",
            "location": 272,
            "return": [],
            "arguments": {
                "clova_request": []
            }
        },
        "name": {
            "name": "name",
            "location": 282,
            "return": [],
            "arguments": {
                "clova_request": []
            }
        },
        "show": {
            "name": "show",
            "location": 309,
            "return": [],
            "arguments": {
                "clova_request": []
            }
        },
        "complete": {
            "name": "complete",
            "location": 338,
            "return": [],
            "arguments": {
                "clova_request": []
            }
        },
        "re_delivery": {
            "name": "re_delivery",
            "location": 355,
            "return": [],
            "arguments": {
                "clova_request": []
            }
        },
        "default_handler": {
            "name": "default_handler",
            "location": 371,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "KB_1815-master/src/line/func.py": {
        "login": {
            "name": "login",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "passwd": [],
                "ID": []
            }
        },
        "registration": {
            "name": "registration",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [],
                "ID": []
            }
        },
        "overwride": {
            "name": "overwride",
            "location": 65,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "before": [],
                "after": []
            }
        },
        "beacon_action": {
            "name": "beacon_action",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [],
                "ID": []
            }
        },
        "poststamp": {
            "name": "poststamp",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "ID": []
            }
        },
        "okaeri": {
            "name": "okaeri",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        },
        "postimage2one": {
            "name": "postimage2one",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "image_url": [],
                "ID": []
            }
        },
        "post2admin": {
            "name": "post2admin",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "post_text": []
            }
        },
        "post2one": {
            "name": "post2one",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "post_text": [],
                "ID": []
            }
        },
        "post2others": {
            "name": "post2others",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "post_text": [],
                "ID": []
            }
        },
        "notification": {
            "name": "notification",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "ID": []
            }
        },
        "ask_close_key": {
            "name": "ask_close_key",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        },
        "talkmode_switch": {
            "name": "talkmode_switch",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ask_open_key": {
            "name": "ask_open_key",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        },
        "open_key": {
            "name": "open_key",
            "location": 355,
            "return": [],
            "arguments": {}
        },
        "close_key": {
            "name": "close_key",
            "location": 359,
            "return": [],
            "arguments": {}
        },
        "send_first_message": {
            "name": "send_first_message",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        },
        "template_response": {
            "name": "template_response",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        },
        "ask_call": {
            "name": "ask_call",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        },
        "ask_snap_shot": {
            "name": "ask_snap_shot",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        },
        "snap_shot": {
            "name": "snap_shot",
            "location": 512,
            "return": [],
            "arguments": {}
        },
        "send_snap_shot": {
            "name": "send_snap_shot",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        },
        "LINE_PAY": {
            "name": "LINE_PAY",
            "location": 522,
            "return": [],
            "arguments": {}
        },
        "complete_res": {
            "name": "complete_res",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "qr2url": {
            "name": "qr2url",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "image_path": []
            }
        },
        "call": {
            "name": "call",
            "location": 606,
            "return": [],
            "arguments": {
                "ID": []
            }
        },
        "complete_info": {
            "name": "complete_info",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        },
        "complete_pay": {
            "name": "complete_pay",
            "location": 644,
            "return": [
                "None"
            ],
            "arguments": {
                "ID": []
            }
        }
    },
    "KB_1815-master/src/line/util/config_loader.py": {
        "load": {
            "name": "load",
            "location": 9,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "config_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "IO[Any]"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Path",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "save_dir": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "out_name": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "int",
                    "Union[str, bytes, IO[bytes]]",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "KB_1815-master/src/line/util/__init__.py": {},
    "KB_1815-master/src/line_pay/app.py": {
        "render_index": {
            "name": "render_index",
            "location": 85,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "redirect_to_pay": {
            "name": "redirect_to_pay",
            "location": 89,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "callback_from_pay": {
            "name": "callback_from_pay",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "handler_error_400": {
            "name": "handler_error_400",
            "location": 106,
            "return": [
                "Exception",
                "str",
                "tuple[]",
                "List[str]",
                "Optional[str]",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "str",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "qr2url": {
            "name": "qr2url",
            "location": 110,
            "return": [
                "Optional[int]",
                "Optional[Dict]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {}
        },
        "LinePay.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_id": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "Optional[str]",
                    "None"
                ],
                "channel_secret": [
                    "str",
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "redirect_url": [
                    "str"
                ]
            }
        },
        "LinePay.reserve": {
            "name": "reserve",
            "location": 30,
            "return": [
                "str",
                "Optional[Dict]",
                "dict",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "product_name": [
                    "str",
                    "bool",
                    "set[int]",
                    "Set[int]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "amount": [
                    "str",
                    "bool",
                    "set[int]",
                    "Set[int]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "currency": [
                    "str",
                    "bool",
                    "set[int]",
                    "Set[int]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "order_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "list[str]",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "List[str]"
                ]
            }
        },
        "LinePay.confirm": {
            "name": "confirm",
            "location": 55,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "transaction_id": [
                    "str"
                ]
            }
        }
    },
    "KB_1815-master/src/okmt/rename.py": {},
    "KB_1815-master/src/send_photo/api_camera.py": {
        "snapshot": {
            "name": "snapshot",
            "location": 9,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "float",
                "bytes"
            ],
            "arguments": {}
        },
        "not_found": {
            "name": "not_found",
            "location": 23,
            "return": [
                "str",
                "bool",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "str",
                    "List[str]",
                    "list[str]",
                    "tuple",
                    "tuple[]"
                ]
            }
        }
    },
    "KB_1815-master/src/speech2text/speech2text.py": {
        "transform": {
            "name": "transform",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "KB_1815-master/src/speech2text/speech2text_api.py": {
        "speech2text": {
            "name": "speech2text",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "speech2text.handle_over_max_file_size": {
            "name": "handle_over_max_file_size",
            "location": 34,
            "return": [
                "typing.Text",
                "bool",
                "Callable[[List, bool], None]",
                "str",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "error": [
                    "List[str]",
                    "Exception",
                    "werkzeug.exceptions.NotFound",
                    "BaseException",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "KB_1815-master/src/util/config_loader.py": {
        "load": {
            "name": "load",
            "location": 10,
            "return": [
                "int",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "config_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "IO[Any]"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "save_dir": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "out_name": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "int",
                    "Union[str, bytes, IO[bytes]]",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "KB_1815-master/src/util/__init__.py": {}
}
{
    "LaFontaine-master/lafontaine.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "LaFontaine-master/lafontaine/__init__.py": {},
    "LaFontaine-master/lafontaine/feature_director/feature_director.py": {
        "FeatureDirector.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "genre": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "max_length": [
                    "datetime.timedelta"
                ],
                "all_features": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]",
                    "None",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "FeatureDirector.check_for_all_features": {
            "name": "check_for_all_features",
            "location": 14,
            "return": [
                "Optional[lafontaine.feature_director.feature.base_feature.BaseFeature]"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "float",
                    "Iterator",
                    "typing.Iterator"
                ]
            }
        },
        "FeatureDirector._check_for_features": {
            "name": "_check_for_features",
            "location": 17,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/__init__.py": {},
    "LaFontaine-master/lafontaine/feature_director/feature/base_feature.py": {
        "BaseFeature.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "frames": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/feature/continuous_feature.py": {
        "ContinuousFeature.check_feature": {
            "name": "check_feature",
            "location": 9,
            "return": [
                "lafontaine.feature_director.feature_result.continuous_frame_result.ContinuousFrameResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/feature/single_frame_feature.py": {
        "SingleFrameFeature.check_feature": {
            "name": "check_feature",
            "location": 9,
            "return": [
                "lafontaine.feature_director.feature_result.single_frame_feature_result.SingleFrameFeatureResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/feature/__init__.py": {},
    "LaFontaine-master/lafontaine/feature_director/features/__init__.py": {},
    "LaFontaine-master/lafontaine/feature_director/features/image/color_counter.py": {
        "ColorCounter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color_count": [
                    "int"
                ],
                "frames": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "ColorCounter.get_unique_colors": {
            "name": "get_unique_colors",
            "location": 15,
            "return": [
                "str",
                "T",
                "bool",
                "int"
            ],
            "arguments": {
                "frame": [
                    "str",
                    "int"
                ]
            }
        },
        "ColorCounter.check_feature": {
            "name": "check_feature",
            "location": 18,
            "return": [
                "lafontaine.feature_director.feature_result.single_frame_feature_result.SingleFrameFeatureResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "lafontaine.helpers.frame.Frame"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/image/face_recognizer.py": {
        "FaceRecognizer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "face_count": [
                    "int"
                ],
                "frames": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "cuda": [
                    "bool"
                ]
            }
        },
        "FaceRecognizer.check_feature": {
            "name": "check_feature",
            "location": 14,
            "return": [
                "lafontaine.feature_director.feature_result.single_frame_feature_result.SingleFrameFeatureResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/image/frame_delta_detector.py": {
        "FrameDeltaDetector.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "int",
                    "float",
                    "bool"
                ],
                "frame_change_limit": [
                    "int",
                    "float",
                    "bool"
                ],
                "frame_limit": [
                    "int",
                    "float",
                    "str"
                ],
                "frames": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "FrameDeltaDetector.calculate_delta": {
            "name": "calculate_delta",
            "location": 22,
            "return": [
                "str",
                "int",
                "float",
                "bytearray"
            ],
            "arguments": {
                "frame1": [
                    "lafontaine.helpers.frame.Frame"
                ],
                "frame2": [
                    "lafontaine.helpers.frame.Frame"
                ]
            }
        },
        "FrameDeltaDetector.check_feature": {
            "name": "check_feature",
            "location": 25,
            "return": [
                "lafontaine.feature_director.feature_result.continuous_frame_result.ContinuousFrameResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "numpy.ndarray",
                    "str",
                    "Union[str, bool, None]",
                    "bool",
                    "Sequence['cirq.Qid']",
                    "None",
                    "typing.Sequence['cirq.Qid']"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/image/__init__.py": {},
    "LaFontaine-master/lafontaine/feature_director/features/sound/high_volume_detector.py": {
        "HighVolumeDetector.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "volume": [
                    "int",
                    "float",
                    "bool"
                ],
                "frame_limit": [
                    "int",
                    "float",
                    "str"
                ],
                "frames": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "HighVolumeDetector.check_feature": {
            "name": "check_feature",
            "location": 15,
            "return": [
                "lafontaine.feature_director.feature_result.continuous_frame_result.ContinuousFrameResult"
            ],
            "arguments": {
                "self": [],
                "frame": []
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/sound/sound_delta_detector.py": {
        "SoundDeltaDetector.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "int",
                    "float",
                    "bool"
                ],
                "frame_change_limit": [
                    "int",
                    "float",
                    "bool"
                ],
                "frame_limit": [
                    "int",
                    "float",
                    "str"
                ],
                "frames": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "SoundDeltaDetector.calculate_delta": {
            "name": "calculate_delta",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "frame1": [
                    "lafontaine.helpers.frame.Frame"
                ],
                "frame2": [
                    "lafontaine.helpers.frame.Frame"
                ]
            }
        },
        "SoundDeltaDetector.check_feature": {
            "name": "check_feature",
            "location": 25,
            "return": [
                "lafontaine.feature_director.feature_result.continuous_frame_result.ContinuousFrameResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "numpy.ndarray",
                    "str",
                    "Union[str, bool, None]",
                    "bool",
                    "Sequence['cirq.Qid']",
                    "None",
                    "typing.Sequence['cirq.Qid']"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/sound/sound_peak_detector.py": {
        "SoundPeakDetector.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_threshold": [
                    "int",
                    "float",
                    "bool"
                ],
                "frames": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "SoundPeakDetector.check_feature": {
            "name": "check_feature",
            "location": 13,
            "return": [
                "lafontaine.feature_director.feature_result.single_frame_feature_result.SingleFrameFeatureResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "lafontaine.helpers.frame.Frame"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/sound/sound_util.py": {
        "SoundUtil.get_volume_of_frame": {
            "name": "get_volume_of_frame",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "frame": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/sound/__init__.py": {},
    "LaFontaine-master/lafontaine/feature_director/features/subtitle/subtitle_conversation_count.py": {
        "SubtitleConversationCount.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conversation_count": [
                    "int"
                ],
                "frames": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "SubtitleConversationCount.check_feature": {
            "name": "check_feature",
            "location": 12,
            "return": [
                "lafontaine.feature_director.feature_result.single_frame_feature_result.SingleFrameFeatureResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "lafontaine.helpers.frame.Frame"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/subtitle/subtitle_density_detector.py": {
        "SubtitleDensityDetector.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_count": [
                    "str",
                    "int"
                ],
                "frames": [
                    "str"
                ]
            }
        },
        "SubtitleDensityDetector.check_feature": {
            "name": "check_feature",
            "location": 12,
            "return": [
                "lafontaine.feature_director.feature_result.single_frame_feature_result.SingleFrameFeatureResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "lafontaine.helpers.frame.Frame"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/subtitle/subtitle_intensity_detector.py": {
        "SubtitleIntensityDetector.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intensity_char": [
                    "str",
                    "int",
                    "Mapping[str, str]",
                    "typing.Mapping",
                    "bytes",
                    "FrozenSet[int]",
                    "frozenset",
                    "list",
                    "list[]"
                ],
                "char_count": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "frames": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SubtitleIntensityDetector.check_feature": {
            "name": "check_feature",
            "location": 13,
            "return": [
                "lafontaine.feature_director.feature_result.single_frame_feature_result.SingleFrameFeatureResult"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "lafontaine.helpers.frame.Frame"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/features/subtitle/__init__.py": {},
    "LaFontaine-master/lafontaine/feature_director/feature_result/base_feature_result.py": {
        "BaseFeatureResult.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool"
                ],
                "frames": [
                    "int"
                ],
                "feature": [
                    "str"
                ],
                "feature_type": [
                    "lafontaine.helpers.feature_types.FeatureType"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/feature_result/continuous_frame_result.py": {
        "ContinuousFrameResult.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool"
                ],
                "frames": [
                    "int"
                ],
                "feature": [
                    "str"
                ],
                "candidate_frames": [
                    "List[lafontaine.helpers.frame.Frame]"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/feature_result/single_frame_feature_result.py": {
        "SingleFrameFeatureResult.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool"
                ],
                "frames": [
                    "int"
                ],
                "feature": [
                    "str"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/feature_director/feature_result/__init__.py": {},
    "LaFontaine-master/lafontaine/generator/video_generator.py": {
        "VideoGenerator.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_to_video": [
                    "str",
                    "int",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "max_length": [
                    "datetime.timedelta"
                ],
                "out_path": [
                    "bool",
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "title": [
                    "bool",
                    "Optional[List[Any]]",
                    "Union[Callable, str]",
                    "list[typing.Any]",
                    "None",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "VideoGenerator.generate_from_scenes": {
            "name": "generate_from_scenes",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scenes": [
                    "List[lafontaine.helpers.scene.Scene]"
                ],
                "fps": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "VideoGenerator._generate_from_scene": {
            "name": "_generate_from_scene",
            "location": 48,
            "return": [
                "List[str]",
                "dict",
                "bytes",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "float",
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "tuple",
                    "tuple[]"
                ],
                "fps": [
                    "float",
                    "Sequence[float]",
                    "typing.Sequence[float]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "VideoGenerator._generate_from_frames": {
            "name": "_generate_from_frames",
            "location": 51,
            "return": [
                "set",
                "Callable",
                "str",
                "Sequence[str]",
                "list[typing.Pattern]",
                "dict[str, str]",
                "set[str]",
                "typing.Match",
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "List[lafontaine.helpers.frame.Frame]"
                ],
                "fps": [
                    "int",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/generator/__init__.py": {},
    "LaFontaine-master/lafontaine/helpers/feature_types.py": {},
    "LaFontaine-master/lafontaine/helpers/frame.py": {
        "Frame.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "float",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "int"
                ],
                "audio": [
                    "str",
                    "float",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "int"
                ],
                "timestamp": [
                    "str",
                    "float",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "int"
                ],
                "sub": [
                    "str",
                    "None",
                    "float",
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/helpers/scene.py": {
        "Scene.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.add_frame": {
            "name": "add_frame",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "float",
                    "int"
                ]
            }
        },
        "Scene.add_frames": {
            "name": "add_frames",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "list[]",
                    "list",
                    "str",
                    "list[str]",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "Iterable[float]"
                ]
            }
        },
        "Scene.start_ts": {
            "name": "start_ts",
            "location": 11,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scene.end_ts": {
            "name": "end_ts",
            "location": 14,
            "return": [
                "float",
                "bool",
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "LaFontaine-master/lafontaine/helpers/video_stats.py": {
        "VideoStats.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fps": [
                    "int",
                    "float",
                    "tuple",
                    "tuple[]",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "width": [
                    "int",
                    "float",
                    "tuple",
                    "tuple[]",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "height": [
                    "int",
                    "float",
                    "tuple",
                    "tuple[]",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/helpers/__init__.py": {},
    "LaFontaine-master/lafontaine/parser/config_parser.py": {
        "ConfigParser.get_director_from_config": {
            "name": "get_director_from_config",
            "location": 18,
            "return": [
                "lafontaine.feature_director.feature_director.FeatureDirector"
            ],
            "arguments": {
                "config": [
                    "str"
                ],
                "cuda": [
                    "bool"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/parser/video_parser.py": {
        "VideoParser.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_path": [
                    "str"
                ],
                "srt_path": [
                    "str",
                    "Optional[TextIO]",
                    "typing.TextIO",
                    "None"
                ],
                "downscale": [
                    "str",
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "VideoParser.get_scenes": {
            "name": "get_scenes",
            "location": 31,
            "return": [
                "List[lafontaine.helpers.scene.Scene]"
            ],
            "arguments": {
                "self": [],
                "feature_director": [
                    "lafontaine.feature_director.feature_director.FeatureDirector"
                ],
                "spoiler": [
                    "bool"
                ]
            }
        }
    },
    "LaFontaine-master/lafontaine/parser/__init__.py": {},
    "LaFontaine-master/test/__init__.py": {},
    "LaFontaine-master/test/unit/test_feature_director.py": {
        "TestFeatureDirector.test_can_get_unique_colors": {
            "name": "test_can_get_unique_colors",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureDirector.test_can_calculate_frame_image_delta": {
            "name": "test_can_calculate_frame_image_delta",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "LaFontaine-master/test/unit/test_generator.py": {},
    "LaFontaine-master/test/unit/test_video_parser.py": {},
    "LaFontaine-master/test/unit/__init__.py": {}
}
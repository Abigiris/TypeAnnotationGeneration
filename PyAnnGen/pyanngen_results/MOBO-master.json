{
    "MOBO-master/setup.py": {},
    "MOBO-master/docs/conf.py": {},
    "MOBO-master/mobo/__init__.py": {},
    "MOBO-master/mobo/acquisition/ei.py": {
        "ei": {
            "name": "ei",
            "location": 4,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "y_pred": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "y_train": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "MOBO-master/mobo/acquisition/ucb.py": {
        "ucb": {
            "name": "ucb",
            "location": 4,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "float",
                "Set[str]",
                "list[]",
                "dict",
                "int"
            ],
            "arguments": {
                "y_pred": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "y_train": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "MOBO-master/mobo/acquisition/__init__.py": {},
    "MOBO-master/mobo/bayesopt/core.py": {
        "MultiObjectiveBayesianOpt.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluation_function": [
                    "float",
                    "None",
                    "int",
                    "str",
                    "Iterable[Iterable]",
                    "typing.Iterable[typing.Iterable[]]",
                    "Iterable",
                    "typing.Hashable",
                    "Hashable",
                    "bool"
                ],
                "Initializer": [
                    "float",
                    "int",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Hashable",
                    "bool"
                ],
                "surrogate_model": [
                    "float",
                    "int",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Hashable",
                    "bool"
                ],
                "optimizer": [
                    "float",
                    "int",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Hashable",
                    "bool"
                ],
                "acquisition": [
                    "float",
                    "int",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Hashable",
                    "bool"
                ],
                "n_objective_dimension": [
                    "int",
                    "Optional[int]",
                    "Tuple[numpy.dtype]",
                    "List[str]",
                    "Optional[numpy.ndarray]"
                ],
                "n_design_variables_dimension": [
                    "int",
                    "Callable",
                    "str",
                    "float",
                    "Union[str, int, float]"
                ],
                "n_initial_sample": [
                    "int",
                    "float",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Hashable",
                    "bool"
                ],
                "bayesian_optimization_iter_max": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "Tuple[Any, Any, Any, Any, Any]"
                ],
                "likelihood_optimization_iter_max": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "Tuple[Any, Any, Any, Any, Any]"
                ],
                "likelihood_optimization_criteria": [
                    "float",
                    "int",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Hashable",
                    "bool"
                ],
                "n_new_samples": [
                    "int",
                    "str",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "tuple"
                ],
                "n_ga_population": [
                    "int",
                    "float",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Hashable",
                    "bool"
                ],
                "n_ga_generation": [
                    "int",
                    "float",
                    "str",
                    "Iterable[Iterable]",
                    "Iterable",
                    "Hashable",
                    "bool"
                ]
            }
        },
        "MultiObjectiveBayesianOpt._initialize": {
            "name": "_initialize",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt._train_likelihood": {
            "name": "_train_likelihood",
            "location": 62,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt._wrap_model_and_acquisition": {
            "name": "_wrap_model_and_acquisition",
            "location": 105,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt._find_new_sample": {
            "name": "_find_new_sample",
            "location": 122,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt.optimize": {
            "name": "optimize",
            "location": 148,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt._wrap_model_and_acquisition.ei_with_surrogate_model": {
            "name": "ei_with_surrogate_model",
            "location": 107,
            "return": [
                "str",
                "Callable",
                "List[Dict[str, str]]",
                "list",
                "numpy.ndarray",
                "Tuple[Sequence]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Union[tensorflow.Tensor, numpy.ndarray]",
                    "pystork.model.Model"
                ]
            }
        }
    },
    "MOBO-master/mobo/bayesopt/__init__.py": {},
    "MOBO-master/mobo/model/exact_gp.py": {
        "ExactGPModel.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_x": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "float",
                    "Awaitable[T]",
                    "collections.abc.Awaitable[T]"
                ],
                "train_y": [],
                "likelihood": []
            }
        },
        "ExactGPModel.forward": {
            "name": "forward",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "MOBO-master/mobo/model/__init__.py": {},
    "MOBO-master/mobo/optimizer/multi_objective_optimizer.py": {
        "NSGA2.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluation_function": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "bound_low": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "bound_up": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "n_design_variables_dimension": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "n_population": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "n_generation": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "crossover_probability": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "random_seed": [
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "NSGA2.setup": {
            "name": "setup",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NSGA2.run": {
            "name": "run",
            "location": 67,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NSGA2.uniform": {
            "name": "uniform",
            "location": 116,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "int",
                    "list",
                    "numpy.ndarray",
                    "numpy.array",
                    "dict",
                    "float"
                ],
                "up": [
                    "int",
                    "list",
                    "numpy.ndarray",
                    "numpy.array",
                    "dict",
                    "float"
                ],
                "size": [
                    "numpy.ndarray",
                    "list",
                    "int"
                ]
            }
        }
    },
    "MOBO-master/mobo/optimizer/__init__.py": {},
    "MOBO-master/mobo/test_functions/multi_objective_functions.py": {
        "zdt1": {
            "name": "zdt1",
            "location": 5,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "zdt2": {
            "name": "zdt2",
            "location": 28,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "schaffer_n1": {
            "name": "schaffer_n1",
            "location": 50,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "binh_korn": {
            "name": "binh_korn",
            "location": 69,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "chakong_haimes": {
            "name": "chakong_haimes",
            "location": 94,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "osyczka_kundu": {
            "name": "osyczka_kundu",
            "location": 119,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        }
    },
    "MOBO-master/mobo/test_functions/__init__.py": {},
    "MOBO-master/mobo/utils/__init__.py": {},
    "MOBO-master/test/optimizer/test_multi_objective_optimizers.py": {
        "test_nsga2": {
            "name": "test_nsga2",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MOBO-master/tutorials/multi_objective_optimization_example.py": {}
}
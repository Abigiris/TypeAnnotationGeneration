{
    "ModDown-master/setup.py": {},
    "ModDown-master/moddown/cli.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ModDown-master/moddown/cpp.py": {
        "read_header_file": {
            "name": "read_header_file",
            "location": 183,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str,bytes,int]",
                    "bytes"
                ]
            }
        },
        "translate_cpp_file": {
            "name": "translate_cpp_file",
            "location": 197,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Line.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List",
                    "bool"
                ]
            }
        },
        "Line.class_keyword": {
            "name": "class_keyword",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.starts_with_doc_line": {
            "name": "starts_with_doc_line",
            "location": 14,
            "return": [
                "str",
                "int",
                "list",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.starts_with": {
            "name": "starts_with",
            "location": 17,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Line.strip_comment_slashes": {
            "name": "strip_comment_slashes",
            "location": 21,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.text": {
            "name": "text",
            "location": 28,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.end_class_marker": {
            "name": "end_class_marker",
            "location": 32,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.end_marker": {
            "name": "end_marker",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.doc_line_with_tail": {
            "name": "doc_line_with_tail",
            "location": 41,
            "return": [
                "Sequence[str]",
                "str",
                "Iterable[str]",
                "list",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "str"
                ],
                "text": [
                    "int",
                    "None",
                    "Optional[Mapping]",
                    "str",
                    "Type[AbstractIntegrationConversation]",
                    "Mapping",
                    "Type"
                ],
                "line_number": [
                    "int",
                    "Optional[Mapping]",
                    "Type[AbstractIntegrationConversation]",
                    "str"
                ]
            }
        },
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.read": {
            "name": "read",
            "location": 83,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "Sized",
                    "int",
                    "float",
                    "Callable[...,bool]",
                    "str"
                ]
            }
        },
        "Tokenizer._case_outer_space": {
            "name": "_case_outer_space",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "bool",
                    "dict",
                    "Optional[T]",
                    "T",
                    "Dict[str, object]",
                    "int"
                ]
            }
        },
        "Tokenizer._case_big_header": {
            "name": "_case_big_header",
            "location": 101,
            "return": [
                "Optional[Token]"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "List",
                    "float",
                    "str",
                    "bytearray"
                ]
            }
        },
        "Tokenizer._case_section_header": {
            "name": "_case_section_header",
            "location": 104,
            "return": [
                "Optional[Token]"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "T",
                    "dict",
                    "Union[int, slice]",
                    "str",
                    "Callable"
                ],
                "m": []
            }
        },
        "Tokenizer._case_section_text": {
            "name": "_case_section_text",
            "location": 120,
            "return": [
                "Optional[Token]"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "List[str]",
                    "int",
                    "Match",
                    "Dict[str, Any]"
                ]
            }
        },
        "Tokenizer._case_unknown_code": {
            "name": "_case_unknown_code",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "float",
                    "str",
                    "int",
                    "Dict[Tuple[str, str], Tuple[float, float]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Tokenizer._case_class_code": {
            "name": "_case_class_code",
            "location": 158,
            "return": [
                "Optional[Token]"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "str"
                ]
            }
        },
        "Tokenizer._case_nonclass_code": {
            "name": "_case_nonclass_code",
            "location": 167,
            "return": [
                "Optional[Token]"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "float",
                    "int",
                    "Dict[Tuple[str, str], Tuple[float, float]]",
                    "Union[str, Iterable[str]]"
                ]
            }
        }
    },
    "ModDown-master/moddown/module.py": {
        "read_normal_file": {
            "name": "read_normal_file",
            "location": 9,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_cpp_file": {
            "name": "read_cpp_file",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_file": {
            "name": "read_file",
            "location": 18,
            "return": [
                "list"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "CppTranslator.include": {
            "name": "include",
            "location": 27,
            "return": [
                "List",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "List[float]",
                    "str",
                    "Dict[str, Any]",
                    "Callable[[None], bool]",
                    "bytes",
                    "Union[str, bytes]",
                    "int"
                ],
                "pwd": [
                    "Text",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "ModDown-master/moddown/__init__.py": {}
}
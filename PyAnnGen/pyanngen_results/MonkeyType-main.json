{
    "MonkeyType-main/setup.py": {},
    "MonkeyType-main/demo/inbox.py": {
        "CommentsAggregator.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "models.RepoInterface"
                ]
            }
        },
        "CommentsAggregator.add": {
            "name": "add",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "CommentsAggregator.aggregate": {
            "name": "aggregate",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikesAggregator.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "models.RepoInterface"
                ]
            }
        },
        "LikesAggregator.add": {
            "name": "add",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "LikesAggregator.aggregate": {
            "name": "aggregate",
            "location": 63,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikesAggregator._describe": {
            "name": "_describe",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "bytes",
                    "Optional[bytes]"
                ],
                "feedentry": [
                    "int",
                    "str"
                ],
                "users_by_id": [
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "Optional[bytes]",
                    "None",
                    "bytes"
                ]
            }
        },
        "FollowersAggregator.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "models.RepoInterface"
                ]
            }
        },
        "FollowersAggregator.add": {
            "name": "add",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "FollowersAggregator.aggregate": {
            "name": "aggregate",
            "location": 106,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inbox.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict",
                    "abilian.core.models.subjects.User",
                    "zerver.models.UserProfile",
                    "server.models.User"
                ],
                "repo": [
                    "Dict",
                    "abilian.core.models.subjects.User",
                    "zerver.models.UserProfile",
                    "server.models.User"
                ]
            }
        },
        "Inbox.aggregate": {
            "name": "aggregate",
            "location": 126,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inbox.summarize": {
            "name": "summarize",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inbox._pluralize": {
            "name": "_pluralize",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "MonkeyType-main/demo/models.py": {
        "FeedEntry.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "caption": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "float"
                ],
                "published": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ],
                "following": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "InboxEvent.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "published": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "float"
                ]
            }
        },
        "CommentedEvent.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "published": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "feedentry_id": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "commenter_id": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "comment_text": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "LikedEvent.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "user_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "published": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "feedentry_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "liker_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "FollowedEvent.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "user_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "published": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "follower_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "Set[int]",
                    "Type",
                    "Optional[Set[int]]",
                    "Type[Dict[str,str]]"
                ]
            }
        },
        "RepoInterface.get_feed_entries_by_ids": {
            "name": "get_feed_entries_by_ids",
            "location": 103,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "int"
                ]
            }
        },
        "RepoInterface.get_feed_entries_for_user_id": {
            "name": "get_feed_entries_for_user_id",
            "location": 108,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "RepoInterface.get_users_by_ids": {
            "name": "get_users_by_ids",
            "location": 111,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "RepoInterface.get_inbox_events_for_user_id": {
            "name": "get_inbox_events_for_user_id",
            "location": 114,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "AggregatorInterface.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str"
                ]
            }
        },
        "AggregatorInterface.add": {
            "name": "add",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "AggregatorInterface.aggregate": {
            "name": "aggregate",
            "location": 136,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MonkeyType-main/demo/test_inbox.py": {
        "make_user": {
            "name": "make_user",
            "location": 60,
            "return": [
                "models.User"
            ],
            "arguments": {}
        },
        "now": {
            "name": "now",
            "location": 68,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "make_feedentry": {
            "name": "make_feedentry",
            "location": 77,
            "return": [
                "models.FeedEntry"
            ],
            "arguments": {}
        },
        "make_commented": {
            "name": "make_commented",
            "location": 89,
            "return": [
                "models.CommentedEvent"
            ],
            "arguments": {}
        },
        "make_liked": {
            "name": "make_liked",
            "location": 101,
            "return": [
                "models.LikedEvent"
            ],
            "arguments": {}
        },
        "make_followed": {
            "name": "make_followed",
            "location": 109,
            "return": [
                "models.FollowedEvent"
            ],
            "arguments": {}
        },
        "test_empty_inbox": {
            "name": "test_empty_inbox",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_commented": {
            "name": "test_commented",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_followed": {
            "name": "test_followed",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_like": {
            "name": "test_one_like",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_two_likes": {
            "name": "test_two_likes",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_three_likes": {
            "name": "test_three_likes",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_everything": {
            "name": "test_everything",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aggregator_interface": {
            "name": "test_aggregator_interface",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeRepo.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeRepo.get_feed_entries_by_ids": {
            "name": "get_feed_entries_by_ids",
            "location": 20,
            "return": [
                "Dict[(Any, None)]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "int"
                ]
            }
        },
        "FakeRepo.get_feed_entries_for_user_id": {
            "name": "get_feed_entries_for_user_id",
            "location": 30,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "FakeRepo.get_users_by_ids": {
            "name": "get_users_by_ids",
            "location": 39,
            "return": [
                "Dict[(Any, None)]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "Optional[str]",
                    "int",
                    "datetime.date",
                    "tracim.models.data.Workspace"
                ]
            }
        },
        "FakeRepo.get_inbox_events_for_user_id": {
            "name": "get_inbox_events_for_user_id",
            "location": 47,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "MonkeyType-main/doc/conf.py": {},
    "MonkeyType-main/monkeytype/cli.py": {
        "module_path": {
            "name": "module_path",
            "location": 39,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "module_path_with_qualname": {
            "name": "module_path_with_qualname",
            "location": 52,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Sequence[str]",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "complain_about_no_traces": {
            "name": "complain_about_no_traces",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "stderr": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "get_monkeytype_config": {
            "name": "get_monkeytype_config",
            "location": 76,
            "return": [
                "Dict[str,str]",
                "Dict",
                "Dict[str,Any]",
                "str",
                "List[str]",
                "bool",
                "Optional[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "display_sample_count": {
            "name": "display_sample_count",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "traces": [
                    "str",
                    "float"
                ],
                "stderr": [
                    "IO",
                    "str",
                    "int"
                ]
            }
        },
        "get_stub": {
            "name": "get_stub",
            "location": 103,
            "return": [
                "Optional[monkeytype.stubs.ModuleStub]"
            ],
            "arguments": {
                "args": [],
                "stdout": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ],
                "stderr": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "apply_stub_using_libcst": {
            "name": "apply_stub_using_libcst",
            "location": 142,
            "return": [
                "str",
                "int",
                "Hashable"
            ],
            "arguments": {
                "stub": [
                    "str",
                    "pathlib.Path"
                ],
                "source": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "overwrite_existing_annotations": [
                    "bool",
                    "str"
                ]
            }
        },
        "apply_stub_handler": {
            "name": "apply_stub_handler",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "stdout": [
                    "Union[List,str]",
                    "List",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "stderr": [
                    "str",
                    "Callable",
                    "Sequence[str]",
                    "int",
                    "denite.util.UserContext",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_diff": {
            "name": "get_diff",
            "location": 181,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "args": [],
                "stdout": [
                    "int",
                    "Callable",
                    "float",
                    "bool"
                ],
                "stderr": [
                    "int",
                    "Callable",
                    "float",
                    "bool"
                ]
            }
        },
        "print_stub_handler": {
            "name": "print_stub_handler",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "stdout": [
                    "str",
                    "Optional[bool]",
                    "Sequence[str]",
                    "bool",
                    "Tuple",
                    "sqlalchemy.util.KeyedTuple",
                    "List[str]",
                    "None"
                ],
                "stderr": [
                    "Callable",
                    "denite.util.UserContext",
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "list_modules_handler": {
            "name": "list_modules_handler",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "stdout": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "stderr": [
                    "List[dict[int,float]]",
                    "List[Dict[int,float]]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable[,None]",
                    "None",
                    "int"
                ]
            }
        },
        "run_handler": {
            "name": "run_handler",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "stdout": [
                    "str",
                    "bool"
                ],
                "stderr": [
                    "str",
                    "bool"
                ]
            }
        },
        "update_args_from_config": {
            "name": "update_args_from_config",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 249,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "List",
                    "Optional[List[str]]",
                    "str",
                    "None"
                ],
                "stdout": [
                    "IO",
                    "str",
                    "List",
                    "Callable",
                    "Dict[str,float]",
                    "bool",
                    "argparse.Namespace",
                    "Iterable[Any]"
                ],
                "stderr": [
                    "IO",
                    "Sequence[str]",
                    "str",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "entry_point_main": {
            "name": "entry_point_main",
            "location": 412,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "MonkeyType-main/monkeytype/compat.py": {
        "is_typed_dict": {
            "name": "is_typed_dict",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "Dict",
                    "None",
                    "Optional[Type[BaseException]]"
                ]
            }
        },
        "is_any": {
            "name": "is_any",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "Callable[T,bool]",
                    "Callable[[T],bool]",
                    "int",
                    "str",
                    "Callable[[int],bool]",
                    "Iterator",
                    "float",
                    "Union[int,float]",
                    "Callable",
                    "Iterator[T]"
                ]
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "Type",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "is_generic_of": {
            "name": "is_generic_of",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "str"
                ],
                "gen": [
                    "str"
                ]
            }
        },
        "qualname_of_generic": {
            "name": "qualname_of_generic",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "name_of_generic": {
            "name": "name_of_generic",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "Optional[str]",
                    "Type",
                    "None"
                ]
            }
        },
        "is_forward_ref": {
            "name": "is_forward_ref",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "str"
                ]
            }
        },
        "make_forward_ref": {
            "name": "make_forward_ref",
            "location": 65,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Iterable[int]"
                ]
            }
        },
        "repr_forward_ref": {
            "name": "repr_forward_ref",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "__are_typed_dict_types_equal": {
            "name": "__are_typed_dict_types_equal",
            "location": 74,
            "return": [
                "bool",
                "Dict[str,str]",
                "Tuple[str]"
            ],
            "arguments": {
                "type1": [
                    "Type",
                    "Type[T]"
                ],
                "type2": [
                    "Type",
                    "str",
                    "Type[Any]",
                    "Collection",
                    "Tuple[Type]",
                    "Type[T]"
                ]
            }
        },
        "types_equal": {
            "name": "types_equal",
            "location": 90,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "int",
                    "str",
                    "List[str]"
                ],
                "other_type": [
                    "Type",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "is_generic": {
            "name": "is_generic",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "Type",
                    "int",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "bool"
                ]
            }
        }
    },
    "MonkeyType-main/monkeytype/config.py": {
        "_startswith": {
            "name": "_startswith",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ],
                "b": [
                    "str",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "default_code_filter": {
            "name": "default_code_filter",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "str",
                    "BinaryIO",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "get_default_config": {
            "name": "get_default_config",
            "location": 141,
            "return": [
                "DefaultConfig",
                "bool",
                "Optional[Dict[str,Any]]",
                "Dict"
            ],
            "arguments": {}
        },
        "Config.trace_store": {
            "name": "trace_store",
            "location": 28,
            "return": [
                "monkeytype.db.base.CallTraceStore",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.cli_context": {
            "name": "cli_context",
            "location": 33,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Callable[...,None]",
                    "bool"
                ]
            }
        },
        "Config.trace_logger": {
            "name": "trace_logger",
            "location": 42,
            "return": [
                "monkeytype.db.base.CallTraceStoreLogger"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.code_filter": {
            "name": "code_filter",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.sample_rate": {
            "name": "sample_rate",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.type_rewriter": {
            "name": "type_rewriter",
            "location": 67,
            "return": [
                "monkeytype.typing.NoOpRewriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.query_limit": {
            "name": "query_limit",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.max_typed_dict_size": {
            "name": "max_typed_dict_size",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultConfig.type_rewriter": {
            "name": "type_rewriter",
            "location": 124,
            "return": [
                "monkeytype.typing.ChainedRewriter"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultConfig.trace_store": {
            "name": "trace_store",
            "location": 127,
            "return": [
                "monkeytype.db.sqlite.SQLiteStore"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultConfig.code_filter": {
            "name": "code_filter",
            "location": 136,
            "return": [
                "functools._lru_cache_wrapper"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MonkeyType-main/monkeytype/encoding.py": {
        "typed_dict_to_dict": {
            "name": "typed_dict_to_dict",
            "location": 40,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "Dict[str,Any]",
                    "str",
                    "Dict"
                ]
            }
        },
        "type_to_dict": {
            "name": "type_to_dict",
            "location": 52,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "cmk.base.check_utils.Service"
                ]
            }
        },
        "typed_dict_from_dict": {
            "name": "typed_dict_from_dict",
            "location": 93,
            "return": [
                "TypedDict",
                "bool",
                "str"
            ],
            "arguments": {
                "d": [
                    "Dict[str, Any]",
                    "dict",
                    "type",
                    "int"
                ]
            }
        },
        "type_from_dict": {
            "name": "type_from_dict",
            "location": 99,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "bytearray",
                    "Type"
                ]
            }
        },
        "type_to_json": {
            "name": "type_to_json",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "typ": [
                    "Dict",
                    "golem_messages.message.base.Message"
                ]
            }
        },
        "type_from_json": {
            "name": "type_from_json",
            "location": 134,
            "return": [
                "type"
            ],
            "arguments": {
                "typ_json": [
                    "str"
                ]
            }
        },
        "arg_types_to_json": {
            "name": "arg_types_to_json",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "arg_types": [
                    "Dict[str,Type]",
                    "Dict[str,type]",
                    "str",
                    "Mapping[str,Any]",
                    "Dict[str,Any]"
                ]
            }
        },
        "arg_types_from_json": {
            "name": "arg_types_from_json",
            "location": 146,
            "return": [
                "dict"
            ],
            "arguments": {
                "arg_types_json": [
                    "str"
                ]
            }
        },
        "maybe_encode_type": {
            "name": "maybe_encode_type",
            "location": 155,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "encode": [
                    "int",
                    "Dict[str,Any]",
                    "str"
                ],
                "typ": [
                    "Type",
                    "Optional[type]",
                    "None",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[dbadapters.base.relation.BaseRelation]",
                    "Sequence[Any]",
                    "Optional[Union[int,str]]",
                    "Optional[int]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "maybe_decode_type": {
            "name": "maybe_decode_type",
            "location": 164,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "decode": [
                    "int",
                    "Dict[str,Any]",
                    "str"
                ],
                "encoded": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[type]",
                    "Sequence[Optional[str]]",
                    "Type",
                    "Optional[dbadapters.base.relation.BaseRelation]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "serialize_traces": {
            "name": "serialize_traces",
            "location": 224,
            "return": [
                "Generator[(CallTraceRow, Any, builtins.NoneType)]"
            ],
            "arguments": {
                "traces": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "CallTraceRow.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "float"
                ],
                "qualname": [
                    "float"
                ],
                "arg_types": [
                    "Type",
                    "str"
                ],
                "return_type": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "yield_type": [
                    "Type",
                    "str"
                ]
            }
        },
        "CallTraceRow.from_trace": {
            "name": "from_trace",
            "location": 191,
            "return": [
                "CallTraceRow"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCallTraceRow]"
                ],
                "trace": [
                    "str"
                ]
            }
        },
        "CallTraceRow.to_trace": {
            "name": "to_trace",
            "location": 199,
            "return": [
                "monkeytype.tracing.CallTrace"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTraceRow.__eq__": {
            "name": "__eq__",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Optional[db.models.Taxon]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "MonkeyType-main/monkeytype/exceptions.py": {},
    "MonkeyType-main/monkeytype/stubs.py": {
        "_get_import_for_qualname": {
            "name": "_get_import_for_qualname",
            "location": 105,
            "return": [
                "str",
                "int",
                "bool",
                "List[dict]",
                "float"
            ],
            "arguments": {
                "qualname": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_imports_for_annotation": {
            "name": "get_imports_for_annotation",
            "location": 111,
            "return": [
                "ImportMap"
            ],
            "arguments": {
                "anno": [
                    "Dict[str,Any]",
                    "str",
                    "denite.util.UserContext"
                ]
            }
        },
        "get_imports_for_signature": {
            "name": "get_imports_for_signature",
            "location": 147,
            "return": [
                "ImportMap"
            ],
            "arguments": {
                "sig": [
                    "str",
                    "abc.BaseConfig",
                    "Tuple",
                    "Callable",
                    "Optional[Callable]",
                    "None"
                ]
            }
        },
        "update_signature_args": {
            "name": "update_signature_args",
            "location": 160,
            "return": [
                "int",
                "str",
                "logging.LogRecord",
                "float",
                "asyncio.BaseEventLoop"
            ],
            "arguments": {
                "sig": [
                    "Type",
                    "int",
                    "Optional[Mapping[str, Any]]"
                ],
                "arg_types": [
                    "Dict[str,Type]",
                    "str",
                    "Dict[str,type]",
                    "Dict[str,str]",
                    "T",
                    "None",
                    "Optional[str]"
                ],
                "has_self": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Tuple[Union[bytes,bytes]]",
                    "Tuple[bytes,bytes]",
                    "int"
                ],
                "existing_annotation_strategy": []
            }
        },
        "update_signature_return": {
            "name": "update_signature_return",
            "location": 192,
            "return": [
                "str",
                "List[str]",
                "List[cirq.Qid]",
                "int"
            ],
            "arguments": {
                "sig": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[Iterable]",
                    "Optional[Dict[str,Any]]"
                ],
                "return_type": [
                    "None",
                    "Type",
                    "T"
                ],
                "yield_type": [
                    "Type",
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "existing_annotation_strategy": [
                    "bool",
                    "Type",
                    "Callable[[str], bool]"
                ]
            }
        },
        "shrink_traced_types": {
            "name": "shrink_traced_types",
            "location": 223,
            "return": [
                "Tuple[(dict, Any, Any)]"
            ],
            "arguments": {
                "traces": [
                    "Iterable[monkeytype.tracing.CallTrace]",
                    "bool",
                    "float"
                ],
                "max_typed_dict_size": [
                    "List[int]"
                ]
            }
        },
        "get_typed_dict_class_name": {
            "name": "get_typed_dict_class_name",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "parameter_name": [
                    "str",
                    "cmk.gui.plugins.views.utils.Command"
                ]
            }
        },
        "_is_optional": {
            "name": "_is_optional",
            "location": 287,
            "return": [
                "bool"
            ],
            "arguments": {
                "anno": [
                    "Type",
                    "Sequence[Any]"
                ]
            }
        },
        "_get_optional_elem": {
            "name": "_get_optional_elem",
            "location": 295,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "anno": [
                    "List",
                    "str",
                    "int"
                ]
            }
        },
        "render_annotation": {
            "name": "render_annotation",
            "location": 380,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "anno": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_parameter": {
            "name": "render_parameter",
            "location": 385,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "param": [
                    "str",
                    "Type"
                ]
            }
        },
        "render_signature": {
            "name": "render_signature",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "sig": [
                    "bool",
                    "Optional[Iterable[int]]",
                    "Iterable[int]",
                    "None"
                ],
                "max_line_len": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "prefix": [
                    "Text",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "get_updated_definition": {
            "name": "get_updated_definition",
            "location": 818,
            "return": [
                "FunctionDefinition"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "traces": [
                    "int",
                    "Iterable[monkeytype.tracing.CallTrace]",
                    "str",
                    "bool"
                ],
                "max_typed_dict_size": [
                    "int",
                    "Iterable[monkeytype.tracing.CallTrace]",
                    "str",
                    "bool"
                ],
                "rewriter": [
                    "str",
                    "Set",
                    "None",
                    "Optional[Pattern]",
                    "Pattern"
                ],
                "existing_annotation_strategy": [
                    "Callable",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "build_module_stubs": {
            "name": "build_module_stubs",
            "location": 841,
            "return": [
                "Dict[(Any, ModuleStub)]"
            ],
            "arguments": {
                "entries": [
                    "str",
                    "Iterable[Any]",
                    "List[str]",
                    "Callable",
                    "Exception",
                    "int",
                    "Dict"
                ]
            }
        },
        "build_module_stubs_from_traces": {
            "name": "build_module_stubs_from_traces",
            "location": 878,
            "return": [
                "Dict[(Any, ModuleStub)]"
            ],
            "arguments": {
                "traces": [
                    "int",
                    "float",
                    "Sequence[Any]"
                ],
                "max_typed_dict_size": [
                    "int",
                    "float",
                    "Sequence[Any]"
                ],
                "existing_annotation_strategy": [
                    "int",
                    "float",
                    "Sequence[Any]"
                ],
                "rewriter": [
                    "int",
                    "float",
                    "None",
                    "Sequence[Any]"
                ]
            }
        },
        "FunctionKind.from_callable": {
            "name": "from_callable",
            "location": 63,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "Optional[Dict[str, str]]",
                "Union[concurrenfutures.Future, asyncio.futures.Future]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "func": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "ImportMap.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportMap.merge": {
            "name": "merge",
            "location": 100,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Stub.__eq__": {
            "name": "__eq__",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Stub.render": {
            "name": "render",
            "location": 260,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportBlockStub.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "imports": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ImportBlockStub.render": {
            "name": "render",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportBlockStub.__repr__": {
            "name": "__repr__",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderAnnotation.make_anonymous_typed_dict": {
            "name": "make_anonymous_typed_dict",
            "location": 308,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "required_fields": [
                    "Dict[str,str]",
                    "List[str]",
                    "int",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "optional_fields": [
                    "Dict[str,str]",
                    "List[str]",
                    "int",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "RenderAnnotation.make_builtin_typed_dict": {
            "name": "make_builtin_typed_dict",
            "location": 316,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "float"
                ],
                "annotations": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "float"
                ],
                "total": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "float"
                ]
            }
        },
        "RenderAnnotation.generic_rewrite": {
            "name": "generic_rewrite",
            "location": 324,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str"
                ]
            }
        },
        "RenderAnnotation.rewrite_container_type": {
            "name": "rewrite_container_type",
            "location": 344,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "container_type": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "RenderAnnotation.rewrite_malformed_container": {
            "name": "rewrite_malformed_container",
            "location": 347,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "markdown.util.etree.ElementTree",
                    "str",
                    "Type",
                    "Optional[str]",
                    "Sized",
                    "None"
                ]
            }
        },
        "RenderAnnotation.rewrite_type_variable": {
            "name": "rewrite_type_variable",
            "location": 350,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "type_variable": [
                    "Callable"
                ]
            }
        },
        "RenderAnnotation.make_builtin_tuple": {
            "name": "make_builtin_tuple",
            "location": 359,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Iterable[str]",
                    "int",
                    "Callable"
                ]
            }
        },
        "RenderAnnotation.make_container_type": {
            "name": "make_container_type",
            "location": 362,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "container_type": [
                    "str"
                ],
                "elements": [
                    "str"
                ]
            }
        },
        "RenderAnnotation.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 365,
            "return": [
                "tuple",
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "union": []
            }
        },
        "RenderAnnotation.rewrite": {
            "name": "rewrite",
            "location": 371,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Type",
                    "str",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ]
            }
        },
        "AttributeStub.__init__": {
            "name": "__init__",
            "location": 483,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "typ": [
                    "int",
                    "str",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AttributeStub.render": {
            "name": "render",
            "location": 491,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AttributeStub.__repr__": {
            "name": "__repr__",
            "location": 494,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionStub.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Optional[str]",
                    "None"
                ],
                "signature": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "Type",
                    "str",
                    "None"
                ],
                "kind": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "Type",
                    "str",
                    "None"
                ],
                "strip_modules": [
                    "str",
                    "None",
                    "rotkehlchen.db.utils.BlockchainAccounts"
                ],
                "is_async": [
                    "bool",
                    "Optional[str]",
                    "Sequence",
                    "Type"
                ]
            }
        },
        "FunctionStub.render": {
            "name": "render",
            "location": 513,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Text",
                    "str",
                    "Callable[[List],List[str]]",
                    "int"
                ]
            }
        },
        "FunctionStub.__repr__": {
            "name": "__repr__",
            "location": 533,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassStub.__init__": {
            "name": "__init__",
            "location": 544,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "function_stubs": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "attribute_stubs": [
                    "bool",
                    "None",
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "ClassStub.render": {
            "name": "render",
            "location": 556,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassStub.__repr__": {
            "name": "__repr__",
            "location": 570,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplaceTypedDictsWithStubs.__init__": {
            "name": "__init__",
            "location": 581,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "class_name_hint": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ReplaceTypedDictsWithStubs._rewrite_container": {
            "name": "_rewrite_container",
            "location": 585,
            "return": [
                "Type",
                "str",
                "Dict[str,Sequence[Any]]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type",
                    "bool"
                ],
                "container": [
                    "Type"
                ]
            }
        },
        "ReplaceTypedDictsWithStubs._add_typed_dict_class_stub": {
            "name": "_add_typed_dict_class_stub",
            "location": 615,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "Dict[str,Type]",
                    "Dict",
                    "Dict[str,type]",
                    "str",
                    "Set[str]",
                    "bool",
                    "Dict[str,Any]"
                ],
                "class_name": [
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "base_class_name": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "List"
                ],
                "total": [
                    "bool",
                    "str",
                    "List[str]",
                    "AsyncContextManager[None]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "ReplaceTypedDictsWithStubs.rewrite_anonymous_TypedDict": {
            "name": "rewrite_anonymous_TypedDict",
            "location": 638,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": [],
                "typed_dict": [
                    "Type",
                    "str"
                ]
            }
        },
        "ReplaceTypedDictsWithStubs.rewrite_and_get_stubs": {
            "name": "rewrite_and_get_stubs",
            "location": 662,
            "return": [
                "Tuple[(Any, List[nothing])]"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "class_name_hint": [
                    "str",
                    "float",
                    "List[str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "ModuleStub.__init__": {
            "name": "__init__",
            "location": 671,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "function_stubs": [
                    "Type",
                    "None",
                    "Dict[str,Any]",
                    "int",
                    "Optional[ModelOrDc]",
                    "bool"
                ],
                "class_stubs": [
                    "bool",
                    "None",
                    "int"
                ],
                "imports_stub": [
                    "int",
                    "Type",
                    "None"
                ],
                "typed_dict_class_stubs": [
                    "None",
                    "List[T]",
                    "raiden.utils.BlockIdentifier",
                    "Type",
                    "Optional[Type[T]]",
                    "List[IntensityTable]"
                ]
            }
        },
        "ModuleStub.render": {
            "name": "render",
            "location": 689,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleStub.__repr__": {
            "name": "__repr__",
            "location": 703,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionDefinition.__init__": {
            "name": "__init__",
            "location": 720,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "int",
                    "float",
                    "bool"
                ],
                "qualname": [
                    "int",
                    "float",
                    "bool"
                ],
                "kind": [
                    "int",
                    "float",
                    "bool"
                ],
                "sig": [
                    "int",
                    "float",
                    "bool"
                ],
                "is_async": [
                    "bool",
                    "int",
                    "float"
                ],
                "typed_dict_class_stubs": [
                    "bool",
                    "None"
                ]
            }
        },
        "FunctionDefinition.from_callable": {
            "name": "from_callable",
            "location": 737,
            "return": [
                "FunctionDefinition"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFunctionDefinition]"
                ],
                "func": [
                    "Callable",
                    "Dict",
                    "str"
                ],
                "kind": [
                    "Callable",
                    "Dict",
                    "None"
                ]
            }
        },
        "FunctionDefinition.from_callable_and_traced_types": {
            "name": "from_callable_and_traced_types",
            "location": 748,
            "return": [
                "FunctionDefinition"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFunctionDefinition]"
                ],
                "func": [
                    "Union[str,Type]",
                    "Dict",
                    "str",
                    "Callable",
                    "Type",
                    "Set[str]"
                ],
                "arg_types": [
                    "Dict[str,Type]",
                    "Dict[str,type]",
                    "int",
                    "Optional[type]",
                    "Callable"
                ],
                "return_type": [
                    "Type",
                    "Optional[type]",
                    "Dict[str,Any]",
                    "None",
                    "Dict",
                    "Type[T]"
                ],
                "yield_type": [
                    "Optional[type]",
                    "int",
                    "Type",
                    "bytes",
                    "None"
                ],
                "existing_annotation_strategy": [
                    "Optional[List[\"custom_index\"]]"
                ]
            }
        },
        "FunctionDefinition.has_self": {
            "name": "has_self",
            "location": 799,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionDefinition.__eq__": {
            "name": "__eq__",
            "location": 802,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FunctionDefinition.__repr__": {
            "name": "__repr__",
            "location": 807,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubIndexBuilder.__init__": {
            "name": "__init__",
            "location": 902,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "module_re": [
                    "str"
                ],
                "max_typed_dict_size": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "StubIndexBuilder.log": {
            "name": "log",
            "location": 909,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "str"
                ]
            }
        },
        "StubIndexBuilder.get_stubs": {
            "name": "get_stubs",
            "location": 914,
            "return": [
                "Dict[(Any, ModuleStub)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MonkeyType-main/monkeytype/tracing.py": {
        "get_func_in_mro": {
            "name": "get_func_in_mro",
            "location": 100,
            "return": [
                "None",
                "Optional[str]",
                "Optional[Dict]",
                "Optional[Any]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "code": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_has_code": {
            "name": "_has_code",
            "location": 121,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "None",
                "List[str]",
                "Optional[float]"
            ],
            "arguments": {
                "func": [
                    "int",
                    "Optional[int]",
                    "None",
                    "str",
                    "types.ModuleType",
                    "Optional[str]",
                    "static_frame.core.util.NameType"
                ],
                "code": [
                    "str",
                    "int",
                    "types.CodeType"
                ]
            }
        },
        "get_func": {
            "name": "get_func",
            "location": 133,
            "return": [
                "str",
                "None",
                "Optional[str]",
                "Set",
                "Optional[Sequence[str]]",
                "Type"
            ],
            "arguments": {
                "frame": [
                    "str",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "trace_calls": {
            "name": "trace_calls",
            "location": 268,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {
                "logger": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "max_typed_dict_size": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "code_filter": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]"
                ],
                "sample_rate": [
                    "int",
                    "None",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "CallTrace.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool",
                    "None"
                ],
                "arg_types": [
                    "bool",
                    "None",
                    "Optional[mypy.types.Type]",
                    "int"
                ],
                "return_type": [
                    "Optional[str]",
                    "None",
                    "Optional[type]",
                    "str",
                    "Optional[float]",
                    "Type",
                    "Optional[Type]",
                    "float",
                    "Optional[Dict]",
                    "Dict"
                ],
                "yield_type": [
                    "bool",
                    "None",
                    "Optional[mypy.types.Type]",
                    "int"
                ]
            }
        },
        "CallTrace.__eq__": {
            "name": "__eq__",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CallTrace.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTrace.__hash__": {
            "name": "__hash__",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTrace.add_yield_type": {
            "name": "add_yield_type",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "None",
                    "Type",
                    "Optional[mypy.types.Type]",
                    "BaseException",
                    "Type[BaseException]"
                ]
            }
        },
        "CallTrace.funcname": {
            "name": "funcname",
            "location": 78,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[cmk.utils.type_defs.HostName]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTraceLogger.log": {
            "name": "log",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "Callable",
                    "str"
                ]
            }
        },
        "CallTraceLogger.flush": {
            "name": "flush",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTracer.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Union[int,str]",
                    "int",
                    "Optional[dict]",
                    "logging.Logger"
                ],
                "max_typed_dict_size": [
                    "int",
                    "str",
                    "bool",
                    "AsyncContextManager[None]"
                ],
                "code_filter": [
                    "str",
                    "bool",
                    "None"
                ],
                "sample_rate": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "CallTracer._get_func": {
            "name": "_get_func",
            "location": 200,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "CallTracer.handle_call": {
            "name": "handle_call",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str"
                ]
            }
        },
        "CallTracer.handle_return": {
            "name": "handle_return",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "List[list[str]]",
                    "bool",
                    "List[List[str]]",
                    "Sequence[str]",
                    "Sequence[T]",
                    "raiden.utils.Dict[str,raiden.utils.Any]",
                    "List[list[int]]",
                    "List[List[int]]",
                    "Callable[T,bool]",
                    "Callable[[T],bool]"
                ],
                "arg": [
                    "int",
                    "float"
                ]
            }
        },
        "CallTracer.__call__": {
            "name": "__call__",
            "location": 246,
            "return": [
                "CallTracer"
            ],
            "arguments": {
                "self": [
                    "_TCallTracer@@CallTracer@@"
                ],
                "frame": [
                    "int",
                    "str"
                ],
                "event": [
                    "Optional[Mapping]",
                    "Mapping",
                    "str",
                    "None",
                    "Mapping[str,Any]"
                ],
                "arg": [
                    "Dict[str,Any]",
                    "Optional[int]",
                    "str",
                    "int",
                    "logging.handlers.QueueListener",
                    "None"
                ]
            }
        }
    },
    "MonkeyType-main/monkeytype/typing.py": {
        "is_list": {
            "name": "is_list",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "str"
                ]
            }
        },
        "make_typed_dict": {
            "name": "make_typed_dict",
            "location": 54,
            "return": [
                "TypedDict",
                "int",
                "Type",
                "bool"
            ],
            "arguments": {}
        },
        "field_annotations": {
            "name": "field_annotations",
            "location": 71,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "typed_dict": [
                    "str",
                    "Dict[str,LabwareDefinition]"
                ]
            }
        },
        "is_anonymous_typed_dict": {
            "name": "is_anonymous_typed_dict",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "Dict",
                    "mypy.types.Instance"
                ]
            }
        },
        "shrink_typed_dict_types": {
            "name": "shrink_typed_dict_types",
            "location": 84,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "typed_dicts": [
                    "List[mypy.types.Type.VarId]",
                    "mypy.types.UnboundType",
                    "bool"
                ],
                "max_typed_dict_size": [
                    "int",
                    "List[type]"
                ]
            }
        },
        "shrink_types": {
            "name": "shrink_types",
            "location": 134,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "types": [
                    "Set[str]",
                    "Optional[Type]"
                ],
                "max_typed_dict_size": [
                    "Callable[[str],mypy.types.Instance]",
                    "str",
                    "Callable[str,mypy.types.Instance]"
                ]
            }
        },
        "make_iterator": {
            "name": "make_iterator",
            "location": 163,
            "return": [
                "Type[Iterator]"
            ],
            "arguments": {
                "typ": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "make_generator": {
            "name": "make_generator",
            "location": 167,
            "return": [
                "Type[generator]"
            ],
            "arguments": {
                "yield_typ": [
                    "bool",
                    "List",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "send_typ": [
                    "bool",
                    "List",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "return_typ": [
                    "bool",
                    "List",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "get_dict_type": {
            "name": "get_dict_type",
            "location": 180,
            "return": [
                "str",
                "dict",
                "list",
                "Dict[str, str]"
            ],
            "arguments": {
                "dct": [
                    "int",
                    "Dict[str, float]",
                    "bool",
                    "Optional[List[int]]"
                ],
                "max_typed_dict_size": [
                    "int",
                    "Union[int,None]",
                    "Optional[List[int]]",
                    "Optional[bool]"
                ]
            }
        },
        "get_type": {
            "name": "get_type",
            "location": 207,
            "return": [
                "mypy.types.Type",
                "Callable",
                "Type",
                "bool",
                "str",
                "Tuple",
                "DefaultDict",
                "Dict",
                "Set",
                "List"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "mypy.types.AnyType",
                    "Dict",
                    "Type",
                    "Tuple[Type]",
                    "Tuple[type]"
                ],
                "max_typed_dict_size": [
                    "bool",
                    "Iterable[monkeytype.tracing.CallTrace]",
                    "int"
                ]
            }
        },
        "GenericTypeRewriter.make_builtin_tuple": {
            "name": "make_builtin_tuple",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Sequence[T]",
                    "Tuple",
                    "List[int]",
                    "str"
                ]
            }
        },
        "GenericTypeRewriter.make_container_type": {
            "name": "make_container_type",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container_type": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "element": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GenericTypeRewriter.make_anonymous_typed_dict": {
            "name": "make_anonymous_typed_dict",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "required_fields": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List"
                ],
                "optional_fields": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List"
                ]
            }
        },
        "GenericTypeRewriter.make_builtin_typed_dict": {
            "name": "make_builtin_typed_dict",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Type",
                    "mypy.types.Instance"
                ],
                "annotations": [
                    "str",
                    "Type",
                    "mypy.types.Instance"
                ],
                "total": [
                    "str",
                    "Type",
                    "mypy.types.Instance"
                ]
            }
        },
        "GenericTypeRewriter.generic_rewrite": {
            "name": "generic_rewrite",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_container_type": {
            "name": "rewrite_container_type",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container_type": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_malformed_container": {
            "name": "rewrite_malformed_container",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Optional[str]",
                    "List[Type]",
                    "str",
                    "List[str]",
                    "None"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_type_variable": {
            "name": "rewrite_type_variable",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_variable": [
                    "Optional[List]",
                    "List",
                    "Optional[Set[str]]",
                    "None",
                    "Set[str]"
                ]
            }
        },
        "GenericTypeRewriter._rewrite_container": {
            "name": "_rewrite_container",
            "location": 283,
            "return": [
                "Callable[[List, bool], None]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict",
                    "MutableMapping[str,str]",
                    "Set[str]",
                    "MutableMapping",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "container": [
                    "bytes",
                    "Type"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_Dict": {
            "name": "rewrite_Dict",
            "location": 297,
            "return": [
                "Callable",
                "bool",
                "Dict[str, Any]",
                "bytes",
                "Optional[Exception]",
                "T"
            ],
            "arguments": {
                "self": [],
                "dct": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "None",
                    "int",
                    "Callable",
                    "List[dict[str,Any]]",
                    "starlette.types.Send",
                    "str",
                    "Dict[str,Outcome]",
                    "Dict[str,utils.types.A]",
                    "Dict[str,A]"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_List": {
            "name": "rewrite_List",
            "location": 300,
            "return": [
                "str",
                "int",
                "Hashable",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "List[int]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_Set": {
            "name": "rewrite_Set",
            "location": 303,
            "return": [
                "Mapping[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "st": [
                    "List[str]",
                    "bool",
                    "Set[str]",
                    "Iterable",
                    "str",
                    "Tuple",
                    "Set",
                    "List[N]",
                    "List[Name]"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_Tuple": {
            "name": "rewrite_Tuple",
            "location": 306,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "tup": [
                    "Optional[int]",
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Sequence[Hashable]",
                    "None"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_Generator": {
            "name": "rewrite_Generator",
            "location": 309,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "generator": [
                    "str",
                    "int"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_anonymous_TypedDict": {
            "name": "rewrite_anonymous_TypedDict",
            "location": 312,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "typed_dict": [
                    "Dict[str,Any]",
                    "mypy.types.Instance",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_TypedDict": {
            "name": "rewrite_TypedDict",
            "location": 324,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "typed_dict": [
                    "mypy.types.Type"
                ]
            }
        },
        "GenericTypeRewriter.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 336,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "List[str]",
                    "str",
                    "Optional[Iterable[str]]",
                    "None"
                ]
            }
        },
        "GenericTypeRewriter.rewrite": {
            "name": "rewrite",
            "location": 339,
            "return": [
                "mypy.types.Type",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "mypy.types.Type"
                ]
            }
        },
        "TypeRewriter.make_anonymous_typed_dict": {
            "name": "make_anonymous_typed_dict",
            "location": 361,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "mypy.types.Overloaded",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "required_fields": [
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "Tuple"
                ],
                "optional_fields": [
                    "str",
                    "Dict[str,str]",
                    "bytes",
                    "Tuple"
                ]
            }
        },
        "TypeRewriter.make_builtin_typed_dict": {
            "name": "make_builtin_typed_dict",
            "location": 366,
            "return": [
                "TypedDict",
                "mypy.types.Type",
                "BinaryIO",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[utils.types.A]",
                    "Sequence[A]",
                    "List[str]",
                    "Container[Taxon]",
                    "Container",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "annotations": [
                    "str",
                    "Sequence[utils.types.A]",
                    "Sequence[A]",
                    "List[str]",
                    "Container[Taxon]",
                    "Container",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "total": [
                    "str",
                    "Sequence[utils.types.A]",
                    "Sequence[A]",
                    "List[str]",
                    "Container[Taxon]",
                    "Container",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "TypeRewriter.generic_rewrite": {
            "name": "generic_rewrite",
            "location": 369,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[C]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "TypeRewriter.rewrite_container_type": {
            "name": "rewrite_container_type",
            "location": 372,
            "return": [
                "str",
                "bool",
                "Callable[...,T]",
                "List[str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "container_type": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TypeRewriter.rewrite_malformed_container": {
            "name": "rewrite_malformed_container",
            "location": 375,
            "return": [
                "Dict",
                "str",
                "None",
                "List[Type]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Optional[str]",
                    "List[Type]",
                    "str",
                    "List[str]",
                    "None"
                ]
            }
        },
        "TypeRewriter.rewrite_type_variable": {
            "name": "rewrite_type_variable",
            "location": 378,
            "return": [
                "mypy.types.Type",
                "List",
                "Type",
                "None",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "type_variable": [
                    "Optional[List]",
                    "List",
                    "Optional[Set[str]]",
                    "None",
                    "Set[str]"
                ]
            }
        },
        "TypeRewriter.make_builtin_tuple": {
            "name": "make_builtin_tuple",
            "location": 381,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "str",
                    "List",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "TypeRewriter.make_container_type": {
            "name": "make_container_type",
            "location": 384,
            "return": [
                "str",
                "Type",
                "Callable[...,T]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "container_type": [
                    "str"
                ],
                "element": [
                    "str"
                ]
            }
        },
        "RemoveEmptyContainers._is_empty": {
            "name": "_is_empty",
            "location": 400,
            "return": [
                "bool",
                "int",
                "mypy.types.CallableType"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str"
                ]
            }
        },
        "RemoveEmptyContainers.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 404,
            "return": [
                "Union[(tuple, _T0)]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "bool",
                    "str"
                ]
            }
        },
        "RewriteConfigDict.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 414,
            "return": [
                "Union[(Type[dict], _T0)]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "int",
                    "str",
                    "Callable",
                    "Tuple",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "RewriteLargeUnion.__init__": {
            "name": "__init__",
            "location": 430,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "max_union_len": [
                    "int",
                    "float",
                    "Optional[int]",
                    "starfish.core.types.Number"
                ]
            }
        },
        "RewriteLargeUnion._rewrite_to_tuple": {
            "name": "_rewrite_to_tuple",
            "location": 434,
            "return": [
                "Union[(builtins.NoneType, Type[tuple])]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "Callable",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Tuple",
                    "List[str]",
                    "Union"
                ]
            }
        },
        "RewriteLargeUnion.rewrite_Union": {
            "name": "rewrite_Union",
            "location": 445,
            "return": [
                "int",
                "Callable",
                "Tuple",
                "str",
                "Set"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "Callable",
                    "Tuple",
                    "Union"
                ]
            }
        },
        "RewriteAnonymousTypedDictToDict.rewrite_anonymous_TypedDict": {
            "name": "rewrite_anonymous_TypedDict",
            "location": 467,
            "return": [
                "Type[dict]"
            ],
            "arguments": {
                "self": [],
                "typed_dict": [
                    "Dict[str,Any]",
                    "mypy.types.Instance",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "ChainedRewriter.__init__": {
            "name": "__init__",
            "location": 478,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "rewriters": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "ChainedRewriter.rewrite": {
            "name": "rewrite",
            "location": 481,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NoOpRewriter.rewrite": {
            "name": "rewrite",
            "location": 488,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[C]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "RewriteGenerator.rewrite_Generator": {
            "name": "rewrite_Generator",
            "location": 495,
            "return": [
                "Union[(Type[Iterator], _T0)]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Callable",
                    "Tuple",
                    "List[str]",
                    "Union"
                ]
            }
        }
    },
    "MonkeyType-main/monkeytype/util.py": {
        "get_func_fqname": {
            "name": "get_func_fqname",
            "location": 17,
            "return": [
                "int",
                "str",
                "float",
                "Optional[int]",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Dict",
                    "T"
                ]
            }
        },
        "get_func_in_module": {
            "name": "get_func_in_module",
            "location": 22,
            "return": [
                "Type",
                "str",
                "float",
                "Pattern",
                "property",
                "Tuple[List[str],List[str]]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Dict"
                ],
                "qualname": [
                    "str",
                    "Dict"
                ]
            }
        },
        "get_name_in_module": {
            "name": "get_name_in_module",
            "location": 52,
            "return": [
                "str",
                "bytes",
                "List[Dict[str, Any]]",
                "IO",
                "list"
            ],
            "arguments": {
                "module": [
                    "str",
                    "List[bytes]"
                ],
                "qualname": [
                    "str",
                    "List[str]"
                ],
                "attr_getter": [
                    "Iterable[str]",
                    "None"
                ]
            }
        },
        "pascal_case": {
            "name": "pascal_case",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "MonkeyType-main/monkeytype/__init__.py": {
        "trace": {
            "name": "trace",
            "location": 12,
            "return": [
                "contextlib._GeneratorContextManager"
            ],
            "arguments": {
                "config": [
                    "None",
                    "Dict",
                    "cmk.base.config.ConfigCache",
                    "pyramid.config.Configurator"
                ]
            }
        }
    },
    "MonkeyType-main/monkeytype/__main__.py": {},
    "MonkeyType-main/monkeytype/db/base.py": {
        "CallTraceThunk.to_trace": {
            "name": "to_trace",
            "location": 16,
            "return": [
                "monkeytype.tracing.CallTrace",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTraceStore.add": {
            "name": "add",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traces": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "CallTraceStore.filter": {
            "name": "filter",
            "location": 30,
            "return": [
                "List[CallTraceThunk]",
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "int",
                    "str",
                    "bool"
                ],
                "qualname_prefix": [
                    "int",
                    "None",
                    "str",
                    "bool"
                ],
                "limit": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CallTraceStore.make_store": {
            "name": "make_store",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "connection_string": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CallTraceStore.list_modules": {
            "name": "list_modules",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallTraceStoreLogger.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "str",
                    "float",
                    "Dict[str,T]",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CallTraceStoreLogger.log": {
            "name": "log",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "bool",
                    "Iterable[int]"
                ]
            }
        },
        "CallTraceStoreLogger.flush": {
            "name": "flush",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MonkeyType-main/monkeytype/db/sqlite.py": {
        "create_call_trace_table": {
            "name": "create_call_trace_table",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "sqlite3.Connection",
                    "str",
                    "int"
                ],
                "table": [
                    "Text",
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "make_query": {
            "name": "make_query",
            "location": 43,
            "return": [
                "Tuple[(str, List[Union[(_T1, _T2, _T3)]])]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "module": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "qualname": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "None",
                    "Optional[Node]",
                    "List[str]"
                ],
                "limit": [
                    "int",
                    "str"
                ]
            }
        },
        "SQLiteStore.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "Optional[List]",
                    "Callable",
                    "List",
                    "Dict[str,Tuple[str,str]]",
                    "None",
                    "Dict[str,tuple[Union[str,str]]]"
                ],
                "table": [
                    "Text",
                    "str",
                    "Optional[List]",
                    "Dict[str,Tuple[str,str]]",
                    "Callable"
                ]
            }
        },
        "SQLiteStore.make_store": {
            "name": "make_store",
            "location": 75,
            "return": [
                "SQLiteStore"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSQLiteStore]"
                ],
                "connection_string": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "SQLiteStore.add": {
            "name": "add",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traces": [
                    "int",
                    "Iterable[typeline.tracing.CallTrace]",
                    "Iterable[C]",
                    "Optional[str]",
                    "str",
                    "datetime.datetime",
                    "None"
                ]
            }
        },
        "SQLiteStore.filter": {
            "name": "filter",
            "location": 101,
            "return": [
                "List[monkeytype.encoding.CallTraceRow]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "List"
                ],
                "qualname_prefix": [
                    "str",
                    "List",
                    "None"
                ],
                "limit": [
                    "int",
                    "str",
                    "List"
                ]
            }
        },
        "SQLiteStore.list_modules": {
            "name": "list_modules",
            "location": 110,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MonkeyType-main/monkeytype/db/__init__.py": {},
    "MonkeyType-main/tests/conftest.py": {},
    "MonkeyType-main/tests/test_cli.py": {
        "func_foo": {
            "name": "func_foo",
            "location": 34,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "func": {
            "name": "func",
            "location": 38,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "func2": {
            "name": "func2",
            "location": 42,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "func_anno": {
            "name": "func_anno",
            "location": 46,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "func_anno2": {
            "name": "func_anno2",
            "location": 50,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "super_long_function_with_long_params": {
            "name": "super_long_function_with_long_params",
            "location": 54,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "long_param1": [
                    "str",
                    "Iterable",
                    "bool"
                ],
                "long_param2": [
                    "str",
                    "Iterable",
                    "bool"
                ],
                "long_param3": [
                    "str",
                    "Iterable",
                    "bool"
                ],
                "long_param4": [
                    "str",
                    "Iterable",
                    "bool"
                ],
                "long_param5": [
                    "str",
                    "Iterable",
                    "bool"
                ]
            }
        },
        "store_data": {
            "name": "store_data",
            "location": 73,
            "return": [
                "typing.Generator[tuple[SQLiteStore]]"
            ],
            "arguments": {}
        },
        "store": {
            "name": "store",
            "location": 82,
            "return": [
                "typing.Generator[typing.Union[str,set[],bool]]"
            ],
            "arguments": {
                "store_data": [
                    "bytes",
                    "Dict[str,Any]",
                    "bool",
                    "AnyStr"
                ]
            }
        },
        "db_file": {
            "name": "db_file",
            "location": 88,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "store_data": [
                    "str"
                ]
            }
        },
        "stdout": {
            "name": "stdout",
            "location": 94,
            "return": [
                "IO[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "stderr": {
            "name": "stderr",
            "location": 99,
            "return": [
                "IO[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "test_generate_stub": {
            "name": "test_generate_stub",
            "location": 103,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "int",
                    "str"
                ],
                "db_file": [
                    "bool"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_print_stub_ignore_existing_annotations": {
            "name": "test_print_stub_ignore_existing_annotations",
            "location": 120,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "int",
                    "str"
                ],
                "db_file": [
                    "str"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_get_diff": {
            "name": "test_get_diff",
            "location": 135,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "str"
                ],
                "db_file": [
                    "Dict[str,Any]",
                    "str"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_get_diff2": {
            "name": "test_get_diff2",
            "location": 153,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "str"
                ],
                "db_file": [
                    "Dict[str,Any]",
                    "str"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_no_traces": {
            "name": "test_no_traces",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "bool",
                    "Exception",
                    "Callable[,None]",
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable[[str,List],None]"
                ],
                "db_file": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str",
                    "Tuple[str]"
                ],
                "arg": [
                    "List[str]",
                    "str"
                ],
                "error": [
                    "str",
                    "int"
                ]
            }
        },
        "test_display_list_of_modules": {
            "name": "test_display_list_of_modules",
            "location": 204,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "str",
                    "int"
                ],
                "db_file": [
                    "Dict[str,Any]"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_display_list_of_modules_no_modules": {
            "name": "test_display_list_of_modules_no_modules",
            "location": 219,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "bool"
                ],
                "db_file": [
                    "Dict[str,Any]"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_display_sample_count": {
            "name": "test_display_sample_count",
            "location": 229,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "stderr": [
                    "int"
                ]
            }
        },
        "test_display_sample_count_from_cli": {
            "name": "test_display_sample_count_from_cli",
            "location": 244,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "str",
                    "int"
                ],
                "db_file": [
                    "Dict[str,Any]"
                ],
                "stdout": [
                    "bool",
                    "trinity.config.ChainConfig",
                    "Dict",
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_quiet_failed_traces": {
            "name": "test_quiet_failed_traces",
            "location": 259,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "int",
                    "str"
                ],
                "db_file": [
                    "bool"
                ],
                "stdout": [
                    "Dict",
                    "trinity.config.ChainConfig",
                    "bool",
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_verbose_failed_traces": {
            "name": "test_verbose_failed_traces",
            "location": 271,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "int",
                    "str"
                ],
                "db_file": [
                    "bool"
                ],
                "stdout": [
                    "Dict",
                    "trinity.config.ChainConfig",
                    "bool",
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_cli_context_manager_activated": {
            "name": "test_cli_context_manager_activated",
            "location": 283,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "BaseException"
                ],
                "stdout": [
                    "Dict",
                    "Iterable[int]"
                ],
                "stderr": [
                    "Dict",
                    "Iterable[int]"
                ]
            }
        },
        "test_pathlike_parameter": {
            "name": "test_pathlike_parameter",
            "location": 291,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "bool"
                ],
                "db_file": [
                    "Dict[str,Any]"
                ],
                "capsys": [
                    "int"
                ],
                "stdout": [
                    "Optional[str]",
                    "Callable",
                    "str",
                    "None"
                ],
                "stderr": [
                    "Optional[str]",
                    "Callable",
                    "str",
                    "None"
                ]
            }
        },
        "test_toplevel_filename_parameter": {
            "name": "test_toplevel_filename_parameter",
            "location": 299,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "bool"
                ],
                "db_file": [
                    "bool"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_apply_stub_init": {
            "name": "test_apply_stub_init",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [
                    "int",
                    "str"
                ],
                "db_file": [
                    "str",
                    "Dict[str,Any]"
                ],
                "stdout": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "stderr": [
                    "str"
                ],
                "collector": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_apply_stub_file_with_spaces": {
            "name": "test_apply_stub_file_with_spaces",
            "location": 331,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "store": [
                    "int",
                    "str"
                ],
                "db_file": [
                    "str",
                    "Callable"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "int",
                    "str"
                ]
            }
        },
        "test_apply_stub_using_libcst": {
            "name": "test_apply_stub_using_libcst",
            "location": 352,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "test_apply_stub_using_libcst__exception": {
            "name": "test_apply_stub_using_libcst__exception",
            "location": 418,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "test_apply_stub_using_libcst__overwrite_existing_annotations": {
            "name": "test_apply_stub_using_libcst__overwrite_existing_annotations",
            "location": 433,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "LoudContextConfig.cli_context": {
            "name": "cli_context",
            "location": 66,
            "return": [
                "Iterator[None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int"
                ]
            }
        },
        "test_toplevel_filename_parameter.side_effect": {
            "name": "side_effect",
            "location": 304,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "List[str]",
                    "Callable[[None], bool]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "MonkeyType-main/tests/test_compat.py": {
        "test_name_of_union": {
            "name": "test_name_of_union",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MonkeyType-main/tests/test_config.py": {
        "TestDefaultCodeFilter.test_excludes_stdlib": {
            "name": "test_excludes_stdlib",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultCodeFilter.test_excludes_site_packages": {
            "name": "test_excludes_site_packages",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultCodeFilter.test_includes_otherwise": {
            "name": "test_includes_otherwise",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultCodeFilter.test_excludes_frozen_importlib": {
            "name": "test_excludes_frozen_importlib",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultCodeFilter.test_includes_stdlib_in_MONKEYTYPE_TRACE_MODULES": {
            "name": "test_includes_stdlib_in_MONKEYTYPE_TRACE_MODULES",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "MonkeyType-main/tests/test_encoding.py": {
        "dummy_func": {
            "name": "dummy_func",
            "location": 38,
            "return": [
                "int",
                "float",
                "str",
                "bytes",
                "bytearray",
                "T",
                "Callable"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TestTypeConversion.test_type_round_trip": {
            "name": "test_type_round_trip",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestTypeConversion.test_type_to_dict": {
            "name": "test_type_to_dict",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "Dict"
                ],
                "expected": [
                    "str",
                    "Dict"
                ]
            }
        },
        "TestTypeConversion.test_type_from_dict": {
            "name": "test_type_from_dict",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_dict": [
                    "str",
                    "Callable[...,T]",
                    "List[str]"
                ],
                "expected": [
                    "str",
                    "Callable[...,T]",
                    "List[str]"
                ]
            }
        },
        "TestTypeConversion.test_type_from_dict_nested": {
            "name": "test_type_from_dict_nested",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_dict": [
                    "str",
                    "Callable[...,T]",
                    "List[str]"
                ],
                "expected": [
                    "str",
                    "Callable[...,T]",
                    "List[str]"
                ]
            }
        },
        "TestTypeConversion.test_type_to_json": {
            "name": "test_type_to_json",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_dict": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "expected": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "TestTypeConversion.test_type_from_json": {
            "name": "test_type_from_json",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_dict_string": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestTypeConversion.test_type_round_trip_typed_dict": {
            "name": "test_type_round_trip_typed_dict",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_dict": [
                    "Type",
                    "Union[int,float,complex]",
                    "str",
                    "int",
                    "float",
                    "complex"
                ]
            }
        },
        "TestTypeConversion.test_trace_round_trip": {
            "name": "test_trace_round_trip",
            "location": 218,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypeConversion.test_convert_non_type": {
            "name": "test_convert_non_type",
            "location": 222,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypeConversion.test_maybe_encode_type": {
            "name": "test_maybe_encode_type",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "dict",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Dict[str, Any]"
                ],
                "typ": [
                    "Dict[str,Tuple[str,str]]",
                    "Dict",
                    "Dict[str,tuple[Union[str,str]]]"
                ],
                "expected": [
                    "None",
                    "bool",
                    "Optional[Game]",
                    "int"
                ],
                "should_call_encoder": [
                    "List[str]",
                    "bool",
                    "Callable[,None]"
                ]
            }
        },
        "TestTypeConversion.test_maybe_decode_type": {
            "name": "test_maybe_decode_type",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "dict",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Dict[str, Any]"
                ],
                "typ": [
                    "Dict[str,Tuple[str,str]]",
                    "Dict",
                    "Dict[str,tuple[Union[str,str]]]"
                ],
                "expected": [
                    "None",
                    "bool",
                    "Optional[Game]",
                    "int"
                ],
                "should_call_encoder": [
                    "List[str]",
                    "bool",
                    "Callable[,None]"
                ]
            }
        },
        "TestSerializeTraces.test_log_failure_and_continue": {
            "name": "test_log_failure_and_continue",
            "location": 263,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "Callable",
                    "str",
                    "float"
                ]
            }
        }
    },
    "MonkeyType-main/tests/test_stubs.py": {
        "simple_add": {
            "name": "simple_add",
            "location": 128,
            "return": [
                "float",
                "int",
                "str",
                "bool",
                "Tuple[float,float]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "strip_modules_helper": {
            "name": "strip_modules_helper",
            "location": 132,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "d1": [
                    "Iterable[T]",
                    "str",
                    "Type",
                    "Type[Exception]",
                    "T"
                ],
                "d2": [
                    "Iterable[T]",
                    "str",
                    "Type",
                    "Type[Exception]",
                    "T"
                ]
            }
        },
        "has_optional_param": {
            "name": "has_optional_param",
            "location": 136,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "None",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ]
            }
        },
        "has_optional_union_param": {
            "name": "has_optional_union_param",
            "location": 140,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ]
            }
        },
        "has_optional_return": {
            "name": "has_optional_return",
            "location": 144,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "default_none_parameter": {
            "name": "default_none_parameter",
            "location": 148,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "x": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Union[str,Iterable[str]]",
                    "Literal[False]"
                ]
            }
        },
        "has_length_exceeds_120_chars": {
            "name": "has_length_exceeds_120_chars",
            "location": 152,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "very_long_name_parameter_1": [
                    "str",
                    "bool",
                    "Iterable[tuple[Union[str,str]]]",
                    "Iterable[Tuple[str,str]]",
                    "List[str]",
                    "None",
                    "Optional[str]"
                ],
                "very_long_name_parameter_2": [
                    "str",
                    "bool",
                    "Iterable[tuple[Union[str,str]]]",
                    "Iterable[Tuple[str,str]]",
                    "List[str]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "has_newtype_param": {
            "name": "has_newtype_param",
            "location": 159,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "has_forward_ref": {
            "name": "has_forward_ref",
            "location": 163,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "has_forward_ref_within_generator": {
            "name": "has_forward_ref_within_generator",
            "location": 167,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "_func_stub_from_callable": {
            "name": "_func_stub_from_callable",
            "location": 344,
            "return": [
                "monkeytype.stubs.FunctionStub"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Exception",
                    "Iterable[Any]"
                ],
                "strip_modules": [
                    "List[str]",
                    "Dict[str,Any]",
                    "None",
                    "str"
                ]
            }
        },
        "untyped_helper": {
            "name": "untyped_helper",
            "location": 824,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ]
            }
        },
        "a_module_func": {
            "name": "a_module_func",
            "location": 1015,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "tie_helper": {
            "name": "tie_helper",
            "location": 1165,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "b": [
                    "int",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "TestImportMap.test_merge": {
            "name": "test_merge",
            "location": 63,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportBlockStub.test_single_import": {
            "name": "test_single_import",
            "location": 78,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportBlockStub.test_io_import_single": {
            "name": "test_io_import_single",
            "location": 90,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportBlockStub.test_multiple_imports": {
            "name": "test_multiple_imports",
            "location": 100,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportBlockStub.test_multiple_io_imports": {
            "name": "test_multiple_io_imports",
            "location": 114,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeStub.test_simple_attribute": {
            "name": "test_simple_attribute",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stub": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestRenderAnnotation.test_render_annotation": {
            "name": "test_render_annotation",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestFunctionStub.test_classmethod": {
            "name": "test_classmethod",
            "location": 216,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_staticmethod": {
            "name": "test_staticmethod",
            "location": 224,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_property": {
            "name": "test_property",
            "location": 232,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_cached_property": {
            "name": "test_cached_property",
            "location": 240,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_simple": {
            "name": "test_simple",
            "location": 249,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_with_prefix": {
            "name": "test_with_prefix",
            "location": 255,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_strip_modules": {
            "name": "test_strip_modules",
            "location": 260,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_async_function": {
            "name": "test_async_function",
            "location": 268,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_optional_parameter_annotation": {
            "name": "test_optional_parameter_annotation",
            "location": 273,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_optional_union_parameter_annotation": {
            "name": "test_optional_union_parameter_annotation",
            "location": 279,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_optional_return_annotation": {
            "name": "test_optional_return_annotation",
            "location": 285,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_split_parameters_across_multiple_lines": {
            "name": "test_split_parameters_across_multiple_lines",
            "location": 291,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_default_none_parameter_annotation": {
            "name": "test_default_none_parameter_annotation",
            "location": 310,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_newtype_parameter_annotation": {
            "name": "test_newtype_parameter_annotation",
            "location": 315,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_nonetype_annotation": {
            "name": "test_nonetype_annotation",
            "location": 320,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_forward_ref_annotation": {
            "name": "test_forward_ref_annotation",
            "location": 329,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionStub.test_forward_ref_annotation_within_generator": {
            "name": "test_forward_ref_annotation_within_generator",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassStub.test_render": {
            "name": "test_render",
            "location": 351,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReplaceTypedDictsWithStubs.test_replace_typed_dict_with_stubs": {
            "name": "test_replace_typed_dict_with_stubs",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "TestModuleStub.test_render": {
            "name": "test_render",
            "location": 558,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModuleStub.test_render_nested_typed_dict": {
            "name": "test_render_nested_typed_dict",
            "location": 608,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModuleStub.test_render_return_typed_dict": {
            "name": "test_render_return_typed_dict",
            "location": 645,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModuleStub.test_render_yield_typed_dict": {
            "name": "test_render_yield_typed_dict",
            "location": 673,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModuleStub.test_render_typed_dict_in_list": {
            "name": "test_render_typed_dict_in_list",
            "location": 705,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModuleStub.test_render_typed_dict_base_and_subclass": {
            "name": "test_render_typed_dict_base_and_subclass",
            "location": 731,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModuleStub.test_render_return_empty_tuple": {
            "name": "test_render_return_empty_tuple",
            "location": 759,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildModuleStubs.test_build_module_stubs": {
            "name": "test_build_module_stubs",
            "location": 785,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildModuleStubs.test_build_module_stubs_typed_dict_parameter": {
            "name": "test_build_module_stubs_typed_dict_parameter",
            "location": 807,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubIndexBuilder.test_ignore_non_matching_functions": {
            "name": "test_ignore_non_matching_functions",
            "location": 829,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStubIndexBuilder.test_build_index": {
            "name": "test_build_index",
            "location": 834,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateSignatureHelper.has_annos": {
            "name": "has_annos",
            "location": 854,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "b": [
                    "int",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "UpdateSignatureHelper.a_class_method": {
            "name": "a_class_method",
            "location": 858,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[...,T]",
                    "Type",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "UpdateSignatureHelper.an_instance_method": {
            "name": "an_instance_method",
            "location": 861,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureArgs.test_update_arg": {
            "name": "test_update_arg",
            "location": 866,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureArgs.test_update_arg_with_anno": {
            "name": "test_update_arg_with_anno",
            "location": 876,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureArgs.test_update_self": {
            "name": "test_update_self",
            "location": 889,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureArgs.test_update_class": {
            "name": "test_update_class",
            "location": 896,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureArgs.test_update_arg_ignore_existing_anno": {
            "name": "test_update_arg_ignore_existing_anno",
            "location": 903,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureArgs.test_update_self_ignore_existing_anno": {
            "name": "test_update_self_ignore_existing_anno",
            "location": 914,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureArgs.test_update_arg_ignore_existing_anno_None": {
            "name": "test_update_arg_ignore_existing_anno_None",
            "location": 922,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureArgs.test_update_arg_avoid_incompatible_anno": {
            "name": "test_update_arg_avoid_incompatible_anno",
            "location": 933,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureReturn.test_update_return": {
            "name": "test_update_return",
            "location": 946,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureReturn.test_update_return_with_anno": {
            "name": "test_update_return_with_anno",
            "location": 952,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureReturn.test_avoid_incompatible_return": {
            "name": "test_avoid_incompatible_return",
            "location": 965,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureReturn.test_update_return_with_anno_ignored": {
            "name": "test_update_return_with_anno_ignored",
            "location": 978,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureReturn.test_update_yield": {
            "name": "test_update_yield",
            "location": 992,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureReturn.test_update_yield_and_return": {
            "name": "test_update_yield_and_return",
            "location": 999,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureReturn.test_update_yield_none_and_return": {
            "name": "test_update_yield_none_and_return",
            "location": 1004,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSignatureReturn.test_update_yield_and_return_none": {
            "name": "test_update_yield_and_return_none",
            "location": 1009,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionKind.test_from_callable": {
            "name": "test_from_callable",
            "location": 1035,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "Dict[str,Callable[,Any]]",
                    "Dict",
                    "Callable",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Callable[,Any]]",
                    "Dict",
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestFunctionDefinition.test_has_self": {
            "name": "test_has_self",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "expected": [
                    "int"
                ]
            }
        },
        "TestFunctionDefinition.test_from_callable": {
            "name": "test_from_callable",
            "location": 1081,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int"
                ],
                "expected": [
                    "bool",
                    "str",
                    "Dict[str,tuple[Union[str,str]]]",
                    "Union[str,int]",
                    "Dict[str,Tuple[str,str]]",
                    "int"
                ]
            }
        },
        "TestFunctionDefinition.test_from_callable_and_traced_types": {
            "name": "test_from_callable_and_traced_types",
            "location": 1155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "bool",
                    "List[Callable]"
                ],
                "arg_types": [
                    "bool",
                    "List[Callable]"
                ],
                "return_type": [
                    "bool",
                    "List[Callable]"
                ],
                "yield_type": [
                    "bool",
                    "List[Callable]"
                ],
                "expected": [
                    "Iterable[str]",
                    "List[List[str]]",
                    "List[str]"
                ]
            }
        },
        "TestShrinkTracedTypes.test_shrink_args": {
            "name": "test_shrink_args",
            "location": 1170,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShrinkTracedTypes.test_shrink_return": {
            "name": "test_shrink_return",
            "location": 1177,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShrinkTracedTypes.test_shrink_yield": {
            "name": "test_shrink_yield",
            "location": 1184,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetImportsForAnnotation.test_no_imports": {
            "name": "test_no_imports",
            "location": 1207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anno": [
                    "Tuple[float,float,float,float,float]",
                    "float",
                    "Tuple[Union[float,float,float,float,float]]",
                    "int"
                ]
            }
        },
        "TestGetImportsForAnnotation.test_special_case_types": {
            "name": "test_special_case_types",
            "location": 1218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anno": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestGetImportsForAnnotation.test_callable": {
            "name": "test_callable",
            "location": 1222,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetImportsForAnnotation.test_user_defined_class": {
            "name": "test_user_defined_class",
            "location": 1225,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetImportsForAnnotation.test_container_types": {
            "name": "test_container_types",
            "location": 1239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anno": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestGetImportsForAnnotation.test_nested_class": {
            "name": "test_nested_class",
            "location": 1243,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetImportsForSignature.test_default_none_parameter_imports": {
            "name": "test_default_none_parameter_imports",
            "location": 1248,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MonkeyType-main/tests/test_tracing.py": {
        "simple_add": {
            "name": "simple_add",
            "location": 38,
            "return": [
                "float",
                "int",
                "str",
                "bool",
                "Tuple[float,float]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "has_optional_kwarg": {
            "name": "has_optional_kwarg",
            "location": 42,
            "return": [
                "Union[(builtins.NoneType, types.FrameType)]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "b": [
                    "int",
                    "Mapping",
                    "None",
                    "List[str]"
                ]
            }
        },
        "has_locals": {
            "name": "has_locals",
            "location": 46,
            "return": [
                "Union[(builtins.NoneType, types.FrameType)]"
            ],
            "arguments": {
                "foo": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "a_module_function": {
            "name": "a_module_function",
            "location": 72,
            "return": [
                "Union[(builtins.NoneType, types.FrameType)]"
            ],
            "arguments": {}
        },
        "throw": {
            "name": "throw",
            "location": 92,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "should_recover": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "nested_throw": {
            "name": "nested_throw",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "should_recover": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "recover_from_nested_throw": {
            "name": "recover_from_nested_throw",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "squares": {
            "name": "squares",
            "location": 114,
            "return": [
                "Generator[(int, Any, builtins.NoneType)]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "implicit_return_none": {
            "name": "implicit_return_none",
            "location": 130,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "explicit_return_none": {
            "name": "explicit_return_none",
            "location": 134,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "collector": {
            "name": "collector",
            "location": 145,
            "return": [
                "TraceCollector",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TraceCollector.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceCollector.log": {
            "name": "log",
            "location": 31,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "trace": [
                    "int",
                    "str",
                    "mypy.types.Instance"
                ]
            }
        },
        "TraceCollector.flush": {
            "name": "flush",
            "location": 34,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetFuncHelper.a_static_method": {
            "name": "a_static_method",
            "location": 53,
            "return": [
                "Union[(builtins.NoneType, types.FrameType)]"
            ],
            "arguments": {}
        },
        "GetFuncHelper.a_class_method": {
            "name": "a_class_method",
            "location": 57,
            "return": [
                "Union[(builtins.NoneType, types.FrameType)]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[l,T]",
                    "Type",
                    "Callable[...,T]",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "GetFuncHelper.an_instance_method": {
            "name": "an_instance_method",
            "location": 60,
            "return": [
                "Union[(builtins.NoneType, types.FrameType)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetFuncHelper.a_property": {
            "name": "a_property",
            "location": 64,
            "return": [
                "int",
                "list",
                "List[Dict[str, Any]]",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetFuncHelper.a_cached_property": {
            "name": "a_cached_property",
            "location": 68,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFunc.test_get_func": {
            "name": "test_get_func",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "Union[str,IO]",
                    "Dict",
                    "IO",
                    "Dict[str,Any]",
                    "raiden.utils.List[raiden.utils.FeeAmount]",
                    "IO[str]"
                ],
                "expected_func": [
                    "str",
                    "Union[str,IO]",
                    "Dict",
                    "IO",
                    "Dict[str,Any]",
                    "raiden.utils.List[raiden.utils.FeeAmount]",
                    "IO[str]"
                ]
            }
        },
        "Oracle.meaning_of_life": {
            "name": "meaning_of_life",
            "location": 140,
            "return": [
                "int",
                "Iterable[T]",
                "str",
                "Callable[[T],bool]",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": []
            }
        },
        "lazy_property.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "fget": [
                    "str",
                    "bytes",
                    "Iterable[T]",
                    "Iterator[travelfootprininsta.types.FeedItem]"
                ],
                "doc": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "lazy_property.get_target_obj": {
            "name": "get_target_obj",
            "location": 155,
            "return": [
                "str",
                "Type",
                "bool",
                "Callable",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Type",
                    "Callable",
                    "None",
                    "Optional[type]",
                    "raiden.utils.Any",
                    "Callable[,None]"
                ],
                "cls": [
                    "Type",
                    "Callable",
                    "None",
                    "Optional[type]",
                    "raiden.utils.Any",
                    "Callable[,None]"
                ]
            }
        },
        "lazy_property.__get__": {
            "name": "__get__",
            "location": 158,
            "return": [
                "str",
                "lazy_property",
                "bool",
                "Dict",
                "OrderedDict",
                "Set",
                "List[int]",
                "List[str]",
                "int",
                "Tuple[Union[int,int,int,int]]",
                "float",
                "Dict[str,Union[Any,Any]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "django.db.migrations.state.StateApps"
                ],
                "cls": [
                    "bool",
                    "django.db.migrations.state.StateApps"
                ]
            }
        },
        "LazyValue.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "List[list[T]]"
                ]
            }
        },
        "LazyValue.value": {
            "name": "value",
            "location": 174,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraceCalls.test_simple_call": {
            "name": "test_simple_call",
            "location": 184,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_flushes": {
            "name": "test_flushes",
            "location": 189,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_callee_throws": {
            "name": "test_callee_throws",
            "location": 195,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_nested_callee_throws_caller_doesnt_recover": {
            "name": "test_nested_callee_throws_caller_doesnt_recover",
            "location": 203,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_callee_throws_recovers": {
            "name": "test_callee_throws_recovers",
            "location": 215,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_nested_callee_throws_recovers": {
            "name": "test_nested_callee_throws_recovers",
            "location": 220,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_caller_handles_callee_exception": {
            "name": "test_caller_handles_callee_exception",
            "location": 229,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_generator_trace": {
            "name": "test_generator_trace",
            "location": 238,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_return_none": {
            "name": "test_return_none",
            "location": 244,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestTraceCalls.test_access_property": {
            "name": "test_access_property",
            "location": 255,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_filtering": {
            "name": "test_filtering",
            "location": 262,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTraceCalls.test_lazy_value": {
            "name": "test_lazy_value",
            "location": 269,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "collector": []
            }
        }
    },
    "MonkeyType-main/tests/test_typing.py": {
        "helper": {
            "name": "helper",
            "location": 496,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {}
        },
        "generator": {
            "name": "generator",
            "location": 500,
            "return": [
                "builtins.generator[(int, Any, builtins.NoneType)]"
            ],
            "arguments": {}
        },
        "get_default_dict": {
            "name": "get_default_dict",
            "location": 504,
            "return": [
                "collections.defaultdict[(_T0, Any)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "get_nested_default_dict": {
            "name": "get_nested_default_dict",
            "location": 510,
            "return": [
                "collections.defaultdict[(_T0, Any)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_default_dict_with_dict": {
            "name": "get_default_dict_with_dict",
            "location": 516,
            "return": [
                "collections.defaultdict[(_T0, Any)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestTypesEqual.test_types_equal": {
            "name": "test_types_equal",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "other_type": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "expected_output": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestTypesEqual.test_is_list": {
            "name": "test_is_list",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "Dict[str,Any]",
                    "List[int]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]",
                    "List[int]"
                ]
            }
        },
        "TestMakeTypedDict.test_make_typed_dict": {
            "name": "test_make_typed_dict",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "required_fields": [
                    "Dict",
                    "List",
                    "Callable[[Any,Any],Any]",
                    "float",
                    "Callable[A,Any]"
                ],
                "optional_fields": [
                    "Dict",
                    "List",
                    "Callable[[Any,Any],Any]",
                    "float",
                    "Callable[A,Any]"
                ],
                "expected_type": [
                    "List[str]",
                    "str",
                    "List[Dict[str,Any]]",
                    "Dict",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "TestMakeTypedDict.test_field_annotations": {
            "name": "test_field_annotations",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "required_fields": [
                    "Dict",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "optional_fields": [
                    "Dict",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestShrinkType.test_shrink_non_uniform_typed_dict_types": {
            "name": "test_shrink_non_uniform_typed_dict_types",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected_type": [
                    "Tuple[int,str]",
                    "str",
                    "Tuple[Union[int,str]]"
                ]
            }
        },
        "TestShrinkType.test_shrink_types_non_typed_dict": {
            "name": "test_shrink_types_non_typed_dict",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected_type": [
                    "MutableMapping",
                    "MutableMapping[str,str]",
                    "Container",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "TestShrinkType.test_shrink_types": {
            "name": "test_shrink_types",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "str",
                    "Optional[permissions_doc]",
                    "None"
                ],
                "expected_type": [
                    "str",
                    "Optional[permissions_doc]",
                    "None"
                ]
            }
        },
        "TestShrinkType.test_shrink_types_mixed_dicts": {
            "name": "test_shrink_types_mixed_dicts",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Type",
                    "Callable",
                    "Dict",
                    "str",
                    "Pattern",
                    "Type[Any]"
                ],
                "expected_type": [
                    "Type",
                    "Callable",
                    "Dict",
                    "str",
                    "Pattern",
                    "Type[Any]"
                ]
            }
        },
        "TestTypedDictHelpers.test_is_typed_dict": {
            "name": "test_is_typed_dict",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]",
                    "T"
                ],
                "expected": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Dict[str,str]",
                    "T"
                ]
            }
        },
        "TestTypedDictHelpers.test_are_dict_types_equal": {
            "name": "test_are_dict_types_equal",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type1": [
                    "Exception",
                    "Type",
                    "str",
                    "Type[Any]"
                ],
                "type2": [
                    "Exception",
                    "Type",
                    "str",
                    "Type[Any]"
                ],
                "expected_value": [
                    "Exception",
                    "Type",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "TestGetType.test_builtin_types": {
            "name": "test_builtin_types",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Union[float,Sequence[float]]",
                    "float",
                    "int",
                    "Sequence[float]"
                ],
                "expected_type": [
                    "bool",
                    "Union[float,Sequence[float]]",
                    "float",
                    "int",
                    "Sequence[float]"
                ]
            }
        },
        "TestGetType.test_dict_type": {
            "name": "test_dict_type",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "List[str]",
                    "bool"
                ],
                "expected_when_max_size_is_zero": [
                    "List",
                    "int",
                    "List[int]",
                    "Union[int,float]",
                    "float",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "expected_when_max_size_is_none": [
                    "int",
                    "Callable"
                ]
            }
        },
        "TestGetType.test_dict_nested_within_generic": {
            "name": "test_dict_nested_within_generic",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "expected_when_max_size_is_zero": [
                    "str",
                    "Tuple",
                    "List[str]"
                ],
                "expected_when_max_size_is_none": [
                    "str",
                    "Tuple",
                    "List[str]"
                ]
            }
        },
        "TestGetType.test_dict_type_with_other_max_sizes": {
            "name": "test_dict_type_with_other_max_sizes",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str"
                ],
                "max_typed_dict_size": [
                    "int",
                    "float",
                    "str"
                ],
                "expected": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TestGetType.test_instance_type": {
            "name": "test_instance_type",
            "location": 622,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetType.test_class_type": {
            "name": "test_class_type",
            "location": 626,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "RewriteListToInt.rewrite_List": {
            "name": "rewrite_List",
            "location": 641,
            "return": [
                "Type[int]"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "int",
                    "List",
                    "None",
                    "List[str]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "RewriteListToInt.rewrite_type_variable": {
            "name": "rewrite_type_variable",
            "location": 644,
            "return": [
                "Type[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "type_variable": [
                    "Callable"
                ]
            }
        },
        "TestTypeRewriter.test_rewrite_TypedDict": {
            "name": "test_rewrite_TypedDict",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "int",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "TestRemoveEmptyContainers.test_rewrite": {
            "name": "test_rewrite",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestRewriteConfigDict.test_rewrite": {
            "name": "test_rewrite",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "Dict"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestRewriteLargeUnion.test_rewrite": {
            "name": "test_rewrite",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestRewriteGenerator.test_rewrite": {
            "name": "test_rewrite",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestRewriteAnonymousTypedDictToDict.test_rewrite": {
            "name": "test_rewrite",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "Dict[str,Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "MonkeyType-main/tests/test_util.py": {
        "a_module_func": {
            "name": "a_module_func",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetNameInModule.test_get_existing_name": {
            "name": "test_get_existing_name",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetNameInModule.test_get_nonexistent_module": {
            "name": "test_get_nonexistent_module",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetNameInModule.test_get_nonexistent_qualname": {
            "name": "test_get_nonexistent_qualname",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFuncInModule.test_get_method": {
            "name": "test_get_method",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFuncInModule.test_get_property": {
            "name": "test_get_property",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFuncInModule.test_get_settable_property": {
            "name": "test_get_settable_property",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFuncInModule.test_get_cached_property": {
            "name": "test_get_cached_property",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFuncInModule.test_get_non_function": {
            "name": "test_get_non_function",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Derived.an_instance_method": {
            "name": "an_instance_method",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPascalCase.test_pascal_case": {
            "name": "test_pascal_case",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_string": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "MonkeyType-main/tests/util.py": {
        "transform_path": {
            "name": "transform_path",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "smartcov_paths_hook": {
            "name": "smartcov_paths_hook",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "paths": [
                    "List[str]",
                    "List",
                    "str",
                    "Union[List,str]",
                    "npipes.utils.typeshed.pathlike",
                    "os.PathLike",
                    "Optional[str]"
                ]
            }
        },
        "Dummy.a_static_method": {
            "name": "a_static_method",
            "location": 19,
            "return": [
                "Optional[types.FrameType]"
            ],
            "arguments": {
                "foo": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Dummy.a_class_method": {
            "name": "a_class_method",
            "location": 23,
            "return": [
                "Optional[types.FrameType]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable[...,T]",
                    "Type",
                    "Type[T]",
                    "int"
                ],
                "foo": [
                    "bool",
                    "Callable[...,T]",
                    "Type",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "Dummy.an_instance_method": {
            "name": "an_instance_method",
            "location": 26,
            "return": [
                "Optional[types.FrameType]"
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "Tuple[int]",
                    "Exception",
                    "List[list[Any]]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "List[List[Any]]"
                ],
                "bar": [
                    "Tuple[int]",
                    "Exception",
                    "List[list[Any]]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "List[List[Any]]"
                ]
            }
        },
        "Dummy.a_property": {
            "name": "a_property",
            "location": 30,
            "return": [
                "int",
                "list",
                "List[Dict[str, Any]]",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dummy.a_settable_property": {
            "name": "a_settable_property",
            "location": 38,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "unused": [
                    "list",
                    "List[str]",
                    "int",
                    "str",
                    "Iterable[Tuple[str, str, str]]",
                    "List[List[str]]"
                ]
            }
        },
        "Dummy.a_cached_property": {
            "name": "a_cached_property",
            "location": 42,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Outer.Inner.f": {
            "name": "f",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MonkeyType-main/tests/__init__.py": {},
    "MonkeyType-main/tests/db/test_base.py": {
        "normal_func": {
            "name": "normal_func",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str"
                ],
                "b": [
                    "int",
                    "str"
                ]
            }
        },
        "main_func": {
            "name": "main_func",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator"
                ],
                "b": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator"
                ]
            }
        },
        "logger": {
            "name": "logger",
            "location": 27,
            "return": [
                "CallTraceStoreLogger",
                "bool",
                "Mapping",
                "str"
            ],
            "arguments": {}
        },
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "float"
                ]
            }
        }
    },
    "MonkeyType-main/tests/db/test_sqlite.py": {
        "func": {
            "name": "func",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "func2": {
            "name": "func2",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "store": {
            "name": "store",
            "location": 25,
            "return": [
                "SQLiteStore",
                "bytes",
                "str",
                "MutableMapping[str,Any]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "store": []
            }
        },
        "test_dedup": {
            "name": "test_dedup",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "store": []
            }
        },
        "test_qualname_filtering": {
            "name": "test_qualname_filtering",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "store": []
            }
        },
        "test_limit_resultset": {
            "name": "test_limit_resultset",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "store": []
            }
        }
    },
    "MonkeyType-main/tests/testmodule/__init__.py": {
        "Foo.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg1": [
                    "int",
                    "float",
                    "bool"
                ],
                "arg2": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    }
}
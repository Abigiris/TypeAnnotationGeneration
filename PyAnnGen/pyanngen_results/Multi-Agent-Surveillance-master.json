{
    "Multi-Agent-Surveillance-master/main.py": {},
    "Multi-Agent-Surveillance-master/runner.py": {
        "load_world": {
            "name": "load_world",
            "location": 9,
            "return": [
                "simulation.world.World"
            ],
            "arguments": {
                "files": [
                    "str",
                    "IO[str]"
                ],
                "ia": [
                    "int",
                    "str",
                    "bool"
                ],
                "sa": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Union[str,List[str],None]",
                    "Mapping",
                    "Dict[str,str]",
                    "FrozenSet[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Multi-Agent-Surveillance-master/ai/agents.py": {
        "SimpleGuard.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleGuard.on_setup": {
            "name": "on_setup",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleGuard.on_pick_start": {
            "name": "on_pick_start",
            "location": 20,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleGuard.on_noise": {
            "name": "on_noise",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "noises": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SimpleGuard.on_message": {
            "name": "on_message",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "List[str]",
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "SimpleGuard.on_collide": {
            "name": "on_collide",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleGuard.on_vision_update": {
            "name": "on_vision_update",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleGuard.on_tick": {
            "name": "on_tick",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seen_agents": [
                    "Dict[int,Any]",
                    "Dict",
                    "float"
                ]
            }
        },
        "PatrollingGuard.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatrollingGuard.on_setup": {
            "name": "on_setup",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatrollingGuard.setup_patrol_route": {
            "name": "setup_patrol_route",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pa": [
                    "str"
                ]
            }
        },
        "PatrollingGuard.on_pick_start": {
            "name": "on_pick_start",
            "location": 89,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatrollingGuard.on_noise": {
            "name": "on_noise",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "noises": [
                    "str",
                    "List[tuple[Union[str,float,int,float]]]",
                    "float",
                    "numpy.ndarray",
                    "int",
                    "List[Tuple[str,float,int,float]]"
                ]
            }
        },
        "PatrollingGuard.on_message": {
            "name": "on_message",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PatrollingGuard.on_collide": {
            "name": "on_collide",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatrollingGuard.on_vision_update": {
            "name": "on_vision_update",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatrollingGuard.on_tick": {
            "name": "on_tick",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seen_agents": [
                    "Dict[int,Any]",
                    "Dict",
                    "float"
                ]
            }
        },
        "CameraGuard.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CameraGuard.on_setup": {
            "name": "on_setup",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CameraGuard.place_in_tower": {
            "name": "place_in_tower",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "bool",
                    "Exception",
                    "int"
                ]
            }
        },
        "CameraGuard.on_message": {
            "name": "on_message",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "CameraGuard.on_collide": {
            "name": "on_collide",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CameraGuard.on_pick_start": {
            "name": "on_pick_start",
            "location": 179,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CameraGuard.on_noise": {
            "name": "on_noise",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "noises": [
                    "str",
                    "List[tuple[Union[str,float,int,float]]]",
                    "float",
                    "numpy.ndarray",
                    "int",
                    "List[Tuple[str,float,int,float]]"
                ]
            }
        },
        "CameraGuard.on_vision_update": {
            "name": "on_vision_update",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CameraGuard.on_tick": {
            "name": "on_tick",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seen_agents": [
                    "Dict[int,Any]",
                    "Dict",
                    "float"
                ]
            }
        },
        "CameraGuard.on_capture": {
            "name": "on_capture",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingIntruder.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingIntruder.on_setup": {
            "name": "on_setup",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingIntruder.on_pick_start": {
            "name": "on_pick_start",
            "location": 221,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingIntruder.on_captured": {
            "name": "on_captured",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingIntruder.on_noise": {
            "name": "on_noise",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "noises": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "PathfindingIntruder.on_message": {
            "name": "on_message",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "PathfindingIntruder.on_collide": {
            "name": "on_collide",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingIntruder.on_reached_target": {
            "name": "on_reached_target",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingIntruder.on_vision_update": {
            "name": "on_vision_update",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingIntruder.on_tick": {
            "name": "on_tick",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seen_agents": [
                    "Dict[int,Any]",
                    "Dict",
                    "float"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/ai/__init__.py": {},
    "Multi-Agent-Surveillance-master/gui/console.py": {
        "Console.setup": {
            "name": "setup",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Console.register_command": {
            "name": "register_command",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "func": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Console.println": {
            "name": "println",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Console.run_command": {
            "name": "run_command",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "Console.on_draw": {
            "name": "on_draw",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Console.on_key_press": {
            "name": "on_key_press",
            "location": 66,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Callable[[bytes],bytes]"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/gui/editor.py": {
        "Editor.setup": {
            "name": "setup",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Editor.on_draw": {
            "name": "on_draw",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Editor.on_key_press": {
            "name": "on_key_press",
            "location": 49,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "List[Optional[Any]]",
                    "Optional[List[str]]"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "Editor.on_mouse_press": {
            "name": "on_mouse_press",
            "location": 61,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "button": [
                    "Dict",
                    "str",
                    "int"
                ],
                "modifiers": [
                    "bool",
                    "int"
                ]
            }
        },
        "Editor.on_mouse_release": {
            "name": "on_mouse_release",
            "location": 74,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "button": [
                    "Dict",
                    "str",
                    "int"
                ],
                "modifiers": [
                    "str",
                    "float",
                    "int",
                    "Sequence[Any]",
                    "bool"
                ]
            }
        },
        "Editor.on_draw.line": {
            "name": "line",
            "location": 31,
            "return": [
                "int",
                "str",
                "Dict",
                "Callable",
                "Optional[str]",
                "Dict[str,Any]",
                "List[int]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/gui/mapviewer.py": {
        "MapViewer.setup": {
            "name": "setup",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapViewer.set_fog": {
            "name": "set_fog",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "MapViewer.update_agent_sprites": {
            "name": "update_agent_sprites",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapViewer.build_grid": {
            "name": "build_grid",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapViewer.build_map_items": {
            "name": "build_map_items",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapViewer.screen_to_map": {
            "name": "screen_to_map",
            "location": 136,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "Iterable[T]",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "T"
                ],
                "round": [
                    "bool",
                    "List[float]",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "List",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "MapViewer.update": {
            "name": "update",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "bool",
                    "str"
                ]
            }
        },
        "MapViewer.on_draw": {
            "name": "on_draw",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapViewer.on_mouse_motion": {
            "name": "on_mouse_motion",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float,int]"
                ],
                "dx": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "dy": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ]
            }
        },
        "MapViewer.on_key_press": {
            "name": "on_key_press",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[numpy.ndarray]",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "MapViewer.on_mouse_drag": {
            "name": "on_mouse_drag",
            "location": 225,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "str",
                    "int"
                ],
                "y": [
                    "bool",
                    "str",
                    "int"
                ],
                "dx": [
                    "bool",
                    "Tuple[int,int]",
                    "int"
                ],
                "dy": [
                    "bool",
                    "Tuple[int,int]",
                    "int"
                ],
                "button": [
                    "bool",
                    "Tuple",
                    "numpy.ndarray"
                ],
                "modifiers": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "MapViewer.on_mouse_scroll": {
            "name": "on_mouse_scroll",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "y": [
                    "numpy.ndarray",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "scroll_x": [
                    "numpy.ndarray",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "scroll_y": [
                    "Dict",
                    "Sequence[float]",
                    "float",
                    "int"
                ]
            }
        },
        "MapViewer.setup.fow": {
            "name": "fow",
            "location": 53,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "input": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/gui/renderer.py": {
        "GUI.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "GUI.update": {
            "name": "update",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "int",
                    "Dict[str,tuple]",
                    "None",
                    "Dict[str,Any]",
                    "Optional[bool]"
                ]
            }
        },
        "GUI.on_draw": {
            "name": "on_draw",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUI.on_key_press": {
            "name": "on_key_press",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "numpy.dtype"
                ],
                "modifiers": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GUI.on_mouse_motion": {
            "name": "on_mouse_motion",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "dx": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "dy": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "GUI.on_mouse_press": {
            "name": "on_mouse_press",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "button": [
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "modifiers": [
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ]
            }
        },
        "GUI.on_mouse_release": {
            "name": "on_mouse_release",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "button": [
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "modifiers": [
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]",
                    "numpy.ndarray"
                ]
            }
        },
        "GUI.on_mouse_drag": {
            "name": "on_mouse_drag",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[Union[int,int]]"
                ],
                "y": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[Union[int,int]]"
                ],
                "dx": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[Union[int,int]]"
                ],
                "dy": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[Union[int,int]]"
                ],
                "button": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[Union[int,int]]"
                ],
                "modifiers": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Tuple[int,int]",
                    "None",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "GUI.on_mouse_scroll": {
            "name": "on_mouse_scroll",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "scroll_x": [
                    "int",
                    "float",
                    "numpy.array",
                    "numpy.ndarray"
                ],
                "scroll_y": [
                    "int",
                    "float",
                    "numpy.array",
                    "numpy.ndarray"
                ]
            }
        },
        "WindowComponent.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[Type]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "WindowComponent.setup": {
            "name": "setup",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowComponent.update": {
            "name": "update",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "bool",
                    "str"
                ]
            }
        },
        "WindowComponent.on_draw": {
            "name": "on_draw",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowComponent.on_key_press": {
            "name": "on_key_press",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "WindowComponent.on_mouse_motion": {
            "name": "on_mouse_motion",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "dx": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ],
                "dy": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "List",
                    "T"
                ]
            }
        },
        "WindowComponent.on_mouse_drag": {
            "name": "on_mouse_drag",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "str",
                    "int"
                ],
                "y": [
                    "bool",
                    "str",
                    "int"
                ],
                "dx": [
                    "bool",
                    "str",
                    "int"
                ],
                "dy": [
                    "bool",
                    "str",
                    "int"
                ],
                "button": [
                    "bool",
                    "str",
                    "int"
                ],
                "modifiers": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "WindowComponent.on_mouse_press": {
            "name": "on_mouse_press",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "y": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "button": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "modifiers": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "WindowComponent.on_mouse_release": {
            "name": "on_mouse_release",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "y": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "button": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "modifiers": [
                    "bool",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "WindowComponent.on_mouse_scroll": {
            "name": "on_mouse_scroll",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "y": [
                    "numpy.ndarray",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "scroll_x": [
                    "numpy.ndarray",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "scroll_y": [
                    "numpy.ndarray",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "Viewport.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "center_x": [
                    "int",
                    "numpy.ndarray",
                    "Collection",
                    "Optional[Collection[int]]",
                    "None"
                ],
                "center_y": [
                    "int",
                    "numpy.ndarray",
                    "Collection",
                    "Optional[Collection[int]]",
                    "None"
                ],
                "width": [
                    "int",
                    "numpy.ndarray",
                    "Collection",
                    "Optional[Collection[int]]",
                    "None"
                ],
                "height": [
                    "int",
                    "numpy.ndarray",
                    "Collection",
                    "Optional[Collection[int]]",
                    "None"
                ]
            }
        },
        "Viewport.left": {
            "name": "left",
            "location": 237,
            "return": [
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viewport.right": {
            "name": "right",
            "location": 241,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viewport.bottom": {
            "name": "bottom",
            "location": 245,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viewport.top": {
            "name": "top",
            "location": 249,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viewport.bottom_left": {
            "name": "bottom_left",
            "location": 253,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viewport.top_right": {
            "name": "top_right",
            "location": 257,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viewport.as_tuple": {
            "name": "as_tuple",
            "location": 260,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viewport.zoom": {
            "name": "zoom",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "int",
                    "Callable",
                    "str"
                ],
                "factor": [
                    "float",
                    "int",
                    "Tuple[float,float]"
                ]
            }
        },
        "Viewport.move": {
            "name": "move",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "move_x": [
                    "bool",
                    "int"
                ],
                "move_y": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Viewport.lock": {
            "name": "lock",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "Dict[str,tuple[Union[int,int]]]",
                    "Dict[str,Tuple[int,int]]",
                    "List",
                    "int",
                    "Tuple[str]",
                    "numpy.ndarray",
                    "Iterable[Any]"
                ],
                "right": [
                    "Dict[str,tuple[Union[int,int]]]",
                    "Dict[str,Tuple[int,int]]",
                    "List",
                    "int",
                    "Tuple[str]",
                    "numpy.ndarray",
                    "Iterable[Any]"
                ],
                "bottom": [
                    "str",
                    "bool",
                    "float",
                    "List[list[str]]",
                    "List[List[str]]",
                    "int"
                ],
                "top": [
                    "Optional[Callable[[str],bool]]",
                    "Callable[str,bool]",
                    "float",
                    "List[int]",
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Viewport.__str__": {
            "name": "__str__",
            "location": 288,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUI.__init__.toggle_paused": {
            "name": "toggle_paused",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/gui/__init__.py": {},
    "Multi-Agent-Surveillance-master/simulation/agent.py": {
        "Agent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.setup": {
            "name": "setup",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Agent.log": {
            "name": "log",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.send_message": {
            "name": "send_message",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Type",
                    "Dict[str,Any]"
                ],
                "message": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Agent.leave_marker": {
            "name": "leave_marker",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Iterable[Type]",
                    "Sequence[str]",
                    "Type",
                    "str"
                ]
            }
        },
        "Agent.time_ticks": {
            "name": "time_ticks",
            "location": 123,
            "return": [
                "int",
                "Optional[bool]",
                "float",
                "Iterable[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.time_seconds": {
            "name": "time_seconds",
            "location": 127,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.turn": {
            "name": "turn",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_angle": [
                    "str",
                    "bool",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "Agent.turn_to": {
            "name": "turn_to",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_angle": [
                    "List[int]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Agent.turn_to_point": {
            "name": "turn_to_point",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Tuple[cirq.Qid]"
                ]
            }
        },
        "Agent.set_movement_speed": {
            "name": "set_movement_speed",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "speed": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "Agent.is_resting": {
            "name": "is_resting",
            "location": 170,
            "return": [
                "bool",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.is_sprinting": {
            "name": "is_sprinting",
            "location": 174,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._update_sprint": {
            "name": "_update_sprint",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._update_tower_interaction": {
            "name": "_update_tower_interaction",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.enter_tower": {
            "name": "enter_tower",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.leave_tower": {
            "name": "leave_tower",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.in_tower_range": {
            "name": "in_tower_range",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tower": [
                    "int",
                    "str",
                    "float",
                    "Union[int,float]",
                    "numpy.random.RandomState"
                ]
            }
        },
        "Agent.move": {
            "name": "move",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Agent.turn_remaining": {
            "name": "turn_remaining",
            "location": 266,
            "return": [
                "int",
                "str",
                "util.IDM",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.move_remaining": {
            "name": "move_remaining",
            "location": 272,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._process_movement": {
            "name": "_process_movement",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._update_vision": {
            "name": "_update_vision",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool",
                    "int",
                    "float",
                    "Optional[str]",
                    "Union[int,str]",
                    "str"
                ]
            }
        },
        "Agent.tick": {
            "name": "tick",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seen_agents": [
                    "int",
                    "Callable",
                    "str"
                ],
                "noises": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        },
        "Agent.on_setup": {
            "name": "on_setup",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.on_pick_start": {
            "name": "on_pick_start",
            "location": 383,
            "return": [
                "Tuple[float,float]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.on_vision_update": {
            "name": "on_vision_update",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.on_noise": {
            "name": "on_noise",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "noises": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Agent.on_message": {
            "name": "on_message",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Agent.on_collide": {
            "name": "on_collide",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.on_tick": {
            "name": "on_tick",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seen_agents": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Agent.make_noise": {
            "name": "make_noise",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuardAgent.__init__": {
            "name": "__init__",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuardAgent.setup": {
            "name": "setup",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IntruderAgent.__init__": {
            "name": "__init__",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntruderAgent.target": {
            "name": "target",
            "location": 470,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntruderAgent.on_captured": {
            "name": "on_captured",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntruderAgent.on_reached_target": {
            "name": "on_reached_target",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Multi-Agent-Surveillance-master/simulation/environment.py": {
        "Gate.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.is_open": {
            "name": "is_open",
            "location": 17,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.open": {
            "name": "open",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.close": {
            "name": "close",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "bytes",
                    "int",
                    "Optional[Union[int,Any]]",
                    "numpy.ndarray"
                ],
                "targets": [
                    "List[util.Position]",
                    "None",
                    "bool",
                    "str",
                    "List",
                    "List[P]"
                ],
                "gates": [
                    "str",
                    "List",
                    "None",
                    "int"
                ],
                "towers": [
                    "str",
                    "List",
                    "None",
                    "int"
                ],
                "markers": [
                    "str",
                    "List",
                    "None",
                    "int"
                ]
            }
        },
        "Map.to_dict": {
            "name": "to_dict",
            "location": 52,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.from_dict": {
            "name": "from_dict",
            "location": 66,
            "return": [
                "Map"
            ],
            "arguments": {
                "self": [
                    "Type[_TMap]"
                ],
                "data": [
                    "List[list[Any]]",
                    "Dict",
                    "bytes",
                    "List[T]",
                    "List",
                    "Dict[str,Any]",
                    "List[List[Any]]"
                ]
            }
        },
        "Map.width": {
            "name": "width",
            "location": 79,
            "return": [
                "float",
                "Sequence[int]",
                "list",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.height": {
            "name": "height",
            "location": 83,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.in_bounds": {
            "name": "in_bounds",
            "location": 86,
            "return": [
                "bool",
                "int",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "Tuple",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "str",
                    "Tuple",
                    "numpy.ndarray"
                ]
            }
        },
        "Map.add_target": {
            "name": "add_target",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Map.remove_target": {
            "name": "remove_target",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "y": [
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Map.add_tower": {
            "name": "add_tower",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List",
                    "numpy.ndarray",
                    "List[int]",
                    "float"
                ],
                "y": [
                    "List",
                    "numpy.ndarray",
                    "List[int]",
                    "float"
                ]
            }
        },
        "Map.remove_tower": {
            "name": "remove_tower",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray"
                ],
                "y": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "Map.is_tower": {
            "name": "is_tower",
            "location": 107,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[T]",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "y": [
                    "int",
                    "List[T]",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "Map.set_wall": {
            "name": "set_wall",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "None",
                    "float",
                    "List",
                    "numpy.ndarray",
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ],
                "y": [
                    "int",
                    "None",
                    "float",
                    "List",
                    "numpy.ndarray",
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ],
                "value": [
                    "bool",
                    "Position",
                    "List[str]",
                    "numpy.ndarray",
                    "Optional[Any]",
                    "int",
                    "Callable[,float]",
                    "float"
                ]
            }
        },
        "Map.is_wall": {
            "name": "is_wall",
            "location": 117,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[bool]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[float]"
                ],
                "y": [
                    "int",
                    "List[float]"
                ]
            }
        },
        "Map.get_vision_modifier": {
            "name": "get_vision_modifier",
            "location": 123,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "bool",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "float",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "Map.set_wall_rectangle": {
            "name": "set_wall_rectangle",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x0": [
                    "int",
                    "List",
                    "float",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ],
                "y0": [
                    "int",
                    "Tuple"
                ],
                "x1": [
                    "int",
                    "List",
                    "float",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ],
                "y1": [
                    "int",
                    "Tuple"
                ],
                "value": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Map.set_vision": {
            "name": "set_vision",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "value": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Map.set_vision_area": {
            "name": "set_vision_area",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x0": [
                    "int",
                    "numpy.ndarray",
                    "Mapping[str,float]",
                    "Dict[str,Any]"
                ],
                "y0": [
                    "int",
                    "numpy.ndarray",
                    "Union[int,bool]"
                ],
                "x1": [
                    "int",
                    "numpy.ndarray",
                    "Mapping[str,float]",
                    "Dict[str,Any]"
                ],
                "y1": [
                    "int",
                    "numpy.ndarray",
                    "Union[int,bool]"
                ],
                "value": [
                    "float",
                    "int",
                    "List[str]",
                    "Mapping[str,float]",
                    "str"
                ]
            }
        },
        "MapGenerator.random": {
            "name": "random",
            "location": 159,
            "return": [
                "Map"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "str",
                    "SupportsFloat"
                ],
                "size": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "MapGenerator.blank": {
            "name": "blank",
            "location": 193,
            "return": [
                "Map"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "str",
                    "SupportsFloat"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "MapGenerator.maze": {
            "name": "maze",
            "location": 197,
            "return": [
                "Map"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "str",
                    "SupportsFloat"
                ],
                "size": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "Tuple[int,int]"
                ]
            }
        },
        "MapGenerator.maze.maze_prims": {
            "name": "maze_prims",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ],
                "complexity": [
                    "int",
                    "Iterator[int]",
                    "Union[int, str]",
                    "float",
                    "str"
                ],
                "density": [
                    "int",
                    "Iterator[int]",
                    "Union[int, str]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/simulation/logger.py": {
        "reset": {
            "name": "reset",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "new_event": {
            "name": "new_event",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Dict",
                    "List"
                ]
            }
        },
        "set_outcome": {
            "name": "set_outcome",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "_intruder_win": [
                    "int",
                    "Tuple",
                    "str",
                    "List[int]",
                    "bool",
                    "float",
                    "Union[str,float]"
                ],
                "_time_taken": [
                    "int",
                    "Tuple",
                    "str",
                    "List[int]",
                    "bool",
                    "float",
                    "Union[str,float]"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/simulation/pathfinding.py": {
        "dijkstra_search": {
            "name": "dijkstra_search",
            "location": 33,
            "return": [
                "Tuple[(Dict[(Any, None)], dict)]"
            ],
            "arguments": {
                "graph": [
                    "float",
                    "str",
                    "int"
                ],
                "start": [
                    "int",
                    "Optional[int]",
                    "None",
                    "float",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "Union[str,int]"
                ],
                "goal": [
                    "Dict",
                    "int"
                ]
            }
        },
        "reconstruct_path": {
            "name": "reconstruct_path",
            "location": 58,
            "return": [
                "Optional[List[Union[(_T1, _T2)]]]"
            ],
            "arguments": {
                "came_from": [
                    "List[float]",
                    "List[dict]",
                    "T",
                    "int",
                    "List[Dict]",
                    "bool",
                    "Dict[str,Any]"
                ],
                "start": [
                    "str",
                    "bool",
                    "T"
                ],
                "goal": [
                    "int",
                    "T",
                    "List[float]",
                    "List[Dict]",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "a_star_search": {
            "name": "a_star_search",
            "location": 74,
            "return": [
                "Tuple[(Dict[(Any, None)], dict)]"
            ],
            "arguments": {
                "graph": [
                    "float",
                    "str",
                    "int"
                ],
                "start": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "Optional[float]",
                    "T"
                ],
                "goal": [
                    "int"
                ],
                "heuristic": [
                    "int"
                ]
            }
        },
        "Graph.neighbors": {
            "name": "neighbors",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "Graph.cost": {
            "name": "cost",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_node": [
                    "str",
                    "List[str]",
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "to_node": [
                    "str",
                    "List[str]",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.empty": {
            "name": "empty",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.put": {
            "name": "put",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ],
                "priority": [
                    "str"
                ]
            }
        },
        "PriorityQueue.get": {
            "name": "get",
            "location": 29,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Multi-Agent-Surveillance-master/simulation/util.py": {
        "Position.move": {
            "name": "move",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": [
                    "bool",
                    "Optional[int]",
                    "None",
                    "Optional[List[int]]",
                    "List[int]"
                ],
                "angle": [
                    "bool",
                    "Optional[int]",
                    "None",
                    "Optional[List[int]]",
                    "List[int]"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/simulation/vision.py": {
        "AgentView.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AgentView.ID": {
            "name": "ID",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentView.location": {
            "name": "location",
            "location": 25,
            "return": [
                "Position",
                "str",
                "Dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentView.heading": {
            "name": "heading",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentView.is_guard": {
            "name": "is_guard",
            "location": 33,
            "return": [
                "bool",
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentView.is_intruder": {
            "name": "is_intruder",
            "location": 37,
            "return": [
                "bool",
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AgentView.is_captured": {
            "name": "is_captured",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapView.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "map": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MapView.size": {
            "name": "size",
            "location": 61,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapView.width": {
            "name": "width",
            "location": 65,
            "return": [
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapView.height": {
            "name": "height",
            "location": 69,
            "return": [
                "int",
                "bytearray",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapView.get_vision_modifier": {
            "name": "get_vision_modifier",
            "location": 72,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "y": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "MapView._reveal_all": {
            "name": "_reveal_all",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapView._is_tile_visible_from": {
            "name": "_is_tile_visible_from",
            "location": 78,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "x0": [
                    "int"
                ],
                "y0": [
                    "int"
                ],
                "x": [
                    "int",
                    "List[T]"
                ],
                "y": [
                    "int",
                    "List[T]"
                ]
            }
        },
        "MapView._reveal_visible": {
            "name": "_reveal_visible",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x0": [
                    "int",
                    "numpy.ndarray"
                ],
                "y0": [
                    "int",
                    "numpy.ndarray"
                ],
                "radius": [
                    "int",
                    "numpy.ndarray",
                    "static_frame.core.util.UFunc",
                    "Tuple[int,int]",
                    "bool"
                ],
                "view_angle": [
                    "float",
                    "bool",
                    "numpy.ndarray",
                    "Mapping[str,Tuple[float,float,float]]"
                ],
                "heading": [
                    "float",
                    "bool",
                    "Mapping",
                    "numpy.ndarray",
                    "Mapping[str,Tuple[float,float,float]]"
                ],
                "in_tower": [
                    "bool"
                ]
            }
        },
        "MapView.is_revealed": {
            "name": "is_revealed",
            "location": 163,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[bool]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "Union[int,float,str]",
                    "Union[str,float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int,float,str]",
                    "Union[str,float]"
                ]
            }
        },
        "MapView.is_passable": {
            "name": "is_passable",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MapView.neighbors": {
            "name": "neighbors",
            "location": 178,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List",
                    "bytes"
                ]
            }
        },
        "MapView.cost": {
            "name": "cost",
            "location": 203,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "from_node": [
                    "List[str]",
                    "float",
                    "str",
                    "T"
                ],
                "to_node": [
                    "str",
                    "Dict",
                    "bytes"
                ]
            }
        },
        "MapView.find_path": {
            "name": "find_path",
            "location": 221,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "from_node": [
                    "Tuple[Union[float,float]]",
                    "str",
                    "Tuple[float,float]",
                    "Mapping",
                    "static_frame.core.util.IndexInitializer",
                    "Dict[str,Any]"
                ],
                "to_node": [
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "Dict[str,Any]",
                    "Union[AsyncIterable[Any],Iterable[Any]]"
                ]
            }
        },
        "MapView.is_wall": {
            "name": "is_wall",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]"
                ],
                "y": [
                    "float",
                    "int",
                    "Union[numpy.ndarray,pandas.DataFrame]"
                ]
            }
        },
        "MapView._is_tile_visible_from.line": {
            "name": "line",
            "location": 81,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "x0": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ],
                "y0": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "x1": [
                    "int",
                    "Mapping[str, float]",
                    "numpy.ndarray",
                    "str",
                    "float"
                ],
                "y1": [
                    "int",
                    "float",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MapView.find_path.heuristic": {
            "name": "heuristic",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "from_node": [
                    "str",
                    "List[str]",
                    "float",
                    "T"
                ],
                "to_node": [
                    "str",
                    "List[str]",
                    "float",
                    "T"
                ]
            }
        },
        "MapView.find_path.pathify": {
            "name": "pathify",
            "location": 235,
            "return": [
                "None",
                "Optional[str]",
                "List",
                "Optional[int]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "bool",
                    "int",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/simulation/world.py": {
        "World.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "map": [
                    "bool"
                ]
            }
        },
        "World.generate_agent_ID": {
            "name": "generate_agent_ID",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict",
                    "Type",
                    "Sequence[str]"
                ]
            }
        },
        "World.save_map": {
            "name": "save_map",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "World.save_agents": {
            "name": "save_agents",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "World.to_file": {
            "name": "to_file",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "Set[str]",
                    "None"
                ],
                "save_agents": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "World.load_map": {
            "name": "load_map",
            "location": 70,
            "return": [
                "World"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWorld]"
                ],
                "name": [
                    "str",
                    "List"
                ]
            }
        },
        "World.load_agents": {
            "name": "load_agents",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "numpy.array"
                ]
            }
        },
        "World.from_file": {
            "name": "from_file",
            "location": 92,
            "return": [
                "World"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWorld]"
                ],
                "name": [
                    "str",
                    "Callable[...,T]",
                    "Set[str]",
                    "Type",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,D]"
                ],
                "load_agents": [
                    "bool",
                    "str",
                    "Pattern"
                ]
            }
        },
        "World.clear_agents": {
            "name": "clear_agents",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.add_agent": {
            "name": "add_agent",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_type": [
                    "str",
                    "Type",
                    "List[str]",
                    "enum.Enum",
                    "Union[str,List[str]]"
                ]
            }
        },
        "World.add_noise": {
            "name": "add_noise",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "noise": [
                    "Exception",
                    "float"
                ]
            }
        },
        "World.guards": {
            "name": "guards",
            "location": 110,
            "return": [
                "Dict",
                "Mapping",
                "Dict[str,str]",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.intruders": {
            "name": "intruders",
            "location": 114,
            "return": [
                "Dict",
                "Mapping",
                "Dict[str,str]",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.transmit_message": {
            "name": "transmit_message",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "World._collision_check": {
            "name": "_collision_check",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "World._capture_check": {
            "name": "_capture_check",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "World._target_check": {
            "name": "_target_check",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.setup": {
            "name": "setup",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.create_patrolling_areas": {
            "name": "create_patrolling_areas",
            "location": 269,
            "return": [
                "List[Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.tick": {
            "name": "tick",
            "location": 293,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.emit_random_noise": {
            "name": "emit_random_noise",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marker.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "Iterable[str]"
                ],
                "location": [
                    "str",
                    "int",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "target": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "List",
                    "None"
                ],
                "message": [
                    "str",
                    "Sequence[Any]"
                ]
            }
        },
        "NoiseEvent.__init__": {
            "name": "__init__",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "bool",
                    "int"
                ],
                "source": [
                    "str",
                    "None",
                    "int",
                    "bytes",
                    "Union[str,Iterable[str]]",
                    "Set[str]",
                    "Iterable[str]"
                ],
                "radius": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "PerceivedNoise.__init__": {
            "name": "__init__",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "noise": [
                    "int",
                    "float",
                    "bool"
                ],
                "observer": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PerceivedNoise.perceived_angle": {
            "name": "perceived_angle",
            "location": 414,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World._collision_check.collision_point": {
            "name": "collision_point",
            "location": 121,
            "return": [
                "None",
                "bool",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "World._collision_check.circle_collision": {
            "name": "circle_collision",
            "location": 128,
            "return": [
                "bool",
                "numpy.ndarray",
                "Optional[int]",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "numpy.ndarray"
                ],
                "r": [
                    "float",
                    "int",
                    "List[AnyStr]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Multi-Agent-Surveillance-master/simulation/__init__.py": {}
}
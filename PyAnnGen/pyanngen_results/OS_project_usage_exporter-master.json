{
    "OS_project_usage_exporter-master/dummy_cloud.py": {
        "DummyCloud.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy_file": [
                    "str",
                    "bool",
                    "Callable[[str,str],None]",
                    "Callable[str,str,None]"
                ],
                "start": [
                    "None",
                    "str",
                    "Optional[Set[int]]",
                    "Optional[str]"
                ]
            }
        },
        "DummyCloud.load_toml": {
            "name": "load_toml",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyCloud.list_projects": {
            "name": "list_projects",
            "location": 41,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "domain_id": [
                    "str",
                    "None",
                    "Optional[Sequence]",
                    "Optional[int]",
                    "Sequence",
                    "int"
                ]
            }
        },
        "DummyCloud.get_domain": {
            "name": "get_domain",
            "location": 56,
            "return": [
                "Munch",
                "Dict[str,Any]",
                "None",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "name_or_id": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Compute.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy_values": [
                    "int",
                    "bool"
                ],
                "script_start": [
                    "bool",
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "Compute.reload": {
            "name": "reload",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy_values": [
                    "bool",
                    "Optional[bool]",
                    "Type",
                    "Callable",
                    "None",
                    "str",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator",
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "Compute.get_tenant_usage": {
            "name": "get_tenant_usage",
            "location": 195,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Dict",
                    "int",
                    "str"
                ],
                "requested_start_date": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "float"
                ]
            }
        },
        "Compute.get_server_details": {
            "name": "get_server_details",
            "location": 216,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "django.utils.timezone.timedelta"
                ]
            }
        },
        "Compute.get": {
            "name": "get",
            "location": 226,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Compute.DummyMachine.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cpus": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[int]"
                ],
                "ram": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[int]"
                ],
                "existence": [
                    "bool",
                    "str",
                    "float",
                    "List[int]",
                    "int"
                ],
                "metadata": [
                    "None",
                    "str",
                    "bool",
                    "float",
                    "List[int]",
                    "int"
                ],
                "instance_id": [
                    "Text",
                    "str",
                    "int",
                    "bytearray",
                    "List[Dict[str,Any]]",
                    "bytes"
                ]
            }
        },
        "Compute.DummyMachine.init_existence_information": {
            "name": "init_existence_information",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compute.DummyMachine.ram_mb": {
            "name": "ram_mb",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compute.DummyMachine.compute_server_info": {
            "name": "compute_server_info",
            "location": 130,
            "return": [
                "Mapping[str,Any]",
                "Munch"
            ],
            "arguments": {
                "self": [],
                "requested_start_date": [
                    "datetime.datetime",
                    "int",
                    "datetime.date",
                    "str"
                ],
                "script_start": [
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.datetime]",
                    "float"
                ]
            }
        },
        "Compute.DummyMachine.get_details": {
            "name": "get_details",
            "location": 183,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "OS_project_usage_exporter-master/project_usage_exporter.py": {
        "sha256": {
            "name": "sha256",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Dict"
                ]
            }
        },
        "add_project": {
            "name": "add_project",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "id": [
                    "str",
                    "List[int]",
                    "Type",
                    "Type[T]",
                    "static_frame.core.util.NameType"
                ],
                "name": [
                    "int",
                    "str",
                    "Dict[bytes,int]",
                    "Optional[int]",
                    "None"
                ],
                "domain_id": [
                    "int",
                    "str",
                    "Dict[bytes,int]",
                    "Optional[int]",
                    "None"
                ],
                "domain_name": [
                    "int",
                    "str",
                    "Dict[bytes,int]",
                    "Optional[int]",
                    "None"
                ],
                "simple_vm_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "projects": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Dict[bytes, int]"
                ]
            }
        },
        "valid_date": {
            "name": "valid_date",
            "location": 322,
            "return": [
                "str",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "get_dummy_weights": {
            "name": "get_dummy_weights",
            "location": 330,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "file": [
                    "tuple",
                    "int",
                    "IO[Any]",
                    "BinaryIO",
                    "List[str]",
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "convert_verbose": {
            "name": "convert_verbose",
            "location": 338,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "nullable_string": {
            "name": "nullable_string",
            "location": 346,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "val": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[Union[int,...]]",
                    "Union[int,Tuple[int,...]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 352,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "_ExporterBase.update": {
            "name": "update",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenstackExporter.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats_start": [
                    "int",
                    "Optional[List[str]]",
                    "bool",
                    "List[int]"
                ],
                "domains": [
                    "str",
                    "Dict[str,Union[Any,Any,Any,Any]]",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "domain_id": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "simple_vm_project": [
                    "Text",
                    "int",
                    "str",
                    "Dict"
                ],
                "simple_vm_tag": [
                    "str",
                    "None",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "dummy_file": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Set[int]",
                    "Optional[Set[int]]"
                ]
            }
        },
        "OpenstackExporter.update": {
            "name": "update",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenstackExporter.update_weights": {
            "name": "update_weights",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_weights": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "OpenstackExporter.set_metrics": {
            "name": "set_metrics",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenstackExporter.collect_usages": {
            "name": "collect_usages",
            "location": 166,
            "return": [
                "Dict[(OpenstackProject, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenstackExporter.get_instance_weight": {
            "name": "get_instance_weight",
            "location": 253,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "bytes",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "metric_tag": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "metric_amount": [
                    "List[str]",
                    "str",
                    "Optional[bool]"
                ],
                "started_date": [
                    "None",
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "OpenstackExporter.collect_projects": {
            "name": "collect_projects",
            "location": 284,
            "return": [
                "Set[OpenstackProject]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "OS_project_usage_exporter-master/test_os_outputs.py": {
        "main": {
            "name": "main",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "OSOutputTester.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSOutputTester.list_projects": {
            "name": "list_projects",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSOutputTester.get_domain": {
            "name": "get_domain",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OSOutputTester.compute_get": {
            "name": "compute_get",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "Parsenvy-main/docs/source/conf.py": {},
    "Parsenvy-main/parsenvy/parsenvy.py": {
        "default_if_none": {
            "name": "default_if_none",
            "location": 19,
            "return": [
                "bool",
                "Union[bool, Iterable[str]]",
                "Callable",
                "dict",
                "Union[int, float]"
            ],
            "arguments": {
                "func": [
                    "Callable[([builtins.str, Any], Any)]"
                ]
            }
        },
        "bool": {
            "name": "bool",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "env_var": [
                    "str",
                    "dict"
                ],
                "default": [
                    "None"
                ]
            }
        },
        "int": {
            "name": "int",
            "location": 82,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "env_var": [
                    "str",
                    "int",
                    "bool"
                ],
                "default": [
                    "str",
                    "None",
                    "bool",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "float": {
            "name": "float",
            "location": 107,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "env_var": [
                    "Type",
                    "bool",
                    "typing.Type",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "default": [
                    "str",
                    "None",
                    "bool",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "list": {
            "name": "list",
            "location": 132,
            "return": [
                "None",
                "List[str]",
                "str",
                "list[str]",
                "Tuple[int, int]",
                "Sequence",
                "Tuple[bool, float]",
                "bool",
                "dict"
            ],
            "arguments": {
                "env_var": [
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "None"
                ]
            }
        },
        "tuple": {
            "name": "tuple",
            "location": 153,
            "return": [
                "bool",
                "None",
                "int",
                "str",
                "Dict[str, Any]",
                "typing.Type"
            ],
            "arguments": {
                "env_var": [
                    "str",
                    "int",
                    "Sequence[Any]"
                ],
                "default": [
                    "str",
                    "None",
                    "bool",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "set": {
            "name": "set",
            "location": 175,
            "return": [
                "str",
                "List[str]",
                "None",
                "bool",
                "list[str]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "env_var": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "T",
                    "Callable",
                    "Callable[[T], Optional[T]]"
                ],
                "default": [
                    "bool",
                    "None",
                    "Optional[bool]",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "str": {
            "name": "str",
            "location": 197,
            "return": [
                "Callable[[KT], VT]",
                "None",
                "Sequence",
                "str",
                "Optional[str]",
                "bool",
                "list[]",
                "list[str]",
                "typing.Type"
            ],
            "arguments": {
                "env_var": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]",
                    "Type",
                    "typing.Type"
                ],
                "default": [
                    "bool",
                    "None",
                    "str",
                    "list",
                    "list[]",
                    "List[str]",
                    "Type",
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "default_if_none.wrapper_default_if_none": {
            "name": "wrapper_default_if_none",
            "location": 32,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "int"
            ],
            "arguments": {}
        }
    },
    "Parsenvy-main/parsenvy/__init__.py": {},
    "Parsenvy-main/tests/test_bool.py": {
        "test_bool_true_word": {
            "name": "test_bool_true_word",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_bool_true_number": {
            "name": "test_bool_true_number",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_bool_false_word": {
            "name": "test_bool_false_word",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, float]"
                ]
            }
        },
        "test_bool_false_number": {
            "name": "test_bool_false_number",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, float]"
                ]
            }
        },
        "test_bool_neither": {
            "name": "test_bool_neither",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "test_bool_numbers": {
            "name": "test_bool_numbers",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "test_bool_empty": {
            "name": "test_bool_empty",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "int"
                ]
            }
        }
    },
    "Parsenvy-main/tests/test_default_if_none.py": {
        "func": {
            "name": "func",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_default_if_none_arg": {
            "name": "test_default_if_none_arg",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "int",
                    "float",
                    "bool"
                ],
                "monkeypatch": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_default_if_none_default": {
            "name": "test_default_if_none_default",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ],
                "monkeypatch": [
                    "tuple",
                    "int",
                    "str"
                ]
            }
        },
        "test_default_if_none_neither": {
            "name": "test_default_if_none_neither",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "int",
                    "float",
                    "bool"
                ],
                "monkeypatch": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "func.inner_func": {
            "name": "inner_func",
            "location": 10,
            "return": [
                "float",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "arg": [
                    "bool",
                    "str",
                    "list",
                    "T",
                    "Optional",
                    "int"
                ],
                "default": [
                    "None",
                    "bool",
                    "str",
                    "list",
                    "T",
                    "Optional",
                    "int"
                ]
            }
        }
    },
    "Parsenvy-main/tests/test_float.py": {
        "test_float_positive_integer": {
            "name": "test_float_positive_integer",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_float_positive_decimal": {
            "name": "test_float_positive_decimal",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_float_negative_integer": {
            "name": "test_float_negative_integer",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_float_negative_decimal": {
            "name": "test_float_negative_decimal",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_float_zero": {
            "name": "test_float_zero",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_float_negative_zero": {
            "name": "test_float_negative_zero",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_float_invalid": {
            "name": "test_float_invalid",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_float_empty": {
            "name": "test_float_empty",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Parsenvy-main/tests/test_int.py": {
        "test_int_positive": {
            "name": "test_int_positive",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_int_negative": {
            "name": "test_int_negative",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_int_zero": {
            "name": "test_int_zero",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_int_negative_zero": {
            "name": "test_int_negative_zero",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_int_invalid": {
            "name": "test_int_invalid",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_int_empty": {
            "name": "test_int_empty",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "Parsenvy-main/tests/test_list.py": {
        "test_list_several": {
            "name": "test_list_several",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_list_one": {
            "name": "test_list_one",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_list_one_comma": {
            "name": "test_list_one_comma",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_list_multiple_commas": {
            "name": "test_list_multiple_commas",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_list_empty": {
            "name": "test_list_empty",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "Parsenvy-main/tests/test_set.py": {
        "test_set_several": {
            "name": "test_set_several",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_set_one": {
            "name": "test_set_one",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_set_one_comma": {
            "name": "test_set_one_comma",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_set_multiple_commas": {
            "name": "test_set_multiple_commas",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_set_empty": {
            "name": "test_set_empty",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "Parsenvy-main/tests/test_str.py": {
        "test_str_valid": {
            "name": "test_str_valid",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "test_str_empty": {
            "name": "test_str_empty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, float]",
                    "str"
                ]
            }
        }
    },
    "Parsenvy-main/tests/test_tuple.py": {
        "test_tuple_several": {
            "name": "test_tuple_several",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_tuple_one": {
            "name": "test_tuple_one",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_tuple_one_comma": {
            "name": "test_tuple_one_comma",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_tuple_multiple_commas": {
            "name": "test_tuple_multiple_commas",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        },
        "test_tuple_empty": {
            "name": "test_tuple_empty",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "float"
                ]
            }
        }
    }
}
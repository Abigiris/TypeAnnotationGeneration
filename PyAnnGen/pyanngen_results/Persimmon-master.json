{
    "Persimmon-master/setup.py": {},
    "Persimmon-master/persimmon/__init__.py": {},
    "Persimmon-master/persimmon/__main__.py": {},
    "Persimmon-master/persimmon/backend/backend.py": {
        "Backend.exec_graph": {
            "name": "exec_graph",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ir": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Backend._exec_graph_parallel": {
            "name": "_exec_graph_parallel",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend._exec_block": {
            "name": "_exec_block",
            "location": 40,
            "return": [
                "Mapping",
                "Tuple[Union[str,None,frozenset,int]]"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "str",
                    "Exception"
                ],
                "unseen": [
                    "str",
                    "Optional[str]",
                    "FrozenSet[int]",
                    "None",
                    "frozenset"
                ],
                "seen": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/backend/__init__.py": {},
    "Persimmon-master/persimmon/view/blackboard.py": {
        "BlackBoard.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackBoard.execute_graph": {
            "name": "execute_graph",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackBoard.get_relations": {
            "name": "get_relations",
            "location": 54,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackBoard.to_ir": {
            "name": "to_ir",
            "location": 67,
            "return": [
                "IR",
                "Iterable[int]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackBoard.on_block_executed": {
            "name": "on_block_executed",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_hash": []
            }
        },
        "BlackBoard.on_graph_executed": {
            "name": "on_graph_executed",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackBoard.on_touch_down": {
            "name": "on_touch_down",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "int"
                ]
            }
        },
        "BlackBoard.on_touch_move": {
            "name": "on_touch_move",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "str",
                    "kivy.inpuMotionEvent",
                    "Tuple[Union[str,...]]",
                    "Optional[Tuple[str,...]]",
                    "None"
                ]
            }
        },
        "BlackBoard.on_touch_up": {
            "name": "on_touch_up",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "dict",
                    "int"
                ]
            }
        },
        "BlackBoard.in_block": {
            "name": "in_block",
            "location": 177,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Blocks.add_widget": {
            "name": "add_widget",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "kivy.uix.widgeWidget",
                    "logging.LogRecord"
                ],
                "index": [
                    "int",
                    "str",
                    "bool",
                    "Tuple"
                ],
                "canvas": [
                    "str",
                    "None",
                    "int",
                    "Tuple",
                    "bool"
                ]
            }
        },
        "Blocks.remove_widget": {
            "name": "remove_widget",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "float",
                    "kivy.uix.widgeWidget",
                    "str",
                    "int"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/view.py": {
        "ViewApp.build": {
            "name": "build",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backdrop.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backdrop.on_graph_executed": {
            "name": "on_graph_executed",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backdrop.remove_hint": {
            "name": "remove_hint",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backdrop.add_hint": {
            "name": "add_hint",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/__init__.py": {},
    "Persimmon-master/persimmon/view/blocks/block.py": {
        "Block.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.tainted": {
            "name": "tainted",
            "location": 74,
            "return": [
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Block.is_orphan": {
            "name": "is_orphan",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.in_pin": {
            "name": "in_pin",
            "location": 87,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Block.function": {
            "name": "function",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.on_touch_down": {
            "name": "on_touch_down",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Block.on_touch_up": {
            "name": "on_touch_up",
            "location": 107,
            "return": [
                "str",
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "Optional[str]",
                    "Dict[str,Any]",
                    "str",
                    "None"
                ]
            }
        },
        "Block.kindle": {
            "name": "kindle",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.unkindle": {
            "name": "unkindle",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block._bind_border": {
            "name": "_bind_border",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "List[str]",
                    "Callable[[Any],T]",
                    "None",
                    "Callable[Any,T]",
                    "List[Tuple]",
                    "List[tuple]"
                ],
                "new_pos": [
                    "Union[bool, Iterable[str]]",
                    "eth.abc.BlockAPI",
                    "core.DEPENDENCIES_TYPE",
                    "core.DependencyContainer",
                    "int"
                ]
            }
        },
        "Block._bind_pin": {
            "name": "_bind_pin",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "List[int]"
                ],
                "new_pos": [
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "int"
                ],
                "pin": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "List[int]"
                ],
                "i": [
                    "int",
                    "Sequence[int]",
                    "List[int]",
                    "float",
                    "Optional[List[int]]",
                    "None"
                ],
                "output": [
                    "bool",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]",
                    "int"
                ]
            }
        },
        "Block.on_focus": {
            "name": "on_focus",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "focus": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Block.keyboard_on_key_down": {
            "name": "keyboard_on_key_down",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "int",
                    "Tuple[Union[int,str]]",
                    "Tuple[int,str]",
                    "bool"
                ],
                "keycode": [
                    "str",
                    "int",
                    "Tuple[Union[int,str]]",
                    "Tuple[int,str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "int",
                    "Tuple[Union[int,str]]",
                    "Tuple[int,str]",
                    "bool"
                ],
                "modifiers": [
                    "str",
                    "int",
                    "Tuple[Union[int,str]]",
                    "Tuple[int,str]",
                    "bool"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/crossvalidationblock.py": {
        "CrossValidationBlock.function": {
            "name": "function",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/csvinblock.py": {
        "CSVInBlock.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVInBlock.function": {
            "name": "function",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVInBlock.on_file_chosen": {
            "name": "on_file_chosen",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "List",
                    "Optional[Union[float,int]]",
                    "float",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/csvoutblock.py": {
        "CSVOutBlock.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVOutBlock.function": {
            "name": "function",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVOutBlock.on_path": {
            "name": "on_path",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "List",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/dictblock.py": {
        "DictBlock.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictBlock.tainted": {
            "name": "tainted",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictBlock.function": {
            "name": "function",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/fitblock.py": {
        "FitBlock.function": {
            "name": "function",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/gridsearchblock.py": {
        "GridSearchBlock.function": {
            "name": "function",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/knnblock.py": {
        "KNNBlock.function": {
            "name": "function",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/predictblock.py": {
        "PredictBlock.function": {
            "name": "function",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/printblock.py": {
        "PrintBlock.function": {
            "name": "function",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/randomforestblock.py": {
        "RandomForestBlock.function": {
            "name": "function",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/sgdblock.py": {
        "SGDBlock.function": {
            "name": "function",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/smart_bubble.py": {
        "ReTest.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartBubble.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backdrop": [
                    "int",
                    "float",
                    "Union[int,float]"
                ],
                "pin": [
                    "str",
                    "None"
                ]
            }
        },
        "SmartBubble.refocus": {
            "name": "refocus",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SmartBubble.on_touch_down": {
            "name": "on_touch_down",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "int"
                ]
            }
        },
        "SmartBubble.dismiss": {
            "name": "dismiss",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartBubble.search": {
            "name": "search",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "int",
                    "Union[bool,str]"
                ]
            }
        },
        "SmartBubble._is_suitable": {
            "name": "_is_suitable",
            "location": 96,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Dict[str,object]",
                    "List[Block]",
                    "List[B]"
                ]
            }
        },
        "Row.spawn_block": {
            "name": "spawn_block",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Row._suitable_pin": {
            "name": "_suitable_pin",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pins": [
                    "bool",
                    "Sequence[cirq.Qid]",
                    "Optional[int]",
                    "None",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/svmblock.py": {
        "SVMBlock.function": {
            "name": "function",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/tenfoldblock.py": {
        "TenFoldBlock.function": {
            "name": "function",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/tssplitblock.py": {
        "TSSplitBlock.function": {
            "name": "function",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/blocks/__init__.py": {},
    "Persimmon-master/persimmon/view/pins/circularbutton.py": {
        "CircularButton.collide_point": {
            "name": "collide_point",
            "location": 13,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "bytes",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "Union[int,float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int,float]"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/pins/inpin.py": {
        "InputPin.on_touch_down": {
            "name": "on_touch_down",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "int"
                ]
            }
        },
        "InputPin.on_touch_up": {
            "name": "on_touch_up",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "str",
                    "int"
                ]
            }
        },
        "InputPin.on_connection_delete": {
            "name": "on_connection_delete",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "List",
                    "denite.util.UserContext",
                    "bool",
                    "defx.util.UserContext",
                    "sqlalchemy.engine.base.Connection"
                ]
            }
        },
        "InputPin.connect_pin": {
            "name": "connect_pin",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "dict"
                ]
            }
        },
        "InputPin.typesafe": {
            "name": "typesafe",
            "location": 64,
            "return": [
                "bool",
                "Optional[bool]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InputPin._circle_pin": {
            "name": "_circle_pin",
            "location": 67,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputPin._bind_circle": {
            "name": "_bind_circle",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Iterable[float]",
                    "Callable[[str,object],None]",
                    "bool",
                    "None",
                    "Callable[str,object,None]"
                ],
                "value": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Iterable[float]",
                    "Callable[[str,object],None]",
                    "bool",
                    "None",
                    "Callable[str,object,None]"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/pins/outpin.py": {
        "OutputPin.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPin.on_touch_down": {
            "name": "on_touch_down",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "touch": []
            }
        },
        "OutputPin.on_touch_up": {
            "name": "on_touch_up",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "int",
                    "Union[int,float]",
                    "float"
                ]
            }
        },
        "OutputPin.on_connection_delete": {
            "name": "on_connection_delete",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "bool"
                ]
            }
        },
        "OutputPin.connect_pin": {
            "name": "connect_pin",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "Color"
                ]
            }
        },
        "OutputPin._circle_pin": {
            "name": "_circle_pin",
            "location": 68,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPin._bind_circle": {
            "name": "_bind_circle",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Iterable[float]",
                    "Callable[[str,object],None]",
                    "bool",
                    "None",
                    "Callable[str,object,None]"
                ],
                "value": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Iterable[float]",
                    "Callable[[str,object],None]",
                    "bool",
                    "None",
                    "Callable[str,object,None]"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/pins/pin.py": {
        "Pin.on_touch_down": {
            "name": "on_touch_down",
            "location": 17,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Pin.on_touch_up": {
            "name": "on_touch_up",
            "location": 21,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "touch": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Pin.on_connection_delete": {
            "name": "on_connection_delete",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "List",
                    "denite.util.UserContext",
                    "bool",
                    "defx.util.UserContext",
                    "sqlalchemy.engine.base.Connection"
                ]
            }
        },
        "Pin.connect_pin": {
            "name": "connect_pin",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Pin.typesafe": {
            "name": "typesafe",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet",
                    "Set[VT]",
                    "str",
                    "Set[T]",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Pin.on_type_": {
            "name": "on_type_",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "Dict",
                    "Union[Set[str],List[str]]",
                    "Set[str]",
                    "bool",
                    "List[str]"
                ],
                "value": [
                    "float",
                    "str",
                    "Type",
                    "bool"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/pins/__init__.py": {},
    "Persimmon-master/persimmon/view/util/connection.py": {
        "Connection.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.finish_connection": {
            "name": "finish_connection",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin": []
            }
        },
        "Connection.on_touch_down": {
            "name": "on_touch_down",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "touch": []
            }
        },
        "Connection.follow_cursor": {
            "name": "follow_cursor",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newpos": [],
                "blackboard": []
            }
        },
        "Connection.delete_connection": {
            "name": "delete_connection",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.pulse": {
            "name": "pulse",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.stop_pulse": {
            "name": "stop_pulse",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.remove_info": {
            "name": "remove_info",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection._in_pin": {
            "name": "_in_pin",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "blackboard": [],
                "pos": []
            }
        },
        "Connection._unbind_pin": {
            "name": "_unbind_pin",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin": []
            }
        },
        "Connection._bind_pin": {
            "name": "_bind_pin",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin": []
            }
        },
        "Connection._line_bind": {
            "name": "_line_bind",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin": [],
                "new_pos": []
            }
        },
        "Connection._change_width": {
            "name": "_change_width",
            "location": 201,
            "return": [
                "typing.Generator[]",
                "typing.Generator[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection._width_gen": {
            "name": "_width_gen",
            "location": 224,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection._warn": {
            "name": "_warn",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection._unwarn": {
            "name": "_unwarn",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection._rebezier": {
            "name": "_rebezier",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection._search_window": {
            "name": "_search_window",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Persimmon-master/persimmon/view/util/filedialog.py": {
        "FileDialog.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "filters": [
                    "str",
                    "None",
                    "int",
                    "Dict",
                    "Optional[Dict]"
                ]
            }
        },
        "FileDialog.toggle_load_button": {
            "name": "toggle_load_button",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selection": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "FileDialog.changed_dir": {
            "name": "changed_dir",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_chooser": [
                    "str"
                ],
                "entry": [
                    "IO",
                    "IO[str]",
                    "Sequence[str]",
                    "List[str]",
                    "IO[Any]"
                ],
                "_": [
                    "IO",
                    "IO[str]",
                    "Sequence[str]",
                    "List[str]",
                    "IO[Any]"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/util/notification.py": {},
    "Persimmon-master/persimmon/view/util/play_button.py": {
        "PlayButton.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayButton.on_press": {
            "name": "on_press",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayButton.start": {
            "name": "start",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayButton.ready": {
            "name": "ready",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayButton.on_angle": {
            "name": "on_angle",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Iterable[float]",
                    "Callable[[str,object],None]",
                    "bool",
                    "None",
                    "Callable[str,object,None]"
                ],
                "values": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Iterable[float]",
                    "Callable[[str,object],None]",
                    "bool",
                    "None",
                    "Callable[str,object,None]"
                ]
            }
        }
    },
    "Persimmon-master/persimmon/view/util/types.py": {},
    "Persimmon-master/persimmon/view/util/__init__.py": {}
}
{
    "Promenade-master/conftest.py": {
        "default_user": {
            "name": "default_user",
            "location": 9,
            "return": [
                "str",
                "lms.lmsdb.models.User",
                "dict[str, str]",
                "dict[str, typing.Union[int,str]]",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Dossier",
                "models.Course",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {}
        }
    },
    "Promenade-master/manage.py": {},
    "Promenade-master/merge_production_dotenvs_in_dotenv.py": {
        "merge": {
            "name": "merge",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_path": [
                    "str"
                ],
                "merged_file_paths": [
                    "Sequence[str]"
                ],
                "append_linesep": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "int",
                    "str"
                ],
                "merged_file_count": [
                    "int",
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "append_linesep": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "Promenade-master/__init__.py": {},
    "Promenade-master/accounts/admin.py": {},
    "Promenade-master/accounts/apps.py": {},
    "Promenade-master/accounts/models.py": {
        "AccountManager.get_queryset": {
            "name": "get_queryset",
            "location": 13,
            "return": [
                "AccountQueryset"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Promenade-master/accounts/serializers.py": {},
    "Promenade-master/accounts/urls.py": {},
    "Promenade-master/accounts/views.py": {},
    "Promenade-master/accounts/__init__.py": {},
    "Promenade-master/accounts/migrations/0001_initial.py": {},
    "Promenade-master/accounts/migrations/__init__.py": {},
    "Promenade-master/accounts/tests/test_views.py": {
        "TestBotViewSet.create_instance": {
            "name": "create_instance",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Dict[str, Tuple[Any, Any]]",
                "int",
                "tracim.models.auth.User"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Promenade-master/accounts/tests/__init__.py": {},
    "Promenade-master/bots/admin.py": {},
    "Promenade-master/bots/apps.py": {},
    "Promenade-master/bots/behaviors.py": {
        "PasswordEncryptable.clean": {
            "name": "clean",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Promenade-master/bots/messages.py": {},
    "Promenade-master/bots/models.py": {
        "BotManager.get_queryset": {
            "name": "get_queryset",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotManager.verified": {
            "name": "verified",
            "location": 19,
            "return": [
                "bool",
                "Dict[int, dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Promenade-master/bots/selenium.py": {
        "get_session": {
            "name": "get_session",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "Promenade-master/bots/serializers.py": {},
    "Promenade-master/bots/tasks.py": {
        "verify_bot": {
            "name": "verify_bot",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "username": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "zam_repondeur.models.Amendement"
                ]
            }
        }
    },
    "Promenade-master/bots/urls.py": {},
    "Promenade-master/bots/views.py": {
        "BotViewSet.verify": {
            "name": "verify",
            "location": 18,
            "return": [
                "Response",
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "rest_framework.requesRequest"
                ],
                "pk": [
                    "rest_framework.requesRequest",
                    "bool",
                    "None"
                ]
            }
        },
        "BotViewSet.follow": {
            "name": "follow",
            "location": 24,
            "return": [
                "Response",
                "Optional[str]",
                "List[str]",
                "Tuple[str, bool]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "rest_framework.requesRequest"
                ],
                "pk": [
                    "bool",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "Promenade-master/bots/__init__.py": {},
    "Promenade-master/bots/migrations/0001_initial.py": {},
    "Promenade-master/bots/migrations/0002_bot_user.py": {},
    "Promenade-master/bots/migrations/0003_bot_accounts.py": {},
    "Promenade-master/bots/migrations/__init__.py": {},
    "Promenade-master/bots/tests/behavior_tests.py": {
        "IsVerifiableTests.test_Verify_GivenCorrectUsernameAndPassword_isVerifiedTurnsTrue": {
            "name": "test_Verify_GivenCorrectUsernameAndPassword_isVerifiedTurnsTrue",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "default_user": [
                    "str",
                    "bool"
                ],
                "client": [
                    "List[str]"
                ]
            }
        }
    },
    "Promenade-master/bots/tests/test_views.py": {
        "TestBotViewSet.create_instance": {
            "name": "create_instance",
            "location": 18,
            "return": [
                "str",
                "int",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotViewSet.create_instance_with_user": {
            "name": "create_instance_with_user",
            "location": 21,
            "return": [
                "int",
                "Mapping",
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBotViewSet.test_Post_GivenUsernameAndPassword_aBotInstanceIsCreated": {
            "name": "test_Post_GivenUsernameAndPassword_aBotInstanceIsCreated",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "default_user": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "client": [
                    "django.tesClient"
                ]
            }
        },
        "TestBotViewSet.test_Post_GivenABotAndAnAccount_BotWillFollowAccount": {
            "name": "test_Post_GivenABotAndAnAccount_BotWillFollowAccount",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "default_user": [
                    "str",
                    "telegram.Bot",
                    "deeplearning.ml4pl.models.log_database.Database.SessionType"
                ],
                "client": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "raiden.accounts.AccountManager"
                ]
            }
        }
    },
    "Promenade-master/bots/tests/__init__.py": {},
    "Promenade-master/common/apps.py": {},
    "Promenade-master/common/behaviors.py": {
        "Permalinkable.save": {
            "name": "save",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Promenade-master/common/__init__.py": {},
    "Promenade-master/common/migrations/__init__.py": {},
    "Promenade-master/common/tests/behavior_tests.py": {
        "BehaviorTestCaseMixin.get_model": {
            "name": "get_model",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BehaviorTestCaseMixin.create_instance": {
            "name": "create_instance",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampableTests.test_created_date": {
            "name": "test_created_date",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimestampableTests.test_modified_date": {
            "name": "test_modified_date",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermalinkableTests.test_givenAnObjectWithUsername_theSlugIsTheSlugifiedUsername": {
            "name": "test_givenAnObjectWithUsername_theSlugIsTheSlugifiedUsername",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "default_user": [
                    "list",
                    "list[]",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable[[str, List], None]",
                    "typing.Callable[str,List, None]"
                ],
                "client": [
                    "list",
                    "list[]",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Callable[[str, List], None]",
                    "typing.Callable[str,List, None]"
                ]
            }
        }
    },
    "Promenade-master/common/tests/__init__.py": {},
    "Promenade-master/config/urls.py": {},
    "Promenade-master/config/wsgi.py": {},
    "Promenade-master/config/__init__.py": {},
    "Promenade-master/config/settings/base.py": {},
    "Promenade-master/config/settings/local.py": {},
    "Promenade-master/config/settings/production.py": {},
    "Promenade-master/config/settings/test.py": {},
    "Promenade-master/config/settings/__init__.py": {},
    "Promenade-master/docs/conf.py": {},
    "Promenade-master/instarest/__init__.py": {},
    "Promenade-master/instarest/taskapp/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryAppConfig.ready": {
            "name": "ready",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Promenade-master/instarest/taskapp/__init__.py": {},
    "Promenade-master/users/admin.py": {},
    "Promenade-master/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Promenade-master/users/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 13,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 18,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "Promenade-master/users/mixins.py": {
        "HasUserMixin.assign_user": {
            "name": "assign_user",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Promenade-master/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Promenade-master/users/serializers.py": {},
    "Promenade-master/users/urls.py": {},
    "Promenade-master/users/views.py": {},
    "Promenade-master/users/__init__.py": {},
    "Promenade-master/users/migrations/0001_initial.py": {},
    "Promenade-master/users/migrations/__init__.py": {},
    "Promenade-master/users/tests/behavior_tests.py": {
        "UserBehaviorTestCaseMixin.create_instance_with_user": {
            "name": "create_instance_with_user",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasUserMixinTests.test_has_user": {
            "name": "test_has_user",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasUserMixinTests.test_assign_user": {
            "name": "test_assign_user",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasUserMixinTests.test_assign_user_fails_if_user_is_already_assigned": {
            "name": "test_assign_user_fails_if_user_is_already_assigned",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Promenade-master/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "Promenade-master/users/tests/test_views.py": {
        "TestTokenCreateView.test_post_should_login_user": {
            "name": "test_post_should_login_user",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": []
            }
        },
        "TestUserViewSet.test_authenticatedUser_shouldGetAListOfUsers": {
            "name": "test_authenticatedUser_shouldGetAListOfUsers",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ],
                "default_user": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "client": [
                    "Optional[float]",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "TestUserViewSet.test_unauthenticatedUser_shouldGetAnError": {
            "name": "test_unauthenticatedUser_shouldGetAnError",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": []
            }
        }
    },
    "Promenade-master/users/tests/__init__.py": {}
}
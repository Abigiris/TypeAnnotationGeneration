{
    "PyAdventOfCode-master/2017/01/day_01.py": {
        "part_1": {
            "name": "part_1",
            "location": 6,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "num": [
                    "int",
                    "float",
                    "Union[int,str]",
                    "str"
                ]
            }
        },
        "part_2": {
            "name": "part_2",
            "location": 18,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "num": [
                    "int",
                    "float",
                    "Union[int,str]",
                    "str"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2017/01/solve.py": {},
    "PyAdventOfCode-master/2017/02/day_02.py": {
        "read_input": {
            "name": "read_input",
            "location": 8,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "part_1": {
            "name": "part_1",
            "location": 16,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Iterable[int]",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "part_2": {
            "name": "part_2",
            "location": 24,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Iterable[int]",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2017/02/solve.py": {},
    "PyAdventOfCode-master/2017/03/day_03.py": {
        "get_squares": {
            "name": "get_squares",
            "location": 8,
            "return": [
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "target": [
                    "bool",
                    "str"
                ]
            }
        },
        "generate_row": {
            "name": "generate_row",
            "location": 17,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Iterable[str]",
                "Set[str]"
            ],
            "arguments": {
                "max_num": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "generate_square_rows": {
            "name": "generate_square_rows",
            "location": 28,
            "return": [
                "List",
                "List[int]",
                "List[List[int]]",
                "bool",
                "str",
                "Callable[[str,str],float]",
                "List[float]"
            ],
            "arguments": {
                "max_num": [
                    "float",
                    "Optional[Callable[[Type,Dict],Any]]",
                    "Callable[Type,Dict,Any]",
                    "None"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2018/01/day_01.py": {
        "read_input": {
            "name": "read_input",
            "location": 8,
            "return": [
                "List[int]",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "part_1": {
            "name": "part_1",
            "location": 15,
            "return": [
                "bool",
                "bytes",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Set[str]]",
                    "List[int]",
                    "Dict[str,set[str]]",
                    "Dict",
                    "bytes",
                    "Union[bytes,bytearray,memoryview]",
                    "bytearray"
                ]
            }
        },
        "part_2": {
            "name": "part_2",
            "location": 19,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Iterable[int]",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2018/01/test_day_01.py": {
        "test_part_1": {
            "name": "test_part_1",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_2": {
            "name": "test_part_2",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "PyAdventOfCode-master/2018/02/day_02.py": {
        "read_input": {
            "name": "read_input",
            "location": 10,
            "return": [
                "List",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "part_1": {
            "name": "part_1",
            "location": 16,
            "return": [
                "int",
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Iterable[int]",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "part_2": {
            "name": "part_2",
            "location": 31,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Iterable[int]",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2018/02/test_day_02.py": {
        "test_part_1": {
            "name": "test_part_1",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_2": {
            "name": "test_part_2",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "PyAdventOfCode-master/2018/03/day_03.py": {
        "read_input": {
            "name": "read_input",
            "location": 9,
            "return": [
                "List[Claim]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "tally_squares": {
            "name": "tally_squares",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "claims": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "part_1": {
            "name": "part_1",
            "location": 30,
            "return": [
                "int",
                "Set[str]",
                "List[float]",
                "List[str]",
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "squares": [
                    "Dict[tuple[Union[int,int]],int]",
                    "Dict[Tuple[int,int],int]",
                    "float",
                    "str",
                    "int",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "part_2": {
            "name": "part_2",
            "location": 34,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "claims": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "bool"
                ],
                "squares": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2018/03/test_day_03.py": {
        "test_read_input": {
            "name": "test_read_input",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tally_squares": {
            "name": "test_tally_squares",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_1": {
            "name": "test_part_1",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_2": {
            "name": "test_part_2",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "PyAdventOfCode-master/2018/04/day_04.py": {
        "create_minute_dict": {
            "name": "create_minute_dict",
            "location": 13,
            "return": [
                "Dict[,int]",
                "List[str]",
                "Set[str]",
                "Optional[dict]"
            ],
            "arguments": {}
        },
        "read_input": {
            "name": "read_input",
            "location": 42,
            "return": [
                "str",
                "datetime.date",
                "Optional[str]",
                "int",
                "Sequence[str]",
                "datetime.datetime",
                "float"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "track_guards": {
            "name": "track_guards",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "date_entries": [
                    "Dict[str,dict[int,str]]",
                    "Dict",
                    "Dict[str,Dict[int,str]]",
                    "Dict[str,Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "part_1": {
            "name": "part_1",
            "location": 121,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "guards": [
                    "str",
                    "int"
                ]
            }
        },
        "part_2": {
            "name": "part_2",
            "location": 139,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "guards": [
                    "str",
                    "int"
                ]
            }
        },
        "Guard.most_asleep_minute": {
            "name": "most_asleep_minute",
            "location": 35,
            "return": [
                "List[bytes]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Guard.sum_asleep_minutes": {
            "name": "sum_asleep_minutes",
            "location": 38,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str,Any]",
                "Dict",
                "Callable[[Mapping],T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyAdventOfCode-master/2018/04/test_day_04.py": {
        "test_read_input": {
            "name": "test_read_input",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_track_guards": {
            "name": "test_track_guards",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_1": {
            "name": "test_part_1",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_2": {
            "name": "test_part_2",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "PyAdventOfCode-master/2018/05/day_05.py": {
        "part_1": {
            "name": "part_1",
            "location": 25,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "polymer": [
                    "str",
                    "Dict[str,str]",
                    "int",
                    "bool"
                ]
            }
        },
        "part_2": {
            "name": "part_2",
            "location": 68,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "polymer": [
                    "str",
                    "Set"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2018/05/test_day_05.py": {
        "test_part_1": {
            "name": "test_part_1",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_2": {
            "name": "test_part_2",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "PyAdventOfCode-master/2018/06/day_06.py": {
        "read_input": {
            "name": "read_input",
            "location": 43,
            "return": [
                "List[Point]",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "define_canvas": {
            "name": "define_canvas",
            "location": 53,
            "return": [
                "Set",
                "List[str]",
                "Dict[str,Any]",
                "str",
                "List"
            ],
            "arguments": {
                "points": [
                    "str",
                    "List[int]",
                    "int",
                    "float"
                ]
            }
        },
        "part_1": {
            "name": "part_1",
            "location": 67,
            "return": [
                "str",
                "bool",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "points": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "part_2": {
            "name": "part_2",
            "location": 82,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "points": [
                    "bytes",
                    "bytearray",
                    "Callable"
                ],
                "limit": [
                    "int",
                    "str",
                    "TextIO"
                ]
            }
        },
        "Point.get_distance": {
            "name": "get_distance",
            "location": 19,
            "return": [
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "Set[T]",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "Point.find_nearest_point": {
            "name": "find_nearest_point",
            "location": 25,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "List[str]",
                    "List[object]",
                    "str",
                    "bool",
                    "List",
                    "Sized",
                    "Optional[List]"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2018/06/test_day_06.py": {
        "test_read_input": {
            "name": "test_read_input",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_1": {
            "name": "test_part_1",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_part_2": {
            "name": "test_part_2",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "PyAdventOfCode-master/2018/07/day_07.py": {
        "Challenge.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Challenge.read_input": {
            "name": "read_input",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "Challenge.add_node": {
            "name": "add_node",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Callable"
                ],
                "second": [
                    "Callable"
                ]
            }
        },
        "Challenge.get_depth": {
            "name": "get_depth",
            "location": 47,
            "return": [
                "Dict[,bool]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Challenge.part_1": {
            "name": "part_1",
            "location": 59,
            "return": [
                "Optional[bool]",
                "List[Union[list[int],int,dict[str,Any]]]",
                "bool",
                "List[str]",
                "List[Union[str,int,dict[str,Any]]]",
                "List[int]",
                "str",
                "List[dict[str,Any]]",
                "Optional[Dict[str,str]]",
                "List[list[int]]",
                "Callable[[Optional,Optional,str],None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Challenge.part_2": {
            "name": "part_2",
            "location": 75,
            "return": [
                "int",
                "str",
                "Tuple[Union[int,str]]",
                "List[int]",
                "Tuple[str]",
                "bool",
                "Tuple[Union[int,...]]"
            ],
            "arguments": {
                "self": [],
                "n_workers": [
                    "int",
                    "List[int]"
                ],
                "delay": [
                    "int",
                    "list",
                    "List[float]"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2018/07/test_day_07.py": {
        "steps": {
            "name": "steps",
            "location": 7,
            "return": [
                "Dict[Text,set[Text]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "example": {
            "name": "example",
            "location": 13,
            "return": [
                "Challenge",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_read_input": {
            "name": "test_read_input",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "example": [
                    "str",
                    "float"
                ],
                "steps": [
                    "str",
                    "float"
                ]
            }
        },
        "test_part_1": {
            "name": "test_part_1",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "example": [
                    "Type",
                    "str"
                ]
            }
        },
        "test_part_2": {
            "name": "test_part_2",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "example": [
                    "Type",
                    "str"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2018/08/day_08.py": {
        "read_input": {
            "name": "read_input",
            "location": 22,
            "return": [
                "Tuple",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "construct_tree": {
            "name": "construct_tree",
            "location": 28,
            "return": [
                "str",
                "Tree"
            ],
            "arguments": {
                "data": []
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[int]",
                    "int",
                    "Union[int,Iterable[int]]",
                    "Sequence"
                ],
                "address": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "slice"
                ],
                "parent": [
                    "bool",
                    "None",
                    "Match",
                    "List[str]",
                    "List[int]",
                    "List[Tuple[bytes,bytes]]",
                    "int",
                    "List[tuple[Union[bytes,bytes]]]"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2018/08/test_day_08.py": {},
    "PyAdventOfCode-master/2019/01/day01.py": {
        "read_input": {
            "name": "read_input",
            "location": 25,
            "return": [
                "List[int]",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str,Any]]",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "find_fuel_req": {
            "name": "find_fuel_req",
            "location": 35,
            "return": [
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "mass": [
                    "int",
                    "Set",
                    "str"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 40,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "mass_list": [
                    "List",
                    "Set[Type]",
                    "int",
                    "Callable",
                    "Match",
                    "bool"
                ]
            }
        },
        "find_total_fuel_req": {
            "name": "find_total_fuel_req",
            "location": 44,
            "return": [
                "int",
                "Set",
                "str"
            ],
            "arguments": {
                "mass": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 54,
            "return": [
                "bool",
                "float",
                "int",
                "List"
            ],
            "arguments": {
                "mass_list": [
                    "List",
                    "Set[Type]",
                    "int",
                    "Callable",
                    "Match",
                    "bool"
                ]
            }
        }
    },
    "PyAdventOfCode-master/2019/01/test_day01.py": {
        "test_find_fuel_req": {
            "name": "test_find_fuel_req",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_total_fuel_req": {
            "name": "test_find_total_fuel_req",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
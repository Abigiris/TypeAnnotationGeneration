{
    "Pycord-master/setup.py": {},
    "Pycord-master/pycord/__init__.py": {
        "WebSocketEvent.parse": {
            "name": "parse",
            "location": 45,
            "return": [
                "Optional[WebSocketEvent]"
            ],
            "arguments": {
                "cls": [
                    "Tuple[Union[float,float]]",
                    "int",
                    "Callable",
                    "Tuple[float,float]"
                ],
                "op": [
                    "int"
                ]
            }
        },
        "WebSocketKeepAlive.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "List[str]",
                    "logging.Logger",
                    "Tuple[tuple[Union[str,...]]]",
                    "Tuple[Tuple[str,...]]"
                ],
                "ws": [
                    "int",
                    "bool"
                ],
                "interval": [
                    "int",
                    "bool"
                ]
            }
        },
        "WebSocketKeepAlive.stop": {
            "name": "stop",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketKeepAlive.run": {
            "name": "run",
            "location": 87,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketRunForeverWrapper.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "List[str]",
                    "logging.Logger",
                    "Tuple[tuple[Union[str,...]]]",
                    "Tuple[Tuple[str,...]]"
                ],
                "ws": [
                    "int",
                    "bool"
                ]
            }
        },
        "WebSocketRunForeverWrapper.run": {
            "name": "run",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pycord.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Optional[List[MessageSubscription]]",
                    "List[MessageSubscription]",
                    "None"
                ],
                "user_agent": [
                    "str",
                    "None",
                    "int",
                    "bool"
                ],
                "logging_level": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Tuple[int, int, int]"
                ],
                "log_to_console": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Tuple[int,int,int]"
                ],
                "command_prefix": [
                    "Text",
                    "str",
                    "Dict",
                    "Dict[Optional[str],str]",
                    "Optional[Dict[str,Any]]",
                    "bool",
                    "Union[str,bytes]"
                ]
            }
        },
        "Pycord._setup_logger": {
            "name": "_setup_logger",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging_level": [
                    "str",
                    "int",
                    "Exception"
                ],
                "log_to_console": [
                    "bool",
                    "List[str]",
                    "List[libkol.Item]"
                ]
            }
        },
        "Pycord._build_headers": {
            "name": "_build_headers",
            "location": 206,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pycord._query": {
            "name": "_query",
            "location": 221,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Iterable[Any]",
                    "None",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "method": [
                    "str",
                    "logging.Logger",
                    "Dict",
                    "Optional[Dict]",
                    "None"
                ],
                "data": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Dict",
                    "requests.Response",
                    "Optional[str]"
                ],
                "expected_status": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Pycord._get_websocket_address": {
            "name": "_get_websocket_address",
            "location": 254,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pycord._ws_on_message": {
            "name": "_ws_on_message",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Callable[...,Awaitable]",
                    "Callable[...,collections.abc.Awaitable]",
                    "Union[None,int,str]",
                    "logging.LogRecord"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "Pycord._ws_on_error": {
            "name": "_ws_on_error",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "bool",
                    "str",
                    "Coroutine",
                    "collections.abc.Coroutine"
                ],
                "error": [
                    "Exception",
                    "logging.Logger",
                    "bool",
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Pycord._ws_on_close": {
            "name": "_ws_on_close",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Pycord._ws_on_open": {
            "name": "_ws_on_open",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "Dict",
                    "int",
                    "str"
                ]
            }
        },
        "Pycord.connect_to_websocket": {
            "name": "connect_to_websocket",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pycord.keep_running": {
            "name": "keep_running",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pycord._reconnect_websocket": {
            "name": "_reconnect_websocket",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pycord.disconnect_from_websocket": {
            "name": "disconnect_from_websocket",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pycord.set_status": {
            "name": "set_status",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "Pycord.get_basic_bot_info": {
            "name": "get_basic_bot_info",
            "location": 475,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pycord.get_connected_guilds": {
            "name": "get_connected_guilds",
            "location": 497,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pycord.get_guild_info": {
            "name": "get_guild_info",
            "location": 549,
            "return": [
                "Optional[str]",
                "int",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Pycord.get_channels_in": {
            "name": "get_channels_in",
            "location": 579,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "guild_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Pycord.get_channel_info": {
            "name": "get_channel_info",
            "location": 630,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Pycord.get_guild_members": {
            "name": "get_guild_members",
            "location": 653,
            "return": [
                "int",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "guild_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Pycord.get_guild_member_by_id": {
            "name": "get_guild_member_by_id",
            "location": 702,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "guild_id": [
                    "str",
                    "int"
                ],
                "member_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Pycord.get_all_guild_roles": {
            "name": "get_all_guild_roles",
            "location": 737,
            "return": [
                "str",
                "Exception",
                "int"
            ],
            "arguments": {
                "self": [],
                "guild_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Pycord.set_member_roles": {
            "name": "set_member_roles",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "guild_id": [
                    "int",
                    "str"
                ],
                "member_id": [
                    "int",
                    "str"
                ],
                "roles": [
                    "int",
                    "str"
                ]
            }
        },
        "Pycord.add_member_roles": {
            "name": "add_member_roles",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "guild_id": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "member_id": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "roles": [
                    "List[int]",
                    "List[str]",
                    "str",
                    "Set[str]",
                    "int",
                    "Type[str]"
                ]
            }
        },
        "Pycord.remove_member_roles": {
            "name": "remove_member_roles",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "guild_id": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "member_id": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "roles": [
                    "int",
                    "str"
                ]
            }
        },
        "Pycord.send_message": {
            "name": "send_message",
            "location": 845,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "message": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "Pycord.command": {
            "name": "command",
            "location": 865,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "Pycord.register_command": {
            "name": "register_command",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "float",
                    "None"
                ],
                "f": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "float",
                    "None"
                ]
            }
        },
        "Pycord.command.inner": {
            "name": "inner",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "str",
                    "BinaryIO",
                    "Callable",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "Pycord-master/pycord/tests/test_pycord.py": {
        "json_to_bytes": {
            "name": "json_to_bytes",
            "location": 11,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "io.StringIO",
                    "bool",
                    "Dict[str,Any]",
                    "Union[bytes,str]"
                ]
            }
        },
        "TestWebSocketEvent.test_parse": {
            "name": "test_parse",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketKeepAlive.test_exists": {
            "name": "test_exists",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebSocketRunForeverWrapper.test_exists": {
            "name": "test_exists",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordLogger.test_setup_logger": {
            "name": "test_setup_logger",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordLogger.test_default_logging_level": {
            "name": "test_default_logging_level",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordLogger.test_custom_logging_level": {
            "name": "test_custom_logging_level",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordLogger.test_no_console_logger": {
            "name": "test_no_console_logger",
            "location": 58,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordUserAgent.test_default_useragent": {
            "name": "test_default_useragent",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordUserAgent.test_override_useragent": {
            "name": "test_override_useragent",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordToken.test_instantiate_no_token": {
            "name": "test_instantiate_no_token",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordToken.test_instantiate_blank_token": {
            "name": "test_instantiate_blank_token",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordRestApi.test_build_headers": {
            "name": "test_build_headers",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordRestApi.test_get_websocket_address": {
            "name": "test_get_websocket_address",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "TestPycordRestApi.test_rest_get_api_calls": {
            "name": "test_rest_get_api_calls",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "TestPycordRestApi.test_register_command": {
            "name": "test_register_command",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordRestApi.test_command_decorator": {
            "name": "test_command_decorator",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPycordRestApi.test_get_websocket_address.mock": {
            "name": "mock",
            "location": 101,
            "return": [],
            "arguments": {
                "path": [],
                "headers": []
            }
        },
        "TestPycordRestApi.test_rest_get_api_calls.mock": {
            "name": "mock",
            "location": 117,
            "return": [
                "List[str]",
                "Set[str]",
                "Callable[[str, Any], Tuple[bytes, int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "bool",
                    "[str]",
                    "io.TextIOBase",
                    "Sequence[str]",
                    "str",
                    "List[dict]",
                    "List[Dict[str, Any]]"
                ],
                "headers": [
                    "bool",
                    "[str]",
                    "io.TextIOBase",
                    "Sequence[str]",
                    "str",
                    "List[dict]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestPycordRestApi.test_command_decorator._": {
            "name": "_",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Pycord-master/pycord/tests/__init__.py": {}
}
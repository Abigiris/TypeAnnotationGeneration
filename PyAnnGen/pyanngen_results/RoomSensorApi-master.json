{
    "RoomSensorApi-master/setup.py": {},
    "RoomSensorApi-master/room_sensor_api/config.py": {},
    "RoomSensorApi-master/room_sensor_api/hal_field.py": {
        "newInit": {
            "name": "newInit",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "newSchema": {
            "name": "newSchema",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_schema": {
            "name": "_schema",
            "location": 33,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedFields.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "allennlp.models.Model"
                ]
            }
        },
        "NestedFields.output": {
            "name": "output",
            "location": 62,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]"
                ],
                "obj": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ],
                "ordered": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "NestedModel.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "float",
                    "Union[float, int]",
                    "int",
                    "List[\"Outcome\"]",
                    "Union[float, Sequence[float]]",
                    "List[str]"
                ],
                "attribute": [
                    "str"
                ],
                "as_list": [
                    "bool"
                ]
            }
        },
        "NestedModel.nested": {
            "name": "nested",
            "location": 75,
            "return": [
                "float",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedFields.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedded_models": [
                    "Dict[(str, NestedModel)]"
                ]
            }
        },
        "EmbeddedFields.nested_model": {
            "name": "nested_model",
            "location": 85,
            "return": [
                "Sequence[str]",
                "flask.Blueprint",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "EmbeddedFields.output": {
            "name": "output",
            "location": 88,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "Tuple[Type[Any]]"
                ],
                "obj": [
                    "str",
                    "type",
                    "int",
                    "bytes",
                    "Dict[str, str]",
                    "dict"
                ],
                "orderes": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "EmbeddedFields.schema": {
            "name": "schema",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlData.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ],
                "absolute": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "scheme": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "url": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "templated": [
                    "bool"
                ],
                "url_data": [
                    "dict"
                ],
                "path_variables": [
                    "list"
                ],
                "hashtag": [
                    "str"
                ]
            }
        },
        "UrlData.url": {
            "name": "url",
            "location": 135,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Tuple[int]",
                "Optional[Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "Optional[Tuple[str, ...]]",
                    "Mapping"
                ]
            }
        },
        "HaLUrl.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_data": [
                    "Union[(UrlData, List[UrlData])]"
                ]
            }
        },
        "HaLUrl.output": {
            "name": "output",
            "location": 177,
            "return": [
                "Union[(List[collections.OrderedDict[(str, Any)]], collections.OrderedDict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]"
                ],
                "obj": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "ordered": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "HaLUrl.generate_link": {
            "name": "generate_link",
            "location": 188,
            "return": [
                "collections.OrderedDict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "url_data": [
                    "UrlData"
                ],
                "obj": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "HaLUrl.schema": {
            "name": "schema",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "RoomSensorApi-master/room_sensor_api/routes.py": {},
    "RoomSensorApi-master/room_sensor_api/__init__.py": {},
    "RoomSensorApi-master/room_sensor_api/api/models.py": {},
    "RoomSensorApi-master/room_sensor_api/api/openClose.py": {
        "OpenClose.get": {
            "name": "get",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "RoomSensorApi-master/room_sensor_api/api/root.py": {
        "RootResource.get": {
            "name": "get",
            "location": 20,
            "return": [
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "RoomSensorApi-master/room_sensor_api/api/__init__.py": {},
    "RoomSensorApi-master/room_sensor_api/debug_routes/routes.py": {
        "routes": {
            "name": "routes",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "RoomSensorApi-master/room_sensor_api/debug_routes/__init__.py": {
        "index": {
            "name": "index",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    }
}
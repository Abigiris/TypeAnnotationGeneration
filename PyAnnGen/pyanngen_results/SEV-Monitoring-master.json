{
    "SEV-Monitoring-master/definitions.py": {},
    "SEV-Monitoring-master/dispatcher.py": {
        "Dispatcher.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": [
                    "int",
                    "float",
                    "bool"
                ],
                "serial_reader": [
                    "int",
                    "float",
                    "bool"
                ],
                "wifi_reader": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Dispatcher.__connect_gui_signals": {
            "name": "__connect_gui_signals",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dispatcher.__connect_serial_reader_signals": {
            "name": "__connect_serial_reader_signals",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dispatcher.receive_serial_data_handler": {
            "name": "receive_serial_data_handler",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_frame": [
                    "dict",
                    "dict[, ]",
                    "Dict[int, List[Any]]",
                    "dict[int, list[typing.Any]]",
                    "bytes",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "pandas.DataFrame"
                ]
            }
        },
        "Dispatcher.start_handler": {
            "name": "start_handler",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_type": [
                    "str"
                ],
                "lap_name": [
                    "str"
                ]
            }
        },
        "Dispatcher.stop_handler": {
            "name": "stop_handler",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SEV-Monitoring-master/main.py": {},
    "SEV-Monitoring-master/actions/action.py": {
        "Action.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Action.execute": {
            "name": "execute",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SEV-Monitoring-master/actions/receive_new_data_frame_action.py": {
        "ReceiveNewDataFrameAction.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "str",
                    "int",
                    "typing.IO",
                    "pandas.DataFrame",
                    "models.transaction.EndorsedTX",
                    "IO[str]"
                ],
                "data_frame": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "ReceiveNewDataFrameAction.execute": {
            "name": "execute",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SEV-Monitoring-master/actions/start_action.py": {
        "StartAction.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "float",
                    "typing.Sequence[int]"
                ],
                "connection_type": [
                    "str",
                    "typing.Any",
                    "definitions.ConnectionTypes",
                    "list[typing.Union[str,typing.Any]]",
                    "Any",
                    "List[Union[str, Any]]"
                ],
                "lap_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "StartAction.execute": {
            "name": "execute",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SEV-Monitoring-master/actions/stop_action.py": {
        "StopAction.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dispatcher": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "StopAction.execute": {
            "name": "execute",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SEV-Monitoring-master/actions/__init__.py": {},
    "SEV-Monitoring-master/database/database.py": {},
    "SEV-Monitoring-master/database/database_seed.py": {
        "seed_database": {
            "name": "seed_database",
            "location": 16,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "SEV-Monitoring-master/database/insert_data_frame.py": {
        "InsertDataFrames.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertDataFrames.add_new_frame": {
            "name": "add_new_frame",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str"
                ]
            }
        },
        "InsertDataFrames.run": {
            "name": "run",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertDataFrames.stop": {
            "name": "stop",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SEV-Monitoring-master/database/__init__.py": {},
    "SEV-Monitoring-master/GUI/GUI_actions.py": {
        "GUIActions.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gui_app": [
                    "str"
                ],
                "gui_updater": [
                    "str"
                ]
            }
        },
        "GUIActions.start_stop_button_clicked": {
            "name": "start_stop_button_clicked",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIActions.pause_continue_button_clicked": {
            "name": "pause_continue_button_clicked",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIActions.__set_button_signals_connections": {
            "name": "__set_button_signals_connections",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIActions.__get_connection_type": {
            "name": "__get_connection_type",
            "location": 73,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIActions.__get_lap_name": {
            "name": "__get_lap_name",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIActions.__get_lap_name.ok_button_slot": {
            "name": "ok_button_slot",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SEV-Monitoring-master/GUI/GUI_interface.py": {
        "GUIInterface.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIInterface.start_gui": {
            "name": "start_gui",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIInterface.update_currents": {
            "name": "update_currents",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "battery_current": [
                    "str",
                    "dict"
                ],
                "motors_current": [
                    "str",
                    "dict"
                ],
                "solar_panels_current": [
                    "str",
                    "dict"
                ]
            }
        },
        "GUIInterface.update_volts": {
            "name": "update_volts",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dc_bus_volt": [
                    "str",
                    "dict"
                ],
                "charge_rate": [
                    "str",
                    "dict"
                ]
            }
        },
        "GUIInterface.update_temperatures": {
            "name": "update_temperatures",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solar_panels_temperature": [
                    "str",
                    "dict"
                ]
            }
        },
        "GUIInterface.update_master_motor": {
            "name": "update_master_motor",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master_motor_current": [
                    "Type",
                    "tuple"
                ],
                "master_motor_speed": [
                    "Type",
                    "tuple"
                ]
            }
        },
        "GUIInterface.update_slave_motor": {
            "name": "update_slave_motor",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slave_motor_current": [
                    "str",
                    "dict"
                ],
                "slave_motor_speed": [
                    "str",
                    "dict"
                ]
            }
        },
        "GUIInterface.update_battery": {
            "name": "update_battery",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module_number": [
                    "dict",
                    "Type[object]",
                    "bool"
                ],
                "battery_volt": [
                    "dict",
                    "Type[object]",
                    "bool"
                ],
                "battery_temperature": [
                    "dict",
                    "Type[object]",
                    "bool"
                ]
            }
        },
        "GUIInterface.update_lights": {
            "name": "update_lights",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lights_status": [
                    "dict",
                    "Optional[str]",
                    "bool",
                    "List[Dict]",
                    "bytes",
                    "int"
                ]
            }
        },
        "GUIInterface.update_switches": {
            "name": "update_switches",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "switches_status": [
                    "dict",
                    "Optional[str]",
                    "bool",
                    "List[Dict]",
                    "bytes",
                    "int"
                ]
            }
        },
        "GUIInterface.connect_start_signal": {
            "name": "connect_start_signal",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_slot": [
                    "int"
                ]
            }
        },
        "GUIInterface.connect_stop_signal": {
            "name": "connect_stop_signal",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stop_slot": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "SEV-Monitoring-master/GUI/GUI_main_window.py": {},
    "SEV-Monitoring-master/GUI/GUI_updater.py": {
        "GUIUpdater.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gui_app": [
                    "str"
                ]
            }
        },
        "GUIUpdater.__init_ranges_dict": {
            "name": "__init_ranges_dict",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIUpdater.__init_tolerances_dict": {
            "name": "__init_tolerances_dict",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUIUpdater.__is_in_range": {
            "name": "__is_in_range",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data_label": [
                    "int",
                    "bool",
                    "Dict[Optional[str], str]",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "value": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "GUIUpdater.__is_tolerable": {
            "name": "__is_tolerable",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data_label": [
                    "bytes",
                    "Mapping[str, Union[int, slice]]",
                    "Dict[int, Dict]",
                    "Tuple[int, float]",
                    "List[int]",
                    "int",
                    "str"
                ],
                "value": [
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "GUIUpdater.update_label": {
            "name": "update_label",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_label": [
                    "range",
                    "Optional[float]",
                    "Dict[str, int]",
                    "str"
                ],
                "value": [
                    "Dict[str, int]",
                    "Optional[float]",
                    "dict"
                ]
            }
        },
        "GUIUpdater.update_switches": {
            "name": "update_switches",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "switches_status": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "GUIUpdater.update_lights": {
            "name": "update_lights",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lights_status": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "GUIUpdater.update_battery": {
            "name": "update_battery",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module_number": [
                    "T"
                ],
                "battery_volt": [
                    "str",
                    "int",
                    "callable"
                ],
                "battery_temp": [
                    "str",
                    "int",
                    "callable"
                ]
            }
        },
        "GUIUpdater.set_paused": {
            "name": "set_paused",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_paused": [
                    "bool",
                    "int",
                    "Callable[[str], bool]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "SEV-Monitoring-master/GUI/__init__.py": {},
    "SEV-Monitoring-master/input/data_frames_factory.py": {
        "get_data_frame_size": {
            "name": "get_data_frame_size",
            "location": 27,
            "return": [
                "int",
                "str",
                "Callable[[T], List[T]]",
                "Set[str]"
            ],
            "arguments": {
                "frame_id": [
                    "str",
                    "int",
                    "list",
                    "list[]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "unpack_raw_id": {
            "name": "unpack_raw_id",
            "location": 54,
            "return": [
                "int",
                "salon.models.Stylist",
                "List[str]"
            ],
            "arguments": {
                "raw_id": [
                    "str",
                    "int"
                ]
            }
        },
        "create_data_frame_object": {
            "name": "create_data_frame_object",
            "location": 59,
            "return": [
                "str",
                "CurrentsDataFrame",
                "int",
                "BusVoltagesDataFrame",
                "Callable",
                "dict",
                "TemperaturesDataFrame",
                "pandas.DataFrame",
                "BatteryDataFrame",
                "bool",
                "LightsDataFrame",
                "SwitchesDataFrame",
                "DriverMasterMCDataFrame",
                "DriverSlaveMCDataFrame"
            ],
            "arguments": {
                "frame_id": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "frame_value": [
                    "str",
                    "int",
                    "Dict[str, Union[Any, Any]]"
                ]
            }
        },
        "UnknownFrameID.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SEV-Monitoring-master/input/serial_reader.py": {
        "SerialReader.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "com_port": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "baud_rate": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SerialReader.run": {
            "name": "run",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerialReader.__get_frame_id": {
            "name": "__get_frame_id",
            "location": 66,
            "return": [
                "bytes",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerialReader.__get_frame_data": {
            "name": "__get_frame_data",
            "location": 72,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "frame_size": [
                    "list[int]",
                    "str",
                    "List[int]",
                    "int",
                    "list[list[int]]",
                    "List[List[int]]",
                    "set[str]",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "SerialReader.stop": {
            "name": "stop",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerialReader.connect_receive_data_signal": {
            "name": "connect_receive_data_signal",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "receive_data_slot": [
                    "dict",
                    "dict[, ]",
                    "Tuple[int, str, bytearray]",
                    "tuple[typing.Union[int,str,bytearray]]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Dict[str, Union[int, bool]]",
                    "dict[str, typing.Union[int,bool]]",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]",
                    "typing.Callable[D, D]",
                    "List[str]",
                    "list[str]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        }
    },
    "SEV-Monitoring-master/input/wifi_reader.py": {
        "WiFiReader.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "broadcase_IP": [
                    "int",
                    "float",
                    "bool"
                ],
                "broadcast_port": [
                    "int",
                    "str",
                    "dict[typing.Union[str,None], set[abilian.services.security.models.Role]]",
                    "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                    "abilian.core.models.subjects.Principal",
                    "bool"
                ],
                "server_IP": [
                    "int",
                    "float",
                    "bool"
                ],
                "server_port": [
                    "int",
                    "str",
                    "dict[typing.Union[str,None], set[abilian.services.security.models.Role]]",
                    "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                    "abilian.core.models.subjects.Principal",
                    "bool"
                ]
            }
        },
        "WiFiReader.run": {
            "name": "run",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WiFiReader.stop": {
            "name": "stop",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WiFiReader.connect_receive_data_signal": {
            "name": "connect_receive_data_signal",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "receive_data_slot": [
                    "dict",
                    "dict[, ]",
                    "Tuple[int, str, bytearray]",
                    "tuple[typing.Union[int,str,bytearray]]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Dict[str, Union[int, bool]]",
                    "dict[str, typing.Union[int,bool]]",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]",
                    "typing.Callable[D, D]",
                    "List[str]",
                    "list[str]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "WiFiReader.__open_broadcast_socket": {
            "name": "__open_broadcast_socket",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WiFiReader.__open_client_socket": {
            "name": "__open_client_socket",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WiFiReader.__start_communication": {
            "name": "__start_communication",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WiFiReader.__end_communication": {
            "name": "__end_communication",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WiFiReader.__parse_packet": {
            "name": "__parse_packet",
            "location": 75,
            "return": [
                "list[]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "SEV-Monitoring-master/input/__init__.py": {},
    "SEV-Monitoring-master/models/__init__.py": {},
    "SEV-Monitoring-master/models/data_frames/battery_data_frame.py": {
        "BatteryDataFrame.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_id": [],
                "frame_value": [],
                "voltage": [
                    "int",
                    "bytes",
                    "contests.models.User",
                    "str",
                    "None",
                    "list[typing.Any]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "bool"
                ],
                "temperature": [
                    "int",
                    "bytes",
                    "contests.models.User",
                    "str",
                    "None",
                    "list[typing.Any]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "bool"
                ],
                "battery_id": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "BatteryDataFrame.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "db.models.taxon.FillDataLevel",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatteryDataFrame.update_gui": {
            "name": "update_gui",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": [
                    "str",
                    "models.data_frames.data_frame.GUIInterface",
                    "None",
                    "Optional[str]",
                    "listens.definitions.Listen.Input"
                ]
            }
        }
    },
    "SEV-Monitoring-master/models/data_frames/bus_voltages_data_frame.py": {
        "BusVoltagesDataFrame.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_id": [
                    "int",
                    "bytes"
                ],
                "frame_value": [
                    "int",
                    "bytes"
                ],
                "DC_bus_voltage": [
                    "str",
                    "int",
                    "float"
                ],
                "charge_rate": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "BusVoltagesDataFrame.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "typing.Text",
                "str",
                "salon.models.Stylist",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BusVoltagesDataFrame.update_gui": {
            "name": "update_gui",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": [
                    "int",
                    "bytes",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "SEV-Monitoring-master/models/data_frames/currents_data_frame.py": {
        "CurrentsDataFrame.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_id": [
                    "int",
                    "bytes"
                ],
                "frame_value": [
                    "int",
                    "bytes"
                ],
                "battery_current": [
                    "str",
                    "int",
                    "float"
                ],
                "motors_current": [
                    "str",
                    "int",
                    "float"
                ],
                "solar_panels_current": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "CurrentsDataFrame.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "db.models.taxon.FillDataLevel",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentsDataFrame.update_gui": {
            "name": "update_gui",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": [
                    "int",
                    "bytes",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "SEV-Monitoring-master/models/data_frames/data_frame.py": {
        "DataFrame.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "frame_value": [
                    "int",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "DataFrame.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "typing.Text",
                "Callable",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.update_gui": {
            "name": "update_gui",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "SEV-Monitoring-master/models/data_frames/driver_master_MC_data_frame.py": {
        "DriverMasterMCDataFrame.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_id": [
                    "int",
                    "bytes"
                ],
                "frame_value": []
            }
        },
        "DriverMasterMCDataFrame.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "typing.Text",
                "bool",
                "db.models.taxon.FillDataLevel",
                "Callable[[None, None], bool]",
                "Sequence[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverMasterMCDataFrame.update_gui": {
            "name": "update_gui",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": []
            }
        }
    },
    "SEV-Monitoring-master/models/data_frames/driver_slave_MC_data_frame.py": {
        "DriverSlaveMCDataFrame.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_id": [
                    "int",
                    "bytes"
                ],
                "frame_value": [
                    "int",
                    "bytes"
                ]
            }
        },
        "DriverSlaveMCDataFrame.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "typing.Text",
                "bool",
                "db.models.taxon.FillDataLevel",
                "Callable[[None, None], bool]",
                "Sequence[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverSlaveMCDataFrame.update_gui": {
            "name": "update_gui",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": [
                    "int",
                    "bytes",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "SEV-Monitoring-master/models/data_frames/lights_status_data_frame.py": {
        "LightsDataFrame.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_id": [
                    "int",
                    "bytes"
                ],
                "frame_value": [
                    "int",
                    "bytes"
                ],
                "headlights": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "tail_lights": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "left_indicator": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "right_indicator": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "high_beam": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "brake_light": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "backing_light": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "daytime_light": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict"
                ]
            }
        },
        "LightsDataFrame.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "db.models.taxon.FillDataLevel",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsDataFrame.update_gui": {
            "name": "update_gui",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": [
                    "models.data_frames.data_frame.GUIInterface",
                    "Sequence[int]",
                    "bytes",
                    "str",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "SEV-Monitoring-master/models/data_frames/switches_status_data_frame.py": {
        "SwitchesDataFrame.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_id": [
                    "int",
                    "bytes"
                ],
                "frame_value": [
                    "int",
                    "bytes"
                ],
                "motor_on": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "typing.Type",
                    "int",
                    "Type[Any]"
                ],
                "forward": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "typing.Type",
                    "int",
                    "Type[Any]"
                ],
                "reverse": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "typing.Type",
                    "int",
                    "Type[Any]"
                ],
                "light_on": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "typing.Type",
                    "int",
                    "Type[Any]"
                ],
                "warning": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "typing.Type",
                    "int",
                    "Type[Any]"
                ],
                "daytime": [
                    "set[int]",
                    "float",
                    "Set[int]",
                    "str",
                    "bool",
                    "bytes",
                    "typing.Type",
                    "int",
                    "Type[Any]"
                ]
            }
        },
        "SwitchesDataFrame.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "db.models.taxon.FillDataLevel",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchesDataFrame.update_gui": {
            "name": "update_gui",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": [
                    "models.data_frames.data_frame.GUIInterface",
                    "Sequence[int]",
                    "bytes",
                    "str",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "SEV-Monitoring-master/models/data_frames/tempratures_data_frame.py": {
        "TemperaturesDataFrame.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_id": [
                    "int",
                    "bytes"
                ],
                "frame_value": [
                    "int",
                    "bytes"
                ],
                "solar_panels_temperature": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TemperaturesDataFrame.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "db.models.taxon.FillDataLevel",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemperaturesDataFrame.update_gui": {
            "name": "update_gui",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui_interface": [
                    "int",
                    "bytes",
                    "Optional[float]",
                    "float",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "SEV-Monitoring-master/models/laps/lap.py": {
        "Lap.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "comments": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "typing.Iterable[str]",
                    "Optional[Iterable[str]]",
                    "List[\"Node\"]",
                    "Dict[str, str]"
                ]
            }
        },
        "Lap.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "bool",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lap.finish_lap": {
            "name": "finish_lap",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
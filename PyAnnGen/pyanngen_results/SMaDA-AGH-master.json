{
    "SMaDA-AGH-master/AdvancedAlgorithmsAndDataStructures/lab1/dijkstra.py": {
        "load_data": {
            "name": "load_data",
            "location": 12,
            "return": [
                "DiGraph",
                "bool",
                "str",
                "List[str]",
                "Generator"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "mark_as_unvidited": {
            "name": "mark_as_unvidited",
            "location": 35,
            "return": [
                "tuple[set[]]",
                "tuple",
                "Tuple[str, str, str]",
                "float"
            ],
            "arguments": {
                "graph": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "int",
                    "Union[int, float]"
                ],
                "start_node": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "set_initial_tenantive_distance": {
            "name": "set_initial_tenantive_distance",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "networkx.DiGraph",
                    "None",
                    "Optional[int]"
                ],
                "start_node": [
                    "int"
                ]
            }
        },
        "draw_graph": {
            "name": "draw_graph",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "bytearray",
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_current_node": {
            "name": "get_current_node",
            "location": 86,
            "return": [
                "List[str]",
                "List[\"Variable\"]",
                "List[int]",
                "Tuple[List[Any], List[int]]"
            ],
            "arguments": {
                "graph": [
                    "networkx.DiGraph",
                    "bool",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "not_visited": {
            "name": "not_visited",
            "location": 98,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "graph": [
                    "networkx.DiGraph",
                    "int"
                ],
                "node": [
                    "int",
                    "networkx.DiGraph"
                ]
            }
        },
        "get_shortest_path": {
            "name": "get_shortest_path",
            "location": 111,
            "return": [
                "list[]",
                "Set[str]",
                "str",
                "Optional[str]",
                "set",
                "list"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "networkx.DiGraph"
                ],
                "start_node": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "end_node": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "dijkstra": {
            "name": "dijkstra",
            "location": 130,
            "return": [
                "tuple[typing.Union[str,None,set[int],int]]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "networkx.Graph"
                ],
                "start_node": [
                    "Optional[str]",
                    "str",
                    "int",
                    "None",
                    "bool"
                ],
                "end_node": [
                    "int",
                    "float",
                    "None",
                    "networkx.DiGraph",
                    "Union[int, float]",
                    "Optional[int]"
                ]
            }
        }
    },
    "SMaDA-AGH-master/AdvancedAlgorithmsAndDataStructures/lab2/ff.py": {
        "load_data": {
            "name": "load_data",
            "location": 8,
            "return": [
                "DiGraph"
            ],
            "arguments": {
                "filename": []
            }
        },
        "draw_graph": {
            "name": "draw_graph",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": []
            }
        },
        "ford_fulkerson": {
            "name": "ford_fulkerson",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "graph": [],
                "s": [],
                "t": []
            }
        }
    },
    "SMaDA-AGH-master/AdvancedAlgorithmsAndDataStructures/lab2/exc1/ff.py": {
        "load_data": {
            "name": "load_data",
            "location": 8,
            "return": [
                "DiGraph"
            ],
            "arguments": {
                "filename": []
            }
        },
        "draw_graph": {
            "name": "draw_graph",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": []
            }
        },
        "set_initial_flow": {
            "name": "set_initial_flow",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": []
            }
        },
        "ff": {
            "name": "ff",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": []
            }
        }
    },
    "SMaDA-AGH-master/AdvancedAlgorithmsAndDataStructures/lab4/distances.py": {
        "import_data": {
            "name": "import_data",
            "location": 10,
            "return": [
                "list[Solid]",
                "bool",
                "int",
                "float",
                "dict",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "distance": {
            "name": "distance",
            "location": 159,
            "return": [
                "Tuple[int, int]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "a": [
                    "str",
                    "geom.Edge",
                    "int",
                    "float"
                ],
                "b": [
                    "float",
                    "int",
                    "geom.Face"
                ]
            }
        }
    },
    "SMaDA-AGH-master/AdvancedAlgorithmsAndDataStructures/lab4/geom.py": {
        "Point.__add__": {
            "name": "__add__",
            "location": 11,
            "return": [
                "Point",
                "str",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "Face.edges": {
            "name": "edges",
            "location": 34,
            "return": [
                "list[Edge]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SMaDA-AGH-master/AdvancedAlgorithmsAndDataStructures/lab4/vec.py": {
        "dot": {
            "name": "dot",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "v1": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "v2": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "cross": {
            "name": "cross",
            "location": 43,
            "return": [
                "Vector",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "v1": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Tuple[int, int, int]"
                ],
                "v2": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "Vector.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [
                    "float",
                    "str",
                    "robocup.Point"
                ],
                "p2": [
                    "float",
                    "None",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "Vector.__add__": {
            "name": "__add__",
            "location": 18,
            "return": [
                "Vector",
                "int",
                "bool",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "Vector.__sub__": {
            "name": "__sub__",
            "location": 21,
            "return": [
                "Vector",
                "int",
                "bool",
                "Generator",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "Vector.length": {
            "name": "length",
            "location": 24,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.__mul__": {
            "name": "__mul__",
            "location": 27,
            "return": [
                "Vector",
                "int",
                "float",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "Vector.__truediv__": {
            "name": "__truediv__",
            "location": 31,
            "return": [
                "Vector",
                "int",
                "float",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "Vector.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SMaDA-AGH-master/AdvancedAlgorithmsAndDataStructures/lab5/matrices.py": {
        "timeit": {
            "name": "timeit",
            "location": 13,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "method": [
                    "typing.Callable[, ]",
                    "Callable",
                    "list[str]",
                    "str",
                    "Callable[..., Optional[Any]]",
                    "list[]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "mul_s": {
            "name": "mul_s",
            "location": 26,
            "return": [
                "list[list[bool]]",
                "List[int]",
                "List[List[int]]",
                "Callable[[str, str], float]",
                "type",
                "str",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Iterable[T]",
                    "list"
                ],
                "y": [
                    "int",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "list"
                ]
            }
        },
        "mul_all": {
            "name": "mul_all",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "m_list": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 35,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "list",
                    "list[]",
                    "Sequence",
                    "typing.Sequence[]",
                    "List[str]",
                    "list[str]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "generate_tasks": {
            "name": "generate_tasks",
            "location": 40,
            "return": [
                "list[]",
                "str",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "to_multiply": [
                    "bool",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "mul_st": {
            "name": "mul_st",
            "location": 44,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "tup": [
                    "int",
                    "dict",
                    "Tuple[int, int, int, int]",
                    "Optional[BaseException]"
                ]
            }
        },
        "after_pool": {
            "name": "after_pool",
            "location": 52,
            "return": [
                "bool",
                "List[str]",
                "pandas.DataFrame",
                "int"
            ],
            "arguments": {
                "m_list": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "dict[str, typing.Any]",
                    "T",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "pool": [
                    "Union[int, float]",
                    "int",
                    "str",
                    "float",
                    "pandas.DataFrame"
                ]
            }
        },
        "mul_all_p": {
            "name": "mul_all_p",
            "location": 60,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "m_list": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "Optional[List[str]]",
                    "list[str]",
                    "list",
                    "None",
                    "Sequence[T]",
                    "list[]",
                    "bool",
                    "typing.Sequence[T]"
                ]
            }
        },
        "flatten_matrix": {
            "name": "flatten_matrix",
            "location": 65,
            "return": [
                "bool",
                "str",
                "List[Dict]",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {
                "m_list": [
                    "list[list[T]]",
                    "int",
                    "List[List[T]]",
                    "float"
                ]
            }
        },
        "timeit.timed": {
            "name": "timed",
            "location": 15,
            "return": [
                "int",
                "Match",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "SMaDA-AGH-master/AdvancedMethodsInMachineLearning/lab2.5/prep_class_imbalance.py": {},
    "SMaDA-AGH-master/AdvancedMethodsInMachineLearning/lab2.5/prep_feature_scaling.py": {},
    "SMaDA-AGH-master/AdvancedMethodsInMachineLearning/lab2.5/prep_feature_selection.py": {},
    "SMaDA-AGH-master/AdvancedMethodsInMachineLearning/lab2.5/valid_cv_kfold.py": {},
    "SMaDA-AGH-master/AdvancedMethodsInMachineLearning/lab3/cat_classifiers.py": {
        "sigmoid": {
            "name": "sigmoid",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "z": []
            }
        },
        "initialize_with_zeros": {
            "name": "initialize_with_zeros",
            "location": 112,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "dim": []
            }
        },
        "propagate": {
            "name": "propagate",
            "location": 149,
            "return": [
                "tuple[dict[typing.Text, int]]"
            ],
            "arguments": {
                "w": [],
                "b": [],
                "X": [],
                "Y": []
            }
        },
        "optimize": {
            "name": "optimize",
            "location": 210,
            "return": [
                "tuple[typing.Union[dict[typing.Text, int],list[]]]"
            ],
            "arguments": {
                "w": [],
                "b": [],
                "X": [],
                "Y": [],
                "num_iterations": [],
                "learning_rate": [],
                "print_cost": [
                    "bool"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 287,
            "return": [],
            "arguments": {
                "w": [],
                "b": [],
                "X": []
            }
        },
        "model": {
            "name": "model",
            "location": 331,
            "return": [
                "dict[typing.Text, typing.Union[float,int]]"
            ],
            "arguments": {
                "X_train": [],
                "Y_train": [],
                "X_test": [],
                "Y_test": [],
                "num_iterations": [
                    "int"
                ],
                "learning_rate": [
                    "float"
                ],
                "print_cost": [
                    "bool"
                ]
            }
        }
    },
    "SMaDA-AGH-master/AdvancedMethodsInMachineLearning/lab3/lr_utils.py": {
        "load_dataset": {
            "name": "load_dataset",
            "location": 5,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "SMaDA-AGH-master/AdvancedMethodsInMachineLearning/lab4/cnn_utils.py": {
        "load_dataset": {
            "name": "load_dataset",
            "location": 8,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "random_mini_batches": {
            "name": "random_mini_batches",
            "location": 25,
            "return": [
                "list[tuple[typing.Union[str,int,float,dict[, ]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "list[float]",
                    "float",
                    "int",
                    "numpy.ndarray",
                    "List[float]"
                ],
                "Y": [
                    "tuple[]",
                    "float",
                    "bool",
                    "tuple"
                ],
                "mini_batch_size": [
                    "int"
                ],
                "seed": [
                    "int",
                    "float"
                ]
            }
        },
        "convert_to_one_hot": {
            "name": "convert_to_one_hot",
            "location": 66,
            "return": [
                "Union[str, int, float]",
                "numpy.ndarray",
                "str",
                "List[int]",
                "float",
                "Dict[str, numpy.ndarray]"
            ],
            "arguments": {
                "Y": [
                    "str",
                    "List[str]",
                    "Mapping[Any, Any]",
                    "Optional[\"GraphLogger\"]",
                    "Iterable[Any]"
                ],
                "C": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "typing.Mapping",
                    "Mapping[Any, Any]",
                    "None",
                    "Optional[\"GraphLogger\"]",
                    "Iterable[Any]"
                ]
            }
        },
        "forward_propagation_for_predict": {
            "name": "forward_propagation_for_predict",
            "location": 71,
            "return": [
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "X": [
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "dict",
                    "dict[, ]",
                    "set",
                    "set[]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Set[int]",
                    "set[int]"
                ],
                "parameters": [
                    "str",
                    "list[str]",
                    "cirq.ops.Operation",
                    "Union[None, str, List[str], Dict[str, str]]"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "float",
                    "\"ImageStack\"",
                    "tensorflow.Tensor"
                ],
                "parameters": [
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "SMaDA-AGH-master/AdvancedMethodsInMachineLearning/lab4/tf_utils.py": {
        "load_dataset": {
            "name": "load_dataset",
            "location": 14,
            "return": [
                "tuple[]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "random_mini_batches": {
            "name": "random_mini_batches",
            "location": 31,
            "return": [
                "list[tuple[typing.Union[str,float]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "list[float]",
                    "float",
                    "int",
                    "numpy.ndarray",
                    "List[float]"
                ],
                "Y": [
                    "tuple[typing.Union[float,float]]",
                    "str",
                    "int",
                    "Tuple[float, float]",
                    "float"
                ],
                "mini_batch_size": [
                    "int"
                ],
                "seed": [
                    "int",
                    "float"
                ]
            }
        },
        "convert_to_one_hot": {
            "name": "convert_to_one_hot",
            "location": 71,
            "return": [
                "Union[str, int, float]",
                "numpy.ndarray",
                "str",
                "List[int]",
                "float",
                "Dict[str, numpy.ndarray]"
            ],
            "arguments": {
                "Y": [
                    "str",
                    "List[str]",
                    "Mapping[Any, Any]",
                    "Optional[\"GraphLogger\"]",
                    "Iterable[Any]"
                ],
                "C": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "typing.Mapping",
                    "Mapping[Any, Any]",
                    "None",
                    "Optional[\"GraphLogger\"]",
                    "Iterable[Any]"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "float",
                    "\"ImageStack\"",
                    "tensorflow.Tensor"
                ],
                "parameters": [
                    "int",
                    "Callable"
                ]
            }
        },
        "forward_propagation_for_predict": {
            "name": "forward_propagation_for_predict",
            "location": 102,
            "return": [
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "X": [
                    "bool",
                    "Set[str]",
                    "set[str]",
                    "dict",
                    "dict[, ]",
                    "set",
                    "set[]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "Set[int]",
                    "set[int]"
                ],
                "parameters": [
                    "str",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "list[str]"
                ]
            }
        }
    },
    "SMaDA-AGH-master/AgentBasedModelling/project/mesa/model.py": {
        "load_scene": {
            "name": "load_scene",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "grid": [
                    "str",
                    "int",
                    "List[int]",
                    "Dict[str, List[str]]"
                ],
                "model": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "Walker.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "unique_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "model": [
                    "str",
                    "int",
                    "bool"
                ],
                "pos": [
                    "str",
                    "int",
                    "List[int]",
                    "bytes",
                    "list[int]"
                ],
                "heading": [
                    "tuple[int]",
                    "str",
                    "List[int]",
                    "int",
                    "bytes"
                ],
                "type": [
                    "typing.Text",
                    "str",
                    "List[int]",
                    "int",
                    "bytes"
                ]
            }
        },
        "ShapesModel.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "N": [
                    "int",
                    "str",
                    "tuple",
                    "tuple[]",
                    "List[int]",
                    "list[int]"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "ShapesModel.make_walls": {
            "name": "make_walls",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapesModel.make_walker_agents": {
            "name": "make_walker_agents",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapesModel.step": {
            "name": "step",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SMaDA-AGH-master/AgentBasedModelling/project/mesa/server.py": {
        "agent_draw": {
            "name": "agent_draw",
            "location": 9,
            "return": [
                "None",
                "int",
                "dict[typing.Text, typing.Union[typing.Text,int,float]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "agent": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[Any]",
                    "None",
                    "typing.Any"
                ]
            }
        },
        "launch_shape_model": {
            "name": "launch_shape_model",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "SMaDA-AGH-master/AgentBasedModelling/project/pygame/car.py": {
        "random_vin": {
            "name": "random_vin",
            "location": 10,
            "return": [
                "",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str",
                    "Union[int, str]",
                    "List[int]"
                ]
            }
        },
        "Car.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Optional[Dict]",
                    "dict",
                    "bool"
                ],
                "path": [
                    "str",
                    "bool",
                    "None",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "dir": [
                    "str",
                    "None",
                    "int",
                    "dict",
                    "bool",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "image": [
                    "Tuple[float, float, float, float]",
                    "bool",
                    "None",
                    "tuple[typing.Union[float,float,float,float]]"
                ],
                "supervisor": [
                    "str",
                    "bool",
                    "None",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "Car._entering_leaving_waypoint_index": {
            "name": "_entering_leaving_waypoint_index",
            "location": 40,
            "return": [
                "tuple[int]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Car._adjust_velocity": {
            "name": "_adjust_velocity",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "velo": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Car.next_waypoint": {
            "name": "next_waypoint",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Car.turn": {
            "name": "turn",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "Car.towards_waypoint": {
            "name": "towards_waypoint",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Car.update": {
            "name": "update",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Car.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SMaDA-AGH-master/AgentBasedModelling/project/pygame/grid.py": {
        "Cell.draw_cell": {
            "name": "draw_cell",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "int",
                    "float"
                ],
                "current_time": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "filled": [
                    "bool",
                    "float",
                    "Callable[[], Any]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Cell.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ]
            }
        },
        "Cell.__hash__": {
            "name": "__hash__",
            "location": 37,
            "return": [
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "cars": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Grid.point_in_grid": {
            "name": "point_in_grid",
            "location": 56,
            "return": [
                "bool",
                "int",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "dict",
                    "float"
                ]
            }
        },
        "Grid.draw_grid": {
            "name": "draw_grid",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "pygame.Surface",
                    "bool",
                    "Tuple[int, int]"
                ],
                "current_time": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "pygame.Surface",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "Grid.add_points_to_draw": {
            "name": "add_points_to_draw",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Grid.clear_old_reservations": {
            "name": "clear_old_reservations",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "float",
                    "bool",
                    "list[]",
                    "list",
                    "int"
                ]
            }
        }
    },
    "SMaDA-AGH-master/AgentBasedModelling/project/pygame/main.py": {
        "init_simulation": {
            "name": "init_simulation",
            "location": 15,
            "return": [
                "tuple[typing.Union[tuple[typing.Union[int,str]],int,float,list[],str]]",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "confg": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "precompute_waypoint_grid_relation": {
            "name": "precompute_waypoint_grid_relation",
            "location": 24,
            "return": [
                "list[dict[tuple[typing.Text], ]]",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "grid": [
                    "str"
                ],
                "paths": [
                    "str"
                ]
            }
        },
        "process_events": {
            "name": "process_events",
            "location": 28,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "spawn_car": {
            "name": "spawn_car",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config": [
                    "str",
                    "bool"
                ],
                "rolling_counter": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "bytes",
                    "bool"
                ],
                "all_sprites": [
                    "int",
                    "bool"
                ],
                "supervisor": [
                    "str",
                    "bool",
                    "Type[Any]",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "current_time": [
                    "int",
                    "str",
                    "float",
                    "tuple[]",
                    "tuple",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "draw": {
            "name": "draw",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "screen": [
                    "pygame.Surface",
                    "str",
                    "int",
                    "raiden.utils.Secret",
                    "float"
                ],
                "background": [
                    "int",
                    "pygame.Surface"
                ],
                "framerate": [
                    "int",
                    "pygame.Surface"
                ],
                "all_sprites": [
                    "int",
                    "dict",
                    "float",
                    "bool",
                    "bytes",
                    "Dict[str, int]"
                ],
                "clock": [
                    "int",
                    "pygame.Surface"
                ],
                "grid": [
                    "int",
                    "raiden.utils.ChannelID",
                    "pygame.Surface",
                    "raiden.utils.BlockIdentifier",
                    "dict",
                    "bool"
                ],
                "current_time": [
                    "int",
                    "dict[, ]",
                    "raiden.utils.ChannelID",
                    "pygame.Surface",
                    "raiden.utils.BlockIdentifier",
                    "dict",
                    "bool"
                ],
                "grid_visible": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "SMaDA-AGH-master/AgentBasedModelling/project/pygame/supervisor.py": {
        "Supervisor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "float",
                    "bool"
                ],
                "screen": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Supervisor.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Supervisor.reserve_road": {
            "name": "reserve_road",
            "location": 23,
            "return": [
                "bool",
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "car": [
                    "int",
                    "List[int]"
                ],
                "current_time": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "Supervisor.route_len": {
            "name": "route_len",
            "location": 45,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "route": [],
                "until": []
            }
        },
        "Supervisor.points_len": {
            "name": "points_len",
            "location": 48,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "p1": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "p2": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Supervisor.cells_from_waypoints": {
            "name": "cells_from_waypoints",
            "location": 53,
            "return": [
                "set[tuple[]]",
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "road_before": [
                    "List[int]",
                    "int",
                    "Sequence['cirq.Qid']",
                    "list",
                    "bool"
                ],
                "road_speed": [
                    "list[int]",
                    "int",
                    "List[int]",
                    "typing.Sequence['cirq.Qid']",
                    "Sequence['cirq.Qid']",
                    "list[]",
                    "list",
                    "bool"
                ],
                "road": [
                    "str",
                    "int",
                    "bytes"
                ],
                "car": [
                    "int"
                ]
            }
        }
    },
    "SMaDA-AGH-master/AgentBasedModelling/project/pygame/utils.py": {
        "load_config": {
            "name": "load_config",
            "location": 10,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "TimeRange.overlap": {
            "name": "overlap",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "int",
                    "float",
                    "Iterable[Any]"
                ]
            }
        },
        "TimeRange.inside": {
            "name": "inside",
            "location": 28,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TimeRange.__eq__": {
            "name": "__eq__",
            "location": 31,
            "return": [
                "float",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int]",
                    "T"
                ]
            }
        },
        "Timeline.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeline.add_timespan": {
            "name": "add_timespan",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Optional[int]"
                ],
                "end": [
                    "int",
                    "Optional[int]"
                ],
                "duration": [
                    "int",
                    "float"
                ],
                "vin": [
                    "int",
                    "str"
                ]
            }
        },
        "Timeline.cancel_timespan": {
            "name": "cancel_timespan",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "float"
                ],
                "duration": [
                    "int",
                    "float"
                ],
                "vin": [
                    "int",
                    "float"
                ]
            }
        },
        "Timeline.within_reserved": {
            "name": "within_reserved",
            "location": 56,
            "return": [
                "str",
                "dict",
                "Optional[bool]",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "Timeline._insert_timespan": {
            "name": "_insert_timespan",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_r": [
                    "float",
                    "list",
                    "T",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Timeline._clear_old_events": {
            "name": "_clear_old_events",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "when": [
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "Timeline.__repr__": {
            "name": "__repr__",
            "location": 89,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SMaDA-AGH-master/AgentBasedModelling/project/pygame/tools/waypoint_generator.py": {},
    "SMaDA-AGH-master/AgentBasedModelling/project/pygame/tools/waypoint_placer.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/__init__.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/core/layer.py": {
        "Layer.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "num_of_neurons": [
                    "int",
                    "List[int]",
                    "str",
                    "Optional[int]"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Layer.set_network_name": {
            "name": "set_network_name",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "net_name": [
                    "str",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "Layer.connect_layer": {
            "name": "connect_layer",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "another": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "side": [
                    "BaseException"
                ]
            }
        },
        "Layer.stimulate_next": {
            "name": "stimulate_next",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.stimulate_delta": {
            "name": "stimulate_delta",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.calculate_weight": {
            "name": "calculate_weight",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.generate_cypher": {
            "name": "generate_cypher",
            "location": 34,
            "return": [
                "list[]",
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputLayer.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "dict[, ]",
                    "Optional[Tuple[int, int]]",
                    "float",
                    "dict"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InputLayer.set_input": {
            "name": "set_input",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "float"
                ]
            }
        },
        "OutputLayer.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "dict[str, float]",
                    "int",
                    "Dict[str, float]",
                    "bool"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "OutputLayer.calculate_delta": {
            "name": "calculate_delta",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputLayer.set_output": {
            "name": "set_output",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "BiasLayer.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "neurons": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "typing.Text",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "BiasLayer.pass_output": {
            "name": "pass_output",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "str",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        }
    },
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/core/neo4j-connector.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/core/network.py": {
        "connect_om": {
            "name": "connect_om",
            "location": 12,
            "return": [
                "BiasLayer",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "n1": [
                    "int",
                    "float",
                    "Collection[int]",
                    "typing.Collection"
                ],
                "n2": [
                    "int"
                ]
            }
        },
        "load_network": {
            "name": "load_network",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Network.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "Network.add_layer": {
            "name": "add_layer",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "float",
                    "int"
                ]
            }
        },
        "Network.connect": {
            "name": "connect",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.load_learning_data": {
            "name": "load_learning_data",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "Network.normalize_learning_data": {
            "name": "normalize_learning_data",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.print_data": {
            "name": "print_data",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.print_io": {
            "name": "print_io",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "list",
                    "list[list[int]]",
                    "List[List[int]]",
                    "list[int]",
                    "int",
                    "List[int]"
                ],
                "outputs": [
                    "str",
                    "list[str]",
                    "int",
                    "Set[Tuple[str, str]]",
                    "List[str]",
                    "Optional[Any]"
                ],
                "input_names": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "output_names": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "dict[int, set[str]]",
                    "Dict[int, Set[str]]",
                    "Optional[int]"
                ]
            }
        },
        "Network.print_weights": {
            "name": "print_weights",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.stimulate": {
            "name": "stimulate",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "additional_layers": [
                    "None",
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "Network.backpropagate": {
            "name": "backpropagate",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "online": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "Network.next_dataset": {
            "name": "next_dataset",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Type[BaseException]",
                    "typing.Type"
                ],
                "outputs": [
                    "int",
                    "typing.Sequence[int]",
                    "Sequence[int]",
                    "str",
                    "bytes",
                    "core.models.GroupingKey",
                    "None",
                    "qutebrowser.utils.usertypes.KeyMode",
                    "Optional[bytes]"
                ],
                "input_layers": [
                    "None",
                    "str",
                    "int",
                    "TextIO",
                    "bool"
                ],
                "output_layers": [
                    "None",
                    "int",
                    "list[int]",
                    "list[float]",
                    "Optional[int]",
                    "List[int]",
                    "Optional[Callable[[List], Any]]",
                    "bool",
                    "Optional[List[float]]"
                ]
            }
        },
        "Network.learn": {
            "name": "learn",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "times": [
                    "int",
                    "str",
                    "Optional[\"Period\"]"
                ],
                "input_layers": [
                    "int",
                    "None",
                    "str",
                    "raiden.utils.Address",
                    "raiden.utils.ABI"
                ],
                "output_layers": [
                    "int",
                    "None",
                    "str",
                    "raiden.utils.Address",
                    "raiden.utils.ABI"
                ]
            }
        },
        "Network.learn_kfolds": {
            "name": "learn_kfolds",
            "location": 128,
            "return": [
                "list[tuple[]]",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "float"
                ],
                "times": [
                    "int",
                    "str"
                ],
                "input_layers": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "List[float]",
                    "bool",
                    "list[float]"
                ],
                "output_layers": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "List[float]",
                    "bool",
                    "list[float]"
                ]
            }
        },
        "Network.test": {
            "name": "test",
            "location": 152,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "str",
                    "float"
                ]
            }
        },
        "Network.dump_network": {
            "name": "dump_network",
            "location": 157,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "prompt": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Network.dump_cypher": {
            "name": "dump_cypher",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "additional_neurons": [
                    "list[int]",
                    "bool",
                    "None",
                    "list[str]",
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/core/neuron.py": {
        "Connection.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "one": [
                    "int",
                    "bool",
                    "float"
                ],
                "another": [
                    "int",
                    "bool",
                    "float"
                ],
                "weight": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Connection.exist": {
            "name": "exist",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "one": [
                    "int",
                    "Callable",
                    "str"
                ],
                "another": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Connection.get_other": {
            "name": "get_other",
            "location": 29,
            "return": [
                "str",
                "List[List[int]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "me": [
                    "str",
                    "int"
                ]
            }
        },
        "Connection.update_weight": {
            "name": "update_weight",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_weight": [
                    "str",
                    "Tuple[str, str]",
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Connection.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.connect": {
            "name": "connect",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "another": [
                    "bytes",
                    "graphx.core.entities.Edge",
                    "torch.utils.data.DataLoader"
                ],
                "side": [
                    "List[List[int]]",
                    "Union[str, bool, None]",
                    "src.autoks.core.covariance.Covariance"
                ]
            }
        },
        "Neuron.stimulate_me": {
            "name": "stimulate_me",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "another": [
                    "bool",
                    "list",
                    "T"
                ],
                "value": [
                    "aiocometd.constants.TransportState",
                    "Optional[str]",
                    "Iterable",
                    "T",
                    "bool",
                    "dict"
                ]
            }
        },
        "Neuron.stimulate_delta": {
            "name": "stimulate_delta",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "another": [
                    "Union[list, str]",
                    "static_frame.core.util.UFunc",
                    "Set[str]",
                    "Optional[Callable]",
                    "str"
                ],
                "value": [
                    "Iterable[Any]",
                    "Mapping[starfish.core.types.Axes, int]",
                    "Optional[Sequence[T]]",
                    "int",
                    "list",
                    "Optional[dict]"
                ],
                "delta": [
                    "Iterable[Any]",
                    "Mapping[starfish.core.types.Axes, int]",
                    "Optional[Sequence[T]]",
                    "int",
                    "list",
                    "Optional[dict]"
                ]
            }
        },
        "Neuron.stimulate_outputs": {
            "name": "stimulate_outputs",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.stimulate_inputs": {
            "name": "stimulate_inputs",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.calculate_weight": {
            "name": "calculate_weight",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "side": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Neuron.__repr__": {
            "name": "__repr__",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.dump_neuron": {
            "name": "dump_neuron",
            "location": 122,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.set_network_name": {
            "name": "set_network_name",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "net_name": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Neuron.set_layer_name": {
            "name": "set_layer_name",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "Neuron.generate_cypher": {
            "name": "generate_cypher",
            "location": 135,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputNeuron.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "InputNeuron.update_value": {
            "name": "update_value",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "OutputNeuron.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "desired": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OutputNeuron.get_value": {
            "name": "get_value",
            "location": 184,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputNeuron.set_desired": {
            "name": "set_desired",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "desired": [
                    "bool",
                    "float"
                ]
            }
        },
        "OutputNeuron.stimulate_delta": {
            "name": "stimulate_delta",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "another": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "delta": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "BiasNeuron.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bias": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "BiasNeuron.set_bias": {
            "name": "set_bias",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bias": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "T"
                ]
            }
        }
    },
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/core/utils.py": {
        "NamePicker.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamePicker._inc_i": {
            "name": "_inc_i",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamePicker.get_input_name": {
            "name": "get_input_name",
            "location": 17,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamePicker.get_output_name": {
            "name": "get_output_name",
            "location": 21,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamePicker.get_neuron_name": {
            "name": "get_neuron_name",
            "location": 25,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamePicker.get_layer_name": {
            "name": "get_layer_name",
            "location": 29,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/core/__init__.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/agds-iris.py": {
        "load_data": {
            "name": "load_data",
            "location": 39,
            "return": [
                "tuple[typing.Union[dict[, dict[, ]],list[Iris]]]",
                "bool",
                "str",
                "List[str]",
                "Generator"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "calculate_weights": {
            "name": "calculate_weights",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "float",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "params": [
                    "bytes",
                    "Callable[[None], bool]"
                ],
                "iris": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "get_similarities": {
            "name": "get_similarities",
            "location": 92,
            "return": [
                "list[tuple[typing.Union[typing.Text,float]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "weights": [
                    "int",
                    "float"
                ],
                "irises": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "T",
                    "dict"
                ]
            }
        },
        "Iris.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "petal_length": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "list[]",
                    "list",
                    "list[str]",
                    "Union[str, List[str]]",
                    "Optional[List[str]]"
                ],
                "sepal_length": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "list[]",
                    "list",
                    "list[str]",
                    "Union[str, List[str]]",
                    "Optional[List[str]]"
                ],
                "petal_width": [
                    "int",
                    "float"
                ],
                "sepal_width": [
                    "int",
                    "float"
                ]
            }
        },
        "Iris.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str",
                "bool",
                "dict",
                "OrderedDict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/iris-check.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/iris.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/iris2.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/main.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/mlp.py": {
        "connect": {
            "name": "connect",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "l1": [
                    "float",
                    "int"
                ],
                "n1": [
                    "float",
                    "int"
                ],
                "l2": [
                    "float",
                    "int"
                ],
                "n2": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/som.py": {
        "InputSom.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "bool"
                ],
                "map": [
                    "int",
                    "List[Tuple[int, float]]",
                    "str",
                    "list[tuple[typing.Union[int,float]]]",
                    "float",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "InputSom.set_input": {
            "name": "set_input",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/som_np.py": {
        "load_data": {
            "name": "load_data",
            "location": 27,
            "return": [
                "tuple[list[list[float]]]",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "distance": {
            "name": "distance",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "map": [
                    "str",
                    "Callable[..., bool]",
                    "int",
                    "typing.Callable[..., bool]",
                    "Container",
                    "typing.Container"
                ],
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "best_match": {
            "name": "best_match",
            "location": 47,
            "return": [
                "list[str]",
                "List[Dict]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "map": [
                    "list[str]",
                    "T",
                    "typing.Mapping",
                    "List[str]",
                    "bool",
                    "dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, float]",
                    "list[]",
                    "tuple['cirq.Qid']",
                    "list",
                    "Tuple['cirq.Qid']"
                ],
                "pattern": [
                    "Set[str]",
                    "str",
                    "set[str]"
                ]
            }
        },
        "load_som": {
            "name": "load_som",
            "location": 57,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "generate_result_map": {
            "name": "generate_result_map",
            "location": 62,
            "return": [
                "int",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "pat": [
                    "str",
                    "list[]",
                    "list",
                    "list[str]",
                    "callable",
                    "List[str]"
                ],
                "cls": [
                    "typing.Callable[T, T]",
                    "Callable[[T], T]",
                    "numpy.array",
                    "starfish.core.intensity_table.intensity_table.IntensityTable"
                ],
                "map": [
                    "str",
                    "list",
                    "list[]",
                    "callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/tictactoe.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/xor.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/models/__init__.py": {},
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/snek/snek-game.py": {
        "init_gui": {
            "name": "init_gui",
            "location": 29,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "violated_boundary_conditions": {
            "name": "violated_boundary_conditions",
            "location": 40,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "snake": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "calculate_head": {
            "name": "calculate_head",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "snake": [
                    "bytes",
                    "str",
                    "Sequence[str]"
                ],
                "key": [
                    "bytes",
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "get_input": {
            "name": "get_input",
            "location": 55,
            "return": [
                "tuple[typing.Union[int,str,bytes]]",
                "str",
                "tuple[typing.Union[str,bytes]]",
                "Optional[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "player": [
                    "Type['Signature']",
                    "typing.Type",
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "event": [
                    "int",
                    "Optional[Exception]",
                    "Callable",
                    "str",
                    "List[Dict]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict]",
                    "bool"
                ],
                "key": [
                    "Dict[str, Any]",
                    "str",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "Optional[\"TrackingData\"]",
                    "dict"
                ]
            }
        },
        "init_state": {
            "name": "init_state",
            "location": 79,
            "return": [
                "tuple[typing.Union[int,float,list[float],list[tuple[int]],tuple[]]]",
                "str",
                "bytes",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "player": [
                    "int",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Sequence[Tuple[float, float]]",
                    "typing.Sequence[tuple[typing.Union[float,float]]]"
                ],
                "gui": [
                    "int",
                    "bytes",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Sequence[Tuple[float, float]]",
                    "typing.Sequence[tuple[typing.Union[float,float]]]"
                ],
                "snek": [
                    "int",
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "new_food": {
            "name": "new_food",
            "location": 95,
            "return": [
                "tuple[]",
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "snake": [
                    "dict[, ]",
                    "str",
                    "float",
                    "bool",
                    "dict"
                ]
            }
        },
        "eat_food": {
            "name": "eat_food",
            "location": 100,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "snake": [
                    "str",
                    "int",
                    "Callable"
                ],
                "food": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "extract_features": {
            "name": "extract_features",
            "location": 104,
            "return": [
                "tuple[typing.Union[int,float,list[str]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "snake": [
                    "int"
                ],
                "board": [
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "score": [
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "food": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "Tuple[int, int, int]",
                    "Tuple[int, int]"
                ],
                "key": [
                    "int",
                    "dict",
                    "bytes",
                    "\"ks.Series\"",
                    "str",
                    "bool"
                ],
                "action": [
                    "float",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "draw": {
            "name": "draw",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "win": [
                    "int",
                    "bool",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "snake": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "food": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "delay": [
                    "int",
                    "float",
                    "tuple[int]",
                    "Tuple[int]",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "score": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "last": [
                    "str",
                    "None",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "draw_features": {
            "name": "draw_features",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "win": [
                    "str",
                    "int"
                ],
                "features": [
                    "str",
                    "int"
                ],
                "board": [
                    "str",
                    "int"
                ]
            }
        },
        "random_action": {
            "name": "random_action",
            "location": 140,
            "return": [
                "tuple[typing.Union[str,bytes,int]]",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "prev_action": [
                    "bool",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ],
                "features": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "neural_action": {
            "name": "neural_action",
            "location": 151,
            "return": [
                "tuple[typing.Union[str,bytes,int]]",
                "str",
                "bool",
                "Optional[str]",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "prev_action": [
                    "int",
                    "Callable",
                    "str"
                ],
                "features": [
                    "str"
                ]
            }
        },
        "neural_action2": {
            "name": "neural_action2",
            "location": 172,
            "return": [
                "tuple[typing.Union[str,bytes,int]]",
                "str",
                "bool",
                "Optional[str]",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "prev_action": [
                    "int",
                    "Callable",
                    "str"
                ],
                "features": [
                    "str"
                ]
            }
        },
        "food_distance": {
            "name": "food_distance",
            "location": 193,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "snek": [
                    "str",
                    "int",
                    "Callable"
                ],
                "food": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "snek": {
            "name": "snek",
            "location": 197,
            "return": [
                "int",
                "Callable",
                "tuple[int]",
                "str",
                "float"
            ],
            "arguments": {
                "player": [
                    "bool"
                ],
                "gui": [
                    "int",
                    "bool"
                ],
                "snek": [
                    "int",
                    "None"
                ],
                "action": [
                    "str",
                    "dict"
                ]
            }
        },
        "learn": {
            "name": "learn",
            "location": 259,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 273,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "SMaDA-AGH-master/ComputationalIntelligence/awesome_neural/snek/snek-network.py": {},
    "SMaDA-AGH-master/CryptographyAndCyberSecurity/project/dna_encryption.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 31,
            "return": [
                "tuple[]",
                "dict",
                "str",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "prepare_key": {
            "name": "prepare_key",
            "location": 42,
            "return": [
                "str",
                "bytes",
                "Tuple[str]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "Optional[Callable]",
                    "bytes"
                ],
                "key": [
                    "str",
                    "int",
                    "Optional[Callable]",
                    "bytes"
                ]
            }
        },
        "left_pad": {
            "name": "left_pad",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 58,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 70,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Tuple[str]",
                    "tuple[str]",
                    "List[str]",
                    "list[str]"
                ],
                "key": [
                    "str",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "SMaDA-AGH-master/DecisionSupportSystems/lab2/script.py": {},
    "SMaDA-AGH-master/DecisionSupportSystems/lab2/script_anim.py": {},
    "SMaDA-AGH-master/EvolutionaryAlgorithms/jclec4/plot-res.py": {
        "parse_outputs": {
            "name": "parse_outputs",
            "location": 6,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "SMaDA-AGH-master/EvolutionaryAlgorithms/lab1/plot.py": {}
}
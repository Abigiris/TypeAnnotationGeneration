{
    "ST-OpenUri-st4/boot.py": {
        "reload_plugin": {
            "name": "reload_plugin",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ST-OpenUri-st4/plugin/constant.py": {},
    "ST-OpenUri-st4/plugin/functions.py": {
        "open_uri_with_browser": {
            "name": "open_uri_with_browser",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "uri": [
                    "str"
                ],
                "browser": [
                    "Optional[str]"
                ]
            }
        },
        "compile_uri_regex": {
            "name": "compile_uri_regex",
            "location": 50,
            "return": [
                "Tuple[(Optional[Pattern[str]], Tuple[(str, ...)])]"
            ],
            "arguments": {}
        },
        "find_uri_regions_by_region": {
            "name": "find_uri_regions_by_region",
            "location": 102,
            "return": [
                "list"
            ],
            "arguments": {
                "view": [],
                "region": [],
                "search_radius": [
                    "Optional[int]"
                ]
            }
        },
        "find_uri_regions_by_regions": {
            "name": "find_uri_regions_by_regions",
            "location": 119,
            "return": [
                "list"
            ],
            "arguments": {
                "view": [],
                "regions": [
                    "Iterable"
                ],
                "search_radius": [
                    "Optional[int]"
                ]
            }
        },
        "view_last_typing_timestamp_val": {
            "name": "view_last_typing_timestamp_val",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [],
                "timestamp_s": [
                    "float"
                ]
            }
        },
        "view_is_dirty_val": {
            "name": "view_is_dirty_val",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [],
                "is_dirty": [
                    "bool"
                ]
            }
        },
        "is_view_typing": {
            "name": "is_view_typing",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": []
            }
        },
        "is_view_too_large": {
            "name": "is_view_too_large",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": []
            }
        }
    },
    "ST-OpenUri-st4/plugin/image_processing.py": {
        "get_colored_image_base64_by_color": {
            "name": "get_colored_image_base64_by_color",
            "location": 14,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "img_name": [
                    "str",
                    "Mapping[str, Any]",
                    "Union[str, bytes]"
                ],
                "rgba_code": [
                    "int",
                    "str",
                    "List[int]",
                    "dict"
                ]
            }
        },
        "get_colored_image_base64_by_region": {
            "name": "get_colored_image_base64_by_region",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "img_name": [
                    "str"
                ],
                "region": [
                    "str",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "change_png_bytes_color": {
            "name": "change_png_bytes_color",
            "location": 47,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {
                "img_bytes": [
                    "bytes",
                    "bool",
                    "str",
                    "int",
                    "float",
                    "List[str]",
                    "List[int]",
                    "bytearray"
                ],
                "rgba_code": [
                    "int",
                    "str",
                    "Callable[..., None]"
                ]
            }
        },
        "calculate_gray": {
            "name": "calculate_gray",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "rgb": [
                    "Sequence[int]"
                ]
            }
        },
        "is_img_light": {
            "name": "is_img_light",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "img_bytes": [
                    "bytes"
                ]
            }
        },
        "add_alpha_to_rgb": {
            "name": "add_alpha_to_rgb",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "color_code": [
                    "str"
                ]
            }
        },
        "color_code_to_rgba": {
            "name": "color_code_to_rgba",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "color_code": [
                    "str"
                ],
                "region": [
                    "str",
                    "bool",
                    "dict",
                    "int",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "change_png_bytes_color.render_pixel": {
            "name": "render_pixel",
            "location": 63,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "rgba_src": [
                    "int",
                    "str",
                    "bytes",
                    "Counter[str]"
                ],
                "rgba_dst": [
                    "int",
                    "bool",
                    "List[int]",
                    "str"
                ],
                "invert_gray": [
                    "bool",
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/listener.py": {
        "OpenUriViewEventListener.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "OpenUriViewEventListener.on_pre_close": {
            "name": "on_pre_close",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenUriViewEventListener.on_load_async": {
            "name": "on_load_async",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenUriViewEventListener.on_modified_async": {
            "name": "on_modified_async",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenUriViewEventListener.on_hover": {
            "name": "on_hover",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int"
                ],
                "hover_zone": [
                    "int"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/logger.py": {
        "init_plugin_logger": {
            "name": "init_plugin_logger",
            "location": 8,
            "return": [
                "logging.Logger"
            ],
            "arguments": {}
        },
        "apply_user_log_level": {
            "name": "apply_user_log_level",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "log": {
            "name": "log",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "msg": {
            "name": "msg",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "init_plugin_logger.set_logger_hander": {
            "name": "set_logger_hander",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "str",
                    "float"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/phantom_set.py": {
        "get_phantom_set_id": {
            "name": "get_phantom_set_id",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "str",
                    "bool"
                ]
            }
        },
        "init_phantom_set": {
            "name": "init_phantom_set",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [
                    "sublime.View",
                    "str"
                ]
            }
        },
        "delete_phantom_set": {
            "name": "delete_phantom_set",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [
                    "sublime.View"
                ]
            }
        },
        "erase_phantom_set": {
            "name": "erase_phantom_set",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [
                    "sublime.View",
                    "str"
                ]
            }
        },
        "update_phantom_set": {
            "name": "update_phantom_set",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [
                    "sublime.View"
                ],
                "uri_regions": [
                    "Iterable"
                ]
            }
        },
        "generate_phantom_html": {
            "name": "generate_phantom_html",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "str"
                ],
                "uri_region": [
                    "str"
                ]
            }
        },
        "new_uri_phantom": {
            "name": "new_uri_phantom",
            "location": 61,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "view": [
                    "str",
                    "ark.types.PrimalDinoCharacter",
                    "bytes"
                ],
                "uri_region": [
                    "str",
                    "ark.types.PrimalDinoCharacter",
                    "bytes"
                ]
            }
        },
        "new_uri_phantoms": {
            "name": "new_uri_phantoms",
            "location": 70,
            "return": [
                "tuple"
            ],
            "arguments": {
                "view": [
                    "sublime.View"
                ],
                "uri_regions": [
                    "Iterable"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/phatom_sets_manager.py": {
        "PhatomSetsManager.get_phantom_set": {
            "name": "get_phantom_set",
            "location": 12,
            "return": [
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "phantom_set_id": [
                    "str"
                ]
            }
        },
        "PhatomSetsManager.init_phantom_set": {
            "name": "init_phantom_set",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int",
                    "sublime.View",
                    "list[dict[str, typing.Any]]",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "set[int]",
                    "Set[int]"
                ],
                "view": [
                    "str",
                    "None",
                    "int",
                    "sublime.View",
                    "list[dict[str, typing.Any]]",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "set[int]",
                    "Set[int]"
                ],
                "phantom_set_id": [
                    "str"
                ],
                "phantom_set_key": [
                    "str"
                ]
            }
        },
        "PhatomSetsManager.delete_phantom_set": {
            "name": "delete_phantom_set",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "phantom_set_id": [
                    "str"
                ]
            }
        },
        "PhatomSetsManager.erase_phantom_set": {
            "name": "erase_phantom_set",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional",
                    "typing.Optional[]",
                    "Optional[Callable]",
                    "typing.Callable[, ]"
                ],
                "phantom_set_id": [
                    "str"
                ]
            }
        },
        "PhatomSetsManager.update_phantom_set": {
            "name": "update_phantom_set",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Optional[str]",
                    "None",
                    "Optional",
                    "typing.Optional[]"
                ],
                "phantom_set_id": [
                    "str"
                ],
                "phantoms": [
                    "Iterable"
                ]
            }
        },
        "PhatomSetsManager.clear": {
            "name": "clear",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "type",
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Union[int, slice]",
                    "None",
                    "Optional[int]"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/popup.py": {
        "generate_popup_html": {
            "name": "generate_popup_html",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [],
                "uri_region": []
            }
        },
        "show_popup": {
            "name": "show_popup",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [
                    "int",
                    "dict[str, int]",
                    "str",
                    "sublime.View",
                    "sublime.Region",
                    "Dict[str, int]"
                ],
                "uri_region": [
                    "int",
                    "dict[str, int]",
                    "str",
                    "sublime.View",
                    "sublime.Region",
                    "Dict[str, int]"
                ],
                "point": [
                    "int"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/region_drawing.py": {
        "erase_uri_regions": {
            "name": "erase_uri_regions",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        },
        "draw_uri_regions": {
            "name": "draw_uri_regions",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "uri_regions": [
                    "Iterable"
                ]
            }
        },
        "parse_draw_region_flags": {
            "name": "parse_draw_region_flags",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "flags": [
                    "Union[(int, Sequence[str])]"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/renderer.py": {
        "foreground_views": {
            "name": "foreground_views",
            "location": 20,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {}
        },
        "RendererThread.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval_ms": [
                    "int"
                ]
            }
        },
        "RendererThread._update_foreground_views": {
            "name": "_update_foreground_views",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RendererThread._update_view": {
            "name": "_update_view",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "Dict[str, Any]"
                ]
            }
        },
        "RendererThread._detect_uris_globally": {
            "name": "_detect_uris_globally",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View"
                ]
            }
        },
        "RendererThread._clean_up_phantom_set": {
            "name": "_clean_up_phantom_set",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "sublime.View",
                    "Iterable[T]",
                    "int",
                    "str"
                ]
            }
        },
        "RendererThread._clean_up_uri_regions": {
            "name": "_clean_up_uri_regions",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "sublime.View",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/settings.py": {
        "get_expanding_variables": {
            "name": "get_expanding_variables",
            "location": 14,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "window": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_image_path": {
            "name": "get_image_path",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "img_name": [
                    "str"
                ]
            }
        },
        "get_image_info": {
            "name": "get_image_info",
            "location": 43,
            "return": [
                "plugin.types.ImageDict"
            ],
            "arguments": {
                "img_name": [
                    "str"
                ]
            }
        },
        "get_image_color": {
            "name": "get_image_color",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "img_name": [
                    "str"
                ],
                "region": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "get_settings_object": {
            "name": "get_settings_object",
            "location": 92,
            "return": [
                "bytes",
                "Union[str, IO]",
                "IO",
                "bool"
            ],
            "arguments": {}
        },
        "get_setting": {
            "name": "get_setting",
            "location": 102,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "dotted": [
                    "str"
                ],
                "default": [
                    "str",
                    "None",
                    "int",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "get_timestamp": {
            "name": "get_timestamp",
            "location": 117,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "get_setting_renderer_interval": {
            "name": "get_setting_renderer_interval",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_setting_show_open_button": {
            "name": "get_setting_show_open_button",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "Union[str, IO]",
                    "IO[str]",
                    "str",
                    "apistar.types.WSGIEnviron"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/shared.py": {
        "is_plugin_ready": {
            "name": "is_plugin_ready",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "global_get": {
            "name": "global_get",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "dotted": [
                    "str"
                ],
                "default": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Any]",
                    "float",
                    "typing.Any",
                    "int"
                ]
            }
        },
        "global_set": {
            "name": "global_set",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "dotted": [
                    "str"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict[int, int]",
                    "dict[int, int]"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/timer.py": {
        "RepeatingTimer.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval_ms": [
                    "int"
                ],
                "func": [
                    "Callable"
                ]
            }
        },
        "RepeatingTimer.set_func": {
            "name": "set_func",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "RepeatingTimer.set_interval": {
            "name": "set_interval",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval_ms": [
                    "int"
                ]
            }
        },
        "RepeatingTimer.start": {
            "name": "start",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepeatingTimer.cancel": {
            "name": "cancel",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepeatingTimer._callback": {
            "name": "_callback",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ST-OpenUri-st4/plugin/types.py": {},
    "ST-OpenUri-st4/plugin/utils.py": {
        "simple_decorator": {
            "name": "simple_decorator",
            "location": 24,
            "return": [
                "Callable[([AnyCallable], AnyCallable)]"
            ],
            "arguments": {
                "decorator": [
                    "Callable"
                ]
            }
        },
        "dotted_get": {
            "name": "dotted_get",
            "location": 38,
            "return": [
                "Tuple[str, str]",
                "Callable[[KT], VT]",
                "str",
                "type",
                "OrderedDict",
                "int"
            ],
            "arguments": {
                "var": [
                    "str",
                    "dict",
                    "Dict[str, tuple]",
                    "Dict[str, Any]",
                    "Dict[str, Callable]"
                ],
                "dotted": [
                    "str"
                ],
                "default": [
                    "Optional[Any]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[Callable[[], None]]",
                    "Iterable[Any]",
                    "float",
                    "set"
                ]
            }
        },
        "dotted_set": {
            "name": "dotted_set",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "var": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "Union[str, bytes]",
                    "Union[str, List[str]]"
                ],
                "dotted": [
                    "str"
                ],
                "value": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "view_find_all": {
            "name": "view_find_all",
            "location": 93,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "view": [
                    "float",
                    "str",
                    "int"
                ],
                "regex_obj": [
                    "Pattern[str]"
                ],
                "expand_selectors": [
                    "Iterable[str]"
                ]
            }
        },
        "region_shift": {
            "name": "region_shift",
            "location": 140,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "region": [
                    "Union[(int, List[int], Tuple[(int, int)])]"
                ],
                "shift": [
                    "int"
                ]
            }
        },
        "region_expand": {
            "name": "region_expand",
            "location": 175,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "region": [
                    "Union[(int, List[int], Tuple[(int, int)])]"
                ],
                "expansion": [
                    "Union[(int, List[int], Tuple[(int, int)])]"
                ]
            }
        },
        "convert_to_region_tuple": {
            "name": "convert_to_region_tuple",
            "location": 200,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "region": [
                    "Union[int, float]"
                ],
                "sort": [
                    "bool"
                ]
            }
        },
        "convert_to_st_region": {
            "name": "convert_to_st_region",
            "location": 225,
            "return": [
                "dict"
            ],
            "arguments": {
                "region": [
                    "types.CategoryType",
                    "Optional[str]",
                    "bool"
                ],
                "sort": [
                    "bool"
                ]
            }
        },
        "merge_regions": {
            "name": "merge_regions",
            "location": 238,
            "return": [
                "list"
            ],
            "arguments": {
                "regions": [
                    "Iterable"
                ],
                "allow_boundary": [
                    "bool"
                ]
            }
        },
        "is_regions_intersected": {
            "name": "is_regions_intersected",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {
                "region1": [
                    "bool",
                    "str",
                    "Optional[types.FrameType]",
                    "Optional[Exception]"
                ],
                "region2": [
                    "bool",
                    "str",
                    "Optional[types.FrameType]",
                    "Optional[Exception]"
                ],
                "allow_boundary": [
                    "bool"
                ]
            }
        },
        "is_processable_view": {
            "name": "is_processable_view",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "dict",
                    "str"
                ]
            }
        },
        "is_transient_view": {
            "name": "is_transient_view",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "sublime.View"
                ]
            }
        },
        "simple_decorator.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "decoratee": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "view_find_all.expand": {
            "name": "expand",
            "location": 108,
            "return": [
                "Optional[str]",
                "Optional[bytes]",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "region": [
                    "Any",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "simple_decorator.wrapper.wrapped": {
            "name": "wrapped",
            "location": 30,
            "return": [
                "types.Resolver",
                "List[List[str]]"
            ],
            "arguments": {}
        }
    },
    "ST-OpenUri-st4/plugin/__init__.py": {
        "plugin_loaded": {
            "name": "plugin_loaded",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "plugin_loaded_real": {
            "name": "plugin_loaded_real",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "plugin_unloaded": {
            "name": "plugin_unloaded",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_settings_changed_callback": {
            "name": "_settings_changed_callback",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_init_images": {
            "name": "_init_images",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_set_is_dirty_for_all_views": {
            "name": "_set_is_dirty_for_all_views",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "is_dirty": [
                    "bool"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/commands/abstract.py": {
        "AbstractUriCommand.is_enabled": {
            "name": "is_enabled",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUriCommand.is_visible": {
            "name": "is_visible",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractUriCommand.get_uri_regions": {
            "name": "get_uri_regions",
            "location": 27,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[plugin.types.EventDict]"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/commands/copy_uri.py": {
        "AbstractCopyUriCommand.run": {
            "name": "run",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "event": [
                    "Optional[plugin.types.EventDict]"
                ],
                "unique": [
                    "bool"
                ],
                "sort": [
                    "bool"
                ]
            }
        },
        "CopyUriFromContextMenuCommand.description": {
            "name": "description",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[plugin.types.EventDict]"
                ]
            }
        },
        "CopyUriFromContextMenuCommand.is_visible": {
            "name": "is_visible",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[plugin.types.EventDict]"
                ]
            }
        },
        "CopyUriFromContextMenuCommand.want_event": {
            "name": "want_event",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyUriFromContextMenuCommand._find_url": {
            "name": "_find_url",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[plugin.types.EventDict]"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/commands/open_uri.py": {
        "AbstractOpenUriCommand.run": {
            "name": "run",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "event": [
                    "Optional[plugin.types.EventDict]"
                ],
                "browser": [
                    "str"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/commands/select_uri.py": {
        "AbstractSelectUriCommand.run": {
            "name": "run",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ],
                "event": [
                    "Optional[plugin.types.EventDict]"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/commands/__init__.py": {},
    "ST-OpenUri-st4/plugin/libs/imagesize.py": {
        "_convertToDPI": {
            "name": "_convertToDPI",
            "location": 21,
            "return": [
                "Union[str, int, float]",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "density": [
                    "int"
                ],
                "unit": [
                    "Union[str, int, float]",
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "_get": {
            "name": "_get",
            "location": 45,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "fhandle": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 141,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_from_bytes": {
            "name": "get_from_bytes",
            "location": 154,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "bytes": [
                    "str",
                    "BinaryIO",
                    "dict",
                    "bytes"
                ]
            }
        },
        "_getDPI": {
            "name": "_getDPI",
            "location": 168,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "fhandle": [
                    "str"
                ]
            }
        },
        "getDPI": {
            "name": "getDPI",
            "location": 278,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "getDPI_from_bytes": {
            "name": "getDPI_from_bytes",
            "location": 290,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "bytes": [
                    "str",
                    "bytes",
                    "io.BytesIO"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/libs/png.py": {
        "adam7_generate": {
            "name": "adam7_generate",
            "location": 215,
            "return": [
                "Generator[(Generator[(Tuple[(int, int, int)], Any, None)], Any, None)]"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float",
                    "str"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "group": {
            "name": "group",
            "location": 237,
            "return": [
                "list"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "n": [
                    "str",
                    "int"
                ]
            }
        },
        "isarray": {
            "name": "isarray",
            "location": 241,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "check_palette": {
            "name": "check_palette",
            "location": 245,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "palette": [
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "check_sizes": {
            "name": "check_sizes",
            "location": 278,
            "return": [
                "Union[(Tuple[(_T1, _T2)], _T0)]"
            ],
            "arguments": {
                "size": [
                    "_T0"
                ],
                "width": [
                    "_T1"
                ],
                "height": [
                    "_T2"
                ]
            }
        },
        "check_color": {
            "name": "check_color",
            "location": 300,
            "return": [
                "Union[(Tuple[_T0], _T0)]"
            ],
            "arguments": {
                "c": [
                    "_T0"
                ],
                "greyscale": [
                    "str",
                    "Tuple[str]"
                ],
                "which": [
                    "str",
                    "Container[str]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "write_chunk": {
            "name": "write_chunk",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": [
                    "str",
                    "AnyStr",
                    "IO[str]",
                    "bytearray"
                ],
                "tag": [
                    "str",
                    "Dict[str, str]",
                    "Callable[[str], str]",
                    "int"
                ],
                "data": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "List[int]"
                ]
            }
        },
        "write_chunks": {
            "name": "write_chunks",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "out": [
                    "BinaryIO",
                    "str",
                    "float",
                    "bool"
                ],
                "chunks": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "rescale_rows": {
            "name": "rescale_rows",
            "location": 921,
            "return": [
                "Generator[(_array.array, Any, None)]"
            ],
            "arguments": {
                "rows": [
                    "Dict[str, Any]",
                    "slice",
                    "dict",
                    "List[List[str]]",
                    "Iterator[Dict[str, Any]]"
                ],
                "rescale": [
                    "Callable[[float], float]",
                    "int",
                    "float",
                    "list",
                    "Dict[str, str]"
                ]
            }
        },
        "pack_rows": {
            "name": "pack_rows",
            "location": 951,
            "return": [
                "Generator[(bytearray, Any, None)]"
            ],
            "arguments": {
                "rows": [
                    "Dict[str, Any]",
                    "slice",
                    "dict",
                    "List[List[str]]",
                    "Iterator[Dict[str, Any]]"
                ],
                "bitdepth": [
                    "Dict[str, Any]",
                    "slice",
                    "dict",
                    "List[List[str]]",
                    "Iterator[Dict[str, Any]]"
                ]
            }
        },
        "unpack_rows": {
            "name": "unpack_rows",
            "location": 985,
            "return": [
                "Generator[(bytearray, Any, None)]"
            ],
            "arguments": {
                "rows": [
                    "Dict[str, Any]",
                    "slice",
                    "dict",
                    "List[List[str]]",
                    "Iterator[Dict[str, Any]]"
                ]
            }
        },
        "make_palette_chunks": {
            "name": "make_palette_chunks",
            "location": 994,
            "return": [
                "Tuple[(bytearray, Optional[bytearray])]"
            ],
            "arguments": {
                "palette": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "check_bitdepth_rescale": {
            "name": "check_bitdepth_rescale",
            "location": 1014,
            "return": [
                "Tuple[(Any, Optional[List[Tuple[(Any, Any)]]])]"
            ],
            "arguments": {
                "palette": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "bitdepth": [
                    "dict",
                    "str"
                ],
                "transparent": [
                    "io.TextIO",
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ],
                "alpha": [
                    "int",
                    "Callable",
                    "str"
                ],
                "greyscale": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "from_array": {
            "name": "from_array",
            "location": 1065,
            "return": [
                "Image"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[int]",
                    "List[str]"
                ],
                "mode": [
                    "str",
                    "list"
                ],
                "info": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "decompress": {
            "name": "decompress",
            "location": 2137,
            "return": [
                "Generator[(bytearray, Any, None)]"
            ],
            "arguments": {
                "data_blocks": [
                    "str",
                    "bool",
                    "Callable[..., Awaitable]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Union[str, int]]",
                    "Callable"
                ]
            }
        },
        "check_bitdepth_colortype": {
            "name": "check_bitdepth_colortype",
            "location": 2156,
            "return": [
                "None"
            ],
            "arguments": {
                "bitdepth": [
                    "str"
                ],
                "colortype": [
                    "str"
                ]
            }
        },
        "is_natural": {
            "name": "is_natural",
            "location": 2184,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "List[T]",
                    "str",
                    "int"
                ]
            }
        },
        "undo_filter_sub": {
            "name": "undo_filter_sub",
            "location": 2193,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_unit": [
                    "List[str]",
                    "list",
                    "List[Union[int, float]]",
                    "Dict[str, Dict[str, Any]]",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "Sequence[T]"
                ],
                "scanline": [
                    "float",
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "SupportsInt"
                ],
                "previous": [
                    "bool",
                    "int",
                    "Iterable[str]",
                    "List[str]"
                ],
                "result": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "List[List[str]]"
                ]
            }
        },
        "undo_filter_up": {
            "name": "undo_filter_up",
            "location": 2207,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_unit": [
                    "bool",
                    "int",
                    "Iterable[str]",
                    "List[str]"
                ],
                "scanline": [
                    "float",
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "SupportsInt"
                ],
                "previous": [
                    "float",
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "SupportsInt"
                ],
                "result": [
                    "int",
                    "float",
                    "bool",
                    "Dict[str, int]",
                    "Dict[int, str]"
                ]
            }
        },
        "undo_filter_average": {
            "name": "undo_filter_average",
            "location": 2216,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_unit": [
                    "int",
                    "List[\"Outcome\"]",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "scanline": [
                    "float",
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "SupportsInt"
                ],
                "previous": [
                    "float",
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "SupportsInt"
                ],
                "result": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "undo_filter_paeth": {
            "name": "undo_filter_paeth",
            "location": 2231,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_unit": [
                    "int",
                    "List[\"Outcome\"]",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "scanline": [
                    "float",
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "SupportsInt"
                ],
                "previous": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "dict"
                ],
                "result": [
                    "Sequence[str]",
                    "int",
                    "List[int]",
                    "List[str]",
                    "str",
                    "List[List[str]]"
                ]
            }
        },
        "convert_la_to_rgba": {
            "name": "convert_la_to_rgba",
            "location": 2258,
            "return": [
                "None"
            ],
            "arguments": {
                "row": [
                    "str",
                    "Callable",
                    "Exception",
                    "bool",
                    "Tuple[int, int]",
                    "Dict[str, Any]"
                ],
                "result": [
                    "str",
                    "Callable",
                    "Exception",
                    "bool",
                    "Tuple[int, int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "convert_l_to_rgba": {
            "name": "convert_l_to_rgba",
            "location": 2264,
            "return": [
                "None"
            ],
            "arguments": {
                "row": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "result": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "convert_rgb_to_rgba": {
            "name": "convert_rgb_to_rgba",
            "location": 2274,
            "return": [
                "None"
            ],
            "arguments": {
                "row": [
                    "int",
                    "dict",
                    "Sequence[int]"
                ],
                "result": [
                    "int",
                    "dict",
                    "Sequence[int]"
                ]
            }
        },
        "binary_stdin": {
            "name": "binary_stdin",
            "location": 2286,
            "return": [
                "BinaryIO"
            ],
            "arguments": {}
        },
        "binary_stdout": {
            "name": "binary_stdout",
            "location": 2294,
            "return": [
                "BinaryIO"
            ],
            "arguments": {}
        },
        "cli_open": {
            "name": "cli_open",
            "location": 2311,
            "return": [
                "BinaryIO"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 2317,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 326,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writer.__init__": {
            "name": "__init__",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "size": [
                    "int",
                    "Callable"
                ],
                "greyscale": [
                    "bool",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]"
                ],
                "alpha": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[bool]",
                    "int",
                    "Optional[str]",
                    "Union[None, int]",
                    "Optional[List[str]]"
                ],
                "bitdepth": [
                    "int",
                    "Optional[int]",
                    "Tuple[int]",
                    "Tuple[int, int]"
                ],
                "palette": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "transparent": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "background": [
                    "str",
                    "bool"
                ],
                "gamma": [
                    "int",
                    "float",
                    "bool"
                ],
                "compression": [
                    "int",
                    "float",
                    "bool"
                ],
                "interlace": [
                    "bool",
                    "Optional[Iterable['cirq.Qid']]",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]",
                    "int",
                    "Dict[str, int]",
                    "float"
                ],
                "planes": [
                    "int",
                    "float",
                    "bool"
                ],
                "colormap": [
                    "float",
                    "Union[int, float]",
                    "str",
                    "bool",
                    "int",
                    "Tuple[int, int]"
                ],
                "maxval": [
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ],
                "chunk_limit": [
                    "int",
                    "float",
                    "bool"
                ],
                "x_pixels_per_unit": [
                    "int",
                    "float",
                    "bool"
                ],
                "y_pixels_per_unit": [
                    "int",
                    "float",
                    "bool"
                ],
                "unit_is_meter": [
                    "bool",
                    "Optional[Iterable['cirq.Qid']]",
                    "Union[bool, List[bool]]",
                    "float"
                ]
            }
        },
        "Writer.write": {
            "name": "write",
            "location": 623,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "list",
                    "Dict[str, Any]",
                    "dict",
                    "Callable[[], bool]",
                    "Optional[int]"
                ],
                "rows": [
                    "List[str]",
                    "List[int]",
                    "Callable",
                    "list"
                ]
            }
        },
        "Writer.write_passes": {
            "name": "write_passes",
            "location": 675,
            "return": [
                "str",
                "int",
                "List[dict]",
                "bool",
                "pygame.math.Vector2",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "int",
                    "Sequence[MutableSet[int]]",
                    "str",
                    "Dict[str, str]"
                ],
                "rows": [
                    "Dict[str, Any]",
                    "list",
                    "dict",
                    "List[str]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "Writer.write_packed": {
            "name": "write_packed",
            "location": 705,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "int",
                    "Sequence[MutableSet[int]]",
                    "str",
                    "Dict[str, str]"
                ],
                "rows": [
                    "int",
                    "Sequence[MutableSet[int]]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Writer.write_preamble": {
            "name": "write_preamble",
            "location": 759,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "int"
                ]
            }
        },
        "Writer.write_array": {
            "name": "write_array",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pixels": [
                    "float",
                    "list",
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "Writer.array_scanlines": {
            "name": "array_scanlines",
            "location": 841,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "pixels": [
                    "float",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Writer.array_scanlines_interlace": {
            "name": "array_scanlines_interlace",
            "location": 855,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "pixels": [
                    "pygame.math.Vector2",
                    "str",
                    "int"
                ]
            }
        },
        "pack_rows.make_byte": {
            "name": "make_byte",
            "location": 962,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "block": [
                    "Callable",
                    "bool",
                    "Optional[List]"
                ]
            }
        },
        "Image.__init__": {
            "name": "__init__",
            "location": 1249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int",
                    "Optional[Union[int, Any]]",
                    "Optional[str]",
                    "bool",
                    "Optional[Tuple[int, int]]",
                    "Tuple[int, int]"
                ],
                "info": [
                    "int",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "Image.save": {
            "name": "save",
            "location": 1259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "Image.write": {
            "name": "write",
            "location": 1275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "Reader.__init__": {
            "name": "__init__",
            "location": 1295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_guess": [
                    "bytes",
                    "bool",
                    "str"
                ],
                "filename": [
                    "Optional[IO[bytes]]",
                    "str",
                    "Optional[TextIO]",
                    "Optional[str]"
                ],
                "file": [
                    "str"
                ],
                "bytes": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Reader.chunk": {
            "name": "chunk",
            "location": 1342,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "lenient": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Reader.chunks": {
            "name": "chunks",
            "location": 1383,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.undo_filter": {
            "name": "undo_filter",
            "location": 1394,
            "return": [
                "_T1"
            ],
            "arguments": {
                "self": [],
                "filter_type": [
                    "str",
                    "Optional[Callable]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "scanline": [
                    "_T1"
                ],
                "previous": [
                    "int",
                    "dict",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "Reader._deinterlace": {
            "name": "_deinterlace",
            "location": 1446,
            "return": [
                "Union[(bytearray, _array.array[int])]"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Reader._iter_bytes_to_values": {
            "name": "_iter_bytes_to_values",
            "location": 1497,
            "return": [
                "Generator[(Union[(bytearray, _array.array[int])], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "byte_rows": [
                    "list",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]",
                    "Optional[List]"
                ]
            }
        },
        "Reader._bytes_to_values": {
            "name": "_bytes_to_values",
            "location": 1508,
            "return": [
                "Union[(bytearray, _array.array[int])]"
            ],
            "arguments": {
                "self": [],
                "bs": [
                    "int",
                    "List[int]",
                    "List[str]"
                ],
                "width": [
                    "Optional[int]",
                    "int",
                    "Union[int, None]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Reader._iter_straight_packed": {
            "name": "_iter_straight_packed",
            "location": 1531,
            "return": [
                "Generator[(bytearray, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "byte_blocks": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Reader.validate_signature": {
            "name": "validate_signature",
            "location": 1560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.preamble": {
            "name": "preamble",
            "location": 1572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lenient": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Reader._chunk_len_type": {
            "name": "_chunk_len_type",
            "location": 1595,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.process_chunk": {
            "name": "process_chunk",
            "location": 1618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lenient": [
                    "str",
                    "float",
                    "bytes",
                    "dict",
                    "IO[str]"
                ]
            }
        },
        "Reader._process_IHDR": {
            "name": "_process_IHDR",
            "location": 1635,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Reader._process_PLTE": {
            "name": "_process_PLTE",
            "location": 1691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "list",
                    "List[str]"
                ]
            }
        },
        "Reader._process_bKGD": {
            "name": "_process_bKGD",
            "location": 1703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Reader._process_tRNS": {
            "name": "_process_tRNS",
            "location": 1714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Union[bytes, bytearray]",
                    "List[float]",
                    "bool",
                    "str"
                ]
            }
        },
        "Reader._process_gAMA": {
            "name": "_process_gAMA",
            "location": 1733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "Reader._process_sBIT": {
            "name": "_process_sBIT",
            "location": 1739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "Union[bytes, bytearray, memoryview]",
                    "dict"
                ]
            }
        },
        "Reader._process_pHYs": {
            "name": "_process_pHYs",
            "location": 1744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "List[float]",
                    "bytes"
                ]
            }
        },
        "Reader.read": {
            "name": "read",
            "location": 1753,
            "return": [
                "Tuple[(Any, Any, Generator[(Any, Any, None)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "lenient": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Reader.read_flat": {
            "name": "read_flat",
            "location": 1820,
            "return": [
                "Tuple[(Any, Any, _array.array, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.palette": {
            "name": "palette",
            "location": 1838,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "alpha": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Reader.asDirect": {
            "name": "asDirect",
            "location": 1864,
            "return": [
                "Tuple[(Any, Any, Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader._as_rescale": {
            "name": "_as_rescale",
            "location": 1978,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "get": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Optional[float]"
                ],
                "targetbitdepth": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "Reader.asRGB8": {
            "name": "asRGB8",
            "location": 1996,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.asRGBA8": {
            "name": "asRGBA8",
            "location": 2019,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.asRGB": {
            "name": "asRGB",
            "location": 2031,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.asRGBA": {
            "name": "asRGBA",
            "location": 2073,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writer.write.check_rows": {
            "name": "check_rows",
            "location": 644,
            "return": [
                ""
            ],
            "arguments": {
                "rows": [
                    "int",
                    "Dict[str, str]",
                    "Sequence[MutableMapping]",
                    "List[str]"
                ]
            }
        },
        "Reader.read.iteridat": {
            "name": "iteridat",
            "location": 1767,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader._as_rescale.iterscale": {
            "name": "iterscale",
            "location": 1987,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.asRGB.iterrgb": {
            "name": "iterrgb",
            "location": 2064,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.read.rows_from_interlace": {
            "name": "rows_from_interlace",
            "location": 1787,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.asDirect.iterpal": {
            "name": "iterpal",
            "location": 1924,
            "return": [
                ""
            ],
            "arguments": {
                "pixels": [
                    "str",
                    "int",
                    "bool",
                    "Union[str, List[str]]"
                ]
            }
        },
        "Reader.asDirect.itershift": {
            "name": "itershift",
            "location": 1971,
            "return": [
                ""
            ],
            "arguments": {
                "pixels": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Reader.asRGB.newarray": {
            "name": "newarray",
            "location": 2061,
            "return": [],
            "arguments": {}
        },
        "Reader.asRGBA.newarray": {
            "name": "newarray",
            "location": 2099,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Reader.asRGBA.convert": {
            "name": "convert",
            "location": 2125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reader.asDirect.itertrns": {
            "name": "itertrns",
            "location": 1945,
            "return": [
                ""
            ],
            "arguments": {
                "pixels": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "ST-OpenUri-st4/plugin/libs/triegex/__init__.py": {
        "TriegexNode.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ],
                "end": [
                    "bool"
                ]
            }
        },
        "TriegexNode.__iter__": {
            "name": "__iter__",
            "location": 22,
            "return": [
                "listiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriegexNode.__len__": {
            "name": "__len__",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriegexNode.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriegexNode.__contains__": {
            "name": "__contains__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "TriegexNode.__getitem__": {
            "name": "__getitem__",
            "location": 34,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "tuple",
                    "tuple[]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable[[KT], VT]",
                    "typing.Callable[T, T]",
                    "Type[RuntimeError]",
                    "typing.Type"
                ]
            }
        },
        "TriegexNode.__delitem__": {
            "name": "__delitem__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "tuple",
                    "tuple[]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable[[KT], VT]",
                    "typing.Callable[T, T]",
                    "Type[RuntimeError]",
                    "typing.Type"
                ]
            }
        },
        "TriegexNode.to_regex": {
            "name": "to_regex",
            "location": 40,
            "return": [
                "None",
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Triegex.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Triegex.add": {
            "name": "add",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "Triegex.to_regex": {
            "name": "to_regex",
            "location": 119,
            "return": [
                "str",
                "dict",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Triegex._traverse": {
            "name": "_traverse",
            "location": 130,
            "return": [
                "Generator[(TriegexNode, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Triegex.__iter__": {
            "name": "__iter__",
            "location": 138,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Triegex.__len__": {
            "name": "__len__",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Triegex.__contains__": {
            "name": "__contains__",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Triegex.discard": {
            "name": "discard",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    }
}
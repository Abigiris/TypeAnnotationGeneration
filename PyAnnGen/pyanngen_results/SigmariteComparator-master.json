{
    "SigmariteComparator-master/test.py": {},
    "SigmariteComparator-master/sigmar/__init__.py": {},
    "SigmariteComparator-master/sigmar/basics/base.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int"
                ],
                "width": [
                    "Optional[int]"
                ]
            }
        },
        "Base.surface": {
            "name": "surface",
            "location": 11,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SigmariteComparator-master/sigmar/basics/roll.py": {
        "Roll.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_value": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Roll.chances": {
            "name": "chances",
            "location": 16,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int"
                ]
            }
        },
        "Roll.success": {
            "name": "success",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "Roll.fail": {
            "name": "fail",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "Roll.critic_given_success": {
            "name": "critic_given_success",
            "location": 43,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "Roll.no_critic_given_success": {
            "name": "no_critic_given_success",
            "location": 49,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "Roll.average": {
            "name": "average",
            "location": 55,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "dices": [
                    "int",
                    "Callable",
                    "str"
                ],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "Roll.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SigmariteComparator-master/sigmar/basics/rules.py": {
        "Rule.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "effect": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Rule.apply": {
            "name": "apply",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Spell.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "power": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "effect": [
                    "str",
                    "float"
                ]
            }
        },
        "Spell.apply": {
            "name": "apply",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "list",
                    "str",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CommandAbility.apply": {
            "name": "apply",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "CommentRule.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "comment": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "CommentRule.apply": {
            "name": "apply",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TodoRule.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TodoRule.apply": {
            "name": "apply",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        }
    },
    "SigmariteComparator-master/sigmar/basics/string_constants.py": {},
    "SigmariteComparator-master/sigmar/basics/unit.py": {
        "Unit.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "weapons": [
                    "List[sigmar.basics.weapon.Weapon]"
                ],
                "move": [
                    "Union[(int, str, sigmar.basics.value.Value, Dict[(int, Union[(int, str, sigmar.basics.value.Value)])])]"
                ],
                "save": [
                    "int"
                ],
                "bravery": [
                    "int"
                ],
                "wounds": [
                    "int"
                ],
                "min_size": [
                    "int"
                ],
                "base": [
                    "sigmar.basics.base.Base"
                ],
                "rules": [
                    "List[sigmar.basics.rules.Rule]"
                ],
                "keywords": [
                    "List[str]"
                ],
                "cast": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "unbind": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "named": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "max_size": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Unit.formation": {
            "name": "formation",
            "location": 67,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "front_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "Unit.describe_formation": {
            "name": "describe_formation",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "front_size": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Unit.average_damage": {
            "name": "average_damage",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "front_size": [
                    "int",
                    "Callable[[T], List[T]]",
                    "str",
                    "Set[str]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "Unit.average_health": {
            "name": "average_health",
            "location": 117,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Unit.average_speed": {
            "name": "average_speed",
            "location": 127,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Unit.speed_grade": {
            "name": "speed_grade",
            "location": 135,
            "return": [
                "int",
                "str",
                "Union[float, cirq.value.Symbol]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Unit.speed_description": {
            "name": "speed_description",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Unit.magic_power": {
            "name": "magic_power",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Unit.unbind_power": {
            "name": "unbind_power",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Unit.morale_grade": {
            "name": "morale_grade",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "WeaponRule.apply": {
            "name": "apply",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "dict[, ]",
                    "Union[int, slice]",
                    "int",
                    "Dict[str, bool]",
                    "dict[str, bool]"
                ]
            }
        },
        "SpecialUser.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_args": [
                    "tuple"
                ],
                "parent_rules": [
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Sequence[Tuple[str, str]]",
                    "str",
                    "typing.Sequence[tuple[typing.Union[str,str]]]"
                ],
                "parent_kwargs": [
                    "dict"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "weapons": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "rules": [
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Sequence[Tuple[str, str]]",
                    "str",
                    "typing.Sequence[tuple[typing.Union[str,str]]]"
                ],
                "max_amount": [
                    "bool",
                    "str",
                    "int",
                    "None",
                    "Optional[int]"
                ]
            }
        }
    },
    "SigmariteComparator-master/sigmar/basics/unit_rules.py": {
        "can_reroll_x_dice_during_game": {
            "name": "can_reroll_x_dice_during_game",
            "location": 9,
            "return": [
                "Callable[([sigmar.basics.unit.Unit], Any)]"
            ],
            "arguments": {
                "amount": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ]
            }
        },
        "extra_save": {
            "name": "extra_save",
            "location": 15,
            "return": [
                "Callable[([sigmar.basics.unit.Unit], Any)]"
            ],
            "arguments": {
                "roll": [
                    "int"
                ]
            }
        },
        "regeneration": {
            "name": "regeneration",
            "location": 21,
            "return": [
                "Callable[([sigmar.basics.unit.Unit], Any)]"
            ],
            "arguments": {
                "amount": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ]
            }
        },
        "can_steal_spells": {
            "name": "can_steal_spells",
            "location": 27,
            "return": [
                "Callable[([sigmar.basics.unit.Unit], Any)]"
            ],
            "arguments": {
                "range_": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ],
                "chances": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ],
                "tries_per_turn": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ]
            }
        },
        "copy_spells": {
            "name": "copy_spells",
            "location": 38,
            "return": [
                "Callable[([sigmar.basics.unit.Unit], Any)]"
            ],
            "arguments": {
                "range_": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ]
            }
        },
        "fly": {
            "name": "fly",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "reroll_1_save": {
            "name": "reroll_1_save",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "ignore_1_rend": {
            "name": "ignore_1_rend",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "ignore_2_rend": {
            "name": "ignore_2_rend",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "march_double": {
            "name": "march_double",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "charge_at_3d6": {
            "name": "charge_at_3d6",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "run_and_charge": {
            "name": "run_and_charge",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "can_reroll_x_dice_during_game.rule_func": {
            "name": "rule_func",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "u": []
            }
        },
        "extra_save.rule_func": {
            "name": "rule_func",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "u": []
            }
        },
        "regeneration.rule_func": {
            "name": "rule_func",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "u": []
            }
        },
        "can_steal_spells.rule_func": {
            "name": "rule_func",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "u": []
            }
        },
        "copy_spells.rule_func": {
            "name": "rule_func",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "u": [
                    "List[Dict[str, Any]]",
                    "str",
                    "sigmar.basics.uniUnit",
                    "int"
                ]
            }
        }
    },
    "SigmariteComparator-master/sigmar/basics/value.py": {
        "make_dice_value": {
            "name": "make_dice_value",
            "location": 212,
            "return": [
                "Value"
            ],
            "arguments": {
                "amount": [
                    "int"
                ],
                "val": [
                    "int"
                ]
            }
        },
        "_value": {
            "name": "_value",
            "location": 219,
            "return": [
                "Value"
            ],
            "arguments": {
                "defined_value": [
                    "Union[(Value, int, str)]"
                ]
            }
        },
        "value": {
            "name": "value",
            "location": 265,
            "return": [
                "MonsterValue",
                "int",
                "bool",
                "Union[int, Tuple[int, ...]]",
                "float",
                "Dict[str, str]"
            ],
            "arguments": {
                "defined_value": [
                    "Union[(Value, int, str, Dict[(int, Union[(Value, int, str)])])]"
                ]
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.average": {
            "name": "average",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Union[int, float]",
                    "sigmar.basics.uniUnit",
                    "bool",
                    "dict"
                ]
            }
        },
        "Value._average": {
            "name": "_average",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Value.max": {
            "name": "max",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Union[int, float]",
                    "sigmar.basics.uniUnit",
                    "bool",
                    "dict"
                ]
            }
        },
        "Value._max": {
            "name": "_max",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Value.potential_values": {
            "name": "potential_values",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Union[int, float]",
                    "sigmar.basics.uniUnit",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "Value._potential_values": {
            "name": "_potential_values",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "Value.__add__": {
            "name": "__add__",
            "location": 52,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "typing.AbstractSet",
                    "AbstractSet",
                    "typing.Callable[int, bool]",
                    "Callable[[int], bool]",
                    "Iterable[int]"
                ]
            }
        },
        "Value.__mul__": {
            "name": "__mul__",
            "location": 57,
            "return": [
                "Value",
                "str",
                "FixedValue",
                "MultValue",
                "Optional[bool]",
                "bool",
                "float",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "Value.__sub__": {
            "name": "__sub__",
            "location": 66,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Iterable[T]]",
                    "typing.Iterable[typing.Iterable[T]]"
                ]
            }
        },
        "SumValue.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val_1": [
                    "Value"
                ],
                "val_2": [
                    "Value"
                ]
            }
        },
        "SumValue._average": {
            "name": "_average",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "SumValue._max": {
            "name": "_max",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "SumValue._potential_values": {
            "name": "_potential_values",
            "location": 84,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "SumValue.__str__": {
            "name": "__str__",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultValue.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val_1": [
                    "Value"
                ],
                "val_2": [
                    "Value"
                ]
            }
        },
        "MultValue._average": {
            "name": "_average",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MultValue._max": {
            "name": "_max",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MultValue._potential_values": {
            "name": "_potential_values",
            "location": 106,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MultValue.__str__": {
            "name": "__str__",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomValue.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "probas": [
                    "Dict[(int, float)]"
                ]
            }
        },
        "RandomValue._average": {
            "name": "_average",
            "location": 121,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RandomValue._max": {
            "name": "_max",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RandomValue._potential_values": {
            "name": "_potential_values",
            "location": 127,
            "return": [
                "List[Tuple[(int, float)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "RandomValue.__str__": {
            "name": "__str__",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedValue.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defined_value": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FixedValue._average": {
            "name": "_average",
            "location": 140,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "FixedValue._max": {
            "name": "_max",
            "location": 143,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "FixedValue._potential_values": {
            "name": "_potential_values",
            "location": 146,
            "return": [
                "List[Tuple[(Any, int)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "FixedValue.__str__": {
            "name": "__str__",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedValue.__eq__": {
            "name": "__eq__",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "DiceValue.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defined_value": [
                    "int"
                ]
            }
        },
        "DiceValue._average": {
            "name": "_average",
            "location": 163,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "DiceValue._max": {
            "name": "_max",
            "location": 166,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "DiceValue._potential_values": {
            "name": "_potential_values",
            "location": 169,
            "return": [
                "List[Tuple[(int, float)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "DiceValue.__str__": {
            "name": "__str__",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllInRangeValue._average": {
            "name": "_average",
            "location": 178,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "AllInRangeValue._max": {
            "name": "_max",
            "location": 184,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "AllInRangeValue._potential_values": {
            "name": "_potential_values",
            "location": 190,
            "return": [
                "List[Tuple[(int, float)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MoveAcrossValue._average": {
            "name": "_average",
            "location": 196,
            "return": [
                "int",
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MoveAcrossValue._max": {
            "name": "_max",
            "location": 201,
            "return": [
                "int",
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MoveAcrossValue._potential_values": {
            "name": "_potential_values",
            "location": 206,
            "return": [
                "Union[(int, List[Tuple[(Any, int)]])]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MonsterValue.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Dict[(int, Union[(Value, int, str)])]"
                ]
            }
        },
        "MonsterValue._average": {
            "name": "_average",
            "location": 243,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MonsterValue._max": {
            "name": "_max",
            "location": 249,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MonsterValue._potential_values": {
            "name": "_potential_values",
            "location": 255,
            "return": [
                "str",
                "int",
                "tuple",
                "List[int]",
                "Callable[[Mapping], T]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "MonsterValue.__str__": {
            "name": "__str__",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OncePerGame.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defined_value": [
                    "Union[(Value, int, str)]"
                ]
            }
        },
        "OncePerGame._average": {
            "name": "_average",
            "location": 279,
            "return": [
                "float",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "OncePerGame._max": {
            "name": "_max",
            "location": 282,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "OncePerGame._potential_values": {
            "name": "_potential_values",
            "location": 285,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ]
            }
        },
        "OncePerGame.__str__": {
            "name": "__str__",
            "location": 291,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SigmariteComparator-master/sigmar/basics/warscroll.py": {
        "weapon_choice_id": {
            "name": "weapon_choice_id",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "weapon_list": [
                    "List[Union[(sigmar.basics.rules.Rule, sigmar.basics.weapon.Weapon)]]"
                ]
            }
        },
        "selective_weapon_choice_id": {
            "name": "selective_weapon_choice_id",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "weapon_list": [
                    "List[Union[(sigmar.basics.rules.Rule, sigmar.basics.weapon.Weapon)]]"
                ],
                "all_choices": [
                    "List[List[Union[(sigmar.basics.rules.Rule, sigmar.basics.weapon.Weapon)]]]"
                ]
            }
        },
        "option_combinations": {
            "name": "option_combinations",
            "location": 34,
            "return": [
                "List[List[dict]]"
            ],
            "arguments": {
                "all_options": [
                    "List[dict]"
                ],
                "all_variants": [
                    "dict[, ]",
                    "str",
                    "int",
                    "dict"
                ],
                "variant_id": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "option_version_short_id": {
            "name": "option_version_short_id",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "option": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Union[Any, str]]",
                    "dict[str, typing.Union[typing.Any,str]]"
                ],
                "all_options": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Union[int,str]]",
                    "Dict[str, Union[int, str]]",
                    "dict[int, dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "dict[str, float]",
                    "Dict[int, Dict[str, Any]]",
                    "dict[str, int]",
                    "Dict[str, float]",
                    "Dict[str, int]"
                ],
                "all_variants": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "option_version_id": {
            "name": "option_version_id",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "option": [
                    "dict[, ]",
                    "dict",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[str]",
                    "int"
                ],
                "all_options": [
                    "dict",
                    "dict[, ]"
                ],
                "all_variants": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "bytes",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "bool"
                ],
                "current_id": [
                    "Dict[str, str]",
                    "int",
                    "dict[str, str]",
                    "Optional[str]",
                    "str",
                    "Iterator[Any]",
                    "None",
                    "typing.Iterator"
                ]
            }
        },
        "formatted_scrolls": {
            "name": "formatted_scrolls",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "warscroll_list": [
                    "List[Warscroll]"
                ],
                "context": [
                    "dict"
                ]
            }
        },
        "Warscroll.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "weapon_options": [
                    "List[List[Union[(sigmar.basics.rules.Rule, sigmar.basics.weapon.Weapon)]]]"
                ]
            }
        },
        "Warscroll.average_damage": {
            "name": "average_damage",
            "location": 126,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "armour": [
                    "sigmar.basics.roll.Roll"
                ],
                "data": [
                    "dict"
                ],
                "front_size": [
                    "int",
                    "bytes",
                    "dict"
                ],
                "nb": [
                    "int",
                    "bytes",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Warscroll.average_health": {
            "name": "average_health",
            "location": 129,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict",
                    "dict[, ]",
                    "Optional[Tuple[str, ...]]",
                    "tuple[typing.Union[str,...]]",
                    "Dict[str, float]",
                    "None",
                    "List[float]",
                    "dict[str, float]",
                    "list[float]"
                ],
                "nb": [
                    "dict",
                    "None",
                    "Optional[Tuple[str, ...]]",
                    "dict[, ]",
                    "Dict[str, float]",
                    "tuple[typing.Union[str,...]]",
                    "List[float]",
                    "dict[str, float]",
                    "list[float]"
                ]
            }
        },
        "Warscroll.stats": {
            "name": "stats",
            "location": 132,
            "return": [
                "Dict[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "armour": [
                    "sigmar.basics.roll.Roll"
                ],
                "context": [
                    "dict"
                ],
                "front_size": [
                    "int",
                    "str",
                    "float",
                    "List[float]"
                ],
                "nb": [
                    "str",
                    "None",
                    "float",
                    "int",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "Warscroll.simplest_stats": {
            "name": "simplest_stats",
            "location": 137,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "front_size": [
                    "int",
                    "Deque[int]",
                    "str",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "max_variants": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "keyword": [
                    "None",
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[str]",
                    "typing.Mapping",
                    "Optional[Mapping[str, str]]",
                    "list[str]",
                    "List[str]",
                    "bool"
                ],
                "do_print": [
                    "bool",
                    "int",
                    "float",
                    "list",
                    "List[List[int]]"
                ]
            }
        }
    },
    "SigmariteComparator-master/sigmar/basics/weapon.py": {
        "cleaned_dict_list": {
            "name": "cleaned_dict_list",
            "location": 148,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "list_of_dicts": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]"
                ],
                "keys_to_keep": [
                    "Optional[str]",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "compute_potential_damage": {
            "name": "compute_potential_damage",
            "location": 162,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "damage": [
                    "dict"
                ],
                "context": [
                    "dict",
                    "dict[, ]"
                ],
                "potential_unsaved": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "compute_potential_wounds": {
            "name": "compute_potential_wounds",
            "location": 193,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "float",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "potential_hits": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "float",
                    "Dict[str, Any]"
                ],
                "towound": [
                    "dict",
                    "float",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "compute_potential_hits": {
            "name": "compute_potential_hits",
            "location": 214,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "potential_attacks": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "tohit": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "binomial": {
            "name": "binomial",
            "location": 252,
            "return": [
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool",
                    "str"
                ],
                "k": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "probability_of_hit_and_crit": {
            "name": "probability_of_hit_and_crit",
            "location": 259,
            "return": [
                "float"
            ],
            "arguments": {
                "dices": [
                    "float",
                    "str"
                ],
                "success": [
                    "float",
                    "str"
                ],
                "crit": [],
                "roll": [
                    "sigmar.basics.roll.Roll"
                ],
                "context": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bytes",
                    "dict[, ]",
                    "sigmar.basics.roll.Roll",
                    "dict"
                ]
            }
        },
        "probability_of_wound_and_crit": {
            "name": "probability_of_wound_and_crit",
            "location": 268,
            "return": [
                "float"
            ],
            "arguments": {
                "dices": [
                    "float",
                    "Callable"
                ],
                "success": [
                    "dict",
                    "Type[T]",
                    "Mapping",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "List[dict]"
                ],
                "crit": [
                    "str",
                    "Union[str, dict]"
                ],
                "roll": [
                    "sigmar.basics.roll.Roll"
                ],
                "context": [
                    "str",
                    "type",
                    "bytes",
                    "typing.Type",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "crit_hit": [
                    "Sequence['cirq.Qid']",
                    "int"
                ]
            }
        },
        "probability_of_save_fail": {
            "name": "probability_of_save_fail",
            "location": 294,
            "return": [
                "float"
            ],
            "arguments": {
                "dices": [
                    "float",
                    "str"
                ],
                "success": [
                    "float",
                    "str",
                    "Tuple[str, float]"
                ],
                "after_crit_wound": [
                    "int",
                    "float",
                    "str",
                    "Tuple[str, float]",
                    "Optional[str]"
                ],
                "roll": [
                    "sigmar.basics.roll.Roll"
                ],
                "context": [
                    "str",
                    "bool",
                    "sigmar.basics.roll.Roll"
                ],
                "rend": [
                    "str",
                    "bool",
                    "sigmar.basics.roll.Roll"
                ],
                "crit_wnd": [
                    "int",
                    "str",
                    "float",
                    "Tuple[str, float]"
                ]
            }
        },
        "Weapon.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "range_": [
                    "Union[(int, str, sigmar.basics.value.Value, Dict[(int, Union[(int, str, sigmar.basics.value.Value)])])]"
                ],
                "attacks": [
                    "Union[(int, str, sigmar.basics.value.Value, Dict[(int, Union[(int, str, sigmar.basics.value.Value)])])]"
                ],
                "tohit": [
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "bool",
                    "None",
                    "Sequence",
                    "Optional[str]"
                ],
                "towound": [
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "bool",
                    "None",
                    "Sequence",
                    "Optional[str]"
                ],
                "rend": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "damage": [
                    "Union[(int, str, sigmar.basics.value.Value, Dict[(int, Union[(int, str, sigmar.basics.value.Value)])])]"
                ],
                "rules": [
                    "List[sigmar.basics.rules.Rule]"
                ]
            }
        },
        "Weapon.average_hits": {
            "name": "average_hits",
            "location": 43,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "dices": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "extra_data": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Weapon.average_wounds": {
            "name": "average_wounds",
            "location": 46,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "self": [],
                "dices": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "extra_data": [
                    "dict"
                ],
                "mod": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Weapon.unsaved_chances": {
            "name": "unsaved_chances",
            "location": 49,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "extra_data": [
                    "dict"
                ],
                "extra_rend": [
                    "int",
                    "Callable",
                    "Optional[int]",
                    "bytearray"
                ]
            }
        },
        "Weapon.average_damage": {
            "name": "average_damage",
            "location": 53,
            "return": [
                "int",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict"
                ],
                "users": [
                    "int",
                    "Optional[\"Frame\"]",
                    "dict"
                ]
            }
        },
        "Weapon.attack_round": {
            "name": "attack_round",
            "location": 61,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "users": [
                    "int",
                    "dict",
                    "set"
                ]
            }
        }
    },
    "SigmariteComparator-master/sigmar/basics/weapon_rules.py": {
        "deal_x_mortal_wound_on_roll": {
            "name": "deal_x_mortal_wound_on_roll",
            "location": 19,
            "return": [
                "Callable[([sigmar.basics.weapon.Weapon], Any)]"
            ],
            "arguments": {
                "mortal_wounds": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ],
                "roll": [
                    "sigmar.basics.roll.Roll"
                ]
            }
        },
        "deal_x_mortal_wound_crit_tohit": {
            "name": "deal_x_mortal_wound_crit_tohit",
            "location": 31,
            "return": [
                "Callable[([sigmar.basics.weapon.Weapon], Any)]"
            ],
            "arguments": {
                "mortal_wounds": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ]
            }
        },
        "impact_x_mortal_wound": {
            "name": "impact_x_mortal_wound",
            "location": 40,
            "return": [
                "Callable[([sigmar.basics.weapon.Weapon], Any)]"
            ],
            "arguments": {
                "mortal_wounds": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ]
            }
        },
        "hits_on_crit": {
            "name": "hits_on_crit",
            "location": 49,
            "return": [
                "Callable[([sigmar.basics.weapon.Weapon], Any)]"
            ],
            "arguments": {
                "amount": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ]
            }
        },
        "plus_x_tohit_y_wounds": {
            "name": "plus_x_tohit_y_wounds",
            "location": 57,
            "return": [
                "Callable[([sigmar.basics.weapon.Weapon], Any)]"
            ],
            "arguments": {
                "hit_bonus": [
                    "int"
                ],
                "min_wounds": [
                    "int"
                ]
            }
        },
        "extra_attacks_in_charge": {
            "name": "extra_attacks_in_charge",
            "location": 68,
            "return": [
                "Callable[([sigmar.basics.weapon.Weapon], Any)]"
            ],
            "arguments": {
                "extra_attacks": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ]
            }
        },
        "multiple_hits": {
            "name": "multiple_hits",
            "location": 78,
            "return": [
                "Callable[([sigmar.basics.weapon.Weapon], Any)]"
            ],
            "arguments": {
                "hits": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ]
            }
        },
        "extra_damage_on_keyword": {
            "name": "extra_damage_on_keyword",
            "location": 86,
            "return": [
                "Callable[([sigmar.basics.weapon.Weapon], Any)]"
            ],
            "arguments": {
                "extra_damage": [
                    "Union[(int, str, sigmar.basics.value.Value)]"
                ],
                "keyword": [
                    "str"
                ]
            }
        },
        "reroll_1_tohit": {
            "name": "reroll_1_tohit",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "reroll_all_tohit": {
            "name": "reroll_all_tohit",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "add_mw_on_6_towound_in_charge": {
            "name": "add_mw_on_6_towound_in_charge",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "plus_1_towound_in_charge": {
            "name": "plus_1_towound_in_charge",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "extra_hit_on_crit": {
            "name": "extra_hit_on_crit",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "d3_mw_on_4_if_wounded": {
            "name": "d3_mw_on_4_if_wounded",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "auto_wound_on_crit_hit": {
            "name": "auto_wound_on_crit_hit",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "extra_attack_on_hit": {
            "name": "extra_attack_on_hit",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "d6_dmg_on_crit": {
            "name": "d6_dmg_on_crit",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "extra_3_rend_on_crit_hit": {
            "name": "extra_3_rend_on_crit_hit",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "deal_x_mortal_wound_on_roll.rule_func": {
            "name": "rule_func",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "w": []
            }
        },
        "deal_x_mortal_wound_crit_tohit.rule_func": {
            "name": "rule_func",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "w": []
            }
        },
        "impact_x_mortal_wound.rule_func": {
            "name": "rule_func",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "w": []
            }
        },
        "hits_on_crit.rule_func": {
            "name": "rule_func",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "w": []
            }
        },
        "plus_x_tohit_y_wounds.rule_func": {
            "name": "rule_func",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "w": []
            }
        },
        "extra_attacks_in_charge.rule_func": {
            "name": "rule_func",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "w": []
            }
        },
        "multiple_hits.rule_func": {
            "name": "rule_func",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "w": []
            }
        },
        "extra_damage_on_keyword.rule_func": {
            "name": "rule_func",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "add_mw_on_6_towound_in_charge.buff": {
            "name": "buff",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "plus_1_towound_in_charge.buff": {
            "name": "buff",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "extra_hit_on_crit.buff": {
            "name": "buff",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "d3_mw_on_4_if_wounded.hellfire": {
            "name": "hellfire",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "Tuple[List[int], List[int]]",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "auto_wound_on_crit_hit.buff": {
            "name": "buff",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "extra_attack_on_hit.buff": {
            "name": "buff",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "d6_dmg_on_crit.buff": {
            "name": "buff",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "extra_3_rend_on_crit_hit.buff": {
            "name": "buff",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "List['PlotInfo']"
                ]
            }
        },
        "deal_x_mortal_wound_on_roll.rule_func.buff": {
            "name": "buff",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "deal_x_mortal_wound_crit_tohit.rule_func.buff": {
            "name": "buff",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "impact_x_mortal_wound.rule_func.buff": {
            "name": "buff",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "hits_on_crit.rule_func.buff": {
            "name": "buff",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "plus_x_tohit_y_wounds.rule_func.buff": {
            "name": "buff",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "extra_attacks_in_charge.rule_func.buff": {
            "name": "buff",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "multiple_hits.rule_func.buff": {
            "name": "buff",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "extra_damage_on_keyword.rule_func.buff": {
            "name": "buff",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "SigmariteComparator-master/sigmar/basics/__init__.py": {},
    "SigmariteComparator-master/sigmar/compendium/generic_keywords.py": {},
    "SigmariteComparator-master/sigmar/compendium/seraphon.py": {
        "ordered_cohort": {
            "name": "ordered_cohort",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "celestial_cohort": {
            "name": "celestial_cohort",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "dead_for_innumerable_ages": {
            "name": "dead_for_innumerable_ages",
            "location": 57,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "fury_of_the_seraphon": {
            "name": "fury_of_the_seraphon",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "cloak_of_feathers": {
            "name": "cloak_of_feathers",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "star_venom": {
            "name": "star_venom",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "steel_trap_jaws": {
            "name": "steel_trap_jaws",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "piercing_barbs": {
            "name": "piercing_barbs",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "impervious_defense": {
            "name": "impervious_defense",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "ordered_cohort.buff": {
            "name": "buff",
            "location": 29,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "ordered_cohort.attack": {
            "name": "attack",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "int"
                ]
            }
        },
        "celestial_cohort.buff": {
            "name": "buff",
            "location": 46,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "star_venom.buff": {
            "name": "buff",
            "location": 317,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "steel_trap_jaws.buff": {
            "name": "buff",
            "location": 338,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "piercing_barbs.buff": {
            "name": "buff",
            "location": 370,
            "return": [
                "tuple[int]",
                "str",
                "List[float]",
                "dict",
                "Dict[str, Any]",
                "float",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "List['PlotInfo']"
                ]
            }
        }
    },
    "SigmariteComparator-master/sigmar/compendium/stormcast_eternals.py": {
        "lightning_hammer": {
            "name": "lightning_hammer",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "stormstrike_glaive": {
            "name": "stormstrike_glaive",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "plus_1_tohit_chaos": {
            "name": "plus_1_tohit_chaos",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "rapid_fire": {
            "name": "rapid_fire",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "thunderbolt": {
            "name": "thunderbolt",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "lightning_hammer.buff": {
            "name": "buff",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "stormstrike_glaive.extra_damage": {
            "name": "extra_damage",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Mapping[str, Any]",
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "stormstrike_glaive.extra_rend": {
            "name": "extra_rend",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Mapping[str, Any]",
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "plus_1_tohit_chaos.buff": {
            "name": "buff",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "rapid_fire.buff": {
            "name": "buff",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "thunderbolt.buff": {
            "name": "buff",
            "location": 180,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "SigmariteComparator-master/sigmar/compendium/sylvaneth.py": {
        "impale": {
            "name": "impale",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "impenetrable_thicket": {
            "name": "impenetrable_thicket",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "impale.buff": {
            "name": "buff",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "impenetrable_thicket.buff": {
            "name": "buff",
            "location": 56,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "SigmariteComparator-master/sigmar/compendium/tzeench_arcanites.py": {
        "mastery_of_magic": {
            "name": "mastery_of_magic",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "arcane_tome": {
            "name": "arcane_tome",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "fortune_and_fate": {
            "name": "fortune_and_fate",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "scrolls_of_sorcery": {
            "name": "scrolls_of_sorcery",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "flickering_flames": {
            "name": "flickering_flames",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "deamon_icon_bearer": {
            "name": "deamon_icon_bearer",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "sorcerous_elixir": {
            "name": "sorcerous_elixir",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "magic_touched": {
            "name": "magic_touched",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "warptongue_blade": {
            "name": "warptongue_blade",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "brutal_rage": {
            "name": "brutal_rage",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "u": [
                    "sigmar.basics.unit.Unit"
                ]
            }
        },
        "savagery_unleashed_func": {
            "name": "savagery_unleashed_func",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [
                    "sigmar.basics.weapon.Weapon"
                ]
            }
        },
        "flickering_flames.buff": {
            "name": "buff",
            "location": 193,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "warptongue_blade.buff": {
            "name": "buff",
            "location": 293,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "brutal_rage.buff": {
            "name": "buff",
            "location": 327,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "brutal_rage.debuff": {
            "name": "debuff",
            "location": 334,
            "return": [
                "int"
            ],
            "arguments": {
                "data": []
            }
        },
        "savagery_unleashed_func.buff": {
            "name": "buff",
            "location": 356,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "SigmariteComparator-master/sigmar/compendium/__init__.py": {},
    "SigmariteComparator-master/tests/conftest.py": {},
    "SigmariteComparator-master/tests/basics/test_base.py": {
        "test_base_surface": {
            "name": "test_base_surface",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "SigmariteComparator-master/tests/basics/test_roll.py": {
        "test_4plus_is_fifty_fifty": {
            "name": "test_4plus_is_fifty_fifty",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_average_of_3_5plus_is_one": {
            "name": "test_average_of_3_5plus_is_one",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "SigmariteComparator-master/tests/basics/test_value.py": {
        "test_average_1_is_1": {
            "name": "test_average_1_is_1",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_1_is_1": {
            "name": "test_max_1_is_1",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_average_d6_is_35": {
            "name": "test_average_d6_is_35",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_d6_is_6": {
            "name": "test_max_d6_is_6",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_apply_extras_on_context": {
            "name": "test_max_apply_extras_on_context",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_average_apply_extras_on_context": {
            "name": "test_average_apply_extras_on_context",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rv_create_rv": {
            "name": "test_rv_create_rv",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_apply_extras_on_context.bonus": {
            "name": "bonus",
            "location": 35,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "test_average_apply_extras_on_context.bonus": {
            "name": "bonus",
            "location": 47,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "SigmariteComparator-master/tests/compendium/test_seraphon.py": {
        "test_saurus_stats": {
            "name": "test_saurus_stats",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_skinks_stats": {
            "name": "test_skinks_stats",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kroxigor_stats": {
            "name": "test_kroxigor_stats",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "SigmariteComparator-master/tests/compendium/test_stormcast.py": {
        "test_liberators_stats": {
            "name": "test_liberators_stats",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "SigmariteComparator-master/tests/compendium/test_sylvaneth.py": {
        "test_dryad_stats": {
            "name": "test_dryad_stats",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "SpeechCommands-RNN-master/main.py": {},
    "SpeechCommands-RNN-master/setup.py": {},
    "SpeechCommands-RNN-master/rnnhearer/api.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "input_config": [
                    "str"
                ],
                "data_dir": [
                    "str"
                ],
                "output": [
                    "str"
                ]
            }
        },
        "train_inner": {
            "name": "train_inner",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "input_config": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "Dict[str,str]",
                    "None"
                ],
                "data_dir": [
                    "str"
                ],
                "output": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]",
                    "int",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "visualize": {
            "name": "visualize",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "histories_dir": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "loss": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "acc": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "roc_auc": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "confusion_matrix": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "visualize_inner": {
            "name": "visualize_inner",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "histories_dir": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "pathlib.Path"
                ],
                "loss": [
                    "bool",
                    "str"
                ],
                "acc": [
                    "bool",
                    "str"
                ],
                "roc_auc": [
                    "bool",
                    "str"
                ],
                "confusion_matrix": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/data_manipulation.py": {
        "history_to_df": {
            "name": "history_to_df",
            "location": 82,
            "return": [
                "str",
                "bytes",
                "int",
                "Tuple[Union[str,str]]",
                "List[list[Any]]",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress"
            ],
            "arguments": {
                "history": [
                    "Dict",
                    "str",
                    "keras.callbacks.History"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 90,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "l": [
                    "int",
                    "list",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "List",
                    "Sequence",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "AudioDataGenerator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_representation": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Dict[Tuple[int,int],int]",
                    "Dict[tuple[Union[int,int]],int]"
                ],
                "kept_labels": [
                    "List[str]",
                    "pandas.DataFrame",
                    "list",
                    "List[Tuple[int, int]]",
                    "bytes",
                    "Sequence[str]",
                    "Tuple[Any, Dict[str, Any]]",
                    "List[\"Issue\"]"
                ]
            }
        },
        "AudioDataGenerator._read_wavfile": {
            "name": "_read_wavfile",
            "location": 24,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "sample_filepath": [
                    "int"
                ]
            }
        },
        "AudioDataGenerator.get_data_shape": {
            "name": "get_data_shape",
            "location": 40,
            "return": [
                "str",
                "bool",
                "BinaryIO",
                "IO[bytes]",
                "pandas.DataFrame",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "sample_filepath": [
                    "List[str]"
                ]
            }
        },
        "AudioDataGenerator.flow": {
            "name": "flow",
            "location": 47,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "int",
                    "List[tuple[Union[pathlib.Path,str]]]",
                    "List[Tuple[pathlib.Path,str]]",
                    "bool",
                    "numpy.ndarray",
                    "sklearn.model_selection.GridSearchCV",
                    "Iterable[str]"
                ],
                "batch_size": [
                    "int",
                    "List[tuple[Union[pathlib.Path,str]]]",
                    "List[Tuple[pathlib.Path,str]]",
                    "bool",
                    "numpy.ndarray",
                    "sklearn.model_selection.GridSearchCV",
                    "Iterable[str]"
                ]
            }
        },
        "AudioDataGenerator.flow_in_memory": {
            "name": "flow_in_memory",
            "location": 60,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "int",
                    "List[tuple[Union[pathlib.Path,str]]]",
                    "List[Tuple[pathlib.Path,str]]",
                    "List[str]",
                    "List",
                    "None",
                    "pandas.Series",
                    "bool",
                    "Optional[List[str]]",
                    "numpy.ndarray"
                ],
                "batch_size": [
                    "int",
                    "List[tuple[Union[pathlib.Path,str]]]",
                    "List[Tuple[pathlib.Path,str]]",
                    "List[str]",
                    "List",
                    "None",
                    "pandas.Series",
                    "bool",
                    "Optional[List[str]]",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/data_reader.py": {
        "DataReader.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ],
                "validation_file_path": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        },
        "DataReader._validate_input": {
            "name": "_validate_input",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataReader._check_if_contains_samples": {
            "name": "_check_if_contains_samples",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataReader.read": {
            "name": "read",
            "location": 74,
            "return": [
                "Tuple[(list, List[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "recognized_labels": [
                    "float",
                    "List[str]",
                    "Sequence[str]"
                ],
                "unknown_percentage": [
                    "int",
                    "List[int]",
                    "str",
                    "Union[List[str], List[Any]]"
                ]
            }
        },
        "DataReader._find_all_wav_files": {
            "name": "_find_all_wav_files",
            "location": 133,
            "return": [
                "List[pathlib.Path]"
            ],
            "arguments": {
                "dir": [
                    "str",
                    "int",
                    "cerulean.path.AbstractPath"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/utils.py": {
        "write_pickle": {
            "name": "write_pickle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "Dict",
                    "str",
                    "T",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "filepath": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "read_pickle": {
            "name": "read_pickle",
            "location": 13,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "read_config": {
            "name": "read_config",
            "location": 20,
            "return": [
                "configparser.ConfigParser"
            ],
            "arguments": {
                "filepath": [
                    "int",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/visualization.py": {
        "plot_accuracy": {
            "name": "plot_accuracy",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "histories": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "plot_loss": {
            "name": "plot_loss",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "histories": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "plot_roc_curves": {
            "name": "plot_roc_curves",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "y_score": [
                    "numpy.ndarray",
                    "Union[int, float]"
                ],
                "y_test": [
                    "numpy.ndarray",
                    "Union[int, float]"
                ],
                "labels": [
                    "str",
                    "numpy.ndarray",
                    "Collection[int]",
                    "Sequence[Sequence[float]]",
                    "tuple",
                    "pandas.DataFrame",
                    "List[int]"
                ]
            }
        },
        "plot_confusion_matrix": {
            "name": "plot_confusion_matrix",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y_score": [
                    "int",
                    "List[List[float]]",
                    "Callable",
                    "Tuple[float, float]"
                ],
                "y_test": [
                    "int",
                    "List[List[float]]",
                    "Callable",
                    "Tuple[float, float]"
                ],
                "labels": [
                    "Dict[str,Any]",
                    "str",
                    "Dict[int,Dict[int,Any]]",
                    "Dict[int,dict[int,Any]]",
                    "numpy.ndarray",
                    "List",
                    "Optional[list]",
                    "None"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/__init__.py": {},
    "SpeechCommands-RNN-master/rnnhearer/networks/audio_representation.py": {
        "IAudioRepresentationConverter.convert_audio_signal": {
            "name": "convert_audio_signal",
            "location": 18,
            "return": [
                "List[numpy.ndarray]",
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_samples": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "RawAudioRepresentationConverter.convert_audio_signal": {
            "name": "convert_audio_signal",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "audio_samples": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "SpectrogramAudioRepresentationConverter.convert_audio_signal": {
            "name": "convert_audio_signal",
            "location": 32,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "audio_samples": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "MFCCAudioRepresentationConverter.convert_audio_signal": {
            "name": "convert_audio_signal",
            "location": 39,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "audio_samples": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "AudioRepresentationConverterFactory.create_converter": {
            "name": "create_converter",
            "location": 50,
            "return": [
                "Union[(MFCCAudioRepresentationConverter, RawAudioRepresentationConverter, SpectrogramAudioRepresentationConverter)]"
            ],
            "arguments": {
                "audio_representaion": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/networks/network_configuration.py": {
        "NetworkConfiguration.from_config": {
            "name": "from_config",
            "location": 19,
            "return": [
                "NetworkConfiguration"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNetworkConfiguration]"
                ],
                "config_parser": [
                    "List[str]",
                    "bool",
                    "configparser.ConfigParser"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/networks/sample_rnn.py": {
        "create_sample_rnn": {
            "name": "create_sample_rnn",
            "location": 6,
            "return": [
                "str",
                "django.db.models.QuerySet",
                "Dict[int, dict]",
                "List[app.models.Question]"
            ],
            "arguments": {
                "input_shape": [
                    "Tuple[int]",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "num_classes": [
                    "Tuple[int]",
                    "Dict",
                    "int",
                    "django.db.models.QuerySet",
                    "models.User"
                ]
            }
        },
        "create_network_from_config": {
            "name": "create_network_from_config",
            "location": 14,
            "return": [
                "Callable[[Dict], None]",
                "Pattern",
                "Dict[int, dict]"
            ],
            "arguments": {
                "network_configuration": [
                    "str",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "List",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "annofabapi.models.Inspection",
                    "List[Callable]",
                    "Optional[int]",
                    "Optional[List[Callable]]"
                ],
                "input_shape": [
                    "Tuple[int]",
                    "str",
                    "bool",
                    "float"
                ],
                "num_classes": [
                    "int",
                    "Dict[int,dict]",
                    "str"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/networks/__init__.py": {},
    "SpeechCommands-RNN-master/tests/test_data_manipulation.py": {},
    "SpeechCommands-RNN-master/tests/test_networks.py": {},
    "SpeechCommands-RNN-master/tests/test_sample.py": {
        "test_sample": {
            "name": "test_sample",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}